{
  "id" : 98,
  "expression" : "null",
  "projectName" : "alibaba@fastjson",
  "commitID" : "aaaa4d567086879de49e13fb6d002efaf5bc85ad",
  "filePath" : "src/main/java/com/alibaba/fastjson/util/TypeUtils.java",
  "occurrences" : 25,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 907,
      "startColumnNumber" : 30,
      "endLineNumber" : 907,
      "endColumnNumber" : 34
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 907,
        "startColumnNumber" : 16,
        "endLineNumber" : 907,
        "endColumnNumber" : 34
      },
      "nodeContext" : "annotation == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 112,
        "startLineNumber" : 907,
        "startColumnNumber" : 12,
        "endLineNumber" : 909,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (annotation == null) {\n  annotation=getSupperMethodAnnotation(clazz,method);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 5811,
        "startLineNumber" : 881,
        "startColumnNumber" : 49,
        "endLineNumber" : 1044,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String methodName=method.getName();\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  if (method.getReturnType().equals(Void.TYPE)) {\n    continue;\n  }\n  if (method.getParameterTypes().length != 0) {\n    continue;\n  }\n  if (method.getReturnType() == ClassLoader.class) {\n    continue;\n  }\n  if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n    continue;\n  }\n  JSONField annotation=method.getAnnotation(JSONField.class);\n  if (annotation == null) {\n    annotation=getSupperMethodAnnotation(clazz,method);\n  }\n  if (annotation != null) {\n    if (!annotation.serialize()) {\n      continue;\n    }\n    if (annotation.name().length() != 0) {\n      String propertyName=annotation.name();\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n      continue;\n    }\n  }\n  if (methodName.startsWith(\"get\")) {\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (methodName.equals(\"getClass\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else {\n      continue;\n    }\n    boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n    if (ignore) {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field == null) {\n      field=ParserConfig.getField(clazz,methodName.substring(3));\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n  if (methodName.startsWith(\"is\")) {\n    if (methodName.length() < 3) {\n      continue;\n    }\n    char c2=methodName.charAt(2);\n    String propertyName;\n    if (Character.isUpperCase(c2)) {\n      propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n    }\n else     if (c2 == '_') {\n      propertyName=methodName.substring(3);\n    }\n else     if (c2 == 'f') {\n      propertyName=methodName.substring(2);\n    }\n else {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 532,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5852,
        "startLineNumber" : 881,
        "startColumnNumber" : 8,
        "endLineNumber" : 1044,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Method method : clazz.getMethods()) {\n  String methodName=method.getName();\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  if (method.getReturnType().equals(Void.TYPE)) {\n    continue;\n  }\n  if (method.getParameterTypes().length != 0) {\n    continue;\n  }\n  if (method.getReturnType() == ClassLoader.class) {\n    continue;\n  }\n  if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n    continue;\n  }\n  JSONField annotation=method.getAnnotation(JSONField.class);\n  if (annotation == null) {\n    annotation=getSupperMethodAnnotation(clazz,method);\n  }\n  if (annotation != null) {\n    if (!annotation.serialize()) {\n      continue;\n    }\n    if (annotation.name().length() != 0) {\n      String propertyName=annotation.name();\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n      continue;\n    }\n  }\n  if (methodName.startsWith(\"get\")) {\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (methodName.equals(\"getClass\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else {\n      continue;\n    }\n    boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n    if (ignore) {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field == null) {\n      field=ParserConfig.getField(clazz,methodName.substring(3));\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n  if (methodName.startsWith(\"is\")) {\n    if (methodName.length() < 3) {\n      continue;\n    }\n    char c2=methodName.charAt(2);\n    String propertyName;\n    if (Character.isUpperCase(c2)) {\n      propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n    }\n else     if (c2 == '_') {\n      propertyName=methodName.substring(3);\n    }\n else     if (c2 == 'f') {\n      propertyName=methodName.substring(2);\n    }\n else {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 540,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8137,
        "startLineNumber" : 878,
        "startColumnNumber" : 111,
        "endLineNumber" : 1114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,FieldInfo> fieldInfoMap=new LinkedHashMap<String,FieldInfo>();\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (method.getReturnType().equals(Void.TYPE)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 0) {\n      continue;\n    }\n    if (method.getReturnType() == ClassLoader.class) {\n      continue;\n    }\n    if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.serialize()) {\n        continue;\n      }\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n        fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n        continue;\n      }\n    }\n    if (methodName.startsWith(\"get\")) {\n      if (methodName.length() < 4) {\n        continue;\n      }\n      if (methodName.equals(\"getClass\")) {\n        continue;\n      }\n      char c3=methodName.charAt(3);\n      String propertyName;\n      if (Character.isUpperCase(c3)) {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n else       if (c3 == '_') {\n        propertyName=methodName.substring(4);\n      }\n else       if (c3 == 'f') {\n        propertyName=methodName.substring(3);\n      }\n else {\n        continue;\n      }\n      boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n      if (ignore) {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field == null) {\n        field=ParserConfig.getField(clazz,methodName.substring(3));\n      }\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n    if (methodName.startsWith(\"is\")) {\n      if (methodName.length() < 3) {\n        continue;\n      }\n      char c2=methodName.charAt(2);\n      String propertyName;\n      if (Character.isUpperCase(c2)) {\n        propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n      }\n else       if (c2 == '_') {\n        propertyName=methodName.substring(3);\n      }\n else       if (c2 == 'f') {\n        propertyName=methodName.substring(2);\n      }\n else {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    String propertyName=field.getName();\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    if (!fieldInfoMap.containsKey(propertyName)) {\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field));\n    }\n  }\n  List<FieldInfo> fieldInfoList=new ArrayList<FieldInfo>();\n  boolean containsAll=false;\n  String[] orders=null;\n  JSONType annotation=clazz.getAnnotation(JSONType.class);\n  if (annotation != null) {\n    orders=annotation.orders();\n    if (orders != null && orders.length == fieldInfoMap.size()) {\n      containsAll=true;\n      for (      String item : orders) {\n        if (!fieldInfoMap.containsKey(item)) {\n          containsAll=false;\n          break;\n        }\n      }\n    }\n else {\n      containsAll=false;\n    }\n  }\n  if (containsAll) {\n    for (    String item : orders) {\n      FieldInfo fieldInfo=fieldInfoMap.get(item);\n      fieldInfoList.add(fieldInfo);\n    }\n  }\n else {\n    for (    FieldInfo fieldInfo : fieldInfoMap.values()) {\n      fieldInfoList.add(fieldInfo);\n    }\n    if (sorted) {\n      Collections.sort(fieldInfoList);\n    }\n  }\n  return fieldInfoList;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 798,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8244,
        "startLineNumber" : 878,
        "startColumnNumber" : 4,
        "endLineNumber" : 1114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static List<FieldInfo> computeGetters(Class<?> clazz,Map<String,String> aliasMap,boolean sorted){\n  Map<String,FieldInfo> fieldInfoMap=new LinkedHashMap<String,FieldInfo>();\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (method.getReturnType().equals(Void.TYPE)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 0) {\n      continue;\n    }\n    if (method.getReturnType() == ClassLoader.class) {\n      continue;\n    }\n    if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.serialize()) {\n        continue;\n      }\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n        fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n        continue;\n      }\n    }\n    if (methodName.startsWith(\"get\")) {\n      if (methodName.length() < 4) {\n        continue;\n      }\n      if (methodName.equals(\"getClass\")) {\n        continue;\n      }\n      char c3=methodName.charAt(3);\n      String propertyName;\n      if (Character.isUpperCase(c3)) {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n else       if (c3 == '_') {\n        propertyName=methodName.substring(4);\n      }\n else       if (c3 == 'f') {\n        propertyName=methodName.substring(3);\n      }\n else {\n        continue;\n      }\n      boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n      if (ignore) {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field == null) {\n        field=ParserConfig.getField(clazz,methodName.substring(3));\n      }\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n    if (methodName.startsWith(\"is\")) {\n      if (methodName.length() < 3) {\n        continue;\n      }\n      char c2=methodName.charAt(2);\n      String propertyName;\n      if (Character.isUpperCase(c2)) {\n        propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n      }\n else       if (c2 == '_') {\n        propertyName=methodName.substring(3);\n      }\n else       if (c2 == 'f') {\n        propertyName=methodName.substring(2);\n      }\n else {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    String propertyName=field.getName();\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    if (!fieldInfoMap.containsKey(propertyName)) {\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field));\n    }\n  }\n  List<FieldInfo> fieldInfoList=new ArrayList<FieldInfo>();\n  boolean containsAll=false;\n  String[] orders=null;\n  JSONType annotation=clazz.getAnnotation(JSONType.class);\n  if (annotation != null) {\n    orders=annotation.orders();\n    if (orders != null && orders.length == fieldInfoMap.size()) {\n      containsAll=true;\n      for (      String item : orders) {\n        if (!fieldInfoMap.containsKey(item)) {\n          containsAll=false;\n          break;\n        }\n      }\n    }\n else {\n      containsAll=false;\n    }\n  }\n  if (containsAll) {\n    for (    String item : orders) {\n      FieldInfo fieldInfo=fieldInfoMap.get(item);\n      fieldInfoList.add(fieldInfo);\n    }\n  }\n else {\n    for (    FieldInfo fieldInfo : fieldInfoMap.values()) {\n      fieldInfoList.add(fieldInfo);\n    }\n    if (sorted) {\n      Collections.sort(fieldInfoList);\n    }\n  }\n  return fieldInfoList;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 825,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 907,
        "startColumnNumber" : 16,
        "endLineNumber" : 907,
        "endColumnNumber" : 34
      },
      "nodeContext" : "annotation == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 911,
      "startColumnNumber" : 30,
      "endLineNumber" : 911,
      "endColumnNumber" : 34
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 911,
        "startColumnNumber" : 16,
        "endLineNumber" : 911,
        "endColumnNumber" : 34
      },
      "nodeContext" : "annotation != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 663,
        "startLineNumber" : 911,
        "startColumnNumber" : 12,
        "endLineNumber" : 929,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (annotation != null) {\n  if (!annotation.serialize()) {\n    continue;\n  }\n  if (annotation.name().length() != 0) {\n    String propertyName=annotation.name();\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n    continue;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 59,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 5811,
        "startLineNumber" : 881,
        "startColumnNumber" : 49,
        "endLineNumber" : 1044,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String methodName=method.getName();\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  if (method.getReturnType().equals(Void.TYPE)) {\n    continue;\n  }\n  if (method.getParameterTypes().length != 0) {\n    continue;\n  }\n  if (method.getReturnType() == ClassLoader.class) {\n    continue;\n  }\n  if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n    continue;\n  }\n  JSONField annotation=method.getAnnotation(JSONField.class);\n  if (annotation == null) {\n    annotation=getSupperMethodAnnotation(clazz,method);\n  }\n  if (annotation != null) {\n    if (!annotation.serialize()) {\n      continue;\n    }\n    if (annotation.name().length() != 0) {\n      String propertyName=annotation.name();\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n      continue;\n    }\n  }\n  if (methodName.startsWith(\"get\")) {\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (methodName.equals(\"getClass\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else {\n      continue;\n    }\n    boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n    if (ignore) {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field == null) {\n      field=ParserConfig.getField(clazz,methodName.substring(3));\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n  if (methodName.startsWith(\"is\")) {\n    if (methodName.length() < 3) {\n      continue;\n    }\n    char c2=methodName.charAt(2);\n    String propertyName;\n    if (Character.isUpperCase(c2)) {\n      propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n    }\n else     if (c2 == '_') {\n      propertyName=methodName.substring(3);\n    }\n else     if (c2 == 'f') {\n      propertyName=methodName.substring(2);\n    }\n else {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 532,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5852,
        "startLineNumber" : 881,
        "startColumnNumber" : 8,
        "endLineNumber" : 1044,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Method method : clazz.getMethods()) {\n  String methodName=method.getName();\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  if (method.getReturnType().equals(Void.TYPE)) {\n    continue;\n  }\n  if (method.getParameterTypes().length != 0) {\n    continue;\n  }\n  if (method.getReturnType() == ClassLoader.class) {\n    continue;\n  }\n  if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n    continue;\n  }\n  JSONField annotation=method.getAnnotation(JSONField.class);\n  if (annotation == null) {\n    annotation=getSupperMethodAnnotation(clazz,method);\n  }\n  if (annotation != null) {\n    if (!annotation.serialize()) {\n      continue;\n    }\n    if (annotation.name().length() != 0) {\n      String propertyName=annotation.name();\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n      continue;\n    }\n  }\n  if (methodName.startsWith(\"get\")) {\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (methodName.equals(\"getClass\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else {\n      continue;\n    }\n    boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n    if (ignore) {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field == null) {\n      field=ParserConfig.getField(clazz,methodName.substring(3));\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n  if (methodName.startsWith(\"is\")) {\n    if (methodName.length() < 3) {\n      continue;\n    }\n    char c2=methodName.charAt(2);\n    String propertyName;\n    if (Character.isUpperCase(c2)) {\n      propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n    }\n else     if (c2 == '_') {\n      propertyName=methodName.substring(3);\n    }\n else     if (c2 == 'f') {\n      propertyName=methodName.substring(2);\n    }\n else {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 540,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8137,
        "startLineNumber" : 878,
        "startColumnNumber" : 111,
        "endLineNumber" : 1114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,FieldInfo> fieldInfoMap=new LinkedHashMap<String,FieldInfo>();\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (method.getReturnType().equals(Void.TYPE)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 0) {\n      continue;\n    }\n    if (method.getReturnType() == ClassLoader.class) {\n      continue;\n    }\n    if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.serialize()) {\n        continue;\n      }\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n        fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n        continue;\n      }\n    }\n    if (methodName.startsWith(\"get\")) {\n      if (methodName.length() < 4) {\n        continue;\n      }\n      if (methodName.equals(\"getClass\")) {\n        continue;\n      }\n      char c3=methodName.charAt(3);\n      String propertyName;\n      if (Character.isUpperCase(c3)) {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n else       if (c3 == '_') {\n        propertyName=methodName.substring(4);\n      }\n else       if (c3 == 'f') {\n        propertyName=methodName.substring(3);\n      }\n else {\n        continue;\n      }\n      boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n      if (ignore) {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field == null) {\n        field=ParserConfig.getField(clazz,methodName.substring(3));\n      }\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n    if (methodName.startsWith(\"is\")) {\n      if (methodName.length() < 3) {\n        continue;\n      }\n      char c2=methodName.charAt(2);\n      String propertyName;\n      if (Character.isUpperCase(c2)) {\n        propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n      }\n else       if (c2 == '_') {\n        propertyName=methodName.substring(3);\n      }\n else       if (c2 == 'f') {\n        propertyName=methodName.substring(2);\n      }\n else {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    String propertyName=field.getName();\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    if (!fieldInfoMap.containsKey(propertyName)) {\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field));\n    }\n  }\n  List<FieldInfo> fieldInfoList=new ArrayList<FieldInfo>();\n  boolean containsAll=false;\n  String[] orders=null;\n  JSONType annotation=clazz.getAnnotation(JSONType.class);\n  if (annotation != null) {\n    orders=annotation.orders();\n    if (orders != null && orders.length == fieldInfoMap.size()) {\n      containsAll=true;\n      for (      String item : orders) {\n        if (!fieldInfoMap.containsKey(item)) {\n          containsAll=false;\n          break;\n        }\n      }\n    }\n else {\n      containsAll=false;\n    }\n  }\n  if (containsAll) {\n    for (    String item : orders) {\n      FieldInfo fieldInfo=fieldInfoMap.get(item);\n      fieldInfoList.add(fieldInfo);\n    }\n  }\n else {\n    for (    FieldInfo fieldInfo : fieldInfoMap.values()) {\n      fieldInfoList.add(fieldInfo);\n    }\n    if (sorted) {\n      Collections.sort(fieldInfoList);\n    }\n  }\n  return fieldInfoList;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 798,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8244,
        "startLineNumber" : 878,
        "startColumnNumber" : 4,
        "endLineNumber" : 1114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static List<FieldInfo> computeGetters(Class<?> clazz,Map<String,String> aliasMap,boolean sorted){\n  Map<String,FieldInfo> fieldInfoMap=new LinkedHashMap<String,FieldInfo>();\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (method.getReturnType().equals(Void.TYPE)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 0) {\n      continue;\n    }\n    if (method.getReturnType() == ClassLoader.class) {\n      continue;\n    }\n    if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.serialize()) {\n        continue;\n      }\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n        fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n        continue;\n      }\n    }\n    if (methodName.startsWith(\"get\")) {\n      if (methodName.length() < 4) {\n        continue;\n      }\n      if (methodName.equals(\"getClass\")) {\n        continue;\n      }\n      char c3=methodName.charAt(3);\n      String propertyName;\n      if (Character.isUpperCase(c3)) {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n else       if (c3 == '_') {\n        propertyName=methodName.substring(4);\n      }\n else       if (c3 == 'f') {\n        propertyName=methodName.substring(3);\n      }\n else {\n        continue;\n      }\n      boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n      if (ignore) {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field == null) {\n        field=ParserConfig.getField(clazz,methodName.substring(3));\n      }\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n    if (methodName.startsWith(\"is\")) {\n      if (methodName.length() < 3) {\n        continue;\n      }\n      char c2=methodName.charAt(2);\n      String propertyName;\n      if (Character.isUpperCase(c2)) {\n        propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n      }\n else       if (c2 == '_') {\n        propertyName=methodName.substring(3);\n      }\n else       if (c2 == 'f') {\n        propertyName=methodName.substring(2);\n      }\n else {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    String propertyName=field.getName();\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    if (!fieldInfoMap.containsKey(propertyName)) {\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field));\n    }\n  }\n  List<FieldInfo> fieldInfoList=new ArrayList<FieldInfo>();\n  boolean containsAll=false;\n  String[] orders=null;\n  JSONType annotation=clazz.getAnnotation(JSONType.class);\n  if (annotation != null) {\n    orders=annotation.orders();\n    if (orders != null && orders.length == fieldInfoMap.size()) {\n      containsAll=true;\n      for (      String item : orders) {\n        if (!fieldInfoMap.containsKey(item)) {\n          containsAll=false;\n          break;\n        }\n      }\n    }\n else {\n      containsAll=false;\n    }\n  }\n  if (containsAll) {\n    for (    String item : orders) {\n      FieldInfo fieldInfo=fieldInfoMap.get(item);\n      fieldInfoList.add(fieldInfo);\n    }\n  }\n else {\n    for (    FieldInfo fieldInfo : fieldInfoMap.values()) {\n      fieldInfoList.add(fieldInfo);\n    }\n    if (sorted) {\n      Collections.sort(fieldInfoList);\n    }\n  }\n  return fieldInfoList;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 825,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 911,
        "startColumnNumber" : 16,
        "endLineNumber" : 911,
        "endColumnNumber" : 34
      },
      "nodeContext" : "annotation != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 919,
      "startColumnNumber" : 36,
      "endLineNumber" : 919,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 919,
        "startColumnNumber" : 24,
        "endLineNumber" : 919,
        "endColumnNumber" : 40
      },
      "nodeContext" : "aliasMap != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 233,
        "startLineNumber" : 919,
        "startColumnNumber" : 20,
        "endLineNumber" : 924,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (aliasMap != null) {\n  propertyName=aliasMap.get(propertyName);\n  if (propertyName == null) {\n    continue;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 468,
        "startLineNumber" : 916,
        "startColumnNumber" : 53,
        "endLineNumber" : 928,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  String propertyName=annotation.name();\n  if (aliasMap != null) {\n    propertyName=aliasMap.get(propertyName);\n    if (propertyName == null) {\n      continue;\n    }\n  }\n  fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n  continue;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 39,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 505,
        "startLineNumber" : 916,
        "startColumnNumber" : 16,
        "endLineNumber" : 928,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (annotation.name().length() != 0) {\n  String propertyName=annotation.name();\n  if (aliasMap != null) {\n    propertyName=aliasMap.get(propertyName);\n    if (propertyName == null) {\n      continue;\n    }\n  }\n  fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n  continue;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 47,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 639,
        "startLineNumber" : 911,
        "startColumnNumber" : 36,
        "endLineNumber" : 929,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (!annotation.serialize()) {\n    continue;\n  }\n  if (annotation.name().length() != 0) {\n    String propertyName=annotation.name();\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n    continue;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 55,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 663,
        "startLineNumber" : 911,
        "startColumnNumber" : 12,
        "endLineNumber" : 929,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (annotation != null) {\n  if (!annotation.serialize()) {\n    continue;\n  }\n  if (annotation.name().length() != 0) {\n    String propertyName=annotation.name();\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n    continue;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 59,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 5811,
        "startLineNumber" : 881,
        "startColumnNumber" : 49,
        "endLineNumber" : 1044,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String methodName=method.getName();\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  if (method.getReturnType().equals(Void.TYPE)) {\n    continue;\n  }\n  if (method.getParameterTypes().length != 0) {\n    continue;\n  }\n  if (method.getReturnType() == ClassLoader.class) {\n    continue;\n  }\n  if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n    continue;\n  }\n  JSONField annotation=method.getAnnotation(JSONField.class);\n  if (annotation == null) {\n    annotation=getSupperMethodAnnotation(clazz,method);\n  }\n  if (annotation != null) {\n    if (!annotation.serialize()) {\n      continue;\n    }\n    if (annotation.name().length() != 0) {\n      String propertyName=annotation.name();\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n      continue;\n    }\n  }\n  if (methodName.startsWith(\"get\")) {\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (methodName.equals(\"getClass\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else {\n      continue;\n    }\n    boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n    if (ignore) {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field == null) {\n      field=ParserConfig.getField(clazz,methodName.substring(3));\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n  if (methodName.startsWith(\"is\")) {\n    if (methodName.length() < 3) {\n      continue;\n    }\n    char c2=methodName.charAt(2);\n    String propertyName;\n    if (Character.isUpperCase(c2)) {\n      propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n    }\n else     if (c2 == '_') {\n      propertyName=methodName.substring(3);\n    }\n else     if (c2 == 'f') {\n      propertyName=methodName.substring(2);\n    }\n else {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 532,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5852,
        "startLineNumber" : 881,
        "startColumnNumber" : 8,
        "endLineNumber" : 1044,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Method method : clazz.getMethods()) {\n  String methodName=method.getName();\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  if (method.getReturnType().equals(Void.TYPE)) {\n    continue;\n  }\n  if (method.getParameterTypes().length != 0) {\n    continue;\n  }\n  if (method.getReturnType() == ClassLoader.class) {\n    continue;\n  }\n  if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n    continue;\n  }\n  JSONField annotation=method.getAnnotation(JSONField.class);\n  if (annotation == null) {\n    annotation=getSupperMethodAnnotation(clazz,method);\n  }\n  if (annotation != null) {\n    if (!annotation.serialize()) {\n      continue;\n    }\n    if (annotation.name().length() != 0) {\n      String propertyName=annotation.name();\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n      continue;\n    }\n  }\n  if (methodName.startsWith(\"get\")) {\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (methodName.equals(\"getClass\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else {\n      continue;\n    }\n    boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n    if (ignore) {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field == null) {\n      field=ParserConfig.getField(clazz,methodName.substring(3));\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n  if (methodName.startsWith(\"is\")) {\n    if (methodName.length() < 3) {\n      continue;\n    }\n    char c2=methodName.charAt(2);\n    String propertyName;\n    if (Character.isUpperCase(c2)) {\n      propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n    }\n else     if (c2 == '_') {\n      propertyName=methodName.substring(3);\n    }\n else     if (c2 == 'f') {\n      propertyName=methodName.substring(2);\n    }\n else {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 540,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8137,
        "startLineNumber" : 878,
        "startColumnNumber" : 111,
        "endLineNumber" : 1114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,FieldInfo> fieldInfoMap=new LinkedHashMap<String,FieldInfo>();\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (method.getReturnType().equals(Void.TYPE)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 0) {\n      continue;\n    }\n    if (method.getReturnType() == ClassLoader.class) {\n      continue;\n    }\n    if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.serialize()) {\n        continue;\n      }\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n        fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n        continue;\n      }\n    }\n    if (methodName.startsWith(\"get\")) {\n      if (methodName.length() < 4) {\n        continue;\n      }\n      if (methodName.equals(\"getClass\")) {\n        continue;\n      }\n      char c3=methodName.charAt(3);\n      String propertyName;\n      if (Character.isUpperCase(c3)) {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n else       if (c3 == '_') {\n        propertyName=methodName.substring(4);\n      }\n else       if (c3 == 'f') {\n        propertyName=methodName.substring(3);\n      }\n else {\n        continue;\n      }\n      boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n      if (ignore) {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field == null) {\n        field=ParserConfig.getField(clazz,methodName.substring(3));\n      }\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n    if (methodName.startsWith(\"is\")) {\n      if (methodName.length() < 3) {\n        continue;\n      }\n      char c2=methodName.charAt(2);\n      String propertyName;\n      if (Character.isUpperCase(c2)) {\n        propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n      }\n else       if (c2 == '_') {\n        propertyName=methodName.substring(3);\n      }\n else       if (c2 == 'f') {\n        propertyName=methodName.substring(2);\n      }\n else {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    String propertyName=field.getName();\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    if (!fieldInfoMap.containsKey(propertyName)) {\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field));\n    }\n  }\n  List<FieldInfo> fieldInfoList=new ArrayList<FieldInfo>();\n  boolean containsAll=false;\n  String[] orders=null;\n  JSONType annotation=clazz.getAnnotation(JSONType.class);\n  if (annotation != null) {\n    orders=annotation.orders();\n    if (orders != null && orders.length == fieldInfoMap.size()) {\n      containsAll=true;\n      for (      String item : orders) {\n        if (!fieldInfoMap.containsKey(item)) {\n          containsAll=false;\n          break;\n        }\n      }\n    }\n else {\n      containsAll=false;\n    }\n  }\n  if (containsAll) {\n    for (    String item : orders) {\n      FieldInfo fieldInfo=fieldInfoMap.get(item);\n      fieldInfoList.add(fieldInfo);\n    }\n  }\n else {\n    for (    FieldInfo fieldInfo : fieldInfoMap.values()) {\n      fieldInfoList.add(fieldInfo);\n    }\n    if (sorted) {\n      Collections.sort(fieldInfoList);\n    }\n  }\n  return fieldInfoList;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 798,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8244,
        "startLineNumber" : 878,
        "startColumnNumber" : 4,
        "endLineNumber" : 1114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static List<FieldInfo> computeGetters(Class<?> clazz,Map<String,String> aliasMap,boolean sorted){\n  Map<String,FieldInfo> fieldInfoMap=new LinkedHashMap<String,FieldInfo>();\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (method.getReturnType().equals(Void.TYPE)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 0) {\n      continue;\n    }\n    if (method.getReturnType() == ClassLoader.class) {\n      continue;\n    }\n    if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.serialize()) {\n        continue;\n      }\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n        fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n        continue;\n      }\n    }\n    if (methodName.startsWith(\"get\")) {\n      if (methodName.length() < 4) {\n        continue;\n      }\n      if (methodName.equals(\"getClass\")) {\n        continue;\n      }\n      char c3=methodName.charAt(3);\n      String propertyName;\n      if (Character.isUpperCase(c3)) {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n else       if (c3 == '_') {\n        propertyName=methodName.substring(4);\n      }\n else       if (c3 == 'f') {\n        propertyName=methodName.substring(3);\n      }\n else {\n        continue;\n      }\n      boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n      if (ignore) {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field == null) {\n        field=ParserConfig.getField(clazz,methodName.substring(3));\n      }\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n    if (methodName.startsWith(\"is\")) {\n      if (methodName.length() < 3) {\n        continue;\n      }\n      char c2=methodName.charAt(2);\n      String propertyName;\n      if (Character.isUpperCase(c2)) {\n        propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n      }\n else       if (c2 == '_') {\n        propertyName=methodName.substring(3);\n      }\n else       if (c2 == 'f') {\n        propertyName=methodName.substring(2);\n      }\n else {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    String propertyName=field.getName();\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    if (!fieldInfoMap.containsKey(propertyName)) {\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field));\n    }\n  }\n  List<FieldInfo> fieldInfoList=new ArrayList<FieldInfo>();\n  boolean containsAll=false;\n  String[] orders=null;\n  JSONType annotation=clazz.getAnnotation(JSONType.class);\n  if (annotation != null) {\n    orders=annotation.orders();\n    if (orders != null && orders.length == fieldInfoMap.size()) {\n      containsAll=true;\n      for (      String item : orders) {\n        if (!fieldInfoMap.containsKey(item)) {\n          containsAll=false;\n          break;\n        }\n      }\n    }\n else {\n      containsAll=false;\n    }\n  }\n  if (containsAll) {\n    for (    String item : orders) {\n      FieldInfo fieldInfo=fieldInfoMap.get(item);\n      fieldInfoList.add(fieldInfo);\n    }\n  }\n else {\n    for (    FieldInfo fieldInfo : fieldInfoMap.values()) {\n      fieldInfoList.add(fieldInfo);\n    }\n    if (sorted) {\n      Collections.sort(fieldInfoList);\n    }\n  }\n  return fieldInfoList;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 825,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 919,
        "startColumnNumber" : 24,
        "endLineNumber" : 919,
        "endColumnNumber" : 40
      },
      "nodeContext" : "aliasMap != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 921,
      "startColumnNumber" : 44,
      "endLineNumber" : 921,
      "endColumnNumber" : 48
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 921,
        "startColumnNumber" : 28,
        "endLineNumber" : 921,
        "endColumnNumber" : 48
      },
      "nodeContext" : "propertyName == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 921,
        "startColumnNumber" : 24,
        "endLineNumber" : 923,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (propertyName == null) {\n  continue;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 211,
        "startLineNumber" : 919,
        "startColumnNumber" : 42,
        "endLineNumber" : 924,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  propertyName=aliasMap.get(propertyName);\n  if (propertyName == null) {\n    continue;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 233,
        "startLineNumber" : 919,
        "startColumnNumber" : 20,
        "endLineNumber" : 924,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (aliasMap != null) {\n  propertyName=aliasMap.get(propertyName);\n  if (propertyName == null) {\n    continue;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 468,
        "startLineNumber" : 916,
        "startColumnNumber" : 53,
        "endLineNumber" : 928,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  String propertyName=annotation.name();\n  if (aliasMap != null) {\n    propertyName=aliasMap.get(propertyName);\n    if (propertyName == null) {\n      continue;\n    }\n  }\n  fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n  continue;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 39,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 505,
        "startLineNumber" : 916,
        "startColumnNumber" : 16,
        "endLineNumber" : 928,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (annotation.name().length() != 0) {\n  String propertyName=annotation.name();\n  if (aliasMap != null) {\n    propertyName=aliasMap.get(propertyName);\n    if (propertyName == null) {\n      continue;\n    }\n  }\n  fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n  continue;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 47,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 639,
        "startLineNumber" : 911,
        "startColumnNumber" : 36,
        "endLineNumber" : 929,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (!annotation.serialize()) {\n    continue;\n  }\n  if (annotation.name().length() != 0) {\n    String propertyName=annotation.name();\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n    continue;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 55,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 663,
        "startLineNumber" : 911,
        "startColumnNumber" : 12,
        "endLineNumber" : 929,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (annotation != null) {\n  if (!annotation.serialize()) {\n    continue;\n  }\n  if (annotation.name().length() != 0) {\n    String propertyName=annotation.name();\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n    continue;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 59,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 5811,
        "startLineNumber" : 881,
        "startColumnNumber" : 49,
        "endLineNumber" : 1044,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String methodName=method.getName();\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  if (method.getReturnType().equals(Void.TYPE)) {\n    continue;\n  }\n  if (method.getParameterTypes().length != 0) {\n    continue;\n  }\n  if (method.getReturnType() == ClassLoader.class) {\n    continue;\n  }\n  if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n    continue;\n  }\n  JSONField annotation=method.getAnnotation(JSONField.class);\n  if (annotation == null) {\n    annotation=getSupperMethodAnnotation(clazz,method);\n  }\n  if (annotation != null) {\n    if (!annotation.serialize()) {\n      continue;\n    }\n    if (annotation.name().length() != 0) {\n      String propertyName=annotation.name();\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n      continue;\n    }\n  }\n  if (methodName.startsWith(\"get\")) {\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (methodName.equals(\"getClass\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else {\n      continue;\n    }\n    boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n    if (ignore) {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field == null) {\n      field=ParserConfig.getField(clazz,methodName.substring(3));\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n  if (methodName.startsWith(\"is\")) {\n    if (methodName.length() < 3) {\n      continue;\n    }\n    char c2=methodName.charAt(2);\n    String propertyName;\n    if (Character.isUpperCase(c2)) {\n      propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n    }\n else     if (c2 == '_') {\n      propertyName=methodName.substring(3);\n    }\n else     if (c2 == 'f') {\n      propertyName=methodName.substring(2);\n    }\n else {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 532,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5852,
        "startLineNumber" : 881,
        "startColumnNumber" : 8,
        "endLineNumber" : 1044,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Method method : clazz.getMethods()) {\n  String methodName=method.getName();\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  if (method.getReturnType().equals(Void.TYPE)) {\n    continue;\n  }\n  if (method.getParameterTypes().length != 0) {\n    continue;\n  }\n  if (method.getReturnType() == ClassLoader.class) {\n    continue;\n  }\n  if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n    continue;\n  }\n  JSONField annotation=method.getAnnotation(JSONField.class);\n  if (annotation == null) {\n    annotation=getSupperMethodAnnotation(clazz,method);\n  }\n  if (annotation != null) {\n    if (!annotation.serialize()) {\n      continue;\n    }\n    if (annotation.name().length() != 0) {\n      String propertyName=annotation.name();\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n      continue;\n    }\n  }\n  if (methodName.startsWith(\"get\")) {\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (methodName.equals(\"getClass\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else {\n      continue;\n    }\n    boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n    if (ignore) {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field == null) {\n      field=ParserConfig.getField(clazz,methodName.substring(3));\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n  if (methodName.startsWith(\"is\")) {\n    if (methodName.length() < 3) {\n      continue;\n    }\n    char c2=methodName.charAt(2);\n    String propertyName;\n    if (Character.isUpperCase(c2)) {\n      propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n    }\n else     if (c2 == '_') {\n      propertyName=methodName.substring(3);\n    }\n else     if (c2 == 'f') {\n      propertyName=methodName.substring(2);\n    }\n else {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 540,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8137,
        "startLineNumber" : 878,
        "startColumnNumber" : 111,
        "endLineNumber" : 1114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,FieldInfo> fieldInfoMap=new LinkedHashMap<String,FieldInfo>();\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (method.getReturnType().equals(Void.TYPE)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 0) {\n      continue;\n    }\n    if (method.getReturnType() == ClassLoader.class) {\n      continue;\n    }\n    if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.serialize()) {\n        continue;\n      }\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n        fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n        continue;\n      }\n    }\n    if (methodName.startsWith(\"get\")) {\n      if (methodName.length() < 4) {\n        continue;\n      }\n      if (methodName.equals(\"getClass\")) {\n        continue;\n      }\n      char c3=methodName.charAt(3);\n      String propertyName;\n      if (Character.isUpperCase(c3)) {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n else       if (c3 == '_') {\n        propertyName=methodName.substring(4);\n      }\n else       if (c3 == 'f') {\n        propertyName=methodName.substring(3);\n      }\n else {\n        continue;\n      }\n      boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n      if (ignore) {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field == null) {\n        field=ParserConfig.getField(clazz,methodName.substring(3));\n      }\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n    if (methodName.startsWith(\"is\")) {\n      if (methodName.length() < 3) {\n        continue;\n      }\n      char c2=methodName.charAt(2);\n      String propertyName;\n      if (Character.isUpperCase(c2)) {\n        propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n      }\n else       if (c2 == '_') {\n        propertyName=methodName.substring(3);\n      }\n else       if (c2 == 'f') {\n        propertyName=methodName.substring(2);\n      }\n else {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    String propertyName=field.getName();\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    if (!fieldInfoMap.containsKey(propertyName)) {\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field));\n    }\n  }\n  List<FieldInfo> fieldInfoList=new ArrayList<FieldInfo>();\n  boolean containsAll=false;\n  String[] orders=null;\n  JSONType annotation=clazz.getAnnotation(JSONType.class);\n  if (annotation != null) {\n    orders=annotation.orders();\n    if (orders != null && orders.length == fieldInfoMap.size()) {\n      containsAll=true;\n      for (      String item : orders) {\n        if (!fieldInfoMap.containsKey(item)) {\n          containsAll=false;\n          break;\n        }\n      }\n    }\n else {\n      containsAll=false;\n    }\n  }\n  if (containsAll) {\n    for (    String item : orders) {\n      FieldInfo fieldInfo=fieldInfoMap.get(item);\n      fieldInfoList.add(fieldInfo);\n    }\n  }\n else {\n    for (    FieldInfo fieldInfo : fieldInfoMap.values()) {\n      fieldInfoList.add(fieldInfo);\n    }\n    if (sorted) {\n      Collections.sort(fieldInfoList);\n    }\n  }\n  return fieldInfoList;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 798,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8244,
        "startLineNumber" : 878,
        "startColumnNumber" : 4,
        "endLineNumber" : 1114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static List<FieldInfo> computeGetters(Class<?> clazz,Map<String,String> aliasMap,boolean sorted){\n  Map<String,FieldInfo> fieldInfoMap=new LinkedHashMap<String,FieldInfo>();\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (method.getReturnType().equals(Void.TYPE)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 0) {\n      continue;\n    }\n    if (method.getReturnType() == ClassLoader.class) {\n      continue;\n    }\n    if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.serialize()) {\n        continue;\n      }\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n        fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n        continue;\n      }\n    }\n    if (methodName.startsWith(\"get\")) {\n      if (methodName.length() < 4) {\n        continue;\n      }\n      if (methodName.equals(\"getClass\")) {\n        continue;\n      }\n      char c3=methodName.charAt(3);\n      String propertyName;\n      if (Character.isUpperCase(c3)) {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n else       if (c3 == '_') {\n        propertyName=methodName.substring(4);\n      }\n else       if (c3 == 'f') {\n        propertyName=methodName.substring(3);\n      }\n else {\n        continue;\n      }\n      boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n      if (ignore) {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field == null) {\n        field=ParserConfig.getField(clazz,methodName.substring(3));\n      }\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n    if (methodName.startsWith(\"is\")) {\n      if (methodName.length() < 3) {\n        continue;\n      }\n      char c2=methodName.charAt(2);\n      String propertyName;\n      if (Character.isUpperCase(c2)) {\n        propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n      }\n else       if (c2 == '_') {\n        propertyName=methodName.substring(3);\n      }\n else       if (c2 == 'f') {\n        propertyName=methodName.substring(2);\n      }\n else {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    String propertyName=field.getName();\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    if (!fieldInfoMap.containsKey(propertyName)) {\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field));\n    }\n  }\n  List<FieldInfo> fieldInfoList=new ArrayList<FieldInfo>();\n  boolean containsAll=false;\n  String[] orders=null;\n  JSONType annotation=clazz.getAnnotation(JSONType.class);\n  if (annotation != null) {\n    orders=annotation.orders();\n    if (orders != null && orders.length == fieldInfoMap.size()) {\n      containsAll=true;\n      for (      String item : orders) {\n        if (!fieldInfoMap.containsKey(item)) {\n          containsAll=false;\n          break;\n        }\n      }\n    }\n else {\n      containsAll=false;\n    }\n  }\n  if (containsAll) {\n    for (    String item : orders) {\n      FieldInfo fieldInfo=fieldInfoMap.get(item);\n      fieldInfoList.add(fieldInfo);\n    }\n  }\n else {\n    for (    FieldInfo fieldInfo : fieldInfoMap.values()) {\n      fieldInfoList.add(fieldInfo);\n    }\n    if (sorted) {\n      Collections.sort(fieldInfoList);\n    }\n  }\n  return fieldInfoList;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 825,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 921,
        "startColumnNumber" : 28,
        "endLineNumber" : 921,
        "endColumnNumber" : 48
      },
      "nodeContext" : "propertyName == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 926,
      "startColumnNumber" : 87,
      "endLineNumber" : 926,
      "endColumnNumber" : 91
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 926,
        "startColumnNumber" : 51,
        "endLineNumber" : 926,
        "endColumnNumber" : 92
      },
      "nodeContext" : "new FieldInfo(propertyName,method,null)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 926,
        "startColumnNumber" : 20,
        "endLineNumber" : 926,
        "endColumnNumber" : 93
      },
      "nodeContext" : "fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 926,
        "startColumnNumber" : 20,
        "endLineNumber" : 926,
        "endColumnNumber" : 94
      },
      "nodeContext" : "fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 468,
        "startLineNumber" : 916,
        "startColumnNumber" : 53,
        "endLineNumber" : 928,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  String propertyName=annotation.name();\n  if (aliasMap != null) {\n    propertyName=aliasMap.get(propertyName);\n    if (propertyName == null) {\n      continue;\n    }\n  }\n  fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n  continue;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 39,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 505,
        "startLineNumber" : 916,
        "startColumnNumber" : 16,
        "endLineNumber" : 928,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (annotation.name().length() != 0) {\n  String propertyName=annotation.name();\n  if (aliasMap != null) {\n    propertyName=aliasMap.get(propertyName);\n    if (propertyName == null) {\n      continue;\n    }\n  }\n  fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n  continue;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 47,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 639,
        "startLineNumber" : 911,
        "startColumnNumber" : 36,
        "endLineNumber" : 929,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (!annotation.serialize()) {\n    continue;\n  }\n  if (annotation.name().length() != 0) {\n    String propertyName=annotation.name();\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n    continue;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 55,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 663,
        "startLineNumber" : 911,
        "startColumnNumber" : 12,
        "endLineNumber" : 929,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (annotation != null) {\n  if (!annotation.serialize()) {\n    continue;\n  }\n  if (annotation.name().length() != 0) {\n    String propertyName=annotation.name();\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n    continue;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 59,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 5811,
        "startLineNumber" : 881,
        "startColumnNumber" : 49,
        "endLineNumber" : 1044,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String methodName=method.getName();\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  if (method.getReturnType().equals(Void.TYPE)) {\n    continue;\n  }\n  if (method.getParameterTypes().length != 0) {\n    continue;\n  }\n  if (method.getReturnType() == ClassLoader.class) {\n    continue;\n  }\n  if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n    continue;\n  }\n  JSONField annotation=method.getAnnotation(JSONField.class);\n  if (annotation == null) {\n    annotation=getSupperMethodAnnotation(clazz,method);\n  }\n  if (annotation != null) {\n    if (!annotation.serialize()) {\n      continue;\n    }\n    if (annotation.name().length() != 0) {\n      String propertyName=annotation.name();\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n      continue;\n    }\n  }\n  if (methodName.startsWith(\"get\")) {\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (methodName.equals(\"getClass\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else {\n      continue;\n    }\n    boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n    if (ignore) {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field == null) {\n      field=ParserConfig.getField(clazz,methodName.substring(3));\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n  if (methodName.startsWith(\"is\")) {\n    if (methodName.length() < 3) {\n      continue;\n    }\n    char c2=methodName.charAt(2);\n    String propertyName;\n    if (Character.isUpperCase(c2)) {\n      propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n    }\n else     if (c2 == '_') {\n      propertyName=methodName.substring(3);\n    }\n else     if (c2 == 'f') {\n      propertyName=methodName.substring(2);\n    }\n else {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 532,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5852,
        "startLineNumber" : 881,
        "startColumnNumber" : 8,
        "endLineNumber" : 1044,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Method method : clazz.getMethods()) {\n  String methodName=method.getName();\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  if (method.getReturnType().equals(Void.TYPE)) {\n    continue;\n  }\n  if (method.getParameterTypes().length != 0) {\n    continue;\n  }\n  if (method.getReturnType() == ClassLoader.class) {\n    continue;\n  }\n  if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n    continue;\n  }\n  JSONField annotation=method.getAnnotation(JSONField.class);\n  if (annotation == null) {\n    annotation=getSupperMethodAnnotation(clazz,method);\n  }\n  if (annotation != null) {\n    if (!annotation.serialize()) {\n      continue;\n    }\n    if (annotation.name().length() != 0) {\n      String propertyName=annotation.name();\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n      continue;\n    }\n  }\n  if (methodName.startsWith(\"get\")) {\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (methodName.equals(\"getClass\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else {\n      continue;\n    }\n    boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n    if (ignore) {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field == null) {\n      field=ParserConfig.getField(clazz,methodName.substring(3));\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n  if (methodName.startsWith(\"is\")) {\n    if (methodName.length() < 3) {\n      continue;\n    }\n    char c2=methodName.charAt(2);\n    String propertyName;\n    if (Character.isUpperCase(c2)) {\n      propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n    }\n else     if (c2 == '_') {\n      propertyName=methodName.substring(3);\n    }\n else     if (c2 == 'f') {\n      propertyName=methodName.substring(2);\n    }\n else {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 540,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8137,
        "startLineNumber" : 878,
        "startColumnNumber" : 111,
        "endLineNumber" : 1114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,FieldInfo> fieldInfoMap=new LinkedHashMap<String,FieldInfo>();\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (method.getReturnType().equals(Void.TYPE)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 0) {\n      continue;\n    }\n    if (method.getReturnType() == ClassLoader.class) {\n      continue;\n    }\n    if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.serialize()) {\n        continue;\n      }\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n        fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n        continue;\n      }\n    }\n    if (methodName.startsWith(\"get\")) {\n      if (methodName.length() < 4) {\n        continue;\n      }\n      if (methodName.equals(\"getClass\")) {\n        continue;\n      }\n      char c3=methodName.charAt(3);\n      String propertyName;\n      if (Character.isUpperCase(c3)) {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n else       if (c3 == '_') {\n        propertyName=methodName.substring(4);\n      }\n else       if (c3 == 'f') {\n        propertyName=methodName.substring(3);\n      }\n else {\n        continue;\n      }\n      boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n      if (ignore) {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field == null) {\n        field=ParserConfig.getField(clazz,methodName.substring(3));\n      }\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n    if (methodName.startsWith(\"is\")) {\n      if (methodName.length() < 3) {\n        continue;\n      }\n      char c2=methodName.charAt(2);\n      String propertyName;\n      if (Character.isUpperCase(c2)) {\n        propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n      }\n else       if (c2 == '_') {\n        propertyName=methodName.substring(3);\n      }\n else       if (c2 == 'f') {\n        propertyName=methodName.substring(2);\n      }\n else {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    String propertyName=field.getName();\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    if (!fieldInfoMap.containsKey(propertyName)) {\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field));\n    }\n  }\n  List<FieldInfo> fieldInfoList=new ArrayList<FieldInfo>();\n  boolean containsAll=false;\n  String[] orders=null;\n  JSONType annotation=clazz.getAnnotation(JSONType.class);\n  if (annotation != null) {\n    orders=annotation.orders();\n    if (orders != null && orders.length == fieldInfoMap.size()) {\n      containsAll=true;\n      for (      String item : orders) {\n        if (!fieldInfoMap.containsKey(item)) {\n          containsAll=false;\n          break;\n        }\n      }\n    }\n else {\n      containsAll=false;\n    }\n  }\n  if (containsAll) {\n    for (    String item : orders) {\n      FieldInfo fieldInfo=fieldInfoMap.get(item);\n      fieldInfoList.add(fieldInfo);\n    }\n  }\n else {\n    for (    FieldInfo fieldInfo : fieldInfoMap.values()) {\n      fieldInfoList.add(fieldInfo);\n    }\n    if (sorted) {\n      Collections.sort(fieldInfoList);\n    }\n  }\n  return fieldInfoList;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 798,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8244,
        "startLineNumber" : 878,
        "startColumnNumber" : 4,
        "endLineNumber" : 1114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static List<FieldInfo> computeGetters(Class<?> clazz,Map<String,String> aliasMap,boolean sorted){\n  Map<String,FieldInfo> fieldInfoMap=new LinkedHashMap<String,FieldInfo>();\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (method.getReturnType().equals(Void.TYPE)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 0) {\n      continue;\n    }\n    if (method.getReturnType() == ClassLoader.class) {\n      continue;\n    }\n    if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.serialize()) {\n        continue;\n      }\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n        fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n        continue;\n      }\n    }\n    if (methodName.startsWith(\"get\")) {\n      if (methodName.length() < 4) {\n        continue;\n      }\n      if (methodName.equals(\"getClass\")) {\n        continue;\n      }\n      char c3=methodName.charAt(3);\n      String propertyName;\n      if (Character.isUpperCase(c3)) {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n else       if (c3 == '_') {\n        propertyName=methodName.substring(4);\n      }\n else       if (c3 == 'f') {\n        propertyName=methodName.substring(3);\n      }\n else {\n        continue;\n      }\n      boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n      if (ignore) {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field == null) {\n        field=ParserConfig.getField(clazz,methodName.substring(3));\n      }\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n    if (methodName.startsWith(\"is\")) {\n      if (methodName.length() < 3) {\n        continue;\n      }\n      char c2=methodName.charAt(2);\n      String propertyName;\n      if (Character.isUpperCase(c2)) {\n        propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n      }\n else       if (c2 == '_') {\n        propertyName=methodName.substring(3);\n      }\n else       if (c2 == 'f') {\n        propertyName=methodName.substring(2);\n      }\n else {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    String propertyName=field.getName();\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    if (!fieldInfoMap.containsKey(propertyName)) {\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field));\n    }\n  }\n  List<FieldInfo> fieldInfoList=new ArrayList<FieldInfo>();\n  boolean containsAll=false;\n  String[] orders=null;\n  JSONType annotation=clazz.getAnnotation(JSONType.class);\n  if (annotation != null) {\n    orders=annotation.orders();\n    if (orders != null && orders.length == fieldInfoMap.size()) {\n      containsAll=true;\n      for (      String item : orders) {\n        if (!fieldInfoMap.containsKey(item)) {\n          containsAll=false;\n          break;\n        }\n      }\n    }\n else {\n      containsAll=false;\n    }\n  }\n  if (containsAll) {\n    for (    String item : orders) {\n      FieldInfo fieldInfo=fieldInfoMap.get(item);\n      fieldInfoList.add(fieldInfo);\n    }\n  }\n else {\n    for (    FieldInfo fieldInfo : fieldInfoMap.values()) {\n      fieldInfoList.add(fieldInfo);\n    }\n    if (sorted) {\n      Collections.sort(fieldInfoList);\n    }\n  }\n  return fieldInfoList;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 825,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 926,
        "startColumnNumber" : 20,
        "endLineNumber" : 926,
        "endColumnNumber" : 94
      },
      "nodeContext" : "fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 960,
      "startColumnNumber" : 29,
      "endLineNumber" : 960,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 960,
        "startColumnNumber" : 20,
        "endLineNumber" : 960,
        "endColumnNumber" : 33
      },
      "nodeContext" : "field == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 123,
        "startLineNumber" : 960,
        "startColumnNumber" : 16,
        "endLineNumber" : 962,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (field == null) {\n  field=ParserConfig.getField(clazz,methodName.substring(3));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 16,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2273,
        "startLineNumber" : 931,
        "startColumnNumber" : 46,
        "endLineNumber" : 993,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (methodName.length() < 4) {\n    continue;\n  }\n  if (methodName.equals(\"getClass\")) {\n    continue;\n  }\n  char c3=methodName.charAt(3);\n  String propertyName;\n  if (Character.isUpperCase(c3)) {\n    propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n  }\n else   if (c3 == '_') {\n    propertyName=methodName.substring(4);\n  }\n else   if (c3 == 'f') {\n    propertyName=methodName.substring(3);\n  }\n else {\n    continue;\n  }\n  boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n  if (ignore) {\n    continue;\n  }\n  Field field=ParserConfig.getField(clazz,propertyName);\n  if (field == null) {\n    field=ParserConfig.getField(clazz,methodName.substring(3));\n  }\n  if (field != null) {\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n      }\n    }\n  }\n  if (aliasMap != null) {\n    propertyName=aliasMap.get(propertyName);\n    if (propertyName == null) {\n      continue;\n    }\n  }\n  fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 204,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2307,
        "startLineNumber" : 931,
        "startColumnNumber" : 12,
        "endLineNumber" : 993,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (methodName.startsWith(\"get\")) {\n  if (methodName.length() < 4) {\n    continue;\n  }\n  if (methodName.equals(\"getClass\")) {\n    continue;\n  }\n  char c3=methodName.charAt(3);\n  String propertyName;\n  if (Character.isUpperCase(c3)) {\n    propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n  }\n else   if (c3 == '_') {\n    propertyName=methodName.substring(4);\n  }\n else   if (c3 == 'f') {\n    propertyName=methodName.substring(3);\n  }\n else {\n    continue;\n  }\n  boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n  if (ignore) {\n    continue;\n  }\n  Field field=ParserConfig.getField(clazz,propertyName);\n  if (field == null) {\n    field=ParserConfig.getField(clazz,methodName.substring(3));\n  }\n  if (field != null) {\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n      }\n    }\n  }\n  if (aliasMap != null) {\n    propertyName=aliasMap.get(propertyName);\n    if (propertyName == null) {\n      continue;\n    }\n  }\n  fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 209,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 5811,
        "startLineNumber" : 881,
        "startColumnNumber" : 49,
        "endLineNumber" : 1044,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String methodName=method.getName();\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  if (method.getReturnType().equals(Void.TYPE)) {\n    continue;\n  }\n  if (method.getParameterTypes().length != 0) {\n    continue;\n  }\n  if (method.getReturnType() == ClassLoader.class) {\n    continue;\n  }\n  if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n    continue;\n  }\n  JSONField annotation=method.getAnnotation(JSONField.class);\n  if (annotation == null) {\n    annotation=getSupperMethodAnnotation(clazz,method);\n  }\n  if (annotation != null) {\n    if (!annotation.serialize()) {\n      continue;\n    }\n    if (annotation.name().length() != 0) {\n      String propertyName=annotation.name();\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n      continue;\n    }\n  }\n  if (methodName.startsWith(\"get\")) {\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (methodName.equals(\"getClass\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else {\n      continue;\n    }\n    boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n    if (ignore) {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field == null) {\n      field=ParserConfig.getField(clazz,methodName.substring(3));\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n  if (methodName.startsWith(\"is\")) {\n    if (methodName.length() < 3) {\n      continue;\n    }\n    char c2=methodName.charAt(2);\n    String propertyName;\n    if (Character.isUpperCase(c2)) {\n      propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n    }\n else     if (c2 == '_') {\n      propertyName=methodName.substring(3);\n    }\n else     if (c2 == 'f') {\n      propertyName=methodName.substring(2);\n    }\n else {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 532,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5852,
        "startLineNumber" : 881,
        "startColumnNumber" : 8,
        "endLineNumber" : 1044,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Method method : clazz.getMethods()) {\n  String methodName=method.getName();\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  if (method.getReturnType().equals(Void.TYPE)) {\n    continue;\n  }\n  if (method.getParameterTypes().length != 0) {\n    continue;\n  }\n  if (method.getReturnType() == ClassLoader.class) {\n    continue;\n  }\n  if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n    continue;\n  }\n  JSONField annotation=method.getAnnotation(JSONField.class);\n  if (annotation == null) {\n    annotation=getSupperMethodAnnotation(clazz,method);\n  }\n  if (annotation != null) {\n    if (!annotation.serialize()) {\n      continue;\n    }\n    if (annotation.name().length() != 0) {\n      String propertyName=annotation.name();\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n      continue;\n    }\n  }\n  if (methodName.startsWith(\"get\")) {\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (methodName.equals(\"getClass\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else {\n      continue;\n    }\n    boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n    if (ignore) {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field == null) {\n      field=ParserConfig.getField(clazz,methodName.substring(3));\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n  if (methodName.startsWith(\"is\")) {\n    if (methodName.length() < 3) {\n      continue;\n    }\n    char c2=methodName.charAt(2);\n    String propertyName;\n    if (Character.isUpperCase(c2)) {\n      propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n    }\n else     if (c2 == '_') {\n      propertyName=methodName.substring(3);\n    }\n else     if (c2 == 'f') {\n      propertyName=methodName.substring(2);\n    }\n else {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 540,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8137,
        "startLineNumber" : 878,
        "startColumnNumber" : 111,
        "endLineNumber" : 1114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,FieldInfo> fieldInfoMap=new LinkedHashMap<String,FieldInfo>();\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (method.getReturnType().equals(Void.TYPE)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 0) {\n      continue;\n    }\n    if (method.getReturnType() == ClassLoader.class) {\n      continue;\n    }\n    if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.serialize()) {\n        continue;\n      }\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n        fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n        continue;\n      }\n    }\n    if (methodName.startsWith(\"get\")) {\n      if (methodName.length() < 4) {\n        continue;\n      }\n      if (methodName.equals(\"getClass\")) {\n        continue;\n      }\n      char c3=methodName.charAt(3);\n      String propertyName;\n      if (Character.isUpperCase(c3)) {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n else       if (c3 == '_') {\n        propertyName=methodName.substring(4);\n      }\n else       if (c3 == 'f') {\n        propertyName=methodName.substring(3);\n      }\n else {\n        continue;\n      }\n      boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n      if (ignore) {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field == null) {\n        field=ParserConfig.getField(clazz,methodName.substring(3));\n      }\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n    if (methodName.startsWith(\"is\")) {\n      if (methodName.length() < 3) {\n        continue;\n      }\n      char c2=methodName.charAt(2);\n      String propertyName;\n      if (Character.isUpperCase(c2)) {\n        propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n      }\n else       if (c2 == '_') {\n        propertyName=methodName.substring(3);\n      }\n else       if (c2 == 'f') {\n        propertyName=methodName.substring(2);\n      }\n else {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    String propertyName=field.getName();\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    if (!fieldInfoMap.containsKey(propertyName)) {\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field));\n    }\n  }\n  List<FieldInfo> fieldInfoList=new ArrayList<FieldInfo>();\n  boolean containsAll=false;\n  String[] orders=null;\n  JSONType annotation=clazz.getAnnotation(JSONType.class);\n  if (annotation != null) {\n    orders=annotation.orders();\n    if (orders != null && orders.length == fieldInfoMap.size()) {\n      containsAll=true;\n      for (      String item : orders) {\n        if (!fieldInfoMap.containsKey(item)) {\n          containsAll=false;\n          break;\n        }\n      }\n    }\n else {\n      containsAll=false;\n    }\n  }\n  if (containsAll) {\n    for (    String item : orders) {\n      FieldInfo fieldInfo=fieldInfoMap.get(item);\n      fieldInfoList.add(fieldInfo);\n    }\n  }\n else {\n    for (    FieldInfo fieldInfo : fieldInfoMap.values()) {\n      fieldInfoList.add(fieldInfo);\n    }\n    if (sorted) {\n      Collections.sort(fieldInfoList);\n    }\n  }\n  return fieldInfoList;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 798,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8244,
        "startLineNumber" : 878,
        "startColumnNumber" : 4,
        "endLineNumber" : 1114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static List<FieldInfo> computeGetters(Class<?> clazz,Map<String,String> aliasMap,boolean sorted){\n  Map<String,FieldInfo> fieldInfoMap=new LinkedHashMap<String,FieldInfo>();\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (method.getReturnType().equals(Void.TYPE)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 0) {\n      continue;\n    }\n    if (method.getReturnType() == ClassLoader.class) {\n      continue;\n    }\n    if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.serialize()) {\n        continue;\n      }\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n        fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n        continue;\n      }\n    }\n    if (methodName.startsWith(\"get\")) {\n      if (methodName.length() < 4) {\n        continue;\n      }\n      if (methodName.equals(\"getClass\")) {\n        continue;\n      }\n      char c3=methodName.charAt(3);\n      String propertyName;\n      if (Character.isUpperCase(c3)) {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n else       if (c3 == '_') {\n        propertyName=methodName.substring(4);\n      }\n else       if (c3 == 'f') {\n        propertyName=methodName.substring(3);\n      }\n else {\n        continue;\n      }\n      boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n      if (ignore) {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field == null) {\n        field=ParserConfig.getField(clazz,methodName.substring(3));\n      }\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n    if (methodName.startsWith(\"is\")) {\n      if (methodName.length() < 3) {\n        continue;\n      }\n      char c2=methodName.charAt(2);\n      String propertyName;\n      if (Character.isUpperCase(c2)) {\n        propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n      }\n else       if (c2 == '_') {\n        propertyName=methodName.substring(3);\n      }\n else       if (c2 == 'f') {\n        propertyName=methodName.substring(2);\n      }\n else {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    String propertyName=field.getName();\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    if (!fieldInfoMap.containsKey(propertyName)) {\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field));\n    }\n  }\n  List<FieldInfo> fieldInfoList=new ArrayList<FieldInfo>();\n  boolean containsAll=false;\n  String[] orders=null;\n  JSONType annotation=clazz.getAnnotation(JSONType.class);\n  if (annotation != null) {\n    orders=annotation.orders();\n    if (orders != null && orders.length == fieldInfoMap.size()) {\n      containsAll=true;\n      for (      String item : orders) {\n        if (!fieldInfoMap.containsKey(item)) {\n          containsAll=false;\n          break;\n        }\n      }\n    }\n else {\n      containsAll=false;\n    }\n  }\n  if (containsAll) {\n    for (    String item : orders) {\n      FieldInfo fieldInfo=fieldInfoMap.get(item);\n      fieldInfoList.add(fieldInfo);\n    }\n  }\n else {\n    for (    FieldInfo fieldInfo : fieldInfoMap.values()) {\n      fieldInfoList.add(fieldInfo);\n    }\n    if (sorted) {\n      Collections.sort(fieldInfoList);\n    }\n  }\n  return fieldInfoList;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 825,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 960,
        "startColumnNumber" : 20,
        "endLineNumber" : 960,
        "endColumnNumber" : 33
      },
      "nodeContext" : "field == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 964,
      "startColumnNumber" : 29,
      "endLineNumber" : 964,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 964,
        "startColumnNumber" : 20,
        "endLineNumber" : 964,
        "endColumnNumber" : 33
      },
      "nodeContext" : "field != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 801,
        "startLineNumber" : 964,
        "startColumnNumber" : 16,
        "endLineNumber" : 983,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (field != null) {\n  JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n  if (fieldAnnotation != null) {\n    if (!fieldAnnotation.serialize()) {\n      continue;\n    }\n    if (fieldAnnotation.name().length() != 0) {\n      propertyName=fieldAnnotation.name();\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 61,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2273,
        "startLineNumber" : 931,
        "startColumnNumber" : 46,
        "endLineNumber" : 993,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (methodName.length() < 4) {\n    continue;\n  }\n  if (methodName.equals(\"getClass\")) {\n    continue;\n  }\n  char c3=methodName.charAt(3);\n  String propertyName;\n  if (Character.isUpperCase(c3)) {\n    propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n  }\n else   if (c3 == '_') {\n    propertyName=methodName.substring(4);\n  }\n else   if (c3 == 'f') {\n    propertyName=methodName.substring(3);\n  }\n else {\n    continue;\n  }\n  boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n  if (ignore) {\n    continue;\n  }\n  Field field=ParserConfig.getField(clazz,propertyName);\n  if (field == null) {\n    field=ParserConfig.getField(clazz,methodName.substring(3));\n  }\n  if (field != null) {\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n      }\n    }\n  }\n  if (aliasMap != null) {\n    propertyName=aliasMap.get(propertyName);\n    if (propertyName == null) {\n      continue;\n    }\n  }\n  fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 204,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2307,
        "startLineNumber" : 931,
        "startColumnNumber" : 12,
        "endLineNumber" : 993,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (methodName.startsWith(\"get\")) {\n  if (methodName.length() < 4) {\n    continue;\n  }\n  if (methodName.equals(\"getClass\")) {\n    continue;\n  }\n  char c3=methodName.charAt(3);\n  String propertyName;\n  if (Character.isUpperCase(c3)) {\n    propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n  }\n else   if (c3 == '_') {\n    propertyName=methodName.substring(4);\n  }\n else   if (c3 == 'f') {\n    propertyName=methodName.substring(3);\n  }\n else {\n    continue;\n  }\n  boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n  if (ignore) {\n    continue;\n  }\n  Field field=ParserConfig.getField(clazz,propertyName);\n  if (field == null) {\n    field=ParserConfig.getField(clazz,methodName.substring(3));\n  }\n  if (field != null) {\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n      }\n    }\n  }\n  if (aliasMap != null) {\n    propertyName=aliasMap.get(propertyName);\n    if (propertyName == null) {\n      continue;\n    }\n  }\n  fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 209,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 5811,
        "startLineNumber" : 881,
        "startColumnNumber" : 49,
        "endLineNumber" : 1044,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String methodName=method.getName();\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  if (method.getReturnType().equals(Void.TYPE)) {\n    continue;\n  }\n  if (method.getParameterTypes().length != 0) {\n    continue;\n  }\n  if (method.getReturnType() == ClassLoader.class) {\n    continue;\n  }\n  if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n    continue;\n  }\n  JSONField annotation=method.getAnnotation(JSONField.class);\n  if (annotation == null) {\n    annotation=getSupperMethodAnnotation(clazz,method);\n  }\n  if (annotation != null) {\n    if (!annotation.serialize()) {\n      continue;\n    }\n    if (annotation.name().length() != 0) {\n      String propertyName=annotation.name();\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n      continue;\n    }\n  }\n  if (methodName.startsWith(\"get\")) {\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (methodName.equals(\"getClass\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else {\n      continue;\n    }\n    boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n    if (ignore) {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field == null) {\n      field=ParserConfig.getField(clazz,methodName.substring(3));\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n  if (methodName.startsWith(\"is\")) {\n    if (methodName.length() < 3) {\n      continue;\n    }\n    char c2=methodName.charAt(2);\n    String propertyName;\n    if (Character.isUpperCase(c2)) {\n      propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n    }\n else     if (c2 == '_') {\n      propertyName=methodName.substring(3);\n    }\n else     if (c2 == 'f') {\n      propertyName=methodName.substring(2);\n    }\n else {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 532,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5852,
        "startLineNumber" : 881,
        "startColumnNumber" : 8,
        "endLineNumber" : 1044,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Method method : clazz.getMethods()) {\n  String methodName=method.getName();\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  if (method.getReturnType().equals(Void.TYPE)) {\n    continue;\n  }\n  if (method.getParameterTypes().length != 0) {\n    continue;\n  }\n  if (method.getReturnType() == ClassLoader.class) {\n    continue;\n  }\n  if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n    continue;\n  }\n  JSONField annotation=method.getAnnotation(JSONField.class);\n  if (annotation == null) {\n    annotation=getSupperMethodAnnotation(clazz,method);\n  }\n  if (annotation != null) {\n    if (!annotation.serialize()) {\n      continue;\n    }\n    if (annotation.name().length() != 0) {\n      String propertyName=annotation.name();\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n      continue;\n    }\n  }\n  if (methodName.startsWith(\"get\")) {\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (methodName.equals(\"getClass\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else {\n      continue;\n    }\n    boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n    if (ignore) {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field == null) {\n      field=ParserConfig.getField(clazz,methodName.substring(3));\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n  if (methodName.startsWith(\"is\")) {\n    if (methodName.length() < 3) {\n      continue;\n    }\n    char c2=methodName.charAt(2);\n    String propertyName;\n    if (Character.isUpperCase(c2)) {\n      propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n    }\n else     if (c2 == '_') {\n      propertyName=methodName.substring(3);\n    }\n else     if (c2 == 'f') {\n      propertyName=methodName.substring(2);\n    }\n else {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 540,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8137,
        "startLineNumber" : 878,
        "startColumnNumber" : 111,
        "endLineNumber" : 1114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,FieldInfo> fieldInfoMap=new LinkedHashMap<String,FieldInfo>();\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (method.getReturnType().equals(Void.TYPE)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 0) {\n      continue;\n    }\n    if (method.getReturnType() == ClassLoader.class) {\n      continue;\n    }\n    if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.serialize()) {\n        continue;\n      }\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n        fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n        continue;\n      }\n    }\n    if (methodName.startsWith(\"get\")) {\n      if (methodName.length() < 4) {\n        continue;\n      }\n      if (methodName.equals(\"getClass\")) {\n        continue;\n      }\n      char c3=methodName.charAt(3);\n      String propertyName;\n      if (Character.isUpperCase(c3)) {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n else       if (c3 == '_') {\n        propertyName=methodName.substring(4);\n      }\n else       if (c3 == 'f') {\n        propertyName=methodName.substring(3);\n      }\n else {\n        continue;\n      }\n      boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n      if (ignore) {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field == null) {\n        field=ParserConfig.getField(clazz,methodName.substring(3));\n      }\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n    if (methodName.startsWith(\"is\")) {\n      if (methodName.length() < 3) {\n        continue;\n      }\n      char c2=methodName.charAt(2);\n      String propertyName;\n      if (Character.isUpperCase(c2)) {\n        propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n      }\n else       if (c2 == '_') {\n        propertyName=methodName.substring(3);\n      }\n else       if (c2 == 'f') {\n        propertyName=methodName.substring(2);\n      }\n else {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    String propertyName=field.getName();\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    if (!fieldInfoMap.containsKey(propertyName)) {\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field));\n    }\n  }\n  List<FieldInfo> fieldInfoList=new ArrayList<FieldInfo>();\n  boolean containsAll=false;\n  String[] orders=null;\n  JSONType annotation=clazz.getAnnotation(JSONType.class);\n  if (annotation != null) {\n    orders=annotation.orders();\n    if (orders != null && orders.length == fieldInfoMap.size()) {\n      containsAll=true;\n      for (      String item : orders) {\n        if (!fieldInfoMap.containsKey(item)) {\n          containsAll=false;\n          break;\n        }\n      }\n    }\n else {\n      containsAll=false;\n    }\n  }\n  if (containsAll) {\n    for (    String item : orders) {\n      FieldInfo fieldInfo=fieldInfoMap.get(item);\n      fieldInfoList.add(fieldInfo);\n    }\n  }\n else {\n    for (    FieldInfo fieldInfo : fieldInfoMap.values()) {\n      fieldInfoList.add(fieldInfo);\n    }\n    if (sorted) {\n      Collections.sort(fieldInfoList);\n    }\n  }\n  return fieldInfoList;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 798,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8244,
        "startLineNumber" : 878,
        "startColumnNumber" : 4,
        "endLineNumber" : 1114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static List<FieldInfo> computeGetters(Class<?> clazz,Map<String,String> aliasMap,boolean sorted){\n  Map<String,FieldInfo> fieldInfoMap=new LinkedHashMap<String,FieldInfo>();\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (method.getReturnType().equals(Void.TYPE)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 0) {\n      continue;\n    }\n    if (method.getReturnType() == ClassLoader.class) {\n      continue;\n    }\n    if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.serialize()) {\n        continue;\n      }\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n        fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n        continue;\n      }\n    }\n    if (methodName.startsWith(\"get\")) {\n      if (methodName.length() < 4) {\n        continue;\n      }\n      if (methodName.equals(\"getClass\")) {\n        continue;\n      }\n      char c3=methodName.charAt(3);\n      String propertyName;\n      if (Character.isUpperCase(c3)) {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n else       if (c3 == '_') {\n        propertyName=methodName.substring(4);\n      }\n else       if (c3 == 'f') {\n        propertyName=methodName.substring(3);\n      }\n else {\n        continue;\n      }\n      boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n      if (ignore) {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field == null) {\n        field=ParserConfig.getField(clazz,methodName.substring(3));\n      }\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n    if (methodName.startsWith(\"is\")) {\n      if (methodName.length() < 3) {\n        continue;\n      }\n      char c2=methodName.charAt(2);\n      String propertyName;\n      if (Character.isUpperCase(c2)) {\n        propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n      }\n else       if (c2 == '_') {\n        propertyName=methodName.substring(3);\n      }\n else       if (c2 == 'f') {\n        propertyName=methodName.substring(2);\n      }\n else {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    String propertyName=field.getName();\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    if (!fieldInfoMap.containsKey(propertyName)) {\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field));\n    }\n  }\n  List<FieldInfo> fieldInfoList=new ArrayList<FieldInfo>();\n  boolean containsAll=false;\n  String[] orders=null;\n  JSONType annotation=clazz.getAnnotation(JSONType.class);\n  if (annotation != null) {\n    orders=annotation.orders();\n    if (orders != null && orders.length == fieldInfoMap.size()) {\n      containsAll=true;\n      for (      String item : orders) {\n        if (!fieldInfoMap.containsKey(item)) {\n          containsAll=false;\n          break;\n        }\n      }\n    }\n else {\n      containsAll=false;\n    }\n  }\n  if (containsAll) {\n    for (    String item : orders) {\n      FieldInfo fieldInfo=fieldInfoMap.get(item);\n      fieldInfoList.add(fieldInfo);\n    }\n  }\n else {\n    for (    FieldInfo fieldInfo : fieldInfoMap.values()) {\n      fieldInfoList.add(fieldInfo);\n    }\n    if (sorted) {\n      Collections.sort(fieldInfoList);\n    }\n  }\n  return fieldInfoList;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 825,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 964,
        "startColumnNumber" : 20,
        "endLineNumber" : 964,
        "endColumnNumber" : 33
      },
      "nodeContext" : "field != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 967,
      "startColumnNumber" : 43,
      "endLineNumber" : 967,
      "endColumnNumber" : 47
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 967,
        "startColumnNumber" : 24,
        "endLineNumber" : 967,
        "endColumnNumber" : 47
      },
      "nodeContext" : "fieldAnnotation != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 651,
        "startLineNumber" : 967,
        "startColumnNumber" : 20,
        "endLineNumber" : 982,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (fieldAnnotation != null) {\n  if (!fieldAnnotation.serialize()) {\n    continue;\n  }\n  if (fieldAnnotation.name().length() != 0) {\n    propertyName=fieldAnnotation.name();\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 45,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 782,
        "startLineNumber" : 964,
        "startColumnNumber" : 35,
        "endLineNumber" : 983,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n  if (fieldAnnotation != null) {\n    if (!fieldAnnotation.serialize()) {\n      continue;\n    }\n    if (fieldAnnotation.name().length() != 0) {\n      propertyName=fieldAnnotation.name();\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 57,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 801,
        "startLineNumber" : 964,
        "startColumnNumber" : 16,
        "endLineNumber" : 983,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (field != null) {\n  JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n  if (fieldAnnotation != null) {\n    if (!fieldAnnotation.serialize()) {\n      continue;\n    }\n    if (fieldAnnotation.name().length() != 0) {\n      propertyName=fieldAnnotation.name();\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 61,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2273,
        "startLineNumber" : 931,
        "startColumnNumber" : 46,
        "endLineNumber" : 993,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (methodName.length() < 4) {\n    continue;\n  }\n  if (methodName.equals(\"getClass\")) {\n    continue;\n  }\n  char c3=methodName.charAt(3);\n  String propertyName;\n  if (Character.isUpperCase(c3)) {\n    propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n  }\n else   if (c3 == '_') {\n    propertyName=methodName.substring(4);\n  }\n else   if (c3 == 'f') {\n    propertyName=methodName.substring(3);\n  }\n else {\n    continue;\n  }\n  boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n  if (ignore) {\n    continue;\n  }\n  Field field=ParserConfig.getField(clazz,propertyName);\n  if (field == null) {\n    field=ParserConfig.getField(clazz,methodName.substring(3));\n  }\n  if (field != null) {\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n      }\n    }\n  }\n  if (aliasMap != null) {\n    propertyName=aliasMap.get(propertyName);\n    if (propertyName == null) {\n      continue;\n    }\n  }\n  fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 204,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2307,
        "startLineNumber" : 931,
        "startColumnNumber" : 12,
        "endLineNumber" : 993,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (methodName.startsWith(\"get\")) {\n  if (methodName.length() < 4) {\n    continue;\n  }\n  if (methodName.equals(\"getClass\")) {\n    continue;\n  }\n  char c3=methodName.charAt(3);\n  String propertyName;\n  if (Character.isUpperCase(c3)) {\n    propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n  }\n else   if (c3 == '_') {\n    propertyName=methodName.substring(4);\n  }\n else   if (c3 == 'f') {\n    propertyName=methodName.substring(3);\n  }\n else {\n    continue;\n  }\n  boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n  if (ignore) {\n    continue;\n  }\n  Field field=ParserConfig.getField(clazz,propertyName);\n  if (field == null) {\n    field=ParserConfig.getField(clazz,methodName.substring(3));\n  }\n  if (field != null) {\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n      }\n    }\n  }\n  if (aliasMap != null) {\n    propertyName=aliasMap.get(propertyName);\n    if (propertyName == null) {\n      continue;\n    }\n  }\n  fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 209,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 5811,
        "startLineNumber" : 881,
        "startColumnNumber" : 49,
        "endLineNumber" : 1044,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String methodName=method.getName();\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  if (method.getReturnType().equals(Void.TYPE)) {\n    continue;\n  }\n  if (method.getParameterTypes().length != 0) {\n    continue;\n  }\n  if (method.getReturnType() == ClassLoader.class) {\n    continue;\n  }\n  if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n    continue;\n  }\n  JSONField annotation=method.getAnnotation(JSONField.class);\n  if (annotation == null) {\n    annotation=getSupperMethodAnnotation(clazz,method);\n  }\n  if (annotation != null) {\n    if (!annotation.serialize()) {\n      continue;\n    }\n    if (annotation.name().length() != 0) {\n      String propertyName=annotation.name();\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n      continue;\n    }\n  }\n  if (methodName.startsWith(\"get\")) {\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (methodName.equals(\"getClass\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else {\n      continue;\n    }\n    boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n    if (ignore) {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field == null) {\n      field=ParserConfig.getField(clazz,methodName.substring(3));\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n  if (methodName.startsWith(\"is\")) {\n    if (methodName.length() < 3) {\n      continue;\n    }\n    char c2=methodName.charAt(2);\n    String propertyName;\n    if (Character.isUpperCase(c2)) {\n      propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n    }\n else     if (c2 == '_') {\n      propertyName=methodName.substring(3);\n    }\n else     if (c2 == 'f') {\n      propertyName=methodName.substring(2);\n    }\n else {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 532,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5852,
        "startLineNumber" : 881,
        "startColumnNumber" : 8,
        "endLineNumber" : 1044,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Method method : clazz.getMethods()) {\n  String methodName=method.getName();\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  if (method.getReturnType().equals(Void.TYPE)) {\n    continue;\n  }\n  if (method.getParameterTypes().length != 0) {\n    continue;\n  }\n  if (method.getReturnType() == ClassLoader.class) {\n    continue;\n  }\n  if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n    continue;\n  }\n  JSONField annotation=method.getAnnotation(JSONField.class);\n  if (annotation == null) {\n    annotation=getSupperMethodAnnotation(clazz,method);\n  }\n  if (annotation != null) {\n    if (!annotation.serialize()) {\n      continue;\n    }\n    if (annotation.name().length() != 0) {\n      String propertyName=annotation.name();\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n      continue;\n    }\n  }\n  if (methodName.startsWith(\"get\")) {\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (methodName.equals(\"getClass\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else {\n      continue;\n    }\n    boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n    if (ignore) {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field == null) {\n      field=ParserConfig.getField(clazz,methodName.substring(3));\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n  if (methodName.startsWith(\"is\")) {\n    if (methodName.length() < 3) {\n      continue;\n    }\n    char c2=methodName.charAt(2);\n    String propertyName;\n    if (Character.isUpperCase(c2)) {\n      propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n    }\n else     if (c2 == '_') {\n      propertyName=methodName.substring(3);\n    }\n else     if (c2 == 'f') {\n      propertyName=methodName.substring(2);\n    }\n else {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 540,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8137,
        "startLineNumber" : 878,
        "startColumnNumber" : 111,
        "endLineNumber" : 1114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,FieldInfo> fieldInfoMap=new LinkedHashMap<String,FieldInfo>();\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (method.getReturnType().equals(Void.TYPE)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 0) {\n      continue;\n    }\n    if (method.getReturnType() == ClassLoader.class) {\n      continue;\n    }\n    if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.serialize()) {\n        continue;\n      }\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n        fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n        continue;\n      }\n    }\n    if (methodName.startsWith(\"get\")) {\n      if (methodName.length() < 4) {\n        continue;\n      }\n      if (methodName.equals(\"getClass\")) {\n        continue;\n      }\n      char c3=methodName.charAt(3);\n      String propertyName;\n      if (Character.isUpperCase(c3)) {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n else       if (c3 == '_') {\n        propertyName=methodName.substring(4);\n      }\n else       if (c3 == 'f') {\n        propertyName=methodName.substring(3);\n      }\n else {\n        continue;\n      }\n      boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n      if (ignore) {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field == null) {\n        field=ParserConfig.getField(clazz,methodName.substring(3));\n      }\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n    if (methodName.startsWith(\"is\")) {\n      if (methodName.length() < 3) {\n        continue;\n      }\n      char c2=methodName.charAt(2);\n      String propertyName;\n      if (Character.isUpperCase(c2)) {\n        propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n      }\n else       if (c2 == '_') {\n        propertyName=methodName.substring(3);\n      }\n else       if (c2 == 'f') {\n        propertyName=methodName.substring(2);\n      }\n else {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    String propertyName=field.getName();\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    if (!fieldInfoMap.containsKey(propertyName)) {\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field));\n    }\n  }\n  List<FieldInfo> fieldInfoList=new ArrayList<FieldInfo>();\n  boolean containsAll=false;\n  String[] orders=null;\n  JSONType annotation=clazz.getAnnotation(JSONType.class);\n  if (annotation != null) {\n    orders=annotation.orders();\n    if (orders != null && orders.length == fieldInfoMap.size()) {\n      containsAll=true;\n      for (      String item : orders) {\n        if (!fieldInfoMap.containsKey(item)) {\n          containsAll=false;\n          break;\n        }\n      }\n    }\n else {\n      containsAll=false;\n    }\n  }\n  if (containsAll) {\n    for (    String item : orders) {\n      FieldInfo fieldInfo=fieldInfoMap.get(item);\n      fieldInfoList.add(fieldInfo);\n    }\n  }\n else {\n    for (    FieldInfo fieldInfo : fieldInfoMap.values()) {\n      fieldInfoList.add(fieldInfo);\n    }\n    if (sorted) {\n      Collections.sort(fieldInfoList);\n    }\n  }\n  return fieldInfoList;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 798,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8244,
        "startLineNumber" : 878,
        "startColumnNumber" : 4,
        "endLineNumber" : 1114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static List<FieldInfo> computeGetters(Class<?> clazz,Map<String,String> aliasMap,boolean sorted){\n  Map<String,FieldInfo> fieldInfoMap=new LinkedHashMap<String,FieldInfo>();\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (method.getReturnType().equals(Void.TYPE)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 0) {\n      continue;\n    }\n    if (method.getReturnType() == ClassLoader.class) {\n      continue;\n    }\n    if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.serialize()) {\n        continue;\n      }\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n        fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n        continue;\n      }\n    }\n    if (methodName.startsWith(\"get\")) {\n      if (methodName.length() < 4) {\n        continue;\n      }\n      if (methodName.equals(\"getClass\")) {\n        continue;\n      }\n      char c3=methodName.charAt(3);\n      String propertyName;\n      if (Character.isUpperCase(c3)) {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n else       if (c3 == '_') {\n        propertyName=methodName.substring(4);\n      }\n else       if (c3 == 'f') {\n        propertyName=methodName.substring(3);\n      }\n else {\n        continue;\n      }\n      boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n      if (ignore) {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field == null) {\n        field=ParserConfig.getField(clazz,methodName.substring(3));\n      }\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n    if (methodName.startsWith(\"is\")) {\n      if (methodName.length() < 3) {\n        continue;\n      }\n      char c2=methodName.charAt(2);\n      String propertyName;\n      if (Character.isUpperCase(c2)) {\n        propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n      }\n else       if (c2 == '_') {\n        propertyName=methodName.substring(3);\n      }\n else       if (c2 == 'f') {\n        propertyName=methodName.substring(2);\n      }\n else {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    String propertyName=field.getName();\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    if (!fieldInfoMap.containsKey(propertyName)) {\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field));\n    }\n  }\n  List<FieldInfo> fieldInfoList=new ArrayList<FieldInfo>();\n  boolean containsAll=false;\n  String[] orders=null;\n  JSONType annotation=clazz.getAnnotation(JSONType.class);\n  if (annotation != null) {\n    orders=annotation.orders();\n    if (orders != null && orders.length == fieldInfoMap.size()) {\n      containsAll=true;\n      for (      String item : orders) {\n        if (!fieldInfoMap.containsKey(item)) {\n          containsAll=false;\n          break;\n        }\n      }\n    }\n else {\n      containsAll=false;\n    }\n  }\n  if (containsAll) {\n    for (    String item : orders) {\n      FieldInfo fieldInfo=fieldInfoMap.get(item);\n      fieldInfoList.add(fieldInfo);\n    }\n  }\n else {\n    for (    FieldInfo fieldInfo : fieldInfoMap.values()) {\n      fieldInfoList.add(fieldInfo);\n    }\n    if (sorted) {\n      Collections.sort(fieldInfoList);\n    }\n  }\n  return fieldInfoList;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 825,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 967,
        "startColumnNumber" : 24,
        "endLineNumber" : 967,
        "endColumnNumber" : 47
      },
      "nodeContext" : "fieldAnnotation != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 975,
      "startColumnNumber" : 44,
      "endLineNumber" : 975,
      "endColumnNumber" : 48
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 975,
        "startColumnNumber" : 32,
        "endLineNumber" : 975,
        "endColumnNumber" : 48
      },
      "nodeContext" : "aliasMap != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 273,
        "startLineNumber" : 975,
        "startColumnNumber" : 28,
        "endLineNumber" : 980,
        "endColumnNumber" : 29
      },
      "nodeContext" : "if (aliasMap != null) {\n  propertyName=aliasMap.get(propertyName);\n  if (propertyName == null) {\n    continue;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 401,
        "startLineNumber" : 972,
        "startColumnNumber" : 66,
        "endLineNumber" : 981,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  propertyName=fieldAnnotation.name();\n  if (aliasMap != null) {\n    propertyName=aliasMap.get(propertyName);\n    if (propertyName == null) {\n      continue;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 25,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 443,
        "startLineNumber" : 972,
        "startColumnNumber" : 24,
        "endLineNumber" : 981,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (fieldAnnotation.name().length() != 0) {\n  propertyName=fieldAnnotation.name();\n  if (aliasMap != null) {\n    propertyName=aliasMap.get(propertyName);\n    if (propertyName == null) {\n      continue;\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 33,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 622,
        "startLineNumber" : 967,
        "startColumnNumber" : 49,
        "endLineNumber" : 982,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  if (!fieldAnnotation.serialize()) {\n    continue;\n  }\n  if (fieldAnnotation.name().length() != 0) {\n    propertyName=fieldAnnotation.name();\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 41,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 651,
        "startLineNumber" : 967,
        "startColumnNumber" : 20,
        "endLineNumber" : 982,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (fieldAnnotation != null) {\n  if (!fieldAnnotation.serialize()) {\n    continue;\n  }\n  if (fieldAnnotation.name().length() != 0) {\n    propertyName=fieldAnnotation.name();\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 45,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 782,
        "startLineNumber" : 964,
        "startColumnNumber" : 35,
        "endLineNumber" : 983,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n  if (fieldAnnotation != null) {\n    if (!fieldAnnotation.serialize()) {\n      continue;\n    }\n    if (fieldAnnotation.name().length() != 0) {\n      propertyName=fieldAnnotation.name();\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 57,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 801,
        "startLineNumber" : 964,
        "startColumnNumber" : 16,
        "endLineNumber" : 983,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (field != null) {\n  JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n  if (fieldAnnotation != null) {\n    if (!fieldAnnotation.serialize()) {\n      continue;\n    }\n    if (fieldAnnotation.name().length() != 0) {\n      propertyName=fieldAnnotation.name();\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 61,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2273,
        "startLineNumber" : 931,
        "startColumnNumber" : 46,
        "endLineNumber" : 993,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (methodName.length() < 4) {\n    continue;\n  }\n  if (methodName.equals(\"getClass\")) {\n    continue;\n  }\n  char c3=methodName.charAt(3);\n  String propertyName;\n  if (Character.isUpperCase(c3)) {\n    propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n  }\n else   if (c3 == '_') {\n    propertyName=methodName.substring(4);\n  }\n else   if (c3 == 'f') {\n    propertyName=methodName.substring(3);\n  }\n else {\n    continue;\n  }\n  boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n  if (ignore) {\n    continue;\n  }\n  Field field=ParserConfig.getField(clazz,propertyName);\n  if (field == null) {\n    field=ParserConfig.getField(clazz,methodName.substring(3));\n  }\n  if (field != null) {\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n      }\n    }\n  }\n  if (aliasMap != null) {\n    propertyName=aliasMap.get(propertyName);\n    if (propertyName == null) {\n      continue;\n    }\n  }\n  fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 204,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2307,
        "startLineNumber" : 931,
        "startColumnNumber" : 12,
        "endLineNumber" : 993,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (methodName.startsWith(\"get\")) {\n  if (methodName.length() < 4) {\n    continue;\n  }\n  if (methodName.equals(\"getClass\")) {\n    continue;\n  }\n  char c3=methodName.charAt(3);\n  String propertyName;\n  if (Character.isUpperCase(c3)) {\n    propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n  }\n else   if (c3 == '_') {\n    propertyName=methodName.substring(4);\n  }\n else   if (c3 == 'f') {\n    propertyName=methodName.substring(3);\n  }\n else {\n    continue;\n  }\n  boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n  if (ignore) {\n    continue;\n  }\n  Field field=ParserConfig.getField(clazz,propertyName);\n  if (field == null) {\n    field=ParserConfig.getField(clazz,methodName.substring(3));\n  }\n  if (field != null) {\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n      }\n    }\n  }\n  if (aliasMap != null) {\n    propertyName=aliasMap.get(propertyName);\n    if (propertyName == null) {\n      continue;\n    }\n  }\n  fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 209,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 5811,
        "startLineNumber" : 881,
        "startColumnNumber" : 49,
        "endLineNumber" : 1044,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String methodName=method.getName();\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  if (method.getReturnType().equals(Void.TYPE)) {\n    continue;\n  }\n  if (method.getParameterTypes().length != 0) {\n    continue;\n  }\n  if (method.getReturnType() == ClassLoader.class) {\n    continue;\n  }\n  if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n    continue;\n  }\n  JSONField annotation=method.getAnnotation(JSONField.class);\n  if (annotation == null) {\n    annotation=getSupperMethodAnnotation(clazz,method);\n  }\n  if (annotation != null) {\n    if (!annotation.serialize()) {\n      continue;\n    }\n    if (annotation.name().length() != 0) {\n      String propertyName=annotation.name();\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n      continue;\n    }\n  }\n  if (methodName.startsWith(\"get\")) {\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (methodName.equals(\"getClass\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else {\n      continue;\n    }\n    boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n    if (ignore) {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field == null) {\n      field=ParserConfig.getField(clazz,methodName.substring(3));\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n  if (methodName.startsWith(\"is\")) {\n    if (methodName.length() < 3) {\n      continue;\n    }\n    char c2=methodName.charAt(2);\n    String propertyName;\n    if (Character.isUpperCase(c2)) {\n      propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n    }\n else     if (c2 == '_') {\n      propertyName=methodName.substring(3);\n    }\n else     if (c2 == 'f') {\n      propertyName=methodName.substring(2);\n    }\n else {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 532,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5852,
        "startLineNumber" : 881,
        "startColumnNumber" : 8,
        "endLineNumber" : 1044,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Method method : clazz.getMethods()) {\n  String methodName=method.getName();\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  if (method.getReturnType().equals(Void.TYPE)) {\n    continue;\n  }\n  if (method.getParameterTypes().length != 0) {\n    continue;\n  }\n  if (method.getReturnType() == ClassLoader.class) {\n    continue;\n  }\n  if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n    continue;\n  }\n  JSONField annotation=method.getAnnotation(JSONField.class);\n  if (annotation == null) {\n    annotation=getSupperMethodAnnotation(clazz,method);\n  }\n  if (annotation != null) {\n    if (!annotation.serialize()) {\n      continue;\n    }\n    if (annotation.name().length() != 0) {\n      String propertyName=annotation.name();\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n      continue;\n    }\n  }\n  if (methodName.startsWith(\"get\")) {\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (methodName.equals(\"getClass\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else {\n      continue;\n    }\n    boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n    if (ignore) {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field == null) {\n      field=ParserConfig.getField(clazz,methodName.substring(3));\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n  if (methodName.startsWith(\"is\")) {\n    if (methodName.length() < 3) {\n      continue;\n    }\n    char c2=methodName.charAt(2);\n    String propertyName;\n    if (Character.isUpperCase(c2)) {\n      propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n    }\n else     if (c2 == '_') {\n      propertyName=methodName.substring(3);\n    }\n else     if (c2 == 'f') {\n      propertyName=methodName.substring(2);\n    }\n else {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 540,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8137,
        "startLineNumber" : 878,
        "startColumnNumber" : 111,
        "endLineNumber" : 1114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,FieldInfo> fieldInfoMap=new LinkedHashMap<String,FieldInfo>();\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (method.getReturnType().equals(Void.TYPE)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 0) {\n      continue;\n    }\n    if (method.getReturnType() == ClassLoader.class) {\n      continue;\n    }\n    if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.serialize()) {\n        continue;\n      }\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n        fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n        continue;\n      }\n    }\n    if (methodName.startsWith(\"get\")) {\n      if (methodName.length() < 4) {\n        continue;\n      }\n      if (methodName.equals(\"getClass\")) {\n        continue;\n      }\n      char c3=methodName.charAt(3);\n      String propertyName;\n      if (Character.isUpperCase(c3)) {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n else       if (c3 == '_') {\n        propertyName=methodName.substring(4);\n      }\n else       if (c3 == 'f') {\n        propertyName=methodName.substring(3);\n      }\n else {\n        continue;\n      }\n      boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n      if (ignore) {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field == null) {\n        field=ParserConfig.getField(clazz,methodName.substring(3));\n      }\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n    if (methodName.startsWith(\"is\")) {\n      if (methodName.length() < 3) {\n        continue;\n      }\n      char c2=methodName.charAt(2);\n      String propertyName;\n      if (Character.isUpperCase(c2)) {\n        propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n      }\n else       if (c2 == '_') {\n        propertyName=methodName.substring(3);\n      }\n else       if (c2 == 'f') {\n        propertyName=methodName.substring(2);\n      }\n else {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    String propertyName=field.getName();\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    if (!fieldInfoMap.containsKey(propertyName)) {\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field));\n    }\n  }\n  List<FieldInfo> fieldInfoList=new ArrayList<FieldInfo>();\n  boolean containsAll=false;\n  String[] orders=null;\n  JSONType annotation=clazz.getAnnotation(JSONType.class);\n  if (annotation != null) {\n    orders=annotation.orders();\n    if (orders != null && orders.length == fieldInfoMap.size()) {\n      containsAll=true;\n      for (      String item : orders) {\n        if (!fieldInfoMap.containsKey(item)) {\n          containsAll=false;\n          break;\n        }\n      }\n    }\n else {\n      containsAll=false;\n    }\n  }\n  if (containsAll) {\n    for (    String item : orders) {\n      FieldInfo fieldInfo=fieldInfoMap.get(item);\n      fieldInfoList.add(fieldInfo);\n    }\n  }\n else {\n    for (    FieldInfo fieldInfo : fieldInfoMap.values()) {\n      fieldInfoList.add(fieldInfo);\n    }\n    if (sorted) {\n      Collections.sort(fieldInfoList);\n    }\n  }\n  return fieldInfoList;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 798,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8244,
        "startLineNumber" : 878,
        "startColumnNumber" : 4,
        "endLineNumber" : 1114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static List<FieldInfo> computeGetters(Class<?> clazz,Map<String,String> aliasMap,boolean sorted){\n  Map<String,FieldInfo> fieldInfoMap=new LinkedHashMap<String,FieldInfo>();\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (method.getReturnType().equals(Void.TYPE)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 0) {\n      continue;\n    }\n    if (method.getReturnType() == ClassLoader.class) {\n      continue;\n    }\n    if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.serialize()) {\n        continue;\n      }\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n        fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n        continue;\n      }\n    }\n    if (methodName.startsWith(\"get\")) {\n      if (methodName.length() < 4) {\n        continue;\n      }\n      if (methodName.equals(\"getClass\")) {\n        continue;\n      }\n      char c3=methodName.charAt(3);\n      String propertyName;\n      if (Character.isUpperCase(c3)) {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n else       if (c3 == '_') {\n        propertyName=methodName.substring(4);\n      }\n else       if (c3 == 'f') {\n        propertyName=methodName.substring(3);\n      }\n else {\n        continue;\n      }\n      boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n      if (ignore) {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field == null) {\n        field=ParserConfig.getField(clazz,methodName.substring(3));\n      }\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n    if (methodName.startsWith(\"is\")) {\n      if (methodName.length() < 3) {\n        continue;\n      }\n      char c2=methodName.charAt(2);\n      String propertyName;\n      if (Character.isUpperCase(c2)) {\n        propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n      }\n else       if (c2 == '_') {\n        propertyName=methodName.substring(3);\n      }\n else       if (c2 == 'f') {\n        propertyName=methodName.substring(2);\n      }\n else {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    String propertyName=field.getName();\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    if (!fieldInfoMap.containsKey(propertyName)) {\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field));\n    }\n  }\n  List<FieldInfo> fieldInfoList=new ArrayList<FieldInfo>();\n  boolean containsAll=false;\n  String[] orders=null;\n  JSONType annotation=clazz.getAnnotation(JSONType.class);\n  if (annotation != null) {\n    orders=annotation.orders();\n    if (orders != null && orders.length == fieldInfoMap.size()) {\n      containsAll=true;\n      for (      String item : orders) {\n        if (!fieldInfoMap.containsKey(item)) {\n          containsAll=false;\n          break;\n        }\n      }\n    }\n else {\n      containsAll=false;\n    }\n  }\n  if (containsAll) {\n    for (    String item : orders) {\n      FieldInfo fieldInfo=fieldInfoMap.get(item);\n      fieldInfoList.add(fieldInfo);\n    }\n  }\n else {\n    for (    FieldInfo fieldInfo : fieldInfoMap.values()) {\n      fieldInfoList.add(fieldInfo);\n    }\n    if (sorted) {\n      Collections.sort(fieldInfoList);\n    }\n  }\n  return fieldInfoList;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 825,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 975,
        "startColumnNumber" : 32,
        "endLineNumber" : 975,
        "endColumnNumber" : 48
      },
      "nodeContext" : "aliasMap != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 977,
      "startColumnNumber" : 52,
      "endLineNumber" : 977,
      "endColumnNumber" : 56
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 977,
        "startColumnNumber" : 36,
        "endLineNumber" : 977,
        "endColumnNumber" : 56
      },
      "nodeContext" : "propertyName == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 109,
        "startLineNumber" : 977,
        "startColumnNumber" : 32,
        "endLineNumber" : 979,
        "endColumnNumber" : 33
      },
      "nodeContext" : "if (propertyName == null) {\n  continue;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 251,
        "startLineNumber" : 975,
        "startColumnNumber" : 50,
        "endLineNumber" : 980,
        "endColumnNumber" : 29
      },
      "nodeContext" : "{\n  propertyName=aliasMap.get(propertyName);\n  if (propertyName == null) {\n    continue;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 273,
        "startLineNumber" : 975,
        "startColumnNumber" : 28,
        "endLineNumber" : 980,
        "endColumnNumber" : 29
      },
      "nodeContext" : "if (aliasMap != null) {\n  propertyName=aliasMap.get(propertyName);\n  if (propertyName == null) {\n    continue;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 401,
        "startLineNumber" : 972,
        "startColumnNumber" : 66,
        "endLineNumber" : 981,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  propertyName=fieldAnnotation.name();\n  if (aliasMap != null) {\n    propertyName=aliasMap.get(propertyName);\n    if (propertyName == null) {\n      continue;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 25,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 443,
        "startLineNumber" : 972,
        "startColumnNumber" : 24,
        "endLineNumber" : 981,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (fieldAnnotation.name().length() != 0) {\n  propertyName=fieldAnnotation.name();\n  if (aliasMap != null) {\n    propertyName=aliasMap.get(propertyName);\n    if (propertyName == null) {\n      continue;\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 33,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 622,
        "startLineNumber" : 967,
        "startColumnNumber" : 49,
        "endLineNumber" : 982,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  if (!fieldAnnotation.serialize()) {\n    continue;\n  }\n  if (fieldAnnotation.name().length() != 0) {\n    propertyName=fieldAnnotation.name();\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 41,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 651,
        "startLineNumber" : 967,
        "startColumnNumber" : 20,
        "endLineNumber" : 982,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (fieldAnnotation != null) {\n  if (!fieldAnnotation.serialize()) {\n    continue;\n  }\n  if (fieldAnnotation.name().length() != 0) {\n    propertyName=fieldAnnotation.name();\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 45,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 782,
        "startLineNumber" : 964,
        "startColumnNumber" : 35,
        "endLineNumber" : 983,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n  if (fieldAnnotation != null) {\n    if (!fieldAnnotation.serialize()) {\n      continue;\n    }\n    if (fieldAnnotation.name().length() != 0) {\n      propertyName=fieldAnnotation.name();\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 57,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 801,
        "startLineNumber" : 964,
        "startColumnNumber" : 16,
        "endLineNumber" : 983,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (field != null) {\n  JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n  if (fieldAnnotation != null) {\n    if (!fieldAnnotation.serialize()) {\n      continue;\n    }\n    if (fieldAnnotation.name().length() != 0) {\n      propertyName=fieldAnnotation.name();\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 61,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2273,
        "startLineNumber" : 931,
        "startColumnNumber" : 46,
        "endLineNumber" : 993,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (methodName.length() < 4) {\n    continue;\n  }\n  if (methodName.equals(\"getClass\")) {\n    continue;\n  }\n  char c3=methodName.charAt(3);\n  String propertyName;\n  if (Character.isUpperCase(c3)) {\n    propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n  }\n else   if (c3 == '_') {\n    propertyName=methodName.substring(4);\n  }\n else   if (c3 == 'f') {\n    propertyName=methodName.substring(3);\n  }\n else {\n    continue;\n  }\n  boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n  if (ignore) {\n    continue;\n  }\n  Field field=ParserConfig.getField(clazz,propertyName);\n  if (field == null) {\n    field=ParserConfig.getField(clazz,methodName.substring(3));\n  }\n  if (field != null) {\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n      }\n    }\n  }\n  if (aliasMap != null) {\n    propertyName=aliasMap.get(propertyName);\n    if (propertyName == null) {\n      continue;\n    }\n  }\n  fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 204,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2307,
        "startLineNumber" : 931,
        "startColumnNumber" : 12,
        "endLineNumber" : 993,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (methodName.startsWith(\"get\")) {\n  if (methodName.length() < 4) {\n    continue;\n  }\n  if (methodName.equals(\"getClass\")) {\n    continue;\n  }\n  char c3=methodName.charAt(3);\n  String propertyName;\n  if (Character.isUpperCase(c3)) {\n    propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n  }\n else   if (c3 == '_') {\n    propertyName=methodName.substring(4);\n  }\n else   if (c3 == 'f') {\n    propertyName=methodName.substring(3);\n  }\n else {\n    continue;\n  }\n  boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n  if (ignore) {\n    continue;\n  }\n  Field field=ParserConfig.getField(clazz,propertyName);\n  if (field == null) {\n    field=ParserConfig.getField(clazz,methodName.substring(3));\n  }\n  if (field != null) {\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n      }\n    }\n  }\n  if (aliasMap != null) {\n    propertyName=aliasMap.get(propertyName);\n    if (propertyName == null) {\n      continue;\n    }\n  }\n  fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 209,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 5811,
        "startLineNumber" : 881,
        "startColumnNumber" : 49,
        "endLineNumber" : 1044,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String methodName=method.getName();\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  if (method.getReturnType().equals(Void.TYPE)) {\n    continue;\n  }\n  if (method.getParameterTypes().length != 0) {\n    continue;\n  }\n  if (method.getReturnType() == ClassLoader.class) {\n    continue;\n  }\n  if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n    continue;\n  }\n  JSONField annotation=method.getAnnotation(JSONField.class);\n  if (annotation == null) {\n    annotation=getSupperMethodAnnotation(clazz,method);\n  }\n  if (annotation != null) {\n    if (!annotation.serialize()) {\n      continue;\n    }\n    if (annotation.name().length() != 0) {\n      String propertyName=annotation.name();\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n      continue;\n    }\n  }\n  if (methodName.startsWith(\"get\")) {\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (methodName.equals(\"getClass\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else {\n      continue;\n    }\n    boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n    if (ignore) {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field == null) {\n      field=ParserConfig.getField(clazz,methodName.substring(3));\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n  if (methodName.startsWith(\"is\")) {\n    if (methodName.length() < 3) {\n      continue;\n    }\n    char c2=methodName.charAt(2);\n    String propertyName;\n    if (Character.isUpperCase(c2)) {\n      propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n    }\n else     if (c2 == '_') {\n      propertyName=methodName.substring(3);\n    }\n else     if (c2 == 'f') {\n      propertyName=methodName.substring(2);\n    }\n else {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 532,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5852,
        "startLineNumber" : 881,
        "startColumnNumber" : 8,
        "endLineNumber" : 1044,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Method method : clazz.getMethods()) {\n  String methodName=method.getName();\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  if (method.getReturnType().equals(Void.TYPE)) {\n    continue;\n  }\n  if (method.getParameterTypes().length != 0) {\n    continue;\n  }\n  if (method.getReturnType() == ClassLoader.class) {\n    continue;\n  }\n  if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n    continue;\n  }\n  JSONField annotation=method.getAnnotation(JSONField.class);\n  if (annotation == null) {\n    annotation=getSupperMethodAnnotation(clazz,method);\n  }\n  if (annotation != null) {\n    if (!annotation.serialize()) {\n      continue;\n    }\n    if (annotation.name().length() != 0) {\n      String propertyName=annotation.name();\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n      continue;\n    }\n  }\n  if (methodName.startsWith(\"get\")) {\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (methodName.equals(\"getClass\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else {\n      continue;\n    }\n    boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n    if (ignore) {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field == null) {\n      field=ParserConfig.getField(clazz,methodName.substring(3));\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n  if (methodName.startsWith(\"is\")) {\n    if (methodName.length() < 3) {\n      continue;\n    }\n    char c2=methodName.charAt(2);\n    String propertyName;\n    if (Character.isUpperCase(c2)) {\n      propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n    }\n else     if (c2 == '_') {\n      propertyName=methodName.substring(3);\n    }\n else     if (c2 == 'f') {\n      propertyName=methodName.substring(2);\n    }\n else {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 540,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8137,
        "startLineNumber" : 878,
        "startColumnNumber" : 111,
        "endLineNumber" : 1114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,FieldInfo> fieldInfoMap=new LinkedHashMap<String,FieldInfo>();\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (method.getReturnType().equals(Void.TYPE)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 0) {\n      continue;\n    }\n    if (method.getReturnType() == ClassLoader.class) {\n      continue;\n    }\n    if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.serialize()) {\n        continue;\n      }\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n        fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n        continue;\n      }\n    }\n    if (methodName.startsWith(\"get\")) {\n      if (methodName.length() < 4) {\n        continue;\n      }\n      if (methodName.equals(\"getClass\")) {\n        continue;\n      }\n      char c3=methodName.charAt(3);\n      String propertyName;\n      if (Character.isUpperCase(c3)) {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n else       if (c3 == '_') {\n        propertyName=methodName.substring(4);\n      }\n else       if (c3 == 'f') {\n        propertyName=methodName.substring(3);\n      }\n else {\n        continue;\n      }\n      boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n      if (ignore) {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field == null) {\n        field=ParserConfig.getField(clazz,methodName.substring(3));\n      }\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n    if (methodName.startsWith(\"is\")) {\n      if (methodName.length() < 3) {\n        continue;\n      }\n      char c2=methodName.charAt(2);\n      String propertyName;\n      if (Character.isUpperCase(c2)) {\n        propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n      }\n else       if (c2 == '_') {\n        propertyName=methodName.substring(3);\n      }\n else       if (c2 == 'f') {\n        propertyName=methodName.substring(2);\n      }\n else {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    String propertyName=field.getName();\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    if (!fieldInfoMap.containsKey(propertyName)) {\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field));\n    }\n  }\n  List<FieldInfo> fieldInfoList=new ArrayList<FieldInfo>();\n  boolean containsAll=false;\n  String[] orders=null;\n  JSONType annotation=clazz.getAnnotation(JSONType.class);\n  if (annotation != null) {\n    orders=annotation.orders();\n    if (orders != null && orders.length == fieldInfoMap.size()) {\n      containsAll=true;\n      for (      String item : orders) {\n        if (!fieldInfoMap.containsKey(item)) {\n          containsAll=false;\n          break;\n        }\n      }\n    }\n else {\n      containsAll=false;\n    }\n  }\n  if (containsAll) {\n    for (    String item : orders) {\n      FieldInfo fieldInfo=fieldInfoMap.get(item);\n      fieldInfoList.add(fieldInfo);\n    }\n  }\n else {\n    for (    FieldInfo fieldInfo : fieldInfoMap.values()) {\n      fieldInfoList.add(fieldInfo);\n    }\n    if (sorted) {\n      Collections.sort(fieldInfoList);\n    }\n  }\n  return fieldInfoList;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 798,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8244,
        "startLineNumber" : 878,
        "startColumnNumber" : 4,
        "endLineNumber" : 1114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static List<FieldInfo> computeGetters(Class<?> clazz,Map<String,String> aliasMap,boolean sorted){\n  Map<String,FieldInfo> fieldInfoMap=new LinkedHashMap<String,FieldInfo>();\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (method.getReturnType().equals(Void.TYPE)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 0) {\n      continue;\n    }\n    if (method.getReturnType() == ClassLoader.class) {\n      continue;\n    }\n    if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.serialize()) {\n        continue;\n      }\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n        fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n        continue;\n      }\n    }\n    if (methodName.startsWith(\"get\")) {\n      if (methodName.length() < 4) {\n        continue;\n      }\n      if (methodName.equals(\"getClass\")) {\n        continue;\n      }\n      char c3=methodName.charAt(3);\n      String propertyName;\n      if (Character.isUpperCase(c3)) {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n else       if (c3 == '_') {\n        propertyName=methodName.substring(4);\n      }\n else       if (c3 == 'f') {\n        propertyName=methodName.substring(3);\n      }\n else {\n        continue;\n      }\n      boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n      if (ignore) {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field == null) {\n        field=ParserConfig.getField(clazz,methodName.substring(3));\n      }\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n    if (methodName.startsWith(\"is\")) {\n      if (methodName.length() < 3) {\n        continue;\n      }\n      char c2=methodName.charAt(2);\n      String propertyName;\n      if (Character.isUpperCase(c2)) {\n        propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n      }\n else       if (c2 == '_') {\n        propertyName=methodName.substring(3);\n      }\n else       if (c2 == 'f') {\n        propertyName=methodName.substring(2);\n      }\n else {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    String propertyName=field.getName();\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    if (!fieldInfoMap.containsKey(propertyName)) {\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field));\n    }\n  }\n  List<FieldInfo> fieldInfoList=new ArrayList<FieldInfo>();\n  boolean containsAll=false;\n  String[] orders=null;\n  JSONType annotation=clazz.getAnnotation(JSONType.class);\n  if (annotation != null) {\n    orders=annotation.orders();\n    if (orders != null && orders.length == fieldInfoMap.size()) {\n      containsAll=true;\n      for (      String item : orders) {\n        if (!fieldInfoMap.containsKey(item)) {\n          containsAll=false;\n          break;\n        }\n      }\n    }\n else {\n      containsAll=false;\n    }\n  }\n  if (containsAll) {\n    for (    String item : orders) {\n      FieldInfo fieldInfo=fieldInfoMap.get(item);\n      fieldInfoList.add(fieldInfo);\n    }\n  }\n else {\n    for (    FieldInfo fieldInfo : fieldInfoMap.values()) {\n      fieldInfoList.add(fieldInfo);\n    }\n    if (sorted) {\n      Collections.sort(fieldInfoList);\n    }\n  }\n  return fieldInfoList;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 825,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 977,
        "startColumnNumber" : 36,
        "endLineNumber" : 977,
        "endColumnNumber" : 56
      },
      "nodeContext" : "propertyName == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 985,
      "startColumnNumber" : 32,
      "endLineNumber" : 985,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 985,
        "startColumnNumber" : 20,
        "endLineNumber" : 985,
        "endColumnNumber" : 36
      },
      "nodeContext" : "aliasMap != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 213,
        "startLineNumber" : 985,
        "startColumnNumber" : 16,
        "endLineNumber" : 990,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (aliasMap != null) {\n  propertyName=aliasMap.get(propertyName);\n  if (propertyName == null) {\n    continue;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2273,
        "startLineNumber" : 931,
        "startColumnNumber" : 46,
        "endLineNumber" : 993,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (methodName.length() < 4) {\n    continue;\n  }\n  if (methodName.equals(\"getClass\")) {\n    continue;\n  }\n  char c3=methodName.charAt(3);\n  String propertyName;\n  if (Character.isUpperCase(c3)) {\n    propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n  }\n else   if (c3 == '_') {\n    propertyName=methodName.substring(4);\n  }\n else   if (c3 == 'f') {\n    propertyName=methodName.substring(3);\n  }\n else {\n    continue;\n  }\n  boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n  if (ignore) {\n    continue;\n  }\n  Field field=ParserConfig.getField(clazz,propertyName);\n  if (field == null) {\n    field=ParserConfig.getField(clazz,methodName.substring(3));\n  }\n  if (field != null) {\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n      }\n    }\n  }\n  if (aliasMap != null) {\n    propertyName=aliasMap.get(propertyName);\n    if (propertyName == null) {\n      continue;\n    }\n  }\n  fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 204,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2307,
        "startLineNumber" : 931,
        "startColumnNumber" : 12,
        "endLineNumber" : 993,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (methodName.startsWith(\"get\")) {\n  if (methodName.length() < 4) {\n    continue;\n  }\n  if (methodName.equals(\"getClass\")) {\n    continue;\n  }\n  char c3=methodName.charAt(3);\n  String propertyName;\n  if (Character.isUpperCase(c3)) {\n    propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n  }\n else   if (c3 == '_') {\n    propertyName=methodName.substring(4);\n  }\n else   if (c3 == 'f') {\n    propertyName=methodName.substring(3);\n  }\n else {\n    continue;\n  }\n  boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n  if (ignore) {\n    continue;\n  }\n  Field field=ParserConfig.getField(clazz,propertyName);\n  if (field == null) {\n    field=ParserConfig.getField(clazz,methodName.substring(3));\n  }\n  if (field != null) {\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n      }\n    }\n  }\n  if (aliasMap != null) {\n    propertyName=aliasMap.get(propertyName);\n    if (propertyName == null) {\n      continue;\n    }\n  }\n  fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 209,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 5811,
        "startLineNumber" : 881,
        "startColumnNumber" : 49,
        "endLineNumber" : 1044,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String methodName=method.getName();\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  if (method.getReturnType().equals(Void.TYPE)) {\n    continue;\n  }\n  if (method.getParameterTypes().length != 0) {\n    continue;\n  }\n  if (method.getReturnType() == ClassLoader.class) {\n    continue;\n  }\n  if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n    continue;\n  }\n  JSONField annotation=method.getAnnotation(JSONField.class);\n  if (annotation == null) {\n    annotation=getSupperMethodAnnotation(clazz,method);\n  }\n  if (annotation != null) {\n    if (!annotation.serialize()) {\n      continue;\n    }\n    if (annotation.name().length() != 0) {\n      String propertyName=annotation.name();\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n      continue;\n    }\n  }\n  if (methodName.startsWith(\"get\")) {\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (methodName.equals(\"getClass\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else {\n      continue;\n    }\n    boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n    if (ignore) {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field == null) {\n      field=ParserConfig.getField(clazz,methodName.substring(3));\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n  if (methodName.startsWith(\"is\")) {\n    if (methodName.length() < 3) {\n      continue;\n    }\n    char c2=methodName.charAt(2);\n    String propertyName;\n    if (Character.isUpperCase(c2)) {\n      propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n    }\n else     if (c2 == '_') {\n      propertyName=methodName.substring(3);\n    }\n else     if (c2 == 'f') {\n      propertyName=methodName.substring(2);\n    }\n else {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 532,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5852,
        "startLineNumber" : 881,
        "startColumnNumber" : 8,
        "endLineNumber" : 1044,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Method method : clazz.getMethods()) {\n  String methodName=method.getName();\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  if (method.getReturnType().equals(Void.TYPE)) {\n    continue;\n  }\n  if (method.getParameterTypes().length != 0) {\n    continue;\n  }\n  if (method.getReturnType() == ClassLoader.class) {\n    continue;\n  }\n  if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n    continue;\n  }\n  JSONField annotation=method.getAnnotation(JSONField.class);\n  if (annotation == null) {\n    annotation=getSupperMethodAnnotation(clazz,method);\n  }\n  if (annotation != null) {\n    if (!annotation.serialize()) {\n      continue;\n    }\n    if (annotation.name().length() != 0) {\n      String propertyName=annotation.name();\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n      continue;\n    }\n  }\n  if (methodName.startsWith(\"get\")) {\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (methodName.equals(\"getClass\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else {\n      continue;\n    }\n    boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n    if (ignore) {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field == null) {\n      field=ParserConfig.getField(clazz,methodName.substring(3));\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n  if (methodName.startsWith(\"is\")) {\n    if (methodName.length() < 3) {\n      continue;\n    }\n    char c2=methodName.charAt(2);\n    String propertyName;\n    if (Character.isUpperCase(c2)) {\n      propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n    }\n else     if (c2 == '_') {\n      propertyName=methodName.substring(3);\n    }\n else     if (c2 == 'f') {\n      propertyName=methodName.substring(2);\n    }\n else {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 540,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8137,
        "startLineNumber" : 878,
        "startColumnNumber" : 111,
        "endLineNumber" : 1114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,FieldInfo> fieldInfoMap=new LinkedHashMap<String,FieldInfo>();\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (method.getReturnType().equals(Void.TYPE)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 0) {\n      continue;\n    }\n    if (method.getReturnType() == ClassLoader.class) {\n      continue;\n    }\n    if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.serialize()) {\n        continue;\n      }\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n        fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n        continue;\n      }\n    }\n    if (methodName.startsWith(\"get\")) {\n      if (methodName.length() < 4) {\n        continue;\n      }\n      if (methodName.equals(\"getClass\")) {\n        continue;\n      }\n      char c3=methodName.charAt(3);\n      String propertyName;\n      if (Character.isUpperCase(c3)) {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n else       if (c3 == '_') {\n        propertyName=methodName.substring(4);\n      }\n else       if (c3 == 'f') {\n        propertyName=methodName.substring(3);\n      }\n else {\n        continue;\n      }\n      boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n      if (ignore) {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field == null) {\n        field=ParserConfig.getField(clazz,methodName.substring(3));\n      }\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n    if (methodName.startsWith(\"is\")) {\n      if (methodName.length() < 3) {\n        continue;\n      }\n      char c2=methodName.charAt(2);\n      String propertyName;\n      if (Character.isUpperCase(c2)) {\n        propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n      }\n else       if (c2 == '_') {\n        propertyName=methodName.substring(3);\n      }\n else       if (c2 == 'f') {\n        propertyName=methodName.substring(2);\n      }\n else {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    String propertyName=field.getName();\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    if (!fieldInfoMap.containsKey(propertyName)) {\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field));\n    }\n  }\n  List<FieldInfo> fieldInfoList=new ArrayList<FieldInfo>();\n  boolean containsAll=false;\n  String[] orders=null;\n  JSONType annotation=clazz.getAnnotation(JSONType.class);\n  if (annotation != null) {\n    orders=annotation.orders();\n    if (orders != null && orders.length == fieldInfoMap.size()) {\n      containsAll=true;\n      for (      String item : orders) {\n        if (!fieldInfoMap.containsKey(item)) {\n          containsAll=false;\n          break;\n        }\n      }\n    }\n else {\n      containsAll=false;\n    }\n  }\n  if (containsAll) {\n    for (    String item : orders) {\n      FieldInfo fieldInfo=fieldInfoMap.get(item);\n      fieldInfoList.add(fieldInfo);\n    }\n  }\n else {\n    for (    FieldInfo fieldInfo : fieldInfoMap.values()) {\n      fieldInfoList.add(fieldInfo);\n    }\n    if (sorted) {\n      Collections.sort(fieldInfoList);\n    }\n  }\n  return fieldInfoList;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 798,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8244,
        "startLineNumber" : 878,
        "startColumnNumber" : 4,
        "endLineNumber" : 1114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static List<FieldInfo> computeGetters(Class<?> clazz,Map<String,String> aliasMap,boolean sorted){\n  Map<String,FieldInfo> fieldInfoMap=new LinkedHashMap<String,FieldInfo>();\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (method.getReturnType().equals(Void.TYPE)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 0) {\n      continue;\n    }\n    if (method.getReturnType() == ClassLoader.class) {\n      continue;\n    }\n    if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.serialize()) {\n        continue;\n      }\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n        fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n        continue;\n      }\n    }\n    if (methodName.startsWith(\"get\")) {\n      if (methodName.length() < 4) {\n        continue;\n      }\n      if (methodName.equals(\"getClass\")) {\n        continue;\n      }\n      char c3=methodName.charAt(3);\n      String propertyName;\n      if (Character.isUpperCase(c3)) {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n else       if (c3 == '_') {\n        propertyName=methodName.substring(4);\n      }\n else       if (c3 == 'f') {\n        propertyName=methodName.substring(3);\n      }\n else {\n        continue;\n      }\n      boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n      if (ignore) {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field == null) {\n        field=ParserConfig.getField(clazz,methodName.substring(3));\n      }\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n    if (methodName.startsWith(\"is\")) {\n      if (methodName.length() < 3) {\n        continue;\n      }\n      char c2=methodName.charAt(2);\n      String propertyName;\n      if (Character.isUpperCase(c2)) {\n        propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n      }\n else       if (c2 == '_') {\n        propertyName=methodName.substring(3);\n      }\n else       if (c2 == 'f') {\n        propertyName=methodName.substring(2);\n      }\n else {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    String propertyName=field.getName();\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    if (!fieldInfoMap.containsKey(propertyName)) {\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field));\n    }\n  }\n  List<FieldInfo> fieldInfoList=new ArrayList<FieldInfo>();\n  boolean containsAll=false;\n  String[] orders=null;\n  JSONType annotation=clazz.getAnnotation(JSONType.class);\n  if (annotation != null) {\n    orders=annotation.orders();\n    if (orders != null && orders.length == fieldInfoMap.size()) {\n      containsAll=true;\n      for (      String item : orders) {\n        if (!fieldInfoMap.containsKey(item)) {\n          containsAll=false;\n          break;\n        }\n      }\n    }\n else {\n      containsAll=false;\n    }\n  }\n  if (containsAll) {\n    for (    String item : orders) {\n      FieldInfo fieldInfo=fieldInfoMap.get(item);\n      fieldInfoList.add(fieldInfo);\n    }\n  }\n else {\n    for (    FieldInfo fieldInfo : fieldInfoMap.values()) {\n      fieldInfoList.add(fieldInfo);\n    }\n    if (sorted) {\n      Collections.sort(fieldInfoList);\n    }\n  }\n  return fieldInfoList;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 825,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 985,
        "startColumnNumber" : 20,
        "endLineNumber" : 985,
        "endColumnNumber" : 36
      },
      "nodeContext" : "aliasMap != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 987,
      "startColumnNumber" : 40,
      "endLineNumber" : 987,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 987,
        "startColumnNumber" : 24,
        "endLineNumber" : 987,
        "endColumnNumber" : 44
      },
      "nodeContext" : "propertyName == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 987,
        "startColumnNumber" : 20,
        "endLineNumber" : 989,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (propertyName == null) {\n  continue;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 191,
        "startLineNumber" : 985,
        "startColumnNumber" : 38,
        "endLineNumber" : 990,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  propertyName=aliasMap.get(propertyName);\n  if (propertyName == null) {\n    continue;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 213,
        "startLineNumber" : 985,
        "startColumnNumber" : 16,
        "endLineNumber" : 990,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (aliasMap != null) {\n  propertyName=aliasMap.get(propertyName);\n  if (propertyName == null) {\n    continue;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2273,
        "startLineNumber" : 931,
        "startColumnNumber" : 46,
        "endLineNumber" : 993,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (methodName.length() < 4) {\n    continue;\n  }\n  if (methodName.equals(\"getClass\")) {\n    continue;\n  }\n  char c3=methodName.charAt(3);\n  String propertyName;\n  if (Character.isUpperCase(c3)) {\n    propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n  }\n else   if (c3 == '_') {\n    propertyName=methodName.substring(4);\n  }\n else   if (c3 == 'f') {\n    propertyName=methodName.substring(3);\n  }\n else {\n    continue;\n  }\n  boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n  if (ignore) {\n    continue;\n  }\n  Field field=ParserConfig.getField(clazz,propertyName);\n  if (field == null) {\n    field=ParserConfig.getField(clazz,methodName.substring(3));\n  }\n  if (field != null) {\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n      }\n    }\n  }\n  if (aliasMap != null) {\n    propertyName=aliasMap.get(propertyName);\n    if (propertyName == null) {\n      continue;\n    }\n  }\n  fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 204,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2307,
        "startLineNumber" : 931,
        "startColumnNumber" : 12,
        "endLineNumber" : 993,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (methodName.startsWith(\"get\")) {\n  if (methodName.length() < 4) {\n    continue;\n  }\n  if (methodName.equals(\"getClass\")) {\n    continue;\n  }\n  char c3=methodName.charAt(3);\n  String propertyName;\n  if (Character.isUpperCase(c3)) {\n    propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n  }\n else   if (c3 == '_') {\n    propertyName=methodName.substring(4);\n  }\n else   if (c3 == 'f') {\n    propertyName=methodName.substring(3);\n  }\n else {\n    continue;\n  }\n  boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n  if (ignore) {\n    continue;\n  }\n  Field field=ParserConfig.getField(clazz,propertyName);\n  if (field == null) {\n    field=ParserConfig.getField(clazz,methodName.substring(3));\n  }\n  if (field != null) {\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n      }\n    }\n  }\n  if (aliasMap != null) {\n    propertyName=aliasMap.get(propertyName);\n    if (propertyName == null) {\n      continue;\n    }\n  }\n  fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 209,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 5811,
        "startLineNumber" : 881,
        "startColumnNumber" : 49,
        "endLineNumber" : 1044,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String methodName=method.getName();\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  if (method.getReturnType().equals(Void.TYPE)) {\n    continue;\n  }\n  if (method.getParameterTypes().length != 0) {\n    continue;\n  }\n  if (method.getReturnType() == ClassLoader.class) {\n    continue;\n  }\n  if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n    continue;\n  }\n  JSONField annotation=method.getAnnotation(JSONField.class);\n  if (annotation == null) {\n    annotation=getSupperMethodAnnotation(clazz,method);\n  }\n  if (annotation != null) {\n    if (!annotation.serialize()) {\n      continue;\n    }\n    if (annotation.name().length() != 0) {\n      String propertyName=annotation.name();\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n      continue;\n    }\n  }\n  if (methodName.startsWith(\"get\")) {\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (methodName.equals(\"getClass\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else {\n      continue;\n    }\n    boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n    if (ignore) {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field == null) {\n      field=ParserConfig.getField(clazz,methodName.substring(3));\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n  if (methodName.startsWith(\"is\")) {\n    if (methodName.length() < 3) {\n      continue;\n    }\n    char c2=methodName.charAt(2);\n    String propertyName;\n    if (Character.isUpperCase(c2)) {\n      propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n    }\n else     if (c2 == '_') {\n      propertyName=methodName.substring(3);\n    }\n else     if (c2 == 'f') {\n      propertyName=methodName.substring(2);\n    }\n else {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 532,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5852,
        "startLineNumber" : 881,
        "startColumnNumber" : 8,
        "endLineNumber" : 1044,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Method method : clazz.getMethods()) {\n  String methodName=method.getName();\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  if (method.getReturnType().equals(Void.TYPE)) {\n    continue;\n  }\n  if (method.getParameterTypes().length != 0) {\n    continue;\n  }\n  if (method.getReturnType() == ClassLoader.class) {\n    continue;\n  }\n  if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n    continue;\n  }\n  JSONField annotation=method.getAnnotation(JSONField.class);\n  if (annotation == null) {\n    annotation=getSupperMethodAnnotation(clazz,method);\n  }\n  if (annotation != null) {\n    if (!annotation.serialize()) {\n      continue;\n    }\n    if (annotation.name().length() != 0) {\n      String propertyName=annotation.name();\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n      continue;\n    }\n  }\n  if (methodName.startsWith(\"get\")) {\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (methodName.equals(\"getClass\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else {\n      continue;\n    }\n    boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n    if (ignore) {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field == null) {\n      field=ParserConfig.getField(clazz,methodName.substring(3));\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n  if (methodName.startsWith(\"is\")) {\n    if (methodName.length() < 3) {\n      continue;\n    }\n    char c2=methodName.charAt(2);\n    String propertyName;\n    if (Character.isUpperCase(c2)) {\n      propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n    }\n else     if (c2 == '_') {\n      propertyName=methodName.substring(3);\n    }\n else     if (c2 == 'f') {\n      propertyName=methodName.substring(2);\n    }\n else {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 540,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8137,
        "startLineNumber" : 878,
        "startColumnNumber" : 111,
        "endLineNumber" : 1114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,FieldInfo> fieldInfoMap=new LinkedHashMap<String,FieldInfo>();\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (method.getReturnType().equals(Void.TYPE)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 0) {\n      continue;\n    }\n    if (method.getReturnType() == ClassLoader.class) {\n      continue;\n    }\n    if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.serialize()) {\n        continue;\n      }\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n        fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n        continue;\n      }\n    }\n    if (methodName.startsWith(\"get\")) {\n      if (methodName.length() < 4) {\n        continue;\n      }\n      if (methodName.equals(\"getClass\")) {\n        continue;\n      }\n      char c3=methodName.charAt(3);\n      String propertyName;\n      if (Character.isUpperCase(c3)) {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n else       if (c3 == '_') {\n        propertyName=methodName.substring(4);\n      }\n else       if (c3 == 'f') {\n        propertyName=methodName.substring(3);\n      }\n else {\n        continue;\n      }\n      boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n      if (ignore) {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field == null) {\n        field=ParserConfig.getField(clazz,methodName.substring(3));\n      }\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n    if (methodName.startsWith(\"is\")) {\n      if (methodName.length() < 3) {\n        continue;\n      }\n      char c2=methodName.charAt(2);\n      String propertyName;\n      if (Character.isUpperCase(c2)) {\n        propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n      }\n else       if (c2 == '_') {\n        propertyName=methodName.substring(3);\n      }\n else       if (c2 == 'f') {\n        propertyName=methodName.substring(2);\n      }\n else {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    String propertyName=field.getName();\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    if (!fieldInfoMap.containsKey(propertyName)) {\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field));\n    }\n  }\n  List<FieldInfo> fieldInfoList=new ArrayList<FieldInfo>();\n  boolean containsAll=false;\n  String[] orders=null;\n  JSONType annotation=clazz.getAnnotation(JSONType.class);\n  if (annotation != null) {\n    orders=annotation.orders();\n    if (orders != null && orders.length == fieldInfoMap.size()) {\n      containsAll=true;\n      for (      String item : orders) {\n        if (!fieldInfoMap.containsKey(item)) {\n          containsAll=false;\n          break;\n        }\n      }\n    }\n else {\n      containsAll=false;\n    }\n  }\n  if (containsAll) {\n    for (    String item : orders) {\n      FieldInfo fieldInfo=fieldInfoMap.get(item);\n      fieldInfoList.add(fieldInfo);\n    }\n  }\n else {\n    for (    FieldInfo fieldInfo : fieldInfoMap.values()) {\n      fieldInfoList.add(fieldInfo);\n    }\n    if (sorted) {\n      Collections.sort(fieldInfoList);\n    }\n  }\n  return fieldInfoList;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 798,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8244,
        "startLineNumber" : 878,
        "startColumnNumber" : 4,
        "endLineNumber" : 1114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static List<FieldInfo> computeGetters(Class<?> clazz,Map<String,String> aliasMap,boolean sorted){\n  Map<String,FieldInfo> fieldInfoMap=new LinkedHashMap<String,FieldInfo>();\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (method.getReturnType().equals(Void.TYPE)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 0) {\n      continue;\n    }\n    if (method.getReturnType() == ClassLoader.class) {\n      continue;\n    }\n    if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.serialize()) {\n        continue;\n      }\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n        fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n        continue;\n      }\n    }\n    if (methodName.startsWith(\"get\")) {\n      if (methodName.length() < 4) {\n        continue;\n      }\n      if (methodName.equals(\"getClass\")) {\n        continue;\n      }\n      char c3=methodName.charAt(3);\n      String propertyName;\n      if (Character.isUpperCase(c3)) {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n else       if (c3 == '_') {\n        propertyName=methodName.substring(4);\n      }\n else       if (c3 == 'f') {\n        propertyName=methodName.substring(3);\n      }\n else {\n        continue;\n      }\n      boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n      if (ignore) {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field == null) {\n        field=ParserConfig.getField(clazz,methodName.substring(3));\n      }\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n    if (methodName.startsWith(\"is\")) {\n      if (methodName.length() < 3) {\n        continue;\n      }\n      char c2=methodName.charAt(2);\n      String propertyName;\n      if (Character.isUpperCase(c2)) {\n        propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n      }\n else       if (c2 == '_') {\n        propertyName=methodName.substring(3);\n      }\n else       if (c2 == 'f') {\n        propertyName=methodName.substring(2);\n      }\n else {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    String propertyName=field.getName();\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    if (!fieldInfoMap.containsKey(propertyName)) {\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field));\n    }\n  }\n  List<FieldInfo> fieldInfoList=new ArrayList<FieldInfo>();\n  boolean containsAll=false;\n  String[] orders=null;\n  JSONType annotation=clazz.getAnnotation(JSONType.class);\n  if (annotation != null) {\n    orders=annotation.orders();\n    if (orders != null && orders.length == fieldInfoMap.size()) {\n      containsAll=true;\n      for (      String item : orders) {\n        if (!fieldInfoMap.containsKey(item)) {\n          containsAll=false;\n          break;\n        }\n      }\n    }\n else {\n      containsAll=false;\n    }\n  }\n  if (containsAll) {\n    for (    String item : orders) {\n      FieldInfo fieldInfo=fieldInfoMap.get(item);\n      fieldInfoList.add(fieldInfo);\n    }\n  }\n else {\n    for (    FieldInfo fieldInfo : fieldInfoMap.values()) {\n      fieldInfoList.add(fieldInfo);\n    }\n    if (sorted) {\n      Collections.sort(fieldInfoList);\n    }\n  }\n  return fieldInfoList;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 825,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 987,
        "startColumnNumber" : 24,
        "endLineNumber" : 987,
        "endColumnNumber" : 44
      },
      "nodeContext" : "propertyName == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 1014,
      "startColumnNumber" : 29,
      "endLineNumber" : 1014,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 1014,
        "startColumnNumber" : 20,
        "endLineNumber" : 1014,
        "endColumnNumber" : 33
      },
      "nodeContext" : "field != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 801,
        "startLineNumber" : 1014,
        "startColumnNumber" : 16,
        "endLineNumber" : 1033,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (field != null) {\n  JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n  if (fieldAnnotation != null) {\n    if (!fieldAnnotation.serialize()) {\n      continue;\n    }\n    if (fieldAnnotation.name().length() != 0) {\n      propertyName=fieldAnnotation.name();\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 61,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1882,
        "startLineNumber" : 995,
        "startColumnNumber" : 45,
        "endLineNumber" : 1043,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (methodName.length() < 3) {\n    continue;\n  }\n  char c2=methodName.charAt(2);\n  String propertyName;\n  if (Character.isUpperCase(c2)) {\n    propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n  }\n else   if (c2 == '_') {\n    propertyName=methodName.substring(3);\n  }\n else   if (c2 == 'f') {\n    propertyName=methodName.substring(2);\n  }\n else {\n    continue;\n  }\n  Field field=ParserConfig.getField(clazz,propertyName);\n  if (field != null) {\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n      }\n    }\n  }\n  if (aliasMap != null) {\n    propertyName=aliasMap.get(propertyName);\n    if (propertyName == null) {\n      continue;\n    }\n  }\n  fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 169,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1915,
        "startLineNumber" : 995,
        "startColumnNumber" : 12,
        "endLineNumber" : 1043,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (methodName.startsWith(\"is\")) {\n  if (methodName.length() < 3) {\n    continue;\n  }\n  char c2=methodName.charAt(2);\n  String propertyName;\n  if (Character.isUpperCase(c2)) {\n    propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n  }\n else   if (c2 == '_') {\n    propertyName=methodName.substring(3);\n  }\n else   if (c2 == 'f') {\n    propertyName=methodName.substring(2);\n  }\n else {\n    continue;\n  }\n  Field field=ParserConfig.getField(clazz,propertyName);\n  if (field != null) {\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n      }\n    }\n  }\n  if (aliasMap != null) {\n    propertyName=aliasMap.get(propertyName);\n    if (propertyName == null) {\n      continue;\n    }\n  }\n  fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 174,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 5811,
        "startLineNumber" : 881,
        "startColumnNumber" : 49,
        "endLineNumber" : 1044,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String methodName=method.getName();\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  if (method.getReturnType().equals(Void.TYPE)) {\n    continue;\n  }\n  if (method.getParameterTypes().length != 0) {\n    continue;\n  }\n  if (method.getReturnType() == ClassLoader.class) {\n    continue;\n  }\n  if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n    continue;\n  }\n  JSONField annotation=method.getAnnotation(JSONField.class);\n  if (annotation == null) {\n    annotation=getSupperMethodAnnotation(clazz,method);\n  }\n  if (annotation != null) {\n    if (!annotation.serialize()) {\n      continue;\n    }\n    if (annotation.name().length() != 0) {\n      String propertyName=annotation.name();\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n      continue;\n    }\n  }\n  if (methodName.startsWith(\"get\")) {\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (methodName.equals(\"getClass\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else {\n      continue;\n    }\n    boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n    if (ignore) {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field == null) {\n      field=ParserConfig.getField(clazz,methodName.substring(3));\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n  if (methodName.startsWith(\"is\")) {\n    if (methodName.length() < 3) {\n      continue;\n    }\n    char c2=methodName.charAt(2);\n    String propertyName;\n    if (Character.isUpperCase(c2)) {\n      propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n    }\n else     if (c2 == '_') {\n      propertyName=methodName.substring(3);\n    }\n else     if (c2 == 'f') {\n      propertyName=methodName.substring(2);\n    }\n else {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 532,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5852,
        "startLineNumber" : 881,
        "startColumnNumber" : 8,
        "endLineNumber" : 1044,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Method method : clazz.getMethods()) {\n  String methodName=method.getName();\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  if (method.getReturnType().equals(Void.TYPE)) {\n    continue;\n  }\n  if (method.getParameterTypes().length != 0) {\n    continue;\n  }\n  if (method.getReturnType() == ClassLoader.class) {\n    continue;\n  }\n  if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n    continue;\n  }\n  JSONField annotation=method.getAnnotation(JSONField.class);\n  if (annotation == null) {\n    annotation=getSupperMethodAnnotation(clazz,method);\n  }\n  if (annotation != null) {\n    if (!annotation.serialize()) {\n      continue;\n    }\n    if (annotation.name().length() != 0) {\n      String propertyName=annotation.name();\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n      continue;\n    }\n  }\n  if (methodName.startsWith(\"get\")) {\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (methodName.equals(\"getClass\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else {\n      continue;\n    }\n    boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n    if (ignore) {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field == null) {\n      field=ParserConfig.getField(clazz,methodName.substring(3));\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n  if (methodName.startsWith(\"is\")) {\n    if (methodName.length() < 3) {\n      continue;\n    }\n    char c2=methodName.charAt(2);\n    String propertyName;\n    if (Character.isUpperCase(c2)) {\n      propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n    }\n else     if (c2 == '_') {\n      propertyName=methodName.substring(3);\n    }\n else     if (c2 == 'f') {\n      propertyName=methodName.substring(2);\n    }\n else {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 540,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8137,
        "startLineNumber" : 878,
        "startColumnNumber" : 111,
        "endLineNumber" : 1114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,FieldInfo> fieldInfoMap=new LinkedHashMap<String,FieldInfo>();\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (method.getReturnType().equals(Void.TYPE)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 0) {\n      continue;\n    }\n    if (method.getReturnType() == ClassLoader.class) {\n      continue;\n    }\n    if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.serialize()) {\n        continue;\n      }\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n        fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n        continue;\n      }\n    }\n    if (methodName.startsWith(\"get\")) {\n      if (methodName.length() < 4) {\n        continue;\n      }\n      if (methodName.equals(\"getClass\")) {\n        continue;\n      }\n      char c3=methodName.charAt(3);\n      String propertyName;\n      if (Character.isUpperCase(c3)) {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n else       if (c3 == '_') {\n        propertyName=methodName.substring(4);\n      }\n else       if (c3 == 'f') {\n        propertyName=methodName.substring(3);\n      }\n else {\n        continue;\n      }\n      boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n      if (ignore) {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field == null) {\n        field=ParserConfig.getField(clazz,methodName.substring(3));\n      }\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n    if (methodName.startsWith(\"is\")) {\n      if (methodName.length() < 3) {\n        continue;\n      }\n      char c2=methodName.charAt(2);\n      String propertyName;\n      if (Character.isUpperCase(c2)) {\n        propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n      }\n else       if (c2 == '_') {\n        propertyName=methodName.substring(3);\n      }\n else       if (c2 == 'f') {\n        propertyName=methodName.substring(2);\n      }\n else {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    String propertyName=field.getName();\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    if (!fieldInfoMap.containsKey(propertyName)) {\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field));\n    }\n  }\n  List<FieldInfo> fieldInfoList=new ArrayList<FieldInfo>();\n  boolean containsAll=false;\n  String[] orders=null;\n  JSONType annotation=clazz.getAnnotation(JSONType.class);\n  if (annotation != null) {\n    orders=annotation.orders();\n    if (orders != null && orders.length == fieldInfoMap.size()) {\n      containsAll=true;\n      for (      String item : orders) {\n        if (!fieldInfoMap.containsKey(item)) {\n          containsAll=false;\n          break;\n        }\n      }\n    }\n else {\n      containsAll=false;\n    }\n  }\n  if (containsAll) {\n    for (    String item : orders) {\n      FieldInfo fieldInfo=fieldInfoMap.get(item);\n      fieldInfoList.add(fieldInfo);\n    }\n  }\n else {\n    for (    FieldInfo fieldInfo : fieldInfoMap.values()) {\n      fieldInfoList.add(fieldInfo);\n    }\n    if (sorted) {\n      Collections.sort(fieldInfoList);\n    }\n  }\n  return fieldInfoList;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 798,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8244,
        "startLineNumber" : 878,
        "startColumnNumber" : 4,
        "endLineNumber" : 1114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static List<FieldInfo> computeGetters(Class<?> clazz,Map<String,String> aliasMap,boolean sorted){\n  Map<String,FieldInfo> fieldInfoMap=new LinkedHashMap<String,FieldInfo>();\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (method.getReturnType().equals(Void.TYPE)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 0) {\n      continue;\n    }\n    if (method.getReturnType() == ClassLoader.class) {\n      continue;\n    }\n    if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.serialize()) {\n        continue;\n      }\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n        fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n        continue;\n      }\n    }\n    if (methodName.startsWith(\"get\")) {\n      if (methodName.length() < 4) {\n        continue;\n      }\n      if (methodName.equals(\"getClass\")) {\n        continue;\n      }\n      char c3=methodName.charAt(3);\n      String propertyName;\n      if (Character.isUpperCase(c3)) {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n else       if (c3 == '_') {\n        propertyName=methodName.substring(4);\n      }\n else       if (c3 == 'f') {\n        propertyName=methodName.substring(3);\n      }\n else {\n        continue;\n      }\n      boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n      if (ignore) {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field == null) {\n        field=ParserConfig.getField(clazz,methodName.substring(3));\n      }\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n    if (methodName.startsWith(\"is\")) {\n      if (methodName.length() < 3) {\n        continue;\n      }\n      char c2=methodName.charAt(2);\n      String propertyName;\n      if (Character.isUpperCase(c2)) {\n        propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n      }\n else       if (c2 == '_') {\n        propertyName=methodName.substring(3);\n      }\n else       if (c2 == 'f') {\n        propertyName=methodName.substring(2);\n      }\n else {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    String propertyName=field.getName();\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    if (!fieldInfoMap.containsKey(propertyName)) {\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field));\n    }\n  }\n  List<FieldInfo> fieldInfoList=new ArrayList<FieldInfo>();\n  boolean containsAll=false;\n  String[] orders=null;\n  JSONType annotation=clazz.getAnnotation(JSONType.class);\n  if (annotation != null) {\n    orders=annotation.orders();\n    if (orders != null && orders.length == fieldInfoMap.size()) {\n      containsAll=true;\n      for (      String item : orders) {\n        if (!fieldInfoMap.containsKey(item)) {\n          containsAll=false;\n          break;\n        }\n      }\n    }\n else {\n      containsAll=false;\n    }\n  }\n  if (containsAll) {\n    for (    String item : orders) {\n      FieldInfo fieldInfo=fieldInfoMap.get(item);\n      fieldInfoList.add(fieldInfo);\n    }\n  }\n else {\n    for (    FieldInfo fieldInfo : fieldInfoMap.values()) {\n      fieldInfoList.add(fieldInfo);\n    }\n    if (sorted) {\n      Collections.sort(fieldInfoList);\n    }\n  }\n  return fieldInfoList;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 825,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 1014,
        "startColumnNumber" : 20,
        "endLineNumber" : 1014,
        "endColumnNumber" : 33
      },
      "nodeContext" : "field != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 1017,
      "startColumnNumber" : 43,
      "endLineNumber" : 1017,
      "endColumnNumber" : 47
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 1017,
        "startColumnNumber" : 24,
        "endLineNumber" : 1017,
        "endColumnNumber" : 47
      },
      "nodeContext" : "fieldAnnotation != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 651,
        "startLineNumber" : 1017,
        "startColumnNumber" : 20,
        "endLineNumber" : 1032,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (fieldAnnotation != null) {\n  if (!fieldAnnotation.serialize()) {\n    continue;\n  }\n  if (fieldAnnotation.name().length() != 0) {\n    propertyName=fieldAnnotation.name();\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 45,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 782,
        "startLineNumber" : 1014,
        "startColumnNumber" : 35,
        "endLineNumber" : 1033,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n  if (fieldAnnotation != null) {\n    if (!fieldAnnotation.serialize()) {\n      continue;\n    }\n    if (fieldAnnotation.name().length() != 0) {\n      propertyName=fieldAnnotation.name();\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 57,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 801,
        "startLineNumber" : 1014,
        "startColumnNumber" : 16,
        "endLineNumber" : 1033,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (field != null) {\n  JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n  if (fieldAnnotation != null) {\n    if (!fieldAnnotation.serialize()) {\n      continue;\n    }\n    if (fieldAnnotation.name().length() != 0) {\n      propertyName=fieldAnnotation.name();\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 61,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1882,
        "startLineNumber" : 995,
        "startColumnNumber" : 45,
        "endLineNumber" : 1043,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (methodName.length() < 3) {\n    continue;\n  }\n  char c2=methodName.charAt(2);\n  String propertyName;\n  if (Character.isUpperCase(c2)) {\n    propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n  }\n else   if (c2 == '_') {\n    propertyName=methodName.substring(3);\n  }\n else   if (c2 == 'f') {\n    propertyName=methodName.substring(2);\n  }\n else {\n    continue;\n  }\n  Field field=ParserConfig.getField(clazz,propertyName);\n  if (field != null) {\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n      }\n    }\n  }\n  if (aliasMap != null) {\n    propertyName=aliasMap.get(propertyName);\n    if (propertyName == null) {\n      continue;\n    }\n  }\n  fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 169,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1915,
        "startLineNumber" : 995,
        "startColumnNumber" : 12,
        "endLineNumber" : 1043,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (methodName.startsWith(\"is\")) {\n  if (methodName.length() < 3) {\n    continue;\n  }\n  char c2=methodName.charAt(2);\n  String propertyName;\n  if (Character.isUpperCase(c2)) {\n    propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n  }\n else   if (c2 == '_') {\n    propertyName=methodName.substring(3);\n  }\n else   if (c2 == 'f') {\n    propertyName=methodName.substring(2);\n  }\n else {\n    continue;\n  }\n  Field field=ParserConfig.getField(clazz,propertyName);\n  if (field != null) {\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n      }\n    }\n  }\n  if (aliasMap != null) {\n    propertyName=aliasMap.get(propertyName);\n    if (propertyName == null) {\n      continue;\n    }\n  }\n  fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 174,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 5811,
        "startLineNumber" : 881,
        "startColumnNumber" : 49,
        "endLineNumber" : 1044,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String methodName=method.getName();\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  if (method.getReturnType().equals(Void.TYPE)) {\n    continue;\n  }\n  if (method.getParameterTypes().length != 0) {\n    continue;\n  }\n  if (method.getReturnType() == ClassLoader.class) {\n    continue;\n  }\n  if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n    continue;\n  }\n  JSONField annotation=method.getAnnotation(JSONField.class);\n  if (annotation == null) {\n    annotation=getSupperMethodAnnotation(clazz,method);\n  }\n  if (annotation != null) {\n    if (!annotation.serialize()) {\n      continue;\n    }\n    if (annotation.name().length() != 0) {\n      String propertyName=annotation.name();\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n      continue;\n    }\n  }\n  if (methodName.startsWith(\"get\")) {\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (methodName.equals(\"getClass\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else {\n      continue;\n    }\n    boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n    if (ignore) {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field == null) {\n      field=ParserConfig.getField(clazz,methodName.substring(3));\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n  if (methodName.startsWith(\"is\")) {\n    if (methodName.length() < 3) {\n      continue;\n    }\n    char c2=methodName.charAt(2);\n    String propertyName;\n    if (Character.isUpperCase(c2)) {\n      propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n    }\n else     if (c2 == '_') {\n      propertyName=methodName.substring(3);\n    }\n else     if (c2 == 'f') {\n      propertyName=methodName.substring(2);\n    }\n else {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 532,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5852,
        "startLineNumber" : 881,
        "startColumnNumber" : 8,
        "endLineNumber" : 1044,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Method method : clazz.getMethods()) {\n  String methodName=method.getName();\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  if (method.getReturnType().equals(Void.TYPE)) {\n    continue;\n  }\n  if (method.getParameterTypes().length != 0) {\n    continue;\n  }\n  if (method.getReturnType() == ClassLoader.class) {\n    continue;\n  }\n  if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n    continue;\n  }\n  JSONField annotation=method.getAnnotation(JSONField.class);\n  if (annotation == null) {\n    annotation=getSupperMethodAnnotation(clazz,method);\n  }\n  if (annotation != null) {\n    if (!annotation.serialize()) {\n      continue;\n    }\n    if (annotation.name().length() != 0) {\n      String propertyName=annotation.name();\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n      continue;\n    }\n  }\n  if (methodName.startsWith(\"get\")) {\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (methodName.equals(\"getClass\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else {\n      continue;\n    }\n    boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n    if (ignore) {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field == null) {\n      field=ParserConfig.getField(clazz,methodName.substring(3));\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n  if (methodName.startsWith(\"is\")) {\n    if (methodName.length() < 3) {\n      continue;\n    }\n    char c2=methodName.charAt(2);\n    String propertyName;\n    if (Character.isUpperCase(c2)) {\n      propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n    }\n else     if (c2 == '_') {\n      propertyName=methodName.substring(3);\n    }\n else     if (c2 == 'f') {\n      propertyName=methodName.substring(2);\n    }\n else {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 540,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8137,
        "startLineNumber" : 878,
        "startColumnNumber" : 111,
        "endLineNumber" : 1114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,FieldInfo> fieldInfoMap=new LinkedHashMap<String,FieldInfo>();\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (method.getReturnType().equals(Void.TYPE)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 0) {\n      continue;\n    }\n    if (method.getReturnType() == ClassLoader.class) {\n      continue;\n    }\n    if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.serialize()) {\n        continue;\n      }\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n        fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n        continue;\n      }\n    }\n    if (methodName.startsWith(\"get\")) {\n      if (methodName.length() < 4) {\n        continue;\n      }\n      if (methodName.equals(\"getClass\")) {\n        continue;\n      }\n      char c3=methodName.charAt(3);\n      String propertyName;\n      if (Character.isUpperCase(c3)) {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n else       if (c3 == '_') {\n        propertyName=methodName.substring(4);\n      }\n else       if (c3 == 'f') {\n        propertyName=methodName.substring(3);\n      }\n else {\n        continue;\n      }\n      boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n      if (ignore) {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field == null) {\n        field=ParserConfig.getField(clazz,methodName.substring(3));\n      }\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n    if (methodName.startsWith(\"is\")) {\n      if (methodName.length() < 3) {\n        continue;\n      }\n      char c2=methodName.charAt(2);\n      String propertyName;\n      if (Character.isUpperCase(c2)) {\n        propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n      }\n else       if (c2 == '_') {\n        propertyName=methodName.substring(3);\n      }\n else       if (c2 == 'f') {\n        propertyName=methodName.substring(2);\n      }\n else {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    String propertyName=field.getName();\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    if (!fieldInfoMap.containsKey(propertyName)) {\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field));\n    }\n  }\n  List<FieldInfo> fieldInfoList=new ArrayList<FieldInfo>();\n  boolean containsAll=false;\n  String[] orders=null;\n  JSONType annotation=clazz.getAnnotation(JSONType.class);\n  if (annotation != null) {\n    orders=annotation.orders();\n    if (orders != null && orders.length == fieldInfoMap.size()) {\n      containsAll=true;\n      for (      String item : orders) {\n        if (!fieldInfoMap.containsKey(item)) {\n          containsAll=false;\n          break;\n        }\n      }\n    }\n else {\n      containsAll=false;\n    }\n  }\n  if (containsAll) {\n    for (    String item : orders) {\n      FieldInfo fieldInfo=fieldInfoMap.get(item);\n      fieldInfoList.add(fieldInfo);\n    }\n  }\n else {\n    for (    FieldInfo fieldInfo : fieldInfoMap.values()) {\n      fieldInfoList.add(fieldInfo);\n    }\n    if (sorted) {\n      Collections.sort(fieldInfoList);\n    }\n  }\n  return fieldInfoList;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 798,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8244,
        "startLineNumber" : 878,
        "startColumnNumber" : 4,
        "endLineNumber" : 1114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static List<FieldInfo> computeGetters(Class<?> clazz,Map<String,String> aliasMap,boolean sorted){\n  Map<String,FieldInfo> fieldInfoMap=new LinkedHashMap<String,FieldInfo>();\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (method.getReturnType().equals(Void.TYPE)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 0) {\n      continue;\n    }\n    if (method.getReturnType() == ClassLoader.class) {\n      continue;\n    }\n    if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.serialize()) {\n        continue;\n      }\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n        fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n        continue;\n      }\n    }\n    if (methodName.startsWith(\"get\")) {\n      if (methodName.length() < 4) {\n        continue;\n      }\n      if (methodName.equals(\"getClass\")) {\n        continue;\n      }\n      char c3=methodName.charAt(3);\n      String propertyName;\n      if (Character.isUpperCase(c3)) {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n else       if (c3 == '_') {\n        propertyName=methodName.substring(4);\n      }\n else       if (c3 == 'f') {\n        propertyName=methodName.substring(3);\n      }\n else {\n        continue;\n      }\n      boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n      if (ignore) {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field == null) {\n        field=ParserConfig.getField(clazz,methodName.substring(3));\n      }\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n    if (methodName.startsWith(\"is\")) {\n      if (methodName.length() < 3) {\n        continue;\n      }\n      char c2=methodName.charAt(2);\n      String propertyName;\n      if (Character.isUpperCase(c2)) {\n        propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n      }\n else       if (c2 == '_') {\n        propertyName=methodName.substring(3);\n      }\n else       if (c2 == 'f') {\n        propertyName=methodName.substring(2);\n      }\n else {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    String propertyName=field.getName();\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    if (!fieldInfoMap.containsKey(propertyName)) {\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field));\n    }\n  }\n  List<FieldInfo> fieldInfoList=new ArrayList<FieldInfo>();\n  boolean containsAll=false;\n  String[] orders=null;\n  JSONType annotation=clazz.getAnnotation(JSONType.class);\n  if (annotation != null) {\n    orders=annotation.orders();\n    if (orders != null && orders.length == fieldInfoMap.size()) {\n      containsAll=true;\n      for (      String item : orders) {\n        if (!fieldInfoMap.containsKey(item)) {\n          containsAll=false;\n          break;\n        }\n      }\n    }\n else {\n      containsAll=false;\n    }\n  }\n  if (containsAll) {\n    for (    String item : orders) {\n      FieldInfo fieldInfo=fieldInfoMap.get(item);\n      fieldInfoList.add(fieldInfo);\n    }\n  }\n else {\n    for (    FieldInfo fieldInfo : fieldInfoMap.values()) {\n      fieldInfoList.add(fieldInfo);\n    }\n    if (sorted) {\n      Collections.sort(fieldInfoList);\n    }\n  }\n  return fieldInfoList;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 825,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 1017,
        "startColumnNumber" : 24,
        "endLineNumber" : 1017,
        "endColumnNumber" : 47
      },
      "nodeContext" : "fieldAnnotation != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 1025,
      "startColumnNumber" : 44,
      "endLineNumber" : 1025,
      "endColumnNumber" : 48
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 1025,
        "startColumnNumber" : 32,
        "endLineNumber" : 1025,
        "endColumnNumber" : 48
      },
      "nodeContext" : "aliasMap != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 273,
        "startLineNumber" : 1025,
        "startColumnNumber" : 28,
        "endLineNumber" : 1030,
        "endColumnNumber" : 29
      },
      "nodeContext" : "if (aliasMap != null) {\n  propertyName=aliasMap.get(propertyName);\n  if (propertyName == null) {\n    continue;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 401,
        "startLineNumber" : 1022,
        "startColumnNumber" : 66,
        "endLineNumber" : 1031,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  propertyName=fieldAnnotation.name();\n  if (aliasMap != null) {\n    propertyName=aliasMap.get(propertyName);\n    if (propertyName == null) {\n      continue;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 25,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 443,
        "startLineNumber" : 1022,
        "startColumnNumber" : 24,
        "endLineNumber" : 1031,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (fieldAnnotation.name().length() != 0) {\n  propertyName=fieldAnnotation.name();\n  if (aliasMap != null) {\n    propertyName=aliasMap.get(propertyName);\n    if (propertyName == null) {\n      continue;\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 33,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 622,
        "startLineNumber" : 1017,
        "startColumnNumber" : 49,
        "endLineNumber" : 1032,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  if (!fieldAnnotation.serialize()) {\n    continue;\n  }\n  if (fieldAnnotation.name().length() != 0) {\n    propertyName=fieldAnnotation.name();\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 41,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 651,
        "startLineNumber" : 1017,
        "startColumnNumber" : 20,
        "endLineNumber" : 1032,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (fieldAnnotation != null) {\n  if (!fieldAnnotation.serialize()) {\n    continue;\n  }\n  if (fieldAnnotation.name().length() != 0) {\n    propertyName=fieldAnnotation.name();\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 45,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 782,
        "startLineNumber" : 1014,
        "startColumnNumber" : 35,
        "endLineNumber" : 1033,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n  if (fieldAnnotation != null) {\n    if (!fieldAnnotation.serialize()) {\n      continue;\n    }\n    if (fieldAnnotation.name().length() != 0) {\n      propertyName=fieldAnnotation.name();\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 57,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 801,
        "startLineNumber" : 1014,
        "startColumnNumber" : 16,
        "endLineNumber" : 1033,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (field != null) {\n  JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n  if (fieldAnnotation != null) {\n    if (!fieldAnnotation.serialize()) {\n      continue;\n    }\n    if (fieldAnnotation.name().length() != 0) {\n      propertyName=fieldAnnotation.name();\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 61,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1882,
        "startLineNumber" : 995,
        "startColumnNumber" : 45,
        "endLineNumber" : 1043,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (methodName.length() < 3) {\n    continue;\n  }\n  char c2=methodName.charAt(2);\n  String propertyName;\n  if (Character.isUpperCase(c2)) {\n    propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n  }\n else   if (c2 == '_') {\n    propertyName=methodName.substring(3);\n  }\n else   if (c2 == 'f') {\n    propertyName=methodName.substring(2);\n  }\n else {\n    continue;\n  }\n  Field field=ParserConfig.getField(clazz,propertyName);\n  if (field != null) {\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n      }\n    }\n  }\n  if (aliasMap != null) {\n    propertyName=aliasMap.get(propertyName);\n    if (propertyName == null) {\n      continue;\n    }\n  }\n  fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 169,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1915,
        "startLineNumber" : 995,
        "startColumnNumber" : 12,
        "endLineNumber" : 1043,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (methodName.startsWith(\"is\")) {\n  if (methodName.length() < 3) {\n    continue;\n  }\n  char c2=methodName.charAt(2);\n  String propertyName;\n  if (Character.isUpperCase(c2)) {\n    propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n  }\n else   if (c2 == '_') {\n    propertyName=methodName.substring(3);\n  }\n else   if (c2 == 'f') {\n    propertyName=methodName.substring(2);\n  }\n else {\n    continue;\n  }\n  Field field=ParserConfig.getField(clazz,propertyName);\n  if (field != null) {\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n      }\n    }\n  }\n  if (aliasMap != null) {\n    propertyName=aliasMap.get(propertyName);\n    if (propertyName == null) {\n      continue;\n    }\n  }\n  fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 174,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 5811,
        "startLineNumber" : 881,
        "startColumnNumber" : 49,
        "endLineNumber" : 1044,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String methodName=method.getName();\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  if (method.getReturnType().equals(Void.TYPE)) {\n    continue;\n  }\n  if (method.getParameterTypes().length != 0) {\n    continue;\n  }\n  if (method.getReturnType() == ClassLoader.class) {\n    continue;\n  }\n  if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n    continue;\n  }\n  JSONField annotation=method.getAnnotation(JSONField.class);\n  if (annotation == null) {\n    annotation=getSupperMethodAnnotation(clazz,method);\n  }\n  if (annotation != null) {\n    if (!annotation.serialize()) {\n      continue;\n    }\n    if (annotation.name().length() != 0) {\n      String propertyName=annotation.name();\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n      continue;\n    }\n  }\n  if (methodName.startsWith(\"get\")) {\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (methodName.equals(\"getClass\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else {\n      continue;\n    }\n    boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n    if (ignore) {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field == null) {\n      field=ParserConfig.getField(clazz,methodName.substring(3));\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n  if (methodName.startsWith(\"is\")) {\n    if (methodName.length() < 3) {\n      continue;\n    }\n    char c2=methodName.charAt(2);\n    String propertyName;\n    if (Character.isUpperCase(c2)) {\n      propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n    }\n else     if (c2 == '_') {\n      propertyName=methodName.substring(3);\n    }\n else     if (c2 == 'f') {\n      propertyName=methodName.substring(2);\n    }\n else {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 532,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5852,
        "startLineNumber" : 881,
        "startColumnNumber" : 8,
        "endLineNumber" : 1044,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Method method : clazz.getMethods()) {\n  String methodName=method.getName();\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  if (method.getReturnType().equals(Void.TYPE)) {\n    continue;\n  }\n  if (method.getParameterTypes().length != 0) {\n    continue;\n  }\n  if (method.getReturnType() == ClassLoader.class) {\n    continue;\n  }\n  if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n    continue;\n  }\n  JSONField annotation=method.getAnnotation(JSONField.class);\n  if (annotation == null) {\n    annotation=getSupperMethodAnnotation(clazz,method);\n  }\n  if (annotation != null) {\n    if (!annotation.serialize()) {\n      continue;\n    }\n    if (annotation.name().length() != 0) {\n      String propertyName=annotation.name();\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n      continue;\n    }\n  }\n  if (methodName.startsWith(\"get\")) {\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (methodName.equals(\"getClass\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else {\n      continue;\n    }\n    boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n    if (ignore) {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field == null) {\n      field=ParserConfig.getField(clazz,methodName.substring(3));\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n  if (methodName.startsWith(\"is\")) {\n    if (methodName.length() < 3) {\n      continue;\n    }\n    char c2=methodName.charAt(2);\n    String propertyName;\n    if (Character.isUpperCase(c2)) {\n      propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n    }\n else     if (c2 == '_') {\n      propertyName=methodName.substring(3);\n    }\n else     if (c2 == 'f') {\n      propertyName=methodName.substring(2);\n    }\n else {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 540,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8137,
        "startLineNumber" : 878,
        "startColumnNumber" : 111,
        "endLineNumber" : 1114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,FieldInfo> fieldInfoMap=new LinkedHashMap<String,FieldInfo>();\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (method.getReturnType().equals(Void.TYPE)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 0) {\n      continue;\n    }\n    if (method.getReturnType() == ClassLoader.class) {\n      continue;\n    }\n    if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.serialize()) {\n        continue;\n      }\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n        fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n        continue;\n      }\n    }\n    if (methodName.startsWith(\"get\")) {\n      if (methodName.length() < 4) {\n        continue;\n      }\n      if (methodName.equals(\"getClass\")) {\n        continue;\n      }\n      char c3=methodName.charAt(3);\n      String propertyName;\n      if (Character.isUpperCase(c3)) {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n else       if (c3 == '_') {\n        propertyName=methodName.substring(4);\n      }\n else       if (c3 == 'f') {\n        propertyName=methodName.substring(3);\n      }\n else {\n        continue;\n      }\n      boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n      if (ignore) {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field == null) {\n        field=ParserConfig.getField(clazz,methodName.substring(3));\n      }\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n    if (methodName.startsWith(\"is\")) {\n      if (methodName.length() < 3) {\n        continue;\n      }\n      char c2=methodName.charAt(2);\n      String propertyName;\n      if (Character.isUpperCase(c2)) {\n        propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n      }\n else       if (c2 == '_') {\n        propertyName=methodName.substring(3);\n      }\n else       if (c2 == 'f') {\n        propertyName=methodName.substring(2);\n      }\n else {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    String propertyName=field.getName();\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    if (!fieldInfoMap.containsKey(propertyName)) {\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field));\n    }\n  }\n  List<FieldInfo> fieldInfoList=new ArrayList<FieldInfo>();\n  boolean containsAll=false;\n  String[] orders=null;\n  JSONType annotation=clazz.getAnnotation(JSONType.class);\n  if (annotation != null) {\n    orders=annotation.orders();\n    if (orders != null && orders.length == fieldInfoMap.size()) {\n      containsAll=true;\n      for (      String item : orders) {\n        if (!fieldInfoMap.containsKey(item)) {\n          containsAll=false;\n          break;\n        }\n      }\n    }\n else {\n      containsAll=false;\n    }\n  }\n  if (containsAll) {\n    for (    String item : orders) {\n      FieldInfo fieldInfo=fieldInfoMap.get(item);\n      fieldInfoList.add(fieldInfo);\n    }\n  }\n else {\n    for (    FieldInfo fieldInfo : fieldInfoMap.values()) {\n      fieldInfoList.add(fieldInfo);\n    }\n    if (sorted) {\n      Collections.sort(fieldInfoList);\n    }\n  }\n  return fieldInfoList;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 798,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8244,
        "startLineNumber" : 878,
        "startColumnNumber" : 4,
        "endLineNumber" : 1114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static List<FieldInfo> computeGetters(Class<?> clazz,Map<String,String> aliasMap,boolean sorted){\n  Map<String,FieldInfo> fieldInfoMap=new LinkedHashMap<String,FieldInfo>();\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (method.getReturnType().equals(Void.TYPE)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 0) {\n      continue;\n    }\n    if (method.getReturnType() == ClassLoader.class) {\n      continue;\n    }\n    if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.serialize()) {\n        continue;\n      }\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n        fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n        continue;\n      }\n    }\n    if (methodName.startsWith(\"get\")) {\n      if (methodName.length() < 4) {\n        continue;\n      }\n      if (methodName.equals(\"getClass\")) {\n        continue;\n      }\n      char c3=methodName.charAt(3);\n      String propertyName;\n      if (Character.isUpperCase(c3)) {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n else       if (c3 == '_') {\n        propertyName=methodName.substring(4);\n      }\n else       if (c3 == 'f') {\n        propertyName=methodName.substring(3);\n      }\n else {\n        continue;\n      }\n      boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n      if (ignore) {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field == null) {\n        field=ParserConfig.getField(clazz,methodName.substring(3));\n      }\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n    if (methodName.startsWith(\"is\")) {\n      if (methodName.length() < 3) {\n        continue;\n      }\n      char c2=methodName.charAt(2);\n      String propertyName;\n      if (Character.isUpperCase(c2)) {\n        propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n      }\n else       if (c2 == '_') {\n        propertyName=methodName.substring(3);\n      }\n else       if (c2 == 'f') {\n        propertyName=methodName.substring(2);\n      }\n else {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    String propertyName=field.getName();\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    if (!fieldInfoMap.containsKey(propertyName)) {\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field));\n    }\n  }\n  List<FieldInfo> fieldInfoList=new ArrayList<FieldInfo>();\n  boolean containsAll=false;\n  String[] orders=null;\n  JSONType annotation=clazz.getAnnotation(JSONType.class);\n  if (annotation != null) {\n    orders=annotation.orders();\n    if (orders != null && orders.length == fieldInfoMap.size()) {\n      containsAll=true;\n      for (      String item : orders) {\n        if (!fieldInfoMap.containsKey(item)) {\n          containsAll=false;\n          break;\n        }\n      }\n    }\n else {\n      containsAll=false;\n    }\n  }\n  if (containsAll) {\n    for (    String item : orders) {\n      FieldInfo fieldInfo=fieldInfoMap.get(item);\n      fieldInfoList.add(fieldInfo);\n    }\n  }\n else {\n    for (    FieldInfo fieldInfo : fieldInfoMap.values()) {\n      fieldInfoList.add(fieldInfo);\n    }\n    if (sorted) {\n      Collections.sort(fieldInfoList);\n    }\n  }\n  return fieldInfoList;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 825,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 1025,
        "startColumnNumber" : 32,
        "endLineNumber" : 1025,
        "endColumnNumber" : 48
      },
      "nodeContext" : "aliasMap != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 1027,
      "startColumnNumber" : 52,
      "endLineNumber" : 1027,
      "endColumnNumber" : 56
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 1027,
        "startColumnNumber" : 36,
        "endLineNumber" : 1027,
        "endColumnNumber" : 56
      },
      "nodeContext" : "propertyName == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 109,
        "startLineNumber" : 1027,
        "startColumnNumber" : 32,
        "endLineNumber" : 1029,
        "endColumnNumber" : 33
      },
      "nodeContext" : "if (propertyName == null) {\n  continue;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 251,
        "startLineNumber" : 1025,
        "startColumnNumber" : 50,
        "endLineNumber" : 1030,
        "endColumnNumber" : 29
      },
      "nodeContext" : "{\n  propertyName=aliasMap.get(propertyName);\n  if (propertyName == null) {\n    continue;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 273,
        "startLineNumber" : 1025,
        "startColumnNumber" : 28,
        "endLineNumber" : 1030,
        "endColumnNumber" : 29
      },
      "nodeContext" : "if (aliasMap != null) {\n  propertyName=aliasMap.get(propertyName);\n  if (propertyName == null) {\n    continue;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 401,
        "startLineNumber" : 1022,
        "startColumnNumber" : 66,
        "endLineNumber" : 1031,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  propertyName=fieldAnnotation.name();\n  if (aliasMap != null) {\n    propertyName=aliasMap.get(propertyName);\n    if (propertyName == null) {\n      continue;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 25,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 443,
        "startLineNumber" : 1022,
        "startColumnNumber" : 24,
        "endLineNumber" : 1031,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (fieldAnnotation.name().length() != 0) {\n  propertyName=fieldAnnotation.name();\n  if (aliasMap != null) {\n    propertyName=aliasMap.get(propertyName);\n    if (propertyName == null) {\n      continue;\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 33,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 622,
        "startLineNumber" : 1017,
        "startColumnNumber" : 49,
        "endLineNumber" : 1032,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  if (!fieldAnnotation.serialize()) {\n    continue;\n  }\n  if (fieldAnnotation.name().length() != 0) {\n    propertyName=fieldAnnotation.name();\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 41,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 651,
        "startLineNumber" : 1017,
        "startColumnNumber" : 20,
        "endLineNumber" : 1032,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (fieldAnnotation != null) {\n  if (!fieldAnnotation.serialize()) {\n    continue;\n  }\n  if (fieldAnnotation.name().length() != 0) {\n    propertyName=fieldAnnotation.name();\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 45,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 782,
        "startLineNumber" : 1014,
        "startColumnNumber" : 35,
        "endLineNumber" : 1033,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n  if (fieldAnnotation != null) {\n    if (!fieldAnnotation.serialize()) {\n      continue;\n    }\n    if (fieldAnnotation.name().length() != 0) {\n      propertyName=fieldAnnotation.name();\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 57,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 801,
        "startLineNumber" : 1014,
        "startColumnNumber" : 16,
        "endLineNumber" : 1033,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (field != null) {\n  JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n  if (fieldAnnotation != null) {\n    if (!fieldAnnotation.serialize()) {\n      continue;\n    }\n    if (fieldAnnotation.name().length() != 0) {\n      propertyName=fieldAnnotation.name();\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 61,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1882,
        "startLineNumber" : 995,
        "startColumnNumber" : 45,
        "endLineNumber" : 1043,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (methodName.length() < 3) {\n    continue;\n  }\n  char c2=methodName.charAt(2);\n  String propertyName;\n  if (Character.isUpperCase(c2)) {\n    propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n  }\n else   if (c2 == '_') {\n    propertyName=methodName.substring(3);\n  }\n else   if (c2 == 'f') {\n    propertyName=methodName.substring(2);\n  }\n else {\n    continue;\n  }\n  Field field=ParserConfig.getField(clazz,propertyName);\n  if (field != null) {\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n      }\n    }\n  }\n  if (aliasMap != null) {\n    propertyName=aliasMap.get(propertyName);\n    if (propertyName == null) {\n      continue;\n    }\n  }\n  fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 169,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1915,
        "startLineNumber" : 995,
        "startColumnNumber" : 12,
        "endLineNumber" : 1043,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (methodName.startsWith(\"is\")) {\n  if (methodName.length() < 3) {\n    continue;\n  }\n  char c2=methodName.charAt(2);\n  String propertyName;\n  if (Character.isUpperCase(c2)) {\n    propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n  }\n else   if (c2 == '_') {\n    propertyName=methodName.substring(3);\n  }\n else   if (c2 == 'f') {\n    propertyName=methodName.substring(2);\n  }\n else {\n    continue;\n  }\n  Field field=ParserConfig.getField(clazz,propertyName);\n  if (field != null) {\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n      }\n    }\n  }\n  if (aliasMap != null) {\n    propertyName=aliasMap.get(propertyName);\n    if (propertyName == null) {\n      continue;\n    }\n  }\n  fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 174,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 5811,
        "startLineNumber" : 881,
        "startColumnNumber" : 49,
        "endLineNumber" : 1044,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String methodName=method.getName();\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  if (method.getReturnType().equals(Void.TYPE)) {\n    continue;\n  }\n  if (method.getParameterTypes().length != 0) {\n    continue;\n  }\n  if (method.getReturnType() == ClassLoader.class) {\n    continue;\n  }\n  if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n    continue;\n  }\n  JSONField annotation=method.getAnnotation(JSONField.class);\n  if (annotation == null) {\n    annotation=getSupperMethodAnnotation(clazz,method);\n  }\n  if (annotation != null) {\n    if (!annotation.serialize()) {\n      continue;\n    }\n    if (annotation.name().length() != 0) {\n      String propertyName=annotation.name();\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n      continue;\n    }\n  }\n  if (methodName.startsWith(\"get\")) {\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (methodName.equals(\"getClass\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else {\n      continue;\n    }\n    boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n    if (ignore) {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field == null) {\n      field=ParserConfig.getField(clazz,methodName.substring(3));\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n  if (methodName.startsWith(\"is\")) {\n    if (methodName.length() < 3) {\n      continue;\n    }\n    char c2=methodName.charAt(2);\n    String propertyName;\n    if (Character.isUpperCase(c2)) {\n      propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n    }\n else     if (c2 == '_') {\n      propertyName=methodName.substring(3);\n    }\n else     if (c2 == 'f') {\n      propertyName=methodName.substring(2);\n    }\n else {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 532,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5852,
        "startLineNumber" : 881,
        "startColumnNumber" : 8,
        "endLineNumber" : 1044,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Method method : clazz.getMethods()) {\n  String methodName=method.getName();\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  if (method.getReturnType().equals(Void.TYPE)) {\n    continue;\n  }\n  if (method.getParameterTypes().length != 0) {\n    continue;\n  }\n  if (method.getReturnType() == ClassLoader.class) {\n    continue;\n  }\n  if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n    continue;\n  }\n  JSONField annotation=method.getAnnotation(JSONField.class);\n  if (annotation == null) {\n    annotation=getSupperMethodAnnotation(clazz,method);\n  }\n  if (annotation != null) {\n    if (!annotation.serialize()) {\n      continue;\n    }\n    if (annotation.name().length() != 0) {\n      String propertyName=annotation.name();\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n      continue;\n    }\n  }\n  if (methodName.startsWith(\"get\")) {\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (methodName.equals(\"getClass\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else {\n      continue;\n    }\n    boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n    if (ignore) {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field == null) {\n      field=ParserConfig.getField(clazz,methodName.substring(3));\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n  if (methodName.startsWith(\"is\")) {\n    if (methodName.length() < 3) {\n      continue;\n    }\n    char c2=methodName.charAt(2);\n    String propertyName;\n    if (Character.isUpperCase(c2)) {\n      propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n    }\n else     if (c2 == '_') {\n      propertyName=methodName.substring(3);\n    }\n else     if (c2 == 'f') {\n      propertyName=methodName.substring(2);\n    }\n else {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 540,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8137,
        "startLineNumber" : 878,
        "startColumnNumber" : 111,
        "endLineNumber" : 1114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,FieldInfo> fieldInfoMap=new LinkedHashMap<String,FieldInfo>();\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (method.getReturnType().equals(Void.TYPE)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 0) {\n      continue;\n    }\n    if (method.getReturnType() == ClassLoader.class) {\n      continue;\n    }\n    if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.serialize()) {\n        continue;\n      }\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n        fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n        continue;\n      }\n    }\n    if (methodName.startsWith(\"get\")) {\n      if (methodName.length() < 4) {\n        continue;\n      }\n      if (methodName.equals(\"getClass\")) {\n        continue;\n      }\n      char c3=methodName.charAt(3);\n      String propertyName;\n      if (Character.isUpperCase(c3)) {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n else       if (c3 == '_') {\n        propertyName=methodName.substring(4);\n      }\n else       if (c3 == 'f') {\n        propertyName=methodName.substring(3);\n      }\n else {\n        continue;\n      }\n      boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n      if (ignore) {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field == null) {\n        field=ParserConfig.getField(clazz,methodName.substring(3));\n      }\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n    if (methodName.startsWith(\"is\")) {\n      if (methodName.length() < 3) {\n        continue;\n      }\n      char c2=methodName.charAt(2);\n      String propertyName;\n      if (Character.isUpperCase(c2)) {\n        propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n      }\n else       if (c2 == '_') {\n        propertyName=methodName.substring(3);\n      }\n else       if (c2 == 'f') {\n        propertyName=methodName.substring(2);\n      }\n else {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    String propertyName=field.getName();\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    if (!fieldInfoMap.containsKey(propertyName)) {\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field));\n    }\n  }\n  List<FieldInfo> fieldInfoList=new ArrayList<FieldInfo>();\n  boolean containsAll=false;\n  String[] orders=null;\n  JSONType annotation=clazz.getAnnotation(JSONType.class);\n  if (annotation != null) {\n    orders=annotation.orders();\n    if (orders != null && orders.length == fieldInfoMap.size()) {\n      containsAll=true;\n      for (      String item : orders) {\n        if (!fieldInfoMap.containsKey(item)) {\n          containsAll=false;\n          break;\n        }\n      }\n    }\n else {\n      containsAll=false;\n    }\n  }\n  if (containsAll) {\n    for (    String item : orders) {\n      FieldInfo fieldInfo=fieldInfoMap.get(item);\n      fieldInfoList.add(fieldInfo);\n    }\n  }\n else {\n    for (    FieldInfo fieldInfo : fieldInfoMap.values()) {\n      fieldInfoList.add(fieldInfo);\n    }\n    if (sorted) {\n      Collections.sort(fieldInfoList);\n    }\n  }\n  return fieldInfoList;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 798,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8244,
        "startLineNumber" : 878,
        "startColumnNumber" : 4,
        "endLineNumber" : 1114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static List<FieldInfo> computeGetters(Class<?> clazz,Map<String,String> aliasMap,boolean sorted){\n  Map<String,FieldInfo> fieldInfoMap=new LinkedHashMap<String,FieldInfo>();\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (method.getReturnType().equals(Void.TYPE)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 0) {\n      continue;\n    }\n    if (method.getReturnType() == ClassLoader.class) {\n      continue;\n    }\n    if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.serialize()) {\n        continue;\n      }\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n        fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n        continue;\n      }\n    }\n    if (methodName.startsWith(\"get\")) {\n      if (methodName.length() < 4) {\n        continue;\n      }\n      if (methodName.equals(\"getClass\")) {\n        continue;\n      }\n      char c3=methodName.charAt(3);\n      String propertyName;\n      if (Character.isUpperCase(c3)) {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n else       if (c3 == '_') {\n        propertyName=methodName.substring(4);\n      }\n else       if (c3 == 'f') {\n        propertyName=methodName.substring(3);\n      }\n else {\n        continue;\n      }\n      boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n      if (ignore) {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field == null) {\n        field=ParserConfig.getField(clazz,methodName.substring(3));\n      }\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n    if (methodName.startsWith(\"is\")) {\n      if (methodName.length() < 3) {\n        continue;\n      }\n      char c2=methodName.charAt(2);\n      String propertyName;\n      if (Character.isUpperCase(c2)) {\n        propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n      }\n else       if (c2 == '_') {\n        propertyName=methodName.substring(3);\n      }\n else       if (c2 == 'f') {\n        propertyName=methodName.substring(2);\n      }\n else {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    String propertyName=field.getName();\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    if (!fieldInfoMap.containsKey(propertyName)) {\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field));\n    }\n  }\n  List<FieldInfo> fieldInfoList=new ArrayList<FieldInfo>();\n  boolean containsAll=false;\n  String[] orders=null;\n  JSONType annotation=clazz.getAnnotation(JSONType.class);\n  if (annotation != null) {\n    orders=annotation.orders();\n    if (orders != null && orders.length == fieldInfoMap.size()) {\n      containsAll=true;\n      for (      String item : orders) {\n        if (!fieldInfoMap.containsKey(item)) {\n          containsAll=false;\n          break;\n        }\n      }\n    }\n else {\n      containsAll=false;\n    }\n  }\n  if (containsAll) {\n    for (    String item : orders) {\n      FieldInfo fieldInfo=fieldInfoMap.get(item);\n      fieldInfoList.add(fieldInfo);\n    }\n  }\n else {\n    for (    FieldInfo fieldInfo : fieldInfoMap.values()) {\n      fieldInfoList.add(fieldInfo);\n    }\n    if (sorted) {\n      Collections.sort(fieldInfoList);\n    }\n  }\n  return fieldInfoList;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 825,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 1027,
        "startColumnNumber" : 36,
        "endLineNumber" : 1027,
        "endColumnNumber" : 56
      },
      "nodeContext" : "propertyName == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 1035,
      "startColumnNumber" : 32,
      "endLineNumber" : 1035,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 1035,
        "startColumnNumber" : 20,
        "endLineNumber" : 1035,
        "endColumnNumber" : 36
      },
      "nodeContext" : "aliasMap != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 213,
        "startLineNumber" : 1035,
        "startColumnNumber" : 16,
        "endLineNumber" : 1040,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (aliasMap != null) {\n  propertyName=aliasMap.get(propertyName);\n  if (propertyName == null) {\n    continue;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1882,
        "startLineNumber" : 995,
        "startColumnNumber" : 45,
        "endLineNumber" : 1043,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (methodName.length() < 3) {\n    continue;\n  }\n  char c2=methodName.charAt(2);\n  String propertyName;\n  if (Character.isUpperCase(c2)) {\n    propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n  }\n else   if (c2 == '_') {\n    propertyName=methodName.substring(3);\n  }\n else   if (c2 == 'f') {\n    propertyName=methodName.substring(2);\n  }\n else {\n    continue;\n  }\n  Field field=ParserConfig.getField(clazz,propertyName);\n  if (field != null) {\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n      }\n    }\n  }\n  if (aliasMap != null) {\n    propertyName=aliasMap.get(propertyName);\n    if (propertyName == null) {\n      continue;\n    }\n  }\n  fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 169,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1915,
        "startLineNumber" : 995,
        "startColumnNumber" : 12,
        "endLineNumber" : 1043,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (methodName.startsWith(\"is\")) {\n  if (methodName.length() < 3) {\n    continue;\n  }\n  char c2=methodName.charAt(2);\n  String propertyName;\n  if (Character.isUpperCase(c2)) {\n    propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n  }\n else   if (c2 == '_') {\n    propertyName=methodName.substring(3);\n  }\n else   if (c2 == 'f') {\n    propertyName=methodName.substring(2);\n  }\n else {\n    continue;\n  }\n  Field field=ParserConfig.getField(clazz,propertyName);\n  if (field != null) {\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n      }\n    }\n  }\n  if (aliasMap != null) {\n    propertyName=aliasMap.get(propertyName);\n    if (propertyName == null) {\n      continue;\n    }\n  }\n  fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 174,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 5811,
        "startLineNumber" : 881,
        "startColumnNumber" : 49,
        "endLineNumber" : 1044,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String methodName=method.getName();\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  if (method.getReturnType().equals(Void.TYPE)) {\n    continue;\n  }\n  if (method.getParameterTypes().length != 0) {\n    continue;\n  }\n  if (method.getReturnType() == ClassLoader.class) {\n    continue;\n  }\n  if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n    continue;\n  }\n  JSONField annotation=method.getAnnotation(JSONField.class);\n  if (annotation == null) {\n    annotation=getSupperMethodAnnotation(clazz,method);\n  }\n  if (annotation != null) {\n    if (!annotation.serialize()) {\n      continue;\n    }\n    if (annotation.name().length() != 0) {\n      String propertyName=annotation.name();\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n      continue;\n    }\n  }\n  if (methodName.startsWith(\"get\")) {\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (methodName.equals(\"getClass\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else {\n      continue;\n    }\n    boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n    if (ignore) {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field == null) {\n      field=ParserConfig.getField(clazz,methodName.substring(3));\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n  if (methodName.startsWith(\"is\")) {\n    if (methodName.length() < 3) {\n      continue;\n    }\n    char c2=methodName.charAt(2);\n    String propertyName;\n    if (Character.isUpperCase(c2)) {\n      propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n    }\n else     if (c2 == '_') {\n      propertyName=methodName.substring(3);\n    }\n else     if (c2 == 'f') {\n      propertyName=methodName.substring(2);\n    }\n else {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 532,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5852,
        "startLineNumber" : 881,
        "startColumnNumber" : 8,
        "endLineNumber" : 1044,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Method method : clazz.getMethods()) {\n  String methodName=method.getName();\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  if (method.getReturnType().equals(Void.TYPE)) {\n    continue;\n  }\n  if (method.getParameterTypes().length != 0) {\n    continue;\n  }\n  if (method.getReturnType() == ClassLoader.class) {\n    continue;\n  }\n  if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n    continue;\n  }\n  JSONField annotation=method.getAnnotation(JSONField.class);\n  if (annotation == null) {\n    annotation=getSupperMethodAnnotation(clazz,method);\n  }\n  if (annotation != null) {\n    if (!annotation.serialize()) {\n      continue;\n    }\n    if (annotation.name().length() != 0) {\n      String propertyName=annotation.name();\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n      continue;\n    }\n  }\n  if (methodName.startsWith(\"get\")) {\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (methodName.equals(\"getClass\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else {\n      continue;\n    }\n    boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n    if (ignore) {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field == null) {\n      field=ParserConfig.getField(clazz,methodName.substring(3));\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n  if (methodName.startsWith(\"is\")) {\n    if (methodName.length() < 3) {\n      continue;\n    }\n    char c2=methodName.charAt(2);\n    String propertyName;\n    if (Character.isUpperCase(c2)) {\n      propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n    }\n else     if (c2 == '_') {\n      propertyName=methodName.substring(3);\n    }\n else     if (c2 == 'f') {\n      propertyName=methodName.substring(2);\n    }\n else {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 540,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8137,
        "startLineNumber" : 878,
        "startColumnNumber" : 111,
        "endLineNumber" : 1114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,FieldInfo> fieldInfoMap=new LinkedHashMap<String,FieldInfo>();\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (method.getReturnType().equals(Void.TYPE)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 0) {\n      continue;\n    }\n    if (method.getReturnType() == ClassLoader.class) {\n      continue;\n    }\n    if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.serialize()) {\n        continue;\n      }\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n        fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n        continue;\n      }\n    }\n    if (methodName.startsWith(\"get\")) {\n      if (methodName.length() < 4) {\n        continue;\n      }\n      if (methodName.equals(\"getClass\")) {\n        continue;\n      }\n      char c3=methodName.charAt(3);\n      String propertyName;\n      if (Character.isUpperCase(c3)) {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n else       if (c3 == '_') {\n        propertyName=methodName.substring(4);\n      }\n else       if (c3 == 'f') {\n        propertyName=methodName.substring(3);\n      }\n else {\n        continue;\n      }\n      boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n      if (ignore) {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field == null) {\n        field=ParserConfig.getField(clazz,methodName.substring(3));\n      }\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n    if (methodName.startsWith(\"is\")) {\n      if (methodName.length() < 3) {\n        continue;\n      }\n      char c2=methodName.charAt(2);\n      String propertyName;\n      if (Character.isUpperCase(c2)) {\n        propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n      }\n else       if (c2 == '_') {\n        propertyName=methodName.substring(3);\n      }\n else       if (c2 == 'f') {\n        propertyName=methodName.substring(2);\n      }\n else {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    String propertyName=field.getName();\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    if (!fieldInfoMap.containsKey(propertyName)) {\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field));\n    }\n  }\n  List<FieldInfo> fieldInfoList=new ArrayList<FieldInfo>();\n  boolean containsAll=false;\n  String[] orders=null;\n  JSONType annotation=clazz.getAnnotation(JSONType.class);\n  if (annotation != null) {\n    orders=annotation.orders();\n    if (orders != null && orders.length == fieldInfoMap.size()) {\n      containsAll=true;\n      for (      String item : orders) {\n        if (!fieldInfoMap.containsKey(item)) {\n          containsAll=false;\n          break;\n        }\n      }\n    }\n else {\n      containsAll=false;\n    }\n  }\n  if (containsAll) {\n    for (    String item : orders) {\n      FieldInfo fieldInfo=fieldInfoMap.get(item);\n      fieldInfoList.add(fieldInfo);\n    }\n  }\n else {\n    for (    FieldInfo fieldInfo : fieldInfoMap.values()) {\n      fieldInfoList.add(fieldInfo);\n    }\n    if (sorted) {\n      Collections.sort(fieldInfoList);\n    }\n  }\n  return fieldInfoList;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 798,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8244,
        "startLineNumber" : 878,
        "startColumnNumber" : 4,
        "endLineNumber" : 1114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static List<FieldInfo> computeGetters(Class<?> clazz,Map<String,String> aliasMap,boolean sorted){\n  Map<String,FieldInfo> fieldInfoMap=new LinkedHashMap<String,FieldInfo>();\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (method.getReturnType().equals(Void.TYPE)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 0) {\n      continue;\n    }\n    if (method.getReturnType() == ClassLoader.class) {\n      continue;\n    }\n    if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.serialize()) {\n        continue;\n      }\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n        fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n        continue;\n      }\n    }\n    if (methodName.startsWith(\"get\")) {\n      if (methodName.length() < 4) {\n        continue;\n      }\n      if (methodName.equals(\"getClass\")) {\n        continue;\n      }\n      char c3=methodName.charAt(3);\n      String propertyName;\n      if (Character.isUpperCase(c3)) {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n else       if (c3 == '_') {\n        propertyName=methodName.substring(4);\n      }\n else       if (c3 == 'f') {\n        propertyName=methodName.substring(3);\n      }\n else {\n        continue;\n      }\n      boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n      if (ignore) {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field == null) {\n        field=ParserConfig.getField(clazz,methodName.substring(3));\n      }\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n    if (methodName.startsWith(\"is\")) {\n      if (methodName.length() < 3) {\n        continue;\n      }\n      char c2=methodName.charAt(2);\n      String propertyName;\n      if (Character.isUpperCase(c2)) {\n        propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n      }\n else       if (c2 == '_') {\n        propertyName=methodName.substring(3);\n      }\n else       if (c2 == 'f') {\n        propertyName=methodName.substring(2);\n      }\n else {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    String propertyName=field.getName();\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    if (!fieldInfoMap.containsKey(propertyName)) {\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field));\n    }\n  }\n  List<FieldInfo> fieldInfoList=new ArrayList<FieldInfo>();\n  boolean containsAll=false;\n  String[] orders=null;\n  JSONType annotation=clazz.getAnnotation(JSONType.class);\n  if (annotation != null) {\n    orders=annotation.orders();\n    if (orders != null && orders.length == fieldInfoMap.size()) {\n      containsAll=true;\n      for (      String item : orders) {\n        if (!fieldInfoMap.containsKey(item)) {\n          containsAll=false;\n          break;\n        }\n      }\n    }\n else {\n      containsAll=false;\n    }\n  }\n  if (containsAll) {\n    for (    String item : orders) {\n      FieldInfo fieldInfo=fieldInfoMap.get(item);\n      fieldInfoList.add(fieldInfo);\n    }\n  }\n else {\n    for (    FieldInfo fieldInfo : fieldInfoMap.values()) {\n      fieldInfoList.add(fieldInfo);\n    }\n    if (sorted) {\n      Collections.sort(fieldInfoList);\n    }\n  }\n  return fieldInfoList;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 825,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 1035,
        "startColumnNumber" : 20,
        "endLineNumber" : 1035,
        "endColumnNumber" : 36
      },
      "nodeContext" : "aliasMap != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 1037,
      "startColumnNumber" : 40,
      "endLineNumber" : 1037,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 1037,
        "startColumnNumber" : 24,
        "endLineNumber" : 1037,
        "endColumnNumber" : 44
      },
      "nodeContext" : "propertyName == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 1037,
        "startColumnNumber" : 20,
        "endLineNumber" : 1039,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (propertyName == null) {\n  continue;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 191,
        "startLineNumber" : 1035,
        "startColumnNumber" : 38,
        "endLineNumber" : 1040,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  propertyName=aliasMap.get(propertyName);\n  if (propertyName == null) {\n    continue;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 213,
        "startLineNumber" : 1035,
        "startColumnNumber" : 16,
        "endLineNumber" : 1040,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (aliasMap != null) {\n  propertyName=aliasMap.get(propertyName);\n  if (propertyName == null) {\n    continue;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1882,
        "startLineNumber" : 995,
        "startColumnNumber" : 45,
        "endLineNumber" : 1043,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (methodName.length() < 3) {\n    continue;\n  }\n  char c2=methodName.charAt(2);\n  String propertyName;\n  if (Character.isUpperCase(c2)) {\n    propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n  }\n else   if (c2 == '_') {\n    propertyName=methodName.substring(3);\n  }\n else   if (c2 == 'f') {\n    propertyName=methodName.substring(2);\n  }\n else {\n    continue;\n  }\n  Field field=ParserConfig.getField(clazz,propertyName);\n  if (field != null) {\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n      }\n    }\n  }\n  if (aliasMap != null) {\n    propertyName=aliasMap.get(propertyName);\n    if (propertyName == null) {\n      continue;\n    }\n  }\n  fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 169,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1915,
        "startLineNumber" : 995,
        "startColumnNumber" : 12,
        "endLineNumber" : 1043,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (methodName.startsWith(\"is\")) {\n  if (methodName.length() < 3) {\n    continue;\n  }\n  char c2=methodName.charAt(2);\n  String propertyName;\n  if (Character.isUpperCase(c2)) {\n    propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n  }\n else   if (c2 == '_') {\n    propertyName=methodName.substring(3);\n  }\n else   if (c2 == 'f') {\n    propertyName=methodName.substring(2);\n  }\n else {\n    continue;\n  }\n  Field field=ParserConfig.getField(clazz,propertyName);\n  if (field != null) {\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n      }\n    }\n  }\n  if (aliasMap != null) {\n    propertyName=aliasMap.get(propertyName);\n    if (propertyName == null) {\n      continue;\n    }\n  }\n  fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 174,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 5811,
        "startLineNumber" : 881,
        "startColumnNumber" : 49,
        "endLineNumber" : 1044,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String methodName=method.getName();\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  if (method.getReturnType().equals(Void.TYPE)) {\n    continue;\n  }\n  if (method.getParameterTypes().length != 0) {\n    continue;\n  }\n  if (method.getReturnType() == ClassLoader.class) {\n    continue;\n  }\n  if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n    continue;\n  }\n  JSONField annotation=method.getAnnotation(JSONField.class);\n  if (annotation == null) {\n    annotation=getSupperMethodAnnotation(clazz,method);\n  }\n  if (annotation != null) {\n    if (!annotation.serialize()) {\n      continue;\n    }\n    if (annotation.name().length() != 0) {\n      String propertyName=annotation.name();\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n      continue;\n    }\n  }\n  if (methodName.startsWith(\"get\")) {\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (methodName.equals(\"getClass\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else {\n      continue;\n    }\n    boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n    if (ignore) {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field == null) {\n      field=ParserConfig.getField(clazz,methodName.substring(3));\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n  if (methodName.startsWith(\"is\")) {\n    if (methodName.length() < 3) {\n      continue;\n    }\n    char c2=methodName.charAt(2);\n    String propertyName;\n    if (Character.isUpperCase(c2)) {\n      propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n    }\n else     if (c2 == '_') {\n      propertyName=methodName.substring(3);\n    }\n else     if (c2 == 'f') {\n      propertyName=methodName.substring(2);\n    }\n else {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 532,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5852,
        "startLineNumber" : 881,
        "startColumnNumber" : 8,
        "endLineNumber" : 1044,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Method method : clazz.getMethods()) {\n  String methodName=method.getName();\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  if (method.getReturnType().equals(Void.TYPE)) {\n    continue;\n  }\n  if (method.getParameterTypes().length != 0) {\n    continue;\n  }\n  if (method.getReturnType() == ClassLoader.class) {\n    continue;\n  }\n  if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n    continue;\n  }\n  JSONField annotation=method.getAnnotation(JSONField.class);\n  if (annotation == null) {\n    annotation=getSupperMethodAnnotation(clazz,method);\n  }\n  if (annotation != null) {\n    if (!annotation.serialize()) {\n      continue;\n    }\n    if (annotation.name().length() != 0) {\n      String propertyName=annotation.name();\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n      continue;\n    }\n  }\n  if (methodName.startsWith(\"get\")) {\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (methodName.equals(\"getClass\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else {\n      continue;\n    }\n    boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n    if (ignore) {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field == null) {\n      field=ParserConfig.getField(clazz,methodName.substring(3));\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n  if (methodName.startsWith(\"is\")) {\n    if (methodName.length() < 3) {\n      continue;\n    }\n    char c2=methodName.charAt(2);\n    String propertyName;\n    if (Character.isUpperCase(c2)) {\n      propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n    }\n else     if (c2 == '_') {\n      propertyName=methodName.substring(3);\n    }\n else     if (c2 == 'f') {\n      propertyName=methodName.substring(2);\n    }\n else {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 540,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8137,
        "startLineNumber" : 878,
        "startColumnNumber" : 111,
        "endLineNumber" : 1114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,FieldInfo> fieldInfoMap=new LinkedHashMap<String,FieldInfo>();\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (method.getReturnType().equals(Void.TYPE)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 0) {\n      continue;\n    }\n    if (method.getReturnType() == ClassLoader.class) {\n      continue;\n    }\n    if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.serialize()) {\n        continue;\n      }\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n        fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n        continue;\n      }\n    }\n    if (methodName.startsWith(\"get\")) {\n      if (methodName.length() < 4) {\n        continue;\n      }\n      if (methodName.equals(\"getClass\")) {\n        continue;\n      }\n      char c3=methodName.charAt(3);\n      String propertyName;\n      if (Character.isUpperCase(c3)) {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n else       if (c3 == '_') {\n        propertyName=methodName.substring(4);\n      }\n else       if (c3 == 'f') {\n        propertyName=methodName.substring(3);\n      }\n else {\n        continue;\n      }\n      boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n      if (ignore) {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field == null) {\n        field=ParserConfig.getField(clazz,methodName.substring(3));\n      }\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n    if (methodName.startsWith(\"is\")) {\n      if (methodName.length() < 3) {\n        continue;\n      }\n      char c2=methodName.charAt(2);\n      String propertyName;\n      if (Character.isUpperCase(c2)) {\n        propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n      }\n else       if (c2 == '_') {\n        propertyName=methodName.substring(3);\n      }\n else       if (c2 == 'f') {\n        propertyName=methodName.substring(2);\n      }\n else {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    String propertyName=field.getName();\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    if (!fieldInfoMap.containsKey(propertyName)) {\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field));\n    }\n  }\n  List<FieldInfo> fieldInfoList=new ArrayList<FieldInfo>();\n  boolean containsAll=false;\n  String[] orders=null;\n  JSONType annotation=clazz.getAnnotation(JSONType.class);\n  if (annotation != null) {\n    orders=annotation.orders();\n    if (orders != null && orders.length == fieldInfoMap.size()) {\n      containsAll=true;\n      for (      String item : orders) {\n        if (!fieldInfoMap.containsKey(item)) {\n          containsAll=false;\n          break;\n        }\n      }\n    }\n else {\n      containsAll=false;\n    }\n  }\n  if (containsAll) {\n    for (    String item : orders) {\n      FieldInfo fieldInfo=fieldInfoMap.get(item);\n      fieldInfoList.add(fieldInfo);\n    }\n  }\n else {\n    for (    FieldInfo fieldInfo : fieldInfoMap.values()) {\n      fieldInfoList.add(fieldInfo);\n    }\n    if (sorted) {\n      Collections.sort(fieldInfoList);\n    }\n  }\n  return fieldInfoList;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 798,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8244,
        "startLineNumber" : 878,
        "startColumnNumber" : 4,
        "endLineNumber" : 1114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static List<FieldInfo> computeGetters(Class<?> clazz,Map<String,String> aliasMap,boolean sorted){\n  Map<String,FieldInfo> fieldInfoMap=new LinkedHashMap<String,FieldInfo>();\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (method.getReturnType().equals(Void.TYPE)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 0) {\n      continue;\n    }\n    if (method.getReturnType() == ClassLoader.class) {\n      continue;\n    }\n    if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.serialize()) {\n        continue;\n      }\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n        fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n        continue;\n      }\n    }\n    if (methodName.startsWith(\"get\")) {\n      if (methodName.length() < 4) {\n        continue;\n      }\n      if (methodName.equals(\"getClass\")) {\n        continue;\n      }\n      char c3=methodName.charAt(3);\n      String propertyName;\n      if (Character.isUpperCase(c3)) {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n else       if (c3 == '_') {\n        propertyName=methodName.substring(4);\n      }\n else       if (c3 == 'f') {\n        propertyName=methodName.substring(3);\n      }\n else {\n        continue;\n      }\n      boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n      if (ignore) {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field == null) {\n        field=ParserConfig.getField(clazz,methodName.substring(3));\n      }\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n    if (methodName.startsWith(\"is\")) {\n      if (methodName.length() < 3) {\n        continue;\n      }\n      char c2=methodName.charAt(2);\n      String propertyName;\n      if (Character.isUpperCase(c2)) {\n        propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n      }\n else       if (c2 == '_') {\n        propertyName=methodName.substring(3);\n      }\n else       if (c2 == 'f') {\n        propertyName=methodName.substring(2);\n      }\n else {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    String propertyName=field.getName();\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    if (!fieldInfoMap.containsKey(propertyName)) {\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field));\n    }\n  }\n  List<FieldInfo> fieldInfoList=new ArrayList<FieldInfo>();\n  boolean containsAll=false;\n  String[] orders=null;\n  JSONType annotation=clazz.getAnnotation(JSONType.class);\n  if (annotation != null) {\n    orders=annotation.orders();\n    if (orders != null && orders.length == fieldInfoMap.size()) {\n      containsAll=true;\n      for (      String item : orders) {\n        if (!fieldInfoMap.containsKey(item)) {\n          containsAll=false;\n          break;\n        }\n      }\n    }\n else {\n      containsAll=false;\n    }\n  }\n  if (containsAll) {\n    for (    String item : orders) {\n      FieldInfo fieldInfo=fieldInfoMap.get(item);\n      fieldInfoList.add(fieldInfo);\n    }\n  }\n else {\n    for (    FieldInfo fieldInfo : fieldInfoMap.values()) {\n      fieldInfoList.add(fieldInfo);\n    }\n    if (sorted) {\n      Collections.sort(fieldInfoList);\n    }\n  }\n  return fieldInfoList;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 825,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 1037,
        "startColumnNumber" : 24,
        "endLineNumber" : 1037,
        "endColumnNumber" : 44
      },
      "nodeContext" : "propertyName == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 1054,
      "startColumnNumber" : 35,
      "endLineNumber" : 1054,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 1054,
        "startColumnNumber" : 16,
        "endLineNumber" : 1054,
        "endColumnNumber" : 39
      },
      "nodeContext" : "fieldAnnotation != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 290,
        "startLineNumber" : 1054,
        "startColumnNumber" : 12,
        "endLineNumber" : 1062,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (fieldAnnotation != null) {\n  if (!fieldAnnotation.serialize()) {\n    continue;\n  }\n  if (fieldAnnotation.name().length() != 0) {\n    propertyName=fieldAnnotation.name();\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 27,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 930,
        "startLineNumber" : 1046,
        "startColumnNumber" : 46,
        "endLineNumber" : 1074,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (Modifier.isStatic(field.getModifiers())) {\n    continue;\n  }\n  JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n  String propertyName=field.getName();\n  if (fieldAnnotation != null) {\n    if (!fieldAnnotation.serialize()) {\n      continue;\n    }\n    if (fieldAnnotation.name().length() != 0) {\n      propertyName=fieldAnnotation.name();\n    }\n  }\n  if (aliasMap != null) {\n    propertyName=aliasMap.get(propertyName);\n    if (propertyName == null) {\n      continue;\n    }\n  }\n  if (!fieldInfoMap.containsKey(propertyName)) {\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 92,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 968,
        "startLineNumber" : 1046,
        "startColumnNumber" : 8,
        "endLineNumber" : 1074,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Field field : clazz.getFields()) {\n  if (Modifier.isStatic(field.getModifiers())) {\n    continue;\n  }\n  JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n  String propertyName=field.getName();\n  if (fieldAnnotation != null) {\n    if (!fieldAnnotation.serialize()) {\n      continue;\n    }\n    if (fieldAnnotation.name().length() != 0) {\n      propertyName=fieldAnnotation.name();\n    }\n  }\n  if (aliasMap != null) {\n    propertyName=aliasMap.get(propertyName);\n    if (propertyName == null) {\n      continue;\n    }\n  }\n  if (!fieldInfoMap.containsKey(propertyName)) {\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field));\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 100,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8137,
        "startLineNumber" : 878,
        "startColumnNumber" : 111,
        "endLineNumber" : 1114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,FieldInfo> fieldInfoMap=new LinkedHashMap<String,FieldInfo>();\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (method.getReturnType().equals(Void.TYPE)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 0) {\n      continue;\n    }\n    if (method.getReturnType() == ClassLoader.class) {\n      continue;\n    }\n    if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.serialize()) {\n        continue;\n      }\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n        fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n        continue;\n      }\n    }\n    if (methodName.startsWith(\"get\")) {\n      if (methodName.length() < 4) {\n        continue;\n      }\n      if (methodName.equals(\"getClass\")) {\n        continue;\n      }\n      char c3=methodName.charAt(3);\n      String propertyName;\n      if (Character.isUpperCase(c3)) {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n else       if (c3 == '_') {\n        propertyName=methodName.substring(4);\n      }\n else       if (c3 == 'f') {\n        propertyName=methodName.substring(3);\n      }\n else {\n        continue;\n      }\n      boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n      if (ignore) {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field == null) {\n        field=ParserConfig.getField(clazz,methodName.substring(3));\n      }\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n    if (methodName.startsWith(\"is\")) {\n      if (methodName.length() < 3) {\n        continue;\n      }\n      char c2=methodName.charAt(2);\n      String propertyName;\n      if (Character.isUpperCase(c2)) {\n        propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n      }\n else       if (c2 == '_') {\n        propertyName=methodName.substring(3);\n      }\n else       if (c2 == 'f') {\n        propertyName=methodName.substring(2);\n      }\n else {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    String propertyName=field.getName();\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    if (!fieldInfoMap.containsKey(propertyName)) {\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field));\n    }\n  }\n  List<FieldInfo> fieldInfoList=new ArrayList<FieldInfo>();\n  boolean containsAll=false;\n  String[] orders=null;\n  JSONType annotation=clazz.getAnnotation(JSONType.class);\n  if (annotation != null) {\n    orders=annotation.orders();\n    if (orders != null && orders.length == fieldInfoMap.size()) {\n      containsAll=true;\n      for (      String item : orders) {\n        if (!fieldInfoMap.containsKey(item)) {\n          containsAll=false;\n          break;\n        }\n      }\n    }\n else {\n      containsAll=false;\n    }\n  }\n  if (containsAll) {\n    for (    String item : orders) {\n      FieldInfo fieldInfo=fieldInfoMap.get(item);\n      fieldInfoList.add(fieldInfo);\n    }\n  }\n else {\n    for (    FieldInfo fieldInfo : fieldInfoMap.values()) {\n      fieldInfoList.add(fieldInfo);\n    }\n    if (sorted) {\n      Collections.sort(fieldInfoList);\n    }\n  }\n  return fieldInfoList;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 798,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8244,
        "startLineNumber" : 878,
        "startColumnNumber" : 4,
        "endLineNumber" : 1114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static List<FieldInfo> computeGetters(Class<?> clazz,Map<String,String> aliasMap,boolean sorted){\n  Map<String,FieldInfo> fieldInfoMap=new LinkedHashMap<String,FieldInfo>();\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (method.getReturnType().equals(Void.TYPE)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 0) {\n      continue;\n    }\n    if (method.getReturnType() == ClassLoader.class) {\n      continue;\n    }\n    if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.serialize()) {\n        continue;\n      }\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n        fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n        continue;\n      }\n    }\n    if (methodName.startsWith(\"get\")) {\n      if (methodName.length() < 4) {\n        continue;\n      }\n      if (methodName.equals(\"getClass\")) {\n        continue;\n      }\n      char c3=methodName.charAt(3);\n      String propertyName;\n      if (Character.isUpperCase(c3)) {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n else       if (c3 == '_') {\n        propertyName=methodName.substring(4);\n      }\n else       if (c3 == 'f') {\n        propertyName=methodName.substring(3);\n      }\n else {\n        continue;\n      }\n      boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n      if (ignore) {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field == null) {\n        field=ParserConfig.getField(clazz,methodName.substring(3));\n      }\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n    if (methodName.startsWith(\"is\")) {\n      if (methodName.length() < 3) {\n        continue;\n      }\n      char c2=methodName.charAt(2);\n      String propertyName;\n      if (Character.isUpperCase(c2)) {\n        propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n      }\n else       if (c2 == '_') {\n        propertyName=methodName.substring(3);\n      }\n else       if (c2 == 'f') {\n        propertyName=methodName.substring(2);\n      }\n else {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    String propertyName=field.getName();\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    if (!fieldInfoMap.containsKey(propertyName)) {\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field));\n    }\n  }\n  List<FieldInfo> fieldInfoList=new ArrayList<FieldInfo>();\n  boolean containsAll=false;\n  String[] orders=null;\n  JSONType annotation=clazz.getAnnotation(JSONType.class);\n  if (annotation != null) {\n    orders=annotation.orders();\n    if (orders != null && orders.length == fieldInfoMap.size()) {\n      containsAll=true;\n      for (      String item : orders) {\n        if (!fieldInfoMap.containsKey(item)) {\n          containsAll=false;\n          break;\n        }\n      }\n    }\n else {\n      containsAll=false;\n    }\n  }\n  if (containsAll) {\n    for (    String item : orders) {\n      FieldInfo fieldInfo=fieldInfoMap.get(item);\n      fieldInfoList.add(fieldInfo);\n    }\n  }\n else {\n    for (    FieldInfo fieldInfo : fieldInfoMap.values()) {\n      fieldInfoList.add(fieldInfo);\n    }\n    if (sorted) {\n      Collections.sort(fieldInfoList);\n    }\n  }\n  return fieldInfoList;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 825,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 1054,
        "startColumnNumber" : 16,
        "endLineNumber" : 1054,
        "endColumnNumber" : 39
      },
      "nodeContext" : "fieldAnnotation != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 1064,
      "startColumnNumber" : 28,
      "endLineNumber" : 1064,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 1064,
        "startColumnNumber" : 16,
        "endLineNumber" : 1064,
        "endColumnNumber" : 32
      },
      "nodeContext" : "aliasMap != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 193,
        "startLineNumber" : 1064,
        "startColumnNumber" : 12,
        "endLineNumber" : 1069,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (aliasMap != null) {\n  propertyName=aliasMap.get(propertyName);\n  if (propertyName == null) {\n    continue;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 930,
        "startLineNumber" : 1046,
        "startColumnNumber" : 46,
        "endLineNumber" : 1074,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (Modifier.isStatic(field.getModifiers())) {\n    continue;\n  }\n  JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n  String propertyName=field.getName();\n  if (fieldAnnotation != null) {\n    if (!fieldAnnotation.serialize()) {\n      continue;\n    }\n    if (fieldAnnotation.name().length() != 0) {\n      propertyName=fieldAnnotation.name();\n    }\n  }\n  if (aliasMap != null) {\n    propertyName=aliasMap.get(propertyName);\n    if (propertyName == null) {\n      continue;\n    }\n  }\n  if (!fieldInfoMap.containsKey(propertyName)) {\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 92,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 968,
        "startLineNumber" : 1046,
        "startColumnNumber" : 8,
        "endLineNumber" : 1074,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Field field : clazz.getFields()) {\n  if (Modifier.isStatic(field.getModifiers())) {\n    continue;\n  }\n  JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n  String propertyName=field.getName();\n  if (fieldAnnotation != null) {\n    if (!fieldAnnotation.serialize()) {\n      continue;\n    }\n    if (fieldAnnotation.name().length() != 0) {\n      propertyName=fieldAnnotation.name();\n    }\n  }\n  if (aliasMap != null) {\n    propertyName=aliasMap.get(propertyName);\n    if (propertyName == null) {\n      continue;\n    }\n  }\n  if (!fieldInfoMap.containsKey(propertyName)) {\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field));\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 100,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8137,
        "startLineNumber" : 878,
        "startColumnNumber" : 111,
        "endLineNumber" : 1114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,FieldInfo> fieldInfoMap=new LinkedHashMap<String,FieldInfo>();\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (method.getReturnType().equals(Void.TYPE)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 0) {\n      continue;\n    }\n    if (method.getReturnType() == ClassLoader.class) {\n      continue;\n    }\n    if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.serialize()) {\n        continue;\n      }\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n        fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n        continue;\n      }\n    }\n    if (methodName.startsWith(\"get\")) {\n      if (methodName.length() < 4) {\n        continue;\n      }\n      if (methodName.equals(\"getClass\")) {\n        continue;\n      }\n      char c3=methodName.charAt(3);\n      String propertyName;\n      if (Character.isUpperCase(c3)) {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n else       if (c3 == '_') {\n        propertyName=methodName.substring(4);\n      }\n else       if (c3 == 'f') {\n        propertyName=methodName.substring(3);\n      }\n else {\n        continue;\n      }\n      boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n      if (ignore) {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field == null) {\n        field=ParserConfig.getField(clazz,methodName.substring(3));\n      }\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n    if (methodName.startsWith(\"is\")) {\n      if (methodName.length() < 3) {\n        continue;\n      }\n      char c2=methodName.charAt(2);\n      String propertyName;\n      if (Character.isUpperCase(c2)) {\n        propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n      }\n else       if (c2 == '_') {\n        propertyName=methodName.substring(3);\n      }\n else       if (c2 == 'f') {\n        propertyName=methodName.substring(2);\n      }\n else {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    String propertyName=field.getName();\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    if (!fieldInfoMap.containsKey(propertyName)) {\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field));\n    }\n  }\n  List<FieldInfo> fieldInfoList=new ArrayList<FieldInfo>();\n  boolean containsAll=false;\n  String[] orders=null;\n  JSONType annotation=clazz.getAnnotation(JSONType.class);\n  if (annotation != null) {\n    orders=annotation.orders();\n    if (orders != null && orders.length == fieldInfoMap.size()) {\n      containsAll=true;\n      for (      String item : orders) {\n        if (!fieldInfoMap.containsKey(item)) {\n          containsAll=false;\n          break;\n        }\n      }\n    }\n else {\n      containsAll=false;\n    }\n  }\n  if (containsAll) {\n    for (    String item : orders) {\n      FieldInfo fieldInfo=fieldInfoMap.get(item);\n      fieldInfoList.add(fieldInfo);\n    }\n  }\n else {\n    for (    FieldInfo fieldInfo : fieldInfoMap.values()) {\n      fieldInfoList.add(fieldInfo);\n    }\n    if (sorted) {\n      Collections.sort(fieldInfoList);\n    }\n  }\n  return fieldInfoList;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 798,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8244,
        "startLineNumber" : 878,
        "startColumnNumber" : 4,
        "endLineNumber" : 1114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static List<FieldInfo> computeGetters(Class<?> clazz,Map<String,String> aliasMap,boolean sorted){\n  Map<String,FieldInfo> fieldInfoMap=new LinkedHashMap<String,FieldInfo>();\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (method.getReturnType().equals(Void.TYPE)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 0) {\n      continue;\n    }\n    if (method.getReturnType() == ClassLoader.class) {\n      continue;\n    }\n    if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.serialize()) {\n        continue;\n      }\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n        fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n        continue;\n      }\n    }\n    if (methodName.startsWith(\"get\")) {\n      if (methodName.length() < 4) {\n        continue;\n      }\n      if (methodName.equals(\"getClass\")) {\n        continue;\n      }\n      char c3=methodName.charAt(3);\n      String propertyName;\n      if (Character.isUpperCase(c3)) {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n else       if (c3 == '_') {\n        propertyName=methodName.substring(4);\n      }\n else       if (c3 == 'f') {\n        propertyName=methodName.substring(3);\n      }\n else {\n        continue;\n      }\n      boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n      if (ignore) {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field == null) {\n        field=ParserConfig.getField(clazz,methodName.substring(3));\n      }\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n    if (methodName.startsWith(\"is\")) {\n      if (methodName.length() < 3) {\n        continue;\n      }\n      char c2=methodName.charAt(2);\n      String propertyName;\n      if (Character.isUpperCase(c2)) {\n        propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n      }\n else       if (c2 == '_') {\n        propertyName=methodName.substring(3);\n      }\n else       if (c2 == 'f') {\n        propertyName=methodName.substring(2);\n      }\n else {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    String propertyName=field.getName();\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    if (!fieldInfoMap.containsKey(propertyName)) {\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field));\n    }\n  }\n  List<FieldInfo> fieldInfoList=new ArrayList<FieldInfo>();\n  boolean containsAll=false;\n  String[] orders=null;\n  JSONType annotation=clazz.getAnnotation(JSONType.class);\n  if (annotation != null) {\n    orders=annotation.orders();\n    if (orders != null && orders.length == fieldInfoMap.size()) {\n      containsAll=true;\n      for (      String item : orders) {\n        if (!fieldInfoMap.containsKey(item)) {\n          containsAll=false;\n          break;\n        }\n      }\n    }\n else {\n      containsAll=false;\n    }\n  }\n  if (containsAll) {\n    for (    String item : orders) {\n      FieldInfo fieldInfo=fieldInfoMap.get(item);\n      fieldInfoList.add(fieldInfo);\n    }\n  }\n else {\n    for (    FieldInfo fieldInfo : fieldInfoMap.values()) {\n      fieldInfoList.add(fieldInfo);\n    }\n    if (sorted) {\n      Collections.sort(fieldInfoList);\n    }\n  }\n  return fieldInfoList;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 825,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 1064,
        "startColumnNumber" : 16,
        "endLineNumber" : 1064,
        "endColumnNumber" : 32
      },
      "nodeContext" : "aliasMap != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 1066,
      "startColumnNumber" : 36,
      "endLineNumber" : 1066,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 1066,
        "startColumnNumber" : 20,
        "endLineNumber" : 1066,
        "endColumnNumber" : 40
      },
      "nodeContext" : "propertyName == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 1066,
        "startColumnNumber" : 16,
        "endLineNumber" : 1068,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (propertyName == null) {\n  continue;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 171,
        "startLineNumber" : 1064,
        "startColumnNumber" : 34,
        "endLineNumber" : 1069,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  propertyName=aliasMap.get(propertyName);\n  if (propertyName == null) {\n    continue;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 193,
        "startLineNumber" : 1064,
        "startColumnNumber" : 12,
        "endLineNumber" : 1069,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (aliasMap != null) {\n  propertyName=aliasMap.get(propertyName);\n  if (propertyName == null) {\n    continue;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 930,
        "startLineNumber" : 1046,
        "startColumnNumber" : 46,
        "endLineNumber" : 1074,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (Modifier.isStatic(field.getModifiers())) {\n    continue;\n  }\n  JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n  String propertyName=field.getName();\n  if (fieldAnnotation != null) {\n    if (!fieldAnnotation.serialize()) {\n      continue;\n    }\n    if (fieldAnnotation.name().length() != 0) {\n      propertyName=fieldAnnotation.name();\n    }\n  }\n  if (aliasMap != null) {\n    propertyName=aliasMap.get(propertyName);\n    if (propertyName == null) {\n      continue;\n    }\n  }\n  if (!fieldInfoMap.containsKey(propertyName)) {\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 92,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 968,
        "startLineNumber" : 1046,
        "startColumnNumber" : 8,
        "endLineNumber" : 1074,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Field field : clazz.getFields()) {\n  if (Modifier.isStatic(field.getModifiers())) {\n    continue;\n  }\n  JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n  String propertyName=field.getName();\n  if (fieldAnnotation != null) {\n    if (!fieldAnnotation.serialize()) {\n      continue;\n    }\n    if (fieldAnnotation.name().length() != 0) {\n      propertyName=fieldAnnotation.name();\n    }\n  }\n  if (aliasMap != null) {\n    propertyName=aliasMap.get(propertyName);\n    if (propertyName == null) {\n      continue;\n    }\n  }\n  if (!fieldInfoMap.containsKey(propertyName)) {\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field));\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 100,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8137,
        "startLineNumber" : 878,
        "startColumnNumber" : 111,
        "endLineNumber" : 1114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,FieldInfo> fieldInfoMap=new LinkedHashMap<String,FieldInfo>();\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (method.getReturnType().equals(Void.TYPE)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 0) {\n      continue;\n    }\n    if (method.getReturnType() == ClassLoader.class) {\n      continue;\n    }\n    if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.serialize()) {\n        continue;\n      }\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n        fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n        continue;\n      }\n    }\n    if (methodName.startsWith(\"get\")) {\n      if (methodName.length() < 4) {\n        continue;\n      }\n      if (methodName.equals(\"getClass\")) {\n        continue;\n      }\n      char c3=methodName.charAt(3);\n      String propertyName;\n      if (Character.isUpperCase(c3)) {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n else       if (c3 == '_') {\n        propertyName=methodName.substring(4);\n      }\n else       if (c3 == 'f') {\n        propertyName=methodName.substring(3);\n      }\n else {\n        continue;\n      }\n      boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n      if (ignore) {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field == null) {\n        field=ParserConfig.getField(clazz,methodName.substring(3));\n      }\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n    if (methodName.startsWith(\"is\")) {\n      if (methodName.length() < 3) {\n        continue;\n      }\n      char c2=methodName.charAt(2);\n      String propertyName;\n      if (Character.isUpperCase(c2)) {\n        propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n      }\n else       if (c2 == '_') {\n        propertyName=methodName.substring(3);\n      }\n else       if (c2 == 'f') {\n        propertyName=methodName.substring(2);\n      }\n else {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    String propertyName=field.getName();\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    if (!fieldInfoMap.containsKey(propertyName)) {\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field));\n    }\n  }\n  List<FieldInfo> fieldInfoList=new ArrayList<FieldInfo>();\n  boolean containsAll=false;\n  String[] orders=null;\n  JSONType annotation=clazz.getAnnotation(JSONType.class);\n  if (annotation != null) {\n    orders=annotation.orders();\n    if (orders != null && orders.length == fieldInfoMap.size()) {\n      containsAll=true;\n      for (      String item : orders) {\n        if (!fieldInfoMap.containsKey(item)) {\n          containsAll=false;\n          break;\n        }\n      }\n    }\n else {\n      containsAll=false;\n    }\n  }\n  if (containsAll) {\n    for (    String item : orders) {\n      FieldInfo fieldInfo=fieldInfoMap.get(item);\n      fieldInfoList.add(fieldInfo);\n    }\n  }\n else {\n    for (    FieldInfo fieldInfo : fieldInfoMap.values()) {\n      fieldInfoList.add(fieldInfo);\n    }\n    if (sorted) {\n      Collections.sort(fieldInfoList);\n    }\n  }\n  return fieldInfoList;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 798,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8244,
        "startLineNumber" : 878,
        "startColumnNumber" : 4,
        "endLineNumber" : 1114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static List<FieldInfo> computeGetters(Class<?> clazz,Map<String,String> aliasMap,boolean sorted){\n  Map<String,FieldInfo> fieldInfoMap=new LinkedHashMap<String,FieldInfo>();\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (method.getReturnType().equals(Void.TYPE)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 0) {\n      continue;\n    }\n    if (method.getReturnType() == ClassLoader.class) {\n      continue;\n    }\n    if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.serialize()) {\n        continue;\n      }\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n        fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n        continue;\n      }\n    }\n    if (methodName.startsWith(\"get\")) {\n      if (methodName.length() < 4) {\n        continue;\n      }\n      if (methodName.equals(\"getClass\")) {\n        continue;\n      }\n      char c3=methodName.charAt(3);\n      String propertyName;\n      if (Character.isUpperCase(c3)) {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n else       if (c3 == '_') {\n        propertyName=methodName.substring(4);\n      }\n else       if (c3 == 'f') {\n        propertyName=methodName.substring(3);\n      }\n else {\n        continue;\n      }\n      boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n      if (ignore) {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field == null) {\n        field=ParserConfig.getField(clazz,methodName.substring(3));\n      }\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n    if (methodName.startsWith(\"is\")) {\n      if (methodName.length() < 3) {\n        continue;\n      }\n      char c2=methodName.charAt(2);\n      String propertyName;\n      if (Character.isUpperCase(c2)) {\n        propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n      }\n else       if (c2 == '_') {\n        propertyName=methodName.substring(3);\n      }\n else       if (c2 == 'f') {\n        propertyName=methodName.substring(2);\n      }\n else {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    String propertyName=field.getName();\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    if (!fieldInfoMap.containsKey(propertyName)) {\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field));\n    }\n  }\n  List<FieldInfo> fieldInfoList=new ArrayList<FieldInfo>();\n  boolean containsAll=false;\n  String[] orders=null;\n  JSONType annotation=clazz.getAnnotation(JSONType.class);\n  if (annotation != null) {\n    orders=annotation.orders();\n    if (orders != null && orders.length == fieldInfoMap.size()) {\n      containsAll=true;\n      for (      String item : orders) {\n        if (!fieldInfoMap.containsKey(item)) {\n          containsAll=false;\n          break;\n        }\n      }\n    }\n else {\n      containsAll=false;\n    }\n  }\n  if (containsAll) {\n    for (    String item : orders) {\n      FieldInfo fieldInfo=fieldInfoMap.get(item);\n      fieldInfoList.add(fieldInfo);\n    }\n  }\n else {\n    for (    FieldInfo fieldInfo : fieldInfoMap.values()) {\n      fieldInfoList.add(fieldInfo);\n    }\n    if (sorted) {\n      Collections.sort(fieldInfoList);\n    }\n  }\n  return fieldInfoList;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 825,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 1066,
        "startColumnNumber" : 20,
        "endLineNumber" : 1066,
        "endColumnNumber" : 40
      },
      "nodeContext" : "propertyName == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 1072,
      "startColumnNumber" : 75,
      "endLineNumber" : 1072,
      "endColumnNumber" : 79
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 1072,
        "startColumnNumber" : 47,
        "endLineNumber" : 1072,
        "endColumnNumber" : 87
      },
      "nodeContext" : "new FieldInfo(propertyName,null,field)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 1072,
        "startColumnNumber" : 16,
        "endLineNumber" : 1072,
        "endColumnNumber" : 88
      },
      "nodeContext" : "fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 1072,
        "startColumnNumber" : 16,
        "endLineNumber" : 1072,
        "endColumnNumber" : 89
      },
      "nodeContext" : "fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 107,
        "startLineNumber" : 1071,
        "startColumnNumber" : 57,
        "endLineNumber" : 1073,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 152,
        "startLineNumber" : 1071,
        "startColumnNumber" : 12,
        "endLineNumber" : 1073,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (!fieldInfoMap.containsKey(propertyName)) {\n  fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 18,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 930,
        "startLineNumber" : 1046,
        "startColumnNumber" : 46,
        "endLineNumber" : 1074,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (Modifier.isStatic(field.getModifiers())) {\n    continue;\n  }\n  JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n  String propertyName=field.getName();\n  if (fieldAnnotation != null) {\n    if (!fieldAnnotation.serialize()) {\n      continue;\n    }\n    if (fieldAnnotation.name().length() != 0) {\n      propertyName=fieldAnnotation.name();\n    }\n  }\n  if (aliasMap != null) {\n    propertyName=aliasMap.get(propertyName);\n    if (propertyName == null) {\n      continue;\n    }\n  }\n  if (!fieldInfoMap.containsKey(propertyName)) {\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 92,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 968,
        "startLineNumber" : 1046,
        "startColumnNumber" : 8,
        "endLineNumber" : 1074,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Field field : clazz.getFields()) {\n  if (Modifier.isStatic(field.getModifiers())) {\n    continue;\n  }\n  JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n  String propertyName=field.getName();\n  if (fieldAnnotation != null) {\n    if (!fieldAnnotation.serialize()) {\n      continue;\n    }\n    if (fieldAnnotation.name().length() != 0) {\n      propertyName=fieldAnnotation.name();\n    }\n  }\n  if (aliasMap != null) {\n    propertyName=aliasMap.get(propertyName);\n    if (propertyName == null) {\n      continue;\n    }\n  }\n  if (!fieldInfoMap.containsKey(propertyName)) {\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field));\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 100,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8137,
        "startLineNumber" : 878,
        "startColumnNumber" : 111,
        "endLineNumber" : 1114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,FieldInfo> fieldInfoMap=new LinkedHashMap<String,FieldInfo>();\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (method.getReturnType().equals(Void.TYPE)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 0) {\n      continue;\n    }\n    if (method.getReturnType() == ClassLoader.class) {\n      continue;\n    }\n    if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.serialize()) {\n        continue;\n      }\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n        fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n        continue;\n      }\n    }\n    if (methodName.startsWith(\"get\")) {\n      if (methodName.length() < 4) {\n        continue;\n      }\n      if (methodName.equals(\"getClass\")) {\n        continue;\n      }\n      char c3=methodName.charAt(3);\n      String propertyName;\n      if (Character.isUpperCase(c3)) {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n else       if (c3 == '_') {\n        propertyName=methodName.substring(4);\n      }\n else       if (c3 == 'f') {\n        propertyName=methodName.substring(3);\n      }\n else {\n        continue;\n      }\n      boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n      if (ignore) {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field == null) {\n        field=ParserConfig.getField(clazz,methodName.substring(3));\n      }\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n    if (methodName.startsWith(\"is\")) {\n      if (methodName.length() < 3) {\n        continue;\n      }\n      char c2=methodName.charAt(2);\n      String propertyName;\n      if (Character.isUpperCase(c2)) {\n        propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n      }\n else       if (c2 == '_') {\n        propertyName=methodName.substring(3);\n      }\n else       if (c2 == 'f') {\n        propertyName=methodName.substring(2);\n      }\n else {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    String propertyName=field.getName();\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    if (!fieldInfoMap.containsKey(propertyName)) {\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field));\n    }\n  }\n  List<FieldInfo> fieldInfoList=new ArrayList<FieldInfo>();\n  boolean containsAll=false;\n  String[] orders=null;\n  JSONType annotation=clazz.getAnnotation(JSONType.class);\n  if (annotation != null) {\n    orders=annotation.orders();\n    if (orders != null && orders.length == fieldInfoMap.size()) {\n      containsAll=true;\n      for (      String item : orders) {\n        if (!fieldInfoMap.containsKey(item)) {\n          containsAll=false;\n          break;\n        }\n      }\n    }\n else {\n      containsAll=false;\n    }\n  }\n  if (containsAll) {\n    for (    String item : orders) {\n      FieldInfo fieldInfo=fieldInfoMap.get(item);\n      fieldInfoList.add(fieldInfo);\n    }\n  }\n else {\n    for (    FieldInfo fieldInfo : fieldInfoMap.values()) {\n      fieldInfoList.add(fieldInfo);\n    }\n    if (sorted) {\n      Collections.sort(fieldInfoList);\n    }\n  }\n  return fieldInfoList;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 798,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8244,
        "startLineNumber" : 878,
        "startColumnNumber" : 4,
        "endLineNumber" : 1114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static List<FieldInfo> computeGetters(Class<?> clazz,Map<String,String> aliasMap,boolean sorted){\n  Map<String,FieldInfo> fieldInfoMap=new LinkedHashMap<String,FieldInfo>();\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (method.getReturnType().equals(Void.TYPE)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 0) {\n      continue;\n    }\n    if (method.getReturnType() == ClassLoader.class) {\n      continue;\n    }\n    if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.serialize()) {\n        continue;\n      }\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n        fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n        continue;\n      }\n    }\n    if (methodName.startsWith(\"get\")) {\n      if (methodName.length() < 4) {\n        continue;\n      }\n      if (methodName.equals(\"getClass\")) {\n        continue;\n      }\n      char c3=methodName.charAt(3);\n      String propertyName;\n      if (Character.isUpperCase(c3)) {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n else       if (c3 == '_') {\n        propertyName=methodName.substring(4);\n      }\n else       if (c3 == 'f') {\n        propertyName=methodName.substring(3);\n      }\n else {\n        continue;\n      }\n      boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n      if (ignore) {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field == null) {\n        field=ParserConfig.getField(clazz,methodName.substring(3));\n      }\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n    if (methodName.startsWith(\"is\")) {\n      if (methodName.length() < 3) {\n        continue;\n      }\n      char c2=methodName.charAt(2);\n      String propertyName;\n      if (Character.isUpperCase(c2)) {\n        propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n      }\n else       if (c2 == '_') {\n        propertyName=methodName.substring(3);\n      }\n else       if (c2 == 'f') {\n        propertyName=methodName.substring(2);\n      }\n else {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    String propertyName=field.getName();\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    if (!fieldInfoMap.containsKey(propertyName)) {\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field));\n    }\n  }\n  List<FieldInfo> fieldInfoList=new ArrayList<FieldInfo>();\n  boolean containsAll=false;\n  String[] orders=null;\n  JSONType annotation=clazz.getAnnotation(JSONType.class);\n  if (annotation != null) {\n    orders=annotation.orders();\n    if (orders != null && orders.length == fieldInfoMap.size()) {\n      containsAll=true;\n      for (      String item : orders) {\n        if (!fieldInfoMap.containsKey(item)) {\n          containsAll=false;\n          break;\n        }\n      }\n    }\n else {\n      containsAll=false;\n    }\n  }\n  if (containsAll) {\n    for (    String item : orders) {\n      FieldInfo fieldInfo=fieldInfoMap.get(item);\n      fieldInfoList.add(fieldInfo);\n    }\n  }\n else {\n    for (    FieldInfo fieldInfo : fieldInfoMap.values()) {\n      fieldInfoList.add(fieldInfo);\n    }\n    if (sorted) {\n      Collections.sort(fieldInfoList);\n    }\n  }\n  return fieldInfoList;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 825,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 1072,
        "startColumnNumber" : 16,
        "endLineNumber" : 1072,
        "endColumnNumber" : 89
      },
      "nodeContext" : "fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 1079,
      "startColumnNumber" : 26,
      "endLineNumber" : 1079,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 1079,
        "startColumnNumber" : 17,
        "endLineNumber" : 1079,
        "endColumnNumber" : 30
      },
      "nodeContext" : "orders=null",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 1079,
        "startColumnNumber" : 8,
        "endLineNumber" : 1079,
        "endColumnNumber" : 31
      },
      "nodeContext" : "String[] orders=null;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8137,
        "startLineNumber" : 878,
        "startColumnNumber" : 111,
        "endLineNumber" : 1114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,FieldInfo> fieldInfoMap=new LinkedHashMap<String,FieldInfo>();\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (method.getReturnType().equals(Void.TYPE)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 0) {\n      continue;\n    }\n    if (method.getReturnType() == ClassLoader.class) {\n      continue;\n    }\n    if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.serialize()) {\n        continue;\n      }\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n        fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n        continue;\n      }\n    }\n    if (methodName.startsWith(\"get\")) {\n      if (methodName.length() < 4) {\n        continue;\n      }\n      if (methodName.equals(\"getClass\")) {\n        continue;\n      }\n      char c3=methodName.charAt(3);\n      String propertyName;\n      if (Character.isUpperCase(c3)) {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n else       if (c3 == '_') {\n        propertyName=methodName.substring(4);\n      }\n else       if (c3 == 'f') {\n        propertyName=methodName.substring(3);\n      }\n else {\n        continue;\n      }\n      boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n      if (ignore) {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field == null) {\n        field=ParserConfig.getField(clazz,methodName.substring(3));\n      }\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n    if (methodName.startsWith(\"is\")) {\n      if (methodName.length() < 3) {\n        continue;\n      }\n      char c2=methodName.charAt(2);\n      String propertyName;\n      if (Character.isUpperCase(c2)) {\n        propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n      }\n else       if (c2 == '_') {\n        propertyName=methodName.substring(3);\n      }\n else       if (c2 == 'f') {\n        propertyName=methodName.substring(2);\n      }\n else {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    String propertyName=field.getName();\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    if (!fieldInfoMap.containsKey(propertyName)) {\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field));\n    }\n  }\n  List<FieldInfo> fieldInfoList=new ArrayList<FieldInfo>();\n  boolean containsAll=false;\n  String[] orders=null;\n  JSONType annotation=clazz.getAnnotation(JSONType.class);\n  if (annotation != null) {\n    orders=annotation.orders();\n    if (orders != null && orders.length == fieldInfoMap.size()) {\n      containsAll=true;\n      for (      String item : orders) {\n        if (!fieldInfoMap.containsKey(item)) {\n          containsAll=false;\n          break;\n        }\n      }\n    }\n else {\n      containsAll=false;\n    }\n  }\n  if (containsAll) {\n    for (    String item : orders) {\n      FieldInfo fieldInfo=fieldInfoMap.get(item);\n      fieldInfoList.add(fieldInfo);\n    }\n  }\n else {\n    for (    FieldInfo fieldInfo : fieldInfoMap.values()) {\n      fieldInfoList.add(fieldInfo);\n    }\n    if (sorted) {\n      Collections.sort(fieldInfoList);\n    }\n  }\n  return fieldInfoList;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 798,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8244,
        "startLineNumber" : 878,
        "startColumnNumber" : 4,
        "endLineNumber" : 1114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static List<FieldInfo> computeGetters(Class<?> clazz,Map<String,String> aliasMap,boolean sorted){\n  Map<String,FieldInfo> fieldInfoMap=new LinkedHashMap<String,FieldInfo>();\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (method.getReturnType().equals(Void.TYPE)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 0) {\n      continue;\n    }\n    if (method.getReturnType() == ClassLoader.class) {\n      continue;\n    }\n    if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.serialize()) {\n        continue;\n      }\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n        fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n        continue;\n      }\n    }\n    if (methodName.startsWith(\"get\")) {\n      if (methodName.length() < 4) {\n        continue;\n      }\n      if (methodName.equals(\"getClass\")) {\n        continue;\n      }\n      char c3=methodName.charAt(3);\n      String propertyName;\n      if (Character.isUpperCase(c3)) {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n else       if (c3 == '_') {\n        propertyName=methodName.substring(4);\n      }\n else       if (c3 == 'f') {\n        propertyName=methodName.substring(3);\n      }\n else {\n        continue;\n      }\n      boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n      if (ignore) {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field == null) {\n        field=ParserConfig.getField(clazz,methodName.substring(3));\n      }\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n    if (methodName.startsWith(\"is\")) {\n      if (methodName.length() < 3) {\n        continue;\n      }\n      char c2=methodName.charAt(2);\n      String propertyName;\n      if (Character.isUpperCase(c2)) {\n        propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n      }\n else       if (c2 == '_') {\n        propertyName=methodName.substring(3);\n      }\n else       if (c2 == 'f') {\n        propertyName=methodName.substring(2);\n      }\n else {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    String propertyName=field.getName();\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    if (!fieldInfoMap.containsKey(propertyName)) {\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field));\n    }\n  }\n  List<FieldInfo> fieldInfoList=new ArrayList<FieldInfo>();\n  boolean containsAll=false;\n  String[] orders=null;\n  JSONType annotation=clazz.getAnnotation(JSONType.class);\n  if (annotation != null) {\n    orders=annotation.orders();\n    if (orders != null && orders.length == fieldInfoMap.size()) {\n      containsAll=true;\n      for (      String item : orders) {\n        if (!fieldInfoMap.containsKey(item)) {\n          containsAll=false;\n          break;\n        }\n      }\n    }\n else {\n      containsAll=false;\n    }\n  }\n  if (containsAll) {\n    for (    String item : orders) {\n      FieldInfo fieldInfo=fieldInfoMap.get(item);\n      fieldInfoList.add(fieldInfo);\n    }\n  }\n else {\n    for (    FieldInfo fieldInfo : fieldInfoMap.values()) {\n      fieldInfoList.add(fieldInfo);\n    }\n    if (sorted) {\n      Collections.sort(fieldInfoList);\n    }\n  }\n  return fieldInfoList;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 825,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 1079,
        "startColumnNumber" : 8,
        "endLineNumber" : 1079,
        "endColumnNumber" : 31
      },
      "nodeContext" : "String[] orders=null;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 1082,
      "startColumnNumber" : 26,
      "endLineNumber" : 1082,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 1082,
        "startColumnNumber" : 12,
        "endLineNumber" : 1082,
        "endColumnNumber" : 30
      },
      "nodeContext" : "annotation != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 494,
        "startLineNumber" : 1082,
        "startColumnNumber" : 8,
        "endLineNumber" : 1096,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (annotation != null) {\n  orders=annotation.orders();\n  if (orders != null && orders.length == fieldInfoMap.size()) {\n    containsAll=true;\n    for (    String item : orders) {\n      if (!fieldInfoMap.containsKey(item)) {\n        containsAll=false;\n        break;\n      }\n    }\n  }\n else {\n    containsAll=false;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 52,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8137,
        "startLineNumber" : 878,
        "startColumnNumber" : 111,
        "endLineNumber" : 1114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,FieldInfo> fieldInfoMap=new LinkedHashMap<String,FieldInfo>();\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (method.getReturnType().equals(Void.TYPE)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 0) {\n      continue;\n    }\n    if (method.getReturnType() == ClassLoader.class) {\n      continue;\n    }\n    if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.serialize()) {\n        continue;\n      }\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n        fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n        continue;\n      }\n    }\n    if (methodName.startsWith(\"get\")) {\n      if (methodName.length() < 4) {\n        continue;\n      }\n      if (methodName.equals(\"getClass\")) {\n        continue;\n      }\n      char c3=methodName.charAt(3);\n      String propertyName;\n      if (Character.isUpperCase(c3)) {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n else       if (c3 == '_') {\n        propertyName=methodName.substring(4);\n      }\n else       if (c3 == 'f') {\n        propertyName=methodName.substring(3);\n      }\n else {\n        continue;\n      }\n      boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n      if (ignore) {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field == null) {\n        field=ParserConfig.getField(clazz,methodName.substring(3));\n      }\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n    if (methodName.startsWith(\"is\")) {\n      if (methodName.length() < 3) {\n        continue;\n      }\n      char c2=methodName.charAt(2);\n      String propertyName;\n      if (Character.isUpperCase(c2)) {\n        propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n      }\n else       if (c2 == '_') {\n        propertyName=methodName.substring(3);\n      }\n else       if (c2 == 'f') {\n        propertyName=methodName.substring(2);\n      }\n else {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    String propertyName=field.getName();\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    if (!fieldInfoMap.containsKey(propertyName)) {\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field));\n    }\n  }\n  List<FieldInfo> fieldInfoList=new ArrayList<FieldInfo>();\n  boolean containsAll=false;\n  String[] orders=null;\n  JSONType annotation=clazz.getAnnotation(JSONType.class);\n  if (annotation != null) {\n    orders=annotation.orders();\n    if (orders != null && orders.length == fieldInfoMap.size()) {\n      containsAll=true;\n      for (      String item : orders) {\n        if (!fieldInfoMap.containsKey(item)) {\n          containsAll=false;\n          break;\n        }\n      }\n    }\n else {\n      containsAll=false;\n    }\n  }\n  if (containsAll) {\n    for (    String item : orders) {\n      FieldInfo fieldInfo=fieldInfoMap.get(item);\n      fieldInfoList.add(fieldInfo);\n    }\n  }\n else {\n    for (    FieldInfo fieldInfo : fieldInfoMap.values()) {\n      fieldInfoList.add(fieldInfo);\n    }\n    if (sorted) {\n      Collections.sort(fieldInfoList);\n    }\n  }\n  return fieldInfoList;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 798,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8244,
        "startLineNumber" : 878,
        "startColumnNumber" : 4,
        "endLineNumber" : 1114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static List<FieldInfo> computeGetters(Class<?> clazz,Map<String,String> aliasMap,boolean sorted){\n  Map<String,FieldInfo> fieldInfoMap=new LinkedHashMap<String,FieldInfo>();\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (method.getReturnType().equals(Void.TYPE)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 0) {\n      continue;\n    }\n    if (method.getReturnType() == ClassLoader.class) {\n      continue;\n    }\n    if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.serialize()) {\n        continue;\n      }\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n        fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n        continue;\n      }\n    }\n    if (methodName.startsWith(\"get\")) {\n      if (methodName.length() < 4) {\n        continue;\n      }\n      if (methodName.equals(\"getClass\")) {\n        continue;\n      }\n      char c3=methodName.charAt(3);\n      String propertyName;\n      if (Character.isUpperCase(c3)) {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n else       if (c3 == '_') {\n        propertyName=methodName.substring(4);\n      }\n else       if (c3 == 'f') {\n        propertyName=methodName.substring(3);\n      }\n else {\n        continue;\n      }\n      boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n      if (ignore) {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field == null) {\n        field=ParserConfig.getField(clazz,methodName.substring(3));\n      }\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n    if (methodName.startsWith(\"is\")) {\n      if (methodName.length() < 3) {\n        continue;\n      }\n      char c2=methodName.charAt(2);\n      String propertyName;\n      if (Character.isUpperCase(c2)) {\n        propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n      }\n else       if (c2 == '_') {\n        propertyName=methodName.substring(3);\n      }\n else       if (c2 == 'f') {\n        propertyName=methodName.substring(2);\n      }\n else {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    String propertyName=field.getName();\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    if (!fieldInfoMap.containsKey(propertyName)) {\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field));\n    }\n  }\n  List<FieldInfo> fieldInfoList=new ArrayList<FieldInfo>();\n  boolean containsAll=false;\n  String[] orders=null;\n  JSONType annotation=clazz.getAnnotation(JSONType.class);\n  if (annotation != null) {\n    orders=annotation.orders();\n    if (orders != null && orders.length == fieldInfoMap.size()) {\n      containsAll=true;\n      for (      String item : orders) {\n        if (!fieldInfoMap.containsKey(item)) {\n          containsAll=false;\n          break;\n        }\n      }\n    }\n else {\n      containsAll=false;\n    }\n  }\n  if (containsAll) {\n    for (    String item : orders) {\n      FieldInfo fieldInfo=fieldInfoMap.get(item);\n      fieldInfoList.add(fieldInfo);\n    }\n  }\n else {\n    for (    FieldInfo fieldInfo : fieldInfoMap.values()) {\n      fieldInfoList.add(fieldInfo);\n    }\n    if (sorted) {\n      Collections.sort(fieldInfoList);\n    }\n  }\n  return fieldInfoList;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 825,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 1082,
        "startColumnNumber" : 12,
        "endLineNumber" : 1082,
        "endColumnNumber" : 30
      },
      "nodeContext" : "annotation != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 1085,
      "startColumnNumber" : 26,
      "endLineNumber" : 1085,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 1085,
        "startColumnNumber" : 16,
        "endLineNumber" : 1085,
        "endColumnNumber" : 30
      },
      "nodeContext" : "orders != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 1085,
        "startColumnNumber" : 16,
        "endLineNumber" : 1085,
        "endColumnNumber" : 70
      },
      "nodeContext" : "orders != null && orders.length == fieldInfoMap.size()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 399,
        "startLineNumber" : 1085,
        "startColumnNumber" : 12,
        "endLineNumber" : 1095,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (orders != null && orders.length == fieldInfoMap.size()) {\n  containsAll=true;\n  for (  String item : orders) {\n    if (!fieldInfoMap.containsKey(item)) {\n      containsAll=false;\n      break;\n    }\n  }\n}\n else {\n  containsAll=false;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 41,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 470,
        "startLineNumber" : 1082,
        "startColumnNumber" : 32,
        "endLineNumber" : 1096,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  orders=annotation.orders();\n  if (orders != null && orders.length == fieldInfoMap.size()) {\n    containsAll=true;\n    for (    String item : orders) {\n      if (!fieldInfoMap.containsKey(item)) {\n        containsAll=false;\n        break;\n      }\n    }\n  }\n else {\n    containsAll=false;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 48,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 494,
        "startLineNumber" : 1082,
        "startColumnNumber" : 8,
        "endLineNumber" : 1096,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (annotation != null) {\n  orders=annotation.orders();\n  if (orders != null && orders.length == fieldInfoMap.size()) {\n    containsAll=true;\n    for (    String item : orders) {\n      if (!fieldInfoMap.containsKey(item)) {\n        containsAll=false;\n        break;\n      }\n    }\n  }\n else {\n    containsAll=false;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 52,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8137,
        "startLineNumber" : 878,
        "startColumnNumber" : 111,
        "endLineNumber" : 1114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,FieldInfo> fieldInfoMap=new LinkedHashMap<String,FieldInfo>();\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (method.getReturnType().equals(Void.TYPE)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 0) {\n      continue;\n    }\n    if (method.getReturnType() == ClassLoader.class) {\n      continue;\n    }\n    if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.serialize()) {\n        continue;\n      }\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n        fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n        continue;\n      }\n    }\n    if (methodName.startsWith(\"get\")) {\n      if (methodName.length() < 4) {\n        continue;\n      }\n      if (methodName.equals(\"getClass\")) {\n        continue;\n      }\n      char c3=methodName.charAt(3);\n      String propertyName;\n      if (Character.isUpperCase(c3)) {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n else       if (c3 == '_') {\n        propertyName=methodName.substring(4);\n      }\n else       if (c3 == 'f') {\n        propertyName=methodName.substring(3);\n      }\n else {\n        continue;\n      }\n      boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n      if (ignore) {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field == null) {\n        field=ParserConfig.getField(clazz,methodName.substring(3));\n      }\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n    if (methodName.startsWith(\"is\")) {\n      if (methodName.length() < 3) {\n        continue;\n      }\n      char c2=methodName.charAt(2);\n      String propertyName;\n      if (Character.isUpperCase(c2)) {\n        propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n      }\n else       if (c2 == '_') {\n        propertyName=methodName.substring(3);\n      }\n else       if (c2 == 'f') {\n        propertyName=methodName.substring(2);\n      }\n else {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    String propertyName=field.getName();\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    if (!fieldInfoMap.containsKey(propertyName)) {\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field));\n    }\n  }\n  List<FieldInfo> fieldInfoList=new ArrayList<FieldInfo>();\n  boolean containsAll=false;\n  String[] orders=null;\n  JSONType annotation=clazz.getAnnotation(JSONType.class);\n  if (annotation != null) {\n    orders=annotation.orders();\n    if (orders != null && orders.length == fieldInfoMap.size()) {\n      containsAll=true;\n      for (      String item : orders) {\n        if (!fieldInfoMap.containsKey(item)) {\n          containsAll=false;\n          break;\n        }\n      }\n    }\n else {\n      containsAll=false;\n    }\n  }\n  if (containsAll) {\n    for (    String item : orders) {\n      FieldInfo fieldInfo=fieldInfoMap.get(item);\n      fieldInfoList.add(fieldInfo);\n    }\n  }\n else {\n    for (    FieldInfo fieldInfo : fieldInfoMap.values()) {\n      fieldInfoList.add(fieldInfo);\n    }\n    if (sorted) {\n      Collections.sort(fieldInfoList);\n    }\n  }\n  return fieldInfoList;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 798,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8244,
        "startLineNumber" : 878,
        "startColumnNumber" : 4,
        "endLineNumber" : 1114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static List<FieldInfo> computeGetters(Class<?> clazz,Map<String,String> aliasMap,boolean sorted){\n  Map<String,FieldInfo> fieldInfoMap=new LinkedHashMap<String,FieldInfo>();\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (method.getReturnType().equals(Void.TYPE)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 0) {\n      continue;\n    }\n    if (method.getReturnType() == ClassLoader.class) {\n      continue;\n    }\n    if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.serialize()) {\n        continue;\n      }\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n        fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n        continue;\n      }\n    }\n    if (methodName.startsWith(\"get\")) {\n      if (methodName.length() < 4) {\n        continue;\n      }\n      if (methodName.equals(\"getClass\")) {\n        continue;\n      }\n      char c3=methodName.charAt(3);\n      String propertyName;\n      if (Character.isUpperCase(c3)) {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n else       if (c3 == '_') {\n        propertyName=methodName.substring(4);\n      }\n else       if (c3 == 'f') {\n        propertyName=methodName.substring(3);\n      }\n else {\n        continue;\n      }\n      boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n      if (ignore) {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field == null) {\n        field=ParserConfig.getField(clazz,methodName.substring(3));\n      }\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n    if (methodName.startsWith(\"is\")) {\n      if (methodName.length() < 3) {\n        continue;\n      }\n      char c2=methodName.charAt(2);\n      String propertyName;\n      if (Character.isUpperCase(c2)) {\n        propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n      }\n else       if (c2 == '_') {\n        propertyName=methodName.substring(3);\n      }\n else       if (c2 == 'f') {\n        propertyName=methodName.substring(2);\n      }\n else {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    String propertyName=field.getName();\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    if (!fieldInfoMap.containsKey(propertyName)) {\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field));\n    }\n  }\n  List<FieldInfo> fieldInfoList=new ArrayList<FieldInfo>();\n  boolean containsAll=false;\n  String[] orders=null;\n  JSONType annotation=clazz.getAnnotation(JSONType.class);\n  if (annotation != null) {\n    orders=annotation.orders();\n    if (orders != null && orders.length == fieldInfoMap.size()) {\n      containsAll=true;\n      for (      String item : orders) {\n        if (!fieldInfoMap.containsKey(item)) {\n          containsAll=false;\n          break;\n        }\n      }\n    }\n else {\n      containsAll=false;\n    }\n  }\n  if (containsAll) {\n    for (    String item : orders) {\n      FieldInfo fieldInfo=fieldInfoMap.get(item);\n      fieldInfoList.add(fieldInfo);\n    }\n  }\n else {\n    for (    FieldInfo fieldInfo : fieldInfoMap.values()) {\n      fieldInfoList.add(fieldInfo);\n    }\n    if (sorted) {\n      Collections.sort(fieldInfoList);\n    }\n  }\n  return fieldInfoList;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 825,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 1085,
        "startColumnNumber" : 16,
        "endLineNumber" : 1085,
        "endColumnNumber" : 70
      },
      "nodeContext" : "orders != null && orders.length == fieldInfoMap.size()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "null"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 907,
    "startColumnNumber" : 30,
    "endLineNumber" : 907,
    "endColumnNumber" : 34
  }, {
    "charLength" : 4,
    "startLineNumber" : 911,
    "startColumnNumber" : 30,
    "endLineNumber" : 911,
    "endColumnNumber" : 34
  }, {
    "charLength" : 4,
    "startLineNumber" : 919,
    "startColumnNumber" : 36,
    "endLineNumber" : 919,
    "endColumnNumber" : 40
  }, {
    "charLength" : 4,
    "startLineNumber" : 921,
    "startColumnNumber" : 44,
    "endLineNumber" : 921,
    "endColumnNumber" : 48
  }, {
    "charLength" : 4,
    "startLineNumber" : 926,
    "startColumnNumber" : 87,
    "endLineNumber" : 926,
    "endColumnNumber" : 91
  }, {
    "charLength" : 4,
    "startLineNumber" : 960,
    "startColumnNumber" : 29,
    "endLineNumber" : 960,
    "endColumnNumber" : 33
  }, {
    "charLength" : 4,
    "startLineNumber" : 964,
    "startColumnNumber" : 29,
    "endLineNumber" : 964,
    "endColumnNumber" : 33
  }, {
    "charLength" : 4,
    "startLineNumber" : 967,
    "startColumnNumber" : 43,
    "endLineNumber" : 967,
    "endColumnNumber" : 47
  }, {
    "charLength" : 4,
    "startLineNumber" : 975,
    "startColumnNumber" : 44,
    "endLineNumber" : 975,
    "endColumnNumber" : 48
  }, {
    "charLength" : 4,
    "startLineNumber" : 977,
    "startColumnNumber" : 52,
    "endLineNumber" : 977,
    "endColumnNumber" : 56
  }, {
    "charLength" : 4,
    "startLineNumber" : 985,
    "startColumnNumber" : 32,
    "endLineNumber" : 985,
    "endColumnNumber" : 36
  }, {
    "charLength" : 4,
    "startLineNumber" : 987,
    "startColumnNumber" : 40,
    "endLineNumber" : 987,
    "endColumnNumber" : 44
  }, {
    "charLength" : 4,
    "startLineNumber" : 1014,
    "startColumnNumber" : 29,
    "endLineNumber" : 1014,
    "endColumnNumber" : 33
  }, {
    "charLength" : 4,
    "startLineNumber" : 1017,
    "startColumnNumber" : 43,
    "endLineNumber" : 1017,
    "endColumnNumber" : 47
  }, {
    "charLength" : 4,
    "startLineNumber" : 1025,
    "startColumnNumber" : 44,
    "endLineNumber" : 1025,
    "endColumnNumber" : 48
  }, {
    "charLength" : 4,
    "startLineNumber" : 1027,
    "startColumnNumber" : 52,
    "endLineNumber" : 1027,
    "endColumnNumber" : 56
  }, {
    "charLength" : 4,
    "startLineNumber" : 1035,
    "startColumnNumber" : 32,
    "endLineNumber" : 1035,
    "endColumnNumber" : 36
  }, {
    "charLength" : 4,
    "startLineNumber" : 1037,
    "startColumnNumber" : 40,
    "endLineNumber" : 1037,
    "endColumnNumber" : 44
  }, {
    "charLength" : 4,
    "startLineNumber" : 1054,
    "startColumnNumber" : 35,
    "endLineNumber" : 1054,
    "endColumnNumber" : 39
  }, {
    "charLength" : 4,
    "startLineNumber" : 1064,
    "startColumnNumber" : 28,
    "endLineNumber" : 1064,
    "endColumnNumber" : 32
  }, {
    "charLength" : 4,
    "startLineNumber" : 1066,
    "startColumnNumber" : 36,
    "endLineNumber" : 1066,
    "endColumnNumber" : 40
  }, {
    "charLength" : 4,
    "startLineNumber" : 1072,
    "startColumnNumber" : 75,
    "endLineNumber" : 1072,
    "endColumnNumber" : 79
  }, {
    "charLength" : 4,
    "startLineNumber" : 1079,
    "startColumnNumber" : 26,
    "endLineNumber" : 1079,
    "endColumnNumber" : 30
  }, {
    "charLength" : 4,
    "startLineNumber" : 1082,
    "startColumnNumber" : 26,
    "endLineNumber" : 1082,
    "endColumnNumber" : 30
  }, {
    "charLength" : 4,
    "startLineNumber" : 1085,
    "startColumnNumber" : 26,
    "endLineNumber" : 1085,
    "endColumnNumber" : 30
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 18,
    "layout" : 8
  }, {
    "firstKey" : 2,
    "secondKey" : 19,
    "layout" : 8
  }, {
    "firstKey" : 2,
    "secondKey" : 20,
    "layout" : 8
  }, {
    "firstKey" : 2,
    "secondKey" : 21,
    "layout" : 8
  }, {
    "firstKey" : 2,
    "secondKey" : 22,
    "layout" : 8
  }, {
    "firstKey" : 2,
    "secondKey" : 23,
    "layout" : 8
  }, {
    "firstKey" : 2,
    "secondKey" : 24,
    "layout" : 8
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 8
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 8
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 8
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 8
  }, {
    "firstKey" : 3,
    "secondKey" : 9,
    "layout" : 8
  }, {
    "firstKey" : 3,
    "secondKey" : 10,
    "layout" : 8
  }, {
    "firstKey" : 3,
    "secondKey" : 11,
    "layout" : 8
  }, {
    "firstKey" : 3,
    "secondKey" : 12,
    "layout" : 8
  }, {
    "firstKey" : 3,
    "secondKey" : 13,
    "layout" : 8
  }, {
    "firstKey" : 3,
    "secondKey" : 14,
    "layout" : 8
  }, {
    "firstKey" : 3,
    "secondKey" : 15,
    "layout" : 8
  }, {
    "firstKey" : 3,
    "secondKey" : 16,
    "layout" : 8
  }, {
    "firstKey" : 3,
    "secondKey" : 17,
    "layout" : 8
  }, {
    "firstKey" : 3,
    "secondKey" : 18,
    "layout" : 10
  }, {
    "firstKey" : 3,
    "secondKey" : 19,
    "layout" : 10
  }, {
    "firstKey" : 3,
    "secondKey" : 20,
    "layout" : 10
  }, {
    "firstKey" : 3,
    "secondKey" : 21,
    "layout" : 10
  }, {
    "firstKey" : 3,
    "secondKey" : 22,
    "layout" : 10
  }, {
    "firstKey" : 3,
    "secondKey" : 23,
    "layout" : 10
  }, {
    "firstKey" : 3,
    "secondKey" : 24,
    "layout" : 10
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 9,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 10,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 11,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 12,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 13,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 14,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 15,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 16,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 17,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 18,
    "layout" : 9
  }, {
    "firstKey" : 4,
    "secondKey" : 19,
    "layout" : 9
  }, {
    "firstKey" : 4,
    "secondKey" : 20,
    "layout" : 9
  }, {
    "firstKey" : 4,
    "secondKey" : 21,
    "layout" : 9
  }, {
    "firstKey" : 4,
    "secondKey" : 22,
    "layout" : 9
  }, {
    "firstKey" : 4,
    "secondKey" : 23,
    "layout" : 9
  }, {
    "firstKey" : 4,
    "secondKey" : 24,
    "layout" : 9
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 18,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 19,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 20,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 21,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 22,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 23,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 24,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 1
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 1
  }, {
    "firstKey" : 6,
    "secondKey" : 9,
    "layout" : 1
  }, {
    "firstKey" : 6,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 18,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 19,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 20,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 21,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 22,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 23,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 24,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 1
  }, {
    "firstKey" : 7,
    "secondKey" : 9,
    "layout" : 1
  }, {
    "firstKey" : 7,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 18,
    "layout" : 8
  }, {
    "firstKey" : 7,
    "secondKey" : 19,
    "layout" : 8
  }, {
    "firstKey" : 7,
    "secondKey" : 20,
    "layout" : 8
  }, {
    "firstKey" : 7,
    "secondKey" : 21,
    "layout" : 8
  }, {
    "firstKey" : 7,
    "secondKey" : 22,
    "layout" : 8
  }, {
    "firstKey" : 7,
    "secondKey" : 23,
    "layout" : 8
  }, {
    "firstKey" : 7,
    "secondKey" : 24,
    "layout" : 8
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 10
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 10
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 10
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 10
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 10
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 8
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 9,
    "layout" : 1
  }, {
    "firstKey" : 8,
    "secondKey" : 10,
    "layout" : 8
  }, {
    "firstKey" : 8,
    "secondKey" : 11,
    "layout" : 8
  }, {
    "firstKey" : 8,
    "secondKey" : 12,
    "layout" : 10
  }, {
    "firstKey" : 8,
    "secondKey" : 13,
    "layout" : 10
  }, {
    "firstKey" : 8,
    "secondKey" : 14,
    "layout" : 10
  }, {
    "firstKey" : 8,
    "secondKey" : 15,
    "layout" : 10
  }, {
    "firstKey" : 8,
    "secondKey" : 16,
    "layout" : 10
  }, {
    "firstKey" : 8,
    "secondKey" : 17,
    "layout" : 10
  }, {
    "firstKey" : 8,
    "secondKey" : 18,
    "layout" : 12
  }, {
    "firstKey" : 8,
    "secondKey" : 19,
    "layout" : 12
  }, {
    "firstKey" : 8,
    "secondKey" : 20,
    "layout" : 12
  }, {
    "firstKey" : 8,
    "secondKey" : 21,
    "layout" : 12
  }, {
    "firstKey" : 8,
    "secondKey" : 22,
    "layout" : 12
  }, {
    "firstKey" : 8,
    "secondKey" : 23,
    "layout" : 12
  }, {
    "firstKey" : 8,
    "secondKey" : 24,
    "layout" : 12
  }, {
    "firstKey" : 9,
    "secondKey" : 0,
    "layout" : 12
  }, {
    "firstKey" : 9,
    "secondKey" : 1,
    "layout" : 12
  }, {
    "firstKey" : 9,
    "secondKey" : 2,
    "layout" : 12
  }, {
    "firstKey" : 9,
    "secondKey" : 3,
    "layout" : 12
  }, {
    "firstKey" : 9,
    "secondKey" : 4,
    "layout" : 12
  }, {
    "firstKey" : 9,
    "secondKey" : 5,
    "layout" : 10
  }, {
    "firstKey" : 9,
    "secondKey" : 6,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 7,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 10,
    "layout" : 10
  }, {
    "firstKey" : 9,
    "secondKey" : 11,
    "layout" : 10
  }, {
    "firstKey" : 9,
    "secondKey" : 12,
    "layout" : 12
  }, {
    "firstKey" : 9,
    "secondKey" : 13,
    "layout" : 12
  }, {
    "firstKey" : 9,
    "secondKey" : 14,
    "layout" : 12
  }, {
    "firstKey" : 9,
    "secondKey" : 15,
    "layout" : 12
  }, {
    "firstKey" : 9,
    "secondKey" : 16,
    "layout" : 12
  }, {
    "firstKey" : 9,
    "secondKey" : 17,
    "layout" : 12
  }, {
    "firstKey" : 9,
    "secondKey" : 18,
    "layout" : 14
  }, {
    "firstKey" : 9,
    "secondKey" : 19,
    "layout" : 14
  }, {
    "firstKey" : 9,
    "secondKey" : 20,
    "layout" : 14
  }, {
    "firstKey" : 9,
    "secondKey" : 21,
    "layout" : 14
  }, {
    "firstKey" : 9,
    "secondKey" : 22,
    "layout" : 14
  }, {
    "firstKey" : 9,
    "secondKey" : 23,
    "layout" : 14
  }, {
    "firstKey" : 9,
    "secondKey" : 24,
    "layout" : 14
  }, {
    "firstKey" : 10,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 11,
    "layout" : 1
  }, {
    "firstKey" : 10,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 18,
    "layout" : 6
  }, {
    "firstKey" : 10,
    "secondKey" : 19,
    "layout" : 6
  }, {
    "firstKey" : 10,
    "secondKey" : 20,
    "layout" : 6
  }, {
    "firstKey" : 10,
    "secondKey" : 21,
    "layout" : 6
  }, {
    "firstKey" : 10,
    "secondKey" : 22,
    "layout" : 6
  }, {
    "firstKey" : 10,
    "secondKey" : 23,
    "layout" : 6
  }, {
    "firstKey" : 10,
    "secondKey" : 24,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 18,
    "layout" : 8
  }, {
    "firstKey" : 11,
    "secondKey" : 19,
    "layout" : 8
  }, {
    "firstKey" : 11,
    "secondKey" : 20,
    "layout" : 8
  }, {
    "firstKey" : 11,
    "secondKey" : 21,
    "layout" : 8
  }, {
    "firstKey" : 11,
    "secondKey" : 22,
    "layout" : 8
  }, {
    "firstKey" : 11,
    "secondKey" : 23,
    "layout" : 8
  }, {
    "firstKey" : 11,
    "secondKey" : 24,
    "layout" : 8
  }, {
    "firstKey" : 12,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 13,
    "layout" : 1
  }, {
    "firstKey" : 12,
    "secondKey" : 14,
    "layout" : 1
  }, {
    "firstKey" : 12,
    "secondKey" : 15,
    "layout" : 1
  }, {
    "firstKey" : 12,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 18,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 19,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 20,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 21,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 22,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 23,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 24,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 14,
    "layout" : 1
  }, {
    "firstKey" : 13,
    "secondKey" : 15,
    "layout" : 1
  }, {
    "firstKey" : 13,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 18,
    "layout" : 8
  }, {
    "firstKey" : 13,
    "secondKey" : 19,
    "layout" : 8
  }, {
    "firstKey" : 13,
    "secondKey" : 20,
    "layout" : 8
  }, {
    "firstKey" : 13,
    "secondKey" : 21,
    "layout" : 8
  }, {
    "firstKey" : 13,
    "secondKey" : 22,
    "layout" : 8
  }, {
    "firstKey" : 13,
    "secondKey" : 23,
    "layout" : 8
  }, {
    "firstKey" : 13,
    "secondKey" : 24,
    "layout" : 8
  }, {
    "firstKey" : 14,
    "secondKey" : 0,
    "layout" : 10
  }, {
    "firstKey" : 14,
    "secondKey" : 1,
    "layout" : 10
  }, {
    "firstKey" : 14,
    "secondKey" : 2,
    "layout" : 10
  }, {
    "firstKey" : 14,
    "secondKey" : 3,
    "layout" : 10
  }, {
    "firstKey" : 14,
    "secondKey" : 4,
    "layout" : 10
  }, {
    "firstKey" : 14,
    "secondKey" : 5,
    "layout" : 10
  }, {
    "firstKey" : 14,
    "secondKey" : 6,
    "layout" : 10
  }, {
    "firstKey" : 14,
    "secondKey" : 7,
    "layout" : 10
  }, {
    "firstKey" : 14,
    "secondKey" : 8,
    "layout" : 10
  }, {
    "firstKey" : 14,
    "secondKey" : 9,
    "layout" : 10
  }, {
    "firstKey" : 14,
    "secondKey" : 10,
    "layout" : 10
  }, {
    "firstKey" : 14,
    "secondKey" : 11,
    "layout" : 10
  }, {
    "firstKey" : 14,
    "secondKey" : 12,
    "layout" : 7
  }, {
    "firstKey" : 14,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 15,
    "layout" : 1
  }, {
    "firstKey" : 14,
    "secondKey" : 16,
    "layout" : 8
  }, {
    "firstKey" : 14,
    "secondKey" : 17,
    "layout" : 8
  }, {
    "firstKey" : 14,
    "secondKey" : 18,
    "layout" : 12
  }, {
    "firstKey" : 14,
    "secondKey" : 19,
    "layout" : 12
  }, {
    "firstKey" : 14,
    "secondKey" : 20,
    "layout" : 12
  }, {
    "firstKey" : 14,
    "secondKey" : 21,
    "layout" : 12
  }, {
    "firstKey" : 14,
    "secondKey" : 22,
    "layout" : 12
  }, {
    "firstKey" : 14,
    "secondKey" : 23,
    "layout" : 12
  }, {
    "firstKey" : 14,
    "secondKey" : 24,
    "layout" : 12
  }, {
    "firstKey" : 15,
    "secondKey" : 0,
    "layout" : 12
  }, {
    "firstKey" : 15,
    "secondKey" : 1,
    "layout" : 12
  }, {
    "firstKey" : 15,
    "secondKey" : 2,
    "layout" : 12
  }, {
    "firstKey" : 15,
    "secondKey" : 3,
    "layout" : 12
  }, {
    "firstKey" : 15,
    "secondKey" : 4,
    "layout" : 12
  }, {
    "firstKey" : 15,
    "secondKey" : 5,
    "layout" : 12
  }, {
    "firstKey" : 15,
    "secondKey" : 6,
    "layout" : 12
  }, {
    "firstKey" : 15,
    "secondKey" : 7,
    "layout" : 12
  }, {
    "firstKey" : 15,
    "secondKey" : 8,
    "layout" : 12
  }, {
    "firstKey" : 15,
    "secondKey" : 9,
    "layout" : 12
  }, {
    "firstKey" : 15,
    "secondKey" : 10,
    "layout" : 12
  }, {
    "firstKey" : 15,
    "secondKey" : 11,
    "layout" : 12
  }, {
    "firstKey" : 15,
    "secondKey" : 12,
    "layout" : 9
  }, {
    "firstKey" : 15,
    "secondKey" : 13,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 16,
    "layout" : 10
  }, {
    "firstKey" : 15,
    "secondKey" : 17,
    "layout" : 10
  }, {
    "firstKey" : 15,
    "secondKey" : 18,
    "layout" : 14
  }, {
    "firstKey" : 15,
    "secondKey" : 19,
    "layout" : 14
  }, {
    "firstKey" : 15,
    "secondKey" : 20,
    "layout" : 14
  }, {
    "firstKey" : 15,
    "secondKey" : 21,
    "layout" : 14
  }, {
    "firstKey" : 15,
    "secondKey" : 22,
    "layout" : 14
  }, {
    "firstKey" : 15,
    "secondKey" : 23,
    "layout" : 14
  }, {
    "firstKey" : 15,
    "secondKey" : 24,
    "layout" : 14
  }, {
    "firstKey" : 16,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 17,
    "layout" : 1
  }, {
    "firstKey" : 16,
    "secondKey" : 18,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 19,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 20,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 21,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 22,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 23,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 24,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 17,
    "secondKey" : 18,
    "layout" : 8
  }, {
    "firstKey" : 17,
    "secondKey" : 19,
    "layout" : 8
  }, {
    "firstKey" : 17,
    "secondKey" : 20,
    "layout" : 8
  }, {
    "firstKey" : 17,
    "secondKey" : 21,
    "layout" : 8
  }, {
    "firstKey" : 17,
    "secondKey" : 22,
    "layout" : 8
  }, {
    "firstKey" : 17,
    "secondKey" : 23,
    "layout" : 8
  }, {
    "firstKey" : 17,
    "secondKey" : 24,
    "layout" : 8
  }, {
    "firstKey" : 18,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 18,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 18,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 18,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 20,
    "layout" : 1
  }, {
    "firstKey" : 19,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 20,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 20,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 20,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 20,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 20,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 20,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 20,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 20,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 20,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 20,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 20,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 20,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 20,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 20,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 20,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 20,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 20,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 20,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 20,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 22,
    "layout" : 6
  }, {
    "firstKey" : 20,
    "secondKey" : 23,
    "layout" : 6
  }, {
    "firstKey" : 20,
    "secondKey" : 24,
    "layout" : 6
  }, {
    "firstKey" : 21,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 21,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 21,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 21,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 21,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 21,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 21,
    "secondKey" : 6,
    "layout" : 7
  }, {
    "firstKey" : 21,
    "secondKey" : 7,
    "layout" : 7
  }, {
    "firstKey" : 21,
    "secondKey" : 8,
    "layout" : 7
  }, {
    "firstKey" : 21,
    "secondKey" : 9,
    "layout" : 7
  }, {
    "firstKey" : 21,
    "secondKey" : 10,
    "layout" : 7
  }, {
    "firstKey" : 21,
    "secondKey" : 11,
    "layout" : 7
  }, {
    "firstKey" : 21,
    "secondKey" : 12,
    "layout" : 7
  }, {
    "firstKey" : 21,
    "secondKey" : 13,
    "layout" : 7
  }, {
    "firstKey" : 21,
    "secondKey" : 14,
    "layout" : 7
  }, {
    "firstKey" : 21,
    "secondKey" : 15,
    "layout" : 7
  }, {
    "firstKey" : 21,
    "secondKey" : 16,
    "layout" : 7
  }, {
    "firstKey" : 21,
    "secondKey" : 17,
    "layout" : 7
  }, {
    "firstKey" : 21,
    "secondKey" : 18,
    "layout" : 5
  }, {
    "firstKey" : 21,
    "secondKey" : 19,
    "layout" : 5
  }, {
    "firstKey" : 21,
    "secondKey" : 20,
    "layout" : 5
  }, {
    "firstKey" : 21,
    "secondKey" : 22,
    "layout" : 7
  }, {
    "firstKey" : 21,
    "secondKey" : 23,
    "layout" : 7
  }, {
    "firstKey" : 21,
    "secondKey" : 24,
    "layout" : 7
  }, {
    "firstKey" : 22,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 24,
    "layout" : 1
  }, {
    "firstKey" : 24,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 24,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 24,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 24,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 24,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 24,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 24,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 24,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 24,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 24,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 24,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 24,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 24,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 24,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 24,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 24,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 24,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 24,
    "secondKey" : 17,
    "layout" : 5
  }, {
    "firstKey" : 24,
    "secondKey" : 18,
    "layout" : 5
  }, {
    "firstKey" : 24,
    "secondKey" : 19,
    "layout" : 5
  }, {
    "firstKey" : 24,
    "secondKey" : 20,
    "layout" : 5
  }, {
    "firstKey" : 24,
    "secondKey" : 21,
    "layout" : 5
  }, {
    "firstKey" : 24,
    "secondKey" : 22,
    "layout" : 5
  }, {
    "firstKey" : 24,
    "secondKey" : 23,
    "layout" : 4
  } ]
}