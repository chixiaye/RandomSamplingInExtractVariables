{
  "id" : 168,
  "expression" : "seconds > 59",
  "projectName" : "realm@realm-java",
  "commitID" : "9da3b229a46407f73e2003fb40857cadf062086b",
  "filePath" : "/realm/realm-library/src/main/java/io/realm/internal/android/ISO8601Utils.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "seconds > 59",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 121,
      "startColumnNumber" : 28,
      "endLineNumber" : 121,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 121,
        "startColumnNumber" : 28,
        "endLineNumber" : 121,
        "endColumnNumber" : 56
      },
      "nodeContext" : "seconds > 59 && seconds < 63",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 138,
        "startLineNumber" : 121,
        "startColumnNumber" : 24,
        "endLineNumber" : 123,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (seconds > 59 && seconds < 63) {\n  seconds=59;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1393,
        "startLineNumber" : 119,
        "startColumnNumber" : 58,
        "endLineNumber" : 143,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  seconds=parseInt(date,offset,offset+=2);\n  if (seconds > 59 && seconds < 63) {\n    seconds=59;\n  }\n  if (checkOffset(date,offset,'.')) {\n    offset+=1;\n    int endOffset=indexOfNonDigit(date,offset + 1);\n    int parseEndOffset=Math.min(endOffset,offset + 3);\n    int fraction=parseInt(date,offset,parseEndOffset);\nswitch (parseEndOffset - offset) {\ncase 2:      milliseconds=fraction * 10;\n    break;\ncase 1:  milliseconds=fraction * 100;\nbreak;\ndefault:milliseconds=fraction;\n}\noffset=endOffset;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 96,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1431,
        "startLineNumber" : 119,
        "startColumnNumber" : 20,
        "endLineNumber" : 143,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (c != 'Z' && c != '+' && c != '-') {\n  seconds=parseInt(date,offset,offset+=2);\n  if (seconds > 59 && seconds < 63) {\n    seconds=59;\n  }\n  if (checkOffset(date,offset,'.')) {\n    offset+=1;\n    int endOffset=indexOfNonDigit(date,offset + 1);\n    int parseEndOffset=Math.min(endOffset,offset + 3);\n    int fraction=parseInt(date,offset,parseEndOffset);\nswitch (parseEndOffset - offset) {\ncase 2:      milliseconds=fraction * 10;\n    break;\ncase 1:  milliseconds=fraction * 100;\nbreak;\ndefault:milliseconds=fraction;\n}\noffset=endOffset;\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 108,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1521,
        "startLineNumber" : 117,
        "startColumnNumber" : 44,
        "endLineNumber" : 144,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  char c=date.charAt(offset);\n  if (c != 'Z' && c != '+' && c != '-') {\n    seconds=parseInt(date,offset,offset+=2);\n    if (seconds > 59 && seconds < 63) {\n      seconds=59;\n    }\n    if (checkOffset(date,offset,'.')) {\n      offset+=1;\n      int endOffset=indexOfNonDigit(date,offset + 1);\n      int parseEndOffset=Math.min(endOffset,offset + 3);\n      int fraction=parseInt(date,offset,parseEndOffset);\nswitch (parseEndOffset - offset) {\ncase 2:        milliseconds=fraction * 10;\n      break;\ncase 1:    milliseconds=fraction * 100;\n  break;\ndefault:milliseconds=fraction;\n}\noffset=endOffset;\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 117,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1549,
        "startLineNumber" : 117,
        "startColumnNumber" : 16,
        "endLineNumber" : 144,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (date.length() > offset) {\n  char c=date.charAt(offset);\n  if (c != 'Z' && c != '+' && c != '-') {\n    seconds=parseInt(date,offset,offset+=2);\n    if (seconds > 59 && seconds < 63) {\n      seconds=59;\n    }\n    if (checkOffset(date,offset,'.')) {\n      offset+=1;\n      int endOffset=indexOfNonDigit(date,offset + 1);\n      int parseEndOffset=Math.min(endOffset,offset + 3);\n      int fraction=parseInt(date,offset,parseEndOffset);\nswitch (parseEndOffset - offset) {\ncase 2:        milliseconds=fraction * 10;\n      break;\ncase 1:    milliseconds=fraction * 100;\n  break;\ndefault:milliseconds=fraction;\n}\noffset=endOffset;\n}\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 123,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2051,
        "startLineNumber" : 104,
        "startColumnNumber" : 22,
        "endLineNumber" : 145,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  hour=parseInt(date,offset+=1,offset+=2);\n  if (checkOffset(date,offset,':')) {\n    offset+=1;\n  }\n  minutes=parseInt(date,offset,offset+=2);\n  if (checkOffset(date,offset,':')) {\n    offset+=1;\n  }\n  if (date.length() > offset) {\n    char c=date.charAt(offset);\n    if (c != 'Z' && c != '+' && c != '-') {\n      seconds=parseInt(date,offset,offset+=2);\n      if (seconds > 59 && seconds < 63) {\n        seconds=59;\n      }\n      if (checkOffset(date,offset,'.')) {\n        offset+=1;\n        int endOffset=indexOfNonDigit(date,offset + 1);\n        int parseEndOffset=Math.min(endOffset,offset + 3);\n        int fraction=parseInt(date,offset,parseEndOffset);\nswitch (parseEndOffset - offset) {\ncase 2:          milliseconds=fraction * 10;\n        break;\ncase 1:      milliseconds=fraction * 100;\n    break;\ndefault:  milliseconds=fraction;\n}\noffset=endOffset;\n}\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 168,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2061,
        "startLineNumber" : 104,
        "startColumnNumber" : 12,
        "endLineNumber" : 145,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (hasT) {\n  hour=parseInt(date,offset+=1,offset+=2);\n  if (checkOffset(date,offset,':')) {\n    offset+=1;\n  }\n  minutes=parseInt(date,offset,offset+=2);\n  if (checkOffset(date,offset,':')) {\n    offset+=1;\n  }\n  if (date.length() > offset) {\n    char c=date.charAt(offset);\n    if (c != 'Z' && c != '+' && c != '-') {\n      seconds=parseInt(date,offset,offset+=2);\n      if (seconds > 59 && seconds < 63) {\n        seconds=59;\n      }\n      if (checkOffset(date,offset,'.')) {\n        offset+=1;\n        int endOffset=indexOfNonDigit(date,offset + 1);\n        int parseEndOffset=Math.min(endOffset,offset + 3);\n        int fraction=parseInt(date,offset,parseEndOffset);\nswitch (parseEndOffset - offset) {\ncase 2:          milliseconds=fraction * 10;\n        break;\ncase 1:      milliseconds=fraction * 100;\n    break;\ndefault:  milliseconds=fraction;\n}\noffset=endOffset;\n}\n}\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 170,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 6350,
        "startLineNumber" : 71,
        "startColumnNumber" : 12,
        "endLineNumber" : 209,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  int offset=pos.getIndex();\n  int year=parseInt(date,offset,offset+=4);\n  if (checkOffset(date,offset,'-')) {\n    offset+=1;\n  }\n  int month=parseInt(date,offset,offset+=2);\n  if (checkOffset(date,offset,'-')) {\n    offset+=1;\n  }\n  int day=parseInt(date,offset,offset+=2);\n  int hour=0;\n  int minutes=0;\n  int seconds=0;\n  int milliseconds=0;\n  boolean hasT=checkOffset(date,offset,'T');\n  if (!hasT && (date.length() <= offset)) {\n    Calendar calendar=new GregorianCalendar(year,month - 1,day);\n    pos.setIndex(offset);\n    return calendar.getTime();\n  }\n  if (hasT) {\n    hour=parseInt(date,offset+=1,offset+=2);\n    if (checkOffset(date,offset,':')) {\n      offset+=1;\n    }\n    minutes=parseInt(date,offset,offset+=2);\n    if (checkOffset(date,offset,':')) {\n      offset+=1;\n    }\n    if (date.length() > offset) {\n      char c=date.charAt(offset);\n      if (c != 'Z' && c != '+' && c != '-') {\n        seconds=parseInt(date,offset,offset+=2);\n        if (seconds > 59 && seconds < 63) {\n          seconds=59;\n        }\n        if (checkOffset(date,offset,'.')) {\n          offset+=1;\n          int endOffset=indexOfNonDigit(date,offset + 1);\n          int parseEndOffset=Math.min(endOffset,offset + 3);\n          int fraction=parseInt(date,offset,parseEndOffset);\nswitch (parseEndOffset - offset) {\ncase 2:            milliseconds=fraction * 10;\n          break;\ncase 1:        milliseconds=fraction * 100;\n      break;\ndefault:    milliseconds=fraction;\n}\noffset=endOffset;\n}\n}\n}\n}\nif (date.length() <= offset) {\nthrow new IllegalArgumentException(\"No time zone indicator\");\n}\nTimeZone timezone;\nchar timezoneIndicator=date.charAt(offset);\nif (timezoneIndicator == 'Z') {\ntimezone=TIMEZONE_Z;\noffset+=1;\n}\n else if (timezoneIndicator == '+' || timezoneIndicator == '-') {\nString timezoneOffset=date.substring(offset);\noffset+=timezoneOffset.length();\nif (timezoneOffset.length() == 3) {\ntimezoneOffset+=\"00\";\n}\nif (\"+0000\".equals(timezoneOffset) || \"+00:00\".equals(timezoneOffset)) {\ntimezone=TIMEZONE_Z;\n}\n else {\nString timezoneId=\"GMT\" + timezoneOffset;\ntimezone=TimeZone.getTimeZone(timezoneId);\nString act=timezone.getID();\nif (!act.equals(timezoneId)) {\nString cleaned=act.replace(\":\",\"\");\nif (!cleaned.equals(timezoneId)) {\nthrow new IndexOutOfBoundsException(\"Mismatching time zone indicator: \" + timezoneId + \" given, resolves to \"+ timezone.getID());\n}\n}\n}\n}\n else {\nthrow new IndexOutOfBoundsException(\"Invalid time zone indicator '\" + timezoneIndicator + \"'\");\n}\nCalendar calendar=new GregorianCalendar(timezone);\ncalendar.setLenient(false);\ncalendar.set(Calendar.YEAR,year);\ncalendar.set(Calendar.MONTH,month - 1);\ncalendar.set(Calendar.DAY_OF_MONTH,day);\ncalendar.set(Calendar.HOUR_OF_DAY,hour);\ncalendar.set(Calendar.MINUTE,minutes);\ncalendar.set(Calendar.SECOND,seconds);\ncalendar.set(Calendar.MILLISECOND,milliseconds);\npos.setIndex(offset);\nreturn calendar.getTime();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 532,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6559,
        "startLineNumber" : 71,
        "startColumnNumber" : 8,
        "endLineNumber" : 215,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  int offset=pos.getIndex();\n  int year=parseInt(date,offset,offset+=4);\n  if (checkOffset(date,offset,'-')) {\n    offset+=1;\n  }\n  int month=parseInt(date,offset,offset+=2);\n  if (checkOffset(date,offset,'-')) {\n    offset+=1;\n  }\n  int day=parseInt(date,offset,offset+=2);\n  int hour=0;\n  int minutes=0;\n  int seconds=0;\n  int milliseconds=0;\n  boolean hasT=checkOffset(date,offset,'T');\n  if (!hasT && (date.length() <= offset)) {\n    Calendar calendar=new GregorianCalendar(year,month - 1,day);\n    pos.setIndex(offset);\n    return calendar.getTime();\n  }\n  if (hasT) {\n    hour=parseInt(date,offset+=1,offset+=2);\n    if (checkOffset(date,offset,':')) {\n      offset+=1;\n    }\n    minutes=parseInt(date,offset,offset+=2);\n    if (checkOffset(date,offset,':')) {\n      offset+=1;\n    }\n    if (date.length() > offset) {\n      char c=date.charAt(offset);\n      if (c != 'Z' && c != '+' && c != '-') {\n        seconds=parseInt(date,offset,offset+=2);\n        if (seconds > 59 && seconds < 63) {\n          seconds=59;\n        }\n        if (checkOffset(date,offset,'.')) {\n          offset+=1;\n          int endOffset=indexOfNonDigit(date,offset + 1);\n          int parseEndOffset=Math.min(endOffset,offset + 3);\n          int fraction=parseInt(date,offset,parseEndOffset);\nswitch (parseEndOffset - offset) {\ncase 2:            milliseconds=fraction * 10;\n          break;\ncase 1:        milliseconds=fraction * 100;\n      break;\ndefault:    milliseconds=fraction;\n}\noffset=endOffset;\n}\n}\n}\n}\nif (date.length() <= offset) {\nthrow new IllegalArgumentException(\"No time zone indicator\");\n}\nTimeZone timezone;\nchar timezoneIndicator=date.charAt(offset);\nif (timezoneIndicator == 'Z') {\ntimezone=TIMEZONE_Z;\noffset+=1;\n}\n else if (timezoneIndicator == '+' || timezoneIndicator == '-') {\nString timezoneOffset=date.substring(offset);\noffset+=timezoneOffset.length();\nif (timezoneOffset.length() == 3) {\ntimezoneOffset+=\"00\";\n}\nif (\"+0000\".equals(timezoneOffset) || \"+00:00\".equals(timezoneOffset)) {\ntimezone=TIMEZONE_Z;\n}\n else {\nString timezoneId=\"GMT\" + timezoneOffset;\ntimezone=TimeZone.getTimeZone(timezoneId);\nString act=timezone.getID();\nif (!act.equals(timezoneId)) {\nString cleaned=act.replace(\":\",\"\");\nif (!cleaned.equals(timezoneId)) {\nthrow new IndexOutOfBoundsException(\"Mismatching time zone indicator: \" + timezoneId + \" given, resolves to \"+ timezone.getID());\n}\n}\n}\n}\n else {\nthrow new IndexOutOfBoundsException(\"Invalid time zone indicator '\" + timezoneIndicator + \"'\");\n}\nCalendar calendar=new GregorianCalendar(timezone);\ncalendar.setLenient(false);\ncalendar.set(Calendar.YEAR,year);\ncalendar.set(Calendar.MONTH,month - 1);\ncalendar.set(Calendar.DAY_OF_MONTH,day);\ncalendar.set(Calendar.HOUR_OF_DAY,hour);\ncalendar.set(Calendar.MINUTE,minutes);\ncalendar.set(Calendar.SECOND,seconds);\ncalendar.set(Calendar.MILLISECOND,milliseconds);\npos.setIndex(offset);\nreturn calendar.getTime();\n}\n catch (IndexOutOfBoundsException e) {\nfail=e;\n}\ncatch (NumberFormatException e) {\nfail=e;\n}\ncatch (IllegalArgumentException e) {\nfail=e;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 563,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7022,
        "startLineNumber" : 68,
        "startColumnNumber" : 83,
        "endLineNumber" : 224,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Exception fail;\n  try {\n    int offset=pos.getIndex();\n    int year=parseInt(date,offset,offset+=4);\n    if (checkOffset(date,offset,'-')) {\n      offset+=1;\n    }\n    int month=parseInt(date,offset,offset+=2);\n    if (checkOffset(date,offset,'-')) {\n      offset+=1;\n    }\n    int day=parseInt(date,offset,offset+=2);\n    int hour=0;\n    int minutes=0;\n    int seconds=0;\n    int milliseconds=0;\n    boolean hasT=checkOffset(date,offset,'T');\n    if (!hasT && (date.length() <= offset)) {\n      Calendar calendar=new GregorianCalendar(year,month - 1,day);\n      pos.setIndex(offset);\n      return calendar.getTime();\n    }\n    if (hasT) {\n      hour=parseInt(date,offset+=1,offset+=2);\n      if (checkOffset(date,offset,':')) {\n        offset+=1;\n      }\n      minutes=parseInt(date,offset,offset+=2);\n      if (checkOffset(date,offset,':')) {\n        offset+=1;\n      }\n      if (date.length() > offset) {\n        char c=date.charAt(offset);\n        if (c != 'Z' && c != '+' && c != '-') {\n          seconds=parseInt(date,offset,offset+=2);\n          if (seconds > 59 && seconds < 63) {\n            seconds=59;\n          }\n          if (checkOffset(date,offset,'.')) {\n            offset+=1;\n            int endOffset=indexOfNonDigit(date,offset + 1);\n            int parseEndOffset=Math.min(endOffset,offset + 3);\n            int fraction=parseInt(date,offset,parseEndOffset);\nswitch (parseEndOffset - offset) {\ncase 2:              milliseconds=fraction * 10;\n            break;\ncase 1:          milliseconds=fraction * 100;\n        break;\ndefault:      milliseconds=fraction;\n  }\n  offset=endOffset;\n}\n}\n}\n}\nif (date.length() <= offset) {\nthrow new IllegalArgumentException(\"No time zone indicator\");\n}\nTimeZone timezone;\nchar timezoneIndicator=date.charAt(offset);\nif (timezoneIndicator == 'Z') {\ntimezone=TIMEZONE_Z;\noffset+=1;\n}\n else if (timezoneIndicator == '+' || timezoneIndicator == '-') {\nString timezoneOffset=date.substring(offset);\noffset+=timezoneOffset.length();\nif (timezoneOffset.length() == 3) {\ntimezoneOffset+=\"00\";\n}\nif (\"+0000\".equals(timezoneOffset) || \"+00:00\".equals(timezoneOffset)) {\ntimezone=TIMEZONE_Z;\n}\n else {\nString timezoneId=\"GMT\" + timezoneOffset;\ntimezone=TimeZone.getTimeZone(timezoneId);\nString act=timezone.getID();\nif (!act.equals(timezoneId)) {\nString cleaned=act.replace(\":\",\"\");\nif (!cleaned.equals(timezoneId)) {\n  throw new IndexOutOfBoundsException(\"Mismatching time zone indicator: \" + timezoneId + \" given, resolves to \"+ timezone.getID());\n}\n}\n}\n}\n else {\nthrow new IndexOutOfBoundsException(\"Invalid time zone indicator '\" + timezoneIndicator + \"'\");\n}\nCalendar calendar=new GregorianCalendar(timezone);\ncalendar.setLenient(false);\ncalendar.set(Calendar.YEAR,year);\ncalendar.set(Calendar.MONTH,month - 1);\ncalendar.set(Calendar.DAY_OF_MONTH,day);\ncalendar.set(Calendar.HOUR_OF_DAY,hour);\ncalendar.set(Calendar.MINUTE,minutes);\ncalendar.set(Calendar.SECOND,seconds);\ncalendar.set(Calendar.MILLISECOND,milliseconds);\npos.setIndex(offset);\nreturn calendar.getTime();\n}\n catch (IndexOutOfBoundsException e) {\nfail=e;\n}\ncatch (NumberFormatException e) {\nfail=e;\n}\ncatch (IllegalArgumentException e) {\nfail=e;\n}\nString input=(date == null) ? null : ('\"' + date + \"'\");\nString msg=fail.getMessage();\nif (msg == null || msg.isEmpty()) {\nmsg=\"(\" + fail.getClass().getName() + \")\";\n}\nParseException ex=new ParseException(\"Failed to parse date [\" + input + \"]: \"+ msg,pos.getIndex());\nex.initCause(fail);\nthrow ex;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 636,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7537,
        "startLineNumber" : 59,
        "startColumnNumber" : 4,
        "endLineNumber" : 224,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Parses a date from ISO-8601 formatted string. It expects a format [yyyy-MM-dd|yyyyMMdd][T(hh:mm[:ss[.sss]]|hhmm[ss[.sss]])]?[Z|[+-]hh:mm]]\n * @param date ISO string to parse in the appropriate format.\n * @param pos The position to start parsing from, updated to where parsing stopped.\n * @return the parsed date\n * @throws ParseException if the date is not in the appropriate format\n */\npublic static Date parse(String date,ParsePosition pos) throws ParseException {\n  Exception fail;\n  try {\n    int offset=pos.getIndex();\n    int year=parseInt(date,offset,offset+=4);\n    if (checkOffset(date,offset,'-')) {\n      offset+=1;\n    }\n    int month=parseInt(date,offset,offset+=2);\n    if (checkOffset(date,offset,'-')) {\n      offset+=1;\n    }\n    int day=parseInt(date,offset,offset+=2);\n    int hour=0;\n    int minutes=0;\n    int seconds=0;\n    int milliseconds=0;\n    boolean hasT=checkOffset(date,offset,'T');\n    if (!hasT && (date.length() <= offset)) {\n      Calendar calendar=new GregorianCalendar(year,month - 1,day);\n      pos.setIndex(offset);\n      return calendar.getTime();\n    }\n    if (hasT) {\n      hour=parseInt(date,offset+=1,offset+=2);\n      if (checkOffset(date,offset,':')) {\n        offset+=1;\n      }\n      minutes=parseInt(date,offset,offset+=2);\n      if (checkOffset(date,offset,':')) {\n        offset+=1;\n      }\n      if (date.length() > offset) {\n        char c=date.charAt(offset);\n        if (c != 'Z' && c != '+' && c != '-') {\n          seconds=parseInt(date,offset,offset+=2);\n          if (seconds > 59 && seconds < 63) {\n            seconds=59;\n          }\n          if (checkOffset(date,offset,'.')) {\n            offset+=1;\n            int endOffset=indexOfNonDigit(date,offset + 1);\n            int parseEndOffset=Math.min(endOffset,offset + 3);\n            int fraction=parseInt(date,offset,parseEndOffset);\nswitch (parseEndOffset - offset) {\ncase 2:              milliseconds=fraction * 10;\n            break;\ncase 1:          milliseconds=fraction * 100;\n        break;\ndefault:      milliseconds=fraction;\n  }\n  offset=endOffset;\n}\n}\n}\n}\nif (date.length() <= offset) {\nthrow new IllegalArgumentException(\"No time zone indicator\");\n}\nTimeZone timezone;\nchar timezoneIndicator=date.charAt(offset);\nif (timezoneIndicator == 'Z') {\ntimezone=TIMEZONE_Z;\noffset+=1;\n}\n else if (timezoneIndicator == '+' || timezoneIndicator == '-') {\nString timezoneOffset=date.substring(offset);\noffset+=timezoneOffset.length();\nif (timezoneOffset.length() == 3) {\ntimezoneOffset+=\"00\";\n}\nif (\"+0000\".equals(timezoneOffset) || \"+00:00\".equals(timezoneOffset)) {\ntimezone=TIMEZONE_Z;\n}\n else {\nString timezoneId=\"GMT\" + timezoneOffset;\ntimezone=TimeZone.getTimeZone(timezoneId);\nString act=timezone.getID();\nif (!act.equals(timezoneId)) {\nString cleaned=act.replace(\":\",\"\");\nif (!cleaned.equals(timezoneId)) {\n  throw new IndexOutOfBoundsException(\"Mismatching time zone indicator: \" + timezoneId + \" given, resolves to \"+ timezone.getID());\n}\n}\n}\n}\n else {\nthrow new IndexOutOfBoundsException(\"Invalid time zone indicator '\" + timezoneIndicator + \"'\");\n}\nCalendar calendar=new GregorianCalendar(timezone);\ncalendar.setLenient(false);\ncalendar.set(Calendar.YEAR,year);\ncalendar.set(Calendar.MONTH,month - 1);\ncalendar.set(Calendar.DAY_OF_MONTH,day);\ncalendar.set(Calendar.HOUR_OF_DAY,hour);\ncalendar.set(Calendar.MINUTE,minutes);\ncalendar.set(Calendar.SECOND,seconds);\ncalendar.set(Calendar.MILLISECOND,milliseconds);\npos.setIndex(offset);\nreturn calendar.getTime();\n}\n catch (IndexOutOfBoundsException e) {\nfail=e;\n}\ncatch (NumberFormatException e) {\nfail=e;\n}\ncatch (IllegalArgumentException e) {\nfail=e;\n}\nString input=(date == null) ? null : ('\"' + date + \"'\");\nString msg=fail.getMessage();\nif (msg == null || msg.isEmpty()) {\nmsg=\"(\" + fail.getClass().getName() + \")\";\n}\nParseException ex=new ParseException(\"Failed to parse date [\" + input + \"]: \"+ msg,pos.getIndex());\nex.initCause(fail);\nthrow ex;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 653,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 121,
        "startColumnNumber" : 28,
        "endLineNumber" : 121,
        "endColumnNumber" : 56
      },
      "nodeContext" : "seconds > 59 && seconds < 63",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 12,
    "startLineNumber" : 121,
    "startColumnNumber" : 28,
    "endLineNumber" : 121,
    "endColumnNumber" : 40
  } ],
  "layoutRelationDataList" : [ ]
}