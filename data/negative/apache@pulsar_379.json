{
  "id" : 379,
  "expression" : "i < nThreads",
  "projectName" : "apache@pulsar",
  "commitID" : "ded806fd52f6e2f182fa02052cbd82c2a6755098",
  "filePath" : "/pulsar-common/src/test/java/org/apache/pulsar/common/util/collections/ConcurrentOpenHashSetTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "i < nThreads",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 156,
      "startColumnNumber" : 24,
      "endLineNumber" : 156,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 441,
        "startLineNumber" : 156,
        "startColumnNumber" : 8,
        "endLineNumber" : 170,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < nThreads; i++) {\n  final int threadIdx=i;\n  futures.add(executor.submit(() -> {\n    Random random=new Random();\n    for (int j=0; j < N; j++) {\n      long key=random.nextLong();\n      key-=key % (threadIdx + 1);\n      set.add(key);\n    }\n  }\n));\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 68,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 878,
        "startLineNumber" : 147,
        "startColumnNumber" : 56,
        "endLineNumber" : 177,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ConcurrentOpenHashSet<Long> set=new ConcurrentOpenHashSet<>();\n  @Cleanup(\"shutdownNow\") ExecutorService executor=Executors.newCachedThreadPool();\n  final int nThreads=16;\n  final int N=100_000;\n  List<Future<?>> futures=new ArrayList<>();\n  for (int i=0; i < nThreads; i++) {\n    final int threadIdx=i;\n    futures.add(executor.submit(() -> {\n      Random random=new Random();\n      for (int j=0; j < N; j++) {\n        long key=random.nextLong();\n        key-=key % (threadIdx + 1);\n        set.add(key);\n      }\n    }\n));\n  }\n  for (  Future<?> future : futures) {\n    future.get();\n  }\n  assertEquals(set.size(),N * nThreads);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 140,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 940,
        "startLineNumber" : 146,
        "startColumnNumber" : 4,
        "endLineNumber" : 177,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void concurrentInsertions() throws Throwable {\n  ConcurrentOpenHashSet<Long> set=new ConcurrentOpenHashSet<>();\n  @Cleanup(\"shutdownNow\") ExecutorService executor=Executors.newCachedThreadPool();\n  final int nThreads=16;\n  final int N=100_000;\n  List<Future<?>> futures=new ArrayList<>();\n  for (int i=0; i < nThreads; i++) {\n    final int threadIdx=i;\n    futures.add(executor.submit(() -> {\n      Random random=new Random();\n      for (int j=0; j < N; j++) {\n        long key=random.nextLong();\n        key-=key % (threadIdx + 1);\n        set.add(key);\n      }\n    }\n));\n  }\n  for (  Future<?> future : futures) {\n    future.get();\n  }\n  assertEquals(set.size(),N * nThreads);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 148,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 441,
        "startLineNumber" : 156,
        "startColumnNumber" : 8,
        "endLineNumber" : 170,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < nThreads; i++) {\n  final int threadIdx=i;\n  futures.add(executor.submit(() -> {\n    Random random=new Random();\n    for (int j=0; j < N; j++) {\n      long key=random.nextLong();\n      key-=key % (threadIdx + 1);\n      set.add(key);\n    }\n  }\n));\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 68,
      "astHeight" : 15
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 12,
    "startLineNumber" : 156,
    "startColumnNumber" : 24,
    "endLineNumber" : 156,
    "endColumnNumber" : 36
  } ],
  "layoutRelationDataList" : [ ]
}