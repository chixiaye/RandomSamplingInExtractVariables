{
  "id" : 374,
  "expression" : "httpData.refCnt()",
  "projectName" : "netty@netty",
  "commitID" : "53094226692ff73e6bfc532b1928511af06a318a",
  "filePath" : "codec-http/src/test/java/io/netty/handler/codec/http/multipart/HttpPostRequestDecoderTest.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "httpData.refCnt()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 17,
      "startLineNumber" : 1072,
      "startColumnNumber" : 67,
      "endLineNumber" : 1072,
      "endColumnNumber" : 84
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 1072,
        "startColumnNumber" : 12,
        "endLineNumber" : 1072,
        "endColumnNumber" : 85
      },
      "nodeContext" : "assertEquals(\"Before cleanAllHttpData should be 1\",1,httpData.refCnt())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 1072,
        "startColumnNumber" : 12,
        "endLineNumber" : 1072,
        "endColumnNumber" : 86
      },
      "nodeContext" : "assertEquals(\"Before cleanAllHttpData should be 1\",1,httpData.refCnt());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 100,
        "startLineNumber" : 1071,
        "startColumnNumber" : 53,
        "endLineNumber" : 1073,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  assertEquals(\"Before cleanAllHttpData should be 1\",1,httpData.refCnt());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 145,
        "startLineNumber" : 1071,
        "startColumnNumber" : 8,
        "endLineNumber" : 1073,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (InterfaceHttpData httpData : httpDatas) {\n  assertEquals(\"Before cleanAllHttpData should be 1\",1,httpData.refCnt());\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4843,
        "startLineNumber" : 988,
        "startColumnNumber" : 31,
        "endLineNumber" : 1082,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int nbChunks=100;\n  int bytesPerChunk=100000;\n  int bytesLastChunk=10000;\n  int fileSize=bytesPerChunk * nbChunks + bytesLastChunk;\n  String delimiter=\"--861fbeab-cd20-470c-9609-d40a0f704466\";\n  String prefix=delimiter + \"\\n\" + \"Content-Disposition: form-data; name=\\\"image\\\"; filename=\\\"guangzhou.jpeg\\\"\\n\"+ \"Content-Type: image/jpeg\\n\"+ \"Content-Length: \"+ fileSize+ \"\\n\"+ \"\\n\";\n  String suffix1=\"\\n\" + \"--861fbeab-\";\n  String suffix2=\"cd20-470c-9609-d40a0f704466--\\n\";\n  String suffix=suffix1 + suffix2;\n  HttpRequest request=new DefaultHttpRequest(HttpVersion.HTTP_1_1,HttpMethod.POST,\"/upload\");\n  request.headers().set(\"content-type\",\"multipart/form-data; boundary=861fbeab-cd20-470c-9609-d40a0f704466\");\n  request.headers().set(\"content-length\",prefix.length() + fileSize + suffix.length());\n  HttpPostMultipartRequestDecoder decoder=new HttpPostMultipartRequestDecoder(factory,request);\n  ByteBuf buf=Unpooled.wrappedBuffer(prefix.getBytes(CharsetUtil.UTF_8));\n  decoder.offer(new DefaultHttpContent(buf));\n  assertNotNull(((HttpData)decoder.currentPartialHttpData()).content());\n  buf.release();\n  byte[] body=new byte[bytesPerChunk];\n  Arrays.fill(body,(byte)1);\n  body[0]=HttpConstants.CR;\n  body[1]=HttpConstants.LF;\n  for (int i=0; i < nbChunks; i++) {\n    ByteBuf content=Unpooled.wrappedBuffer(body,0,bytesPerChunk);\n    decoder.offer(new DefaultHttpContent(content));\n    assertNotNull(((HttpData)decoder.currentPartialHttpData()).content());\n    content.release();\n  }\n  byte[] bsuffix1=suffix1.getBytes(CharsetUtil.UTF_8);\n  byte[] previousLastbody=new byte[bytesLastChunk - bsuffix1.length];\n  byte[] bdelimiter=delimiter.getBytes(CharsetUtil.UTF_8);\n  byte[] lastbody=new byte[2 * bsuffix1.length];\n  Arrays.fill(previousLastbody,(byte)1);\n  previousLastbody[0]=HttpConstants.CR;\n  previousLastbody[1]=HttpConstants.LF;\n  Arrays.fill(lastbody,(byte)1);\n  for (int i=0; i < bdelimiter.length; i++) {\n    previousLastbody[i + 10]=bdelimiter[i];\n  }\n  lastbody[0]=HttpConstants.CR;\n  lastbody[1]=HttpConstants.LF;\n  for (int i=0; i < bsuffix1.length; i++) {\n    lastbody[bsuffix1.length + i]=bsuffix1[i];\n  }\n  ByteBuf content2=Unpooled.wrappedBuffer(previousLastbody,0,previousLastbody.length);\n  decoder.offer(new DefaultHttpContent(content2));\n  assertNotNull(((HttpData)decoder.currentPartialHttpData()).content());\n  content2.release();\n  content2=Unpooled.wrappedBuffer(lastbody,0,lastbody.length);\n  decoder.offer(new DefaultHttpContent(content2));\n  assertNotNull(((HttpData)decoder.currentPartialHttpData()).content());\n  content2.release();\n  content2=Unpooled.wrappedBuffer(suffix2.getBytes(CharsetUtil.UTF_8));\n  decoder.offer(new DefaultHttpContent(content2));\n  assertNull(decoder.currentPartialHttpData());\n  content2.release();\n  decoder.offer(new DefaultLastHttpContent());\n  FileUpload data=(FileUpload)decoder.getBodyHttpDatas().get(0);\n  assertEquals(data.length(),fileSize);\n  assertEquals(inMemory,data.isInMemory());\n  if (data.isInMemory()) {\n    assertFalse(\"Capacity should be higher than 1M\",data.getByteBuf().capacity() < 1024 * 1024);\n  }\n  assertTrue(\"Capacity should be less than 1M\",decoder.getCurrentAllocatedCapacity() < 1024 * 1024);\n  InterfaceHttpData[] httpDatas=decoder.getBodyHttpDatas().toArray(new InterfaceHttpData[0]);\n  for (  InterfaceHttpData httpData : httpDatas) {\n    assertEquals(\"Before cleanAllHttpData should be 1\",1,httpData.refCnt());\n  }\n  factory.cleanAllHttpData();\n  for (  InterfaceHttpData httpData : httpDatas) {\n    assertEquals(\"Before cleanAllHttpData should be 1 if in Memory\",inMemory ? 1 : 0,httpData.refCnt());\n  }\n  decoder.destroy();\n  for (  InterfaceHttpData httpData : httpDatas) {\n    assertEquals(\"RefCnt should be 0\",0,httpData.refCnt());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 627,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4971,
        "startLineNumber" : 987,
        "startColumnNumber" : 4,
        "endLineNumber" : 1082,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void commonTestBigFileDelimiterInMiddleChunk(HttpDataFactory factory,boolean inMemory) throws IOException {\n  int nbChunks=100;\n  int bytesPerChunk=100000;\n  int bytesLastChunk=10000;\n  int fileSize=bytesPerChunk * nbChunks + bytesLastChunk;\n  String delimiter=\"--861fbeab-cd20-470c-9609-d40a0f704466\";\n  String prefix=delimiter + \"\\n\" + \"Content-Disposition: form-data; name=\\\"image\\\"; filename=\\\"guangzhou.jpeg\\\"\\n\"+ \"Content-Type: image/jpeg\\n\"+ \"Content-Length: \"+ fileSize+ \"\\n\"+ \"\\n\";\n  String suffix1=\"\\n\" + \"--861fbeab-\";\n  String suffix2=\"cd20-470c-9609-d40a0f704466--\\n\";\n  String suffix=suffix1 + suffix2;\n  HttpRequest request=new DefaultHttpRequest(HttpVersion.HTTP_1_1,HttpMethod.POST,\"/upload\");\n  request.headers().set(\"content-type\",\"multipart/form-data; boundary=861fbeab-cd20-470c-9609-d40a0f704466\");\n  request.headers().set(\"content-length\",prefix.length() + fileSize + suffix.length());\n  HttpPostMultipartRequestDecoder decoder=new HttpPostMultipartRequestDecoder(factory,request);\n  ByteBuf buf=Unpooled.wrappedBuffer(prefix.getBytes(CharsetUtil.UTF_8));\n  decoder.offer(new DefaultHttpContent(buf));\n  assertNotNull(((HttpData)decoder.currentPartialHttpData()).content());\n  buf.release();\n  byte[] body=new byte[bytesPerChunk];\n  Arrays.fill(body,(byte)1);\n  body[0]=HttpConstants.CR;\n  body[1]=HttpConstants.LF;\n  for (int i=0; i < nbChunks; i++) {\n    ByteBuf content=Unpooled.wrappedBuffer(body,0,bytesPerChunk);\n    decoder.offer(new DefaultHttpContent(content));\n    assertNotNull(((HttpData)decoder.currentPartialHttpData()).content());\n    content.release();\n  }\n  byte[] bsuffix1=suffix1.getBytes(CharsetUtil.UTF_8);\n  byte[] previousLastbody=new byte[bytesLastChunk - bsuffix1.length];\n  byte[] bdelimiter=delimiter.getBytes(CharsetUtil.UTF_8);\n  byte[] lastbody=new byte[2 * bsuffix1.length];\n  Arrays.fill(previousLastbody,(byte)1);\n  previousLastbody[0]=HttpConstants.CR;\n  previousLastbody[1]=HttpConstants.LF;\n  Arrays.fill(lastbody,(byte)1);\n  for (int i=0; i < bdelimiter.length; i++) {\n    previousLastbody[i + 10]=bdelimiter[i];\n  }\n  lastbody[0]=HttpConstants.CR;\n  lastbody[1]=HttpConstants.LF;\n  for (int i=0; i < bsuffix1.length; i++) {\n    lastbody[bsuffix1.length + i]=bsuffix1[i];\n  }\n  ByteBuf content2=Unpooled.wrappedBuffer(previousLastbody,0,previousLastbody.length);\n  decoder.offer(new DefaultHttpContent(content2));\n  assertNotNull(((HttpData)decoder.currentPartialHttpData()).content());\n  content2.release();\n  content2=Unpooled.wrappedBuffer(lastbody,0,lastbody.length);\n  decoder.offer(new DefaultHttpContent(content2));\n  assertNotNull(((HttpData)decoder.currentPartialHttpData()).content());\n  content2.release();\n  content2=Unpooled.wrappedBuffer(suffix2.getBytes(CharsetUtil.UTF_8));\n  decoder.offer(new DefaultHttpContent(content2));\n  assertNull(decoder.currentPartialHttpData());\n  content2.release();\n  decoder.offer(new DefaultLastHttpContent());\n  FileUpload data=(FileUpload)decoder.getBodyHttpDatas().get(0);\n  assertEquals(data.length(),fileSize);\n  assertEquals(inMemory,data.isInMemory());\n  if (data.isInMemory()) {\n    assertFalse(\"Capacity should be higher than 1M\",data.getByteBuf().capacity() < 1024 * 1024);\n  }\n  assertTrue(\"Capacity should be less than 1M\",decoder.getCurrentAllocatedCapacity() < 1024 * 1024);\n  InterfaceHttpData[] httpDatas=decoder.getBodyHttpDatas().toArray(new InterfaceHttpData[0]);\n  for (  InterfaceHttpData httpData : httpDatas) {\n    assertEquals(\"Before cleanAllHttpData should be 1\",1,httpData.refCnt());\n  }\n  factory.cleanAllHttpData();\n  for (  InterfaceHttpData httpData : httpDatas) {\n    assertEquals(\"Before cleanAllHttpData should be 1 if in Memory\",inMemory ? 1 : 0,httpData.refCnt());\n  }\n  decoder.destroy();\n  for (  InterfaceHttpData httpData : httpDatas) {\n    assertEquals(\"RefCnt should be 0\",0,httpData.refCnt());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 640,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 1072,
        "startColumnNumber" : 12,
        "endLineNumber" : 1072,
        "endColumnNumber" : 86
      },
      "nodeContext" : "assertEquals(\"Before cleanAllHttpData should be 1\",1,httpData.refCnt());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "int"
  }, {
    "nodeContext" : "httpData.refCnt()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 17,
      "startLineNumber" : 1076,
      "startColumnNumber" : 94,
      "endLineNumber" : 1076,
      "endColumnNumber" : 111
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 100,
        "startLineNumber" : 1076,
        "startColumnNumber" : 12,
        "endLineNumber" : 1076,
        "endColumnNumber" : 112
      },
      "nodeContext" : "assertEquals(\"Before cleanAllHttpData should be 1 if in Memory\",inMemory ? 1 : 0,httpData.refCnt())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 101,
        "startLineNumber" : 1076,
        "startColumnNumber" : 12,
        "endLineNumber" : 1076,
        "endColumnNumber" : 113
      },
      "nodeContext" : "assertEquals(\"Before cleanAllHttpData should be 1 if in Memory\",inMemory ? 1 : 0,httpData.refCnt());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 127,
        "startLineNumber" : 1075,
        "startColumnNumber" : 53,
        "endLineNumber" : 1077,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  assertEquals(\"Before cleanAllHttpData should be 1 if in Memory\",inMemory ? 1 : 0,httpData.refCnt());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 172,
        "startLineNumber" : 1075,
        "startColumnNumber" : 8,
        "endLineNumber" : 1077,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (InterfaceHttpData httpData : httpDatas) {\n  assertEquals(\"Before cleanAllHttpData should be 1 if in Memory\",inMemory ? 1 : 0,httpData.refCnt());\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4843,
        "startLineNumber" : 988,
        "startColumnNumber" : 31,
        "endLineNumber" : 1082,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int nbChunks=100;\n  int bytesPerChunk=100000;\n  int bytesLastChunk=10000;\n  int fileSize=bytesPerChunk * nbChunks + bytesLastChunk;\n  String delimiter=\"--861fbeab-cd20-470c-9609-d40a0f704466\";\n  String prefix=delimiter + \"\\n\" + \"Content-Disposition: form-data; name=\\\"image\\\"; filename=\\\"guangzhou.jpeg\\\"\\n\"+ \"Content-Type: image/jpeg\\n\"+ \"Content-Length: \"+ fileSize+ \"\\n\"+ \"\\n\";\n  String suffix1=\"\\n\" + \"--861fbeab-\";\n  String suffix2=\"cd20-470c-9609-d40a0f704466--\\n\";\n  String suffix=suffix1 + suffix2;\n  HttpRequest request=new DefaultHttpRequest(HttpVersion.HTTP_1_1,HttpMethod.POST,\"/upload\");\n  request.headers().set(\"content-type\",\"multipart/form-data; boundary=861fbeab-cd20-470c-9609-d40a0f704466\");\n  request.headers().set(\"content-length\",prefix.length() + fileSize + suffix.length());\n  HttpPostMultipartRequestDecoder decoder=new HttpPostMultipartRequestDecoder(factory,request);\n  ByteBuf buf=Unpooled.wrappedBuffer(prefix.getBytes(CharsetUtil.UTF_8));\n  decoder.offer(new DefaultHttpContent(buf));\n  assertNotNull(((HttpData)decoder.currentPartialHttpData()).content());\n  buf.release();\n  byte[] body=new byte[bytesPerChunk];\n  Arrays.fill(body,(byte)1);\n  body[0]=HttpConstants.CR;\n  body[1]=HttpConstants.LF;\n  for (int i=0; i < nbChunks; i++) {\n    ByteBuf content=Unpooled.wrappedBuffer(body,0,bytesPerChunk);\n    decoder.offer(new DefaultHttpContent(content));\n    assertNotNull(((HttpData)decoder.currentPartialHttpData()).content());\n    content.release();\n  }\n  byte[] bsuffix1=suffix1.getBytes(CharsetUtil.UTF_8);\n  byte[] previousLastbody=new byte[bytesLastChunk - bsuffix1.length];\n  byte[] bdelimiter=delimiter.getBytes(CharsetUtil.UTF_8);\n  byte[] lastbody=new byte[2 * bsuffix1.length];\n  Arrays.fill(previousLastbody,(byte)1);\n  previousLastbody[0]=HttpConstants.CR;\n  previousLastbody[1]=HttpConstants.LF;\n  Arrays.fill(lastbody,(byte)1);\n  for (int i=0; i < bdelimiter.length; i++) {\n    previousLastbody[i + 10]=bdelimiter[i];\n  }\n  lastbody[0]=HttpConstants.CR;\n  lastbody[1]=HttpConstants.LF;\n  for (int i=0; i < bsuffix1.length; i++) {\n    lastbody[bsuffix1.length + i]=bsuffix1[i];\n  }\n  ByteBuf content2=Unpooled.wrappedBuffer(previousLastbody,0,previousLastbody.length);\n  decoder.offer(new DefaultHttpContent(content2));\n  assertNotNull(((HttpData)decoder.currentPartialHttpData()).content());\n  content2.release();\n  content2=Unpooled.wrappedBuffer(lastbody,0,lastbody.length);\n  decoder.offer(new DefaultHttpContent(content2));\n  assertNotNull(((HttpData)decoder.currentPartialHttpData()).content());\n  content2.release();\n  content2=Unpooled.wrappedBuffer(suffix2.getBytes(CharsetUtil.UTF_8));\n  decoder.offer(new DefaultHttpContent(content2));\n  assertNull(decoder.currentPartialHttpData());\n  content2.release();\n  decoder.offer(new DefaultLastHttpContent());\n  FileUpload data=(FileUpload)decoder.getBodyHttpDatas().get(0);\n  assertEquals(data.length(),fileSize);\n  assertEquals(inMemory,data.isInMemory());\n  if (data.isInMemory()) {\n    assertFalse(\"Capacity should be higher than 1M\",data.getByteBuf().capacity() < 1024 * 1024);\n  }\n  assertTrue(\"Capacity should be less than 1M\",decoder.getCurrentAllocatedCapacity() < 1024 * 1024);\n  InterfaceHttpData[] httpDatas=decoder.getBodyHttpDatas().toArray(new InterfaceHttpData[0]);\n  for (  InterfaceHttpData httpData : httpDatas) {\n    assertEquals(\"Before cleanAllHttpData should be 1\",1,httpData.refCnt());\n  }\n  factory.cleanAllHttpData();\n  for (  InterfaceHttpData httpData : httpDatas) {\n    assertEquals(\"Before cleanAllHttpData should be 1 if in Memory\",inMemory ? 1 : 0,httpData.refCnt());\n  }\n  decoder.destroy();\n  for (  InterfaceHttpData httpData : httpDatas) {\n    assertEquals(\"RefCnt should be 0\",0,httpData.refCnt());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 627,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4971,
        "startLineNumber" : 987,
        "startColumnNumber" : 4,
        "endLineNumber" : 1082,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void commonTestBigFileDelimiterInMiddleChunk(HttpDataFactory factory,boolean inMemory) throws IOException {\n  int nbChunks=100;\n  int bytesPerChunk=100000;\n  int bytesLastChunk=10000;\n  int fileSize=bytesPerChunk * nbChunks + bytesLastChunk;\n  String delimiter=\"--861fbeab-cd20-470c-9609-d40a0f704466\";\n  String prefix=delimiter + \"\\n\" + \"Content-Disposition: form-data; name=\\\"image\\\"; filename=\\\"guangzhou.jpeg\\\"\\n\"+ \"Content-Type: image/jpeg\\n\"+ \"Content-Length: \"+ fileSize+ \"\\n\"+ \"\\n\";\n  String suffix1=\"\\n\" + \"--861fbeab-\";\n  String suffix2=\"cd20-470c-9609-d40a0f704466--\\n\";\n  String suffix=suffix1 + suffix2;\n  HttpRequest request=new DefaultHttpRequest(HttpVersion.HTTP_1_1,HttpMethod.POST,\"/upload\");\n  request.headers().set(\"content-type\",\"multipart/form-data; boundary=861fbeab-cd20-470c-9609-d40a0f704466\");\n  request.headers().set(\"content-length\",prefix.length() + fileSize + suffix.length());\n  HttpPostMultipartRequestDecoder decoder=new HttpPostMultipartRequestDecoder(factory,request);\n  ByteBuf buf=Unpooled.wrappedBuffer(prefix.getBytes(CharsetUtil.UTF_8));\n  decoder.offer(new DefaultHttpContent(buf));\n  assertNotNull(((HttpData)decoder.currentPartialHttpData()).content());\n  buf.release();\n  byte[] body=new byte[bytesPerChunk];\n  Arrays.fill(body,(byte)1);\n  body[0]=HttpConstants.CR;\n  body[1]=HttpConstants.LF;\n  for (int i=0; i < nbChunks; i++) {\n    ByteBuf content=Unpooled.wrappedBuffer(body,0,bytesPerChunk);\n    decoder.offer(new DefaultHttpContent(content));\n    assertNotNull(((HttpData)decoder.currentPartialHttpData()).content());\n    content.release();\n  }\n  byte[] bsuffix1=suffix1.getBytes(CharsetUtil.UTF_8);\n  byte[] previousLastbody=new byte[bytesLastChunk - bsuffix1.length];\n  byte[] bdelimiter=delimiter.getBytes(CharsetUtil.UTF_8);\n  byte[] lastbody=new byte[2 * bsuffix1.length];\n  Arrays.fill(previousLastbody,(byte)1);\n  previousLastbody[0]=HttpConstants.CR;\n  previousLastbody[1]=HttpConstants.LF;\n  Arrays.fill(lastbody,(byte)1);\n  for (int i=0; i < bdelimiter.length; i++) {\n    previousLastbody[i + 10]=bdelimiter[i];\n  }\n  lastbody[0]=HttpConstants.CR;\n  lastbody[1]=HttpConstants.LF;\n  for (int i=0; i < bsuffix1.length; i++) {\n    lastbody[bsuffix1.length + i]=bsuffix1[i];\n  }\n  ByteBuf content2=Unpooled.wrappedBuffer(previousLastbody,0,previousLastbody.length);\n  decoder.offer(new DefaultHttpContent(content2));\n  assertNotNull(((HttpData)decoder.currentPartialHttpData()).content());\n  content2.release();\n  content2=Unpooled.wrappedBuffer(lastbody,0,lastbody.length);\n  decoder.offer(new DefaultHttpContent(content2));\n  assertNotNull(((HttpData)decoder.currentPartialHttpData()).content());\n  content2.release();\n  content2=Unpooled.wrappedBuffer(suffix2.getBytes(CharsetUtil.UTF_8));\n  decoder.offer(new DefaultHttpContent(content2));\n  assertNull(decoder.currentPartialHttpData());\n  content2.release();\n  decoder.offer(new DefaultLastHttpContent());\n  FileUpload data=(FileUpload)decoder.getBodyHttpDatas().get(0);\n  assertEquals(data.length(),fileSize);\n  assertEquals(inMemory,data.isInMemory());\n  if (data.isInMemory()) {\n    assertFalse(\"Capacity should be higher than 1M\",data.getByteBuf().capacity() < 1024 * 1024);\n  }\n  assertTrue(\"Capacity should be less than 1M\",decoder.getCurrentAllocatedCapacity() < 1024 * 1024);\n  InterfaceHttpData[] httpDatas=decoder.getBodyHttpDatas().toArray(new InterfaceHttpData[0]);\n  for (  InterfaceHttpData httpData : httpDatas) {\n    assertEquals(\"Before cleanAllHttpData should be 1\",1,httpData.refCnt());\n  }\n  factory.cleanAllHttpData();\n  for (  InterfaceHttpData httpData : httpDatas) {\n    assertEquals(\"Before cleanAllHttpData should be 1 if in Memory\",inMemory ? 1 : 0,httpData.refCnt());\n  }\n  decoder.destroy();\n  for (  InterfaceHttpData httpData : httpDatas) {\n    assertEquals(\"RefCnt should be 0\",0,httpData.refCnt());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 640,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 101,
        "startLineNumber" : 1076,
        "startColumnNumber" : 12,
        "endLineNumber" : 1076,
        "endColumnNumber" : 113
      },
      "nodeContext" : "assertEquals(\"Before cleanAllHttpData should be 1 if in Memory\",inMemory ? 1 : 0,httpData.refCnt());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "int"
  }, {
    "nodeContext" : "httpData.refCnt()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 17,
      "startLineNumber" : 1080,
      "startColumnNumber" : 50,
      "endLineNumber" : 1080,
      "endColumnNumber" : 67
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 1080,
        "startColumnNumber" : 12,
        "endLineNumber" : 1080,
        "endColumnNumber" : 68
      },
      "nodeContext" : "assertEquals(\"RefCnt should be 0\",0,httpData.refCnt())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 1080,
        "startColumnNumber" : 12,
        "endLineNumber" : 1080,
        "endColumnNumber" : 69
      },
      "nodeContext" : "assertEquals(\"RefCnt should be 0\",0,httpData.refCnt());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 1079,
        "startColumnNumber" : 53,
        "endLineNumber" : 1081,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  assertEquals(\"RefCnt should be 0\",0,httpData.refCnt());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 128,
        "startLineNumber" : 1079,
        "startColumnNumber" : 8,
        "endLineNumber" : 1081,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (InterfaceHttpData httpData : httpDatas) {\n  assertEquals(\"RefCnt should be 0\",0,httpData.refCnt());\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4843,
        "startLineNumber" : 988,
        "startColumnNumber" : 31,
        "endLineNumber" : 1082,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int nbChunks=100;\n  int bytesPerChunk=100000;\n  int bytesLastChunk=10000;\n  int fileSize=bytesPerChunk * nbChunks + bytesLastChunk;\n  String delimiter=\"--861fbeab-cd20-470c-9609-d40a0f704466\";\n  String prefix=delimiter + \"\\n\" + \"Content-Disposition: form-data; name=\\\"image\\\"; filename=\\\"guangzhou.jpeg\\\"\\n\"+ \"Content-Type: image/jpeg\\n\"+ \"Content-Length: \"+ fileSize+ \"\\n\"+ \"\\n\";\n  String suffix1=\"\\n\" + \"--861fbeab-\";\n  String suffix2=\"cd20-470c-9609-d40a0f704466--\\n\";\n  String suffix=suffix1 + suffix2;\n  HttpRequest request=new DefaultHttpRequest(HttpVersion.HTTP_1_1,HttpMethod.POST,\"/upload\");\n  request.headers().set(\"content-type\",\"multipart/form-data; boundary=861fbeab-cd20-470c-9609-d40a0f704466\");\n  request.headers().set(\"content-length\",prefix.length() + fileSize + suffix.length());\n  HttpPostMultipartRequestDecoder decoder=new HttpPostMultipartRequestDecoder(factory,request);\n  ByteBuf buf=Unpooled.wrappedBuffer(prefix.getBytes(CharsetUtil.UTF_8));\n  decoder.offer(new DefaultHttpContent(buf));\n  assertNotNull(((HttpData)decoder.currentPartialHttpData()).content());\n  buf.release();\n  byte[] body=new byte[bytesPerChunk];\n  Arrays.fill(body,(byte)1);\n  body[0]=HttpConstants.CR;\n  body[1]=HttpConstants.LF;\n  for (int i=0; i < nbChunks; i++) {\n    ByteBuf content=Unpooled.wrappedBuffer(body,0,bytesPerChunk);\n    decoder.offer(new DefaultHttpContent(content));\n    assertNotNull(((HttpData)decoder.currentPartialHttpData()).content());\n    content.release();\n  }\n  byte[] bsuffix1=suffix1.getBytes(CharsetUtil.UTF_8);\n  byte[] previousLastbody=new byte[bytesLastChunk - bsuffix1.length];\n  byte[] bdelimiter=delimiter.getBytes(CharsetUtil.UTF_8);\n  byte[] lastbody=new byte[2 * bsuffix1.length];\n  Arrays.fill(previousLastbody,(byte)1);\n  previousLastbody[0]=HttpConstants.CR;\n  previousLastbody[1]=HttpConstants.LF;\n  Arrays.fill(lastbody,(byte)1);\n  for (int i=0; i < bdelimiter.length; i++) {\n    previousLastbody[i + 10]=bdelimiter[i];\n  }\n  lastbody[0]=HttpConstants.CR;\n  lastbody[1]=HttpConstants.LF;\n  for (int i=0; i < bsuffix1.length; i++) {\n    lastbody[bsuffix1.length + i]=bsuffix1[i];\n  }\n  ByteBuf content2=Unpooled.wrappedBuffer(previousLastbody,0,previousLastbody.length);\n  decoder.offer(new DefaultHttpContent(content2));\n  assertNotNull(((HttpData)decoder.currentPartialHttpData()).content());\n  content2.release();\n  content2=Unpooled.wrappedBuffer(lastbody,0,lastbody.length);\n  decoder.offer(new DefaultHttpContent(content2));\n  assertNotNull(((HttpData)decoder.currentPartialHttpData()).content());\n  content2.release();\n  content2=Unpooled.wrappedBuffer(suffix2.getBytes(CharsetUtil.UTF_8));\n  decoder.offer(new DefaultHttpContent(content2));\n  assertNull(decoder.currentPartialHttpData());\n  content2.release();\n  decoder.offer(new DefaultLastHttpContent());\n  FileUpload data=(FileUpload)decoder.getBodyHttpDatas().get(0);\n  assertEquals(data.length(),fileSize);\n  assertEquals(inMemory,data.isInMemory());\n  if (data.isInMemory()) {\n    assertFalse(\"Capacity should be higher than 1M\",data.getByteBuf().capacity() < 1024 * 1024);\n  }\n  assertTrue(\"Capacity should be less than 1M\",decoder.getCurrentAllocatedCapacity() < 1024 * 1024);\n  InterfaceHttpData[] httpDatas=decoder.getBodyHttpDatas().toArray(new InterfaceHttpData[0]);\n  for (  InterfaceHttpData httpData : httpDatas) {\n    assertEquals(\"Before cleanAllHttpData should be 1\",1,httpData.refCnt());\n  }\n  factory.cleanAllHttpData();\n  for (  InterfaceHttpData httpData : httpDatas) {\n    assertEquals(\"Before cleanAllHttpData should be 1 if in Memory\",inMemory ? 1 : 0,httpData.refCnt());\n  }\n  decoder.destroy();\n  for (  InterfaceHttpData httpData : httpDatas) {\n    assertEquals(\"RefCnt should be 0\",0,httpData.refCnt());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 627,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4971,
        "startLineNumber" : 987,
        "startColumnNumber" : 4,
        "endLineNumber" : 1082,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void commonTestBigFileDelimiterInMiddleChunk(HttpDataFactory factory,boolean inMemory) throws IOException {\n  int nbChunks=100;\n  int bytesPerChunk=100000;\n  int bytesLastChunk=10000;\n  int fileSize=bytesPerChunk * nbChunks + bytesLastChunk;\n  String delimiter=\"--861fbeab-cd20-470c-9609-d40a0f704466\";\n  String prefix=delimiter + \"\\n\" + \"Content-Disposition: form-data; name=\\\"image\\\"; filename=\\\"guangzhou.jpeg\\\"\\n\"+ \"Content-Type: image/jpeg\\n\"+ \"Content-Length: \"+ fileSize+ \"\\n\"+ \"\\n\";\n  String suffix1=\"\\n\" + \"--861fbeab-\";\n  String suffix2=\"cd20-470c-9609-d40a0f704466--\\n\";\n  String suffix=suffix1 + suffix2;\n  HttpRequest request=new DefaultHttpRequest(HttpVersion.HTTP_1_1,HttpMethod.POST,\"/upload\");\n  request.headers().set(\"content-type\",\"multipart/form-data; boundary=861fbeab-cd20-470c-9609-d40a0f704466\");\n  request.headers().set(\"content-length\",prefix.length() + fileSize + suffix.length());\n  HttpPostMultipartRequestDecoder decoder=new HttpPostMultipartRequestDecoder(factory,request);\n  ByteBuf buf=Unpooled.wrappedBuffer(prefix.getBytes(CharsetUtil.UTF_8));\n  decoder.offer(new DefaultHttpContent(buf));\n  assertNotNull(((HttpData)decoder.currentPartialHttpData()).content());\n  buf.release();\n  byte[] body=new byte[bytesPerChunk];\n  Arrays.fill(body,(byte)1);\n  body[0]=HttpConstants.CR;\n  body[1]=HttpConstants.LF;\n  for (int i=0; i < nbChunks; i++) {\n    ByteBuf content=Unpooled.wrappedBuffer(body,0,bytesPerChunk);\n    decoder.offer(new DefaultHttpContent(content));\n    assertNotNull(((HttpData)decoder.currentPartialHttpData()).content());\n    content.release();\n  }\n  byte[] bsuffix1=suffix1.getBytes(CharsetUtil.UTF_8);\n  byte[] previousLastbody=new byte[bytesLastChunk - bsuffix1.length];\n  byte[] bdelimiter=delimiter.getBytes(CharsetUtil.UTF_8);\n  byte[] lastbody=new byte[2 * bsuffix1.length];\n  Arrays.fill(previousLastbody,(byte)1);\n  previousLastbody[0]=HttpConstants.CR;\n  previousLastbody[1]=HttpConstants.LF;\n  Arrays.fill(lastbody,(byte)1);\n  for (int i=0; i < bdelimiter.length; i++) {\n    previousLastbody[i + 10]=bdelimiter[i];\n  }\n  lastbody[0]=HttpConstants.CR;\n  lastbody[1]=HttpConstants.LF;\n  for (int i=0; i < bsuffix1.length; i++) {\n    lastbody[bsuffix1.length + i]=bsuffix1[i];\n  }\n  ByteBuf content2=Unpooled.wrappedBuffer(previousLastbody,0,previousLastbody.length);\n  decoder.offer(new DefaultHttpContent(content2));\n  assertNotNull(((HttpData)decoder.currentPartialHttpData()).content());\n  content2.release();\n  content2=Unpooled.wrappedBuffer(lastbody,0,lastbody.length);\n  decoder.offer(new DefaultHttpContent(content2));\n  assertNotNull(((HttpData)decoder.currentPartialHttpData()).content());\n  content2.release();\n  content2=Unpooled.wrappedBuffer(suffix2.getBytes(CharsetUtil.UTF_8));\n  decoder.offer(new DefaultHttpContent(content2));\n  assertNull(decoder.currentPartialHttpData());\n  content2.release();\n  decoder.offer(new DefaultLastHttpContent());\n  FileUpload data=(FileUpload)decoder.getBodyHttpDatas().get(0);\n  assertEquals(data.length(),fileSize);\n  assertEquals(inMemory,data.isInMemory());\n  if (data.isInMemory()) {\n    assertFalse(\"Capacity should be higher than 1M\",data.getByteBuf().capacity() < 1024 * 1024);\n  }\n  assertTrue(\"Capacity should be less than 1M\",decoder.getCurrentAllocatedCapacity() < 1024 * 1024);\n  InterfaceHttpData[] httpDatas=decoder.getBodyHttpDatas().toArray(new InterfaceHttpData[0]);\n  for (  InterfaceHttpData httpData : httpDatas) {\n    assertEquals(\"Before cleanAllHttpData should be 1\",1,httpData.refCnt());\n  }\n  factory.cleanAllHttpData();\n  for (  InterfaceHttpData httpData : httpDatas) {\n    assertEquals(\"Before cleanAllHttpData should be 1 if in Memory\",inMemory ? 1 : 0,httpData.refCnt());\n  }\n  decoder.destroy();\n  for (  InterfaceHttpData httpData : httpDatas) {\n    assertEquals(\"RefCnt should be 0\",0,httpData.refCnt());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 640,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 1080,
        "startColumnNumber" : 12,
        "endLineNumber" : 1080,
        "endColumnNumber" : 69
      },
      "nodeContext" : "assertEquals(\"RefCnt should be 0\",0,httpData.refCnt());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 17,
    "startLineNumber" : 1072,
    "startColumnNumber" : 67,
    "endLineNumber" : 1072,
    "endColumnNumber" : 84
  }, {
    "charLength" : 17,
    "startLineNumber" : 1076,
    "startColumnNumber" : 94,
    "endLineNumber" : 1076,
    "endColumnNumber" : 111
  }, {
    "charLength" : 17,
    "startLineNumber" : 1080,
    "startColumnNumber" : 50,
    "endLineNumber" : 1080,
    "endColumnNumber" : 67
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  } ]
}