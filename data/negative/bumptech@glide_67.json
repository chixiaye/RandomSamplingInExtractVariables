{
  "id" : 67,
  "expression" : "i < numRedirects",
  "projectName" : "bumptech@glide",
  "commitID" : "7d9c28ec2763e973775abd5c3e3c971728a48a56",
  "filePath" : "/integration/volley/src/androidTest/java/com/bumptech/glide/integration/volley/VolleyStreamFetcherServerTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "i < numRedirects",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 129,
      "startColumnNumber" : 20,
      "endLineNumber" : 129,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 189,
        "startLineNumber" : 129,
        "startColumnNumber" : 4,
        "endLineNumber" : 132,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < numRedirects; i++) {\n  mockWebServer.enqueue(new MockResponse().setResponseCode(301).setHeader(\"Location\",mockWebServer.getUrl(redirectBase + i)));\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 31,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 806,
        "startLineNumber" : 125,
        "startColumnNumber" : 62,
        "endLineNumber" : 144,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int numRedirects=4;\n  String expected=\"redirectedData\";\n  String redirectBase=\"/redirect\";\n  for (int i=0; i < numRedirects; i++) {\n    mockWebServer.enqueue(new MockResponse().setResponseCode(301).setHeader(\"Location\",mockWebServer.getUrl(redirectBase + i)));\n  }\n  mockWebServer.enqueue(new MockResponse().setResponseCode(200).setBody(expected));\n  getFetcher().loadData(Priority.NORMAL,callback);\n  waitForResponseLatch.await();\n  verify(callback).onDataReady(streamCaptor.capture());\n  assertStreamOf(expected,streamCaptor.getValue());\n  assertThat(mockWebServer.takeRequest().getPath()).contains(DEFAULT_PATH);\n  for (int i=0; i < numRedirects; i++) {\n    assertThat(mockWebServer.takeRequest().getPath()).contains(redirectBase + i);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 127,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 874,
        "startLineNumber" : 124,
        "startColumnNumber" : 2,
        "endLineNumber" : 144,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testHandlesUpToFiveRedirects() throws Exception {\n  int numRedirects=4;\n  String expected=\"redirectedData\";\n  String redirectBase=\"/redirect\";\n  for (int i=0; i < numRedirects; i++) {\n    mockWebServer.enqueue(new MockResponse().setResponseCode(301).setHeader(\"Location\",mockWebServer.getUrl(redirectBase + i)));\n  }\n  mockWebServer.enqueue(new MockResponse().setResponseCode(200).setBody(expected));\n  getFetcher().loadData(Priority.NORMAL,callback);\n  waitForResponseLatch.await();\n  verify(callback).onDataReady(streamCaptor.capture());\n  assertStreamOf(expected,streamCaptor.getValue());\n  assertThat(mockWebServer.takeRequest().getPath()).contains(DEFAULT_PATH);\n  for (int i=0; i < numRedirects; i++) {\n    assertThat(mockWebServer.takeRequest().getPath()).contains(redirectBase + i);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 135,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 189,
        "startLineNumber" : 129,
        "startColumnNumber" : 4,
        "endLineNumber" : 132,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < numRedirects; i++) {\n  mockWebServer.enqueue(new MockResponse().setResponseCode(301).setHeader(\"Location\",mockWebServer.getUrl(redirectBase + i)));\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 31,
      "astHeight" : 9
    },
    "tokenLength" : 3,
    "type" : "boolean"
  }, {
    "nodeContext" : "i < numRedirects",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 141,
      "startColumnNumber" : 20,
      "endLineNumber" : 141,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 130,
        "startLineNumber" : 141,
        "startColumnNumber" : 4,
        "endLineNumber" : 143,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < numRedirects; i++) {\n  assertThat(mockWebServer.takeRequest().getPath()).contains(redirectBase + i);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 25,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 806,
        "startLineNumber" : 125,
        "startColumnNumber" : 62,
        "endLineNumber" : 144,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int numRedirects=4;\n  String expected=\"redirectedData\";\n  String redirectBase=\"/redirect\";\n  for (int i=0; i < numRedirects; i++) {\n    mockWebServer.enqueue(new MockResponse().setResponseCode(301).setHeader(\"Location\",mockWebServer.getUrl(redirectBase + i)));\n  }\n  mockWebServer.enqueue(new MockResponse().setResponseCode(200).setBody(expected));\n  getFetcher().loadData(Priority.NORMAL,callback);\n  waitForResponseLatch.await();\n  verify(callback).onDataReady(streamCaptor.capture());\n  assertStreamOf(expected,streamCaptor.getValue());\n  assertThat(mockWebServer.takeRequest().getPath()).contains(DEFAULT_PATH);\n  for (int i=0; i < numRedirects; i++) {\n    assertThat(mockWebServer.takeRequest().getPath()).contains(redirectBase + i);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 127,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 874,
        "startLineNumber" : 124,
        "startColumnNumber" : 2,
        "endLineNumber" : 144,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testHandlesUpToFiveRedirects() throws Exception {\n  int numRedirects=4;\n  String expected=\"redirectedData\";\n  String redirectBase=\"/redirect\";\n  for (int i=0; i < numRedirects; i++) {\n    mockWebServer.enqueue(new MockResponse().setResponseCode(301).setHeader(\"Location\",mockWebServer.getUrl(redirectBase + i)));\n  }\n  mockWebServer.enqueue(new MockResponse().setResponseCode(200).setBody(expected));\n  getFetcher().loadData(Priority.NORMAL,callback);\n  waitForResponseLatch.await();\n  verify(callback).onDataReady(streamCaptor.capture());\n  assertStreamOf(expected,streamCaptor.getValue());\n  assertThat(mockWebServer.takeRequest().getPath()).contains(DEFAULT_PATH);\n  for (int i=0; i < numRedirects; i++) {\n    assertThat(mockWebServer.takeRequest().getPath()).contains(redirectBase + i);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 135,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 130,
        "startLineNumber" : 141,
        "startColumnNumber" : 4,
        "endLineNumber" : 143,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < numRedirects; i++) {\n  assertThat(mockWebServer.takeRequest().getPath()).contains(redirectBase + i);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 25,
      "astHeight" : 8
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 16,
    "startLineNumber" : 129,
    "startColumnNumber" : 20,
    "endLineNumber" : 129,
    "endColumnNumber" : 36
  }, {
    "charLength" : 16,
    "startLineNumber" : 141,
    "startColumnNumber" : 20,
    "endLineNumber" : 141,
    "endColumnNumber" : 36
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 1
  } ]
}