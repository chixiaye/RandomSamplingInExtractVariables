{
  "id" : 329,
  "expression" : "height",
  "projectName" : "bumptech@glide",
  "commitID" : "7d9c28ec2763e973775abd5c3e3c971728a48a56",
  "filePath" : "/library/src/main/java/com/bumptech/glide/load/resource/bitmap/StreamBitmapDecoder.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "height",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 59,
      "startColumnNumber" : 59,
      "endLineNumber" : 59,
      "endColumnNumber" : 65
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 59,
        "startColumnNumber" : 13,
        "endLineNumber" : 59,
        "endColumnNumber" : 86
      },
      "nodeContext" : "downsampler.decode(invalidatingStream,width,height,options,callbacks)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 59,
        "startColumnNumber" : 6,
        "endLineNumber" : 59,
        "endColumnNumber" : 87
      },
      "nodeContext" : "return downsampler.decode(invalidatingStream,width,height,options,callbacks);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 58,
        "startColumnNumber" : 8,
        "endLineNumber" : 60,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  return downsampler.decode(invalidatingStream,width,height,options,callbacks);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 250,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 65,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  return downsampler.decode(invalidatingStream,width,height,options,callbacks);\n}\n  finally {\n  exceptionStream.release();\n  if (bytesForStream != null) {\n    ByteArrayPool.get().releaseBytes(bytesForStream);\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 28,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1487,
        "startLineNumber" : 34,
        "startColumnNumber" : 25,
        "endLineNumber" : 66,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  byte[] bytesForStream=null;\n  final RecyclableBufferedInputStream bufferedStream;\n  if (source instanceof RecyclableBufferedInputStream) {\n    bufferedStream=(RecyclableBufferedInputStream)source;\n  }\n else {\n    bytesForStream=ByteArrayPool.get().getBytes();\n    bufferedStream=new RecyclableBufferedInputStream(source,bytesForStream);\n  }\n  ExceptionCatchingInputStream exceptionStream=ExceptionCatchingInputStream.obtain(bufferedStream);\n  MarkEnforcingInputStream invalidatingStream=new MarkEnforcingInputStream(exceptionStream);\n  UntrustedCallbacks callbacks=new UntrustedCallbacks(bufferedStream,exceptionStream);\n  try {\n    return downsampler.decode(invalidatingStream,width,height,options,callbacks);\n  }\n  finally {\n    exceptionStream.release();\n    if (bytesForStream != null) {\n      ByteArrayPool.get().releaseBytes(bytesForStream);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 100,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1615,
        "startLineNumber" : 32,
        "startColumnNumber" : 2,
        "endLineNumber" : 66,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public Resource<Bitmap> decode(InputStream source,int width,int height,Options options) throws IOException {\n  byte[] bytesForStream=null;\n  final RecyclableBufferedInputStream bufferedStream;\n  if (source instanceof RecyclableBufferedInputStream) {\n    bufferedStream=(RecyclableBufferedInputStream)source;\n  }\n else {\n    bytesForStream=ByteArrayPool.get().getBytes();\n    bufferedStream=new RecyclableBufferedInputStream(source,bytesForStream);\n  }\n  ExceptionCatchingInputStream exceptionStream=ExceptionCatchingInputStream.obtain(bufferedStream);\n  MarkEnforcingInputStream invalidatingStream=new MarkEnforcingInputStream(exceptionStream);\n  UntrustedCallbacks callbacks=new UntrustedCallbacks(bufferedStream,exceptionStream);\n  try {\n    return downsampler.decode(invalidatingStream,width,height,options,callbacks);\n  }\n  finally {\n    exceptionStream.release();\n    if (bytesForStream != null) {\n      ByteArrayPool.get().releaseBytes(bytesForStream);\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 126,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 59,
        "startColumnNumber" : 6,
        "endLineNumber" : 59,
        "endColumnNumber" : 87
      },
      "nodeContext" : "return downsampler.decode(invalidatingStream,width,height,options,callbacks);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 9,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 6,
    "startLineNumber" : 59,
    "startColumnNumber" : 59,
    "endLineNumber" : 59,
    "endColumnNumber" : 65
  } ],
  "layoutRelationDataList" : [ ]
}