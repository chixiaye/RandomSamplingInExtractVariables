{
  "id" : 181,
  "expression" : "c1",
  "projectName" : "arduino@Arduino",
  "commitID" : "cf1879f948e0c1fa9ddd91f7348fbdd07fd870cb",
  "filePath" : "/app/src/processing/app/syntax/SyntaxUtilities.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "c1",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 47,
      "startColumnNumber" : 39,
      "endLineNumber" : 47,
      "endColumnNumber" : 41
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 47,
        "startColumnNumber" : 17,
        "endLineNumber" : 47,
        "endColumnNumber" : 42
      },
      "nodeContext" : "Character.toUpperCase(c1)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 47,
        "startColumnNumber" : 12,
        "endLineNumber" : 47,
        "endColumnNumber" : 42
      },
      "nodeContext" : "c1=Character.toUpperCase(c1)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 47,
        "startColumnNumber" : 12,
        "endLineNumber" : 47,
        "endColumnNumber" : 43
      },
      "nodeContext" : "c1=Character.toUpperCase(c1);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 101,
        "startLineNumber" : 46,
        "startColumnNumber" : 10,
        "endLineNumber" : 49,
        "endColumnNumber" : 11
      },
      "nodeContext" : "{\n  c1=Character.toUpperCase(c1);\n  c2=Character.toUpperCase(c2);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 126,
        "startLineNumber" : 45,
        "startColumnNumber" : 8,
        "endLineNumber" : 49,
        "endColumnNumber" : 11
      },
      "nodeContext" : "if (ignoreCase) {\n  c1=Character.toUpperCase(c1);\n  c2=Character.toUpperCase(c2);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 256,
        "startLineNumber" : 42,
        "startColumnNumber" : 6,
        "endLineNumber" : 52,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  char c1=textArray[i];\n  char c2=match.charAt(j);\n  if (ignoreCase) {\n    c1=Character.toUpperCase(c1);\n    c2=Character.toUpperCase(c2);\n  }\n  if (c1 != c2)   return false;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 39,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 311,
        "startLineNumber" : 41,
        "startColumnNumber" : 4,
        "endLineNumber" : 52,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int i=offset, j=0; i < length; i++, j++) {\n  char c1=textArray[i];\n  char c2=match.charAt(j);\n  if (ignoreCase) {\n    c1=Character.toUpperCase(c1);\n    c2=Character.toUpperCase(c2);\n  }\n  if (c1 != c2)   return false;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 55,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 477,
        "startLineNumber" : 36,
        "startColumnNumber" : 2,
        "endLineNumber" : 54,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int length=offset + match.length();\n  char[] textArray=text.array;\n  if (length > text.offset + text.count)   return false;\n  for (int i=offset, j=0; i < length; i++, j++) {\n    char c1=textArray[i];\n    char c2=match.charAt(j);\n    if (ignoreCase) {\n      c1=Character.toUpperCase(c1);\n      c2=Character.toUpperCase(c2);\n    }\n    if (c1 != c2)     return false;\n  }\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 88,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 890,
        "startLineNumber" : 26,
        "startColumnNumber" : 2,
        "endLineNumber" : 54,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Checks if a subregion of a <code>Segment</code> is equal to a string.\n * @param ignoreCase True if case should be ignored, false otherwise\n * @param text The segment\n * @param offset The offset into the segment\n * @param match The string to match\n */\npublic static boolean regionMatches(boolean ignoreCase,Segment text,int offset,String match){\n  int length=offset + match.length();\n  char[] textArray=text.array;\n  if (length > text.offset + text.count)   return false;\n  for (int i=offset, j=0; i < length; i++, j++) {\n    char c1=textArray[i];\n    char c2=match.charAt(j);\n    if (ignoreCase) {\n      c1=Character.toUpperCase(c1);\n      c2=Character.toUpperCase(c2);\n    }\n    if (c1 != c2)     return false;\n  }\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 108,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 47,
        "startColumnNumber" : 12,
        "endLineNumber" : 47,
        "endColumnNumber" : 43
      },
      "nodeContext" : "c1=Character.toUpperCase(c1);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "char"
  }, {
    "nodeContext" : "c1",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 50,
      "startColumnNumber" : 11,
      "endLineNumber" : 50,
      "endColumnNumber" : 13
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 8,
        "startLineNumber" : 50,
        "startColumnNumber" : 11,
        "endLineNumber" : 50,
        "endColumnNumber" : 19
      },
      "nodeContext" : "c1 != c2",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 50,
        "startColumnNumber" : 8,
        "endLineNumber" : 51,
        "endColumnNumber" : 23
      },
      "nodeContext" : "if (c1 != c2) return false;\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 256,
        "startLineNumber" : 42,
        "startColumnNumber" : 6,
        "endLineNumber" : 52,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  char c1=textArray[i];\n  char c2=match.charAt(j);\n  if (ignoreCase) {\n    c1=Character.toUpperCase(c1);\n    c2=Character.toUpperCase(c2);\n  }\n  if (c1 != c2)   return false;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 39,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 311,
        "startLineNumber" : 41,
        "startColumnNumber" : 4,
        "endLineNumber" : 52,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int i=offset, j=0; i < length; i++, j++) {\n  char c1=textArray[i];\n  char c2=match.charAt(j);\n  if (ignoreCase) {\n    c1=Character.toUpperCase(c1);\n    c2=Character.toUpperCase(c2);\n  }\n  if (c1 != c2)   return false;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 55,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 477,
        "startLineNumber" : 36,
        "startColumnNumber" : 2,
        "endLineNumber" : 54,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int length=offset + match.length();\n  char[] textArray=text.array;\n  if (length > text.offset + text.count)   return false;\n  for (int i=offset, j=0; i < length; i++, j++) {\n    char c1=textArray[i];\n    char c2=match.charAt(j);\n    if (ignoreCase) {\n      c1=Character.toUpperCase(c1);\n      c2=Character.toUpperCase(c2);\n    }\n    if (c1 != c2)     return false;\n  }\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 88,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 890,
        "startLineNumber" : 26,
        "startColumnNumber" : 2,
        "endLineNumber" : 54,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Checks if a subregion of a <code>Segment</code> is equal to a string.\n * @param ignoreCase True if case should be ignored, false otherwise\n * @param text The segment\n * @param offset The offset into the segment\n * @param match The string to match\n */\npublic static boolean regionMatches(boolean ignoreCase,Segment text,int offset,String match){\n  int length=offset + match.length();\n  char[] textArray=text.array;\n  if (length > text.offset + text.count)   return false;\n  for (int i=offset, j=0; i < length; i++, j++) {\n    char c1=textArray[i];\n    char c2=match.charAt(j);\n    if (ignoreCase) {\n      c1=Character.toUpperCase(c1);\n      c2=Character.toUpperCase(c2);\n    }\n    if (c1 != c2)     return false;\n  }\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 108,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 8,
        "startLineNumber" : 50,
        "startColumnNumber" : 11,
        "endLineNumber" : 50,
        "endColumnNumber" : 19
      },
      "nodeContext" : "c1 != c2",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "char"
  } ],
  "positionList" : [ {
    "charLength" : 2,
    "startLineNumber" : 47,
    "startColumnNumber" : 39,
    "endLineNumber" : 47,
    "endColumnNumber" : 41
  }, {
    "charLength" : 2,
    "startLineNumber" : 50,
    "startColumnNumber" : 11,
    "endLineNumber" : 50,
    "endColumnNumber" : 13
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}