{
  "id" : 26,
  "expression" : "new DisposableSubscriber<T>(){\n  boolean done;\n  @Override protected void onStart(){\n    super.onStart();\n    try {\n      onStart.run();\n    }\n catch (    Throwable e) {\n      done=true;\n      cancel();\n      try {\n        onError.accept(e);\n      }\n catch (      Throwable ex) {\n        RxJavaPlugins.onError(ex);\n        RxJavaPlugins.onError(e);\n      }\n    }\n  }\n  @Override public void onNext(  T t){\n    if (done) {\n      return;\n    }\n    try {\n      onNext.accept(t);\n    }\n catch (    Throwable e) {\n      done=true;\n      cancel();\n      try {\n        onError.accept(e);\n      }\n catch (      Throwable ex) {\n        RxJavaPlugins.onError(ex);\n        RxJavaPlugins.onError(e);\n      }\n    }\n  }\n  @Override public void onError(  Throwable t){\n    if (done) {\n      RxJavaPlugins.onError(t);\n      return;\n    }\n    done=true;\n    try {\n      onError.accept(t);\n    }\n catch (    Throwable ex) {\n      RxJavaPlugins.onError(ex);\n      RxJavaPlugins.onError(t);\n    }\n  }\n  @Override public void onComplete(){\n    if (done) {\n      return;\n    }\n    done=true;\n    try {\n      onComplete.run();\n    }\n catch (    Throwable e) {\n      RxJavaPlugins.onError(e);\n    }\n  }\n}\n",
  "projectName" : "ReactiveX@RxJava",
  "commitID" : "75c40b58fc3f56283ad88ce299c72419975f6b00",
  "filePath" : "/src/main/java/io/reactivex/subscribers/Subscribers.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new DisposableSubscriber<T>(){\n  boolean done;\n  @Override protected void onStart(){\n    super.onStart();\n    try {\n      onStart.run();\n    }\n catch (    Throwable e) {\n      done=true;\n      cancel();\n      try {\n        onError.accept(e);\n      }\n catch (      Throwable ex) {\n        RxJavaPlugins.onError(ex);\n        RxJavaPlugins.onError(e);\n      }\n    }\n  }\n  @Override public void onNext(  T t){\n    if (done) {\n      return;\n    }\n    try {\n      onNext.accept(t);\n    }\n catch (    Throwable e) {\n      done=true;\n      cancel();\n      try {\n        onError.accept(e);\n      }\n catch (      Throwable ex) {\n        RxJavaPlugins.onError(ex);\n        RxJavaPlugins.onError(e);\n      }\n    }\n  }\n  @Override public void onError(  Throwable t){\n    if (done) {\n      RxJavaPlugins.onError(t);\n      return;\n    }\n    done=true;\n    try {\n      onError.accept(t);\n    }\n catch (    Throwable ex) {\n      RxJavaPlugins.onError(ex);\n      RxJavaPlugins.onError(t);\n    }\n  }\n  @Override public void onComplete(){\n    if (done) {\n      return;\n    }\n    done=true;\n    try {\n      onComplete.run();\n    }\n catch (    Throwable e) {\n      RxJavaPlugins.onError(e);\n    }\n  }\n}\n",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 2033,
      "startLineNumber" : 83,
      "startColumnNumber" : 15,
      "endLineNumber" : 147,
      "endColumnNumber" : 9
    },
    "astNodeNumber" : 200,
    "astHeight" : 13,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2041,
        "startLineNumber" : 83,
        "startColumnNumber" : 8,
        "endLineNumber" : 147,
        "endColumnNumber" : 10
      },
      "nodeContext" : "return new DisposableSubscriber<T>(){\n  boolean done;\n  @Override protected void onStart(){\n    super.onStart();\n    try {\n      onStart.run();\n    }\n catch (    Throwable e) {\n      done=true;\n      cancel();\n      try {\n        onError.accept(e);\n      }\n catch (      Throwable ex) {\n        RxJavaPlugins.onError(ex);\n        RxJavaPlugins.onError(e);\n      }\n    }\n  }\n  @Override public void onNext(  T t){\n    if (done) {\n      return;\n    }\n    try {\n      onNext.accept(t);\n    }\n catch (    Throwable e) {\n      done=true;\n      cancel();\n      try {\n        onError.accept(e);\n      }\n catch (      Throwable ex) {\n        RxJavaPlugins.onError(ex);\n        RxJavaPlugins.onError(e);\n      }\n    }\n  }\n  @Override public void onError(  Throwable t){\n    if (done) {\n      RxJavaPlugins.onError(t);\n      return;\n    }\n    done=true;\n    try {\n      onError.accept(t);\n    }\n catch (    Throwable ex) {\n      RxJavaPlugins.onError(ex);\n      RxJavaPlugins.onError(t);\n    }\n  }\n  @Override public void onComplete(){\n    if (done) {\n      return;\n    }\n    done=true;\n    try {\n      onComplete.run();\n    }\n catch (    Throwable e) {\n      RxJavaPlugins.onError(e);\n    }\n  }\n}\n;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 201,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2307,
        "startLineNumber" : 78,
        "startColumnNumber" : 6,
        "endLineNumber" : 148,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Objects.requireNonNull(onNext,\"onNext is null\");\n  Objects.requireNonNull(onError,\"onError is null\");\n  Objects.requireNonNull(onComplete,\"onComplete is null\");\n  Objects.requireNonNull(onStart,\"onStart is null\");\n  return new DisposableSubscriber<T>(){\n    boolean done;\n    @Override protected void onStart(){\n      super.onStart();\n      try {\n        onStart.run();\n      }\n catch (      Throwable e) {\n        done=true;\n        cancel();\n        try {\n          onError.accept(e);\n        }\n catch (        Throwable ex) {\n          RxJavaPlugins.onError(ex);\n          RxJavaPlugins.onError(e);\n        }\n      }\n    }\n    @Override public void onNext(    T t){\n      if (done) {\n        return;\n      }\n      try {\n        onNext.accept(t);\n      }\n catch (      Throwable e) {\n        done=true;\n        cancel();\n        try {\n          onError.accept(e);\n        }\n catch (        Throwable ex) {\n          RxJavaPlugins.onError(ex);\n          RxJavaPlugins.onError(e);\n        }\n      }\n    }\n    @Override public void onError(    Throwable t){\n      if (done) {\n        RxJavaPlugins.onError(t);\n        return;\n      }\n      done=true;\n      try {\n        onError.accept(t);\n      }\n catch (      Throwable ex) {\n        RxJavaPlugins.onError(ex);\n        RxJavaPlugins.onError(t);\n      }\n    }\n    @Override public void onComplete(){\n      if (done) {\n        return;\n      }\n      done=true;\n      try {\n        onComplete.run();\n      }\n catch (      Throwable e) {\n        RxJavaPlugins.onError(e);\n      }\n    }\n  }\n;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 226,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2553,
        "startLineNumber" : 73,
        "startColumnNumber" : 4,
        "endLineNumber" : 148,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static <T>DisposableSubscriber<T> createDisposable(final Consumer<? super T> onNext,final Consumer<? super Throwable> onError,final Runnable onComplete,final Runnable onStart){\n  Objects.requireNonNull(onNext,\"onNext is null\");\n  Objects.requireNonNull(onError,\"onError is null\");\n  Objects.requireNonNull(onComplete,\"onComplete is null\");\n  Objects.requireNonNull(onStart,\"onStart is null\");\n  return new DisposableSubscriber<T>(){\n    boolean done;\n    @Override protected void onStart(){\n      super.onStart();\n      try {\n        onStart.run();\n      }\n catch (      Throwable e) {\n        done=true;\n        cancel();\n        try {\n          onError.accept(e);\n        }\n catch (        Throwable ex) {\n          RxJavaPlugins.onError(ex);\n          RxJavaPlugins.onError(e);\n        }\n      }\n    }\n    @Override public void onNext(    T t){\n      if (done) {\n        return;\n      }\n      try {\n        onNext.accept(t);\n      }\n catch (      Throwable e) {\n        done=true;\n        cancel();\n        try {\n          onError.accept(e);\n        }\n catch (        Throwable ex) {\n          RxJavaPlugins.onError(ex);\n          RxJavaPlugins.onError(e);\n        }\n      }\n    }\n    @Override public void onError(    Throwable t){\n      if (done) {\n        RxJavaPlugins.onError(t);\n        return;\n      }\n      done=true;\n      try {\n        onError.accept(t);\n      }\n catch (      Throwable ex) {\n        RxJavaPlugins.onError(ex);\n        RxJavaPlugins.onError(t);\n      }\n    }\n    @Override public void onComplete(){\n      if (done) {\n        return;\n      }\n      done=true;\n      try {\n        onComplete.run();\n      }\n catch (      Throwable e) {\n        RxJavaPlugins.onError(e);\n      }\n    }\n  }\n;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 265,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2041,
        "startLineNumber" : 83,
        "startColumnNumber" : 8,
        "endLineNumber" : 147,
        "endColumnNumber" : 10
      },
      "nodeContext" : "return new DisposableSubscriber<T>(){\n  boolean done;\n  @Override protected void onStart(){\n    super.onStart();\n    try {\n      onStart.run();\n    }\n catch (    Throwable e) {\n      done=true;\n      cancel();\n      try {\n        onError.accept(e);\n      }\n catch (      Throwable ex) {\n        RxJavaPlugins.onError(ex);\n        RxJavaPlugins.onError(e);\n      }\n    }\n  }\n  @Override public void onNext(  T t){\n    if (done) {\n      return;\n    }\n    try {\n      onNext.accept(t);\n    }\n catch (    Throwable e) {\n      done=true;\n      cancel();\n      try {\n        onError.accept(e);\n      }\n catch (      Throwable ex) {\n        RxJavaPlugins.onError(ex);\n        RxJavaPlugins.onError(e);\n      }\n    }\n  }\n  @Override public void onError(  Throwable t){\n    if (done) {\n      RxJavaPlugins.onError(t);\n      return;\n    }\n    done=true;\n    try {\n      onError.accept(t);\n    }\n catch (    Throwable ex) {\n      RxJavaPlugins.onError(ex);\n      RxJavaPlugins.onError(t);\n    }\n  }\n  @Override public void onComplete(){\n    if (done) {\n      return;\n    }\n    done=true;\n    try {\n      onComplete.run();\n    }\n catch (    Throwable e) {\n      RxJavaPlugins.onError(e);\n    }\n  }\n}\n;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 201,
      "astHeight" : 14
    },
    "tokenLength" : 76,
    "type" : ""
  } ],
  "positionList" : [ {
    "charLength" : 2033,
    "startLineNumber" : 83,
    "startColumnNumber" : 15,
    "endLineNumber" : 147,
    "endColumnNumber" : 9
  } ],
  "layoutRelationDataList" : [ ]
}