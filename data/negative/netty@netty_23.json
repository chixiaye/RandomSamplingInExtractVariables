{
  "id" : 23,
  "expression" : "allocator.getAllocationType() == StandardAllocationTypes.ON_HEAP",
  "projectName" : "netty@netty",
  "commitID" : "8a68c3e58d4663ae42e41a90d0d11aec3c25016b",
  "filePath" : "/buffer/src/main/java/io/netty/buffer/api/internal/AdaptableBuffer.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "allocator.getAllocationType() == StandardAllocationTypes.ON_HEAP",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 64,
      "startLineNumber" : 52,
      "startColumnNumber" : 16,
      "endLineNumber" : 52,
      "endColumnNumber" : 80
    },
    "astNodeNumber" : 7,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 420,
        "startLineNumber" : 52,
        "startColumnNumber" : 12,
        "endLineNumber" : 58,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (allocator.getAllocationType() == StandardAllocationTypes.ON_HEAP) {\n  onHeap=allocator;\n  offHeap=allocator.isPooling() ? BufferAllocator.offHeapPooled() : BufferAllocator.offHeapUnpooled();\n}\n else {\n  onHeap=allocator.isPooling() ? BufferAllocator.onHeapPooled() : BufferAllocator.onHeapUnpooled();\n  offHeap=allocator;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 44,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 771,
        "startLineNumber" : 48,
        "startColumnNumber" : 25,
        "endLineNumber" : 61,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  BufferAllocator allocator=control.getAllocator();\n  final BufferAllocator onHeap;\n  final BufferAllocator offHeap;\n  if (allocator.getAllocationType() == StandardAllocationTypes.ON_HEAP) {\n    onHeap=allocator;\n    offHeap=allocator.isPooling() ? BufferAllocator.offHeapPooled() : BufferAllocator.offHeapUnpooled();\n  }\n else {\n    onHeap=allocator.isPooling() ? BufferAllocator.onHeapPooled() : BufferAllocator.onHeapUnpooled();\n    offHeap=allocator;\n  }\n  ByteBufAllocatorAdaptor alloc=new ByteBufAllocatorAdaptor(onHeap,offHeap);\n  return adaptor=new ByteBufAdaptor(alloc,this,Integer.MAX_VALUE);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 86,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 788,
        "startLineNumber" : 48,
        "startColumnNumber" : 8,
        "endLineNumber" : 61,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (bba == null) {\n  BufferAllocator allocator=control.getAllocator();\n  final BufferAllocator onHeap;\n  final BufferAllocator offHeap;\n  if (allocator.getAllocationType() == StandardAllocationTypes.ON_HEAP) {\n    onHeap=allocator;\n    offHeap=allocator.isPooling() ? BufferAllocator.offHeapPooled() : BufferAllocator.offHeapUnpooled();\n  }\n else {\n    onHeap=allocator.isPooling() ? BufferAllocator.onHeapPooled() : BufferAllocator.onHeapUnpooled();\n    offHeap=allocator;\n  }\n  ByteBufAllocatorAdaptor alloc=new ByteBufAllocatorAdaptor(onHeap,offHeap);\n  return adaptor=new ByteBufAdaptor(alloc,this,Integer.MAX_VALUE);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 90,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 866,
        "startLineNumber" : 46,
        "startColumnNumber" : 31,
        "endLineNumber" : 63,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ByteBufAdaptor bba=adaptor;\n  if (bba == null) {\n    BufferAllocator allocator=control.getAllocator();\n    final BufferAllocator onHeap;\n    final BufferAllocator offHeap;\n    if (allocator.getAllocationType() == StandardAllocationTypes.ON_HEAP) {\n      onHeap=allocator;\n      offHeap=allocator.isPooling() ? BufferAllocator.offHeapPooled() : BufferAllocator.offHeapUnpooled();\n    }\n else {\n      onHeap=allocator.isPooling() ? BufferAllocator.onHeapPooled() : BufferAllocator.onHeapUnpooled();\n      offHeap=allocator;\n    }\n    ByteBufAllocatorAdaptor alloc=new ByteBufAllocatorAdaptor(onHeap,offHeap);\n    return adaptor=new ByteBufAdaptor(alloc,this,Integer.MAX_VALUE);\n  }\n  return bba;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 99,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 908,
        "startLineNumber" : 45,
        "startColumnNumber" : 4,
        "endLineNumber" : 63,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public ByteBuf asByteBuf(){\n  ByteBufAdaptor bba=adaptor;\n  if (bba == null) {\n    BufferAllocator allocator=control.getAllocator();\n    final BufferAllocator onHeap;\n    final BufferAllocator offHeap;\n    if (allocator.getAllocationType() == StandardAllocationTypes.ON_HEAP) {\n      onHeap=allocator;\n      offHeap=allocator.isPooling() ? BufferAllocator.offHeapPooled() : BufferAllocator.offHeapUnpooled();\n    }\n else {\n      onHeap=allocator.isPooling() ? BufferAllocator.onHeapPooled() : BufferAllocator.onHeapUnpooled();\n      offHeap=allocator;\n    }\n    ByteBufAllocatorAdaptor alloc=new ByteBufAllocatorAdaptor(onHeap,offHeap);\n    return adaptor=new ByteBufAdaptor(alloc,this,Integer.MAX_VALUE);\n  }\n  return bba;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 106,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 420,
        "startLineNumber" : 52,
        "startColumnNumber" : 12,
        "endLineNumber" : 58,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (allocator.getAllocationType() == StandardAllocationTypes.ON_HEAP) {\n  onHeap=allocator;\n  offHeap=allocator.isPooling() ? BufferAllocator.offHeapPooled() : BufferAllocator.offHeapUnpooled();\n}\n else {\n  onHeap=allocator.isPooling() ? BufferAllocator.onHeapPooled() : BufferAllocator.onHeapUnpooled();\n  offHeap=allocator;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 44,
      "astHeight" : 7
    },
    "tokenLength" : 6,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 64,
    "startLineNumber" : 52,
    "startColumnNumber" : 16,
    "endLineNumber" : 52,
    "endColumnNumber" : 80
  } ],
  "layoutRelationDataList" : [ ]
}