{
  "id" : 102,
  "expression" : "methodHolder",
  "projectName" : "androidannotations@androidannotations",
  "commitID" : "b60a7ff27cb1bcb0eac2710c15c4957c0d992e27",
  "filePath" : "/AndroidAnnotations/androidannotations/src/main/java/com/googlecode/androidannotations/processing/rest/MethodProcessor.java",
  "occurrences" : 12,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "methodHolder",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 54,
      "startColumnNumber" : 81,
      "endLineNumber" : 54,
      "endColumnNumber" : 93
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 54,
        "startColumnNumber" : 81,
        "endLineNumber" : 54,
        "endColumnNumber" : 106
      },
      "nodeContext" : "methodHolder.getElement()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 54,
        "startColumnNumber" : 36,
        "endLineNumber" : 54,
        "endColumnNumber" : 107
      },
      "nodeContext" : "restImplementationsHolder.getEnclosingHolder(methodHolder.getElement())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 54,
        "startColumnNumber" : 27,
        "endLineNumber" : 54,
        "endColumnNumber" : 107
      },
      "nodeContext" : "holder=restImplementationsHolder.getEnclosingHolder(methodHolder.getElement())",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 106,
        "startLineNumber" : 54,
        "startColumnNumber" : 2,
        "endLineNumber" : 54,
        "endColumnNumber" : 108
      },
      "nodeContext" : "RestImplementationHolder holder=restImplementationsHolder.getEnclosingHolder(methodHolder.getElement());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1846,
        "startLineNumber" : 53,
        "startColumnNumber" : 82,
        "endLineNumber" : 101,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  RestImplementationHolder holder=restImplementationsHolder.getEnclosingHolder(methodHolder.getElement());\n  ExecutableElement executableElement=(ExecutableElement)methodHolder.getElement();\n  JClass expectedClass=methodHolder.getExpectedClass();\n  JClass generatedReturnType=methodHolder.getGeneratedReturnType();\n  JMethod method;\n  String methodName=executableElement.getSimpleName().toString();\n  boolean methodReturnVoid=generatedReturnType == null && expectedClass == null;\n  if (methodReturnVoid) {\n    method=holder.restImplementationClass.method(JMod.PUBLIC,void.class,methodName);\n  }\n else {\n    method=holder.restImplementationClass.method(JMod.PUBLIC,methodHolder.getGeneratedReturnType(),methodName);\n  }\n  method.annotate(Override.class);\n  JBlock body=method.body();\n  JInvocation restCall=JExpr.invoke(holder.restTemplateField,\"exchange\");\n  restCall.arg(methodHolder.getUrl());\n  JClass httpMethod=holder.refClass(ProcessorConstants.HTTP_METHOD);\n  String restMethodInCapitalLetters=getTarget().getSimpleName().toUpperCase();\n  restCall.arg(httpMethod.staticRef(restMethodInCapitalLetters));\n  TreeMap<String,JVar> methodParams=(TreeMap<String,JVar>)generateMethodParamsVar(method,executableElement,holder);\n  methodHolder.setBody(body);\n  methodHolder.setMethodParams(methodParams);\n  JVar hashMapVar=generateHashMapVar(methodHolder);\n  restCall=addHttpEntityVar(restCall,methodHolder);\n  restCall=addResponseEntityArg(restCall,methodHolder);\n  boolean hasParametersInUrl=hashMapVar != null;\n  if (hasParametersInUrl) {\n    restCall.arg(hashMapVar);\n  }\n  restCall=addResultCallMethod(restCall,methodHolder);\n  insertRestCallInBody(body,restCall,methodReturnVoid);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 245,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1927,
        "startLineNumber" : 53,
        "startColumnNumber" : 1,
        "endLineNumber" : 101,
        "endColumnNumber" : 2
      },
      "nodeContext" : "protected void generateRestTemplateCallBlock(MethodProcessorHolder methodHolder){\n  RestImplementationHolder holder=restImplementationsHolder.getEnclosingHolder(methodHolder.getElement());\n  ExecutableElement executableElement=(ExecutableElement)methodHolder.getElement();\n  JClass expectedClass=methodHolder.getExpectedClass();\n  JClass generatedReturnType=methodHolder.getGeneratedReturnType();\n  JMethod method;\n  String methodName=executableElement.getSimpleName().toString();\n  boolean methodReturnVoid=generatedReturnType == null && expectedClass == null;\n  if (methodReturnVoid) {\n    method=holder.restImplementationClass.method(JMod.PUBLIC,void.class,methodName);\n  }\n else {\n    method=holder.restImplementationClass.method(JMod.PUBLIC,methodHolder.getGeneratedReturnType(),methodName);\n  }\n  method.annotate(Override.class);\n  JBlock body=method.body();\n  JInvocation restCall=JExpr.invoke(holder.restTemplateField,\"exchange\");\n  restCall.arg(methodHolder.getUrl());\n  JClass httpMethod=holder.refClass(ProcessorConstants.HTTP_METHOD);\n  String restMethodInCapitalLetters=getTarget().getSimpleName().toUpperCase();\n  restCall.arg(httpMethod.staticRef(restMethodInCapitalLetters));\n  TreeMap<String,JVar> methodParams=(TreeMap<String,JVar>)generateMethodParamsVar(method,executableElement,holder);\n  methodHolder.setBody(body);\n  methodHolder.setMethodParams(methodParams);\n  JVar hashMapVar=generateHashMapVar(methodHolder);\n  restCall=addHttpEntityVar(restCall,methodHolder);\n  restCall=addResponseEntityArg(restCall,methodHolder);\n  boolean hasParametersInUrl=hashMapVar != null;\n  if (hasParametersInUrl) {\n    restCall.arg(hashMapVar);\n  }\n  restCall=addResultCallMethod(restCall,methodHolder);\n  insertRestCallInBody(body,restCall,methodReturnVoid);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 253,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 106,
        "startLineNumber" : 54,
        "startColumnNumber" : 2,
        "endLineNumber" : 54,
        "endColumnNumber" : 108
      },
      "nodeContext" : "RestImplementationHolder holder=restImplementationsHolder.getEnclosingHolder(methodHolder.getElement());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.googlecode.androidannotations.processing.rest.MethodProcessorHolder"
  }, {
    "nodeContext" : "methodHolder",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 55,
      "startColumnNumber" : 60,
      "endLineNumber" : 55,
      "endColumnNumber" : 72
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CastExpression,expression]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 55,
        "startColumnNumber" : 60,
        "endLineNumber" : 55,
        "endColumnNumber" : 85
      },
      "nodeContext" : "methodHolder.getElement()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 55,
        "startColumnNumber" : 40,
        "endLineNumber" : 55,
        "endColumnNumber" : 85
      },
      "nodeContext" : "(ExecutableElement)methodHolder.getElement()",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 55,
        "startColumnNumber" : 20,
        "endLineNumber" : 55,
        "endColumnNumber" : 85
      },
      "nodeContext" : "executableElement=(ExecutableElement)methodHolder.getElement()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 55,
        "startColumnNumber" : 2,
        "endLineNumber" : 55,
        "endColumnNumber" : 86
      },
      "nodeContext" : "ExecutableElement executableElement=(ExecutableElement)methodHolder.getElement();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1846,
        "startLineNumber" : 53,
        "startColumnNumber" : 82,
        "endLineNumber" : 101,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  RestImplementationHolder holder=restImplementationsHolder.getEnclosingHolder(methodHolder.getElement());\n  ExecutableElement executableElement=(ExecutableElement)methodHolder.getElement();\n  JClass expectedClass=methodHolder.getExpectedClass();\n  JClass generatedReturnType=methodHolder.getGeneratedReturnType();\n  JMethod method;\n  String methodName=executableElement.getSimpleName().toString();\n  boolean methodReturnVoid=generatedReturnType == null && expectedClass == null;\n  if (methodReturnVoid) {\n    method=holder.restImplementationClass.method(JMod.PUBLIC,void.class,methodName);\n  }\n else {\n    method=holder.restImplementationClass.method(JMod.PUBLIC,methodHolder.getGeneratedReturnType(),methodName);\n  }\n  method.annotate(Override.class);\n  JBlock body=method.body();\n  JInvocation restCall=JExpr.invoke(holder.restTemplateField,\"exchange\");\n  restCall.arg(methodHolder.getUrl());\n  JClass httpMethod=holder.refClass(ProcessorConstants.HTTP_METHOD);\n  String restMethodInCapitalLetters=getTarget().getSimpleName().toUpperCase();\n  restCall.arg(httpMethod.staticRef(restMethodInCapitalLetters));\n  TreeMap<String,JVar> methodParams=(TreeMap<String,JVar>)generateMethodParamsVar(method,executableElement,holder);\n  methodHolder.setBody(body);\n  methodHolder.setMethodParams(methodParams);\n  JVar hashMapVar=generateHashMapVar(methodHolder);\n  restCall=addHttpEntityVar(restCall,methodHolder);\n  restCall=addResponseEntityArg(restCall,methodHolder);\n  boolean hasParametersInUrl=hashMapVar != null;\n  if (hasParametersInUrl) {\n    restCall.arg(hashMapVar);\n  }\n  restCall=addResultCallMethod(restCall,methodHolder);\n  insertRestCallInBody(body,restCall,methodReturnVoid);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 245,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1927,
        "startLineNumber" : 53,
        "startColumnNumber" : 1,
        "endLineNumber" : 101,
        "endColumnNumber" : 2
      },
      "nodeContext" : "protected void generateRestTemplateCallBlock(MethodProcessorHolder methodHolder){\n  RestImplementationHolder holder=restImplementationsHolder.getEnclosingHolder(methodHolder.getElement());\n  ExecutableElement executableElement=(ExecutableElement)methodHolder.getElement();\n  JClass expectedClass=methodHolder.getExpectedClass();\n  JClass generatedReturnType=methodHolder.getGeneratedReturnType();\n  JMethod method;\n  String methodName=executableElement.getSimpleName().toString();\n  boolean methodReturnVoid=generatedReturnType == null && expectedClass == null;\n  if (methodReturnVoid) {\n    method=holder.restImplementationClass.method(JMod.PUBLIC,void.class,methodName);\n  }\n else {\n    method=holder.restImplementationClass.method(JMod.PUBLIC,methodHolder.getGeneratedReturnType(),methodName);\n  }\n  method.annotate(Override.class);\n  JBlock body=method.body();\n  JInvocation restCall=JExpr.invoke(holder.restTemplateField,\"exchange\");\n  restCall.arg(methodHolder.getUrl());\n  JClass httpMethod=holder.refClass(ProcessorConstants.HTTP_METHOD);\n  String restMethodInCapitalLetters=getTarget().getSimpleName().toUpperCase();\n  restCall.arg(httpMethod.staticRef(restMethodInCapitalLetters));\n  TreeMap<String,JVar> methodParams=(TreeMap<String,JVar>)generateMethodParamsVar(method,executableElement,holder);\n  methodHolder.setBody(body);\n  methodHolder.setMethodParams(methodParams);\n  JVar hashMapVar=generateHashMapVar(methodHolder);\n  restCall=addHttpEntityVar(restCall,methodHolder);\n  restCall=addResponseEntityArg(restCall,methodHolder);\n  boolean hasParametersInUrl=hashMapVar != null;\n  if (hasParametersInUrl) {\n    restCall.arg(hashMapVar);\n  }\n  restCall=addResultCallMethod(restCall,methodHolder);\n  insertRestCallInBody(body,restCall,methodReturnVoid);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 253,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 55,
        "startColumnNumber" : 2,
        "endLineNumber" : 55,
        "endColumnNumber" : 86
      },
      "nodeContext" : "ExecutableElement executableElement=(ExecutableElement)methodHolder.getElement();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.googlecode.androidannotations.processing.rest.MethodProcessorHolder"
  }, {
    "nodeContext" : "methodHolder",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 56,
      "startColumnNumber" : 25,
      "endLineNumber" : 56,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 56,
        "startColumnNumber" : 25,
        "endLineNumber" : 56,
        "endColumnNumber" : 56
      },
      "nodeContext" : "methodHolder.getExpectedClass()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 56,
        "startColumnNumber" : 9,
        "endLineNumber" : 56,
        "endColumnNumber" : 56
      },
      "nodeContext" : "expectedClass=methodHolder.getExpectedClass()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 56,
        "startColumnNumber" : 2,
        "endLineNumber" : 56,
        "endColumnNumber" : 57
      },
      "nodeContext" : "JClass expectedClass=methodHolder.getExpectedClass();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1846,
        "startLineNumber" : 53,
        "startColumnNumber" : 82,
        "endLineNumber" : 101,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  RestImplementationHolder holder=restImplementationsHolder.getEnclosingHolder(methodHolder.getElement());\n  ExecutableElement executableElement=(ExecutableElement)methodHolder.getElement();\n  JClass expectedClass=methodHolder.getExpectedClass();\n  JClass generatedReturnType=methodHolder.getGeneratedReturnType();\n  JMethod method;\n  String methodName=executableElement.getSimpleName().toString();\n  boolean methodReturnVoid=generatedReturnType == null && expectedClass == null;\n  if (methodReturnVoid) {\n    method=holder.restImplementationClass.method(JMod.PUBLIC,void.class,methodName);\n  }\n else {\n    method=holder.restImplementationClass.method(JMod.PUBLIC,methodHolder.getGeneratedReturnType(),methodName);\n  }\n  method.annotate(Override.class);\n  JBlock body=method.body();\n  JInvocation restCall=JExpr.invoke(holder.restTemplateField,\"exchange\");\n  restCall.arg(methodHolder.getUrl());\n  JClass httpMethod=holder.refClass(ProcessorConstants.HTTP_METHOD);\n  String restMethodInCapitalLetters=getTarget().getSimpleName().toUpperCase();\n  restCall.arg(httpMethod.staticRef(restMethodInCapitalLetters));\n  TreeMap<String,JVar> methodParams=(TreeMap<String,JVar>)generateMethodParamsVar(method,executableElement,holder);\n  methodHolder.setBody(body);\n  methodHolder.setMethodParams(methodParams);\n  JVar hashMapVar=generateHashMapVar(methodHolder);\n  restCall=addHttpEntityVar(restCall,methodHolder);\n  restCall=addResponseEntityArg(restCall,methodHolder);\n  boolean hasParametersInUrl=hashMapVar != null;\n  if (hasParametersInUrl) {\n    restCall.arg(hashMapVar);\n  }\n  restCall=addResultCallMethod(restCall,methodHolder);\n  insertRestCallInBody(body,restCall,methodReturnVoid);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 245,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1927,
        "startLineNumber" : 53,
        "startColumnNumber" : 1,
        "endLineNumber" : 101,
        "endColumnNumber" : 2
      },
      "nodeContext" : "protected void generateRestTemplateCallBlock(MethodProcessorHolder methodHolder){\n  RestImplementationHolder holder=restImplementationsHolder.getEnclosingHolder(methodHolder.getElement());\n  ExecutableElement executableElement=(ExecutableElement)methodHolder.getElement();\n  JClass expectedClass=methodHolder.getExpectedClass();\n  JClass generatedReturnType=methodHolder.getGeneratedReturnType();\n  JMethod method;\n  String methodName=executableElement.getSimpleName().toString();\n  boolean methodReturnVoid=generatedReturnType == null && expectedClass == null;\n  if (methodReturnVoid) {\n    method=holder.restImplementationClass.method(JMod.PUBLIC,void.class,methodName);\n  }\n else {\n    method=holder.restImplementationClass.method(JMod.PUBLIC,methodHolder.getGeneratedReturnType(),methodName);\n  }\n  method.annotate(Override.class);\n  JBlock body=method.body();\n  JInvocation restCall=JExpr.invoke(holder.restTemplateField,\"exchange\");\n  restCall.arg(methodHolder.getUrl());\n  JClass httpMethod=holder.refClass(ProcessorConstants.HTTP_METHOD);\n  String restMethodInCapitalLetters=getTarget().getSimpleName().toUpperCase();\n  restCall.arg(httpMethod.staticRef(restMethodInCapitalLetters));\n  TreeMap<String,JVar> methodParams=(TreeMap<String,JVar>)generateMethodParamsVar(method,executableElement,holder);\n  methodHolder.setBody(body);\n  methodHolder.setMethodParams(methodParams);\n  JVar hashMapVar=generateHashMapVar(methodHolder);\n  restCall=addHttpEntityVar(restCall,methodHolder);\n  restCall=addResponseEntityArg(restCall,methodHolder);\n  boolean hasParametersInUrl=hashMapVar != null;\n  if (hasParametersInUrl) {\n    restCall.arg(hashMapVar);\n  }\n  restCall=addResultCallMethod(restCall,methodHolder);\n  insertRestCallInBody(body,restCall,methodReturnVoid);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 253,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 56,
        "startColumnNumber" : 2,
        "endLineNumber" : 56,
        "endColumnNumber" : 57
      },
      "nodeContext" : "JClass expectedClass=methodHolder.getExpectedClass();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.googlecode.androidannotations.processing.rest.MethodProcessorHolder"
  }, {
    "nodeContext" : "methodHolder",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 57,
      "startColumnNumber" : 31,
      "endLineNumber" : 57,
      "endColumnNumber" : 43
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 57,
        "startColumnNumber" : 31,
        "endLineNumber" : 57,
        "endColumnNumber" : 68
      },
      "nodeContext" : "methodHolder.getGeneratedReturnType()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 57,
        "startColumnNumber" : 9,
        "endLineNumber" : 57,
        "endColumnNumber" : 68
      },
      "nodeContext" : "generatedReturnType=methodHolder.getGeneratedReturnType()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 57,
        "startColumnNumber" : 2,
        "endLineNumber" : 57,
        "endColumnNumber" : 69
      },
      "nodeContext" : "JClass generatedReturnType=methodHolder.getGeneratedReturnType();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1846,
        "startLineNumber" : 53,
        "startColumnNumber" : 82,
        "endLineNumber" : 101,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  RestImplementationHolder holder=restImplementationsHolder.getEnclosingHolder(methodHolder.getElement());\n  ExecutableElement executableElement=(ExecutableElement)methodHolder.getElement();\n  JClass expectedClass=methodHolder.getExpectedClass();\n  JClass generatedReturnType=methodHolder.getGeneratedReturnType();\n  JMethod method;\n  String methodName=executableElement.getSimpleName().toString();\n  boolean methodReturnVoid=generatedReturnType == null && expectedClass == null;\n  if (methodReturnVoid) {\n    method=holder.restImplementationClass.method(JMod.PUBLIC,void.class,methodName);\n  }\n else {\n    method=holder.restImplementationClass.method(JMod.PUBLIC,methodHolder.getGeneratedReturnType(),methodName);\n  }\n  method.annotate(Override.class);\n  JBlock body=method.body();\n  JInvocation restCall=JExpr.invoke(holder.restTemplateField,\"exchange\");\n  restCall.arg(methodHolder.getUrl());\n  JClass httpMethod=holder.refClass(ProcessorConstants.HTTP_METHOD);\n  String restMethodInCapitalLetters=getTarget().getSimpleName().toUpperCase();\n  restCall.arg(httpMethod.staticRef(restMethodInCapitalLetters));\n  TreeMap<String,JVar> methodParams=(TreeMap<String,JVar>)generateMethodParamsVar(method,executableElement,holder);\n  methodHolder.setBody(body);\n  methodHolder.setMethodParams(methodParams);\n  JVar hashMapVar=generateHashMapVar(methodHolder);\n  restCall=addHttpEntityVar(restCall,methodHolder);\n  restCall=addResponseEntityArg(restCall,methodHolder);\n  boolean hasParametersInUrl=hashMapVar != null;\n  if (hasParametersInUrl) {\n    restCall.arg(hashMapVar);\n  }\n  restCall=addResultCallMethod(restCall,methodHolder);\n  insertRestCallInBody(body,restCall,methodReturnVoid);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 245,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1927,
        "startLineNumber" : 53,
        "startColumnNumber" : 1,
        "endLineNumber" : 101,
        "endColumnNumber" : 2
      },
      "nodeContext" : "protected void generateRestTemplateCallBlock(MethodProcessorHolder methodHolder){\n  RestImplementationHolder holder=restImplementationsHolder.getEnclosingHolder(methodHolder.getElement());\n  ExecutableElement executableElement=(ExecutableElement)methodHolder.getElement();\n  JClass expectedClass=methodHolder.getExpectedClass();\n  JClass generatedReturnType=methodHolder.getGeneratedReturnType();\n  JMethod method;\n  String methodName=executableElement.getSimpleName().toString();\n  boolean methodReturnVoid=generatedReturnType == null && expectedClass == null;\n  if (methodReturnVoid) {\n    method=holder.restImplementationClass.method(JMod.PUBLIC,void.class,methodName);\n  }\n else {\n    method=holder.restImplementationClass.method(JMod.PUBLIC,methodHolder.getGeneratedReturnType(),methodName);\n  }\n  method.annotate(Override.class);\n  JBlock body=method.body();\n  JInvocation restCall=JExpr.invoke(holder.restTemplateField,\"exchange\");\n  restCall.arg(methodHolder.getUrl());\n  JClass httpMethod=holder.refClass(ProcessorConstants.HTTP_METHOD);\n  String restMethodInCapitalLetters=getTarget().getSimpleName().toUpperCase();\n  restCall.arg(httpMethod.staticRef(restMethodInCapitalLetters));\n  TreeMap<String,JVar> methodParams=(TreeMap<String,JVar>)generateMethodParamsVar(method,executableElement,holder);\n  methodHolder.setBody(body);\n  methodHolder.setMethodParams(methodParams);\n  JVar hashMapVar=generateHashMapVar(methodHolder);\n  restCall=addHttpEntityVar(restCall,methodHolder);\n  restCall=addResponseEntityArg(restCall,methodHolder);\n  boolean hasParametersInUrl=hashMapVar != null;\n  if (hasParametersInUrl) {\n    restCall.arg(hashMapVar);\n  }\n  restCall=addResultCallMethod(restCall,methodHolder);\n  insertRestCallInBody(body,restCall,methodReturnVoid);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 253,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 57,
        "startColumnNumber" : 2,
        "endLineNumber" : 57,
        "endColumnNumber" : 69
      },
      "nodeContext" : "JClass generatedReturnType=methodHolder.getGeneratedReturnType();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.googlecode.androidannotations.processing.rest.MethodProcessorHolder"
  }, {
    "nodeContext" : "methodHolder",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 65,
      "startColumnNumber" : 63,
      "endLineNumber" : 65,
      "endColumnNumber" : 75
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 65,
        "startColumnNumber" : 63,
        "endLineNumber" : 65,
        "endColumnNumber" : 100
      },
      "nodeContext" : "methodHolder.getGeneratedReturnType()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 101,
        "startLineNumber" : 65,
        "startColumnNumber" : 12,
        "endLineNumber" : 65,
        "endColumnNumber" : 113
      },
      "nodeContext" : "holder.restImplementationClass.method(JMod.PUBLIC,methodHolder.getGeneratedReturnType(),methodName)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 110,
        "startLineNumber" : 65,
        "startColumnNumber" : 3,
        "endLineNumber" : 65,
        "endColumnNumber" : 113
      },
      "nodeContext" : "method=holder.restImplementationClass.method(JMod.PUBLIC,methodHolder.getGeneratedReturnType(),methodName)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 14,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 111,
        "startLineNumber" : 65,
        "startColumnNumber" : 3,
        "endLineNumber" : 65,
        "endColumnNumber" : 114
      },
      "nodeContext" : "method=holder.restImplementationClass.method(JMod.PUBLIC,methodHolder.getGeneratedReturnType(),methodName);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 120,
        "startLineNumber" : 64,
        "startColumnNumber" : 9,
        "endLineNumber" : 66,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  method=holder.restImplementationClass.method(JMod.PUBLIC,methodHolder.getGeneratedReturnType(),methodName);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 241,
        "startLineNumber" : 62,
        "startColumnNumber" : 2,
        "endLineNumber" : 66,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (methodReturnVoid) {\n  method=holder.restImplementationClass.method(JMod.PUBLIC,void.class,methodName);\n}\n else {\n  method=holder.restImplementationClass.method(JMod.PUBLIC,methodHolder.getGeneratedReturnType(),methodName);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 33,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1846,
        "startLineNumber" : 53,
        "startColumnNumber" : 82,
        "endLineNumber" : 101,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  RestImplementationHolder holder=restImplementationsHolder.getEnclosingHolder(methodHolder.getElement());\n  ExecutableElement executableElement=(ExecutableElement)methodHolder.getElement();\n  JClass expectedClass=methodHolder.getExpectedClass();\n  JClass generatedReturnType=methodHolder.getGeneratedReturnType();\n  JMethod method;\n  String methodName=executableElement.getSimpleName().toString();\n  boolean methodReturnVoid=generatedReturnType == null && expectedClass == null;\n  if (methodReturnVoid) {\n    method=holder.restImplementationClass.method(JMod.PUBLIC,void.class,methodName);\n  }\n else {\n    method=holder.restImplementationClass.method(JMod.PUBLIC,methodHolder.getGeneratedReturnType(),methodName);\n  }\n  method.annotate(Override.class);\n  JBlock body=method.body();\n  JInvocation restCall=JExpr.invoke(holder.restTemplateField,\"exchange\");\n  restCall.arg(methodHolder.getUrl());\n  JClass httpMethod=holder.refClass(ProcessorConstants.HTTP_METHOD);\n  String restMethodInCapitalLetters=getTarget().getSimpleName().toUpperCase();\n  restCall.arg(httpMethod.staticRef(restMethodInCapitalLetters));\n  TreeMap<String,JVar> methodParams=(TreeMap<String,JVar>)generateMethodParamsVar(method,executableElement,holder);\n  methodHolder.setBody(body);\n  methodHolder.setMethodParams(methodParams);\n  JVar hashMapVar=generateHashMapVar(methodHolder);\n  restCall=addHttpEntityVar(restCall,methodHolder);\n  restCall=addResponseEntityArg(restCall,methodHolder);\n  boolean hasParametersInUrl=hashMapVar != null;\n  if (hasParametersInUrl) {\n    restCall.arg(hashMapVar);\n  }\n  restCall=addResultCallMethod(restCall,methodHolder);\n  insertRestCallInBody(body,restCall,methodReturnVoid);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 245,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1927,
        "startLineNumber" : 53,
        "startColumnNumber" : 1,
        "endLineNumber" : 101,
        "endColumnNumber" : 2
      },
      "nodeContext" : "protected void generateRestTemplateCallBlock(MethodProcessorHolder methodHolder){\n  RestImplementationHolder holder=restImplementationsHolder.getEnclosingHolder(methodHolder.getElement());\n  ExecutableElement executableElement=(ExecutableElement)methodHolder.getElement();\n  JClass expectedClass=methodHolder.getExpectedClass();\n  JClass generatedReturnType=methodHolder.getGeneratedReturnType();\n  JMethod method;\n  String methodName=executableElement.getSimpleName().toString();\n  boolean methodReturnVoid=generatedReturnType == null && expectedClass == null;\n  if (methodReturnVoid) {\n    method=holder.restImplementationClass.method(JMod.PUBLIC,void.class,methodName);\n  }\n else {\n    method=holder.restImplementationClass.method(JMod.PUBLIC,methodHolder.getGeneratedReturnType(),methodName);\n  }\n  method.annotate(Override.class);\n  JBlock body=method.body();\n  JInvocation restCall=JExpr.invoke(holder.restTemplateField,\"exchange\");\n  restCall.arg(methodHolder.getUrl());\n  JClass httpMethod=holder.refClass(ProcessorConstants.HTTP_METHOD);\n  String restMethodInCapitalLetters=getTarget().getSimpleName().toUpperCase();\n  restCall.arg(httpMethod.staticRef(restMethodInCapitalLetters));\n  TreeMap<String,JVar> methodParams=(TreeMap<String,JVar>)generateMethodParamsVar(method,executableElement,holder);\n  methodHolder.setBody(body);\n  methodHolder.setMethodParams(methodParams);\n  JVar hashMapVar=generateHashMapVar(methodHolder);\n  restCall=addHttpEntityVar(restCall,methodHolder);\n  restCall=addResponseEntityArg(restCall,methodHolder);\n  boolean hasParametersInUrl=hashMapVar != null;\n  if (hasParametersInUrl) {\n    restCall.arg(hashMapVar);\n  }\n  restCall=addResultCallMethod(restCall,methodHolder);\n  insertRestCallInBody(body,restCall,methodReturnVoid);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 253,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 111,
        "startLineNumber" : 65,
        "startColumnNumber" : 3,
        "endLineNumber" : 65,
        "endColumnNumber" : 114
      },
      "nodeContext" : "method=holder.restImplementationClass.method(JMod.PUBLIC,methodHolder.getGeneratedReturnType(),methodName);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.googlecode.androidannotations.processing.rest.MethodProcessorHolder"
  }, {
    "nodeContext" : "methodHolder",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 75,
      "startColumnNumber" : 15,
      "endLineNumber" : 75,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 75,
        "startColumnNumber" : 15,
        "endLineNumber" : 75,
        "endColumnNumber" : 36
      },
      "nodeContext" : "methodHolder.getUrl()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 75,
        "startColumnNumber" : 2,
        "endLineNumber" : 75,
        "endColumnNumber" : 37
      },
      "nodeContext" : "restCall.arg(methodHolder.getUrl())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 75,
        "startColumnNumber" : 2,
        "endLineNumber" : 75,
        "endColumnNumber" : 38
      },
      "nodeContext" : "restCall.arg(methodHolder.getUrl());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1846,
        "startLineNumber" : 53,
        "startColumnNumber" : 82,
        "endLineNumber" : 101,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  RestImplementationHolder holder=restImplementationsHolder.getEnclosingHolder(methodHolder.getElement());\n  ExecutableElement executableElement=(ExecutableElement)methodHolder.getElement();\n  JClass expectedClass=methodHolder.getExpectedClass();\n  JClass generatedReturnType=methodHolder.getGeneratedReturnType();\n  JMethod method;\n  String methodName=executableElement.getSimpleName().toString();\n  boolean methodReturnVoid=generatedReturnType == null && expectedClass == null;\n  if (methodReturnVoid) {\n    method=holder.restImplementationClass.method(JMod.PUBLIC,void.class,methodName);\n  }\n else {\n    method=holder.restImplementationClass.method(JMod.PUBLIC,methodHolder.getGeneratedReturnType(),methodName);\n  }\n  method.annotate(Override.class);\n  JBlock body=method.body();\n  JInvocation restCall=JExpr.invoke(holder.restTemplateField,\"exchange\");\n  restCall.arg(methodHolder.getUrl());\n  JClass httpMethod=holder.refClass(ProcessorConstants.HTTP_METHOD);\n  String restMethodInCapitalLetters=getTarget().getSimpleName().toUpperCase();\n  restCall.arg(httpMethod.staticRef(restMethodInCapitalLetters));\n  TreeMap<String,JVar> methodParams=(TreeMap<String,JVar>)generateMethodParamsVar(method,executableElement,holder);\n  methodHolder.setBody(body);\n  methodHolder.setMethodParams(methodParams);\n  JVar hashMapVar=generateHashMapVar(methodHolder);\n  restCall=addHttpEntityVar(restCall,methodHolder);\n  restCall=addResponseEntityArg(restCall,methodHolder);\n  boolean hasParametersInUrl=hashMapVar != null;\n  if (hasParametersInUrl) {\n    restCall.arg(hashMapVar);\n  }\n  restCall=addResultCallMethod(restCall,methodHolder);\n  insertRestCallInBody(body,restCall,methodReturnVoid);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 245,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1927,
        "startLineNumber" : 53,
        "startColumnNumber" : 1,
        "endLineNumber" : 101,
        "endColumnNumber" : 2
      },
      "nodeContext" : "protected void generateRestTemplateCallBlock(MethodProcessorHolder methodHolder){\n  RestImplementationHolder holder=restImplementationsHolder.getEnclosingHolder(methodHolder.getElement());\n  ExecutableElement executableElement=(ExecutableElement)methodHolder.getElement();\n  JClass expectedClass=methodHolder.getExpectedClass();\n  JClass generatedReturnType=methodHolder.getGeneratedReturnType();\n  JMethod method;\n  String methodName=executableElement.getSimpleName().toString();\n  boolean methodReturnVoid=generatedReturnType == null && expectedClass == null;\n  if (methodReturnVoid) {\n    method=holder.restImplementationClass.method(JMod.PUBLIC,void.class,methodName);\n  }\n else {\n    method=holder.restImplementationClass.method(JMod.PUBLIC,methodHolder.getGeneratedReturnType(),methodName);\n  }\n  method.annotate(Override.class);\n  JBlock body=method.body();\n  JInvocation restCall=JExpr.invoke(holder.restTemplateField,\"exchange\");\n  restCall.arg(methodHolder.getUrl());\n  JClass httpMethod=holder.refClass(ProcessorConstants.HTTP_METHOD);\n  String restMethodInCapitalLetters=getTarget().getSimpleName().toUpperCase();\n  restCall.arg(httpMethod.staticRef(restMethodInCapitalLetters));\n  TreeMap<String,JVar> methodParams=(TreeMap<String,JVar>)generateMethodParamsVar(method,executableElement,holder);\n  methodHolder.setBody(body);\n  methodHolder.setMethodParams(methodParams);\n  JVar hashMapVar=generateHashMapVar(methodHolder);\n  restCall=addHttpEntityVar(restCall,methodHolder);\n  restCall=addResponseEntityArg(restCall,methodHolder);\n  boolean hasParametersInUrl=hashMapVar != null;\n  if (hasParametersInUrl) {\n    restCall.arg(hashMapVar);\n  }\n  restCall=addResultCallMethod(restCall,methodHolder);\n  insertRestCallInBody(body,restCall,methodReturnVoid);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 253,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 75,
        "startColumnNumber" : 2,
        "endLineNumber" : 75,
        "endColumnNumber" : 38
      },
      "nodeContext" : "restCall.arg(methodHolder.getUrl());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.googlecode.androidannotations.processing.rest.MethodProcessorHolder"
  }, {
    "nodeContext" : "methodHolder",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 85,
      "startColumnNumber" : 2,
      "endLineNumber" : 85,
      "endColumnNumber" : 14
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 85,
        "startColumnNumber" : 2,
        "endLineNumber" : 85,
        "endColumnNumber" : 28
      },
      "nodeContext" : "methodHolder.setBody(body)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 85,
        "startColumnNumber" : 2,
        "endLineNumber" : 85,
        "endColumnNumber" : 29
      },
      "nodeContext" : "methodHolder.setBody(body);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1846,
        "startLineNumber" : 53,
        "startColumnNumber" : 82,
        "endLineNumber" : 101,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  RestImplementationHolder holder=restImplementationsHolder.getEnclosingHolder(methodHolder.getElement());\n  ExecutableElement executableElement=(ExecutableElement)methodHolder.getElement();\n  JClass expectedClass=methodHolder.getExpectedClass();\n  JClass generatedReturnType=methodHolder.getGeneratedReturnType();\n  JMethod method;\n  String methodName=executableElement.getSimpleName().toString();\n  boolean methodReturnVoid=generatedReturnType == null && expectedClass == null;\n  if (methodReturnVoid) {\n    method=holder.restImplementationClass.method(JMod.PUBLIC,void.class,methodName);\n  }\n else {\n    method=holder.restImplementationClass.method(JMod.PUBLIC,methodHolder.getGeneratedReturnType(),methodName);\n  }\n  method.annotate(Override.class);\n  JBlock body=method.body();\n  JInvocation restCall=JExpr.invoke(holder.restTemplateField,\"exchange\");\n  restCall.arg(methodHolder.getUrl());\n  JClass httpMethod=holder.refClass(ProcessorConstants.HTTP_METHOD);\n  String restMethodInCapitalLetters=getTarget().getSimpleName().toUpperCase();\n  restCall.arg(httpMethod.staticRef(restMethodInCapitalLetters));\n  TreeMap<String,JVar> methodParams=(TreeMap<String,JVar>)generateMethodParamsVar(method,executableElement,holder);\n  methodHolder.setBody(body);\n  methodHolder.setMethodParams(methodParams);\n  JVar hashMapVar=generateHashMapVar(methodHolder);\n  restCall=addHttpEntityVar(restCall,methodHolder);\n  restCall=addResponseEntityArg(restCall,methodHolder);\n  boolean hasParametersInUrl=hashMapVar != null;\n  if (hasParametersInUrl) {\n    restCall.arg(hashMapVar);\n  }\n  restCall=addResultCallMethod(restCall,methodHolder);\n  insertRestCallInBody(body,restCall,methodReturnVoid);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 245,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1927,
        "startLineNumber" : 53,
        "startColumnNumber" : 1,
        "endLineNumber" : 101,
        "endColumnNumber" : 2
      },
      "nodeContext" : "protected void generateRestTemplateCallBlock(MethodProcessorHolder methodHolder){\n  RestImplementationHolder holder=restImplementationsHolder.getEnclosingHolder(methodHolder.getElement());\n  ExecutableElement executableElement=(ExecutableElement)methodHolder.getElement();\n  JClass expectedClass=methodHolder.getExpectedClass();\n  JClass generatedReturnType=methodHolder.getGeneratedReturnType();\n  JMethod method;\n  String methodName=executableElement.getSimpleName().toString();\n  boolean methodReturnVoid=generatedReturnType == null && expectedClass == null;\n  if (methodReturnVoid) {\n    method=holder.restImplementationClass.method(JMod.PUBLIC,void.class,methodName);\n  }\n else {\n    method=holder.restImplementationClass.method(JMod.PUBLIC,methodHolder.getGeneratedReturnType(),methodName);\n  }\n  method.annotate(Override.class);\n  JBlock body=method.body();\n  JInvocation restCall=JExpr.invoke(holder.restTemplateField,\"exchange\");\n  restCall.arg(methodHolder.getUrl());\n  JClass httpMethod=holder.refClass(ProcessorConstants.HTTP_METHOD);\n  String restMethodInCapitalLetters=getTarget().getSimpleName().toUpperCase();\n  restCall.arg(httpMethod.staticRef(restMethodInCapitalLetters));\n  TreeMap<String,JVar> methodParams=(TreeMap<String,JVar>)generateMethodParamsVar(method,executableElement,holder);\n  methodHolder.setBody(body);\n  methodHolder.setMethodParams(methodParams);\n  JVar hashMapVar=generateHashMapVar(methodHolder);\n  restCall=addHttpEntityVar(restCall,methodHolder);\n  restCall=addResponseEntityArg(restCall,methodHolder);\n  boolean hasParametersInUrl=hashMapVar != null;\n  if (hasParametersInUrl) {\n    restCall.arg(hashMapVar);\n  }\n  restCall=addResultCallMethod(restCall,methodHolder);\n  insertRestCallInBody(body,restCall,methodReturnVoid);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 253,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 85,
        "startColumnNumber" : 2,
        "endLineNumber" : 85,
        "endColumnNumber" : 29
      },
      "nodeContext" : "methodHolder.setBody(body);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.googlecode.androidannotations.processing.rest.MethodProcessorHolder"
  }, {
    "nodeContext" : "methodHolder",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 86,
      "startColumnNumber" : 2,
      "endLineNumber" : 86,
      "endColumnNumber" : 14
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 86,
        "startColumnNumber" : 2,
        "endLineNumber" : 86,
        "endColumnNumber" : 44
      },
      "nodeContext" : "methodHolder.setMethodParams(methodParams)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 86,
        "startColumnNumber" : 2,
        "endLineNumber" : 86,
        "endColumnNumber" : 45
      },
      "nodeContext" : "methodHolder.setMethodParams(methodParams);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1846,
        "startLineNumber" : 53,
        "startColumnNumber" : 82,
        "endLineNumber" : 101,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  RestImplementationHolder holder=restImplementationsHolder.getEnclosingHolder(methodHolder.getElement());\n  ExecutableElement executableElement=(ExecutableElement)methodHolder.getElement();\n  JClass expectedClass=methodHolder.getExpectedClass();\n  JClass generatedReturnType=methodHolder.getGeneratedReturnType();\n  JMethod method;\n  String methodName=executableElement.getSimpleName().toString();\n  boolean methodReturnVoid=generatedReturnType == null && expectedClass == null;\n  if (methodReturnVoid) {\n    method=holder.restImplementationClass.method(JMod.PUBLIC,void.class,methodName);\n  }\n else {\n    method=holder.restImplementationClass.method(JMod.PUBLIC,methodHolder.getGeneratedReturnType(),methodName);\n  }\n  method.annotate(Override.class);\n  JBlock body=method.body();\n  JInvocation restCall=JExpr.invoke(holder.restTemplateField,\"exchange\");\n  restCall.arg(methodHolder.getUrl());\n  JClass httpMethod=holder.refClass(ProcessorConstants.HTTP_METHOD);\n  String restMethodInCapitalLetters=getTarget().getSimpleName().toUpperCase();\n  restCall.arg(httpMethod.staticRef(restMethodInCapitalLetters));\n  TreeMap<String,JVar> methodParams=(TreeMap<String,JVar>)generateMethodParamsVar(method,executableElement,holder);\n  methodHolder.setBody(body);\n  methodHolder.setMethodParams(methodParams);\n  JVar hashMapVar=generateHashMapVar(methodHolder);\n  restCall=addHttpEntityVar(restCall,methodHolder);\n  restCall=addResponseEntityArg(restCall,methodHolder);\n  boolean hasParametersInUrl=hashMapVar != null;\n  if (hasParametersInUrl) {\n    restCall.arg(hashMapVar);\n  }\n  restCall=addResultCallMethod(restCall,methodHolder);\n  insertRestCallInBody(body,restCall,methodReturnVoid);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 245,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1927,
        "startLineNumber" : 53,
        "startColumnNumber" : 1,
        "endLineNumber" : 101,
        "endColumnNumber" : 2
      },
      "nodeContext" : "protected void generateRestTemplateCallBlock(MethodProcessorHolder methodHolder){\n  RestImplementationHolder holder=restImplementationsHolder.getEnclosingHolder(methodHolder.getElement());\n  ExecutableElement executableElement=(ExecutableElement)methodHolder.getElement();\n  JClass expectedClass=methodHolder.getExpectedClass();\n  JClass generatedReturnType=methodHolder.getGeneratedReturnType();\n  JMethod method;\n  String methodName=executableElement.getSimpleName().toString();\n  boolean methodReturnVoid=generatedReturnType == null && expectedClass == null;\n  if (methodReturnVoid) {\n    method=holder.restImplementationClass.method(JMod.PUBLIC,void.class,methodName);\n  }\n else {\n    method=holder.restImplementationClass.method(JMod.PUBLIC,methodHolder.getGeneratedReturnType(),methodName);\n  }\n  method.annotate(Override.class);\n  JBlock body=method.body();\n  JInvocation restCall=JExpr.invoke(holder.restTemplateField,\"exchange\");\n  restCall.arg(methodHolder.getUrl());\n  JClass httpMethod=holder.refClass(ProcessorConstants.HTTP_METHOD);\n  String restMethodInCapitalLetters=getTarget().getSimpleName().toUpperCase();\n  restCall.arg(httpMethod.staticRef(restMethodInCapitalLetters));\n  TreeMap<String,JVar> methodParams=(TreeMap<String,JVar>)generateMethodParamsVar(method,executableElement,holder);\n  methodHolder.setBody(body);\n  methodHolder.setMethodParams(methodParams);\n  JVar hashMapVar=generateHashMapVar(methodHolder);\n  restCall=addHttpEntityVar(restCall,methodHolder);\n  restCall=addResponseEntityArg(restCall,methodHolder);\n  boolean hasParametersInUrl=hashMapVar != null;\n  if (hasParametersInUrl) {\n    restCall.arg(hashMapVar);\n  }\n  restCall=addResultCallMethod(restCall,methodHolder);\n  insertRestCallInBody(body,restCall,methodReturnVoid);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 253,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 86,
        "startColumnNumber" : 2,
        "endLineNumber" : 86,
        "endColumnNumber" : 45
      },
      "nodeContext" : "methodHolder.setMethodParams(methodParams);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.googlecode.androidannotations.processing.rest.MethodProcessorHolder"
  }, {
    "nodeContext" : "methodHolder",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 88,
      "startColumnNumber" : 39,
      "endLineNumber" : 88,
      "endColumnNumber" : 51
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 88,
        "startColumnNumber" : 20,
        "endLineNumber" : 88,
        "endColumnNumber" : 52
      },
      "nodeContext" : "generateHashMapVar(methodHolder)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 88,
        "startColumnNumber" : 7,
        "endLineNumber" : 88,
        "endColumnNumber" : 52
      },
      "nodeContext" : "hashMapVar=generateHashMapVar(methodHolder)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 88,
        "startColumnNumber" : 2,
        "endLineNumber" : 88,
        "endColumnNumber" : 53
      },
      "nodeContext" : "JVar hashMapVar=generateHashMapVar(methodHolder);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1846,
        "startLineNumber" : 53,
        "startColumnNumber" : 82,
        "endLineNumber" : 101,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  RestImplementationHolder holder=restImplementationsHolder.getEnclosingHolder(methodHolder.getElement());\n  ExecutableElement executableElement=(ExecutableElement)methodHolder.getElement();\n  JClass expectedClass=methodHolder.getExpectedClass();\n  JClass generatedReturnType=methodHolder.getGeneratedReturnType();\n  JMethod method;\n  String methodName=executableElement.getSimpleName().toString();\n  boolean methodReturnVoid=generatedReturnType == null && expectedClass == null;\n  if (methodReturnVoid) {\n    method=holder.restImplementationClass.method(JMod.PUBLIC,void.class,methodName);\n  }\n else {\n    method=holder.restImplementationClass.method(JMod.PUBLIC,methodHolder.getGeneratedReturnType(),methodName);\n  }\n  method.annotate(Override.class);\n  JBlock body=method.body();\n  JInvocation restCall=JExpr.invoke(holder.restTemplateField,\"exchange\");\n  restCall.arg(methodHolder.getUrl());\n  JClass httpMethod=holder.refClass(ProcessorConstants.HTTP_METHOD);\n  String restMethodInCapitalLetters=getTarget().getSimpleName().toUpperCase();\n  restCall.arg(httpMethod.staticRef(restMethodInCapitalLetters));\n  TreeMap<String,JVar> methodParams=(TreeMap<String,JVar>)generateMethodParamsVar(method,executableElement,holder);\n  methodHolder.setBody(body);\n  methodHolder.setMethodParams(methodParams);\n  JVar hashMapVar=generateHashMapVar(methodHolder);\n  restCall=addHttpEntityVar(restCall,methodHolder);\n  restCall=addResponseEntityArg(restCall,methodHolder);\n  boolean hasParametersInUrl=hashMapVar != null;\n  if (hasParametersInUrl) {\n    restCall.arg(hashMapVar);\n  }\n  restCall=addResultCallMethod(restCall,methodHolder);\n  insertRestCallInBody(body,restCall,methodReturnVoid);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 245,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1927,
        "startLineNumber" : 53,
        "startColumnNumber" : 1,
        "endLineNumber" : 101,
        "endColumnNumber" : 2
      },
      "nodeContext" : "protected void generateRestTemplateCallBlock(MethodProcessorHolder methodHolder){\n  RestImplementationHolder holder=restImplementationsHolder.getEnclosingHolder(methodHolder.getElement());\n  ExecutableElement executableElement=(ExecutableElement)methodHolder.getElement();\n  JClass expectedClass=methodHolder.getExpectedClass();\n  JClass generatedReturnType=methodHolder.getGeneratedReturnType();\n  JMethod method;\n  String methodName=executableElement.getSimpleName().toString();\n  boolean methodReturnVoid=generatedReturnType == null && expectedClass == null;\n  if (methodReturnVoid) {\n    method=holder.restImplementationClass.method(JMod.PUBLIC,void.class,methodName);\n  }\n else {\n    method=holder.restImplementationClass.method(JMod.PUBLIC,methodHolder.getGeneratedReturnType(),methodName);\n  }\n  method.annotate(Override.class);\n  JBlock body=method.body();\n  JInvocation restCall=JExpr.invoke(holder.restTemplateField,\"exchange\");\n  restCall.arg(methodHolder.getUrl());\n  JClass httpMethod=holder.refClass(ProcessorConstants.HTTP_METHOD);\n  String restMethodInCapitalLetters=getTarget().getSimpleName().toUpperCase();\n  restCall.arg(httpMethod.staticRef(restMethodInCapitalLetters));\n  TreeMap<String,JVar> methodParams=(TreeMap<String,JVar>)generateMethodParamsVar(method,executableElement,holder);\n  methodHolder.setBody(body);\n  methodHolder.setMethodParams(methodParams);\n  JVar hashMapVar=generateHashMapVar(methodHolder);\n  restCall=addHttpEntityVar(restCall,methodHolder);\n  restCall=addResponseEntityArg(restCall,methodHolder);\n  boolean hasParametersInUrl=hashMapVar != null;\n  if (hasParametersInUrl) {\n    restCall.arg(hashMapVar);\n  }\n  restCall=addResultCallMethod(restCall,methodHolder);\n  insertRestCallInBody(body,restCall,methodReturnVoid);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 253,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 88,
        "startColumnNumber" : 2,
        "endLineNumber" : 88,
        "endColumnNumber" : 53
      },
      "nodeContext" : "JVar hashMapVar=generateHashMapVar(methodHolder);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.googlecode.androidannotations.processing.rest.MethodProcessorHolder"
  }, {
    "nodeContext" : "methodHolder",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 90,
      "startColumnNumber" : 40,
      "endLineNumber" : 90,
      "endColumnNumber" : 52
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 90,
        "startColumnNumber" : 13,
        "endLineNumber" : 90,
        "endColumnNumber" : 53
      },
      "nodeContext" : "addHttpEntityVar(restCall,methodHolder)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 90,
        "startColumnNumber" : 2,
        "endLineNumber" : 90,
        "endColumnNumber" : 53
      },
      "nodeContext" : "restCall=addHttpEntityVar(restCall,methodHolder)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 90,
        "startColumnNumber" : 2,
        "endLineNumber" : 90,
        "endColumnNumber" : 54
      },
      "nodeContext" : "restCall=addHttpEntityVar(restCall,methodHolder);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1846,
        "startLineNumber" : 53,
        "startColumnNumber" : 82,
        "endLineNumber" : 101,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  RestImplementationHolder holder=restImplementationsHolder.getEnclosingHolder(methodHolder.getElement());\n  ExecutableElement executableElement=(ExecutableElement)methodHolder.getElement();\n  JClass expectedClass=methodHolder.getExpectedClass();\n  JClass generatedReturnType=methodHolder.getGeneratedReturnType();\n  JMethod method;\n  String methodName=executableElement.getSimpleName().toString();\n  boolean methodReturnVoid=generatedReturnType == null && expectedClass == null;\n  if (methodReturnVoid) {\n    method=holder.restImplementationClass.method(JMod.PUBLIC,void.class,methodName);\n  }\n else {\n    method=holder.restImplementationClass.method(JMod.PUBLIC,methodHolder.getGeneratedReturnType(),methodName);\n  }\n  method.annotate(Override.class);\n  JBlock body=method.body();\n  JInvocation restCall=JExpr.invoke(holder.restTemplateField,\"exchange\");\n  restCall.arg(methodHolder.getUrl());\n  JClass httpMethod=holder.refClass(ProcessorConstants.HTTP_METHOD);\n  String restMethodInCapitalLetters=getTarget().getSimpleName().toUpperCase();\n  restCall.arg(httpMethod.staticRef(restMethodInCapitalLetters));\n  TreeMap<String,JVar> methodParams=(TreeMap<String,JVar>)generateMethodParamsVar(method,executableElement,holder);\n  methodHolder.setBody(body);\n  methodHolder.setMethodParams(methodParams);\n  JVar hashMapVar=generateHashMapVar(methodHolder);\n  restCall=addHttpEntityVar(restCall,methodHolder);\n  restCall=addResponseEntityArg(restCall,methodHolder);\n  boolean hasParametersInUrl=hashMapVar != null;\n  if (hasParametersInUrl) {\n    restCall.arg(hashMapVar);\n  }\n  restCall=addResultCallMethod(restCall,methodHolder);\n  insertRestCallInBody(body,restCall,methodReturnVoid);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 245,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1927,
        "startLineNumber" : 53,
        "startColumnNumber" : 1,
        "endLineNumber" : 101,
        "endColumnNumber" : 2
      },
      "nodeContext" : "protected void generateRestTemplateCallBlock(MethodProcessorHolder methodHolder){\n  RestImplementationHolder holder=restImplementationsHolder.getEnclosingHolder(methodHolder.getElement());\n  ExecutableElement executableElement=(ExecutableElement)methodHolder.getElement();\n  JClass expectedClass=methodHolder.getExpectedClass();\n  JClass generatedReturnType=methodHolder.getGeneratedReturnType();\n  JMethod method;\n  String methodName=executableElement.getSimpleName().toString();\n  boolean methodReturnVoid=generatedReturnType == null && expectedClass == null;\n  if (methodReturnVoid) {\n    method=holder.restImplementationClass.method(JMod.PUBLIC,void.class,methodName);\n  }\n else {\n    method=holder.restImplementationClass.method(JMod.PUBLIC,methodHolder.getGeneratedReturnType(),methodName);\n  }\n  method.annotate(Override.class);\n  JBlock body=method.body();\n  JInvocation restCall=JExpr.invoke(holder.restTemplateField,\"exchange\");\n  restCall.arg(methodHolder.getUrl());\n  JClass httpMethod=holder.refClass(ProcessorConstants.HTTP_METHOD);\n  String restMethodInCapitalLetters=getTarget().getSimpleName().toUpperCase();\n  restCall.arg(httpMethod.staticRef(restMethodInCapitalLetters));\n  TreeMap<String,JVar> methodParams=(TreeMap<String,JVar>)generateMethodParamsVar(method,executableElement,holder);\n  methodHolder.setBody(body);\n  methodHolder.setMethodParams(methodParams);\n  JVar hashMapVar=generateHashMapVar(methodHolder);\n  restCall=addHttpEntityVar(restCall,methodHolder);\n  restCall=addResponseEntityArg(restCall,methodHolder);\n  boolean hasParametersInUrl=hashMapVar != null;\n  if (hasParametersInUrl) {\n    restCall.arg(hashMapVar);\n  }\n  restCall=addResultCallMethod(restCall,methodHolder);\n  insertRestCallInBody(body,restCall,methodReturnVoid);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 253,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 90,
        "startColumnNumber" : 2,
        "endLineNumber" : 90,
        "endColumnNumber" : 54
      },
      "nodeContext" : "restCall=addHttpEntityVar(restCall,methodHolder);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.googlecode.androidannotations.processing.rest.MethodProcessorHolder"
  }, {
    "nodeContext" : "methodHolder",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 91,
      "startColumnNumber" : 44,
      "endLineNumber" : 91,
      "endColumnNumber" : 56
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 91,
        "startColumnNumber" : 13,
        "endLineNumber" : 91,
        "endColumnNumber" : 57
      },
      "nodeContext" : "addResponseEntityArg(restCall,methodHolder)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 91,
        "startColumnNumber" : 2,
        "endLineNumber" : 91,
        "endColumnNumber" : 57
      },
      "nodeContext" : "restCall=addResponseEntityArg(restCall,methodHolder)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 91,
        "startColumnNumber" : 2,
        "endLineNumber" : 91,
        "endColumnNumber" : 58
      },
      "nodeContext" : "restCall=addResponseEntityArg(restCall,methodHolder);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1846,
        "startLineNumber" : 53,
        "startColumnNumber" : 82,
        "endLineNumber" : 101,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  RestImplementationHolder holder=restImplementationsHolder.getEnclosingHolder(methodHolder.getElement());\n  ExecutableElement executableElement=(ExecutableElement)methodHolder.getElement();\n  JClass expectedClass=methodHolder.getExpectedClass();\n  JClass generatedReturnType=methodHolder.getGeneratedReturnType();\n  JMethod method;\n  String methodName=executableElement.getSimpleName().toString();\n  boolean methodReturnVoid=generatedReturnType == null && expectedClass == null;\n  if (methodReturnVoid) {\n    method=holder.restImplementationClass.method(JMod.PUBLIC,void.class,methodName);\n  }\n else {\n    method=holder.restImplementationClass.method(JMod.PUBLIC,methodHolder.getGeneratedReturnType(),methodName);\n  }\n  method.annotate(Override.class);\n  JBlock body=method.body();\n  JInvocation restCall=JExpr.invoke(holder.restTemplateField,\"exchange\");\n  restCall.arg(methodHolder.getUrl());\n  JClass httpMethod=holder.refClass(ProcessorConstants.HTTP_METHOD);\n  String restMethodInCapitalLetters=getTarget().getSimpleName().toUpperCase();\n  restCall.arg(httpMethod.staticRef(restMethodInCapitalLetters));\n  TreeMap<String,JVar> methodParams=(TreeMap<String,JVar>)generateMethodParamsVar(method,executableElement,holder);\n  methodHolder.setBody(body);\n  methodHolder.setMethodParams(methodParams);\n  JVar hashMapVar=generateHashMapVar(methodHolder);\n  restCall=addHttpEntityVar(restCall,methodHolder);\n  restCall=addResponseEntityArg(restCall,methodHolder);\n  boolean hasParametersInUrl=hashMapVar != null;\n  if (hasParametersInUrl) {\n    restCall.arg(hashMapVar);\n  }\n  restCall=addResultCallMethod(restCall,methodHolder);\n  insertRestCallInBody(body,restCall,methodReturnVoid);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 245,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1927,
        "startLineNumber" : 53,
        "startColumnNumber" : 1,
        "endLineNumber" : 101,
        "endColumnNumber" : 2
      },
      "nodeContext" : "protected void generateRestTemplateCallBlock(MethodProcessorHolder methodHolder){\n  RestImplementationHolder holder=restImplementationsHolder.getEnclosingHolder(methodHolder.getElement());\n  ExecutableElement executableElement=(ExecutableElement)methodHolder.getElement();\n  JClass expectedClass=methodHolder.getExpectedClass();\n  JClass generatedReturnType=methodHolder.getGeneratedReturnType();\n  JMethod method;\n  String methodName=executableElement.getSimpleName().toString();\n  boolean methodReturnVoid=generatedReturnType == null && expectedClass == null;\n  if (methodReturnVoid) {\n    method=holder.restImplementationClass.method(JMod.PUBLIC,void.class,methodName);\n  }\n else {\n    method=holder.restImplementationClass.method(JMod.PUBLIC,methodHolder.getGeneratedReturnType(),methodName);\n  }\n  method.annotate(Override.class);\n  JBlock body=method.body();\n  JInvocation restCall=JExpr.invoke(holder.restTemplateField,\"exchange\");\n  restCall.arg(methodHolder.getUrl());\n  JClass httpMethod=holder.refClass(ProcessorConstants.HTTP_METHOD);\n  String restMethodInCapitalLetters=getTarget().getSimpleName().toUpperCase();\n  restCall.arg(httpMethod.staticRef(restMethodInCapitalLetters));\n  TreeMap<String,JVar> methodParams=(TreeMap<String,JVar>)generateMethodParamsVar(method,executableElement,holder);\n  methodHolder.setBody(body);\n  methodHolder.setMethodParams(methodParams);\n  JVar hashMapVar=generateHashMapVar(methodHolder);\n  restCall=addHttpEntityVar(restCall,methodHolder);\n  restCall=addResponseEntityArg(restCall,methodHolder);\n  boolean hasParametersInUrl=hashMapVar != null;\n  if (hasParametersInUrl) {\n    restCall.arg(hashMapVar);\n  }\n  restCall=addResultCallMethod(restCall,methodHolder);\n  insertRestCallInBody(body,restCall,methodReturnVoid);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 253,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 91,
        "startColumnNumber" : 2,
        "endLineNumber" : 91,
        "endColumnNumber" : 58
      },
      "nodeContext" : "restCall=addResponseEntityArg(restCall,methodHolder);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.googlecode.androidannotations.processing.rest.MethodProcessorHolder"
  }, {
    "nodeContext" : "methodHolder",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 98,
      "startColumnNumber" : 43,
      "endLineNumber" : 98,
      "endColumnNumber" : 55
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 98,
        "startColumnNumber" : 13,
        "endLineNumber" : 98,
        "endColumnNumber" : 56
      },
      "nodeContext" : "addResultCallMethod(restCall,methodHolder)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 98,
        "startColumnNumber" : 2,
        "endLineNumber" : 98,
        "endColumnNumber" : 56
      },
      "nodeContext" : "restCall=addResultCallMethod(restCall,methodHolder)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 98,
        "startColumnNumber" : 2,
        "endLineNumber" : 98,
        "endColumnNumber" : 57
      },
      "nodeContext" : "restCall=addResultCallMethod(restCall,methodHolder);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1846,
        "startLineNumber" : 53,
        "startColumnNumber" : 82,
        "endLineNumber" : 101,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  RestImplementationHolder holder=restImplementationsHolder.getEnclosingHolder(methodHolder.getElement());\n  ExecutableElement executableElement=(ExecutableElement)methodHolder.getElement();\n  JClass expectedClass=methodHolder.getExpectedClass();\n  JClass generatedReturnType=methodHolder.getGeneratedReturnType();\n  JMethod method;\n  String methodName=executableElement.getSimpleName().toString();\n  boolean methodReturnVoid=generatedReturnType == null && expectedClass == null;\n  if (methodReturnVoid) {\n    method=holder.restImplementationClass.method(JMod.PUBLIC,void.class,methodName);\n  }\n else {\n    method=holder.restImplementationClass.method(JMod.PUBLIC,methodHolder.getGeneratedReturnType(),methodName);\n  }\n  method.annotate(Override.class);\n  JBlock body=method.body();\n  JInvocation restCall=JExpr.invoke(holder.restTemplateField,\"exchange\");\n  restCall.arg(methodHolder.getUrl());\n  JClass httpMethod=holder.refClass(ProcessorConstants.HTTP_METHOD);\n  String restMethodInCapitalLetters=getTarget().getSimpleName().toUpperCase();\n  restCall.arg(httpMethod.staticRef(restMethodInCapitalLetters));\n  TreeMap<String,JVar> methodParams=(TreeMap<String,JVar>)generateMethodParamsVar(method,executableElement,holder);\n  methodHolder.setBody(body);\n  methodHolder.setMethodParams(methodParams);\n  JVar hashMapVar=generateHashMapVar(methodHolder);\n  restCall=addHttpEntityVar(restCall,methodHolder);\n  restCall=addResponseEntityArg(restCall,methodHolder);\n  boolean hasParametersInUrl=hashMapVar != null;\n  if (hasParametersInUrl) {\n    restCall.arg(hashMapVar);\n  }\n  restCall=addResultCallMethod(restCall,methodHolder);\n  insertRestCallInBody(body,restCall,methodReturnVoid);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 245,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1927,
        "startLineNumber" : 53,
        "startColumnNumber" : 1,
        "endLineNumber" : 101,
        "endColumnNumber" : 2
      },
      "nodeContext" : "protected void generateRestTemplateCallBlock(MethodProcessorHolder methodHolder){\n  RestImplementationHolder holder=restImplementationsHolder.getEnclosingHolder(methodHolder.getElement());\n  ExecutableElement executableElement=(ExecutableElement)methodHolder.getElement();\n  JClass expectedClass=methodHolder.getExpectedClass();\n  JClass generatedReturnType=methodHolder.getGeneratedReturnType();\n  JMethod method;\n  String methodName=executableElement.getSimpleName().toString();\n  boolean methodReturnVoid=generatedReturnType == null && expectedClass == null;\n  if (methodReturnVoid) {\n    method=holder.restImplementationClass.method(JMod.PUBLIC,void.class,methodName);\n  }\n else {\n    method=holder.restImplementationClass.method(JMod.PUBLIC,methodHolder.getGeneratedReturnType(),methodName);\n  }\n  method.annotate(Override.class);\n  JBlock body=method.body();\n  JInvocation restCall=JExpr.invoke(holder.restTemplateField,\"exchange\");\n  restCall.arg(methodHolder.getUrl());\n  JClass httpMethod=holder.refClass(ProcessorConstants.HTTP_METHOD);\n  String restMethodInCapitalLetters=getTarget().getSimpleName().toUpperCase();\n  restCall.arg(httpMethod.staticRef(restMethodInCapitalLetters));\n  TreeMap<String,JVar> methodParams=(TreeMap<String,JVar>)generateMethodParamsVar(method,executableElement,holder);\n  methodHolder.setBody(body);\n  methodHolder.setMethodParams(methodParams);\n  JVar hashMapVar=generateHashMapVar(methodHolder);\n  restCall=addHttpEntityVar(restCall,methodHolder);\n  restCall=addResponseEntityArg(restCall,methodHolder);\n  boolean hasParametersInUrl=hashMapVar != null;\n  if (hasParametersInUrl) {\n    restCall.arg(hashMapVar);\n  }\n  restCall=addResultCallMethod(restCall,methodHolder);\n  insertRestCallInBody(body,restCall,methodReturnVoid);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 253,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 98,
        "startColumnNumber" : 2,
        "endLineNumber" : 98,
        "endColumnNumber" : 57
      },
      "nodeContext" : "restCall=addResultCallMethod(restCall,methodHolder);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.googlecode.androidannotations.processing.rest.MethodProcessorHolder"
  } ],
  "positionList" : [ {
    "charLength" : 12,
    "startLineNumber" : 54,
    "startColumnNumber" : 81,
    "endLineNumber" : 54,
    "endColumnNumber" : 93
  }, {
    "charLength" : 12,
    "startLineNumber" : 55,
    "startColumnNumber" : 60,
    "endLineNumber" : 55,
    "endColumnNumber" : 72
  }, {
    "charLength" : 12,
    "startLineNumber" : 56,
    "startColumnNumber" : 25,
    "endLineNumber" : 56,
    "endColumnNumber" : 37
  }, {
    "charLength" : 12,
    "startLineNumber" : 57,
    "startColumnNumber" : 31,
    "endLineNumber" : 57,
    "endColumnNumber" : 43
  }, {
    "charLength" : 12,
    "startLineNumber" : 65,
    "startColumnNumber" : 63,
    "endLineNumber" : 65,
    "endColumnNumber" : 75
  }, {
    "charLength" : 12,
    "startLineNumber" : 75,
    "startColumnNumber" : 15,
    "endLineNumber" : 75,
    "endColumnNumber" : 27
  }, {
    "charLength" : 12,
    "startLineNumber" : 85,
    "startColumnNumber" : 2,
    "endLineNumber" : 85,
    "endColumnNumber" : 14
  }, {
    "charLength" : 12,
    "startLineNumber" : 86,
    "startColumnNumber" : 2,
    "endLineNumber" : 86,
    "endColumnNumber" : 14
  }, {
    "charLength" : 12,
    "startLineNumber" : 88,
    "startColumnNumber" : 39,
    "endLineNumber" : 88,
    "endColumnNumber" : 51
  }, {
    "charLength" : 12,
    "startLineNumber" : 90,
    "startColumnNumber" : 40,
    "endLineNumber" : 90,
    "endColumnNumber" : 52
  }, {
    "charLength" : 12,
    "startLineNumber" : 91,
    "startColumnNumber" : 44,
    "endLineNumber" : 91,
    "endColumnNumber" : 56
  }, {
    "charLength" : 12,
    "startLineNumber" : 98,
    "startColumnNumber" : 43,
    "endLineNumber" : 98,
    "endColumnNumber" : 55
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 10,
    "layout" : 3
  } ]
}