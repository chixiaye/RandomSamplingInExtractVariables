{
  "id" : 419,
  "expression" : "n",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "src/main/java/com/williamfiset/algorithms/strings/BoyerMooreStringSearch.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "n",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 37,
      "startColumnNumber" : 25,
      "endLineNumber" : 37,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 5,
        "startLineNumber" : 37,
        "startColumnNumber" : 25,
        "endLineNumber" : 37,
        "endColumnNumber" : 30
      },
      "nodeContext" : "n - 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationExpression,fragments]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 37,
        "startColumnNumber" : 13,
        "endLineNumber" : 37,
        "endColumnNumber" : 30
      },
      "nodeContext" : "textIndex=n - 1",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ForStatement,initializers]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 37,
        "startColumnNumber" : 9,
        "endLineNumber" : 37,
        "endColumnNumber" : 52
      },
      "nodeContext" : "int textIndex=n - 1, patternIndex=n - 1",
      "nodeType" : "VariableDeclarationExpression",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 464,
        "startLineNumber" : 37,
        "startColumnNumber" : 4,
        "endLineNumber" : 49,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int textIndex=n - 1, patternIndex=n - 1; textIndex < text.length(); ) {\n  if (patternIndex >= 0 && pattern.charAt(patternIndex) == text.charAt(textIndex)) {\n    if (patternIndex == 0) {\n      occurrences.add(textIndex);\n    }\n else {\n      textIndex--;\n    }\n    patternIndex--;\n  }\n else {\n    textIndex+=n - min(max(patternIndex,0),1 + skipTable[text.charAt(textIndex)]);\n    patternIndex=n - 1;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 77,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 796,
        "startLineNumber" : 26,
        "startColumnNumber" : 68,
        "endLineNumber" : 51,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (isNull(text) || isNull(pattern) || pattern.length() > text.length() || pattern.length() == 0) {\n    return new ArrayList<>();\n  }\n  List<Integer> occurrences=new ArrayList<>();\n  int[] skipTable=generateSkipTable(pattern);\n  int n=pattern.length();\n  for (int textIndex=n - 1, patternIndex=n - 1; textIndex < text.length(); ) {\n    if (patternIndex >= 0 && pattern.charAt(patternIndex) == text.charAt(textIndex)) {\n      if (patternIndex == 0) {\n        occurrences.add(textIndex);\n      }\n else {\n        textIndex--;\n      }\n      patternIndex--;\n    }\n else {\n      textIndex+=n - min(max(patternIndex,0),1 + skipTable[text.charAt(textIndex)]);\n      patternIndex=n - 1;\n    }\n  }\n  return occurrences;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 135,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1101,
        "startLineNumber" : 19,
        "startColumnNumber" : 2,
        "endLineNumber" : 51,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Performs Boyer-Moore search on a given string with a given pattern\n * @param text the string being searched in\n * @param pattern the string being searched for\n * @return List of indexes where the pattern occurs\n */\npublic List<Integer> findOccurrences(String text,String pattern){\n  if (isNull(text) || isNull(pattern) || pattern.length() > text.length() || pattern.length() == 0) {\n    return new ArrayList<>();\n  }\n  List<Integer> occurrences=new ArrayList<>();\n  int[] skipTable=generateSkipTable(pattern);\n  int n=pattern.length();\n  for (int textIndex=n - 1, patternIndex=n - 1; textIndex < text.length(); ) {\n    if (patternIndex >= 0 && pattern.charAt(patternIndex) == text.charAt(textIndex)) {\n      if (patternIndex == 0) {\n        occurrences.add(textIndex);\n      }\n else {\n        textIndex--;\n      }\n      patternIndex--;\n    }\n else {\n      textIndex+=n - min(max(patternIndex,0),1 + skipTable[text.charAt(textIndex)]);\n      patternIndex=n - 1;\n    }\n  }\n  return occurrences;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 152,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ForStatement,initializers]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 37,
        "startColumnNumber" : 9,
        "endLineNumber" : 37,
        "endColumnNumber" : 52
      },
      "nodeContext" : "int textIndex=n - 1, patternIndex=n - 1",
      "nodeType" : "VariableDeclarationExpression",
      "astNodeNumber" : 12,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "n",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 37,
      "startColumnNumber" : 47,
      "endLineNumber" : 37,
      "endColumnNumber" : 48
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 5,
        "startLineNumber" : 37,
        "startColumnNumber" : 47,
        "endLineNumber" : 37,
        "endColumnNumber" : 52
      },
      "nodeContext" : "n - 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationExpression,fragments]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 37,
        "startColumnNumber" : 32,
        "endLineNumber" : 37,
        "endColumnNumber" : 52
      },
      "nodeContext" : "patternIndex=n - 1",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ForStatement,initializers]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 37,
        "startColumnNumber" : 9,
        "endLineNumber" : 37,
        "endColumnNumber" : 52
      },
      "nodeContext" : "int textIndex=n - 1, patternIndex=n - 1",
      "nodeType" : "VariableDeclarationExpression",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 464,
        "startLineNumber" : 37,
        "startColumnNumber" : 4,
        "endLineNumber" : 49,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int textIndex=n - 1, patternIndex=n - 1; textIndex < text.length(); ) {\n  if (patternIndex >= 0 && pattern.charAt(patternIndex) == text.charAt(textIndex)) {\n    if (patternIndex == 0) {\n      occurrences.add(textIndex);\n    }\n else {\n      textIndex--;\n    }\n    patternIndex--;\n  }\n else {\n    textIndex+=n - min(max(patternIndex,0),1 + skipTable[text.charAt(textIndex)]);\n    patternIndex=n - 1;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 77,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 796,
        "startLineNumber" : 26,
        "startColumnNumber" : 68,
        "endLineNumber" : 51,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (isNull(text) || isNull(pattern) || pattern.length() > text.length() || pattern.length() == 0) {\n    return new ArrayList<>();\n  }\n  List<Integer> occurrences=new ArrayList<>();\n  int[] skipTable=generateSkipTable(pattern);\n  int n=pattern.length();\n  for (int textIndex=n - 1, patternIndex=n - 1; textIndex < text.length(); ) {\n    if (patternIndex >= 0 && pattern.charAt(patternIndex) == text.charAt(textIndex)) {\n      if (patternIndex == 0) {\n        occurrences.add(textIndex);\n      }\n else {\n        textIndex--;\n      }\n      patternIndex--;\n    }\n else {\n      textIndex+=n - min(max(patternIndex,0),1 + skipTable[text.charAt(textIndex)]);\n      patternIndex=n - 1;\n    }\n  }\n  return occurrences;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 135,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1101,
        "startLineNumber" : 19,
        "startColumnNumber" : 2,
        "endLineNumber" : 51,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Performs Boyer-Moore search on a given string with a given pattern\n * @param text the string being searched in\n * @param pattern the string being searched for\n * @return List of indexes where the pattern occurs\n */\npublic List<Integer> findOccurrences(String text,String pattern){\n  if (isNull(text) || isNull(pattern) || pattern.length() > text.length() || pattern.length() == 0) {\n    return new ArrayList<>();\n  }\n  List<Integer> occurrences=new ArrayList<>();\n  int[] skipTable=generateSkipTable(pattern);\n  int n=pattern.length();\n  for (int textIndex=n - 1, patternIndex=n - 1; textIndex < text.length(); ) {\n    if (patternIndex >= 0 && pattern.charAt(patternIndex) == text.charAt(textIndex)) {\n      if (patternIndex == 0) {\n        occurrences.add(textIndex);\n      }\n else {\n        textIndex--;\n      }\n      patternIndex--;\n    }\n else {\n      textIndex+=n - min(max(patternIndex,0),1 + skipTable[text.charAt(textIndex)]);\n      patternIndex=n - 1;\n    }\n  }\n  return occurrences;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 152,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ForStatement,initializers]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 37,
        "startColumnNumber" : 9,
        "endLineNumber" : 37,
        "endColumnNumber" : 52
      },
      "nodeContext" : "int textIndex=n - 1, patternIndex=n - 1",
      "nodeType" : "VariableDeclarationExpression",
      "astNodeNumber" : 12,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "n",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 46,
      "startColumnNumber" : 21,
      "endLineNumber" : 46,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 46,
        "startColumnNumber" : 21,
        "endLineNumber" : 46,
        "endColumnNumber" : 89
      },
      "nodeContext" : "n - min(max(patternIndex,0),1 + skipTable[text.charAt(textIndex)])",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 46,
        "startColumnNumber" : 8,
        "endLineNumber" : 46,
        "endColumnNumber" : 89
      },
      "nodeContext" : "textIndex+=n - min(max(patternIndex,0),1 + skipTable[text.charAt(textIndex)])",
      "nodeType" : "Assignment",
      "astNodeNumber" : 18,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 46,
        "startColumnNumber" : 8,
        "endLineNumber" : 46,
        "endColumnNumber" : 90
      },
      "nodeContext" : "textIndex+=n - min(max(patternIndex,0),1 + skipTable[text.charAt(textIndex)]);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 19,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 130,
        "startLineNumber" : 45,
        "startColumnNumber" : 13,
        "endLineNumber" : 48,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  textIndex+=n - min(max(patternIndex,0),1 + skipTable[text.charAt(textIndex)]);\n  patternIndex=n - 1;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 26,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 371,
        "startLineNumber" : 38,
        "startColumnNumber" : 6,
        "endLineNumber" : 48,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (patternIndex >= 0 && pattern.charAt(patternIndex) == text.charAt(textIndex)) {\n  if (patternIndex == 0) {\n    occurrences.add(textIndex);\n  }\n else {\n    textIndex--;\n  }\n  patternIndex--;\n}\n else {\n  textIndex+=n - min(max(patternIndex,0),1 + skipTable[text.charAt(textIndex)]);\n  patternIndex=n - 1;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 58,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 385,
        "startLineNumber" : 37,
        "startColumnNumber" : 83,
        "endLineNumber" : 49,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (patternIndex >= 0 && pattern.charAt(patternIndex) == text.charAt(textIndex)) {\n    if (patternIndex == 0) {\n      occurrences.add(textIndex);\n    }\n else {\n      textIndex--;\n    }\n    patternIndex--;\n  }\n else {\n    textIndex+=n - min(max(patternIndex,0),1 + skipTable[text.charAt(textIndex)]);\n    patternIndex=n - 1;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 59,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 464,
        "startLineNumber" : 37,
        "startColumnNumber" : 4,
        "endLineNumber" : 49,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int textIndex=n - 1, patternIndex=n - 1; textIndex < text.length(); ) {\n  if (patternIndex >= 0 && pattern.charAt(patternIndex) == text.charAt(textIndex)) {\n    if (patternIndex == 0) {\n      occurrences.add(textIndex);\n    }\n else {\n      textIndex--;\n    }\n    patternIndex--;\n  }\n else {\n    textIndex+=n - min(max(patternIndex,0),1 + skipTable[text.charAt(textIndex)]);\n    patternIndex=n - 1;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 77,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 796,
        "startLineNumber" : 26,
        "startColumnNumber" : 68,
        "endLineNumber" : 51,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (isNull(text) || isNull(pattern) || pattern.length() > text.length() || pattern.length() == 0) {\n    return new ArrayList<>();\n  }\n  List<Integer> occurrences=new ArrayList<>();\n  int[] skipTable=generateSkipTable(pattern);\n  int n=pattern.length();\n  for (int textIndex=n - 1, patternIndex=n - 1; textIndex < text.length(); ) {\n    if (patternIndex >= 0 && pattern.charAt(patternIndex) == text.charAt(textIndex)) {\n      if (patternIndex == 0) {\n        occurrences.add(textIndex);\n      }\n else {\n        textIndex--;\n      }\n      patternIndex--;\n    }\n else {\n      textIndex+=n - min(max(patternIndex,0),1 + skipTable[text.charAt(textIndex)]);\n      patternIndex=n - 1;\n    }\n  }\n  return occurrences;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 135,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1101,
        "startLineNumber" : 19,
        "startColumnNumber" : 2,
        "endLineNumber" : 51,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Performs Boyer-Moore search on a given string with a given pattern\n * @param text the string being searched in\n * @param pattern the string being searched for\n * @return List of indexes where the pattern occurs\n */\npublic List<Integer> findOccurrences(String text,String pattern){\n  if (isNull(text) || isNull(pattern) || pattern.length() > text.length() || pattern.length() == 0) {\n    return new ArrayList<>();\n  }\n  List<Integer> occurrences=new ArrayList<>();\n  int[] skipTable=generateSkipTable(pattern);\n  int n=pattern.length();\n  for (int textIndex=n - 1, patternIndex=n - 1; textIndex < text.length(); ) {\n    if (patternIndex >= 0 && pattern.charAt(patternIndex) == text.charAt(textIndex)) {\n      if (patternIndex == 0) {\n        occurrences.add(textIndex);\n      }\n else {\n        textIndex--;\n      }\n      patternIndex--;\n    }\n else {\n      textIndex+=n - min(max(patternIndex,0),1 + skipTable[text.charAt(textIndex)]);\n      patternIndex=n - 1;\n    }\n  }\n  return occurrences;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 152,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 46,
        "startColumnNumber" : 8,
        "endLineNumber" : 46,
        "endColumnNumber" : 90
      },
      "nodeContext" : "textIndex+=n - min(max(patternIndex,0),1 + skipTable[text.charAt(textIndex)]);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 19,
      "astHeight" : 8
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "n",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 47,
      "startColumnNumber" : 23,
      "endLineNumber" : 47,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 5,
        "startLineNumber" : 47,
        "startColumnNumber" : 23,
        "endLineNumber" : 47,
        "endColumnNumber" : 28
      },
      "nodeContext" : "n - 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 47,
        "startColumnNumber" : 8,
        "endLineNumber" : 47,
        "endColumnNumber" : 28
      },
      "nodeContext" : "patternIndex=n - 1",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 47,
        "startColumnNumber" : 8,
        "endLineNumber" : 47,
        "endColumnNumber" : 29
      },
      "nodeContext" : "patternIndex=n - 1;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 130,
        "startLineNumber" : 45,
        "startColumnNumber" : 13,
        "endLineNumber" : 48,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  textIndex+=n - min(max(patternIndex,0),1 + skipTable[text.charAt(textIndex)]);\n  patternIndex=n - 1;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 26,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 371,
        "startLineNumber" : 38,
        "startColumnNumber" : 6,
        "endLineNumber" : 48,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (patternIndex >= 0 && pattern.charAt(patternIndex) == text.charAt(textIndex)) {\n  if (patternIndex == 0) {\n    occurrences.add(textIndex);\n  }\n else {\n    textIndex--;\n  }\n  patternIndex--;\n}\n else {\n  textIndex+=n - min(max(patternIndex,0),1 + skipTable[text.charAt(textIndex)]);\n  patternIndex=n - 1;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 58,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 385,
        "startLineNumber" : 37,
        "startColumnNumber" : 83,
        "endLineNumber" : 49,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (patternIndex >= 0 && pattern.charAt(patternIndex) == text.charAt(textIndex)) {\n    if (patternIndex == 0) {\n      occurrences.add(textIndex);\n    }\n else {\n      textIndex--;\n    }\n    patternIndex--;\n  }\n else {\n    textIndex+=n - min(max(patternIndex,0),1 + skipTable[text.charAt(textIndex)]);\n    patternIndex=n - 1;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 59,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 464,
        "startLineNumber" : 37,
        "startColumnNumber" : 4,
        "endLineNumber" : 49,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int textIndex=n - 1, patternIndex=n - 1; textIndex < text.length(); ) {\n  if (patternIndex >= 0 && pattern.charAt(patternIndex) == text.charAt(textIndex)) {\n    if (patternIndex == 0) {\n      occurrences.add(textIndex);\n    }\n else {\n      textIndex--;\n    }\n    patternIndex--;\n  }\n else {\n    textIndex+=n - min(max(patternIndex,0),1 + skipTable[text.charAt(textIndex)]);\n    patternIndex=n - 1;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 77,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 796,
        "startLineNumber" : 26,
        "startColumnNumber" : 68,
        "endLineNumber" : 51,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (isNull(text) || isNull(pattern) || pattern.length() > text.length() || pattern.length() == 0) {\n    return new ArrayList<>();\n  }\n  List<Integer> occurrences=new ArrayList<>();\n  int[] skipTable=generateSkipTable(pattern);\n  int n=pattern.length();\n  for (int textIndex=n - 1, patternIndex=n - 1; textIndex < text.length(); ) {\n    if (patternIndex >= 0 && pattern.charAt(patternIndex) == text.charAt(textIndex)) {\n      if (patternIndex == 0) {\n        occurrences.add(textIndex);\n      }\n else {\n        textIndex--;\n      }\n      patternIndex--;\n    }\n else {\n      textIndex+=n - min(max(patternIndex,0),1 + skipTable[text.charAt(textIndex)]);\n      patternIndex=n - 1;\n    }\n  }\n  return occurrences;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 135,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1101,
        "startLineNumber" : 19,
        "startColumnNumber" : 2,
        "endLineNumber" : 51,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Performs Boyer-Moore search on a given string with a given pattern\n * @param text the string being searched in\n * @param pattern the string being searched for\n * @return List of indexes where the pattern occurs\n */\npublic List<Integer> findOccurrences(String text,String pattern){\n  if (isNull(text) || isNull(pattern) || pattern.length() > text.length() || pattern.length() == 0) {\n    return new ArrayList<>();\n  }\n  List<Integer> occurrences=new ArrayList<>();\n  int[] skipTable=generateSkipTable(pattern);\n  int n=pattern.length();\n  for (int textIndex=n - 1, patternIndex=n - 1; textIndex < text.length(); ) {\n    if (patternIndex >= 0 && pattern.charAt(patternIndex) == text.charAt(textIndex)) {\n      if (patternIndex == 0) {\n        occurrences.add(textIndex);\n      }\n else {\n        textIndex--;\n      }\n      patternIndex--;\n    }\n else {\n      textIndex+=n - min(max(patternIndex,0),1 + skipTable[text.charAt(textIndex)]);\n      patternIndex=n - 1;\n    }\n  }\n  return occurrences;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 152,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 47,
        "startColumnNumber" : 8,
        "endLineNumber" : 47,
        "endColumnNumber" : 29
      },
      "nodeContext" : "patternIndex=n - 1;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 37,
    "startColumnNumber" : 25,
    "endLineNumber" : 37,
    "endColumnNumber" : 26
  }, {
    "charLength" : 1,
    "startLineNumber" : 37,
    "startColumnNumber" : 47,
    "endLineNumber" : 37,
    "endColumnNumber" : 48
  }, {
    "charLength" : 1,
    "startLineNumber" : 46,
    "startColumnNumber" : 21,
    "endLineNumber" : 46,
    "endColumnNumber" : 22
  }, {
    "charLength" : 1,
    "startLineNumber" : 47,
    "startColumnNumber" : 23,
    "endLineNumber" : 47,
    "endColumnNumber" : 24
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 3
  } ]
}