{
  "id" : 265,
  "expression" : "logger",
  "projectName" : "Netflix@zuul",
  "commitID" : "f8ef3551d8dd57a512336315ec51bb6c0444c517",
  "filePath" : "/zuul-core/src/main/java/com/netflix/zuul/netty/server/push/PushAuthHandler.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "logger",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 79,
      "startColumnNumber" : 16,
      "endLineNumber" : 79,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 79,
        "startColumnNumber" : 16,
        "endLineNumber" : 79,
        "endColumnNumber" : 93
      },
      "nodeContext" : "logger.error(\"Invalid Origin header {} in WebSocket upgrade request\",origin)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 79,
        "startColumnNumber" : 16,
        "endLineNumber" : 79,
        "endColumnNumber" : 94
      },
      "nodeContext" : "logger.error(\"Invalid Origin header {} in WebSocket upgrade request\",origin);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 167,
        "startLineNumber" : 78,
        "startColumnNumber" : 86,
        "endLineNumber" : 81,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  logger.error(\"Invalid Origin header {} in WebSocket upgrade request\",origin);\n  sendHttpResponse(req,ctx,BAD_REQUEST);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1033,
        "startLineNumber" : 77,
        "startColumnNumber" : 12,
        "endLineNumber" : 94,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (((PushProtocol.WEBSOCKET.getPath().equals(pushConnectionPath))) && ((origin == null) || (!origin.toLowerCase().endsWith(originDomain)))) {\n  logger.error(\"Invalid Origin header {} in WebSocket upgrade request\",origin);\n  sendHttpResponse(req,ctx,BAD_REQUEST);\n}\n else if (isDelayedAuth(req,ctx)) {\n  ctx.fireChannelRead(req.retain());\n}\n else {\n  final PushUserAuth authEvent=doAuth(req);\n  if (authEvent.isSuccess()) {\n    ctx.fireChannelRead(req.retain());\n    ctx.fireUserEventTriggered(authEvent);\n  }\n else {\n    logger.warn(\"Auth failed: {}\",authEvent.statusCode());\n    sendHttpResponse(req,ctx,HttpResponseStatus.valueOf(authEvent.statusCode()));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 99,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1165,
        "startLineNumber" : 74,
        "startColumnNumber" : 50,
        "endLineNumber" : 95,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final String origin=req.headers().get(HttpHeaderNames.ORIGIN);\n  if (((PushProtocol.WEBSOCKET.getPath().equals(pushConnectionPath))) && ((origin == null) || (!origin.toLowerCase().endsWith(originDomain)))) {\n    logger.error(\"Invalid Origin header {} in WebSocket upgrade request\",origin);\n    sendHttpResponse(req,ctx,BAD_REQUEST);\n  }\n else   if (isDelayedAuth(req,ctx)) {\n    ctx.fireChannelRead(req.retain());\n  }\n else {\n    final PushUserAuth authEvent=doAuth(req);\n    if (authEvent.isSuccess()) {\n      ctx.fireChannelRead(req.retain());\n      ctx.fireUserEventTriggered(authEvent);\n    }\n else {\n      logger.warn(\"Auth failed: {}\",authEvent.statusCode());\n      sendHttpResponse(req,ctx,HttpResponseStatus.valueOf(authEvent.statusCode()));\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 114,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1278,
        "startLineNumber" : 74,
        "startColumnNumber" : 13,
        "endLineNumber" : 98,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (pushConnectionPath.equals(path)) {\n  final String origin=req.headers().get(HttpHeaderNames.ORIGIN);\n  if (((PushProtocol.WEBSOCKET.getPath().equals(pushConnectionPath))) && ((origin == null) || (!origin.toLowerCase().endsWith(originDomain)))) {\n    logger.error(\"Invalid Origin header {} in WebSocket upgrade request\",origin);\n    sendHttpResponse(req,ctx,BAD_REQUEST);\n  }\n else   if (isDelayedAuth(req,ctx)) {\n    ctx.fireChannelRead(req.retain());\n  }\n else {\n    final PushUserAuth authEvent=doAuth(req);\n    if (authEvent.isSuccess()) {\n      ctx.fireChannelRead(req.retain());\n      ctx.fireUserEventTriggered(authEvent);\n    }\n else {\n      logger.warn(\"Auth failed: {}\",authEvent.statusCode());\n      sendHttpResponse(req,ctx,HttpResponseStatus.valueOf(authEvent.statusCode()));\n    }\n  }\n}\n else {\n  sendHttpResponse(req,ctx,NOT_FOUND);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 126,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1380,
        "startLineNumber" : 71,
        "startColumnNumber" : 8,
        "endLineNumber" : 98,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (\"/healthcheck\".equals(path)) {\n  sendHttpResponse(req,ctx,OK);\n}\n else if (pushConnectionPath.equals(path)) {\n  final String origin=req.headers().get(HttpHeaderNames.ORIGIN);\n  if (((PushProtocol.WEBSOCKET.getPath().equals(pushConnectionPath))) && ((origin == null) || (!origin.toLowerCase().endsWith(originDomain)))) {\n    logger.error(\"Invalid Origin header {} in WebSocket upgrade request\",origin);\n    sendHttpResponse(req,ctx,BAD_REQUEST);\n  }\n else   if (isDelayedAuth(req,ctx)) {\n    ctx.fireChannelRead(req.retain());\n  }\n else {\n    final PushUserAuth authEvent=doAuth(req);\n    if (authEvent.isSuccess()) {\n      ctx.fireChannelRead(req.retain());\n      ctx.fireUserEventTriggered(authEvent);\n    }\n else {\n      logger.warn(\"Auth failed: {}\",authEvent.statusCode());\n      sendHttpResponse(req,ctx,HttpResponseStatus.valueOf(authEvent.statusCode()));\n    }\n  }\n}\n else {\n  sendHttpResponse(req,ctx,NOT_FOUND);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 138,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1572,
        "startLineNumber" : 64,
        "startColumnNumber" : 103,
        "endLineNumber" : 99,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (req.method() != HttpMethod.GET) {\n    sendHttpResponse(req,ctx,METHOD_NOT_ALLOWED);\n    return;\n  }\n  final String path=req.uri();\n  if (\"/healthcheck\".equals(path)) {\n    sendHttpResponse(req,ctx,OK);\n  }\n else   if (pushConnectionPath.equals(path)) {\n    final String origin=req.headers().get(HttpHeaderNames.ORIGIN);\n    if (((PushProtocol.WEBSOCKET.getPath().equals(pushConnectionPath))) && ((origin == null) || (!origin.toLowerCase().endsWith(originDomain)))) {\n      logger.error(\"Invalid Origin header {} in WebSocket upgrade request\",origin);\n      sendHttpResponse(req,ctx,BAD_REQUEST);\n    }\n else     if (isDelayedAuth(req,ctx)) {\n      ctx.fireChannelRead(req.retain());\n    }\n else {\n      final PushUserAuth authEvent=doAuth(req);\n      if (authEvent.isSuccess()) {\n        ctx.fireChannelRead(req.retain());\n        ctx.fireUserEventTriggered(authEvent);\n      }\n else {\n        logger.warn(\"Auth failed: {}\",authEvent.statusCode());\n        sendHttpResponse(req,ctx,HttpResponseStatus.valueOf(authEvent.statusCode()));\n      }\n    }\n  }\n else {\n    sendHttpResponse(req,ctx,NOT_FOUND);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 164,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1685,
        "startLineNumber" : 63,
        "startColumnNumber" : 4,
        "endLineNumber" : 99,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override protected final void channelRead0(ChannelHandlerContext ctx,FullHttpRequest req) throws Exception {\n  if (req.method() != HttpMethod.GET) {\n    sendHttpResponse(req,ctx,METHOD_NOT_ALLOWED);\n    return;\n  }\n  final String path=req.uri();\n  if (\"/healthcheck\".equals(path)) {\n    sendHttpResponse(req,ctx,OK);\n  }\n else   if (pushConnectionPath.equals(path)) {\n    final String origin=req.headers().get(HttpHeaderNames.ORIGIN);\n    if (((PushProtocol.WEBSOCKET.getPath().equals(pushConnectionPath))) && ((origin == null) || (!origin.toLowerCase().endsWith(originDomain)))) {\n      logger.error(\"Invalid Origin header {} in WebSocket upgrade request\",origin);\n      sendHttpResponse(req,ctx,BAD_REQUEST);\n    }\n else     if (isDelayedAuth(req,ctx)) {\n      ctx.fireChannelRead(req.retain());\n    }\n else {\n      final PushUserAuth authEvent=doAuth(req);\n      if (authEvent.isSuccess()) {\n        ctx.fireChannelRead(req.retain());\n        ctx.fireUserEventTriggered(authEvent);\n      }\n else {\n        logger.warn(\"Auth failed: {}\",authEvent.statusCode());\n        sendHttpResponse(req,ctx,HttpResponseStatus.valueOf(authEvent.statusCode()));\n      }\n    }\n  }\n else {\n    sendHttpResponse(req,ctx,NOT_FOUND);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 181,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 79,
        "startColumnNumber" : 16,
        "endLineNumber" : 79,
        "endColumnNumber" : 94
      },
      "nodeContext" : "logger.error(\"Invalid Origin header {} in WebSocket upgrade request\",origin);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.netflix.zuul.netty.server.push.Logger"
  }, {
    "nodeContext" : "logger",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 91,
      "startColumnNumber" : 20,
      "endLineNumber" : 91,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 91,
        "startColumnNumber" : 20,
        "endLineNumber" : 91,
        "endColumnNumber" : 74
      },
      "nodeContext" : "logger.warn(\"Auth failed: {}\",authEvent.statusCode())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 91,
        "startColumnNumber" : 20,
        "endLineNumber" : 91,
        "endColumnNumber" : 75
      },
      "nodeContext" : "logger.warn(\"Auth failed: {}\",authEvent.statusCode());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 195,
        "startLineNumber" : 90,
        "startColumnNumber" : 23,
        "endLineNumber" : 93,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  logger.warn(\"Auth failed: {}\",authEvent.statusCode());\n  sendHttpResponse(req,ctx,HttpResponseStatus.valueOf(authEvent.statusCode()));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 406,
        "startLineNumber" : 87,
        "startColumnNumber" : 16,
        "endLineNumber" : 93,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (authEvent.isSuccess()) {\n  ctx.fireChannelRead(req.retain());\n  ctx.fireUserEventTriggered(authEvent);\n}\n else {\n  logger.warn(\"Auth failed: {}\",authEvent.statusCode());\n  sendHttpResponse(req,ctx,HttpResponseStatus.valueOf(authEvent.statusCode()));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 37,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 498,
        "startLineNumber" : 85,
        "startColumnNumber" : 19,
        "endLineNumber" : 94,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  final PushUserAuth authEvent=doAuth(req);\n  if (authEvent.isSuccess()) {\n    ctx.fireChannelRead(req.retain());\n    ctx.fireUserEventTriggered(authEvent);\n  }\n else {\n    logger.warn(\"Auth failed: {}\",authEvent.statusCode());\n    sendHttpResponse(req,ctx,HttpResponseStatus.valueOf(authEvent.statusCode()));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 47,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 691,
        "startLineNumber" : 82,
        "startColumnNumber" : 17,
        "endLineNumber" : 94,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (isDelayedAuth(req,ctx)) {\n  ctx.fireChannelRead(req.retain());\n}\n else {\n  final PushUserAuth authEvent=doAuth(req);\n  if (authEvent.isSuccess()) {\n    ctx.fireChannelRead(req.retain());\n    ctx.fireUserEventTriggered(authEvent);\n  }\n else {\n    logger.warn(\"Auth failed: {}\",authEvent.statusCode());\n    sendHttpResponse(req,ctx,HttpResponseStatus.valueOf(authEvent.statusCode()));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 60,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1033,
        "startLineNumber" : 77,
        "startColumnNumber" : 12,
        "endLineNumber" : 94,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (((PushProtocol.WEBSOCKET.getPath().equals(pushConnectionPath))) && ((origin == null) || (!origin.toLowerCase().endsWith(originDomain)))) {\n  logger.error(\"Invalid Origin header {} in WebSocket upgrade request\",origin);\n  sendHttpResponse(req,ctx,BAD_REQUEST);\n}\n else if (isDelayedAuth(req,ctx)) {\n  ctx.fireChannelRead(req.retain());\n}\n else {\n  final PushUserAuth authEvent=doAuth(req);\n  if (authEvent.isSuccess()) {\n    ctx.fireChannelRead(req.retain());\n    ctx.fireUserEventTriggered(authEvent);\n  }\n else {\n    logger.warn(\"Auth failed: {}\",authEvent.statusCode());\n    sendHttpResponse(req,ctx,HttpResponseStatus.valueOf(authEvent.statusCode()));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 99,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1165,
        "startLineNumber" : 74,
        "startColumnNumber" : 50,
        "endLineNumber" : 95,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final String origin=req.headers().get(HttpHeaderNames.ORIGIN);\n  if (((PushProtocol.WEBSOCKET.getPath().equals(pushConnectionPath))) && ((origin == null) || (!origin.toLowerCase().endsWith(originDomain)))) {\n    logger.error(\"Invalid Origin header {} in WebSocket upgrade request\",origin);\n    sendHttpResponse(req,ctx,BAD_REQUEST);\n  }\n else   if (isDelayedAuth(req,ctx)) {\n    ctx.fireChannelRead(req.retain());\n  }\n else {\n    final PushUserAuth authEvent=doAuth(req);\n    if (authEvent.isSuccess()) {\n      ctx.fireChannelRead(req.retain());\n      ctx.fireUserEventTriggered(authEvent);\n    }\n else {\n      logger.warn(\"Auth failed: {}\",authEvent.statusCode());\n      sendHttpResponse(req,ctx,HttpResponseStatus.valueOf(authEvent.statusCode()));\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 114,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1278,
        "startLineNumber" : 74,
        "startColumnNumber" : 13,
        "endLineNumber" : 98,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (pushConnectionPath.equals(path)) {\n  final String origin=req.headers().get(HttpHeaderNames.ORIGIN);\n  if (((PushProtocol.WEBSOCKET.getPath().equals(pushConnectionPath))) && ((origin == null) || (!origin.toLowerCase().endsWith(originDomain)))) {\n    logger.error(\"Invalid Origin header {} in WebSocket upgrade request\",origin);\n    sendHttpResponse(req,ctx,BAD_REQUEST);\n  }\n else   if (isDelayedAuth(req,ctx)) {\n    ctx.fireChannelRead(req.retain());\n  }\n else {\n    final PushUserAuth authEvent=doAuth(req);\n    if (authEvent.isSuccess()) {\n      ctx.fireChannelRead(req.retain());\n      ctx.fireUserEventTriggered(authEvent);\n    }\n else {\n      logger.warn(\"Auth failed: {}\",authEvent.statusCode());\n      sendHttpResponse(req,ctx,HttpResponseStatus.valueOf(authEvent.statusCode()));\n    }\n  }\n}\n else {\n  sendHttpResponse(req,ctx,NOT_FOUND);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 126,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1380,
        "startLineNumber" : 71,
        "startColumnNumber" : 8,
        "endLineNumber" : 98,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (\"/healthcheck\".equals(path)) {\n  sendHttpResponse(req,ctx,OK);\n}\n else if (pushConnectionPath.equals(path)) {\n  final String origin=req.headers().get(HttpHeaderNames.ORIGIN);\n  if (((PushProtocol.WEBSOCKET.getPath().equals(pushConnectionPath))) && ((origin == null) || (!origin.toLowerCase().endsWith(originDomain)))) {\n    logger.error(\"Invalid Origin header {} in WebSocket upgrade request\",origin);\n    sendHttpResponse(req,ctx,BAD_REQUEST);\n  }\n else   if (isDelayedAuth(req,ctx)) {\n    ctx.fireChannelRead(req.retain());\n  }\n else {\n    final PushUserAuth authEvent=doAuth(req);\n    if (authEvent.isSuccess()) {\n      ctx.fireChannelRead(req.retain());\n      ctx.fireUserEventTriggered(authEvent);\n    }\n else {\n      logger.warn(\"Auth failed: {}\",authEvent.statusCode());\n      sendHttpResponse(req,ctx,HttpResponseStatus.valueOf(authEvent.statusCode()));\n    }\n  }\n}\n else {\n  sendHttpResponse(req,ctx,NOT_FOUND);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 138,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1572,
        "startLineNumber" : 64,
        "startColumnNumber" : 103,
        "endLineNumber" : 99,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (req.method() != HttpMethod.GET) {\n    sendHttpResponse(req,ctx,METHOD_NOT_ALLOWED);\n    return;\n  }\n  final String path=req.uri();\n  if (\"/healthcheck\".equals(path)) {\n    sendHttpResponse(req,ctx,OK);\n  }\n else   if (pushConnectionPath.equals(path)) {\n    final String origin=req.headers().get(HttpHeaderNames.ORIGIN);\n    if (((PushProtocol.WEBSOCKET.getPath().equals(pushConnectionPath))) && ((origin == null) || (!origin.toLowerCase().endsWith(originDomain)))) {\n      logger.error(\"Invalid Origin header {} in WebSocket upgrade request\",origin);\n      sendHttpResponse(req,ctx,BAD_REQUEST);\n    }\n else     if (isDelayedAuth(req,ctx)) {\n      ctx.fireChannelRead(req.retain());\n    }\n else {\n      final PushUserAuth authEvent=doAuth(req);\n      if (authEvent.isSuccess()) {\n        ctx.fireChannelRead(req.retain());\n        ctx.fireUserEventTriggered(authEvent);\n      }\n else {\n        logger.warn(\"Auth failed: {}\",authEvent.statusCode());\n        sendHttpResponse(req,ctx,HttpResponseStatus.valueOf(authEvent.statusCode()));\n      }\n    }\n  }\n else {\n    sendHttpResponse(req,ctx,NOT_FOUND);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 164,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1685,
        "startLineNumber" : 63,
        "startColumnNumber" : 4,
        "endLineNumber" : 99,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override protected final void channelRead0(ChannelHandlerContext ctx,FullHttpRequest req) throws Exception {\n  if (req.method() != HttpMethod.GET) {\n    sendHttpResponse(req,ctx,METHOD_NOT_ALLOWED);\n    return;\n  }\n  final String path=req.uri();\n  if (\"/healthcheck\".equals(path)) {\n    sendHttpResponse(req,ctx,OK);\n  }\n else   if (pushConnectionPath.equals(path)) {\n    final String origin=req.headers().get(HttpHeaderNames.ORIGIN);\n    if (((PushProtocol.WEBSOCKET.getPath().equals(pushConnectionPath))) && ((origin == null) || (!origin.toLowerCase().endsWith(originDomain)))) {\n      logger.error(\"Invalid Origin header {} in WebSocket upgrade request\",origin);\n      sendHttpResponse(req,ctx,BAD_REQUEST);\n    }\n else     if (isDelayedAuth(req,ctx)) {\n      ctx.fireChannelRead(req.retain());\n    }\n else {\n      final PushUserAuth authEvent=doAuth(req);\n      if (authEvent.isSuccess()) {\n        ctx.fireChannelRead(req.retain());\n        ctx.fireUserEventTriggered(authEvent);\n      }\n else {\n        logger.warn(\"Auth failed: {}\",authEvent.statusCode());\n        sendHttpResponse(req,ctx,HttpResponseStatus.valueOf(authEvent.statusCode()));\n      }\n    }\n  }\n else {\n    sendHttpResponse(req,ctx,NOT_FOUND);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 181,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 91,
        "startColumnNumber" : 20,
        "endLineNumber" : 91,
        "endColumnNumber" : 75
      },
      "nodeContext" : "logger.warn(\"Auth failed: {}\",authEvent.statusCode());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.netflix.zuul.netty.server.push.Logger"
  } ],
  "positionList" : [ {
    "charLength" : 6,
    "startLineNumber" : 79,
    "startColumnNumber" : 16,
    "endLineNumber" : 79,
    "endColumnNumber" : 22
  }, {
    "charLength" : 6,
    "startLineNumber" : 91,
    "startColumnNumber" : 20,
    "endLineNumber" : 91,
    "endColumnNumber" : 26
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 6
  } ]
}