{
  "id" : 33,
  "expression" : "dataStream.nextBit()",
  "projectName" : "prestodb@presto",
  "commitID" : "eff77883d0d24dc6022ecde252612d1430c9fbac",
  "filePath" : "/presto-orc/src/main/java/com/facebook/presto/orc/reader/BooleanSelectiveStreamReader.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "dataStream.nextBit()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 20,
      "startLineNumber" : 207,
      "startColumnNumber" : 36,
      "endLineNumber" : 207,
      "endColumnNumber" : 56
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 207,
        "startColumnNumber" : 28,
        "endLineNumber" : 207,
        "endColumnNumber" : 56
      },
      "nodeContext" : "value=dataStream.nextBit()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 207,
        "startColumnNumber" : 20,
        "endLineNumber" : 207,
        "endColumnNumber" : 57
      },
      "nodeContext" : "boolean value=dataStream.nextBit();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 597,
        "startLineNumber" : 206,
        "startColumnNumber" : 21,
        "endLineNumber" : 218,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  boolean value=dataStream.nextBit();\n  if (filter.testBoolean(value)) {\n    if (outputRequired) {\n      values[outputPositionCount]=(byte)(value ? 1 : 0);\n      if (nullsAllowed && presentStream != null) {\n        nulls[outputPositionCount]=false;\n      }\n    }\n    outputPositions[outputPositionCount]=position;\n    outputPositionCount++;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 51,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1059,
        "startLineNumber" : 197,
        "startColumnNumber" : 16,
        "endLineNumber" : 218,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (presentStream != null && !presentStream.nextBit()) {\n  if ((nonDeterministicFilter && filter.testNull()) || nullsAllowed) {\n    if (outputRequired) {\n      nulls[outputPositionCount]=true;\n    }\n    outputPositions[outputPositionCount]=position;\n    outputPositionCount++;\n  }\n}\n else {\n  boolean value=dataStream.nextBit();\n  if (filter.testBoolean(value)) {\n    if (outputRequired) {\n      values[outputPositionCount]=(byte)(value ? 1 : 0);\n      if (nullsAllowed && presentStream != null) {\n        nulls[outputPositionCount]=false;\n      }\n    }\n    outputPositions[outputPositionCount]=position;\n    outputPositionCount++;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 89,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1983,
        "startLineNumber" : 190,
        "startColumnNumber" : 52,
        "endLineNumber" : 235,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  int position=positions[i];\n  if (position > streamPosition) {\n    skip(position - streamPosition);\n    streamPosition=position;\n  }\n  if (presentStream != null && !presentStream.nextBit()) {\n    if ((nonDeterministicFilter && filter.testNull()) || nullsAllowed) {\n      if (outputRequired) {\n        nulls[outputPositionCount]=true;\n      }\n      outputPositions[outputPositionCount]=position;\n      outputPositionCount++;\n    }\n  }\n else {\n    boolean value=dataStream.nextBit();\n    if (filter.testBoolean(value)) {\n      if (outputRequired) {\n        values[outputPositionCount]=(byte)(value ? 1 : 0);\n        if (nullsAllowed && presentStream != null) {\n          nulls[outputPositionCount]=false;\n        }\n      }\n      outputPositions[outputPositionCount]=position;\n      outputPositionCount++;\n    }\n  }\n  outputPositionCount-=filter.getPrecedingPositionsToFail();\n  streamPosition++;\n  int succeedingPositionsToFail=filter.getSucceedingPositionsToFail();\n  if (succeedingPositionsToFail > 0) {\n    int positionsToSkip=0;\n    for (int j=0; j < succeedingPositionsToFail; j++) {\n      i++;\n      int nextPosition=positions[i];\n      positionsToSkip+=1 + nextPosition - streamPosition;\n      streamPosition=nextPosition + 1;\n    }\n    skip(positionsToSkip);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 178,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2023,
        "startLineNumber" : 190,
        "startColumnNumber" : 12,
        "endLineNumber" : 235,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int i=0; i < positionCount; i++) {\n  int position=positions[i];\n  if (position > streamPosition) {\n    skip(position - streamPosition);\n    streamPosition=position;\n  }\n  if (presentStream != null && !presentStream.nextBit()) {\n    if ((nonDeterministicFilter && filter.testNull()) || nullsAllowed) {\n      if (outputRequired) {\n        nulls[outputPositionCount]=true;\n      }\n      outputPositions[outputPositionCount]=position;\n      outputPositionCount++;\n    }\n  }\n else {\n    boolean value=dataStream.nextBit();\n    if (filter.testBoolean(value)) {\n      if (outputRequired) {\n        values[outputPositionCount]=(byte)(value ? 1 : 0);\n        if (nullsAllowed && presentStream != null) {\n          nulls[outputPositionCount]=false;\n        }\n      }\n      outputPositions[outputPositionCount]=position;\n      outputPositionCount++;\n    }\n  }\n  outputPositionCount-=filter.getPrecedingPositionsToFail();\n  streamPosition++;\n  int succeedingPositionsToFail=filter.getSucceedingPositionsToFail();\n  if (succeedingPositionsToFail > 0) {\n    int positionsToSkip=0;\n    for (int j=0; j < succeedingPositionsToFail; j++) {\n      i++;\n      int nextPosition=positions[i];\n      positionsToSkip+=1 + nextPosition - streamPosition;\n      streamPosition=nextPosition + 1;\n    }\n    skip(positionsToSkip);\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 189,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2489,
        "startLineNumber" : 182,
        "startColumnNumber" : 13,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  outputPositionCount=0;\n  for (int i=0; i < positionCount; i++) {\n    int position=positions[i];\n    if (position > streamPosition) {\n      skip(position - streamPosition);\n      streamPosition=position;\n    }\n    if (presentStream != null && !presentStream.nextBit()) {\n      if ((nonDeterministicFilter && filter.testNull()) || nullsAllowed) {\n        if (outputRequired) {\n          nulls[outputPositionCount]=true;\n        }\n        outputPositions[outputPositionCount]=position;\n        outputPositionCount++;\n      }\n    }\n else {\n      boolean value=dataStream.nextBit();\n      if (filter.testBoolean(value)) {\n        if (outputRequired) {\n          values[outputPositionCount]=(byte)(value ? 1 : 0);\n          if (nullsAllowed && presentStream != null) {\n            nulls[outputPositionCount]=false;\n          }\n        }\n        outputPositions[outputPositionCount]=position;\n        outputPositionCount++;\n      }\n    }\n    outputPositionCount-=filter.getPrecedingPositionsToFail();\n    streamPosition++;\n    int succeedingPositionsToFail=filter.getSucceedingPositionsToFail();\n    if (succeedingPositionsToFail > 0) {\n      int positionsToSkip=0;\n      for (int j=0; j < succeedingPositionsToFail; j++) {\n        i++;\n        int nextPosition=positions[i];\n        positionsToSkip+=1 + nextPosition - streamPosition;\n        streamPosition=nextPosition + 1;\n      }\n      skip(positionsToSkip);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 194,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2603,
        "startLineNumber" : 179,
        "startColumnNumber" : 13,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (filter == null) {\n  streamPosition=readNoFilter(positions,positionCount);\n}\n else {\n  outputPositionCount=0;\n  for (int i=0; i < positionCount; i++) {\n    int position=positions[i];\n    if (position > streamPosition) {\n      skip(position - streamPosition);\n      streamPosition=position;\n    }\n    if (presentStream != null && !presentStream.nextBit()) {\n      if ((nonDeterministicFilter && filter.testNull()) || nullsAllowed) {\n        if (outputRequired) {\n          nulls[outputPositionCount]=true;\n        }\n        outputPositions[outputPositionCount]=position;\n        outputPositionCount++;\n      }\n    }\n else {\n      boolean value=dataStream.nextBit();\n      if (filter.testBoolean(value)) {\n        if (outputRequired) {\n          values[outputPositionCount]=(byte)(value ? 1 : 0);\n          if (nullsAllowed && presentStream != null) {\n            nulls[outputPositionCount]=false;\n          }\n        }\n        outputPositions[outputPositionCount]=position;\n        outputPositionCount++;\n      }\n    }\n    outputPositionCount-=filter.getPrecedingPositionsToFail();\n    streamPosition++;\n    int succeedingPositionsToFail=filter.getSucceedingPositionsToFail();\n    if (succeedingPositionsToFail > 0) {\n      int positionsToSkip=0;\n      for (int j=0; j < succeedingPositionsToFail; j++) {\n        i++;\n        int nextPosition=positions[i];\n        positionsToSkip+=1 + nextPosition - streamPosition;\n        streamPosition=nextPosition + 1;\n      }\n      skip(positionsToSkip);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 206,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2746,
        "startLineNumber" : 176,
        "startColumnNumber" : 8,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (dataStream == null && presentStream != null) {\n  streamPosition=readAllNulls(positions,positionCount);\n}\n else if (filter == null) {\n  streamPosition=readNoFilter(positions,positionCount);\n}\n else {\n  outputPositionCount=0;\n  for (int i=0; i < positionCount; i++) {\n    int position=positions[i];\n    if (position > streamPosition) {\n      skip(position - streamPosition);\n      streamPosition=position;\n    }\n    if (presentStream != null && !presentStream.nextBit()) {\n      if ((nonDeterministicFilter && filter.testNull()) || nullsAllowed) {\n        if (outputRequired) {\n          nulls[outputPositionCount]=true;\n        }\n        outputPositions[outputPositionCount]=position;\n        outputPositionCount++;\n      }\n    }\n else {\n      boolean value=dataStream.nextBit();\n      if (filter.testBoolean(value)) {\n        if (outputRequired) {\n          values[outputPositionCount]=(byte)(value ? 1 : 0);\n          if (nullsAllowed && presentStream != null) {\n            nulls[outputPositionCount]=false;\n          }\n        }\n        outputPositions[outputPositionCount]=position;\n        outputPositionCount++;\n      }\n    }\n    outputPositionCount-=filter.getPrecedingPositionsToFail();\n    streamPosition++;\n    int succeedingPositionsToFail=filter.getSucceedingPositionsToFail();\n    if (succeedingPositionsToFail > 0) {\n      int positionsToSkip=0;\n      for (int j=0; j < succeedingPositionsToFail; j++) {\n        i++;\n        int nextPosition=positions[i];\n        positionsToSkip+=1 + nextPosition - streamPosition;\n        streamPosition=nextPosition + 1;\n      }\n      skip(positionsToSkip);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 222,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3573,
        "startLineNumber" : 152,
        "startColumnNumber" : 4,
        "endLineNumber" : 240,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  checkArgument(positionCount > 0,\"positionCount must be greater than zero\");\n  checkState(!valuesInUse,\"BlockLease hasn't been closed yet\");\n  if (!rowGroupOpen) {\n    openRowGroup();\n  }\n  allNulls=false;\n  if (outputRequired) {\n    ensureValuesCapacity(positionCount,nullsAllowed && presentStream != null);\n  }\n  outputPositions=initializeOutputPositions(outputPositions,positions,positionCount);\n  systemMemoryContext.setBytes(getRetainedSizeInBytes());\n  if (readOffset < offset) {\n    skip(offset - readOffset);\n  }\n  int streamPosition=0;\n  if (dataStream == null && presentStream != null) {\n    streamPosition=readAllNulls(positions,positionCount);\n  }\n else   if (filter == null) {\n    streamPosition=readNoFilter(positions,positionCount);\n  }\n else {\n    outputPositionCount=0;\n    for (int i=0; i < positionCount; i++) {\n      int position=positions[i];\n      if (position > streamPosition) {\n        skip(position - streamPosition);\n        streamPosition=position;\n      }\n      if (presentStream != null && !presentStream.nextBit()) {\n        if ((nonDeterministicFilter && filter.testNull()) || nullsAllowed) {\n          if (outputRequired) {\n            nulls[outputPositionCount]=true;\n          }\n          outputPositions[outputPositionCount]=position;\n          outputPositionCount++;\n        }\n      }\n else {\n        boolean value=dataStream.nextBit();\n        if (filter.testBoolean(value)) {\n          if (outputRequired) {\n            values[outputPositionCount]=(byte)(value ? 1 : 0);\n            if (nullsAllowed && presentStream != null) {\n              nulls[outputPositionCount]=false;\n            }\n          }\n          outputPositions[outputPositionCount]=position;\n          outputPositionCount++;\n        }\n      }\n      outputPositionCount-=filter.getPrecedingPositionsToFail();\n      streamPosition++;\n      int succeedingPositionsToFail=filter.getSucceedingPositionsToFail();\n      if (succeedingPositionsToFail > 0) {\n        int positionsToSkip=0;\n        for (int j=0; j < succeedingPositionsToFail; j++) {\n          i++;\n          int nextPosition=positions[i];\n          positionsToSkip+=1 + nextPosition - streamPosition;\n          streamPosition=nextPosition + 1;\n        }\n        skip(positionsToSkip);\n      }\n    }\n  }\n  readOffset=offset + streamPosition;\n  return outputPositionCount;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 297,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3686,
        "startLineNumber" : 149,
        "startColumnNumber" : 4,
        "endLineNumber" : 240,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public int read(int offset,int[] positions,int positionCount) throws IOException {\n  checkArgument(positionCount > 0,\"positionCount must be greater than zero\");\n  checkState(!valuesInUse,\"BlockLease hasn't been closed yet\");\n  if (!rowGroupOpen) {\n    openRowGroup();\n  }\n  allNulls=false;\n  if (outputRequired) {\n    ensureValuesCapacity(positionCount,nullsAllowed && presentStream != null);\n  }\n  outputPositions=initializeOutputPositions(outputPositions,positions,positionCount);\n  systemMemoryContext.setBytes(getRetainedSizeInBytes());\n  if (readOffset < offset) {\n    skip(offset - readOffset);\n  }\n  int streamPosition=0;\n  if (dataStream == null && presentStream != null) {\n    streamPosition=readAllNulls(positions,positionCount);\n  }\n else   if (filter == null) {\n    streamPosition=readNoFilter(positions,positionCount);\n  }\n else {\n    outputPositionCount=0;\n    for (int i=0; i < positionCount; i++) {\n      int position=positions[i];\n      if (position > streamPosition) {\n        skip(position - streamPosition);\n        streamPosition=position;\n      }\n      if (presentStream != null && !presentStream.nextBit()) {\n        if ((nonDeterministicFilter && filter.testNull()) || nullsAllowed) {\n          if (outputRequired) {\n            nulls[outputPositionCount]=true;\n          }\n          outputPositions[outputPositionCount]=position;\n          outputPositionCount++;\n        }\n      }\n else {\n        boolean value=dataStream.nextBit();\n        if (filter.testBoolean(value)) {\n          if (outputRequired) {\n            values[outputPositionCount]=(byte)(value ? 1 : 0);\n            if (nullsAllowed && presentStream != null) {\n              nulls[outputPositionCount]=false;\n            }\n          }\n          outputPositions[outputPositionCount]=position;\n          outputPositionCount++;\n        }\n      }\n      outputPositionCount-=filter.getPrecedingPositionsToFail();\n      streamPosition++;\n      int succeedingPositionsToFail=filter.getSucceedingPositionsToFail();\n      if (succeedingPositionsToFail > 0) {\n        int positionsToSkip=0;\n        for (int j=0; j < succeedingPositionsToFail; j++) {\n          i++;\n          int nextPosition=positions[i];\n          positionsToSkip+=1 + nextPosition - streamPosition;\n          streamPosition=nextPosition + 1;\n        }\n        skip(positionsToSkip);\n      }\n    }\n  }\n  readOffset=offset + streamPosition;\n  return outputPositionCount;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 316,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 207,
        "startColumnNumber" : 20,
        "endLineNumber" : 207,
        "endColumnNumber" : 57
      },
      "nodeContext" : "boolean value=dataStream.nextBit();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 20,
    "startLineNumber" : 207,
    "startColumnNumber" : 36,
    "endLineNumber" : 207,
    "endColumnNumber" : 56
  } ],
  "layoutRelationDataList" : [ ]
}