{
  "id" : 254,
  "expression" : "serviceUrl.intern()",
  "projectName" : "Netflix@eureka",
  "commitID" : "295f257424f0952b17a6903940bbd4e2f2fced03",
  "filePath" : "eureka-core/src/main/java/com/netflix/eureka/cluster/PeerEurekaNode.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "serviceUrl.intern()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 95,
      "startColumnNumber" : 26,
      "endLineNumber" : 95,
      "endColumnNumber" : 45
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 95,
        "startColumnNumber" : 8,
        "endLineNumber" : 95,
        "endColumnNumber" : 45
      },
      "nodeContext" : "this.serviceUrl=serviceUrl.intern()",
      "nodeType" : "Assignment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 95,
        "startColumnNumber" : 8,
        "endLineNumber" : 95,
        "endColumnNumber" : 46
      },
      "nodeContext" : "this.serviceUrl=serviceUrl.intern();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2389,
        "startLineNumber" : 94,
        "startColumnNumber" : 45,
        "endLineNumber" : 143,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  this.serviceUrl=serviceUrl.intern();\n  this.name=getClass().getSimpleName() + \": \" + serviceUrl+ \"apps/: \";\n  this.heartBeatBatcher=getBatcher(serviceUrl,Action.Heartbeat.name());\n  this.statusBatcher=getBatcher(serviceUrl,Action.StatusUpdate.name());\n  this.asgStatusBatcher=getBatcher(serviceUrl,\"ASG_\" + Action.StatusUpdate.name());\n  this.registerBatcher=getBatcher(serviceUrl,Action.Register.name());\n  this.cancelBatcher=getBatcher(serviceUrl,Action.Cancel.name());\nsynchronized (this.serviceUrl) {\n    if (jerseyApacheClient == null) {\n      try {\n        String hostname;\n        try {\n          hostname=new URL(serviceUrl).getHost();\n        }\n catch (        MalformedURLException e) {\n          hostname=serviceUrl;\n        }\n        String jerseyClientName=\"Discovery-PeerNodeClient-\" + hostname;\n        jerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,config.getPeerNodeConnectTimeoutMs(),config.getPeerNodeReadTimeoutMs(),config.getPeerNodeTotalConnections(),config.getPeerNodeTotalConnectionsPerHost(),config.getPeerNodeConnectionIdleTimeoutSeconds());\n        jerseyApacheClient=jerseyClient.getClient();\n      }\n catch (      Throwable e) {\n        throw new RuntimeException(\"Cannot Create new Replica Node :\" + name);\n      }\n    }\n    String ip=null;\n    try {\n      ip=InetAddress.getLocalHost().getHostAddress();\n    }\n catch (    UnknownHostException e) {\n      logger.warn(\"Cannot find localhost ip\",e);\n    }\n    EurekaServerIdentity identity=new EurekaServerIdentity(ip);\n    jerseyApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  }\n  try {\n    String serviceUrlHost=new URL(serviceUrl).getHost();\n    Monitors.registerObject(serviceUrlHost,this);\n  }\n catch (  Throwable e) {\n    logger.error(\"Cannot register monitors for Peer eureka node :\" + serviceUrl,e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 254,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2430,
        "startLineNumber" : 94,
        "startColumnNumber" : 4,
        "endLineNumber" : 143,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public PeerEurekaNode(String serviceUrl){\n  this.serviceUrl=serviceUrl.intern();\n  this.name=getClass().getSimpleName() + \": \" + serviceUrl+ \"apps/: \";\n  this.heartBeatBatcher=getBatcher(serviceUrl,Action.Heartbeat.name());\n  this.statusBatcher=getBatcher(serviceUrl,Action.StatusUpdate.name());\n  this.asgStatusBatcher=getBatcher(serviceUrl,\"ASG_\" + Action.StatusUpdate.name());\n  this.registerBatcher=getBatcher(serviceUrl,Action.Register.name());\n  this.cancelBatcher=getBatcher(serviceUrl,Action.Cancel.name());\nsynchronized (this.serviceUrl) {\n    if (jerseyApacheClient == null) {\n      try {\n        String hostname;\n        try {\n          hostname=new URL(serviceUrl).getHost();\n        }\n catch (        MalformedURLException e) {\n          hostname=serviceUrl;\n        }\n        String jerseyClientName=\"Discovery-PeerNodeClient-\" + hostname;\n        jerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,config.getPeerNodeConnectTimeoutMs(),config.getPeerNodeReadTimeoutMs(),config.getPeerNodeTotalConnections(),config.getPeerNodeTotalConnectionsPerHost(),config.getPeerNodeConnectionIdleTimeoutSeconds());\n        jerseyApacheClient=jerseyClient.getClient();\n      }\n catch (      Throwable e) {\n        throw new RuntimeException(\"Cannot Create new Replica Node :\" + name);\n      }\n    }\n    String ip=null;\n    try {\n      ip=InetAddress.getLocalHost().getHostAddress();\n    }\n catch (    UnknownHostException e) {\n      logger.warn(\"Cannot find localhost ip\",e);\n    }\n    EurekaServerIdentity identity=new EurekaServerIdentity(ip);\n    jerseyApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  }\n  try {\n    String serviceUrlHost=new URL(serviceUrl).getHost();\n    Monitors.registerObject(serviceUrlHost,this);\n  }\n catch (  Throwable e) {\n    logger.error(\"Cannot register monitors for Peer eureka node :\" + serviceUrl,e);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 261,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 95,
        "startColumnNumber" : 8,
        "endLineNumber" : 95,
        "endColumnNumber" : 46
      },
      "nodeContext" : "this.serviceUrl=serviceUrl.intern();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 19,
    "startLineNumber" : 95,
    "startColumnNumber" : 26,
    "endLineNumber" : 95,
    "endColumnNumber" : 45
  } ],
  "layoutRelationDataList" : [ ]
}