{
  "id" : 384,
  "expression" : "SpanLayer",
  "projectName" : "apache@skywalking",
  "commitID" : "16b51d55baec4f779f312e07081d1397addbcfe9",
  "filePath" : "/apm-sniffer/apm-sdk-plugin/kafka-plugin/src/main/java/org/apache/skywalking/apm/plugin/kafka/KafkaProducerInterceptor.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "SpanLayer",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 56,
      "startColumnNumber" : 8,
      "endLineNumber" : 56,
      "endColumnNumber" : 17
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 56,
        "startColumnNumber" : 8,
        "endLineNumber" : 56,
        "endColumnNumber" : 34
      },
      "nodeContext" : "SpanLayer.asMQ(activeSpan)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 56,
        "startColumnNumber" : 8,
        "endLineNumber" : 56,
        "endColumnNumber" : 35
      },
      "nodeContext" : "SpanLayer.asMQ(activeSpan);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2217,
        "startLineNumber" : 44,
        "startColumnNumber" : 76,
        "endLineNumber" : 88,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ContextCarrier contextCarrier=new ContextCarrier();\n  ProducerRecord record=(ProducerRecord)allArguments[0];\n  String topicName=record.topic();\n  AbstractSpan activeSpan=ContextManager.createExitSpan(OPERATE_NAME_PREFIX + topicName + PRODUCER_OPERATE_NAME_SUFFIX,contextCarrier,(String)objInst.getSkyWalkingDynamicField());\n  Tags.MQ_BROKER.set(activeSpan,(String)objInst.getSkyWalkingDynamicField());\n  Tags.MQ_TOPIC.set(activeSpan,topicName);\n  contextCarrier.extensionInjector().injectSendingTimestamp();\n  SpanLayer.asMQ(activeSpan);\n  activeSpan.setComponent(ComponentsDefine.KAFKA_PRODUCER);\n  CarrierItem next=contextCarrier.items();\n  while (next.hasNext()) {\n    next=next.next();\n    record.headers().add(next.getHeadKey(),next.getHeadValue().getBytes(StandardCharsets.UTF_8));\n  }\n  Object shouldCallbackInstance=allArguments[1];\n  if (null != shouldCallbackInstance) {\n    if (shouldCallbackInstance instanceof EnhancedInstance) {\n      EnhancedInstance callbackInstance=(EnhancedInstance)shouldCallbackInstance;\n      ContextSnapshot snapshot=ContextManager.capture();\n      if (null != snapshot) {\n        CallbackCache cache=new CallbackCache();\n        cache.setSnapshot(snapshot);\n        callbackInstance.setSkyWalkingDynamicField(cache);\n      }\n    }\n else     if (shouldCallbackInstance instanceof Callback) {\n      Callback callback=(Callback)shouldCallbackInstance;\n      ContextSnapshot snapshot=ContextManager.capture();\n      if (null != snapshot) {\n        CallbackCache cache=new CallbackCache();\n        cache.setSnapshot(snapshot);\n        cache.setCallback(callback);\n        allArguments[1]=new CallbackAdapterInterceptor(cache);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 236,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2423,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 88,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void beforeMethod(EnhancedInstance objInst,Method method,Object[] allArguments,Class<?>[] argumentsTypes,MethodInterceptResult result) throws Throwable {\n  ContextCarrier contextCarrier=new ContextCarrier();\n  ProducerRecord record=(ProducerRecord)allArguments[0];\n  String topicName=record.topic();\n  AbstractSpan activeSpan=ContextManager.createExitSpan(OPERATE_NAME_PREFIX + topicName + PRODUCER_OPERATE_NAME_SUFFIX,contextCarrier,(String)objInst.getSkyWalkingDynamicField());\n  Tags.MQ_BROKER.set(activeSpan,(String)objInst.getSkyWalkingDynamicField());\n  Tags.MQ_TOPIC.set(activeSpan,topicName);\n  contextCarrier.extensionInjector().injectSendingTimestamp();\n  SpanLayer.asMQ(activeSpan);\n  activeSpan.setComponent(ComponentsDefine.KAFKA_PRODUCER);\n  CarrierItem next=contextCarrier.items();\n  while (next.hasNext()) {\n    next=next.next();\n    record.headers().add(next.getHeadKey(),next.getHeadValue().getBytes(StandardCharsets.UTF_8));\n  }\n  Object shouldCallbackInstance=allArguments[1];\n  if (null != shouldCallbackInstance) {\n    if (shouldCallbackInstance instanceof EnhancedInstance) {\n      EnhancedInstance callbackInstance=(EnhancedInstance)shouldCallbackInstance;\n      ContextSnapshot snapshot=ContextManager.capture();\n      if (null != snapshot) {\n        CallbackCache cache=new CallbackCache();\n        cache.setSnapshot(snapshot);\n        callbackInstance.setSkyWalkingDynamicField(cache);\n      }\n    }\n else     if (shouldCallbackInstance instanceof Callback) {\n      Callback callback=(Callback)shouldCallbackInstance;\n      ContextSnapshot snapshot=ContextManager.capture();\n      if (null != snapshot) {\n        CallbackCache cache=new CallbackCache();\n        cache.setSnapshot(snapshot);\n        cache.setCallback(callback);\n        allArguments[1]=new CallbackAdapterInterceptor(cache);\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 270,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 56,
        "startColumnNumber" : 8,
        "endLineNumber" : 56,
        "endColumnNumber" : 35
      },
      "nodeContext" : "SpanLayer.asMQ(activeSpan);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.apache.skywalking.apm.agent.core.context.trace.SpanLayer"
  } ],
  "positionList" : [ {
    "charLength" : 9,
    "startLineNumber" : 56,
    "startColumnNumber" : 8,
    "endLineNumber" : 56,
    "endColumnNumber" : 17
  } ],
  "layoutRelationDataList" : [ ]
}