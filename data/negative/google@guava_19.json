{
  "id" : 19,
  "expression" : "(in == BROKEN_OPEN_SOURCE)",
  "projectName" : "google@guava",
  "commitID" : "68500b2c09fa6985eab2e41577e2992685b57f2b",
  "filePath" : "/android/guava-tests/test/com/google/common/io/CharSourceTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "(in == BROKEN_OPEN_SOURCE)",
    "nodeType" : "ParenthesizedExpression",
    "nodePosition" : {
      "charLength" : 26,
      "startLineNumber" : 273,
      "startColumnNumber" : 23,
      "endLineNumber" : 273,
      "endColumnNumber" : 49
    },
    "astNodeNumber" : 4,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 273,
        "startColumnNumber" : 23,
        "endLineNumber" : 273,
        "endColumnNumber" : 57
      },
      "nodeContext" : "(in == BROKEN_OPEN_SOURCE) ? 0 : 1",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 273,
        "startColumnNumber" : 10,
        "endLineNumber" : 273,
        "endColumnNumber" : 90
      },
      "nodeContext" : "assertEquals((in == BROKEN_OPEN_SOURCE) ? 0 : 1,getAndResetRecords(logHandler))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 273,
        "startColumnNumber" : 10,
        "endLineNumber" : 273,
        "endColumnNumber" : 91
      },
      "nodeContext" : "assertEquals((in == BROKEN_OPEN_SOURCE) ? 0 : 1,getAndResetRecords(logHandler));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 276,
        "startLineNumber" : 268,
        "startColumnNumber" : 45,
        "endLineNumber" : 274,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  runFailureTest(in,newNormalCharSink());\n  assertTrue(logHandler.getStoredLogRecords().isEmpty());\n  runFailureTest(in,BROKEN_CLOSE_SINK);\n  assertEquals((in == BROKEN_OPEN_SOURCE) ? 0 : 1,getAndResetRecords(logHandler));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 33,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 313,
        "startLineNumber" : 268,
        "startColumnNumber" : 8,
        "endLineNumber" : 274,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (CharSource in : BROKEN_SOURCES) {\n  runFailureTest(in,newNormalCharSink());\n  assertTrue(logHandler.getStoredLogRecords().isEmpty());\n  runFailureTest(in,BROKEN_CLOSE_SINK);\n  assertEquals((in == BROKEN_OPEN_SOURCE) ? 0 : 1,getAndResetRecords(logHandler));\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 39,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 849,
        "startLineNumber" : 267,
        "startColumnNumber" : 10,
        "endLineNumber" : 290,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  for (  CharSource in : BROKEN_SOURCES) {\n    runFailureTest(in,newNormalCharSink());\n    assertTrue(logHandler.getStoredLogRecords().isEmpty());\n    runFailureTest(in,BROKEN_CLOSE_SINK);\n    assertEquals((in == BROKEN_OPEN_SOURCE) ? 0 : 1,getAndResetRecords(logHandler));\n  }\n  for (  CharSink out : BROKEN_SINKS) {\n    runFailureTest(newNormalCharSource(),out);\n    assertTrue(logHandler.getStoredLogRecords().isEmpty());\n    runFailureTest(BROKEN_CLOSE_SOURCE,out);\n    assertEquals(1,getAndResetRecords(logHandler));\n  }\n  for (  CharSource in : BROKEN_SOURCES) {\n    for (    CharSink out : BROKEN_SINKS) {\n      runFailureTest(in,out);\n      assertTrue(getAndResetRecords(logHandler) <= 1);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 100,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 926,
        "startLineNumber" : 267,
        "startColumnNumber" : 6,
        "endLineNumber" : 292,
        "endColumnNumber" : 7
      },
      "nodeContext" : "try {\n  for (  CharSource in : BROKEN_SOURCES) {\n    runFailureTest(in,newNormalCharSink());\n    assertTrue(logHandler.getStoredLogRecords().isEmpty());\n    runFailureTest(in,BROKEN_CLOSE_SINK);\n    assertEquals((in == BROKEN_OPEN_SOURCE) ? 0 : 1,getAndResetRecords(logHandler));\n  }\n  for (  CharSink out : BROKEN_SINKS) {\n    runFailureTest(newNormalCharSource(),out);\n    assertTrue(logHandler.getStoredLogRecords().isEmpty());\n    runFailureTest(BROKEN_CLOSE_SOURCE,out);\n    assertEquals(1,getAndResetRecords(logHandler));\n  }\n  for (  CharSource in : BROKEN_SOURCES) {\n    for (    CharSink out : BROKEN_SINKS) {\n      runFailureTest(in,out);\n      assertTrue(getAndResetRecords(logHandler) <= 1);\n    }\n  }\n}\n  finally {\n  Closeables.logger.removeHandler(logHandler);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 109,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1092,
        "startLineNumber" : 262,
        "startColumnNumber" : 65,
        "endLineNumber" : 293,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  TestLogHandler logHandler=new TestLogHandler();\n  Closeables.logger.addHandler(logHandler);\n  try {\n    for (    CharSource in : BROKEN_SOURCES) {\n      runFailureTest(in,newNormalCharSink());\n      assertTrue(logHandler.getStoredLogRecords().isEmpty());\n      runFailureTest(in,BROKEN_CLOSE_SINK);\n      assertEquals((in == BROKEN_OPEN_SOURCE) ? 0 : 1,getAndResetRecords(logHandler));\n    }\n    for (    CharSink out : BROKEN_SINKS) {\n      runFailureTest(newNormalCharSource(),out);\n      assertTrue(logHandler.getStoredLogRecords().isEmpty());\n      runFailureTest(BROKEN_CLOSE_SOURCE,out);\n      assertEquals(1,getAndResetRecords(logHandler));\n    }\n    for (    CharSource in : BROKEN_SOURCES) {\n      for (      CharSink out : BROKEN_SINKS) {\n        runFailureTest(in,out);\n        assertTrue(getAndResetRecords(logHandler) <= 1);\n      }\n    }\n  }\n  finally {\n    Closeables.logger.removeHandler(logHandler);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 125,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2036,
        "startLineNumber" : 262,
        "startColumnNumber" : 4,
        "endLineNumber" : 318,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (Closer.create().suppressor instanceof LoggingSuppressor) {\n  TestLogHandler logHandler=new TestLogHandler();\n  Closeables.logger.addHandler(logHandler);\n  try {\n    for (    CharSource in : BROKEN_SOURCES) {\n      runFailureTest(in,newNormalCharSink());\n      assertTrue(logHandler.getStoredLogRecords().isEmpty());\n      runFailureTest(in,BROKEN_CLOSE_SINK);\n      assertEquals((in == BROKEN_OPEN_SOURCE) ? 0 : 1,getAndResetRecords(logHandler));\n    }\n    for (    CharSink out : BROKEN_SINKS) {\n      runFailureTest(newNormalCharSource(),out);\n      assertTrue(logHandler.getStoredLogRecords().isEmpty());\n      runFailureTest(BROKEN_CLOSE_SOURCE,out);\n      assertEquals(1,getAndResetRecords(logHandler));\n    }\n    for (    CharSource in : BROKEN_SOURCES) {\n      for (      CharSink out : BROKEN_SINKS) {\n        runFailureTest(in,out);\n        assertTrue(getAndResetRecords(logHandler) <= 1);\n      }\n    }\n  }\n  finally {\n    Closeables.logger.removeHandler(logHandler);\n  }\n}\n else {\n  for (  CharSource in : BROKEN_SOURCES) {\n    int suppressed=runSuppressionFailureTest(in,newNormalCharSink());\n    assertEquals(0,suppressed);\n    suppressed=runSuppressionFailureTest(in,BROKEN_CLOSE_SINK);\n    assertEquals((in == BROKEN_OPEN_SOURCE) ? 0 : 1,suppressed);\n  }\n  for (  CharSink out : BROKEN_SINKS) {\n    int suppressed=runSuppressionFailureTest(newNormalCharSource(),out);\n    assertEquals(0,suppressed);\n    suppressed=runSuppressionFailureTest(BROKEN_CLOSE_SOURCE,out);\n    assertEquals(1,suppressed);\n  }\n  for (  CharSource in : BROKEN_SOURCES) {\n    for (    CharSink out : BROKEN_SINKS) {\n      int suppressed=runSuppressionFailureTest(in,out);\n      assertTrue(suppressed <= 1);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 235,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2048,
        "startLineNumber" : 261,
        "startColumnNumber" : 35,
        "endLineNumber" : 319,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (Closer.create().suppressor instanceof LoggingSuppressor) {\n    TestLogHandler logHandler=new TestLogHandler();\n    Closeables.logger.addHandler(logHandler);\n    try {\n      for (      CharSource in : BROKEN_SOURCES) {\n        runFailureTest(in,newNormalCharSink());\n        assertTrue(logHandler.getStoredLogRecords().isEmpty());\n        runFailureTest(in,BROKEN_CLOSE_SINK);\n        assertEquals((in == BROKEN_OPEN_SOURCE) ? 0 : 1,getAndResetRecords(logHandler));\n      }\n      for (      CharSink out : BROKEN_SINKS) {\n        runFailureTest(newNormalCharSource(),out);\n        assertTrue(logHandler.getStoredLogRecords().isEmpty());\n        runFailureTest(BROKEN_CLOSE_SOURCE,out);\n        assertEquals(1,getAndResetRecords(logHandler));\n      }\n      for (      CharSource in : BROKEN_SOURCES) {\n        for (        CharSink out : BROKEN_SINKS) {\n          runFailureTest(in,out);\n          assertTrue(getAndResetRecords(logHandler) <= 1);\n        }\n      }\n    }\n  finally {\n      Closeables.logger.removeHandler(logHandler);\n    }\n  }\n else {\n    for (    CharSource in : BROKEN_SOURCES) {\n      int suppressed=runSuppressionFailureTest(in,newNormalCharSink());\n      assertEquals(0,suppressed);\n      suppressed=runSuppressionFailureTest(in,BROKEN_CLOSE_SINK);\n      assertEquals((in == BROKEN_OPEN_SOURCE) ? 0 : 1,suppressed);\n    }\n    for (    CharSink out : BROKEN_SINKS) {\n      int suppressed=runSuppressionFailureTest(newNormalCharSource(),out);\n      assertEquals(0,suppressed);\n      suppressed=runSuppressionFailureTest(BROKEN_CLOSE_SOURCE,out);\n      assertEquals(1,suppressed);\n    }\n    for (    CharSource in : BROKEN_SOURCES) {\n      for (      CharSink out : BROKEN_SINKS) {\n        int suppressed=runSuppressionFailureTest(in,out);\n        assertTrue(suppressed <= 1);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 236,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2081,
        "startLineNumber" : 261,
        "startColumnNumber" : 2,
        "endLineNumber" : 319,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public void testCopyExceptions(){\n  if (Closer.create().suppressor instanceof LoggingSuppressor) {\n    TestLogHandler logHandler=new TestLogHandler();\n    Closeables.logger.addHandler(logHandler);\n    try {\n      for (      CharSource in : BROKEN_SOURCES) {\n        runFailureTest(in,newNormalCharSink());\n        assertTrue(logHandler.getStoredLogRecords().isEmpty());\n        runFailureTest(in,BROKEN_CLOSE_SINK);\n        assertEquals((in == BROKEN_OPEN_SOURCE) ? 0 : 1,getAndResetRecords(logHandler));\n      }\n      for (      CharSink out : BROKEN_SINKS) {\n        runFailureTest(newNormalCharSource(),out);\n        assertTrue(logHandler.getStoredLogRecords().isEmpty());\n        runFailureTest(BROKEN_CLOSE_SOURCE,out);\n        assertEquals(1,getAndResetRecords(logHandler));\n      }\n      for (      CharSource in : BROKEN_SOURCES) {\n        for (        CharSink out : BROKEN_SINKS) {\n          runFailureTest(in,out);\n          assertTrue(getAndResetRecords(logHandler) <= 1);\n        }\n      }\n    }\n  finally {\n      Closeables.logger.removeHandler(logHandler);\n    }\n  }\n else {\n    for (    CharSource in : BROKEN_SOURCES) {\n      int suppressed=runSuppressionFailureTest(in,newNormalCharSink());\n      assertEquals(0,suppressed);\n      suppressed=runSuppressionFailureTest(in,BROKEN_CLOSE_SINK);\n      assertEquals((in == BROKEN_OPEN_SOURCE) ? 0 : 1,suppressed);\n    }\n    for (    CharSink out : BROKEN_SINKS) {\n      int suppressed=runSuppressionFailureTest(newNormalCharSource(),out);\n      assertEquals(0,suppressed);\n      suppressed=runSuppressionFailureTest(BROKEN_CLOSE_SOURCE,out);\n      assertEquals(1,suppressed);\n    }\n    for (    CharSource in : BROKEN_SOURCES) {\n      for (      CharSink out : BROKEN_SINKS) {\n        int suppressed=runSuppressionFailureTest(in,out);\n        assertTrue(suppressed <= 1);\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 240,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 273,
        "startColumnNumber" : 10,
        "endLineNumber" : 273,
        "endColumnNumber" : 91
      },
      "nodeContext" : "assertEquals((in == BROKEN_OPEN_SOURCE) ? 0 : 1,getAndResetRecords(logHandler));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 5,
    "type" : "boolean"
  }, {
    "nodeContext" : "(in == BROKEN_OPEN_SOURCE)",
    "nodeType" : "ParenthesizedExpression",
    "nodePosition" : {
      "charLength" : 26,
      "startLineNumber" : 301,
      "startColumnNumber" : 21,
      "endLineNumber" : 301,
      "endColumnNumber" : 47
    },
    "astNodeNumber" : 4,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 301,
        "startColumnNumber" : 21,
        "endLineNumber" : 301,
        "endColumnNumber" : 55
      },
      "nodeContext" : "(in == BROKEN_OPEN_SOURCE) ? 0 : 1",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 301,
        "startColumnNumber" : 8,
        "endLineNumber" : 301,
        "endColumnNumber" : 68
      },
      "nodeContext" : "assertEquals((in == BROKEN_OPEN_SOURCE) ? 0 : 1,suppressed)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 301,
        "startColumnNumber" : 8,
        "endLineNumber" : 301,
        "endColumnNumber" : 69
      },
      "nodeContext" : "assertEquals((in == BROKEN_OPEN_SOURCE) ? 0 : 1,suppressed);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 271,
        "startLineNumber" : 296,
        "startColumnNumber" : 43,
        "endLineNumber" : 302,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  int suppressed=runSuppressionFailureTest(in,newNormalCharSink());\n  assertEquals(0,suppressed);\n  suppressed=runSuppressionFailureTest(in,BROKEN_CLOSE_SINK);\n  assertEquals((in == BROKEN_OPEN_SOURCE) ? 0 : 1,suppressed);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 33,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 308,
        "startLineNumber" : 296,
        "startColumnNumber" : 6,
        "endLineNumber" : 302,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (CharSource in : BROKEN_SOURCES) {\n  int suppressed=runSuppressionFailureTest(in,newNormalCharSink());\n  assertEquals(0,suppressed);\n  suppressed=runSuppressionFailureTest(in,BROKEN_CLOSE_SINK);\n  assertEquals((in == BROKEN_OPEN_SOURCE) ? 0 : 1,suppressed);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 39,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 877,
        "startLineNumber" : 293,
        "startColumnNumber" : 11,
        "endLineNumber" : 318,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  for (  CharSource in : BROKEN_SOURCES) {\n    int suppressed=runSuppressionFailureTest(in,newNormalCharSink());\n    assertEquals(0,suppressed);\n    suppressed=runSuppressionFailureTest(in,BROKEN_CLOSE_SINK);\n    assertEquals((in == BROKEN_OPEN_SOURCE) ? 0 : 1,suppressed);\n  }\n  for (  CharSink out : BROKEN_SINKS) {\n    int suppressed=runSuppressionFailureTest(newNormalCharSource(),out);\n    assertEquals(0,suppressed);\n    suppressed=runSuppressionFailureTest(BROKEN_CLOSE_SOURCE,out);\n    assertEquals(1,suppressed);\n  }\n  for (  CharSource in : BROKEN_SOURCES) {\n    for (    CharSink out : BROKEN_SINKS) {\n      int suppressed=runSuppressionFailureTest(in,out);\n      assertTrue(suppressed <= 1);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 101,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2036,
        "startLineNumber" : 262,
        "startColumnNumber" : 4,
        "endLineNumber" : 318,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (Closer.create().suppressor instanceof LoggingSuppressor) {\n  TestLogHandler logHandler=new TestLogHandler();\n  Closeables.logger.addHandler(logHandler);\n  try {\n    for (    CharSource in : BROKEN_SOURCES) {\n      runFailureTest(in,newNormalCharSink());\n      assertTrue(logHandler.getStoredLogRecords().isEmpty());\n      runFailureTest(in,BROKEN_CLOSE_SINK);\n      assertEquals((in == BROKEN_OPEN_SOURCE) ? 0 : 1,getAndResetRecords(logHandler));\n    }\n    for (    CharSink out : BROKEN_SINKS) {\n      runFailureTest(newNormalCharSource(),out);\n      assertTrue(logHandler.getStoredLogRecords().isEmpty());\n      runFailureTest(BROKEN_CLOSE_SOURCE,out);\n      assertEquals(1,getAndResetRecords(logHandler));\n    }\n    for (    CharSource in : BROKEN_SOURCES) {\n      for (      CharSink out : BROKEN_SINKS) {\n        runFailureTest(in,out);\n        assertTrue(getAndResetRecords(logHandler) <= 1);\n      }\n    }\n  }\n  finally {\n    Closeables.logger.removeHandler(logHandler);\n  }\n}\n else {\n  for (  CharSource in : BROKEN_SOURCES) {\n    int suppressed=runSuppressionFailureTest(in,newNormalCharSink());\n    assertEquals(0,suppressed);\n    suppressed=runSuppressionFailureTest(in,BROKEN_CLOSE_SINK);\n    assertEquals((in == BROKEN_OPEN_SOURCE) ? 0 : 1,suppressed);\n  }\n  for (  CharSink out : BROKEN_SINKS) {\n    int suppressed=runSuppressionFailureTest(newNormalCharSource(),out);\n    assertEquals(0,suppressed);\n    suppressed=runSuppressionFailureTest(BROKEN_CLOSE_SOURCE,out);\n    assertEquals(1,suppressed);\n  }\n  for (  CharSource in : BROKEN_SOURCES) {\n    for (    CharSink out : BROKEN_SINKS) {\n      int suppressed=runSuppressionFailureTest(in,out);\n      assertTrue(suppressed <= 1);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 235,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2048,
        "startLineNumber" : 261,
        "startColumnNumber" : 35,
        "endLineNumber" : 319,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (Closer.create().suppressor instanceof LoggingSuppressor) {\n    TestLogHandler logHandler=new TestLogHandler();\n    Closeables.logger.addHandler(logHandler);\n    try {\n      for (      CharSource in : BROKEN_SOURCES) {\n        runFailureTest(in,newNormalCharSink());\n        assertTrue(logHandler.getStoredLogRecords().isEmpty());\n        runFailureTest(in,BROKEN_CLOSE_SINK);\n        assertEquals((in == BROKEN_OPEN_SOURCE) ? 0 : 1,getAndResetRecords(logHandler));\n      }\n      for (      CharSink out : BROKEN_SINKS) {\n        runFailureTest(newNormalCharSource(),out);\n        assertTrue(logHandler.getStoredLogRecords().isEmpty());\n        runFailureTest(BROKEN_CLOSE_SOURCE,out);\n        assertEquals(1,getAndResetRecords(logHandler));\n      }\n      for (      CharSource in : BROKEN_SOURCES) {\n        for (        CharSink out : BROKEN_SINKS) {\n          runFailureTest(in,out);\n          assertTrue(getAndResetRecords(logHandler) <= 1);\n        }\n      }\n    }\n  finally {\n      Closeables.logger.removeHandler(logHandler);\n    }\n  }\n else {\n    for (    CharSource in : BROKEN_SOURCES) {\n      int suppressed=runSuppressionFailureTest(in,newNormalCharSink());\n      assertEquals(0,suppressed);\n      suppressed=runSuppressionFailureTest(in,BROKEN_CLOSE_SINK);\n      assertEquals((in == BROKEN_OPEN_SOURCE) ? 0 : 1,suppressed);\n    }\n    for (    CharSink out : BROKEN_SINKS) {\n      int suppressed=runSuppressionFailureTest(newNormalCharSource(),out);\n      assertEquals(0,suppressed);\n      suppressed=runSuppressionFailureTest(BROKEN_CLOSE_SOURCE,out);\n      assertEquals(1,suppressed);\n    }\n    for (    CharSource in : BROKEN_SOURCES) {\n      for (      CharSink out : BROKEN_SINKS) {\n        int suppressed=runSuppressionFailureTest(in,out);\n        assertTrue(suppressed <= 1);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 236,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2081,
        "startLineNumber" : 261,
        "startColumnNumber" : 2,
        "endLineNumber" : 319,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public void testCopyExceptions(){\n  if (Closer.create().suppressor instanceof LoggingSuppressor) {\n    TestLogHandler logHandler=new TestLogHandler();\n    Closeables.logger.addHandler(logHandler);\n    try {\n      for (      CharSource in : BROKEN_SOURCES) {\n        runFailureTest(in,newNormalCharSink());\n        assertTrue(logHandler.getStoredLogRecords().isEmpty());\n        runFailureTest(in,BROKEN_CLOSE_SINK);\n        assertEquals((in == BROKEN_OPEN_SOURCE) ? 0 : 1,getAndResetRecords(logHandler));\n      }\n      for (      CharSink out : BROKEN_SINKS) {\n        runFailureTest(newNormalCharSource(),out);\n        assertTrue(logHandler.getStoredLogRecords().isEmpty());\n        runFailureTest(BROKEN_CLOSE_SOURCE,out);\n        assertEquals(1,getAndResetRecords(logHandler));\n      }\n      for (      CharSource in : BROKEN_SOURCES) {\n        for (        CharSink out : BROKEN_SINKS) {\n          runFailureTest(in,out);\n          assertTrue(getAndResetRecords(logHandler) <= 1);\n        }\n      }\n    }\n  finally {\n      Closeables.logger.removeHandler(logHandler);\n    }\n  }\n else {\n    for (    CharSource in : BROKEN_SOURCES) {\n      int suppressed=runSuppressionFailureTest(in,newNormalCharSink());\n      assertEquals(0,suppressed);\n      suppressed=runSuppressionFailureTest(in,BROKEN_CLOSE_SINK);\n      assertEquals((in == BROKEN_OPEN_SOURCE) ? 0 : 1,suppressed);\n    }\n    for (    CharSink out : BROKEN_SINKS) {\n      int suppressed=runSuppressionFailureTest(newNormalCharSource(),out);\n      assertEquals(0,suppressed);\n      suppressed=runSuppressionFailureTest(BROKEN_CLOSE_SOURCE,out);\n      assertEquals(1,suppressed);\n    }\n    for (    CharSource in : BROKEN_SOURCES) {\n      for (      CharSink out : BROKEN_SINKS) {\n        int suppressed=runSuppressionFailureTest(in,out);\n        assertTrue(suppressed <= 1);\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 240,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 301,
        "startColumnNumber" : 8,
        "endLineNumber" : 301,
        "endColumnNumber" : 69
      },
      "nodeContext" : "assertEquals((in == BROKEN_OPEN_SOURCE) ? 0 : 1,suppressed);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 6
    },
    "tokenLength" : 5,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 26,
    "startLineNumber" : 273,
    "startColumnNumber" : 23,
    "endLineNumber" : 273,
    "endColumnNumber" : 49
  }, {
    "charLength" : 26,
    "startLineNumber" : 301,
    "startColumnNumber" : 21,
    "endLineNumber" : 301,
    "endColumnNumber" : 47
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 6
  } ]
}