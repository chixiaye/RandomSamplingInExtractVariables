{
  "id" : 89,
  "expression" : "Optional.of(new Customer(\"John P.\",15))",
  "projectName" : "eugenp@tutorials",
  "commitID" : "be16616bb82749212e259b4d0e44d3f28601a9f4",
  "filePath" : "java-streams/src/test/java/com/baeldung/stream/filter/StreamFilterUnitTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Optional.of(new Customer(\"John P.\",15))",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 40,
      "startLineNumber" : 74,
      "startColumnNumber" : 34,
      "endLineNumber" : 74,
      "endColumnNumber" : 74
    },
    "astNodeNumber" : 8,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 74,
        "startColumnNumber" : 27,
        "endLineNumber" : 74,
        "endColumnNumber" : 74
      },
      "nodeContext" : "john=Optional.of(new Customer(\"John P.\",15))",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 74,
        "startColumnNumber" : 8,
        "endLineNumber" : 74,
        "endColumnNumber" : 75
      },
      "nodeContext" : "Optional<Customer> john=Optional.of(new Customer(\"John P.\",15));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 777,
        "startLineNumber" : 73,
        "startColumnNumber" : 84,
        "endLineNumber" : 89,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Optional<Customer> john=Optional.of(new Customer(\"John P.\",15));\n  Optional<Customer> sarah=Optional.of(new Customer(\"Sarah M.\",200));\n  Optional<Customer> mary=Optional.of(new Customer(\"Mary T.\",300));\n  List<Optional<Customer>> customers=Arrays.asList(john,sarah,Optional.empty(),mary,Optional.empty());\n  List<Customer> customersWithMoreThan100Points=customers.stream().flatMap(c -> c.map(Stream::of).orElseGet(Stream::empty)).filter(Customer::hasOverThousandPoints).collect(Collectors.toList());\n  assertThat(customersWithMoreThan100Points).hasSize(2);\n  assertThat(customersWithMoreThan100Points).contains(sarah.get(),mary.get());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 128,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 867,
        "startLineNumber" : 72,
        "startColumnNumber" : 4,
        "endLineNumber" : 89,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void givenListOfCustomersWithOptional_whenFilterBy100Points_thenGetTwo(){\n  Optional<Customer> john=Optional.of(new Customer(\"John P.\",15));\n  Optional<Customer> sarah=Optional.of(new Customer(\"Sarah M.\",200));\n  Optional<Customer> mary=Optional.of(new Customer(\"Mary T.\",300));\n  List<Optional<Customer>> customers=Arrays.asList(john,sarah,Optional.empty(),mary,Optional.empty());\n  List<Customer> customersWithMoreThan100Points=customers.stream().flatMap(c -> c.map(Stream::of).orElseGet(Stream::empty)).filter(Customer::hasOverThousandPoints).collect(Collectors.toList());\n  assertThat(customersWithMoreThan100Points).hasSize(2);\n  assertThat(customersWithMoreThan100Points).contains(sarah.get(),mary.get());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 134,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 74,
        "startColumnNumber" : 8,
        "endLineNumber" : 74,
        "endColumnNumber" : 75
      },
      "nodeContext" : "Optional<Customer> john=Optional.of(new Customer(\"John P.\",15));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 16,
      "astHeight" : 6
    },
    "tokenLength" : 6,
    "type" : "java.util.Optional<com.baeldung.stream.filter.Customer>"
  } ],
  "positionList" : [ {
    "charLength" : 40,
    "startLineNumber" : 74,
    "startColumnNumber" : 34,
    "endLineNumber" : 74,
    "endColumnNumber" : 74
  } ],
  "layoutRelationDataList" : [ ]
}