{
  "id" : 145,
  "expression" : "new int[2][numberOfPuts]",
  "projectName" : "LMAX-Exchange@disruptor",
  "commitID" : "6d8500d39ac15cc2fdbc3dbf2e3a97fbe425b8fa",
  "filePath" : "/src/test/java/com/lmax/disruptor/DirectMemoryTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new int[2][numberOfPuts]",
    "nodeType" : "ArrayCreation",
    "nodePosition" : {
      "charLength" : 24,
      "startLineNumber" : 396,
      "startColumnNumber" : 31,
      "endLineNumber" : 396,
      "endColumnNumber" : 55
    },
    "astNodeNumber" : 7,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 396,
        "startColumnNumber" : 16,
        "endLineNumber" : 396,
        "endColumnNumber" : 55
      },
      "nodeContext" : "accessPoints=new int[2][numberOfPuts]",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 396,
        "startColumnNumber" : 8,
        "endLineNumber" : 396,
        "endColumnNumber" : 56
      },
      "nodeContext" : "int[][] accessPoints=new int[2][numberOfPuts];\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1166,
        "startLineNumber" : 391,
        "startColumnNumber" : 4,
        "endLineNumber" : 420,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Memory memory=memoryAllocator.allocate(size,chunkSize);\n  int typeSize=validator.getTypeSize();\n  int alignment=random.nextInt(typeSize);\n  int[][] accessPoints=new int[2][numberOfPuts];\n  validator.init(random,numberOfPuts,size,chunkSize);\n  for (int i=0; i < numberOfPuts; i++) {\n    int index=random.nextInt(memory.getSize());\n    int offset=randomOffset(random,memory,typeSize,alignment);\n    assertTrue(\"value \" + i + \" is incorrect, index: \"+ index+ \", offset: \"+ offset,validator.putAndGetAt(memory,i,index,offset));\n    accessPoints[INDEX][i]=index;\n    accessPoints[OFFSET][i]=offset;\n  }\n  for (int i=0; i < numberOfPuts; i++) {\n    int index=accessPoints[INDEX][i];\n    int offset=accessPoints[OFFSET][i];\n    assertTrue(\"value \" + i + \" is incorrect, index: \"+ index+ \", offset: \"+ offset,validator.validateGetAt(memory,index,offset));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 159,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1468,
        "startLineNumber" : 386,
        "startColumnNumber" : 4,
        "endLineNumber" : 420,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void assertPutGetForSingleType(Random random,int numberOfPuts,int size,int chunkSize,TypeValidator validator){\n  Memory memory=memoryAllocator.allocate(size,chunkSize);\n  int typeSize=validator.getTypeSize();\n  int alignment=random.nextInt(typeSize);\n  int[][] accessPoints=new int[2][numberOfPuts];\n  validator.init(random,numberOfPuts,size,chunkSize);\n  for (int i=0; i < numberOfPuts; i++) {\n    int index=random.nextInt(memory.getSize());\n    int offset=randomOffset(random,memory,typeSize,alignment);\n    assertTrue(\"value \" + i + \" is incorrect, index: \"+ index+ \", offset: \"+ offset,validator.putAndGetAt(memory,i,index,offset));\n    accessPoints[INDEX][i]=index;\n    accessPoints[OFFSET][i]=offset;\n  }\n  for (int i=0; i < numberOfPuts; i++) {\n    int index=accessPoints[INDEX][i];\n    int offset=accessPoints[OFFSET][i];\n    assertTrue(\"value \" + i + \" is incorrect, index: \"+ index+ \", offset: \"+ offset,validator.validateGetAt(memory,index,offset));\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 180,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 396,
        "startColumnNumber" : 8,
        "endLineNumber" : 396,
        "endColumnNumber" : 56
      },
      "nodeContext" : "int[][] accessPoints=new int[2][numberOfPuts];\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "int[][]"
  } ],
  "positionList" : [ {
    "charLength" : 24,
    "startLineNumber" : 396,
    "startColumnNumber" : 31,
    "endLineNumber" : 396,
    "endColumnNumber" : 55
  } ],
  "layoutRelationDataList" : [ ]
}