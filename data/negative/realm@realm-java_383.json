{
  "id" : 383,
  "expression" : "e",
  "projectName" : "realm@realm-java",
  "commitID" : "9da3b229a46407f73e2003fb40857cadf062086b",
  "filePath" : "/realm/realm-library/src/main/java/io/realm/internal/android/JsonUtils.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "e",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 63,
      "startColumnNumber" : 41,
      "endLineNumber" : 63,
      "endColumnNumber" : 42
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 63,
        "startColumnNumber" : 41,
        "endLineNumber" : 63,
        "endColumnNumber" : 55
      },
      "nodeContext" : "e.getMessage()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 63,
        "startColumnNumber" : 22,
        "endLineNumber" : 63,
        "endColumnNumber" : 59
      },
      "nodeContext" : "new RealmException(e.getMessage(),e)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 63,
        "startColumnNumber" : 16,
        "endLineNumber" : 63,
        "endColumnNumber" : 60
      },
      "nodeContext" : "throw new RealmException(e.getMessage(),e);\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 62,
        "startColumnNumber" : 46,
        "endLineNumber" : 64,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  throw new RealmException(e.getMessage(),e);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 108,
        "startLineNumber" : 62,
        "startColumnNumber" : 14,
        "endLineNumber" : 64,
        "endColumnNumber" : 13
      },
      "nodeContext" : "catch (NumberFormatException e) {\n  throw new RealmException(e.getMessage(),e);\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 183,
        "startLineNumber" : 60,
        "startColumnNumber" : 12,
        "endLineNumber" : 64,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  return new Date(Long.parseLong(date));\n}\n catch (NumberFormatException e) {\n  throw new RealmException(e.getMessage(),e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 24,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 207,
        "startLineNumber" : 59,
        "startColumnNumber" : 49,
        "endLineNumber" : 65,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    return new Date(Long.parseLong(date));\n  }\n catch (  NumberFormatException e) {\n    throw new RealmException(e.getMessage(),e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 25,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 248,
        "startLineNumber" : 59,
        "startColumnNumber" : 8,
        "endLineNumber" : 65,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (numericOnly.matcher(date).matches()) {\n  try {\n    return new Date(Long.parseLong(date));\n  }\n catch (  NumberFormatException e) {\n    throw new RealmException(e.getMessage(),e);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 32,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 892,
        "startLineNumber" : 48,
        "startColumnNumber" : 49,
        "endLineNumber" : 74,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (date == null || date.length() == 0) {\n    return null;\n  }\n  Matcher matcher=jsonDate.matcher(date);\n  if (matcher.find()) {\n    String dateMatch=matcher.group(1);\n    return new Date(Long.parseLong(dateMatch));\n  }\n  if (numericOnly.matcher(date).matches()) {\n    try {\n      return new Date(Long.parseLong(date));\n    }\n catch (    NumberFormatException e) {\n      throw new RealmException(e.getMessage(),e);\n    }\n  }\n  try {\n    parsePosition.setIndex(0);\n    return ISO8601Utils.parse(date,parsePosition);\n  }\n catch (  ParseException e) {\n    throw new RealmException(e.getMessage(),e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 104,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1336,
        "startLineNumber" : 38,
        "startColumnNumber" : 4,
        "endLineNumber" : 74,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Converts a Json string to a Java Date object. Currently supports 2 types: - \"<long>\" - \"/Date(<long>[+-Zone])/\"\n * @param date the String input of date of the the supported types.\n * @return the Date object or {@code null} if invalid input.\n * @throws NumberFormatException if date is not a proper long or has an illegal format.\n */\n@Nullable public static Date stringToDate(String date){\n  if (date == null || date.length() == 0) {\n    return null;\n  }\n  Matcher matcher=jsonDate.matcher(date);\n  if (matcher.find()) {\n    String dateMatch=matcher.group(1);\n    return new Date(Long.parseLong(dateMatch));\n  }\n  if (numericOnly.matcher(date).matches()) {\n    try {\n      return new Date(Long.parseLong(date));\n    }\n catch (    NumberFormatException e) {\n      throw new RealmException(e.getMessage(),e);\n    }\n  }\n  try {\n    parsePosition.setIndex(0);\n    return ISO8601Utils.parse(date,parsePosition);\n  }\n catch (  ParseException e) {\n    throw new RealmException(e.getMessage(),e);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 117,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 63,
        "startColumnNumber" : 16,
        "endLineNumber" : 63,
        "endColumnNumber" : 60
      },
      "nodeContext" : "throw new RealmException(e.getMessage(),e);\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.NumberFormatException"
  }, {
    "nodeContext" : "e",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 63,
      "startColumnNumber" : 57,
      "endLineNumber" : 63,
      "endColumnNumber" : 58
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 63,
        "startColumnNumber" : 22,
        "endLineNumber" : 63,
        "endColumnNumber" : 59
      },
      "nodeContext" : "new RealmException(e.getMessage(),e)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 63,
        "startColumnNumber" : 16,
        "endLineNumber" : 63,
        "endColumnNumber" : 60
      },
      "nodeContext" : "throw new RealmException(e.getMessage(),e);\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 62,
        "startColumnNumber" : 46,
        "endLineNumber" : 64,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  throw new RealmException(e.getMessage(),e);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 108,
        "startLineNumber" : 62,
        "startColumnNumber" : 14,
        "endLineNumber" : 64,
        "endColumnNumber" : 13
      },
      "nodeContext" : "catch (NumberFormatException e) {\n  throw new RealmException(e.getMessage(),e);\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 183,
        "startLineNumber" : 60,
        "startColumnNumber" : 12,
        "endLineNumber" : 64,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  return new Date(Long.parseLong(date));\n}\n catch (NumberFormatException e) {\n  throw new RealmException(e.getMessage(),e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 24,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 207,
        "startLineNumber" : 59,
        "startColumnNumber" : 49,
        "endLineNumber" : 65,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    return new Date(Long.parseLong(date));\n  }\n catch (  NumberFormatException e) {\n    throw new RealmException(e.getMessage(),e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 25,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 248,
        "startLineNumber" : 59,
        "startColumnNumber" : 8,
        "endLineNumber" : 65,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (numericOnly.matcher(date).matches()) {\n  try {\n    return new Date(Long.parseLong(date));\n  }\n catch (  NumberFormatException e) {\n    throw new RealmException(e.getMessage(),e);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 32,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 892,
        "startLineNumber" : 48,
        "startColumnNumber" : 49,
        "endLineNumber" : 74,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (date == null || date.length() == 0) {\n    return null;\n  }\n  Matcher matcher=jsonDate.matcher(date);\n  if (matcher.find()) {\n    String dateMatch=matcher.group(1);\n    return new Date(Long.parseLong(dateMatch));\n  }\n  if (numericOnly.matcher(date).matches()) {\n    try {\n      return new Date(Long.parseLong(date));\n    }\n catch (    NumberFormatException e) {\n      throw new RealmException(e.getMessage(),e);\n    }\n  }\n  try {\n    parsePosition.setIndex(0);\n    return ISO8601Utils.parse(date,parsePosition);\n  }\n catch (  ParseException e) {\n    throw new RealmException(e.getMessage(),e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 104,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1336,
        "startLineNumber" : 38,
        "startColumnNumber" : 4,
        "endLineNumber" : 74,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Converts a Json string to a Java Date object. Currently supports 2 types: - \"<long>\" - \"/Date(<long>[+-Zone])/\"\n * @param date the String input of date of the the supported types.\n * @return the Date object or {@code null} if invalid input.\n * @throws NumberFormatException if date is not a proper long or has an illegal format.\n */\n@Nullable public static Date stringToDate(String date){\n  if (date == null || date.length() == 0) {\n    return null;\n  }\n  Matcher matcher=jsonDate.matcher(date);\n  if (matcher.find()) {\n    String dateMatch=matcher.group(1);\n    return new Date(Long.parseLong(dateMatch));\n  }\n  if (numericOnly.matcher(date).matches()) {\n    try {\n      return new Date(Long.parseLong(date));\n    }\n catch (    NumberFormatException e) {\n      throw new RealmException(e.getMessage(),e);\n    }\n  }\n  try {\n    parsePosition.setIndex(0);\n    return ISO8601Utils.parse(date,parsePosition);\n  }\n catch (  ParseException e) {\n    throw new RealmException(e.getMessage(),e);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 117,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 63,
        "startColumnNumber" : 16,
        "endLineNumber" : 63,
        "endColumnNumber" : 60
      },
      "nodeContext" : "throw new RealmException(e.getMessage(),e);\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.NumberFormatException"
  }, {
    "nodeContext" : "e",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 72,
      "startColumnNumber" : 37,
      "endLineNumber" : 72,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 72,
        "startColumnNumber" : 37,
        "endLineNumber" : 72,
        "endColumnNumber" : 51
      },
      "nodeContext" : "e.getMessage()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 72,
        "startColumnNumber" : 18,
        "endLineNumber" : 72,
        "endColumnNumber" : 55
      },
      "nodeContext" : "new RealmException(e.getMessage(),e)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 72,
        "startColumnNumber" : 12,
        "endLineNumber" : 72,
        "endColumnNumber" : 56
      },
      "nodeContext" : "throw new RealmException(e.getMessage(),e);\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 71,
        "startColumnNumber" : 35,
        "endLineNumber" : 73,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  throw new RealmException(e.getMessage(),e);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 71,
        "startColumnNumber" : 10,
        "endLineNumber" : 73,
        "endColumnNumber" : 9
      },
      "nodeContext" : "catch (ParseException e) {\n  throw new RealmException(e.getMessage(),e);\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 242,
        "startLineNumber" : 68,
        "startColumnNumber" : 8,
        "endLineNumber" : 73,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  parsePosition.setIndex(0);\n  return ISO8601Utils.parse(date,parsePosition);\n}\n catch (ParseException e) {\n  throw new RealmException(e.getMessage(),e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 27,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 892,
        "startLineNumber" : 48,
        "startColumnNumber" : 49,
        "endLineNumber" : 74,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (date == null || date.length() == 0) {\n    return null;\n  }\n  Matcher matcher=jsonDate.matcher(date);\n  if (matcher.find()) {\n    String dateMatch=matcher.group(1);\n    return new Date(Long.parseLong(dateMatch));\n  }\n  if (numericOnly.matcher(date).matches()) {\n    try {\n      return new Date(Long.parseLong(date));\n    }\n catch (    NumberFormatException e) {\n      throw new RealmException(e.getMessage(),e);\n    }\n  }\n  try {\n    parsePosition.setIndex(0);\n    return ISO8601Utils.parse(date,parsePosition);\n  }\n catch (  ParseException e) {\n    throw new RealmException(e.getMessage(),e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 104,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1336,
        "startLineNumber" : 38,
        "startColumnNumber" : 4,
        "endLineNumber" : 74,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Converts a Json string to a Java Date object. Currently supports 2 types: - \"<long>\" - \"/Date(<long>[+-Zone])/\"\n * @param date the String input of date of the the supported types.\n * @return the Date object or {@code null} if invalid input.\n * @throws NumberFormatException if date is not a proper long or has an illegal format.\n */\n@Nullable public static Date stringToDate(String date){\n  if (date == null || date.length() == 0) {\n    return null;\n  }\n  Matcher matcher=jsonDate.matcher(date);\n  if (matcher.find()) {\n    String dateMatch=matcher.group(1);\n    return new Date(Long.parseLong(dateMatch));\n  }\n  if (numericOnly.matcher(date).matches()) {\n    try {\n      return new Date(Long.parseLong(date));\n    }\n catch (    NumberFormatException e) {\n      throw new RealmException(e.getMessage(),e);\n    }\n  }\n  try {\n    parsePosition.setIndex(0);\n    return ISO8601Utils.parse(date,parsePosition);\n  }\n catch (  ParseException e) {\n    throw new RealmException(e.getMessage(),e);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 117,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 72,
        "startColumnNumber" : 12,
        "endLineNumber" : 72,
        "endColumnNumber" : 56
      },
      "nodeContext" : "throw new RealmException(e.getMessage(),e);\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.text.ParseException"
  }, {
    "nodeContext" : "e",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 72,
      "startColumnNumber" : 53,
      "endLineNumber" : 72,
      "endColumnNumber" : 54
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 72,
        "startColumnNumber" : 18,
        "endLineNumber" : 72,
        "endColumnNumber" : 55
      },
      "nodeContext" : "new RealmException(e.getMessage(),e)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 72,
        "startColumnNumber" : 12,
        "endLineNumber" : 72,
        "endColumnNumber" : 56
      },
      "nodeContext" : "throw new RealmException(e.getMessage(),e);\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 71,
        "startColumnNumber" : 35,
        "endLineNumber" : 73,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  throw new RealmException(e.getMessage(),e);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 71,
        "startColumnNumber" : 10,
        "endLineNumber" : 73,
        "endColumnNumber" : 9
      },
      "nodeContext" : "catch (ParseException e) {\n  throw new RealmException(e.getMessage(),e);\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 242,
        "startLineNumber" : 68,
        "startColumnNumber" : 8,
        "endLineNumber" : 73,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  parsePosition.setIndex(0);\n  return ISO8601Utils.parse(date,parsePosition);\n}\n catch (ParseException e) {\n  throw new RealmException(e.getMessage(),e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 27,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 892,
        "startLineNumber" : 48,
        "startColumnNumber" : 49,
        "endLineNumber" : 74,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (date == null || date.length() == 0) {\n    return null;\n  }\n  Matcher matcher=jsonDate.matcher(date);\n  if (matcher.find()) {\n    String dateMatch=matcher.group(1);\n    return new Date(Long.parseLong(dateMatch));\n  }\n  if (numericOnly.matcher(date).matches()) {\n    try {\n      return new Date(Long.parseLong(date));\n    }\n catch (    NumberFormatException e) {\n      throw new RealmException(e.getMessage(),e);\n    }\n  }\n  try {\n    parsePosition.setIndex(0);\n    return ISO8601Utils.parse(date,parsePosition);\n  }\n catch (  ParseException e) {\n    throw new RealmException(e.getMessage(),e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 104,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1336,
        "startLineNumber" : 38,
        "startColumnNumber" : 4,
        "endLineNumber" : 74,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Converts a Json string to a Java Date object. Currently supports 2 types: - \"<long>\" - \"/Date(<long>[+-Zone])/\"\n * @param date the String input of date of the the supported types.\n * @return the Date object or {@code null} if invalid input.\n * @throws NumberFormatException if date is not a proper long or has an illegal format.\n */\n@Nullable public static Date stringToDate(String date){\n  if (date == null || date.length() == 0) {\n    return null;\n  }\n  Matcher matcher=jsonDate.matcher(date);\n  if (matcher.find()) {\n    String dateMatch=matcher.group(1);\n    return new Date(Long.parseLong(dateMatch));\n  }\n  if (numericOnly.matcher(date).matches()) {\n    try {\n      return new Date(Long.parseLong(date));\n    }\n catch (    NumberFormatException e) {\n      throw new RealmException(e.getMessage(),e);\n    }\n  }\n  try {\n    parsePosition.setIndex(0);\n    return ISO8601Utils.parse(date,parsePosition);\n  }\n catch (  ParseException e) {\n    throw new RealmException(e.getMessage(),e);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 117,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 72,
        "startColumnNumber" : 12,
        "endLineNumber" : 72,
        "endColumnNumber" : 56
      },
      "nodeContext" : "throw new RealmException(e.getMessage(),e);\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.text.ParseException"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 63,
    "startColumnNumber" : 41,
    "endLineNumber" : 63,
    "endColumnNumber" : 42
  }, {
    "charLength" : 1,
    "startLineNumber" : 63,
    "startColumnNumber" : 57,
    "endLineNumber" : 63,
    "endColumnNumber" : 58
  }, {
    "charLength" : 1,
    "startLineNumber" : 72,
    "startColumnNumber" : 37,
    "endLineNumber" : 72,
    "endColumnNumber" : 38
  }, {
    "charLength" : 1,
    "startLineNumber" : 72,
    "startColumnNumber" : 53,
    "endLineNumber" : 72,
    "endColumnNumber" : 54
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 8
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 0
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 0
  } ]
}