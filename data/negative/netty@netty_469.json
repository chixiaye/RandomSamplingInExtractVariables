{
  "id" : 469,
  "expression" : "newInterval",
  "projectName" : "netty@netty",
  "commitID" : "8a68c3e58d4663ae42e41a90d0d11aec3c25016b",
  "filePath" : "/handler/src/main/java/io/netty/handler/traffic/TrafficCounter.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "newInterval",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 308,
      "startColumnNumber" : 36,
      "endLineNumber" : 308,
      "endColumnNumber" : 47
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 308,
        "startColumnNumber" : 12,
        "endLineNumber" : 308,
        "endColumnNumber" : 48
      },
      "nodeContext" : "checkInterval.getAndSet(newInterval)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 308,
        "startColumnNumber" : 12,
        "endLineNumber" : 308,
        "endColumnNumber" : 63
      },
      "nodeContext" : "checkInterval.getAndSet(newInterval) != newInterval",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 318,
        "startLineNumber" : 308,
        "startColumnNumber" : 8,
        "endLineNumber" : 317,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (checkInterval.getAndSet(newInterval) != newInterval) {\n  stop();\n  if (newInterval <= 0) {\n    lastTime.set(milliSecondFromNano());\n  }\n else {\n    start();\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 26,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 392,
        "startLineNumber" : 306,
        "startColumnNumber" : 49,
        "endLineNumber" : 318,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  long newInterval=newCheckInterval / 10 * 10;\n  if (checkInterval.getAndSet(newInterval) != newInterval) {\n    stop();\n    if (newInterval <= 0) {\n      lastTime.set(milliSecondFromNano());\n    }\n else {\n      start();\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 36,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 606,
        "startLineNumber" : 301,
        "startColumnNumber" : 4,
        "endLineNumber" : 318,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Change checkInterval between two computations in millisecond.\n * @param newCheckInterval The new check interval (in milliseconds)\n */\npublic void configure(long newCheckInterval){\n  long newInterval=newCheckInterval / 10 * 10;\n  if (checkInterval.getAndSet(newInterval) != newInterval) {\n    stop();\n    if (newInterval <= 0) {\n      lastTime.set(milliSecondFromNano());\n    }\n else {\n      start();\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 44,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 308,
        "startColumnNumber" : 12,
        "endLineNumber" : 308,
        "endColumnNumber" : 63
      },
      "nodeContext" : "checkInterval.getAndSet(newInterval) != newInterval",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "long"
  }, {
    "nodeContext" : "newInterval",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 308,
      "startColumnNumber" : 52,
      "endLineNumber" : 308,
      "endColumnNumber" : 63
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 308,
        "startColumnNumber" : 12,
        "endLineNumber" : 308,
        "endColumnNumber" : 63
      },
      "nodeContext" : "checkInterval.getAndSet(newInterval) != newInterval",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 318,
        "startLineNumber" : 308,
        "startColumnNumber" : 8,
        "endLineNumber" : 317,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (checkInterval.getAndSet(newInterval) != newInterval) {\n  stop();\n  if (newInterval <= 0) {\n    lastTime.set(milliSecondFromNano());\n  }\n else {\n    start();\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 26,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 392,
        "startLineNumber" : 306,
        "startColumnNumber" : 49,
        "endLineNumber" : 318,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  long newInterval=newCheckInterval / 10 * 10;\n  if (checkInterval.getAndSet(newInterval) != newInterval) {\n    stop();\n    if (newInterval <= 0) {\n      lastTime.set(milliSecondFromNano());\n    }\n else {\n      start();\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 36,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 606,
        "startLineNumber" : 301,
        "startColumnNumber" : 4,
        "endLineNumber" : 318,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Change checkInterval between two computations in millisecond.\n * @param newCheckInterval The new check interval (in milliseconds)\n */\npublic void configure(long newCheckInterval){\n  long newInterval=newCheckInterval / 10 * 10;\n  if (checkInterval.getAndSet(newInterval) != newInterval) {\n    stop();\n    if (newInterval <= 0) {\n      lastTime.set(milliSecondFromNano());\n    }\n else {\n      start();\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 44,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 308,
        "startColumnNumber" : 12,
        "endLineNumber" : 308,
        "endColumnNumber" : 63
      },
      "nodeContext" : "checkInterval.getAndSet(newInterval) != newInterval",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "long"
  }, {
    "nodeContext" : "newInterval",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 310,
      "startColumnNumber" : 16,
      "endLineNumber" : 310,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 310,
        "startColumnNumber" : 16,
        "endLineNumber" : 310,
        "endColumnNumber" : 32
      },
      "nodeContext" : "newInterval <= 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 214,
        "startLineNumber" : 310,
        "startColumnNumber" : 12,
        "endLineNumber" : 316,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (newInterval <= 0) {\n  lastTime.set(milliSecondFromNano());\n}\n else {\n  start();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 261,
        "startLineNumber" : 308,
        "startColumnNumber" : 65,
        "endLineNumber" : 317,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  stop();\n  if (newInterval <= 0) {\n    lastTime.set(milliSecondFromNano());\n  }\n else {\n    start();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 19,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 318,
        "startLineNumber" : 308,
        "startColumnNumber" : 8,
        "endLineNumber" : 317,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (checkInterval.getAndSet(newInterval) != newInterval) {\n  stop();\n  if (newInterval <= 0) {\n    lastTime.set(milliSecondFromNano());\n  }\n else {\n    start();\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 26,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 392,
        "startLineNumber" : 306,
        "startColumnNumber" : 49,
        "endLineNumber" : 318,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  long newInterval=newCheckInterval / 10 * 10;\n  if (checkInterval.getAndSet(newInterval) != newInterval) {\n    stop();\n    if (newInterval <= 0) {\n      lastTime.set(milliSecondFromNano());\n    }\n else {\n      start();\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 36,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 606,
        "startLineNumber" : 301,
        "startColumnNumber" : 4,
        "endLineNumber" : 318,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Change checkInterval between two computations in millisecond.\n * @param newCheckInterval The new check interval (in milliseconds)\n */\npublic void configure(long newCheckInterval){\n  long newInterval=newCheckInterval / 10 * 10;\n  if (checkInterval.getAndSet(newInterval) != newInterval) {\n    stop();\n    if (newInterval <= 0) {\n      lastTime.set(milliSecondFromNano());\n    }\n else {\n      start();\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 44,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 310,
        "startColumnNumber" : 16,
        "endLineNumber" : 310,
        "endColumnNumber" : 32
      },
      "nodeContext" : "newInterval <= 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "long"
  } ],
  "positionList" : [ {
    "charLength" : 11,
    "startLineNumber" : 308,
    "startColumnNumber" : 36,
    "endLineNumber" : 308,
    "endColumnNumber" : 47
  }, {
    "charLength" : 11,
    "startLineNumber" : 308,
    "startColumnNumber" : 52,
    "endLineNumber" : 308,
    "endColumnNumber" : 63
  }, {
    "charLength" : 11,
    "startLineNumber" : 310,
    "startColumnNumber" : 16,
    "endLineNumber" : 310,
    "endColumnNumber" : 27
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 0
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  } ]
}