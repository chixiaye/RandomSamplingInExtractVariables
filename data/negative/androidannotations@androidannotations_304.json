{
  "id" : 304,
  "expression" : "executableElement.getSimpleName()",
  "projectName" : "androidannotations@androidannotations",
  "commitID" : "dba506998f98f35e0178977079d60fe804aa4812",
  "filePath" : "AndroidAnnotations/androidannotations/src/main/java/com/googlecode/androidannotations/helper/ValidatorHelper.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "executableElement.getSimpleName()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 33,
      "startLineNumber" : 768,
      "startColumnNumber" : 32,
      "endLineNumber" : 768,
      "endColumnNumber" : 65
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 768,
        "startColumnNumber" : 32,
        "endLineNumber" : 768,
        "endColumnNumber" : 76
      },
      "nodeContext" : "executableElement.getSimpleName().toString()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 768,
        "startColumnNumber" : 19,
        "endLineNumber" : 768,
        "endColumnNumber" : 76
      },
      "nodeContext" : "methodName=executableElement.getSimpleName().toString()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 768,
        "startColumnNumber" : 12,
        "endLineNumber" : 768,
        "endColumnNumber" : 77
      },
      "nodeContext" : "String methodName=executableElement.getSimpleName().toString();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1180,
        "startLineNumber" : 766,
        "startColumnNumber" : 15,
        "endLineNumber" : 784,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ExecutableElement executableElement=(ExecutableElement)element;\n  String methodName=executableElement.getSimpleName().toString();\n  if (executableElement.getParameters().size() > 0) {\n    annotationHelper.printError(element,\"Method \" + methodName + \" should have no parameters in an \"+ annotationHelper.annotationName()+ \" annotated interface\");\n  }\n else {\n    String returnType=executableElement.getReturnType().toString();\n    if (!VALID_PREF_RETURN_TYPES.contains(returnType)) {\n      annotationHelper.printError(element,\"Method \" + methodName + \" should only return preference simple types in an \"+ annotationHelper.annotationName()+ \" annotated interface\");\n    }\n else {\n      if (INVALID_PREF_METHOD_NAMES.contains(methodName)) {\n        annotationHelper.printError(element,\"The method name \" + methodName + \" is forbidden in an \"+ annotationHelper.annotationName()+ \" annotated interface\");\n      }\n else {\n        return true;\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 96,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1394,
        "startLineNumber" : 764,
        "startColumnNumber" : 8,
        "endLineNumber" : 784,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!element.getKind().equals(ElementKind.METHOD)) {\n  annotationHelper.printError(element,\"Only methods are allowed in an \" + annotationHelper.annotationName() + \" annotated interface\");\n}\n else {\n  ExecutableElement executableElement=(ExecutableElement)element;\n  String methodName=executableElement.getSimpleName().toString();\n  if (executableElement.getParameters().size() > 0) {\n    annotationHelper.printError(element,\"Method \" + methodName + \" should have no parameters in an \"+ annotationHelper.annotationName()+ \" annotated interface\");\n  }\n else {\n    String returnType=executableElement.getReturnType().toString();\n    if (!VALID_PREF_RETURN_TYPES.contains(returnType)) {\n      annotationHelper.printError(element,\"Method \" + methodName + \" should only return preference simple types in an \"+ annotationHelper.annotationName()+ \" annotated interface\");\n    }\n else {\n      if (INVALID_PREF_METHOD_NAMES.contains(methodName)) {\n        annotationHelper.printError(element,\"The method name \" + methodName + \" is forbidden in an \"+ annotationHelper.annotationName()+ \" annotated interface\");\n      }\n else {\n        return true;\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 118,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1432,
        "startLineNumber" : 763,
        "startColumnNumber" : 49,
        "endLineNumber" : 786,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (!element.getKind().equals(ElementKind.METHOD)) {\n    annotationHelper.printError(element,\"Only methods are allowed in an \" + annotationHelper.annotationName() + \" annotated interface\");\n  }\n else {\n    ExecutableElement executableElement=(ExecutableElement)element;\n    String methodName=executableElement.getSimpleName().toString();\n    if (executableElement.getParameters().size() > 0) {\n      annotationHelper.printError(element,\"Method \" + methodName + \" should have no parameters in an \"+ annotationHelper.annotationName()+ \" annotated interface\");\n    }\n else {\n      String returnType=executableElement.getReturnType().toString();\n      if (!VALID_PREF_RETURN_TYPES.contains(returnType)) {\n        annotationHelper.printError(element,\"Method \" + methodName + \" should only return preference simple types in an \"+ annotationHelper.annotationName()+ \" annotated interface\");\n      }\n else {\n        if (INVALID_PREF_METHOD_NAMES.contains(methodName)) {\n          annotationHelper.printError(element,\"The method name \" + methodName + \" is forbidden in an \"+ annotationHelper.annotationName()+ \" annotated interface\");\n        }\n else {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 121,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1477,
        "startLineNumber" : 763,
        "startColumnNumber" : 4,
        "endLineNumber" : 786,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public boolean isPrefMethod(Element element){\n  if (!element.getKind().equals(ElementKind.METHOD)) {\n    annotationHelper.printError(element,\"Only methods are allowed in an \" + annotationHelper.annotationName() + \" annotated interface\");\n  }\n else {\n    ExecutableElement executableElement=(ExecutableElement)element;\n    String methodName=executableElement.getSimpleName().toString();\n    if (executableElement.getParameters().size() > 0) {\n      annotationHelper.printError(element,\"Method \" + methodName + \" should have no parameters in an \"+ annotationHelper.annotationName()+ \" annotated interface\");\n    }\n else {\n      String returnType=executableElement.getReturnType().toString();\n      if (!VALID_PREF_RETURN_TYPES.contains(returnType)) {\n        annotationHelper.printError(element,\"Method \" + methodName + \" should only return preference simple types in an \"+ annotationHelper.annotationName()+ \" annotated interface\");\n      }\n else {\n        if (INVALID_PREF_METHOD_NAMES.contains(methodName)) {\n          annotationHelper.printError(element,\"The method name \" + methodName + \" is forbidden in an \"+ annotationHelper.annotationName()+ \" annotated interface\");\n        }\n else {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 129,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 768,
        "startColumnNumber" : 12,
        "endLineNumber" : 768,
        "endColumnNumber" : 77
      },
      "nodeContext" : "String methodName=executableElement.getSimpleName().toString();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "javax.lang.model.element.Name"
  } ],
  "positionList" : [ {
    "charLength" : 33,
    "startLineNumber" : 768,
    "startColumnNumber" : 32,
    "endLineNumber" : 768,
    "endColumnNumber" : 65
  } ],
  "layoutRelationDataList" : [ ]
}