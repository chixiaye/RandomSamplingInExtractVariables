{
  "id" : 472,
  "expression" : "IMG",
  "projectName" : "skylot@jadx",
  "commitID" : "eb2a1734d3e02c19814f628e10bf80de5fb19772",
  "filePath" : "/jadx-core/src/main/java/jadx/api/ResourcesLoader.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "IMG",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 103,
      "startColumnNumber" : 8,
      "endLineNumber" : 103,
      "endColumnNumber" : 11
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 103,
        "startColumnNumber" : 3,
        "endLineNumber" : 103,
        "endColumnNumber" : 12
      },
      "nodeContext" : "case IMG:",
      "nodeType" : "SwitchCase",
      "astNodeNumber" : 2,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 374,
        "startLineNumber" : 94,
        "startColumnNumber" : 2,
        "endLineNumber" : 108,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (rf.getType()) {\ncase MANIFEST:case XML:  CodeWriter content=jadxRef.getXmlParser().parse(inputStream);\nreturn ResContainer.textResource(rf.getName(),content);\ncase ARSC:return new ResTableParser().decodeFiles(inputStream);\ncase IMG:return decodeImage(rf,inputStream);\ndefault:return ResContainer.resourceFileLink(rf);\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 49,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 381,
        "startLineNumber" : 93,
        "startColumnNumber" : 85,
        "endLineNumber" : 109,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (rf.getType()) {\ncase MANIFEST:case XML:    CodeWriter content=jadxRef.getXmlParser().parse(inputStream);\n  return ResContainer.textResource(rf.getName(),content);\ncase ARSC:return new ResTableParser().decodeFiles(inputStream);\ncase IMG:return decodeImage(rf,inputStream);\ndefault:return ResContainer.resourceFileLink(rf);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 50,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 547,
        "startLineNumber" : 92,
        "startColumnNumber" : 1,
        "endLineNumber" : 109,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private static ResContainer loadContent(JadxDecompiler jadxRef,ResourceFile rf,InputStream inputStream) throws IOException {\nswitch (rf.getType()) {\ncase MANIFEST:case XML:    CodeWriter content=jadxRef.getXmlParser().parse(inputStream);\n  return ResContainer.textResource(rf.getName(),content);\ncase ARSC:return new ResTableParser().decodeFiles(inputStream);\ncase IMG:return decodeImage(rf,inputStream);\ndefault:return ResContainer.resourceFileLink(rf);\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 70,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 103,
        "startColumnNumber" : 3,
        "endLineNumber" : 103,
        "endColumnNumber" : 12
      },
      "nodeContext" : "case IMG:",
      "nodeType" : "SwitchCase",
      "astNodeNumber" : 2,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "jadx.api.ResourceType"
  } ],
  "positionList" : [ {
    "charLength" : 3,
    "startLineNumber" : 103,
    "startColumnNumber" : 8,
    "endLineNumber" : 103,
    "endColumnNumber" : 11
  } ],
  "layoutRelationDataList" : [ ]
}