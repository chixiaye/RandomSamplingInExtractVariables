{
  "id" : 165,
  "expression" : "TimeUnit",
  "projectName" : "thingsboard@thingsboard",
  "commitID" : "7c2b3a9fbf84cc58aa7546029c5c7c10a662c55a",
  "filePath" : "/common/transport/mqtt/src/main/java/org/thingsboard/server/transport/mqtt/MqttSslHandlerProvider.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "TimeUnit",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 170,
      "startColumnNumber" : 36,
      "endLineNumber" : 170,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 170,
        "startColumnNumber" : 36,
        "endLineNumber" : 170,
        "endColumnNumber" : 52
      },
      "nodeContext" : "TimeUnit.SECONDS",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 170,
        "startColumnNumber" : 20,
        "endLineNumber" : 170,
        "endColumnNumber" : 53
      },
      "nodeContext" : "latch.await(10,TimeUnit.SECONDS)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 170,
        "startColumnNumber" : 20,
        "endLineNumber" : 170,
        "endColumnNumber" : 54
      },
      "nodeContext" : "latch.await(10,TimeUnit.SECONDS);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1543,
        "startLineNumber" : 149,
        "startColumnNumber" : 20,
        "endLineNumber" : 175,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  String strCert=SslUtil.getCertificateString(cert);\n  String sha3Hash=EncryptionUtil.getSha3Hash(strCert);\n  final String[] credentialsBodyHolder=new String[1];\n  CountDownLatch latch=new CountDownLatch(1);\n  transportService.process(DeviceTransportType.MQTT,TransportProtos.ValidateDeviceX509CertRequestMsg.newBuilder().setHash(sha3Hash).build(),new TransportServiceCallback<ValidateDeviceCredentialsResponse>(){\n    @Override public void onSuccess(    ValidateDeviceCredentialsResponse msg){\n      if (!StringUtils.isEmpty(msg.getCredentials())) {\n        credentialsBodyHolder[0]=msg.getCredentials();\n      }\n      latch.countDown();\n    }\n    @Override public void onError(    Throwable e){\n      log.error(e.getMessage(),e);\n      latch.countDown();\n    }\n  }\n);\n  latch.await(10,TimeUnit.SECONDS);\n  if (strCert.equals(credentialsBodyHolder[0])) {\n    credentialsBody=credentialsBodyHolder[0];\n    break;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 144,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1679,
        "startLineNumber" : 149,
        "startColumnNumber" : 16,
        "endLineNumber" : 177,
        "endColumnNumber" : 17
      },
      "nodeContext" : "try {\n  String strCert=SslUtil.getCertificateString(cert);\n  String sha3Hash=EncryptionUtil.getSha3Hash(strCert);\n  final String[] credentialsBodyHolder=new String[1];\n  CountDownLatch latch=new CountDownLatch(1);\n  transportService.process(DeviceTransportType.MQTT,TransportProtos.ValidateDeviceX509CertRequestMsg.newBuilder().setHash(sha3Hash).build(),new TransportServiceCallback<ValidateDeviceCredentialsResponse>(){\n    @Override public void onSuccess(    ValidateDeviceCredentialsResponse msg){\n      if (!StringUtils.isEmpty(msg.getCredentials())) {\n        credentialsBodyHolder[0]=msg.getCredentials();\n      }\n      latch.countDown();\n    }\n    @Override public void onError(    Throwable e){\n      log.error(e.getMessage(),e);\n      latch.countDown();\n    }\n  }\n);\n  latch.await(10,TimeUnit.SECONDS);\n  if (strCert.equals(credentialsBodyHolder[0])) {\n    credentialsBody=credentialsBodyHolder[0];\n    break;\n  }\n}\n catch (InterruptedException|CertificateEncodingException e) {\n  log.error(e.getMessage(),e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 162,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1711,
        "startLineNumber" : 148,
        "startColumnNumber" : 47,
        "endLineNumber" : 178,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  try {\n    String strCert=SslUtil.getCertificateString(cert);\n    String sha3Hash=EncryptionUtil.getSha3Hash(strCert);\n    final String[] credentialsBodyHolder=new String[1];\n    CountDownLatch latch=new CountDownLatch(1);\n    transportService.process(DeviceTransportType.MQTT,TransportProtos.ValidateDeviceX509CertRequestMsg.newBuilder().setHash(sha3Hash).build(),new TransportServiceCallback<ValidateDeviceCredentialsResponse>(){\n      @Override public void onSuccess(      ValidateDeviceCredentialsResponse msg){\n        if (!StringUtils.isEmpty(msg.getCredentials())) {\n          credentialsBodyHolder[0]=msg.getCredentials();\n        }\n        latch.countDown();\n      }\n      @Override public void onError(      Throwable e){\n        log.error(e.getMessage(),e);\n        latch.countDown();\n      }\n    }\n);\n    latch.await(10,TimeUnit.SECONDS);\n    if (strCert.equals(credentialsBodyHolder[0])) {\n      credentialsBody=credentialsBodyHolder[0];\n      break;\n    }\n  }\n catch (  InterruptedException|CertificateEncodingException e) {\n    log.error(e.getMessage(),e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 163,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1746,
        "startLineNumber" : 148,
        "startColumnNumber" : 12,
        "endLineNumber" : 178,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (X509Certificate cert : chain) {\n  try {\n    String strCert=SslUtil.getCertificateString(cert);\n    String sha3Hash=EncryptionUtil.getSha3Hash(strCert);\n    final String[] credentialsBodyHolder=new String[1];\n    CountDownLatch latch=new CountDownLatch(1);\n    transportService.process(DeviceTransportType.MQTT,TransportProtos.ValidateDeviceX509CertRequestMsg.newBuilder().setHash(sha3Hash).build(),new TransportServiceCallback<ValidateDeviceCredentialsResponse>(){\n      @Override public void onSuccess(      ValidateDeviceCredentialsResponse msg){\n        if (!StringUtils.isEmpty(msg.getCredentials())) {\n          credentialsBodyHolder[0]=msg.getCredentials();\n        }\n        latch.countDown();\n      }\n      @Override public void onError(      Throwable e){\n        log.error(e.getMessage(),e);\n        latch.countDown();\n      }\n    }\n);\n    latch.await(10,TimeUnit.SECONDS);\n    if (strCert.equals(credentialsBodyHolder[0])) {\n      credentialsBody=credentialsBodyHolder[0];\n      break;\n    }\n  }\n catch (  InterruptedException|CertificateEncodingException e) {\n    log.error(e.getMessage(),e);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 169,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1948,
        "startLineNumber" : 146,
        "startColumnNumber" : 84,
        "endLineNumber" : 182,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String credentialsBody=null;\n  for (  X509Certificate cert : chain) {\n    try {\n      String strCert=SslUtil.getCertificateString(cert);\n      String sha3Hash=EncryptionUtil.getSha3Hash(strCert);\n      final String[] credentialsBodyHolder=new String[1];\n      CountDownLatch latch=new CountDownLatch(1);\n      transportService.process(DeviceTransportType.MQTT,TransportProtos.ValidateDeviceX509CertRequestMsg.newBuilder().setHash(sha3Hash).build(),new TransportServiceCallback<ValidateDeviceCredentialsResponse>(){\n        @Override public void onSuccess(        ValidateDeviceCredentialsResponse msg){\n          if (!StringUtils.isEmpty(msg.getCredentials())) {\n            credentialsBodyHolder[0]=msg.getCredentials();\n          }\n          latch.countDown();\n        }\n        @Override public void onError(        Throwable e){\n          log.error(e.getMessage(),e);\n          latch.countDown();\n        }\n      }\n);\n      latch.await(10,TimeUnit.SECONDS);\n      if (strCert.equals(credentialsBodyHolder[0])) {\n        credentialsBody=credentialsBodyHolder[0];\n        break;\n      }\n    }\n catch (    InterruptedException|CertificateEncodingException e) {\n      log.error(e.getMessage(),e);\n    }\n  }\n  if (credentialsBody == null) {\n    throw new CertificateException(\"Invalid Device Certificate\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 186,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2106,
        "startLineNumber" : 144,
        "startColumnNumber" : 8,
        "endLineNumber" : 182,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override public void checkClientTrusted(X509Certificate[] chain,String authType) throws CertificateException {\n  String credentialsBody=null;\n  for (  X509Certificate cert : chain) {\n    try {\n      String strCert=SslUtil.getCertificateString(cert);\n      String sha3Hash=EncryptionUtil.getSha3Hash(strCert);\n      final String[] credentialsBodyHolder=new String[1];\n      CountDownLatch latch=new CountDownLatch(1);\n      transportService.process(DeviceTransportType.MQTT,TransportProtos.ValidateDeviceX509CertRequestMsg.newBuilder().setHash(sha3Hash).build(),new TransportServiceCallback<ValidateDeviceCredentialsResponse>(){\n        @Override public void onSuccess(        ValidateDeviceCredentialsResponse msg){\n          if (!StringUtils.isEmpty(msg.getCredentials())) {\n            credentialsBodyHolder[0]=msg.getCredentials();\n          }\n          latch.countDown();\n        }\n        @Override public void onError(        Throwable e){\n          log.error(e.getMessage(),e);\n          latch.countDown();\n        }\n      }\n);\n      latch.await(10,TimeUnit.SECONDS);\n      if (strCert.equals(credentialsBodyHolder[0])) {\n        credentialsBody=credentialsBodyHolder[0];\n        break;\n      }\n    }\n catch (    InterruptedException|CertificateEncodingException e) {\n      log.error(e.getMessage(),e);\n    }\n  }\n  if (credentialsBody == null) {\n    throw new CertificateException(\"Invalid Device Certificate\");\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 204,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 170,
        "startColumnNumber" : 20,
        "endLineNumber" : 170,
        "endColumnNumber" : 54
      },
      "nodeContext" : "latch.await(10,TimeUnit.SECONDS);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.util.concurrent.TimeUnit"
  } ],
  "positionList" : [ {
    "charLength" : 8,
    "startLineNumber" : 170,
    "startColumnNumber" : 36,
    "endLineNumber" : 170,
    "endColumnNumber" : 44
  } ],
  "layoutRelationDataList" : [ ]
}