{
  "id" : 264,
  "expression" : "n",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "f6817d029d0618f57b04172e8ba36f37fbf03051",
  "filePath" : "com/williamfiset/algorithms/graphtheory/treealgorithms/TreeCanonicalFormAdjacencyList.java",
  "occurrences" : 6,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "n",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 70,
      "startColumnNumber" : 27,
      "endLineNumber" : 70,
      "endColumnNumber" : 28
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 70,
        "startColumnNumber" : 19,
        "endLineNumber" : 70,
        "endColumnNumber" : 29
      },
      "nodeContext" : "new int[n]",
      "nodeType" : "ArrayCreation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 70,
        "startColumnNumber" : 10,
        "endLineNumber" : 70,
        "endColumnNumber" : 29
      },
      "nodeContext" : "degree=new int[n]",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 70,
        "startColumnNumber" : 4,
        "endLineNumber" : 70,
        "endColumnNumber" : 30
      },
      "nodeContext" : "int[] degree=new int[n];\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2273,
        "startLineNumber" : 63,
        "startColumnNumber" : 60,
        "endLineNumber" : 144,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (tree == null || tree.size() == 0)   return \"\";\n  if (tree.size() == 1)   return \"()\";\n  final int n=tree.size();\n  int root=findTreeCenters(tree).get(0);\n  int[] degree=new int[n];\n  int[] parent=new int[n];\n  boolean[] visited=new boolean[n];\n  List<Integer> leafs=new ArrayList<>();\n  Queue<Integer> q=new ArrayDeque<>();\n  visited[root]=true;\n  parent[root]=-1;\n  q.offer(root);\n  while (!q.isEmpty()) {\n    int at=q.poll();\n    List<Integer> edges=tree.get(at);\n    degree[at]=edges.size();\n    for (    int next : edges) {\n      if (!visited[next]) {\n        visited[next]=true;\n        parent[next]=at;\n        q.offer(next);\n      }\n    }\n    if (degree[at] == 1)     leafs.add(at);\n  }\n  List<Integer> newLeafs=new ArrayList<>();\n  String[] map=new String[n];\n  for (int i=0; i < n; i++) {\n    visited[i]=false;\n    map[i]=\"()\";\n  }\n  int treeSize=n;\n  while (treeSize > 2) {\n    for (    int leaf : leafs) {\n      visited[leaf]=true;\n      int p=parent[leaf];\n      if (--degree[p] == 1)       newLeafs.add(p);\n      treeSize--;\n    }\n    for (    int p : newLeafs) {\n      List<String> labels=new ArrayList<>();\n      for (      int child : tree.get(p))       if (visited[child])       labels.add(map[child]);\n      String parentInnerParentheses=map[p].substring(1,map[p].length() - 1);\n      labels.add(parentInnerParentheses);\n      Collections.sort(labels);\n      map[p]=\"(\".concat(String.join(\"\",labels)).concat(\")\");\n    }\n    leafs.clear();\n    leafs.addAll(newLeafs);\n    newLeafs.clear();\n  }\n  String l1=map[leafs.get(0)];\n  if (treeSize == 1)   return l1;\n  String l2=map[leafs.get(1)];\n  return (l1.compareTo(l2) < 0) ? (l1 + l2) : (l2 + l1);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 419,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2331,
        "startLineNumber" : 63,
        "startColumnNumber" : 2,
        "endLineNumber" : 144,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static String encodeTree(List<List<Integer>> tree){\n  if (tree == null || tree.size() == 0)   return \"\";\n  if (tree.size() == 1)   return \"()\";\n  final int n=tree.size();\n  int root=findTreeCenters(tree).get(0);\n  int[] degree=new int[n];\n  int[] parent=new int[n];\n  boolean[] visited=new boolean[n];\n  List<Integer> leafs=new ArrayList<>();\n  Queue<Integer> q=new ArrayDeque<>();\n  visited[root]=true;\n  parent[root]=-1;\n  q.offer(root);\n  while (!q.isEmpty()) {\n    int at=q.poll();\n    List<Integer> edges=tree.get(at);\n    degree[at]=edges.size();\n    for (    int next : edges) {\n      if (!visited[next]) {\n        visited[next]=true;\n        parent[next]=at;\n        q.offer(next);\n      }\n    }\n    if (degree[at] == 1)     leafs.add(at);\n  }\n  List<Integer> newLeafs=new ArrayList<>();\n  String[] map=new String[n];\n  for (int i=0; i < n; i++) {\n    visited[i]=false;\n    map[i]=\"()\";\n  }\n  int treeSize=n;\n  while (treeSize > 2) {\n    for (    int leaf : leafs) {\n      visited[leaf]=true;\n      int p=parent[leaf];\n      if (--degree[p] == 1)       newLeafs.add(p);\n      treeSize--;\n    }\n    for (    int p : newLeafs) {\n      List<String> labels=new ArrayList<>();\n      for (      int child : tree.get(p))       if (visited[child])       labels.add(map[child]);\n      String parentInnerParentheses=map[p].substring(1,map[p].length() - 1);\n      labels.add(parentInnerParentheses);\n      Collections.sort(labels);\n      map[p]=\"(\".concat(String.join(\"\",labels)).concat(\")\");\n    }\n    leafs.clear();\n    leafs.addAll(newLeafs);\n    newLeafs.clear();\n  }\n  String l1=map[leafs.get(0)];\n  if (treeSize == 1)   return l1;\n  String l2=map[leafs.get(1)];\n  return (l1.compareTo(l2) < 0) ? (l1 + l2) : (l2 + l1);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 435,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 70,
        "startColumnNumber" : 4,
        "endLineNumber" : 70,
        "endColumnNumber" : 30
      },
      "nodeContext" : "int[] degree=new int[n];\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "n",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 71,
      "startColumnNumber" : 27,
      "endLineNumber" : 71,
      "endColumnNumber" : 28
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 71,
        "startColumnNumber" : 19,
        "endLineNumber" : 71,
        "endColumnNumber" : 29
      },
      "nodeContext" : "new int[n]",
      "nodeType" : "ArrayCreation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 71,
        "startColumnNumber" : 10,
        "endLineNumber" : 71,
        "endColumnNumber" : 29
      },
      "nodeContext" : "parent=new int[n]",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 71,
        "startColumnNumber" : 4,
        "endLineNumber" : 71,
        "endColumnNumber" : 30
      },
      "nodeContext" : "int[] parent=new int[n];\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2273,
        "startLineNumber" : 63,
        "startColumnNumber" : 60,
        "endLineNumber" : 144,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (tree == null || tree.size() == 0)   return \"\";\n  if (tree.size() == 1)   return \"()\";\n  final int n=tree.size();\n  int root=findTreeCenters(tree).get(0);\n  int[] degree=new int[n];\n  int[] parent=new int[n];\n  boolean[] visited=new boolean[n];\n  List<Integer> leafs=new ArrayList<>();\n  Queue<Integer> q=new ArrayDeque<>();\n  visited[root]=true;\n  parent[root]=-1;\n  q.offer(root);\n  while (!q.isEmpty()) {\n    int at=q.poll();\n    List<Integer> edges=tree.get(at);\n    degree[at]=edges.size();\n    for (    int next : edges) {\n      if (!visited[next]) {\n        visited[next]=true;\n        parent[next]=at;\n        q.offer(next);\n      }\n    }\n    if (degree[at] == 1)     leafs.add(at);\n  }\n  List<Integer> newLeafs=new ArrayList<>();\n  String[] map=new String[n];\n  for (int i=0; i < n; i++) {\n    visited[i]=false;\n    map[i]=\"()\";\n  }\n  int treeSize=n;\n  while (treeSize > 2) {\n    for (    int leaf : leafs) {\n      visited[leaf]=true;\n      int p=parent[leaf];\n      if (--degree[p] == 1)       newLeafs.add(p);\n      treeSize--;\n    }\n    for (    int p : newLeafs) {\n      List<String> labels=new ArrayList<>();\n      for (      int child : tree.get(p))       if (visited[child])       labels.add(map[child]);\n      String parentInnerParentheses=map[p].substring(1,map[p].length() - 1);\n      labels.add(parentInnerParentheses);\n      Collections.sort(labels);\n      map[p]=\"(\".concat(String.join(\"\",labels)).concat(\")\");\n    }\n    leafs.clear();\n    leafs.addAll(newLeafs);\n    newLeafs.clear();\n  }\n  String l1=map[leafs.get(0)];\n  if (treeSize == 1)   return l1;\n  String l2=map[leafs.get(1)];\n  return (l1.compareTo(l2) < 0) ? (l1 + l2) : (l2 + l1);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 419,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2331,
        "startLineNumber" : 63,
        "startColumnNumber" : 2,
        "endLineNumber" : 144,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static String encodeTree(List<List<Integer>> tree){\n  if (tree == null || tree.size() == 0)   return \"\";\n  if (tree.size() == 1)   return \"()\";\n  final int n=tree.size();\n  int root=findTreeCenters(tree).get(0);\n  int[] degree=new int[n];\n  int[] parent=new int[n];\n  boolean[] visited=new boolean[n];\n  List<Integer> leafs=new ArrayList<>();\n  Queue<Integer> q=new ArrayDeque<>();\n  visited[root]=true;\n  parent[root]=-1;\n  q.offer(root);\n  while (!q.isEmpty()) {\n    int at=q.poll();\n    List<Integer> edges=tree.get(at);\n    degree[at]=edges.size();\n    for (    int next : edges) {\n      if (!visited[next]) {\n        visited[next]=true;\n        parent[next]=at;\n        q.offer(next);\n      }\n    }\n    if (degree[at] == 1)     leafs.add(at);\n  }\n  List<Integer> newLeafs=new ArrayList<>();\n  String[] map=new String[n];\n  for (int i=0; i < n; i++) {\n    visited[i]=false;\n    map[i]=\"()\";\n  }\n  int treeSize=n;\n  while (treeSize > 2) {\n    for (    int leaf : leafs) {\n      visited[leaf]=true;\n      int p=parent[leaf];\n      if (--degree[p] == 1)       newLeafs.add(p);\n      treeSize--;\n    }\n    for (    int p : newLeafs) {\n      List<String> labels=new ArrayList<>();\n      for (      int child : tree.get(p))       if (visited[child])       labels.add(map[child]);\n      String parentInnerParentheses=map[p].substring(1,map[p].length() - 1);\n      labels.add(parentInnerParentheses);\n      Collections.sort(labels);\n      map[p]=\"(\".concat(String.join(\"\",labels)).concat(\")\");\n    }\n    leafs.clear();\n    leafs.addAll(newLeafs);\n    newLeafs.clear();\n  }\n  String l1=map[leafs.get(0)];\n  if (treeSize == 1)   return l1;\n  String l2=map[leafs.get(1)];\n  return (l1.compareTo(l2) < 0) ? (l1 + l2) : (l2 + l1);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 435,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 71,
        "startColumnNumber" : 4,
        "endLineNumber" : 71,
        "endColumnNumber" : 30
      },
      "nodeContext" : "int[] parent=new int[n];\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "n",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 72,
      "startColumnNumber" : 36,
      "endLineNumber" : 72,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 72,
        "startColumnNumber" : 24,
        "endLineNumber" : 72,
        "endColumnNumber" : 38
      },
      "nodeContext" : "new boolean[n]",
      "nodeType" : "ArrayCreation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 72,
        "startColumnNumber" : 14,
        "endLineNumber" : 72,
        "endColumnNumber" : 38
      },
      "nodeContext" : "visited=new boolean[n]",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 72,
        "startColumnNumber" : 4,
        "endLineNumber" : 72,
        "endColumnNumber" : 39
      },
      "nodeContext" : "boolean[] visited=new boolean[n];\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2273,
        "startLineNumber" : 63,
        "startColumnNumber" : 60,
        "endLineNumber" : 144,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (tree == null || tree.size() == 0)   return \"\";\n  if (tree.size() == 1)   return \"()\";\n  final int n=tree.size();\n  int root=findTreeCenters(tree).get(0);\n  int[] degree=new int[n];\n  int[] parent=new int[n];\n  boolean[] visited=new boolean[n];\n  List<Integer> leafs=new ArrayList<>();\n  Queue<Integer> q=new ArrayDeque<>();\n  visited[root]=true;\n  parent[root]=-1;\n  q.offer(root);\n  while (!q.isEmpty()) {\n    int at=q.poll();\n    List<Integer> edges=tree.get(at);\n    degree[at]=edges.size();\n    for (    int next : edges) {\n      if (!visited[next]) {\n        visited[next]=true;\n        parent[next]=at;\n        q.offer(next);\n      }\n    }\n    if (degree[at] == 1)     leafs.add(at);\n  }\n  List<Integer> newLeafs=new ArrayList<>();\n  String[] map=new String[n];\n  for (int i=0; i < n; i++) {\n    visited[i]=false;\n    map[i]=\"()\";\n  }\n  int treeSize=n;\n  while (treeSize > 2) {\n    for (    int leaf : leafs) {\n      visited[leaf]=true;\n      int p=parent[leaf];\n      if (--degree[p] == 1)       newLeafs.add(p);\n      treeSize--;\n    }\n    for (    int p : newLeafs) {\n      List<String> labels=new ArrayList<>();\n      for (      int child : tree.get(p))       if (visited[child])       labels.add(map[child]);\n      String parentInnerParentheses=map[p].substring(1,map[p].length() - 1);\n      labels.add(parentInnerParentheses);\n      Collections.sort(labels);\n      map[p]=\"(\".concat(String.join(\"\",labels)).concat(\")\");\n    }\n    leafs.clear();\n    leafs.addAll(newLeafs);\n    newLeafs.clear();\n  }\n  String l1=map[leafs.get(0)];\n  if (treeSize == 1)   return l1;\n  String l2=map[leafs.get(1)];\n  return (l1.compareTo(l2) < 0) ? (l1 + l2) : (l2 + l1);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 419,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2331,
        "startLineNumber" : 63,
        "startColumnNumber" : 2,
        "endLineNumber" : 144,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static String encodeTree(List<List<Integer>> tree){\n  if (tree == null || tree.size() == 0)   return \"\";\n  if (tree.size() == 1)   return \"()\";\n  final int n=tree.size();\n  int root=findTreeCenters(tree).get(0);\n  int[] degree=new int[n];\n  int[] parent=new int[n];\n  boolean[] visited=new boolean[n];\n  List<Integer> leafs=new ArrayList<>();\n  Queue<Integer> q=new ArrayDeque<>();\n  visited[root]=true;\n  parent[root]=-1;\n  q.offer(root);\n  while (!q.isEmpty()) {\n    int at=q.poll();\n    List<Integer> edges=tree.get(at);\n    degree[at]=edges.size();\n    for (    int next : edges) {\n      if (!visited[next]) {\n        visited[next]=true;\n        parent[next]=at;\n        q.offer(next);\n      }\n    }\n    if (degree[at] == 1)     leafs.add(at);\n  }\n  List<Integer> newLeafs=new ArrayList<>();\n  String[] map=new String[n];\n  for (int i=0; i < n; i++) {\n    visited[i]=false;\n    map[i]=\"()\";\n  }\n  int treeSize=n;\n  while (treeSize > 2) {\n    for (    int leaf : leafs) {\n      visited[leaf]=true;\n      int p=parent[leaf];\n      if (--degree[p] == 1)       newLeafs.add(p);\n      treeSize--;\n    }\n    for (    int p : newLeafs) {\n      List<String> labels=new ArrayList<>();\n      for (      int child : tree.get(p))       if (visited[child])       labels.add(map[child]);\n      String parentInnerParentheses=map[p].substring(1,map[p].length() - 1);\n      labels.add(parentInnerParentheses);\n      Collections.sort(labels);\n      map[p]=\"(\".concat(String.join(\"\",labels)).concat(\")\");\n    }\n    leafs.clear();\n    leafs.addAll(newLeafs);\n    newLeafs.clear();\n  }\n  String l1=map[leafs.get(0)];\n  if (treeSize == 1)   return l1;\n  String l2=map[leafs.get(1)];\n  return (l1.compareTo(l2) < 0) ? (l1 + l2) : (l2 + l1);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 435,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 72,
        "startColumnNumber" : 4,
        "endLineNumber" : 72,
        "endColumnNumber" : 39
      },
      "nodeContext" : "boolean[] visited=new boolean[n];\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "n",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 96,
      "startColumnNumber" : 30,
      "endLineNumber" : 96,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 96,
        "startColumnNumber" : 19,
        "endLineNumber" : 96,
        "endColumnNumber" : 32
      },
      "nodeContext" : "new String[n]",
      "nodeType" : "ArrayCreation",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 96,
        "startColumnNumber" : 13,
        "endLineNumber" : 96,
        "endColumnNumber" : 32
      },
      "nodeContext" : "map=new String[n]",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 96,
        "startColumnNumber" : 4,
        "endLineNumber" : 96,
        "endColumnNumber" : 33
      },
      "nodeContext" : "String[] map=new String[n];\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2273,
        "startLineNumber" : 63,
        "startColumnNumber" : 60,
        "endLineNumber" : 144,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (tree == null || tree.size() == 0)   return \"\";\n  if (tree.size() == 1)   return \"()\";\n  final int n=tree.size();\n  int root=findTreeCenters(tree).get(0);\n  int[] degree=new int[n];\n  int[] parent=new int[n];\n  boolean[] visited=new boolean[n];\n  List<Integer> leafs=new ArrayList<>();\n  Queue<Integer> q=new ArrayDeque<>();\n  visited[root]=true;\n  parent[root]=-1;\n  q.offer(root);\n  while (!q.isEmpty()) {\n    int at=q.poll();\n    List<Integer> edges=tree.get(at);\n    degree[at]=edges.size();\n    for (    int next : edges) {\n      if (!visited[next]) {\n        visited[next]=true;\n        parent[next]=at;\n        q.offer(next);\n      }\n    }\n    if (degree[at] == 1)     leafs.add(at);\n  }\n  List<Integer> newLeafs=new ArrayList<>();\n  String[] map=new String[n];\n  for (int i=0; i < n; i++) {\n    visited[i]=false;\n    map[i]=\"()\";\n  }\n  int treeSize=n;\n  while (treeSize > 2) {\n    for (    int leaf : leafs) {\n      visited[leaf]=true;\n      int p=parent[leaf];\n      if (--degree[p] == 1)       newLeafs.add(p);\n      treeSize--;\n    }\n    for (    int p : newLeafs) {\n      List<String> labels=new ArrayList<>();\n      for (      int child : tree.get(p))       if (visited[child])       labels.add(map[child]);\n      String parentInnerParentheses=map[p].substring(1,map[p].length() - 1);\n      labels.add(parentInnerParentheses);\n      Collections.sort(labels);\n      map[p]=\"(\".concat(String.join(\"\",labels)).concat(\")\");\n    }\n    leafs.clear();\n    leafs.addAll(newLeafs);\n    newLeafs.clear();\n  }\n  String l1=map[leafs.get(0)];\n  if (treeSize == 1)   return l1;\n  String l2=map[leafs.get(1)];\n  return (l1.compareTo(l2) < 0) ? (l1 + l2) : (l2 + l1);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 419,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2331,
        "startLineNumber" : 63,
        "startColumnNumber" : 2,
        "endLineNumber" : 144,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static String encodeTree(List<List<Integer>> tree){\n  if (tree == null || tree.size() == 0)   return \"\";\n  if (tree.size() == 1)   return \"()\";\n  final int n=tree.size();\n  int root=findTreeCenters(tree).get(0);\n  int[] degree=new int[n];\n  int[] parent=new int[n];\n  boolean[] visited=new boolean[n];\n  List<Integer> leafs=new ArrayList<>();\n  Queue<Integer> q=new ArrayDeque<>();\n  visited[root]=true;\n  parent[root]=-1;\n  q.offer(root);\n  while (!q.isEmpty()) {\n    int at=q.poll();\n    List<Integer> edges=tree.get(at);\n    degree[at]=edges.size();\n    for (    int next : edges) {\n      if (!visited[next]) {\n        visited[next]=true;\n        parent[next]=at;\n        q.offer(next);\n      }\n    }\n    if (degree[at] == 1)     leafs.add(at);\n  }\n  List<Integer> newLeafs=new ArrayList<>();\n  String[] map=new String[n];\n  for (int i=0; i < n; i++) {\n    visited[i]=false;\n    map[i]=\"()\";\n  }\n  int treeSize=n;\n  while (treeSize > 2) {\n    for (    int leaf : leafs) {\n      visited[leaf]=true;\n      int p=parent[leaf];\n      if (--degree[p] == 1)       newLeafs.add(p);\n      treeSize--;\n    }\n    for (    int p : newLeafs) {\n      List<String> labels=new ArrayList<>();\n      for (      int child : tree.get(p))       if (visited[child])       labels.add(map[child]);\n      String parentInnerParentheses=map[p].substring(1,map[p].length() - 1);\n      labels.add(parentInnerParentheses);\n      Collections.sort(labels);\n      map[p]=\"(\".concat(String.join(\"\",labels)).concat(\")\");\n    }\n    leafs.clear();\n    leafs.addAll(newLeafs);\n    newLeafs.clear();\n  }\n  String l1=map[leafs.get(0)];\n  if (treeSize == 1)   return l1;\n  String l2=map[leafs.get(1)];\n  return (l1.compareTo(l2) < 0) ? (l1 + l2) : (l2 + l1);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 435,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 96,
        "startColumnNumber" : 4,
        "endLineNumber" : 96,
        "endColumnNumber" : 33
      },
      "nodeContext" : "String[] map=new String[n];\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "n",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 97,
      "startColumnNumber" : 23,
      "endLineNumber" : 97,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 5,
        "startLineNumber" : 97,
        "startColumnNumber" : 19,
        "endLineNumber" : 97,
        "endColumnNumber" : 24
      },
      "nodeContext" : "i < n",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 97,
        "startColumnNumber" : 4,
        "endLineNumber" : 100,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < n; i++) {\n  visited[i]=false;\n  map[i]=\"()\";\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 24,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2273,
        "startLineNumber" : 63,
        "startColumnNumber" : 60,
        "endLineNumber" : 144,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (tree == null || tree.size() == 0)   return \"\";\n  if (tree.size() == 1)   return \"()\";\n  final int n=tree.size();\n  int root=findTreeCenters(tree).get(0);\n  int[] degree=new int[n];\n  int[] parent=new int[n];\n  boolean[] visited=new boolean[n];\n  List<Integer> leafs=new ArrayList<>();\n  Queue<Integer> q=new ArrayDeque<>();\n  visited[root]=true;\n  parent[root]=-1;\n  q.offer(root);\n  while (!q.isEmpty()) {\n    int at=q.poll();\n    List<Integer> edges=tree.get(at);\n    degree[at]=edges.size();\n    for (    int next : edges) {\n      if (!visited[next]) {\n        visited[next]=true;\n        parent[next]=at;\n        q.offer(next);\n      }\n    }\n    if (degree[at] == 1)     leafs.add(at);\n  }\n  List<Integer> newLeafs=new ArrayList<>();\n  String[] map=new String[n];\n  for (int i=0; i < n; i++) {\n    visited[i]=false;\n    map[i]=\"()\";\n  }\n  int treeSize=n;\n  while (treeSize > 2) {\n    for (    int leaf : leafs) {\n      visited[leaf]=true;\n      int p=parent[leaf];\n      if (--degree[p] == 1)       newLeafs.add(p);\n      treeSize--;\n    }\n    for (    int p : newLeafs) {\n      List<String> labels=new ArrayList<>();\n      for (      int child : tree.get(p))       if (visited[child])       labels.add(map[child]);\n      String parentInnerParentheses=map[p].substring(1,map[p].length() - 1);\n      labels.add(parentInnerParentheses);\n      Collections.sort(labels);\n      map[p]=\"(\".concat(String.join(\"\",labels)).concat(\")\");\n    }\n    leafs.clear();\n    leafs.addAll(newLeafs);\n    newLeafs.clear();\n  }\n  String l1=map[leafs.get(0)];\n  if (treeSize == 1)   return l1;\n  String l2=map[leafs.get(1)];\n  return (l1.compareTo(l2) < 0) ? (l1 + l2) : (l2 + l1);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 419,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2331,
        "startLineNumber" : 63,
        "startColumnNumber" : 2,
        "endLineNumber" : 144,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static String encodeTree(List<List<Integer>> tree){\n  if (tree == null || tree.size() == 0)   return \"\";\n  if (tree.size() == 1)   return \"()\";\n  final int n=tree.size();\n  int root=findTreeCenters(tree).get(0);\n  int[] degree=new int[n];\n  int[] parent=new int[n];\n  boolean[] visited=new boolean[n];\n  List<Integer> leafs=new ArrayList<>();\n  Queue<Integer> q=new ArrayDeque<>();\n  visited[root]=true;\n  parent[root]=-1;\n  q.offer(root);\n  while (!q.isEmpty()) {\n    int at=q.poll();\n    List<Integer> edges=tree.get(at);\n    degree[at]=edges.size();\n    for (    int next : edges) {\n      if (!visited[next]) {\n        visited[next]=true;\n        parent[next]=at;\n        q.offer(next);\n      }\n    }\n    if (degree[at] == 1)     leafs.add(at);\n  }\n  List<Integer> newLeafs=new ArrayList<>();\n  String[] map=new String[n];\n  for (int i=0; i < n; i++) {\n    visited[i]=false;\n    map[i]=\"()\";\n  }\n  int treeSize=n;\n  while (treeSize > 2) {\n    for (    int leaf : leafs) {\n      visited[leaf]=true;\n      int p=parent[leaf];\n      if (--degree[p] == 1)       newLeafs.add(p);\n      treeSize--;\n    }\n    for (    int p : newLeafs) {\n      List<String> labels=new ArrayList<>();\n      for (      int child : tree.get(p))       if (visited[child])       labels.add(map[child]);\n      String parentInnerParentheses=map[p].substring(1,map[p].length() - 1);\n      labels.add(parentInnerParentheses);\n      Collections.sort(labels);\n      map[p]=\"(\".concat(String.join(\"\",labels)).concat(\")\");\n    }\n    leafs.clear();\n    leafs.addAll(newLeafs);\n    newLeafs.clear();\n  }\n  String l1=map[leafs.get(0)];\n  if (treeSize == 1)   return l1;\n  String l2=map[leafs.get(1)];\n  return (l1.compareTo(l2) < 0) ? (l1 + l2) : (l2 + l1);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 435,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 5,
        "startLineNumber" : 97,
        "startColumnNumber" : 19,
        "endLineNumber" : 97,
        "endColumnNumber" : 24
      },
      "nodeContext" : "i < n",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "n",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 102,
      "startColumnNumber" : 19,
      "endLineNumber" : 102,
      "endColumnNumber" : 20
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 102,
        "startColumnNumber" : 8,
        "endLineNumber" : 102,
        "endColumnNumber" : 20
      },
      "nodeContext" : "treeSize=n",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 102,
        "startColumnNumber" : 4,
        "endLineNumber" : 102,
        "endColumnNumber" : 21
      },
      "nodeContext" : "int treeSize=n;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2273,
        "startLineNumber" : 63,
        "startColumnNumber" : 60,
        "endLineNumber" : 144,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (tree == null || tree.size() == 0)   return \"\";\n  if (tree.size() == 1)   return \"()\";\n  final int n=tree.size();\n  int root=findTreeCenters(tree).get(0);\n  int[] degree=new int[n];\n  int[] parent=new int[n];\n  boolean[] visited=new boolean[n];\n  List<Integer> leafs=new ArrayList<>();\n  Queue<Integer> q=new ArrayDeque<>();\n  visited[root]=true;\n  parent[root]=-1;\n  q.offer(root);\n  while (!q.isEmpty()) {\n    int at=q.poll();\n    List<Integer> edges=tree.get(at);\n    degree[at]=edges.size();\n    for (    int next : edges) {\n      if (!visited[next]) {\n        visited[next]=true;\n        parent[next]=at;\n        q.offer(next);\n      }\n    }\n    if (degree[at] == 1)     leafs.add(at);\n  }\n  List<Integer> newLeafs=new ArrayList<>();\n  String[] map=new String[n];\n  for (int i=0; i < n; i++) {\n    visited[i]=false;\n    map[i]=\"()\";\n  }\n  int treeSize=n;\n  while (treeSize > 2) {\n    for (    int leaf : leafs) {\n      visited[leaf]=true;\n      int p=parent[leaf];\n      if (--degree[p] == 1)       newLeafs.add(p);\n      treeSize--;\n    }\n    for (    int p : newLeafs) {\n      List<String> labels=new ArrayList<>();\n      for (      int child : tree.get(p))       if (visited[child])       labels.add(map[child]);\n      String parentInnerParentheses=map[p].substring(1,map[p].length() - 1);\n      labels.add(parentInnerParentheses);\n      Collections.sort(labels);\n      map[p]=\"(\".concat(String.join(\"\",labels)).concat(\")\");\n    }\n    leafs.clear();\n    leafs.addAll(newLeafs);\n    newLeafs.clear();\n  }\n  String l1=map[leafs.get(0)];\n  if (treeSize == 1)   return l1;\n  String l2=map[leafs.get(1)];\n  return (l1.compareTo(l2) < 0) ? (l1 + l2) : (l2 + l1);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 419,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2331,
        "startLineNumber" : 63,
        "startColumnNumber" : 2,
        "endLineNumber" : 144,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static String encodeTree(List<List<Integer>> tree){\n  if (tree == null || tree.size() == 0)   return \"\";\n  if (tree.size() == 1)   return \"()\";\n  final int n=tree.size();\n  int root=findTreeCenters(tree).get(0);\n  int[] degree=new int[n];\n  int[] parent=new int[n];\n  boolean[] visited=new boolean[n];\n  List<Integer> leafs=new ArrayList<>();\n  Queue<Integer> q=new ArrayDeque<>();\n  visited[root]=true;\n  parent[root]=-1;\n  q.offer(root);\n  while (!q.isEmpty()) {\n    int at=q.poll();\n    List<Integer> edges=tree.get(at);\n    degree[at]=edges.size();\n    for (    int next : edges) {\n      if (!visited[next]) {\n        visited[next]=true;\n        parent[next]=at;\n        q.offer(next);\n      }\n    }\n    if (degree[at] == 1)     leafs.add(at);\n  }\n  List<Integer> newLeafs=new ArrayList<>();\n  String[] map=new String[n];\n  for (int i=0; i < n; i++) {\n    visited[i]=false;\n    map[i]=\"()\";\n  }\n  int treeSize=n;\n  while (treeSize > 2) {\n    for (    int leaf : leafs) {\n      visited[leaf]=true;\n      int p=parent[leaf];\n      if (--degree[p] == 1)       newLeafs.add(p);\n      treeSize--;\n    }\n    for (    int p : newLeafs) {\n      List<String> labels=new ArrayList<>();\n      for (      int child : tree.get(p))       if (visited[child])       labels.add(map[child]);\n      String parentInnerParentheses=map[p].substring(1,map[p].length() - 1);\n      labels.add(parentInnerParentheses);\n      Collections.sort(labels);\n      map[p]=\"(\".concat(String.join(\"\",labels)).concat(\")\");\n    }\n    leafs.clear();\n    leafs.addAll(newLeafs);\n    newLeafs.clear();\n  }\n  String l1=map[leafs.get(0)];\n  if (treeSize == 1)   return l1;\n  String l2=map[leafs.get(1)];\n  return (l1.compareTo(l2) < 0) ? (l1 + l2) : (l2 + l1);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 435,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 102,
        "startColumnNumber" : 4,
        "endLineNumber" : 102,
        "endColumnNumber" : 21
      },
      "nodeContext" : "int treeSize=n;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 70,
    "startColumnNumber" : 27,
    "endLineNumber" : 70,
    "endColumnNumber" : 28
  }, {
    "charLength" : 1,
    "startLineNumber" : 71,
    "startColumnNumber" : 27,
    "endLineNumber" : 71,
    "endColumnNumber" : 28
  }, {
    "charLength" : 1,
    "startLineNumber" : 72,
    "startColumnNumber" : 36,
    "endLineNumber" : 72,
    "endColumnNumber" : 37
  }, {
    "charLength" : 1,
    "startLineNumber" : 96,
    "startColumnNumber" : 30,
    "endLineNumber" : 96,
    "endColumnNumber" : 31
  }, {
    "charLength" : 1,
    "startLineNumber" : 97,
    "startColumnNumber" : 23,
    "endLineNumber" : 97,
    "endColumnNumber" : 24
  }, {
    "charLength" : 1,
    "startLineNumber" : 102,
    "startColumnNumber" : 19,
    "endLineNumber" : 102,
    "endColumnNumber" : 20
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 2
  } ]
}