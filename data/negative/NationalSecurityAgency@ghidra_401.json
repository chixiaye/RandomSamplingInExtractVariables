{
  "id" : 401,
  "expression" : "\"Solution to \" + sym.getName() + \" := \"+ goal+ \" = \"+ patexp",
  "projectName" : "NationalSecurityAgency@ghidra",
  "commitID" : "a54d0e28d652c48502551a88278808549aed5f98",
  "filePath" : "/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/app/plugin/assembler/sleigh/expr/OperandValueSolver.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"Solution to \" + sym.getName() + \" := \"+ goal+ \" = \"+ patexp",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 63,
      "startLineNumber" : 78,
      "startColumnNumber" : 4,
      "endLineNumber" : 78,
      "endColumnNumber" : 67
    },
    "astNodeNumber" : 9,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 132,
        "startLineNumber" : 77,
        "startColumnNumber" : 10,
        "endLineNumber" : 79,
        "endColumnNumber" : 20
      },
      "nodeContext" : "AssemblyResolution.error(err.getError(),\"Solution to \" + sym.getName() + \" := \"+ goal+ \" = \"+ patexp,List.of(result))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 19,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 140,
        "startLineNumber" : 77,
        "startColumnNumber" : 3,
        "endLineNumber" : 79,
        "endColumnNumber" : 21
      },
      "nodeContext" : "return AssemblyResolution.error(err.getError(),\"Solution to \" + sym.getName() + \" := \"+ goal+ \" = \"+ patexp,List.of(result));\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 20,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 215,
        "startLineNumber" : 75,
        "startColumnNumber" : 24,
        "endLineNumber" : 80,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  AssemblyResolvedError err=(AssemblyResolvedError)result;\n  return AssemblyResolution.error(err.getError(),\"Solution to \" + sym.getName() + \" := \"+ goal+ \" = \"+ patexp,List.of(result));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 30,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 237,
        "startLineNumber" : 75,
        "startColumnNumber" : 2,
        "endLineNumber" : 80,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (result.isError()) {\n  AssemblyResolvedError err=(AssemblyResolvedError)result;\n  return AssemblyResolution.error(err.getError(),\"Solution to \" + sym.getName() + \" := \"+ goal+ \" = \"+ patexp,List.of(result));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 34,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1058,
        "startLineNumber" : 63,
        "startColumnNumber" : 53,
        "endLineNumber" : 86,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  Constructor cons=ov.getConstructor();\n  OperandSymbol sym=cons.getOperand(ov.getIndex());\n  PatternExpression patexp=getDefiningExpression(sym);\n  if (patexp == null) {\n    if (goal.equals(MaskedLong.ZERO)) {\n      return AssemblyResolution.nop(description,null);\n    }\n    return AssemblyResolution.error(\"Operand \" + sym.getName() + \" is undefined and does not agree with child requirements\",description,null);\n  }\n  AssemblyResolution result=solver.solve(patexp,goal,vals,res,cur,hints,description);\n  if (result.isError()) {\n    AssemblyResolvedError err=(AssemblyResolvedError)result;\n    return AssemblyResolution.error(err.getError(),\"Solution to \" + sym.getName() + \" := \"+ goal+ \" = \"+ patexp,List.of(result));\n  }\n  AssemblyResolvedConstructor con=(AssemblyResolvedConstructor)result;\n  int shamt=AssemblyTreeResolver.computeOffset(sym,cons,res);\n  return con.shift(shamt);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 132,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1300,
        "startLineNumber" : 60,
        "startColumnNumber" : 1,
        "endLineNumber" : 86,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override public AssemblyResolution solve(OperandValue ov,MaskedLong goal,Map<String,Long> vals,Map<Integer,Object> res,AssemblyResolvedConstructor cur,Set<SolverHint> hints,String description) throws NeedsBackfillException {\n  Constructor cons=ov.getConstructor();\n  OperandSymbol sym=cons.getOperand(ov.getIndex());\n  PatternExpression patexp=getDefiningExpression(sym);\n  if (patexp == null) {\n    if (goal.equals(MaskedLong.ZERO)) {\n      return AssemblyResolution.nop(description,null);\n    }\n    return AssemblyResolution.error(\"Operand \" + sym.getName() + \" is undefined and does not agree with child requirements\",description,null);\n  }\n  AssemblyResolution result=solver.solve(patexp,goal,vals,res,cur,hints,description);\n  if (result.isError()) {\n    AssemblyResolvedError err=(AssemblyResolvedError)result;\n    return AssemblyResolution.error(err.getError(),\"Solution to \" + sym.getName() + \" := \"+ goal+ \" = \"+ patexp,List.of(result));\n  }\n  AssemblyResolvedConstructor con=(AssemblyResolvedConstructor)result;\n  int shamt=AssemblyTreeResolver.computeOffset(sym,cons,res);\n  return con.shift(shamt);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 182,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 132,
        "startLineNumber" : 77,
        "startColumnNumber" : 10,
        "endLineNumber" : 79,
        "endColumnNumber" : 20
      },
      "nodeContext" : "AssemblyResolution.error(err.getError(),\"Solution to \" + sym.getName() + \" := \"+ goal+ \" = \"+ patexp,List.of(result))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 19,
      "astHeight" : 4
    },
    "tokenLength" : 12,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 63,
    "startLineNumber" : 78,
    "startColumnNumber" : 4,
    "endLineNumber" : 78,
    "endColumnNumber" : 67
  } ],
  "layoutRelationDataList" : [ ]
}