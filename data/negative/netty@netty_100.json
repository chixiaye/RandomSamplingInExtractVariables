{
  "id" : 100,
  "expression" : "value3",
  "projectName" : "netty@netty",
  "commitID" : "8a68c3e58d4663ae42e41a90d0d11aec3c25016b",
  "filePath" : "/transport/src/test/java/io/netty/channel/socket/nio/AbstractNioChannelTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "value3",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 64,
      "startColumnNumber" : 25,
      "endLineNumber" : 64,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 64,
        "startColumnNumber" : 12,
        "endLineNumber" : 64,
        "endColumnNumber" : 40
      },
      "nodeContext" : "assertEquals(value3,value4)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 64,
        "startColumnNumber" : 12,
        "endLineNumber" : 64,
        "endColumnNumber" : 41
      },
      "nodeContext" : "assertEquals(value3,value4);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 678,
        "startLineNumber" : 53,
        "startColumnNumber" : 12,
        "endLineNumber" : 66,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  NetworkChannel jdkChannel=jdkChannel(channel);\n  ChannelOption<Boolean> option=NioChannelOption.of(StandardSocketOptions.SO_REUSEADDR);\n  boolean value1=jdkChannel.getOption(StandardSocketOptions.SO_REUSEADDR);\n  boolean value2=channel.config().getOption(option);\n  assertEquals(value1,value2);\n  channel.config().setOption(option,!value2);\n  boolean value3=jdkChannel.getOption(StandardSocketOptions.SO_REUSEADDR);\n  boolean value4=channel.config().getOption(option);\n  assertEquals(value3,value4);\n  assertNotEquals(value1,value4);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 87,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 805,
        "startLineNumber" : 53,
        "startColumnNumber" : 8,
        "endLineNumber" : 69,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  NetworkChannel jdkChannel=jdkChannel(channel);\n  ChannelOption<Boolean> option=NioChannelOption.of(StandardSocketOptions.SO_REUSEADDR);\n  boolean value1=jdkChannel.getOption(StandardSocketOptions.SO_REUSEADDR);\n  boolean value2=channel.config().getOption(option);\n  assertEquals(value1,value2);\n  channel.config().setOption(option,!value2);\n  boolean value3=jdkChannel.getOption(StandardSocketOptions.SO_REUSEADDR);\n  boolean value4=channel.config().getOption(option);\n  assertEquals(value3,value4);\n  assertNotEquals(value1,value4);\n}\n  finally {\n  channel.close().syncUninterruptibly();\n  eventLoopGroup.shutdownGracefully();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 99,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 975,
        "startLineNumber" : 50,
        "startColumnNumber" : 58,
        "endLineNumber" : 70,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  EventLoopGroup eventLoopGroup=new MultithreadEventLoopGroup(1,NioHandler.newFactory());\n  T channel=newNioChannel(eventLoopGroup);\n  try {\n    NetworkChannel jdkChannel=jdkChannel(channel);\n    ChannelOption<Boolean> option=NioChannelOption.of(StandardSocketOptions.SO_REUSEADDR);\n    boolean value1=jdkChannel.getOption(StandardSocketOptions.SO_REUSEADDR);\n    boolean value2=channel.config().getOption(option);\n    assertEquals(value1,value2);\n    channel.config().setOption(option,!value2);\n    boolean value3=jdkChannel.getOption(StandardSocketOptions.SO_REUSEADDR);\n    boolean value4=channel.config().getOption(option);\n    assertEquals(value3,value4);\n    assertNotEquals(value1,value4);\n  }\n  finally {\n    channel.close().syncUninterruptibly();\n    eventLoopGroup.shutdownGracefully();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 120,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1040,
        "startLineNumber" : 49,
        "startColumnNumber" : 4,
        "endLineNumber" : 70,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testNioChannelOption() throws IOException {\n  EventLoopGroup eventLoopGroup=new MultithreadEventLoopGroup(1,NioHandler.newFactory());\n  T channel=newNioChannel(eventLoopGroup);\n  try {\n    NetworkChannel jdkChannel=jdkChannel(channel);\n    ChannelOption<Boolean> option=NioChannelOption.of(StandardSocketOptions.SO_REUSEADDR);\n    boolean value1=jdkChannel.getOption(StandardSocketOptions.SO_REUSEADDR);\n    boolean value2=channel.config().getOption(option);\n    assertEquals(value1,value2);\n    channel.config().setOption(option,!value2);\n    boolean value3=jdkChannel.getOption(StandardSocketOptions.SO_REUSEADDR);\n    boolean value4=channel.config().getOption(option);\n    assertEquals(value3,value4);\n    assertNotEquals(value1,value4);\n  }\n  finally {\n    channel.close().syncUninterruptibly();\n    eventLoopGroup.shutdownGracefully();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 128,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 64,
        "startColumnNumber" : 12,
        "endLineNumber" : 64,
        "endColumnNumber" : 41
      },
      "nodeContext" : "assertEquals(value3,value4);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 6,
    "startLineNumber" : 64,
    "startColumnNumber" : 25,
    "endLineNumber" : 64,
    "endColumnNumber" : 31
  } ],
  "layoutRelationDataList" : [ ]
}