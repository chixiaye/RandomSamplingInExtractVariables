{
  "id" : 343,
  "expression" : "Functions.getTypeParameter(clazz,getP(),0)",
  "projectName" : "jenkinsci@jenkins",
  "commitID" : "c44fa7f4cf769257844d562353a579a198ea517a",
  "filePath" : "/core/src/main/java/hudson/tools/PropertyDescriptor.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Functions.getTypeParameter(clazz,getP(),0)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 42,
      "startLineNumber" : 48,
      "startColumnNumber" : 40,
      "endLineNumber" : 48,
      "endColumnNumber" : 82
    },
    "astNodeNumber" : 7,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 48,
        "startColumnNumber" : 27,
        "endLineNumber" : 48,
        "endColumnNumber" : 82
      },
      "nodeContext" : "applicable=Functions.getTypeParameter(clazz,getP(),0)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 48,
        "startColumnNumber" : 8,
        "endLineNumber" : 48,
        "endColumnNumber" : 83
      },
      "nodeContext" : "Class<? extends T> applicable=Functions.getTypeParameter(clazz,getP(),0);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 150,
        "startLineNumber" : 47,
        "startColumnNumber" : 63,
        "endLineNumber" : 50,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Class<? extends T> applicable=Functions.getTypeParameter(clazz,getP(),0);\n  return applicable.isAssignableFrom(targetType);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 709,
        "startLineNumber" : 35,
        "startColumnNumber" : 4,
        "endLineNumber" : 50,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Returns true if this property type is applicable to the given target type. <p> The default implementation of this method checks if the given node type is assignable according to the parameterization, but subtypes can extend this to change this behavior.\n * @return true to indicate applicable, in which case the property will be displayed in the configuration screen of the target, for example.\n */\npublic boolean isApplicable(Class<? extends T> targetType){\n  Class<? extends T> applicable=Functions.getTypeParameter(clazz,getP(),0);\n  return applicable.isAssignableFrom(targetType);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 35,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 48,
        "startColumnNumber" : 8,
        "endLineNumber" : 48,
        "endColumnNumber" : 83
      },
      "nodeContext" : "Class<? extends T> applicable=Functions.getTypeParameter(clazz,getP(),0);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    },
    "tokenLength" : 5,
    "type" : "java.lang.Class"
  } ],
  "positionList" : [ {
    "charLength" : 42,
    "startLineNumber" : 48,
    "startColumnNumber" : 40,
    "endLineNumber" : 48,
    "endColumnNumber" : 82
  } ],
  "layoutRelationDataList" : [ ]
}