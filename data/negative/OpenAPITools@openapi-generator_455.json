{
  "id" : 455,
  "expression" : "operations",
  "projectName" : "OpenAPITools@openapi-generator",
  "commitID" : "0023f3b7ce3eef3d50514563589bfa3dd0cd9490",
  "filePath" : "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/CppRestbedServerCodegen.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "operations",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 287,
      "startColumnNumber" : 72,
      "endLineNumber" : 287,
      "endColumnNumber" : 82
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CastExpression,expression]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 287,
        "startColumnNumber" : 72,
        "endLineNumber" : 287,
        "endColumnNumber" : 99
      },
      "nodeContext" : "operations.get(\"operation\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 287,
        "startColumnNumber" : 47,
        "endLineNumber" : 287,
        "endColumnNumber" : 99
      },
      "nodeContext" : "(List<CodegenOperation>)operations.get(\"operation\")",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 287,
        "startColumnNumber" : 31,
        "endLineNumber" : 287,
        "endColumnNumber" : 99
      },
      "nodeContext" : "operationList=(List<CodegenOperation>)operations.get(\"operation\")",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 92,
        "startLineNumber" : 287,
        "startColumnNumber" : 8,
        "endLineNumber" : 287,
        "endColumnNumber" : 100
      },
      "nodeContext" : "List<CodegenOperation> operationList=(List<CodegenOperation>)operations.get(\"operation\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2497,
        "startLineNumber" : 285,
        "startColumnNumber" : 113,
        "endLineNumber" : 335,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,Object> operations=(Map<String,Object>)objs.get(\"operations\");\n  List<CodegenOperation> operationList=(List<CodegenOperation>)operations.get(\"operation\");\n  List<CodegenOperation> newOpList=new ArrayList<CodegenOperation>();\n  for (  CodegenOperation op : operationList) {\n    String path=op.path;\n    String[] items=path.split(\"/\",-1);\n    String resourceNameCamelCase=\"\";\n    op.path=\"\";\n    for (    String item : items) {\n      if (item.length() > 1) {\n        if (item.matches(\"^\\\\{(.*)\\\\}$\")) {\n          String tmpResourceName=item.substring(1,item.length() - 1);\n          resourceNameCamelCase+=Character.toUpperCase(tmpResourceName.charAt(0)) + tmpResourceName.substring(1);\n          item=item.substring(0,item.length() - 1);\n          item+=\": .*}\";\n        }\n else {\n          resourceNameCamelCase+=Character.toUpperCase(item.charAt(0)) + item.substring(1);\n        }\n      }\n else       if (item.length() == 1) {\n        resourceNameCamelCase+=Character.toUpperCase(item.charAt(0));\n      }\n      op.path+=item + \"/\";\n    }\n    op.vendorExtensions.put(\"x-codegen-resource-name\",resourceNameCamelCase);\n    boolean foundInNewList=false;\n    for (    CodegenOperation op1 : newOpList) {\n      if (!foundInNewList) {\n        if (op1.path.equals(op.path)) {\n          foundInNewList=true;\n          final String X_CODEGEN_OTHER_METHODS=\"x-codegen-other-methods\";\n          List<CodegenOperation> currentOtherMethodList=(List<CodegenOperation>)op1.vendorExtensions.get(X_CODEGEN_OTHER_METHODS);\n          if (currentOtherMethodList == null) {\n            currentOtherMethodList=new ArrayList<CodegenOperation>();\n          }\n          op.operationIdCamelCase=op1.operationIdCamelCase;\n          currentOtherMethodList.add(op);\n          op1.vendorExtensions.put(X_CODEGEN_OTHER_METHODS,currentOtherMethodList);\n        }\n      }\n    }\n    if (!foundInNewList) {\n      newOpList.add(op);\n    }\n  }\n  operations.put(\"operation\",newOpList);\n  return objs;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 318,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2655,
        "startLineNumber" : 283,
        "startColumnNumber" : 4,
        "endLineNumber" : 335,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@SuppressWarnings(\"unchecked\") @Override public Map<String,Object> postProcessOperationsWithModels(Map<String,Object> objs,List<Object> allModels){\n  Map<String,Object> operations=(Map<String,Object>)objs.get(\"operations\");\n  List<CodegenOperation> operationList=(List<CodegenOperation>)operations.get(\"operation\");\n  List<CodegenOperation> newOpList=new ArrayList<CodegenOperation>();\n  for (  CodegenOperation op : operationList) {\n    String path=op.path;\n    String[] items=path.split(\"/\",-1);\n    String resourceNameCamelCase=\"\";\n    op.path=\"\";\n    for (    String item : items) {\n      if (item.length() > 1) {\n        if (item.matches(\"^\\\\{(.*)\\\\}$\")) {\n          String tmpResourceName=item.substring(1,item.length() - 1);\n          resourceNameCamelCase+=Character.toUpperCase(tmpResourceName.charAt(0)) + tmpResourceName.substring(1);\n          item=item.substring(0,item.length() - 1);\n          item+=\": .*}\";\n        }\n else {\n          resourceNameCamelCase+=Character.toUpperCase(item.charAt(0)) + item.substring(1);\n        }\n      }\n else       if (item.length() == 1) {\n        resourceNameCamelCase+=Character.toUpperCase(item.charAt(0));\n      }\n      op.path+=item + \"/\";\n    }\n    op.vendorExtensions.put(\"x-codegen-resource-name\",resourceNameCamelCase);\n    boolean foundInNewList=false;\n    for (    CodegenOperation op1 : newOpList) {\n      if (!foundInNewList) {\n        if (op1.path.equals(op.path)) {\n          foundInNewList=true;\n          final String X_CODEGEN_OTHER_METHODS=\"x-codegen-other-methods\";\n          List<CodegenOperation> currentOtherMethodList=(List<CodegenOperation>)op1.vendorExtensions.get(X_CODEGEN_OTHER_METHODS);\n          if (currentOtherMethodList == null) {\n            currentOtherMethodList=new ArrayList<CodegenOperation>();\n          }\n          op.operationIdCamelCase=op1.operationIdCamelCase;\n          currentOtherMethodList.add(op);\n          op1.vendorExtensions.put(X_CODEGEN_OTHER_METHODS,currentOtherMethodList);\n        }\n      }\n    }\n    if (!foundInNewList) {\n      newOpList.add(op);\n    }\n  }\n  operations.put(\"operation\",newOpList);\n  return objs;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 349,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 92,
        "startLineNumber" : 287,
        "startColumnNumber" : 8,
        "endLineNumber" : 287,
        "endColumnNumber" : 100
      },
      "nodeContext" : "List<CodegenOperation> operationList=(List<CodegenOperation>)operations.get(\"operation\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.util.Map<java.lang.String,java.lang.Object>"
  }, {
    "nodeContext" : "operations",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 333,
      "startColumnNumber" : 8,
      "endLineNumber" : 333,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 333,
        "startColumnNumber" : 8,
        "endLineNumber" : 333,
        "endColumnNumber" : 46
      },
      "nodeContext" : "operations.put(\"operation\",newOpList)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 333,
        "startColumnNumber" : 8,
        "endLineNumber" : 333,
        "endColumnNumber" : 47
      },
      "nodeContext" : "operations.put(\"operation\",newOpList);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2497,
        "startLineNumber" : 285,
        "startColumnNumber" : 113,
        "endLineNumber" : 335,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,Object> operations=(Map<String,Object>)objs.get(\"operations\");\n  List<CodegenOperation> operationList=(List<CodegenOperation>)operations.get(\"operation\");\n  List<CodegenOperation> newOpList=new ArrayList<CodegenOperation>();\n  for (  CodegenOperation op : operationList) {\n    String path=op.path;\n    String[] items=path.split(\"/\",-1);\n    String resourceNameCamelCase=\"\";\n    op.path=\"\";\n    for (    String item : items) {\n      if (item.length() > 1) {\n        if (item.matches(\"^\\\\{(.*)\\\\}$\")) {\n          String tmpResourceName=item.substring(1,item.length() - 1);\n          resourceNameCamelCase+=Character.toUpperCase(tmpResourceName.charAt(0)) + tmpResourceName.substring(1);\n          item=item.substring(0,item.length() - 1);\n          item+=\": .*}\";\n        }\n else {\n          resourceNameCamelCase+=Character.toUpperCase(item.charAt(0)) + item.substring(1);\n        }\n      }\n else       if (item.length() == 1) {\n        resourceNameCamelCase+=Character.toUpperCase(item.charAt(0));\n      }\n      op.path+=item + \"/\";\n    }\n    op.vendorExtensions.put(\"x-codegen-resource-name\",resourceNameCamelCase);\n    boolean foundInNewList=false;\n    for (    CodegenOperation op1 : newOpList) {\n      if (!foundInNewList) {\n        if (op1.path.equals(op.path)) {\n          foundInNewList=true;\n          final String X_CODEGEN_OTHER_METHODS=\"x-codegen-other-methods\";\n          List<CodegenOperation> currentOtherMethodList=(List<CodegenOperation>)op1.vendorExtensions.get(X_CODEGEN_OTHER_METHODS);\n          if (currentOtherMethodList == null) {\n            currentOtherMethodList=new ArrayList<CodegenOperation>();\n          }\n          op.operationIdCamelCase=op1.operationIdCamelCase;\n          currentOtherMethodList.add(op);\n          op1.vendorExtensions.put(X_CODEGEN_OTHER_METHODS,currentOtherMethodList);\n        }\n      }\n    }\n    if (!foundInNewList) {\n      newOpList.add(op);\n    }\n  }\n  operations.put(\"operation\",newOpList);\n  return objs;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 318,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2655,
        "startLineNumber" : 283,
        "startColumnNumber" : 4,
        "endLineNumber" : 335,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@SuppressWarnings(\"unchecked\") @Override public Map<String,Object> postProcessOperationsWithModels(Map<String,Object> objs,List<Object> allModels){\n  Map<String,Object> operations=(Map<String,Object>)objs.get(\"operations\");\n  List<CodegenOperation> operationList=(List<CodegenOperation>)operations.get(\"operation\");\n  List<CodegenOperation> newOpList=new ArrayList<CodegenOperation>();\n  for (  CodegenOperation op : operationList) {\n    String path=op.path;\n    String[] items=path.split(\"/\",-1);\n    String resourceNameCamelCase=\"\";\n    op.path=\"\";\n    for (    String item : items) {\n      if (item.length() > 1) {\n        if (item.matches(\"^\\\\{(.*)\\\\}$\")) {\n          String tmpResourceName=item.substring(1,item.length() - 1);\n          resourceNameCamelCase+=Character.toUpperCase(tmpResourceName.charAt(0)) + tmpResourceName.substring(1);\n          item=item.substring(0,item.length() - 1);\n          item+=\": .*}\";\n        }\n else {\n          resourceNameCamelCase+=Character.toUpperCase(item.charAt(0)) + item.substring(1);\n        }\n      }\n else       if (item.length() == 1) {\n        resourceNameCamelCase+=Character.toUpperCase(item.charAt(0));\n      }\n      op.path+=item + \"/\";\n    }\n    op.vendorExtensions.put(\"x-codegen-resource-name\",resourceNameCamelCase);\n    boolean foundInNewList=false;\n    for (    CodegenOperation op1 : newOpList) {\n      if (!foundInNewList) {\n        if (op1.path.equals(op.path)) {\n          foundInNewList=true;\n          final String X_CODEGEN_OTHER_METHODS=\"x-codegen-other-methods\";\n          List<CodegenOperation> currentOtherMethodList=(List<CodegenOperation>)op1.vendorExtensions.get(X_CODEGEN_OTHER_METHODS);\n          if (currentOtherMethodList == null) {\n            currentOtherMethodList=new ArrayList<CodegenOperation>();\n          }\n          op.operationIdCamelCase=op1.operationIdCamelCase;\n          currentOtherMethodList.add(op);\n          op1.vendorExtensions.put(X_CODEGEN_OTHER_METHODS,currentOtherMethodList);\n        }\n      }\n    }\n    if (!foundInNewList) {\n      newOpList.add(op);\n    }\n  }\n  operations.put(\"operation\",newOpList);\n  return objs;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 349,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 333,
        "startColumnNumber" : 8,
        "endLineNumber" : 333,
        "endColumnNumber" : 47
      },
      "nodeContext" : "operations.put(\"operation\",newOpList);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.util.Map<java.lang.String,java.lang.Object>"
  } ],
  "positionList" : [ {
    "charLength" : 10,
    "startLineNumber" : 287,
    "startColumnNumber" : 72,
    "endLineNumber" : 287,
    "endColumnNumber" : 82
  }, {
    "charLength" : 10,
    "startLineNumber" : 333,
    "startColumnNumber" : 8,
    "endLineNumber" : 333,
    "endColumnNumber" : 18
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}