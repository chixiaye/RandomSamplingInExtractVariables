{
  "id" : 338,
  "expression" : "0",
  "projectName" : "apache@flink",
  "commitID" : "f8cb19e70ca7da6423dfb01b97e05c4d520c9fde",
  "filePath" : "/flink-table/flink-table-planner/src/main/java/org/apache/flink/table/planner/functions/casting/BooleanToNumericCastRule.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "0",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 87,
      "startColumnNumber" : 54,
      "endLineNumber" : 87,
      "endColumnNumber" : 55
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 8,
        "startLineNumber" : 87,
        "startColumnNumber" : 47,
        "endLineNumber" : 87,
        "endColumnNumber" : 55
      },
      "nodeContext" : "(byte)0",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 87,
        "startColumnNumber" : 23,
        "endLineNumber" : 87,
        "endColumnNumber" : 56
      },
      "nodeContext" : "primitiveLiteralForType((byte)0)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 87,
        "startColumnNumber" : 16,
        "endLineNumber" : 87,
        "endColumnNumber" : 57
      },
      "nodeContext" : "return primitiveLiteralForType((byte)0);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 736,
        "startLineNumber" : 81,
        "startColumnNumber" : 8,
        "endLineNumber" : 98,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (target.getTypeRoot()) {\ncase DECIMAL:  DecimalType decimalType=(DecimalType)target;\nreturn staticCall(DECIMAL_ZERO(),decimalType.getPrecision(),decimalType.getScale());\ncase TINYINT:return primitiveLiteralForType((byte)0);\ncase SMALLINT:return primitiveLiteralForType((short)0);\ncase INTEGER:return primitiveLiteralForType(0);\ncase BIGINT:return primitiveLiteralForType(0L);\ncase FLOAT:return primitiveLiteralForType(0f);\ncase DOUBLE:return primitiveLiteralForType(0d);\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 66,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 836,
        "startLineNumber" : 80,
        "startColumnNumber" : 50,
        "endLineNumber" : 100,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\nswitch (target.getTypeRoot()) {\ncase DECIMAL:    DecimalType decimalType=(DecimalType)target;\n  return staticCall(DECIMAL_ZERO(),decimalType.getPrecision(),decimalType.getScale());\ncase TINYINT:return primitiveLiteralForType((byte)0);\ncase SMALLINT:return primitiveLiteralForType((short)0);\ncase INTEGER:return primitiveLiteralForType(0);\ncase BIGINT:return primitiveLiteralForType(0L);\ncase FLOAT:return primitiveLiteralForType(0f);\ncase DOUBLE:return primitiveLiteralForType(0d);\n}\nthrow new IllegalArgumentException(\"This is a bug. Please file an issue.\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 72,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 882,
        "startLineNumber" : 80,
        "startColumnNumber" : 4,
        "endLineNumber" : 100,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private String falseValue(LogicalType target){\nswitch (target.getTypeRoot()) {\ncase DECIMAL:    DecimalType decimalType=(DecimalType)target;\n  return staticCall(DECIMAL_ZERO(),decimalType.getPrecision(),decimalType.getScale());\ncase TINYINT:return primitiveLiteralForType((byte)0);\ncase SMALLINT:return primitiveLiteralForType((short)0);\ncase INTEGER:return primitiveLiteralForType(0);\ncase BIGINT:return primitiveLiteralForType(0L);\ncase FLOAT:return primitiveLiteralForType(0f);\ncase DOUBLE:return primitiveLiteralForType(0d);\n}\nthrow new IllegalArgumentException(\"This is a bug. Please file an issue.\");\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 81,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 87,
        "startColumnNumber" : 16,
        "endLineNumber" : 87,
        "endColumnNumber" : 57
      },
      "nodeContext" : "return primitiveLiteralForType((byte)0);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "0",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 89,
      "startColumnNumber" : 55,
      "endLineNumber" : 89,
      "endColumnNumber" : 56
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 89,
        "startColumnNumber" : 47,
        "endLineNumber" : 89,
        "endColumnNumber" : 56
      },
      "nodeContext" : "(short)0",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 89,
        "startColumnNumber" : 23,
        "endLineNumber" : 89,
        "endColumnNumber" : 57
      },
      "nodeContext" : "primitiveLiteralForType((short)0)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 89,
        "startColumnNumber" : 16,
        "endLineNumber" : 89,
        "endColumnNumber" : 58
      },
      "nodeContext" : "return primitiveLiteralForType((short)0);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 736,
        "startLineNumber" : 81,
        "startColumnNumber" : 8,
        "endLineNumber" : 98,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (target.getTypeRoot()) {\ncase DECIMAL:  DecimalType decimalType=(DecimalType)target;\nreturn staticCall(DECIMAL_ZERO(),decimalType.getPrecision(),decimalType.getScale());\ncase TINYINT:return primitiveLiteralForType((byte)0);\ncase SMALLINT:return primitiveLiteralForType((short)0);\ncase INTEGER:return primitiveLiteralForType(0);\ncase BIGINT:return primitiveLiteralForType(0L);\ncase FLOAT:return primitiveLiteralForType(0f);\ncase DOUBLE:return primitiveLiteralForType(0d);\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 66,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 836,
        "startLineNumber" : 80,
        "startColumnNumber" : 50,
        "endLineNumber" : 100,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\nswitch (target.getTypeRoot()) {\ncase DECIMAL:    DecimalType decimalType=(DecimalType)target;\n  return staticCall(DECIMAL_ZERO(),decimalType.getPrecision(),decimalType.getScale());\ncase TINYINT:return primitiveLiteralForType((byte)0);\ncase SMALLINT:return primitiveLiteralForType((short)0);\ncase INTEGER:return primitiveLiteralForType(0);\ncase BIGINT:return primitiveLiteralForType(0L);\ncase FLOAT:return primitiveLiteralForType(0f);\ncase DOUBLE:return primitiveLiteralForType(0d);\n}\nthrow new IllegalArgumentException(\"This is a bug. Please file an issue.\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 72,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 882,
        "startLineNumber" : 80,
        "startColumnNumber" : 4,
        "endLineNumber" : 100,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private String falseValue(LogicalType target){\nswitch (target.getTypeRoot()) {\ncase DECIMAL:    DecimalType decimalType=(DecimalType)target;\n  return staticCall(DECIMAL_ZERO(),decimalType.getPrecision(),decimalType.getScale());\ncase TINYINT:return primitiveLiteralForType((byte)0);\ncase SMALLINT:return primitiveLiteralForType((short)0);\ncase INTEGER:return primitiveLiteralForType(0);\ncase BIGINT:return primitiveLiteralForType(0L);\ncase FLOAT:return primitiveLiteralForType(0f);\ncase DOUBLE:return primitiveLiteralForType(0d);\n}\nthrow new IllegalArgumentException(\"This is a bug. Please file an issue.\");\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 81,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 89,
        "startColumnNumber" : 16,
        "endLineNumber" : 89,
        "endColumnNumber" : 58
      },
      "nodeContext" : "return primitiveLiteralForType((short)0);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "0",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 91,
      "startColumnNumber" : 47,
      "endLineNumber" : 91,
      "endColumnNumber" : 48
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 91,
        "startColumnNumber" : 23,
        "endLineNumber" : 91,
        "endColumnNumber" : 49
      },
      "nodeContext" : "primitiveLiteralForType(0)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 91,
        "startColumnNumber" : 16,
        "endLineNumber" : 91,
        "endColumnNumber" : 50
      },
      "nodeContext" : "return primitiveLiteralForType(0);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 736,
        "startLineNumber" : 81,
        "startColumnNumber" : 8,
        "endLineNumber" : 98,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (target.getTypeRoot()) {\ncase DECIMAL:  DecimalType decimalType=(DecimalType)target;\nreturn staticCall(DECIMAL_ZERO(),decimalType.getPrecision(),decimalType.getScale());\ncase TINYINT:return primitiveLiteralForType((byte)0);\ncase SMALLINT:return primitiveLiteralForType((short)0);\ncase INTEGER:return primitiveLiteralForType(0);\ncase BIGINT:return primitiveLiteralForType(0L);\ncase FLOAT:return primitiveLiteralForType(0f);\ncase DOUBLE:return primitiveLiteralForType(0d);\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 66,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 836,
        "startLineNumber" : 80,
        "startColumnNumber" : 50,
        "endLineNumber" : 100,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\nswitch (target.getTypeRoot()) {\ncase DECIMAL:    DecimalType decimalType=(DecimalType)target;\n  return staticCall(DECIMAL_ZERO(),decimalType.getPrecision(),decimalType.getScale());\ncase TINYINT:return primitiveLiteralForType((byte)0);\ncase SMALLINT:return primitiveLiteralForType((short)0);\ncase INTEGER:return primitiveLiteralForType(0);\ncase BIGINT:return primitiveLiteralForType(0L);\ncase FLOAT:return primitiveLiteralForType(0f);\ncase DOUBLE:return primitiveLiteralForType(0d);\n}\nthrow new IllegalArgumentException(\"This is a bug. Please file an issue.\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 72,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 882,
        "startLineNumber" : 80,
        "startColumnNumber" : 4,
        "endLineNumber" : 100,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private String falseValue(LogicalType target){\nswitch (target.getTypeRoot()) {\ncase DECIMAL:    DecimalType decimalType=(DecimalType)target;\n  return staticCall(DECIMAL_ZERO(),decimalType.getPrecision(),decimalType.getScale());\ncase TINYINT:return primitiveLiteralForType((byte)0);\ncase SMALLINT:return primitiveLiteralForType((short)0);\ncase INTEGER:return primitiveLiteralForType(0);\ncase BIGINT:return primitiveLiteralForType(0L);\ncase FLOAT:return primitiveLiteralForType(0f);\ncase DOUBLE:return primitiveLiteralForType(0d);\n}\nthrow new IllegalArgumentException(\"This is a bug. Please file an issue.\");\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 81,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 91,
        "startColumnNumber" : 16,
        "endLineNumber" : 91,
        "endColumnNumber" : 50
      },
      "nodeContext" : "return primitiveLiteralForType(0);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 87,
    "startColumnNumber" : 54,
    "endLineNumber" : 87,
    "endColumnNumber" : 55
  }, {
    "charLength" : 1,
    "startLineNumber" : 89,
    "startColumnNumber" : 55,
    "endLineNumber" : 89,
    "endColumnNumber" : 56
  }, {
    "charLength" : 1,
    "startLineNumber" : 91,
    "startColumnNumber" : 47,
    "endLineNumber" : 91,
    "endColumnNumber" : 48
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  } ]
}