{
  "id" : 123,
  "expression" : "method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")",
  "projectName" : "alibaba@fastjson",
  "commitID" : "aaaa4d567086879de49e13fb6d002efaf5bc85ad",
  "filePath" : "src/main/java/com/alibaba/fastjson/util/TypeUtils.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 124,
      "startLineNumber" : 900,
      "startColumnNumber" : 16,
      "endLineNumber" : 901,
      "endColumnNumber" : 83
    },
    "astNodeNumber" : 15,
    "astHeight" : 5,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 173,
        "startLineNumber" : 900,
        "startColumnNumber" : 12,
        "endLineNumber" : 903,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n  continue;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 5811,
        "startLineNumber" : 881,
        "startColumnNumber" : 49,
        "endLineNumber" : 1044,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String methodName=method.getName();\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  if (method.getReturnType().equals(Void.TYPE)) {\n    continue;\n  }\n  if (method.getParameterTypes().length != 0) {\n    continue;\n  }\n  if (method.getReturnType() == ClassLoader.class) {\n    continue;\n  }\n  if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n    continue;\n  }\n  JSONField annotation=method.getAnnotation(JSONField.class);\n  if (annotation == null) {\n    annotation=getSupperMethodAnnotation(clazz,method);\n  }\n  if (annotation != null) {\n    if (!annotation.serialize()) {\n      continue;\n    }\n    if (annotation.name().length() != 0) {\n      String propertyName=annotation.name();\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n      continue;\n    }\n  }\n  if (methodName.startsWith(\"get\")) {\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (methodName.equals(\"getClass\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else {\n      continue;\n    }\n    boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n    if (ignore) {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field == null) {\n      field=ParserConfig.getField(clazz,methodName.substring(3));\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n  if (methodName.startsWith(\"is\")) {\n    if (methodName.length() < 3) {\n      continue;\n    }\n    char c2=methodName.charAt(2);\n    String propertyName;\n    if (Character.isUpperCase(c2)) {\n      propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n    }\n else     if (c2 == '_') {\n      propertyName=methodName.substring(3);\n    }\n else     if (c2 == 'f') {\n      propertyName=methodName.substring(2);\n    }\n else {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 532,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5852,
        "startLineNumber" : 881,
        "startColumnNumber" : 8,
        "endLineNumber" : 1044,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Method method : clazz.getMethods()) {\n  String methodName=method.getName();\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  if (method.getReturnType().equals(Void.TYPE)) {\n    continue;\n  }\n  if (method.getParameterTypes().length != 0) {\n    continue;\n  }\n  if (method.getReturnType() == ClassLoader.class) {\n    continue;\n  }\n  if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n    continue;\n  }\n  JSONField annotation=method.getAnnotation(JSONField.class);\n  if (annotation == null) {\n    annotation=getSupperMethodAnnotation(clazz,method);\n  }\n  if (annotation != null) {\n    if (!annotation.serialize()) {\n      continue;\n    }\n    if (annotation.name().length() != 0) {\n      String propertyName=annotation.name();\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n      continue;\n    }\n  }\n  if (methodName.startsWith(\"get\")) {\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (methodName.equals(\"getClass\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else {\n      continue;\n    }\n    boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n    if (ignore) {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field == null) {\n      field=ParserConfig.getField(clazz,methodName.substring(3));\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n  if (methodName.startsWith(\"is\")) {\n    if (methodName.length() < 3) {\n      continue;\n    }\n    char c2=methodName.charAt(2);\n    String propertyName;\n    if (Character.isUpperCase(c2)) {\n      propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n    }\n else     if (c2 == '_') {\n      propertyName=methodName.substring(3);\n    }\n else     if (c2 == 'f') {\n      propertyName=methodName.substring(2);\n    }\n else {\n      continue;\n    }\n    Field field=ParserConfig.getField(clazz,propertyName);\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        if (!fieldAnnotation.serialize()) {\n          continue;\n        }\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          if (aliasMap != null) {\n            propertyName=aliasMap.get(propertyName);\n            if (propertyName == null) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 540,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8137,
        "startLineNumber" : 878,
        "startColumnNumber" : 111,
        "endLineNumber" : 1114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,FieldInfo> fieldInfoMap=new LinkedHashMap<String,FieldInfo>();\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (method.getReturnType().equals(Void.TYPE)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 0) {\n      continue;\n    }\n    if (method.getReturnType() == ClassLoader.class) {\n      continue;\n    }\n    if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.serialize()) {\n        continue;\n      }\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n        fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n        continue;\n      }\n    }\n    if (methodName.startsWith(\"get\")) {\n      if (methodName.length() < 4) {\n        continue;\n      }\n      if (methodName.equals(\"getClass\")) {\n        continue;\n      }\n      char c3=methodName.charAt(3);\n      String propertyName;\n      if (Character.isUpperCase(c3)) {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n else       if (c3 == '_') {\n        propertyName=methodName.substring(4);\n      }\n else       if (c3 == 'f') {\n        propertyName=methodName.substring(3);\n      }\n else {\n        continue;\n      }\n      boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n      if (ignore) {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field == null) {\n        field=ParserConfig.getField(clazz,methodName.substring(3));\n      }\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n    if (methodName.startsWith(\"is\")) {\n      if (methodName.length() < 3) {\n        continue;\n      }\n      char c2=methodName.charAt(2);\n      String propertyName;\n      if (Character.isUpperCase(c2)) {\n        propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n      }\n else       if (c2 == '_') {\n        propertyName=methodName.substring(3);\n      }\n else       if (c2 == 'f') {\n        propertyName=methodName.substring(2);\n      }\n else {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    String propertyName=field.getName();\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    if (!fieldInfoMap.containsKey(propertyName)) {\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field));\n    }\n  }\n  List<FieldInfo> fieldInfoList=new ArrayList<FieldInfo>();\n  boolean containsAll=false;\n  String[] orders=null;\n  JSONType annotation=clazz.getAnnotation(JSONType.class);\n  if (annotation != null) {\n    orders=annotation.orders();\n    if (orders != null && orders.length == fieldInfoMap.size()) {\n      containsAll=true;\n      for (      String item : orders) {\n        if (!fieldInfoMap.containsKey(item)) {\n          containsAll=false;\n          break;\n        }\n      }\n    }\n else {\n      containsAll=false;\n    }\n  }\n  if (containsAll) {\n    for (    String item : orders) {\n      FieldInfo fieldInfo=fieldInfoMap.get(item);\n      fieldInfoList.add(fieldInfo);\n    }\n  }\n else {\n    for (    FieldInfo fieldInfo : fieldInfoMap.values()) {\n      fieldInfoList.add(fieldInfo);\n    }\n    if (sorted) {\n      Collections.sort(fieldInfoList);\n    }\n  }\n  return fieldInfoList;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 798,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8244,
        "startLineNumber" : 878,
        "startColumnNumber" : 4,
        "endLineNumber" : 1114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static List<FieldInfo> computeGetters(Class<?> clazz,Map<String,String> aliasMap,boolean sorted){\n  Map<String,FieldInfo> fieldInfoMap=new LinkedHashMap<String,FieldInfo>();\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (method.getReturnType().equals(Void.TYPE)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 0) {\n      continue;\n    }\n    if (method.getReturnType() == ClassLoader.class) {\n      continue;\n    }\n    if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.serialize()) {\n        continue;\n      }\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        if (aliasMap != null) {\n          propertyName=aliasMap.get(propertyName);\n          if (propertyName == null) {\n            continue;\n          }\n        }\n        fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,null));\n        continue;\n      }\n    }\n    if (methodName.startsWith(\"get\")) {\n      if (methodName.length() < 4) {\n        continue;\n      }\n      if (methodName.equals(\"getClass\")) {\n        continue;\n      }\n      char c3=methodName.charAt(3);\n      String propertyName;\n      if (Character.isUpperCase(c3)) {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n else       if (c3 == '_') {\n        propertyName=methodName.substring(4);\n      }\n else       if (c3 == 'f') {\n        propertyName=methodName.substring(3);\n      }\n else {\n        continue;\n      }\n      boolean ignore=isJSONTypeIgnore(clazz,propertyName);\n      if (ignore) {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field == null) {\n        field=ParserConfig.getField(clazz,methodName.substring(3));\n      }\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n    if (methodName.startsWith(\"is\")) {\n      if (methodName.length() < 3) {\n        continue;\n      }\n      char c2=methodName.charAt(2);\n      String propertyName;\n      if (Character.isUpperCase(c2)) {\n        propertyName=Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);\n      }\n else       if (c2 == '_') {\n        propertyName=methodName.substring(3);\n      }\n else       if (c2 == 'f') {\n        propertyName=methodName.substring(2);\n      }\n else {\n        continue;\n      }\n      Field field=ParserConfig.getField(clazz,propertyName);\n      if (field != null) {\n        JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n        if (fieldAnnotation != null) {\n          if (!fieldAnnotation.serialize()) {\n            continue;\n          }\n          if (fieldAnnotation.name().length() != 0) {\n            propertyName=fieldAnnotation.name();\n            if (aliasMap != null) {\n              propertyName=aliasMap.get(propertyName);\n              if (propertyName == null) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n      if (aliasMap != null) {\n        propertyName=aliasMap.get(propertyName);\n        if (propertyName == null) {\n          continue;\n        }\n      }\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,method,field));\n    }\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    String propertyName=field.getName();\n    if (fieldAnnotation != null) {\n      if (!fieldAnnotation.serialize()) {\n        continue;\n      }\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    if (aliasMap != null) {\n      propertyName=aliasMap.get(propertyName);\n      if (propertyName == null) {\n        continue;\n      }\n    }\n    if (!fieldInfoMap.containsKey(propertyName)) {\n      fieldInfoMap.put(propertyName,new FieldInfo(propertyName,null,field));\n    }\n  }\n  List<FieldInfo> fieldInfoList=new ArrayList<FieldInfo>();\n  boolean containsAll=false;\n  String[] orders=null;\n  JSONType annotation=clazz.getAnnotation(JSONType.class);\n  if (annotation != null) {\n    orders=annotation.orders();\n    if (orders != null && orders.length == fieldInfoMap.size()) {\n      containsAll=true;\n      for (      String item : orders) {\n        if (!fieldInfoMap.containsKey(item)) {\n          containsAll=false;\n          break;\n        }\n      }\n    }\n else {\n      containsAll=false;\n    }\n  }\n  if (containsAll) {\n    for (    String item : orders) {\n      FieldInfo fieldInfo=fieldInfoMap.get(item);\n      fieldInfoList.add(fieldInfo);\n    }\n  }\n else {\n    for (    FieldInfo fieldInfo : fieldInfoMap.values()) {\n      fieldInfoList.add(fieldInfo);\n    }\n    if (sorted) {\n      Collections.sort(fieldInfoList);\n    }\n  }\n  return fieldInfoList;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 825,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 173,
        "startLineNumber" : 900,
        "startColumnNumber" : 12,
        "endLineNumber" : 903,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (method.getName().equals(\"getMetaClass\") && method.getReturnType().getName().equals(\"groovy.lang.MetaClass\")) {\n  continue;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    },
    "tokenLength" : 12,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 124,
    "startLineNumber" : 900,
    "startColumnNumber" : 16,
    "endLineNumber" : 901,
    "endColumnNumber" : 83
  } ],
  "layoutRelationDataList" : [ ]
}