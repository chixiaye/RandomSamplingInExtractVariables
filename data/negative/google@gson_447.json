{
  "id" : 447,
  "expression" : "iterator",
  "projectName" : "google@gson",
  "commitID" : "c3d0f200b352f411b9ebe45c3bf49d4328b2c51f",
  "filePath" : "/gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "iterator",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 583,
      "startColumnNumber" : 6,
      "endLineNumber" : 583,
      "endColumnNumber" : 14
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 583,
        "startColumnNumber" : 6,
        "endLineNumber" : 583,
        "endColumnNumber" : 26
      },
      "nodeContext" : "iterator.reset(root)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 583,
        "startColumnNumber" : 6,
        "endLineNumber" : 583,
        "endColumnNumber" : 27
      },
      "nodeContext" : "iterator.reset(root);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 971,
        "startLineNumber" : 576,
        "startColumnNumber" : 42,
        "endLineNumber" : 609,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Node<K,V> root=oldTable[i];\n  if (root == null) {\n    continue;\n  }\n  iterator.reset(root);\n  int leftSize=0;\n  int rightSize=0;\n  for (Node<K,V> node; (node=iterator.next()) != null; ) {\n    if ((node.hash & oldCapacity) == 0) {\n      leftSize++;\n    }\n else {\n      rightSize++;\n    }\n  }\n  leftBuilder.reset(leftSize);\n  rightBuilder.reset(rightSize);\n  iterator.reset(root);\n  for (Node<K,V> node; (node=iterator.next()) != null; ) {\n    if ((node.hash & oldCapacity) == 0) {\n      leftBuilder.add(node);\n    }\n else {\n      rightBuilder.add(node);\n    }\n  }\n  newTable[i]=leftSize > 0 ? leftBuilder.root() : null;\n  newTable[i + oldCapacity]=rightSize > 0 ? rightBuilder.root() : null;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 156,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1009,
        "startLineNumber" : 576,
        "startColumnNumber" : 4,
        "endLineNumber" : 609,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < oldCapacity; i++) {\n  Node<K,V> root=oldTable[i];\n  if (root == null) {\n    continue;\n  }\n  iterator.reset(root);\n  int leftSize=0;\n  int rightSize=0;\n  for (Node<K,V> node; (node=iterator.next()) != null; ) {\n    if ((node.hash & oldCapacity) == 0) {\n      leftSize++;\n    }\n else {\n      rightSize++;\n    }\n  }\n  leftBuilder.reset(leftSize);\n  rightBuilder.reset(rightSize);\n  iterator.reset(root);\n  for (Node<K,V> node; (node=iterator.next()) != null; ) {\n    if ((node.hash & oldCapacity) == 0) {\n      leftBuilder.add(node);\n    }\n else {\n      rightBuilder.add(node);\n    }\n  }\n  newTable[i]=leftSize > 0 ? leftBuilder.root() : null;\n  newTable[i + oldCapacity]=rightSize > 0 ? rightBuilder.root() : null;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 167,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1490,
        "startLineNumber" : 566,
        "startColumnNumber" : 67,
        "endLineNumber" : 611,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int oldCapacity=oldTable.length;\n  @SuppressWarnings(\"unchecked\") Node<K,V>[] newTable=new Node[oldCapacity * 2];\n  AvlIterator<K,V> iterator=new AvlIterator<K,V>();\n  AvlBuilder<K,V> leftBuilder=new AvlBuilder<K,V>();\n  AvlBuilder<K,V> rightBuilder=new AvlBuilder<K,V>();\n  for (int i=0; i < oldCapacity; i++) {\n    Node<K,V> root=oldTable[i];\n    if (root == null) {\n      continue;\n    }\n    iterator.reset(root);\n    int leftSize=0;\n    int rightSize=0;\n    for (Node<K,V> node; (node=iterator.next()) != null; ) {\n      if ((node.hash & oldCapacity) == 0) {\n        leftSize++;\n      }\n else {\n        rightSize++;\n      }\n    }\n    leftBuilder.reset(leftSize);\n    rightBuilder.reset(rightSize);\n    iterator.reset(root);\n    for (Node<K,V> node; (node=iterator.next()) != null; ) {\n      if ((node.hash & oldCapacity) == 0) {\n        leftBuilder.add(node);\n      }\n else {\n        rightBuilder.add(node);\n      }\n    }\n    newTable[i]=leftSize > 0 ? leftBuilder.root() : null;\n    newTable[i + oldCapacity]=rightSize > 0 ? rightBuilder.root() : null;\n  }\n  return newTable;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 254,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1722,
        "startLineNumber" : 562,
        "startColumnNumber" : 2,
        "endLineNumber" : 611,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Returns a new array containing the same nodes as  {@code oldTable}, but with twice as many trees, each of (approximately) half the previous size.\n */\nstatic <K,V>Node<K,V>[] doubleCapacity(Node<K,V>[] oldTable){\n  int oldCapacity=oldTable.length;\n  @SuppressWarnings(\"unchecked\") Node<K,V>[] newTable=new Node[oldCapacity * 2];\n  AvlIterator<K,V> iterator=new AvlIterator<K,V>();\n  AvlBuilder<K,V> leftBuilder=new AvlBuilder<K,V>();\n  AvlBuilder<K,V> rightBuilder=new AvlBuilder<K,V>();\n  for (int i=0; i < oldCapacity; i++) {\n    Node<K,V> root=oldTable[i];\n    if (root == null) {\n      continue;\n    }\n    iterator.reset(root);\n    int leftSize=0;\n    int rightSize=0;\n    for (Node<K,V> node; (node=iterator.next()) != null; ) {\n      if ((node.hash & oldCapacity) == 0) {\n        leftSize++;\n      }\n else {\n        rightSize++;\n      }\n    }\n    leftBuilder.reset(leftSize);\n    rightBuilder.reset(rightSize);\n    iterator.reset(root);\n    for (Node<K,V> node; (node=iterator.next()) != null; ) {\n      if ((node.hash & oldCapacity) == 0) {\n        leftBuilder.add(node);\n      }\n else {\n        rightBuilder.add(node);\n      }\n    }\n    newTable[i]=leftSize > 0 ? leftBuilder.root() : null;\n    newTable[i + oldCapacity]=rightSize > 0 ? rightBuilder.root() : null;\n  }\n  return newTable;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 282,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 583,
        "startColumnNumber" : 6,
        "endLineNumber" : 583,
        "endColumnNumber" : 27
      },
      "nodeContext" : "iterator.reset(root);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.google.gson.internal.LinkedHashTreeMap.AvlIterator<K,V>"
  }, {
    "nodeContext" : "iterator",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 586,
      "startColumnNumber" : 36,
      "endLineNumber" : 586,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 586,
        "startColumnNumber" : 36,
        "endLineNumber" : 586,
        "endColumnNumber" : 51
      },
      "nodeContext" : "iterator.next()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 586,
        "startColumnNumber" : 29,
        "endLineNumber" : 586,
        "endColumnNumber" : 51
      },
      "nodeContext" : "node=iterator.next()",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 586,
        "startColumnNumber" : 28,
        "endLineNumber" : 586,
        "endColumnNumber" : 52
      },
      "nodeContext" : "(node=iterator.next())",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 586,
        "startColumnNumber" : 28,
        "endLineNumber" : 586,
        "endColumnNumber" : 60
      },
      "nodeContext" : "(node=iterator.next()) != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 185,
        "startLineNumber" : 586,
        "startColumnNumber" : 6,
        "endLineNumber" : 592,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (Node<K,V> node; (node=iterator.next()) != null; ) {\n  if ((node.hash & oldCapacity) == 0) {\n    leftSize++;\n  }\n else {\n    rightSize++;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 37,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 971,
        "startLineNumber" : 576,
        "startColumnNumber" : 42,
        "endLineNumber" : 609,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Node<K,V> root=oldTable[i];\n  if (root == null) {\n    continue;\n  }\n  iterator.reset(root);\n  int leftSize=0;\n  int rightSize=0;\n  for (Node<K,V> node; (node=iterator.next()) != null; ) {\n    if ((node.hash & oldCapacity) == 0) {\n      leftSize++;\n    }\n else {\n      rightSize++;\n    }\n  }\n  leftBuilder.reset(leftSize);\n  rightBuilder.reset(rightSize);\n  iterator.reset(root);\n  for (Node<K,V> node; (node=iterator.next()) != null; ) {\n    if ((node.hash & oldCapacity) == 0) {\n      leftBuilder.add(node);\n    }\n else {\n      rightBuilder.add(node);\n    }\n  }\n  newTable[i]=leftSize > 0 ? leftBuilder.root() : null;\n  newTable[i + oldCapacity]=rightSize > 0 ? rightBuilder.root() : null;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 156,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1009,
        "startLineNumber" : 576,
        "startColumnNumber" : 4,
        "endLineNumber" : 609,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < oldCapacity; i++) {\n  Node<K,V> root=oldTable[i];\n  if (root == null) {\n    continue;\n  }\n  iterator.reset(root);\n  int leftSize=0;\n  int rightSize=0;\n  for (Node<K,V> node; (node=iterator.next()) != null; ) {\n    if ((node.hash & oldCapacity) == 0) {\n      leftSize++;\n    }\n else {\n      rightSize++;\n    }\n  }\n  leftBuilder.reset(leftSize);\n  rightBuilder.reset(rightSize);\n  iterator.reset(root);\n  for (Node<K,V> node; (node=iterator.next()) != null; ) {\n    if ((node.hash & oldCapacity) == 0) {\n      leftBuilder.add(node);\n    }\n else {\n      rightBuilder.add(node);\n    }\n  }\n  newTable[i]=leftSize > 0 ? leftBuilder.root() : null;\n  newTable[i + oldCapacity]=rightSize > 0 ? rightBuilder.root() : null;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 167,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1490,
        "startLineNumber" : 566,
        "startColumnNumber" : 67,
        "endLineNumber" : 611,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int oldCapacity=oldTable.length;\n  @SuppressWarnings(\"unchecked\") Node<K,V>[] newTable=new Node[oldCapacity * 2];\n  AvlIterator<K,V> iterator=new AvlIterator<K,V>();\n  AvlBuilder<K,V> leftBuilder=new AvlBuilder<K,V>();\n  AvlBuilder<K,V> rightBuilder=new AvlBuilder<K,V>();\n  for (int i=0; i < oldCapacity; i++) {\n    Node<K,V> root=oldTable[i];\n    if (root == null) {\n      continue;\n    }\n    iterator.reset(root);\n    int leftSize=0;\n    int rightSize=0;\n    for (Node<K,V> node; (node=iterator.next()) != null; ) {\n      if ((node.hash & oldCapacity) == 0) {\n        leftSize++;\n      }\n else {\n        rightSize++;\n      }\n    }\n    leftBuilder.reset(leftSize);\n    rightBuilder.reset(rightSize);\n    iterator.reset(root);\n    for (Node<K,V> node; (node=iterator.next()) != null; ) {\n      if ((node.hash & oldCapacity) == 0) {\n        leftBuilder.add(node);\n      }\n else {\n        rightBuilder.add(node);\n      }\n    }\n    newTable[i]=leftSize > 0 ? leftBuilder.root() : null;\n    newTable[i + oldCapacity]=rightSize > 0 ? rightBuilder.root() : null;\n  }\n  return newTable;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 254,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1722,
        "startLineNumber" : 562,
        "startColumnNumber" : 2,
        "endLineNumber" : 611,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Returns a new array containing the same nodes as  {@code oldTable}, but with twice as many trees, each of (approximately) half the previous size.\n */\nstatic <K,V>Node<K,V>[] doubleCapacity(Node<K,V>[] oldTable){\n  int oldCapacity=oldTable.length;\n  @SuppressWarnings(\"unchecked\") Node<K,V>[] newTable=new Node[oldCapacity * 2];\n  AvlIterator<K,V> iterator=new AvlIterator<K,V>();\n  AvlBuilder<K,V> leftBuilder=new AvlBuilder<K,V>();\n  AvlBuilder<K,V> rightBuilder=new AvlBuilder<K,V>();\n  for (int i=0; i < oldCapacity; i++) {\n    Node<K,V> root=oldTable[i];\n    if (root == null) {\n      continue;\n    }\n    iterator.reset(root);\n    int leftSize=0;\n    int rightSize=0;\n    for (Node<K,V> node; (node=iterator.next()) != null; ) {\n      if ((node.hash & oldCapacity) == 0) {\n        leftSize++;\n      }\n else {\n        rightSize++;\n      }\n    }\n    leftBuilder.reset(leftSize);\n    rightBuilder.reset(rightSize);\n    iterator.reset(root);\n    for (Node<K,V> node; (node=iterator.next()) != null; ) {\n      if ((node.hash & oldCapacity) == 0) {\n        leftBuilder.add(node);\n      }\n else {\n        rightBuilder.add(node);\n      }\n    }\n    newTable[i]=leftSize > 0 ? leftBuilder.root() : null;\n    newTable[i + oldCapacity]=rightSize > 0 ? rightBuilder.root() : null;\n  }\n  return newTable;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 282,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 586,
        "startColumnNumber" : 28,
        "endLineNumber" : 586,
        "endColumnNumber" : 60
      },
      "nodeContext" : "(node=iterator.next()) != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.google.gson.internal.LinkedHashTreeMap.AvlIterator<K,V>"
  }, {
    "nodeContext" : "iterator",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 597,
      "startColumnNumber" : 6,
      "endLineNumber" : 597,
      "endColumnNumber" : 14
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 597,
        "startColumnNumber" : 6,
        "endLineNumber" : 597,
        "endColumnNumber" : 26
      },
      "nodeContext" : "iterator.reset(root)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 597,
        "startColumnNumber" : 6,
        "endLineNumber" : 597,
        "endColumnNumber" : 27
      },
      "nodeContext" : "iterator.reset(root);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 971,
        "startLineNumber" : 576,
        "startColumnNumber" : 42,
        "endLineNumber" : 609,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Node<K,V> root=oldTable[i];\n  if (root == null) {\n    continue;\n  }\n  iterator.reset(root);\n  int leftSize=0;\n  int rightSize=0;\n  for (Node<K,V> node; (node=iterator.next()) != null; ) {\n    if ((node.hash & oldCapacity) == 0) {\n      leftSize++;\n    }\n else {\n      rightSize++;\n    }\n  }\n  leftBuilder.reset(leftSize);\n  rightBuilder.reset(rightSize);\n  iterator.reset(root);\n  for (Node<K,V> node; (node=iterator.next()) != null; ) {\n    if ((node.hash & oldCapacity) == 0) {\n      leftBuilder.add(node);\n    }\n else {\n      rightBuilder.add(node);\n    }\n  }\n  newTable[i]=leftSize > 0 ? leftBuilder.root() : null;\n  newTable[i + oldCapacity]=rightSize > 0 ? rightBuilder.root() : null;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 156,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1009,
        "startLineNumber" : 576,
        "startColumnNumber" : 4,
        "endLineNumber" : 609,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < oldCapacity; i++) {\n  Node<K,V> root=oldTable[i];\n  if (root == null) {\n    continue;\n  }\n  iterator.reset(root);\n  int leftSize=0;\n  int rightSize=0;\n  for (Node<K,V> node; (node=iterator.next()) != null; ) {\n    if ((node.hash & oldCapacity) == 0) {\n      leftSize++;\n    }\n else {\n      rightSize++;\n    }\n  }\n  leftBuilder.reset(leftSize);\n  rightBuilder.reset(rightSize);\n  iterator.reset(root);\n  for (Node<K,V> node; (node=iterator.next()) != null; ) {\n    if ((node.hash & oldCapacity) == 0) {\n      leftBuilder.add(node);\n    }\n else {\n      rightBuilder.add(node);\n    }\n  }\n  newTable[i]=leftSize > 0 ? leftBuilder.root() : null;\n  newTable[i + oldCapacity]=rightSize > 0 ? rightBuilder.root() : null;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 167,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1490,
        "startLineNumber" : 566,
        "startColumnNumber" : 67,
        "endLineNumber" : 611,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int oldCapacity=oldTable.length;\n  @SuppressWarnings(\"unchecked\") Node<K,V>[] newTable=new Node[oldCapacity * 2];\n  AvlIterator<K,V> iterator=new AvlIterator<K,V>();\n  AvlBuilder<K,V> leftBuilder=new AvlBuilder<K,V>();\n  AvlBuilder<K,V> rightBuilder=new AvlBuilder<K,V>();\n  for (int i=0; i < oldCapacity; i++) {\n    Node<K,V> root=oldTable[i];\n    if (root == null) {\n      continue;\n    }\n    iterator.reset(root);\n    int leftSize=0;\n    int rightSize=0;\n    for (Node<K,V> node; (node=iterator.next()) != null; ) {\n      if ((node.hash & oldCapacity) == 0) {\n        leftSize++;\n      }\n else {\n        rightSize++;\n      }\n    }\n    leftBuilder.reset(leftSize);\n    rightBuilder.reset(rightSize);\n    iterator.reset(root);\n    for (Node<K,V> node; (node=iterator.next()) != null; ) {\n      if ((node.hash & oldCapacity) == 0) {\n        leftBuilder.add(node);\n      }\n else {\n        rightBuilder.add(node);\n      }\n    }\n    newTable[i]=leftSize > 0 ? leftBuilder.root() : null;\n    newTable[i + oldCapacity]=rightSize > 0 ? rightBuilder.root() : null;\n  }\n  return newTable;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 254,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1722,
        "startLineNumber" : 562,
        "startColumnNumber" : 2,
        "endLineNumber" : 611,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Returns a new array containing the same nodes as  {@code oldTable}, but with twice as many trees, each of (approximately) half the previous size.\n */\nstatic <K,V>Node<K,V>[] doubleCapacity(Node<K,V>[] oldTable){\n  int oldCapacity=oldTable.length;\n  @SuppressWarnings(\"unchecked\") Node<K,V>[] newTable=new Node[oldCapacity * 2];\n  AvlIterator<K,V> iterator=new AvlIterator<K,V>();\n  AvlBuilder<K,V> leftBuilder=new AvlBuilder<K,V>();\n  AvlBuilder<K,V> rightBuilder=new AvlBuilder<K,V>();\n  for (int i=0; i < oldCapacity; i++) {\n    Node<K,V> root=oldTable[i];\n    if (root == null) {\n      continue;\n    }\n    iterator.reset(root);\n    int leftSize=0;\n    int rightSize=0;\n    for (Node<K,V> node; (node=iterator.next()) != null; ) {\n      if ((node.hash & oldCapacity) == 0) {\n        leftSize++;\n      }\n else {\n        rightSize++;\n      }\n    }\n    leftBuilder.reset(leftSize);\n    rightBuilder.reset(rightSize);\n    iterator.reset(root);\n    for (Node<K,V> node; (node=iterator.next()) != null; ) {\n      if ((node.hash & oldCapacity) == 0) {\n        leftBuilder.add(node);\n      }\n else {\n        rightBuilder.add(node);\n      }\n    }\n    newTable[i]=leftSize > 0 ? leftBuilder.root() : null;\n    newTable[i + oldCapacity]=rightSize > 0 ? rightBuilder.root() : null;\n  }\n  return newTable;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 282,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 597,
        "startColumnNumber" : 6,
        "endLineNumber" : 597,
        "endColumnNumber" : 27
      },
      "nodeContext" : "iterator.reset(root);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.google.gson.internal.LinkedHashTreeMap.AvlIterator<K,V>"
  }, {
    "nodeContext" : "iterator",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 598,
      "startColumnNumber" : 36,
      "endLineNumber" : 598,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 598,
        "startColumnNumber" : 36,
        "endLineNumber" : 598,
        "endColumnNumber" : 51
      },
      "nodeContext" : "iterator.next()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 598,
        "startColumnNumber" : 29,
        "endLineNumber" : 598,
        "endColumnNumber" : 51
      },
      "nodeContext" : "node=iterator.next()",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 598,
        "startColumnNumber" : 28,
        "endLineNumber" : 598,
        "endColumnNumber" : 52
      },
      "nodeContext" : "(node=iterator.next())",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 598,
        "startColumnNumber" : 28,
        "endLineNumber" : 598,
        "endColumnNumber" : 60
      },
      "nodeContext" : "(node=iterator.next()) != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 207,
        "startLineNumber" : 598,
        "startColumnNumber" : 6,
        "endLineNumber" : 604,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (Node<K,V> node; (node=iterator.next()) != null; ) {\n  if ((node.hash & oldCapacity) == 0) {\n    leftBuilder.add(node);\n  }\n else {\n    rightBuilder.add(node);\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 41,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 971,
        "startLineNumber" : 576,
        "startColumnNumber" : 42,
        "endLineNumber" : 609,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Node<K,V> root=oldTable[i];\n  if (root == null) {\n    continue;\n  }\n  iterator.reset(root);\n  int leftSize=0;\n  int rightSize=0;\n  for (Node<K,V> node; (node=iterator.next()) != null; ) {\n    if ((node.hash & oldCapacity) == 0) {\n      leftSize++;\n    }\n else {\n      rightSize++;\n    }\n  }\n  leftBuilder.reset(leftSize);\n  rightBuilder.reset(rightSize);\n  iterator.reset(root);\n  for (Node<K,V> node; (node=iterator.next()) != null; ) {\n    if ((node.hash & oldCapacity) == 0) {\n      leftBuilder.add(node);\n    }\n else {\n      rightBuilder.add(node);\n    }\n  }\n  newTable[i]=leftSize > 0 ? leftBuilder.root() : null;\n  newTable[i + oldCapacity]=rightSize > 0 ? rightBuilder.root() : null;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 156,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1009,
        "startLineNumber" : 576,
        "startColumnNumber" : 4,
        "endLineNumber" : 609,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < oldCapacity; i++) {\n  Node<K,V> root=oldTable[i];\n  if (root == null) {\n    continue;\n  }\n  iterator.reset(root);\n  int leftSize=0;\n  int rightSize=0;\n  for (Node<K,V> node; (node=iterator.next()) != null; ) {\n    if ((node.hash & oldCapacity) == 0) {\n      leftSize++;\n    }\n else {\n      rightSize++;\n    }\n  }\n  leftBuilder.reset(leftSize);\n  rightBuilder.reset(rightSize);\n  iterator.reset(root);\n  for (Node<K,V> node; (node=iterator.next()) != null; ) {\n    if ((node.hash & oldCapacity) == 0) {\n      leftBuilder.add(node);\n    }\n else {\n      rightBuilder.add(node);\n    }\n  }\n  newTable[i]=leftSize > 0 ? leftBuilder.root() : null;\n  newTable[i + oldCapacity]=rightSize > 0 ? rightBuilder.root() : null;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 167,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1490,
        "startLineNumber" : 566,
        "startColumnNumber" : 67,
        "endLineNumber" : 611,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int oldCapacity=oldTable.length;\n  @SuppressWarnings(\"unchecked\") Node<K,V>[] newTable=new Node[oldCapacity * 2];\n  AvlIterator<K,V> iterator=new AvlIterator<K,V>();\n  AvlBuilder<K,V> leftBuilder=new AvlBuilder<K,V>();\n  AvlBuilder<K,V> rightBuilder=new AvlBuilder<K,V>();\n  for (int i=0; i < oldCapacity; i++) {\n    Node<K,V> root=oldTable[i];\n    if (root == null) {\n      continue;\n    }\n    iterator.reset(root);\n    int leftSize=0;\n    int rightSize=0;\n    for (Node<K,V> node; (node=iterator.next()) != null; ) {\n      if ((node.hash & oldCapacity) == 0) {\n        leftSize++;\n      }\n else {\n        rightSize++;\n      }\n    }\n    leftBuilder.reset(leftSize);\n    rightBuilder.reset(rightSize);\n    iterator.reset(root);\n    for (Node<K,V> node; (node=iterator.next()) != null; ) {\n      if ((node.hash & oldCapacity) == 0) {\n        leftBuilder.add(node);\n      }\n else {\n        rightBuilder.add(node);\n      }\n    }\n    newTable[i]=leftSize > 0 ? leftBuilder.root() : null;\n    newTable[i + oldCapacity]=rightSize > 0 ? rightBuilder.root() : null;\n  }\n  return newTable;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 254,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1722,
        "startLineNumber" : 562,
        "startColumnNumber" : 2,
        "endLineNumber" : 611,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Returns a new array containing the same nodes as  {@code oldTable}, but with twice as many trees, each of (approximately) half the previous size.\n */\nstatic <K,V>Node<K,V>[] doubleCapacity(Node<K,V>[] oldTable){\n  int oldCapacity=oldTable.length;\n  @SuppressWarnings(\"unchecked\") Node<K,V>[] newTable=new Node[oldCapacity * 2];\n  AvlIterator<K,V> iterator=new AvlIterator<K,V>();\n  AvlBuilder<K,V> leftBuilder=new AvlBuilder<K,V>();\n  AvlBuilder<K,V> rightBuilder=new AvlBuilder<K,V>();\n  for (int i=0; i < oldCapacity; i++) {\n    Node<K,V> root=oldTable[i];\n    if (root == null) {\n      continue;\n    }\n    iterator.reset(root);\n    int leftSize=0;\n    int rightSize=0;\n    for (Node<K,V> node; (node=iterator.next()) != null; ) {\n      if ((node.hash & oldCapacity) == 0) {\n        leftSize++;\n      }\n else {\n        rightSize++;\n      }\n    }\n    leftBuilder.reset(leftSize);\n    rightBuilder.reset(rightSize);\n    iterator.reset(root);\n    for (Node<K,V> node; (node=iterator.next()) != null; ) {\n      if ((node.hash & oldCapacity) == 0) {\n        leftBuilder.add(node);\n      }\n else {\n        rightBuilder.add(node);\n      }\n    }\n    newTable[i]=leftSize > 0 ? leftBuilder.root() : null;\n    newTable[i + oldCapacity]=rightSize > 0 ? rightBuilder.root() : null;\n  }\n  return newTable;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 282,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 598,
        "startColumnNumber" : 28,
        "endLineNumber" : 598,
        "endColumnNumber" : 60
      },
      "nodeContext" : "(node=iterator.next()) != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.google.gson.internal.LinkedHashTreeMap.AvlIterator<K,V>"
  } ],
  "positionList" : [ {
    "charLength" : 8,
    "startLineNumber" : 583,
    "startColumnNumber" : 6,
    "endLineNumber" : 583,
    "endColumnNumber" : 14
  }, {
    "charLength" : 8,
    "startLineNumber" : 586,
    "startColumnNumber" : 36,
    "endLineNumber" : 586,
    "endColumnNumber" : 44
  }, {
    "charLength" : 8,
    "startLineNumber" : 597,
    "startColumnNumber" : 6,
    "endLineNumber" : 597,
    "endColumnNumber" : 14
  }, {
    "charLength" : 8,
    "startLineNumber" : 598,
    "startColumnNumber" : 36,
    "endLineNumber" : 598,
    "endColumnNumber" : 44
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 5
  } ]
}