{
  "id" : 241,
  "expression" : "peekStack == JsonScope.EMPTY_OBJECT",
  "projectName" : "google@gson",
  "commitID" : "c3d0f200b352f411b9ebe45c3bf49d4328b2c51f",
  "filePath" : "/gson/src/main/java/com/google/gson/stream/JsonReader.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "peekStack == JsonScope.EMPTY_OBJECT",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 35,
      "startLineNumber" : 467,
      "startColumnNumber" : 15,
      "endLineNumber" : 467,
      "endColumnNumber" : 50
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 467,
        "startColumnNumber" : 15,
        "endLineNumber" : 467,
        "endColumnNumber" : 92
      },
      "nodeContext" : "peekStack == JsonScope.EMPTY_OBJECT || peekStack == JsonScope.NONEMPTY_OBJECT",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2204,
        "startLineNumber" : 467,
        "startColumnNumber" : 11,
        "endLineNumber" : 536,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (peekStack == JsonScope.EMPTY_OBJECT || peekStack == JsonScope.NONEMPTY_OBJECT) {\n  stack[stackSize - 1]=JsonScope.DANGLING_NAME;\n  if (peekStack == JsonScope.NONEMPTY_OBJECT) {\n    int c=nextNonWhitespace(true);\nswitch (c) {\ncase '}':      return peeked=PEEKED_END_OBJECT;\ncase ';':    checkLenient();\ncase ',':  break;\ndefault:throw syntaxError(\"Unterminated object\");\n}\n}\nint c=nextNonWhitespace(true);\nswitch (c) {\ncase '\"':return peeked=PEEKED_DOUBLE_QUOTED_NAME;\ncase '\\'':checkLenient();\nreturn peeked=PEEKED_SINGLE_QUOTED_NAME;\ncase '}':if (peekStack != JsonScope.NONEMPTY_OBJECT) {\nreturn peeked=PEEKED_END_OBJECT;\n}\n else {\nthrow syntaxError(\"Expected name\");\n}\ndefault:checkLenient();\npos--;\nif (isLiteral((char)c)) {\nreturn peeked=PEEKED_UNQUOTED_NAME;\n}\n else {\nthrow syntaxError(\"Expected name\");\n}\n}\n}\n else if (peekStack == JsonScope.DANGLING_NAME) {\nstack[stackSize - 1]=JsonScope.NONEMPTY_OBJECT;\nint c=nextNonWhitespace(true);\nswitch (c) {\ncase ':':break;\ncase '=':checkLenient();\nif ((pos < limit || fillBuffer(1)) && buffer[pos] == '>') {\npos++;\n}\nbreak;\ndefault:throw syntaxError(\"Expected ':'\");\n}\n}\n else if (peekStack == JsonScope.EMPTY_DOCUMENT) {\nif (lenient) {\nconsumeNonExecutePrefix();\n}\nstack[stackSize - 1]=JsonScope.NONEMPTY_DOCUMENT;\n}\n else if (peekStack == JsonScope.NONEMPTY_DOCUMENT) {\nint c=nextNonWhitespace(false);\nif (c == -1) {\nreturn peeked=PEEKED_EOF;\n}\n else {\ncheckLenient();\npos--;\n}\n}\n else if (peekStack == JsonScope.CLOSED) {\nthrow new IllegalStateException(\"JsonReader is closed\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 248,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2586,
        "startLineNumber" : 454,
        "startColumnNumber" : 11,
        "endLineNumber" : 536,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (peekStack == JsonScope.NONEMPTY_ARRAY) {\n  int c=nextNonWhitespace(true);\nswitch (c) {\ncase ']':    return peeked=PEEKED_END_ARRAY;\ncase ';':  checkLenient();\ncase ',':break;\ndefault:throw syntaxError(\"Unterminated array\");\n}\n}\n else if (peekStack == JsonScope.EMPTY_OBJECT || peekStack == JsonScope.NONEMPTY_OBJECT) {\nstack[stackSize - 1]=JsonScope.DANGLING_NAME;\nif (peekStack == JsonScope.NONEMPTY_OBJECT) {\nint c=nextNonWhitespace(true);\nswitch (c) {\ncase '}':return peeked=PEEKED_END_OBJECT;\ncase ';':checkLenient();\ncase ',':break;\ndefault:throw syntaxError(\"Unterminated object\");\n}\n}\nint c=nextNonWhitespace(true);\nswitch (c) {\ncase '\"':return peeked=PEEKED_DOUBLE_QUOTED_NAME;\ncase '\\'':checkLenient();\nreturn peeked=PEEKED_SINGLE_QUOTED_NAME;\ncase '}':if (peekStack != JsonScope.NONEMPTY_OBJECT) {\nreturn peeked=PEEKED_END_OBJECT;\n}\n else {\nthrow syntaxError(\"Expected name\");\n}\ndefault:checkLenient();\npos--;\nif (isLiteral((char)c)) {\nreturn peeked=PEEKED_UNQUOTED_NAME;\n}\n else {\nthrow syntaxError(\"Expected name\");\n}\n}\n}\n else if (peekStack == JsonScope.DANGLING_NAME) {\nstack[stackSize - 1]=JsonScope.NONEMPTY_OBJECT;\nint c=nextNonWhitespace(true);\nswitch (c) {\ncase ':':break;\ncase '=':checkLenient();\nif ((pos < limit || fillBuffer(1)) && buffer[pos] == '>') {\npos++;\n}\nbreak;\ndefault:throw syntaxError(\"Expected ':'\");\n}\n}\n else if (peekStack == JsonScope.EMPTY_DOCUMENT) {\nif (lenient) {\nconsumeNonExecutePrefix();\n}\nstack[stackSize - 1]=JsonScope.NONEMPTY_DOCUMENT;\n}\n else if (peekStack == JsonScope.NONEMPTY_DOCUMENT) {\nint c=nextNonWhitespace(false);\nif (c == -1) {\nreturn peeked=PEEKED_EOF;\n}\n else {\ncheckLenient();\npos--;\n}\n}\n else if (peekStack == JsonScope.CLOSED) {\nthrow new IllegalStateException(\"JsonReader is closed\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 283,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2694,
        "startLineNumber" : 452,
        "startColumnNumber" : 4,
        "endLineNumber" : 536,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (peekStack == JsonScope.EMPTY_ARRAY) {\n  stack[stackSize - 1]=JsonScope.NONEMPTY_ARRAY;\n}\n else if (peekStack == JsonScope.NONEMPTY_ARRAY) {\n  int c=nextNonWhitespace(true);\nswitch (c) {\ncase ']':    return peeked=PEEKED_END_ARRAY;\ncase ';':  checkLenient();\ncase ',':break;\ndefault:throw syntaxError(\"Unterminated array\");\n}\n}\n else if (peekStack == JsonScope.EMPTY_OBJECT || peekStack == JsonScope.NONEMPTY_OBJECT) {\nstack[stackSize - 1]=JsonScope.DANGLING_NAME;\nif (peekStack == JsonScope.NONEMPTY_OBJECT) {\nint c=nextNonWhitespace(true);\nswitch (c) {\ncase '}':return peeked=PEEKED_END_OBJECT;\ncase ';':checkLenient();\ncase ',':break;\ndefault:throw syntaxError(\"Unterminated object\");\n}\n}\nint c=nextNonWhitespace(true);\nswitch (c) {\ncase '\"':return peeked=PEEKED_DOUBLE_QUOTED_NAME;\ncase '\\'':checkLenient();\nreturn peeked=PEEKED_SINGLE_QUOTED_NAME;\ncase '}':if (peekStack != JsonScope.NONEMPTY_OBJECT) {\nreturn peeked=PEEKED_END_OBJECT;\n}\n else {\nthrow syntaxError(\"Expected name\");\n}\ndefault:checkLenient();\npos--;\nif (isLiteral((char)c)) {\nreturn peeked=PEEKED_UNQUOTED_NAME;\n}\n else {\nthrow syntaxError(\"Expected name\");\n}\n}\n}\n else if (peekStack == JsonScope.DANGLING_NAME) {\nstack[stackSize - 1]=JsonScope.NONEMPTY_OBJECT;\nint c=nextNonWhitespace(true);\nswitch (c) {\ncase ':':break;\ncase '=':checkLenient();\nif ((pos < limit || fillBuffer(1)) && buffer[pos] == '>') {\npos++;\n}\nbreak;\ndefault:throw syntaxError(\"Expected ':'\");\n}\n}\n else if (peekStack == JsonScope.EMPTY_DOCUMENT) {\nif (lenient) {\nconsumeNonExecutePrefix();\n}\nstack[stackSize - 1]=JsonScope.NONEMPTY_DOCUMENT;\n}\n else if (peekStack == JsonScope.NONEMPTY_DOCUMENT) {\nint c=nextNonWhitespace(false);\nif (c == -1) {\nreturn peeked=PEEKED_EOF;\n}\n else {\ncheckLenient();\npos--;\n}\n}\n else if (peekStack == JsonScope.CLOSED) {\nthrow new IllegalStateException(\"JsonReader is closed\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 300,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4112,
        "startLineNumber" : 450,
        "startColumnNumber" : 42,
        "endLineNumber" : 591,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int peekStack=stack[stackSize - 1];\n  if (peekStack == JsonScope.EMPTY_ARRAY) {\n    stack[stackSize - 1]=JsonScope.NONEMPTY_ARRAY;\n  }\n else   if (peekStack == JsonScope.NONEMPTY_ARRAY) {\n    int c=nextNonWhitespace(true);\nswitch (c) {\ncase ']':      return peeked=PEEKED_END_ARRAY;\ncase ';':    checkLenient();\ncase ',':  break;\ndefault:throw syntaxError(\"Unterminated array\");\n}\n}\n else if (peekStack == JsonScope.EMPTY_OBJECT || peekStack == JsonScope.NONEMPTY_OBJECT) {\nstack[stackSize - 1]=JsonScope.DANGLING_NAME;\nif (peekStack == JsonScope.NONEMPTY_OBJECT) {\nint c=nextNonWhitespace(true);\nswitch (c) {\ncase '}':return peeked=PEEKED_END_OBJECT;\ncase ';':checkLenient();\ncase ',':break;\ndefault:throw syntaxError(\"Unterminated object\");\n}\n}\nint c=nextNonWhitespace(true);\nswitch (c) {\ncase '\"':return peeked=PEEKED_DOUBLE_QUOTED_NAME;\ncase '\\'':checkLenient();\nreturn peeked=PEEKED_SINGLE_QUOTED_NAME;\ncase '}':if (peekStack != JsonScope.NONEMPTY_OBJECT) {\nreturn peeked=PEEKED_END_OBJECT;\n}\n else {\nthrow syntaxError(\"Expected name\");\n}\ndefault:checkLenient();\npos--;\nif (isLiteral((char)c)) {\nreturn peeked=PEEKED_UNQUOTED_NAME;\n}\n else {\nthrow syntaxError(\"Expected name\");\n}\n}\n}\n else if (peekStack == JsonScope.DANGLING_NAME) {\nstack[stackSize - 1]=JsonScope.NONEMPTY_OBJECT;\nint c=nextNonWhitespace(true);\nswitch (c) {\ncase ':':break;\ncase '=':checkLenient();\nif ((pos < limit || fillBuffer(1)) && buffer[pos] == '>') {\npos++;\n}\nbreak;\ndefault:throw syntaxError(\"Expected ':'\");\n}\n}\n else if (peekStack == JsonScope.EMPTY_DOCUMENT) {\nif (lenient) {\nconsumeNonExecutePrefix();\n}\nstack[stackSize - 1]=JsonScope.NONEMPTY_DOCUMENT;\n}\n else if (peekStack == JsonScope.NONEMPTY_DOCUMENT) {\nint c=nextNonWhitespace(false);\nif (c == -1) {\nreturn peeked=PEEKED_EOF;\n}\n else {\ncheckLenient();\npos--;\n}\n}\n else if (peekStack == JsonScope.CLOSED) {\nthrow new IllegalStateException(\"JsonReader is closed\");\n}\nint c=nextNonWhitespace(true);\nswitch (c) {\ncase ']':if (peekStack == JsonScope.EMPTY_ARRAY) {\nreturn peeked=PEEKED_END_ARRAY;\n}\ncase ';':case ',':if (peekStack == JsonScope.EMPTY_ARRAY || peekStack == JsonScope.NONEMPTY_ARRAY) {\ncheckLenient();\npos--;\nreturn peeked=PEEKED_NULL;\n}\n else {\nthrow syntaxError(\"Unexpected value\");\n}\ncase '\\'':checkLenient();\nreturn peeked=PEEKED_SINGLE_QUOTED;\ncase '\"':if (stackSize == 1) {\ncheckLenient();\n}\nreturn peeked=PEEKED_DOUBLE_QUOTED;\ncase '[':return peeked=PEEKED_BEGIN_ARRAY;\ncase '{':return peeked=PEEKED_BEGIN_OBJECT;\ndefault:pos--;\n}\nif (stackSize == 1) {\ncheckLenient();\n}\nint result=peekKeyword();\nif (result != PEEKED_NONE) {\nreturn result;\n}\nresult=peekNumber();\nif (result != PEEKED_NONE) {\nreturn result;\n}\nif (!isLiteral(buffer[pos])) {\nthrow syntaxError(\"Expected value\");\n}\ncheckLenient();\nreturn peeked=PEEKED_UNQUOTED;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 455,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4152,
        "startLineNumber" : 450,
        "startColumnNumber" : 2,
        "endLineNumber" : 591,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private int doPeek() throws IOException {\n  int peekStack=stack[stackSize - 1];\n  if (peekStack == JsonScope.EMPTY_ARRAY) {\n    stack[stackSize - 1]=JsonScope.NONEMPTY_ARRAY;\n  }\n else   if (peekStack == JsonScope.NONEMPTY_ARRAY) {\n    int c=nextNonWhitespace(true);\nswitch (c) {\ncase ']':      return peeked=PEEKED_END_ARRAY;\ncase ';':    checkLenient();\ncase ',':  break;\ndefault:throw syntaxError(\"Unterminated array\");\n}\n}\n else if (peekStack == JsonScope.EMPTY_OBJECT || peekStack == JsonScope.NONEMPTY_OBJECT) {\nstack[stackSize - 1]=JsonScope.DANGLING_NAME;\nif (peekStack == JsonScope.NONEMPTY_OBJECT) {\nint c=nextNonWhitespace(true);\nswitch (c) {\ncase '}':return peeked=PEEKED_END_OBJECT;\ncase ';':checkLenient();\ncase ',':break;\ndefault:throw syntaxError(\"Unterminated object\");\n}\n}\nint c=nextNonWhitespace(true);\nswitch (c) {\ncase '\"':return peeked=PEEKED_DOUBLE_QUOTED_NAME;\ncase '\\'':checkLenient();\nreturn peeked=PEEKED_SINGLE_QUOTED_NAME;\ncase '}':if (peekStack != JsonScope.NONEMPTY_OBJECT) {\nreturn peeked=PEEKED_END_OBJECT;\n}\n else {\nthrow syntaxError(\"Expected name\");\n}\ndefault:checkLenient();\npos--;\nif (isLiteral((char)c)) {\nreturn peeked=PEEKED_UNQUOTED_NAME;\n}\n else {\nthrow syntaxError(\"Expected name\");\n}\n}\n}\n else if (peekStack == JsonScope.DANGLING_NAME) {\nstack[stackSize - 1]=JsonScope.NONEMPTY_OBJECT;\nint c=nextNonWhitespace(true);\nswitch (c) {\ncase ':':break;\ncase '=':checkLenient();\nif ((pos < limit || fillBuffer(1)) && buffer[pos] == '>') {\npos++;\n}\nbreak;\ndefault:throw syntaxError(\"Expected ':'\");\n}\n}\n else if (peekStack == JsonScope.EMPTY_DOCUMENT) {\nif (lenient) {\nconsumeNonExecutePrefix();\n}\nstack[stackSize - 1]=JsonScope.NONEMPTY_DOCUMENT;\n}\n else if (peekStack == JsonScope.NONEMPTY_DOCUMENT) {\nint c=nextNonWhitespace(false);\nif (c == -1) {\nreturn peeked=PEEKED_EOF;\n}\n else {\ncheckLenient();\npos--;\n}\n}\n else if (peekStack == JsonScope.CLOSED) {\nthrow new IllegalStateException(\"JsonReader is closed\");\n}\nint c=nextNonWhitespace(true);\nswitch (c) {\ncase ']':if (peekStack == JsonScope.EMPTY_ARRAY) {\nreturn peeked=PEEKED_END_ARRAY;\n}\ncase ';':case ',':if (peekStack == JsonScope.EMPTY_ARRAY || peekStack == JsonScope.NONEMPTY_ARRAY) {\ncheckLenient();\npos--;\nreturn peeked=PEEKED_NULL;\n}\n else {\nthrow syntaxError(\"Unexpected value\");\n}\ncase '\\'':checkLenient();\nreturn peeked=PEEKED_SINGLE_QUOTED;\ncase '\"':if (stackSize == 1) {\ncheckLenient();\n}\nreturn peeked=PEEKED_DOUBLE_QUOTED;\ncase '[':return peeked=PEEKED_BEGIN_ARRAY;\ncase '{':return peeked=PEEKED_BEGIN_OBJECT;\ndefault:pos--;\n}\nif (stackSize == 1) {\ncheckLenient();\n}\nint result=peekKeyword();\nif (result != PEEKED_NONE) {\nreturn result;\n}\nresult=peekNumber();\nif (result != PEEKED_NONE) {\nreturn result;\n}\nif (!isLiteral(buffer[pos])) {\nthrow syntaxError(\"Expected value\");\n}\ncheckLenient();\nreturn peeked=PEEKED_UNQUOTED;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 461,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 467,
        "startColumnNumber" : 15,
        "endLineNumber" : 467,
        "endColumnNumber" : 92
      },
      "nodeContext" : "peekStack == JsonScope.EMPTY_OBJECT || peekStack == JsonScope.NONEMPTY_OBJECT",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 5,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 35,
    "startLineNumber" : 467,
    "startColumnNumber" : 15,
    "endLineNumber" : 467,
    "endColumnNumber" : 50
  } ],
  "layoutRelationDataList" : [ ]
}