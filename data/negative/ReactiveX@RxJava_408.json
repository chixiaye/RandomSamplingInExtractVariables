{
  "id" : 408,
  "expression" : "TestHelper.mockSubscriber()",
  "projectName" : "ReactiveX@RxJava",
  "commitID" : "75c40b58fc3f56283ad88ce299c72419975f6b00",
  "filePath" : "/src/test/java/io/reactivex/internal/operators/flowable/FlowableRangeTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "TestHelper.mockSubscriber()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 27,
      "startLineNumber" : 48,
      "startColumnNumber" : 39,
      "endLineNumber" : 48,
      "endColumnNumber" : 66
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 48,
        "startColumnNumber" : 28,
        "endLineNumber" : 48,
        "endColumnNumber" : 66
      },
      "nodeContext" : "observer=TestHelper.mockSubscriber()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 48,
        "startColumnNumber" : 8,
        "endLineNumber" : 48,
        "endColumnNumber" : 67
      },
      "nodeContext" : "Subscriber<Integer> observer=TestHelper.mockSubscriber();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 765,
        "startLineNumber" : 47,
        "startColumnNumber" : 39,
        "endLineNumber" : 67,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Subscriber<Integer> observer=TestHelper.mockSubscriber();\n  final AtomicInteger count=new AtomicInteger();\n  Flowable.range(1,1000).doOnNext(new Consumer<Integer>(){\n    @Override public void accept(    Integer t1){\n      count.incrementAndGet();\n    }\n  }\n).take(3).subscribe(observer);\n  verify(observer,times(1)).onNext(1);\n  verify(observer,times(1)).onNext(2);\n  verify(observer,times(1)).onNext(3);\n  verify(observer,never()).onNext(4);\n  verify(observer,never()).onError(org.mockito.Matchers.any(Throwable.class));\n  verify(observer,times(1)).onComplete();\n  assertEquals(3,count.get());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 130,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 811,
        "startLineNumber" : 46,
        "startColumnNumber" : 4,
        "endLineNumber" : 67,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testRangeUnsubscribe(){\n  Subscriber<Integer> observer=TestHelper.mockSubscriber();\n  final AtomicInteger count=new AtomicInteger();\n  Flowable.range(1,1000).doOnNext(new Consumer<Integer>(){\n    @Override public void accept(    Integer t1){\n      count.incrementAndGet();\n    }\n  }\n).take(3).subscribe(observer);\n  verify(observer,times(1)).onNext(1);\n  verify(observer,times(1)).onNext(2);\n  verify(observer,times(1)).onNext(3);\n  verify(observer,never()).onNext(4);\n  verify(observer,never()).onError(org.mockito.Matchers.any(Throwable.class));\n  verify(observer,times(1)).onComplete();\n  assertEquals(3,count.get());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 136,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 48,
        "startColumnNumber" : 8,
        "endLineNumber" : 48,
        "endColumnNumber" : 67
      },
      "nodeContext" : "Subscriber<Integer> observer=TestHelper.mockSubscriber();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "io.reactivex.Subscriber<java.lang.Integer>"
  } ],
  "positionList" : [ {
    "charLength" : 27,
    "startLineNumber" : 48,
    "startColumnNumber" : 39,
    "endLineNumber" : 48,
    "endColumnNumber" : 66
  } ],
  "layoutRelationDataList" : [ ]
}