{
  "id" : 367,
  "expression" : "m.start()",
  "projectName" : "jenkinsci@jenkins",
  "commitID" : "c44fa7f4cf769257844d562353a579a198ea517a",
  "filePath" : "/core/src/main/java/hudson/AbstractMarkupText.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "m.start()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 147,
      "startColumnNumber" : 22,
      "endLineNumber" : 147,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 147,
        "startColumnNumber" : 16,
        "endLineNumber" : 147,
        "endColumnNumber" : 31
      },
      "nodeContext" : "idx=m.start()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 147,
        "startColumnNumber" : 12,
        "endLineNumber" : 147,
        "endColumnNumber" : 32
      },
      "nodeContext" : "int idx=m.start();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 552,
        "startLineNumber" : 146,
        "startColumnNumber" : 24,
        "endLineNumber" : 160,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  int idx=m.start();\n  if (idx > 0) {\n    char ch=text.charAt(idx - 1);\n    if (Character.isLetter(ch) || Character.isDigit(ch))     continue;\n  }\n  idx=m.end();\n  if (idx < text.length()) {\n    char ch=text.charAt(idx);\n    if (Character.isLetter(ch) || Character.isDigit(ch))     continue;\n  }\n  r.add(createSubText(m));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 73,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 568,
        "startLineNumber" : 146,
        "startColumnNumber" : 8,
        "endLineNumber" : 160,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (m.find()) {\n  int idx=m.start();\n  if (idx > 0) {\n    char ch=text.charAt(idx - 1);\n    if (Character.isLetter(ch) || Character.isDigit(ch))     continue;\n  }\n  idx=m.end();\n  if (idx < text.length()) {\n    char ch=text.charAt(idx);\n    if (Character.isLetter(ch) || Character.isDigit(ch))     continue;\n  }\n  r.add(createSubText(m));\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 77,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 733,
        "startLineNumber" : 141,
        "startColumnNumber" : 64,
        "endLineNumber" : 163,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String text=getText();\n  Matcher m=pattern.matcher(text);\n  List<SubText> r=new ArrayList<>();\n  while (m.find()) {\n    int idx=m.start();\n    if (idx > 0) {\n      char ch=text.charAt(idx - 1);\n      if (Character.isLetter(ch) || Character.isDigit(ch))       continue;\n    }\n    idx=m.end();\n    if (idx < text.length()) {\n      char ch=text.charAt(idx);\n      if (Character.isLetter(ch) || Character.isDigit(ch))       continue;\n    }\n    r.add(createSubText(m));\n  }\n  return r;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 108,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1374,
        "startLineNumber" : 128,
        "startColumnNumber" : 4,
        "endLineNumber" : 163,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Find all \"tokens\" that match the given pattern in this text. <p> A token is like a substring, except that it's aware of word boundaries. For example, while \"bc\" is a string of \"abc\", calling  {@code findTokens}with \"bc\" as a pattern on string \"abc\" won't match anything. <p> This method is convenient for finding keywords that follow a certain syntax from natural text. You can then use  {@link MarkupText.SubText#surroundWith(String,String)}to put mark up around such text.\n */\npublic List<MarkupText.SubText> findTokens(Pattern pattern){\n  String text=getText();\n  Matcher m=pattern.matcher(text);\n  List<SubText> r=new ArrayList<>();\n  while (m.find()) {\n    int idx=m.start();\n    if (idx > 0) {\n      char ch=text.charAt(idx - 1);\n      if (Character.isLetter(ch) || Character.isDigit(ch))       continue;\n    }\n    idx=m.end();\n    if (idx < text.length()) {\n      char ch=text.charAt(idx);\n      if (Character.isLetter(ch) || Character.isDigit(ch))       continue;\n    }\n    r.add(createSubText(m));\n  }\n  return r;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 123,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 147,
        "startColumnNumber" : 12,
        "endLineNumber" : 147,
        "endColumnNumber" : 32
      },
      "nodeContext" : "int idx=m.start();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 9,
    "startLineNumber" : 147,
    "startColumnNumber" : 22,
    "endLineNumber" : 147,
    "endColumnNumber" : 31
  } ],
  "layoutRelationDataList" : [ ]
}