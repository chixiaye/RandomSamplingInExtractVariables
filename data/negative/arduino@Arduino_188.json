{
  "id" : 188,
  "expression" : "i < stuff.length / 10",
  "projectName" : "arduino@Arduino",
  "commitID" : "cf1879f948e0c1fa9ddd91f7348fbdd07fd870cb",
  "filePath" : "/build/shared/tools/Mangler/src/Mangler.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "i < stuff.length / 10",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 21,
      "startLineNumber" : 76,
      "startColumnNumber" : 22,
      "endLineNumber" : 76,
      "endColumnNumber" : 43
    },
    "astNodeNumber" : 7,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 351,
        "startLineNumber" : 76,
        "startColumnNumber" : 6,
        "endLineNumber" : 84,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int i=0; i < stuff.length / 10; i++) {\n  int a=(int)(Math.random() * stuff.length);\n  int b=(int)(Math.random() * stuff.length);\n  if (stuff[a] == '\\n' || stuff[b] == '\\n') {\n    continue;\n  }\n  stuff[a]=selection.charAt(b);\n  stuff[b]=selection.charAt(a);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 76,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 701,
        "startLineNumber" : 72,
        "startColumnNumber" : 36,
        "endLineNumber" : 90,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String selection=editor.getSelectedText();\n  char[] stuff=selection.toCharArray();\n  for (int i=0; i < stuff.length / 10; i++) {\n    int a=(int)(Math.random() * stuff.length);\n    int b=(int)(Math.random() * stuff.length);\n    if (stuff[a] == '\\n' || stuff[b] == '\\n') {\n      continue;\n    }\n    stuff[a]=selection.charAt(b);\n    stuff[b]=selection.charAt(a);\n  }\n  editor.startCompoundEdit();\n  editor.setSelectedText(new String(stuff));\n  editor.stopCompoundEdit();\n  editor.statusNotice(\"Now that feels better, doesn't it?\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 115,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 798,
        "startLineNumber" : 72,
        "startColumnNumber" : 4,
        "endLineNumber" : 92,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (editor.isSelectionActive()) {\n  String selection=editor.getSelectedText();\n  char[] stuff=selection.toCharArray();\n  for (int i=0; i < stuff.length / 10; i++) {\n    int a=(int)(Math.random() * stuff.length);\n    int b=(int)(Math.random() * stuff.length);\n    if (stuff[a] == '\\n' || stuff[b] == '\\n') {\n      continue;\n    }\n    stuff[a]=selection.charAt(b);\n    stuff[b]=selection.charAt(a);\n  }\n  editor.startCompoundEdit();\n  editor.setSelectedText(new String(stuff));\n  editor.stopCompoundEdit();\n  editor.statusNotice(\"Now that feels better, doesn't it?\");\n}\n else {\n  editor.statusError(\"No selection, no dice.\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 125,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 808,
        "startLineNumber" : 71,
        "startColumnNumber" : 35,
        "endLineNumber" : 93,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (editor.isSelectionActive()) {\n    String selection=editor.getSelectedText();\n    char[] stuff=selection.toCharArray();\n    for (int i=0; i < stuff.length / 10; i++) {\n      int a=(int)(Math.random() * stuff.length);\n      int b=(int)(Math.random() * stuff.length);\n      if (stuff[a] == '\\n' || stuff[b] == '\\n') {\n        continue;\n      }\n      stuff[a]=selection.charAt(b);\n      stuff[b]=selection.charAt(a);\n    }\n    editor.startCompoundEdit();\n    editor.setSelectedText(new String(stuff));\n    editor.stopCompoundEdit();\n    editor.statusNotice(\"Now that feels better, doesn't it?\");\n  }\n else {\n    editor.statusError(\"No selection, no dice.\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 126,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 841,
        "startLineNumber" : 71,
        "startColumnNumber" : 2,
        "endLineNumber" : 93,
        "endColumnNumber" : 3
      },
      "nodeContext" : "protected void mangleSelection(){\n  if (editor.isSelectionActive()) {\n    String selection=editor.getSelectedText();\n    char[] stuff=selection.toCharArray();\n    for (int i=0; i < stuff.length / 10; i++) {\n      int a=(int)(Math.random() * stuff.length);\n      int b=(int)(Math.random() * stuff.length);\n      if (stuff[a] == '\\n' || stuff[b] == '\\n') {\n        continue;\n      }\n      stuff[a]=selection.charAt(b);\n      stuff[b]=selection.charAt(a);\n    }\n    editor.startCompoundEdit();\n    editor.setSelectedText(new String(stuff));\n    editor.stopCompoundEdit();\n    editor.statusNotice(\"Now that feels better, doesn't it?\");\n  }\n else {\n    editor.statusError(\"No selection, no dice.\");\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 130,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 351,
        "startLineNumber" : 76,
        "startColumnNumber" : 6,
        "endLineNumber" : 84,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int i=0; i < stuff.length / 10; i++) {\n  int a=(int)(Math.random() * stuff.length);\n  int b=(int)(Math.random() * stuff.length);\n  if (stuff[a] == '\\n' || stuff[b] == '\\n') {\n    continue;\n  }\n  stuff[a]=selection.charAt(b);\n  stuff[b]=selection.charAt(a);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 76,
      "astHeight" : 9
    },
    "tokenLength" : 6,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 21,
    "startLineNumber" : 76,
    "startColumnNumber" : 22,
    "endLineNumber" : 76,
    "endColumnNumber" : 43
  } ],
  "layoutRelationDataList" : [ ]
}