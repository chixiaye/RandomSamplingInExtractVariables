{
  "id" : 197,
  "expression" : "null",
  "projectName" : "jenkinsci@jenkins",
  "commitID" : "1fd149ad2cef7c82c26c1e7d46d6a3f74fb990f2",
  "filePath" : "core/src/main/java/hudson/triggers/Trigger.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 254,
      "startColumnNumber" : 46,
      "endLineNumber" : 254,
      "endColumnNumber" : 50
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 254,
        "startColumnNumber" : 16,
        "endLineNumber" : 254,
        "endColumnNumber" : 50
      },
      "nodeContext" : "previousSynchronousPolling == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 254,
        "startColumnNumber" : 16,
        "endLineNumber" : 254,
        "endColumnNumber" : 89
      },
      "nodeContext" : "previousSynchronousPolling == null || previousSynchronousPolling.isDone()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1160,
        "startLineNumber" : 254,
        "startColumnNumber" : 12,
        "endLineNumber" : 271,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (previousSynchronousPolling == null || previousSynchronousPolling.isDone()) {\n  previousSynchronousPolling=scmd.getExecutor().submit(new DependencyRunner(new ProjectRunnable(){\n    public void run(    AbstractProject p){\n      for (      Trigger t : (Collection<Trigger>)p.getTriggers().values()) {\n        if (t instanceof SCMTrigger) {\n          LOGGER.fine(\"synchronously triggering SCMTrigger for project \" + t.job.getName());\n          t.run();\n        }\n      }\n    }\n  }\n));\n}\n else {\n  LOGGER.fine(\"synchronous polling has detected unfinished jobs, will not trigger additional jobs.\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 77,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1346,
        "startLineNumber" : 250,
        "startColumnNumber" : 37,
        "endLineNumber" : 272,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  LOGGER.fine(\"using synchronous polling\");\n  if (previousSynchronousPolling == null || previousSynchronousPolling.isDone()) {\n    previousSynchronousPolling=scmd.getExecutor().submit(new DependencyRunner(new ProjectRunnable(){\n      public void run(      AbstractProject p){\n        for (        Trigger t : (Collection<Trigger>)p.getTriggers().values()) {\n          if (t instanceof SCMTrigger) {\n            LOGGER.fine(\"synchronously triggering SCMTrigger for project \" + t.job.getName());\n            t.run();\n          }\n        }\n      }\n    }\n));\n  }\n else {\n    LOGGER.fine(\"synchronous polling has detected unfinished jobs, will not trigger additional jobs.\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 83,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1375,
        "startLineNumber" : 250,
        "startColumnNumber" : 8,
        "endLineNumber" : 272,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (scmd.synchronousPolling) {\n  LOGGER.fine(\"using synchronous polling\");\n  if (previousSynchronousPolling == null || previousSynchronousPolling.isDone()) {\n    previousSynchronousPolling=scmd.getExecutor().submit(new DependencyRunner(new ProjectRunnable(){\n      public void run(      AbstractProject p){\n        for (        Trigger t : (Collection<Trigger>)p.getTriggers().values()) {\n          if (t instanceof SCMTrigger) {\n            LOGGER.fine(\"synchronously triggering SCMTrigger for project \" + t.job.getName());\n            t.run();\n          }\n        }\n      }\n    }\n));\n  }\n else {\n    LOGGER.fine(\"synchronous polling has detected unfinished jobs, will not trigger additional jobs.\");\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 87,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4131,
        "startLineNumber" : 245,
        "startColumnNumber" : 57,
        "endLineNumber" : 309,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Jenkins inst=Jenkins.get();\n  SCMTrigger.DescriptorImpl scmd=inst.getDescriptorByType(SCMTrigger.DescriptorImpl.class);\n  if (scmd.synchronousPolling) {\n    LOGGER.fine(\"using synchronous polling\");\n    if (previousSynchronousPolling == null || previousSynchronousPolling.isDone()) {\n      previousSynchronousPolling=scmd.getExecutor().submit(new DependencyRunner(new ProjectRunnable(){\n        public void run(        AbstractProject p){\n          for (          Trigger t : (Collection<Trigger>)p.getTriggers().values()) {\n            if (t instanceof SCMTrigger) {\n              LOGGER.fine(\"synchronously triggering SCMTrigger for project \" + t.job.getName());\n              t.run();\n            }\n          }\n        }\n      }\n));\n    }\n else {\n      LOGGER.fine(\"synchronous polling has detected unfinished jobs, will not trigger additional jobs.\");\n    }\n  }\n  for (  ParameterizedJobMixIn.ParameterizedJob<?,?> p : inst.allItems(ParameterizedJobMixIn.ParameterizedJob.class)) {\n    for (    Trigger t : p.getTriggers().values()) {\n      if (!(t instanceof SCMTrigger && scmd.synchronousPolling)) {\n        if (t != null && t.spec != null && t.tabs != null) {\n          LOGGER.log(Level.FINE,\"cron checking {0} with spec ‘{1}’\",new Object[]{p,t.spec.trim()});\n          if (t.tabs.check(cal)) {\n            LOGGER.log(Level.CONFIG,\"cron triggered {0}\",p);\n            try {\n              long begin_time=System.currentTimeMillis();\n              t.run();\n              long end_time=System.currentTimeMillis();\n              if ((end_time - begin_time) > (CRON_THRESHOLD * 1000)) {\n                TriggerDescriptor descriptor=t.getDescriptor();\n                String name=descriptor.getDisplayName();\n                final String msg=String.format(\"Trigger '%s' triggered by '%s' (%s) spent too much time (%s) in its execution, other timers could be delayed.\",name,p.getFullDisplayName(),p.getFullName(),Util.getTimeSpanString(end_time - begin_time));\n                LOGGER.log(Level.WARNING,msg);\n                SlowTriggerAdminMonitor.getInstance().report(descriptor.getClass(),p.getFullName(),end_time - begin_time);\n              }\n            }\n catch (            Throwable e) {\n              LOGGER.log(Level.WARNING,t.getClass().getName() + \".run() failed for \" + p,e);\n            }\n          }\n else {\n            LOGGER.log(Level.FINER,\"did not trigger {0}\",p);\n          }\n        }\n else {\n          LOGGER.log(Level.WARNING,\"The job {0} has a syntactically incorrect config and is missing the cron spec for a trigger\",p.getFullName());\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 344,
      "astHeight" : 23
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4184,
        "startLineNumber" : 245,
        "startColumnNumber" : 4,
        "endLineNumber" : 309,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static void checkTriggers(final Calendar cal){\n  Jenkins inst=Jenkins.get();\n  SCMTrigger.DescriptorImpl scmd=inst.getDescriptorByType(SCMTrigger.DescriptorImpl.class);\n  if (scmd.synchronousPolling) {\n    LOGGER.fine(\"using synchronous polling\");\n    if (previousSynchronousPolling == null || previousSynchronousPolling.isDone()) {\n      previousSynchronousPolling=scmd.getExecutor().submit(new DependencyRunner(new ProjectRunnable(){\n        public void run(        AbstractProject p){\n          for (          Trigger t : (Collection<Trigger>)p.getTriggers().values()) {\n            if (t instanceof SCMTrigger) {\n              LOGGER.fine(\"synchronously triggering SCMTrigger for project \" + t.job.getName());\n              t.run();\n            }\n          }\n        }\n      }\n));\n    }\n else {\n      LOGGER.fine(\"synchronous polling has detected unfinished jobs, will not trigger additional jobs.\");\n    }\n  }\n  for (  ParameterizedJobMixIn.ParameterizedJob<?,?> p : inst.allItems(ParameterizedJobMixIn.ParameterizedJob.class)) {\n    for (    Trigger t : p.getTriggers().values()) {\n      if (!(t instanceof SCMTrigger && scmd.synchronousPolling)) {\n        if (t != null && t.spec != null && t.tabs != null) {\n          LOGGER.log(Level.FINE,\"cron checking {0} with spec ‘{1}’\",new Object[]{p,t.spec.trim()});\n          if (t.tabs.check(cal)) {\n            LOGGER.log(Level.CONFIG,\"cron triggered {0}\",p);\n            try {\n              long begin_time=System.currentTimeMillis();\n              t.run();\n              long end_time=System.currentTimeMillis();\n              if ((end_time - begin_time) > (CRON_THRESHOLD * 1000)) {\n                TriggerDescriptor descriptor=t.getDescriptor();\n                String name=descriptor.getDisplayName();\n                final String msg=String.format(\"Trigger '%s' triggered by '%s' (%s) spent too much time (%s) in its execution, other timers could be delayed.\",name,p.getFullDisplayName(),p.getFullName(),Util.getTimeSpanString(end_time - begin_time));\n                LOGGER.log(Level.WARNING,msg);\n                SlowTriggerAdminMonitor.getInstance().report(descriptor.getClass(),p.getFullName(),end_time - begin_time);\n              }\n            }\n catch (            Throwable e) {\n              LOGGER.log(Level.WARNING,t.getClass().getName() + \".run() failed for \" + p,e);\n            }\n          }\n else {\n            LOGGER.log(Level.FINER,\"did not trigger {0}\",p);\n          }\n        }\n else {\n          LOGGER.log(Level.WARNING,\"The job {0} has a syntactically incorrect config and is missing the cron spec for a trigger\",p.getFullName());\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 354,
      "astHeight" : 24
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 254,
        "startColumnNumber" : 16,
        "endLineNumber" : 254,
        "endColumnNumber" : 89
      },
      "nodeContext" : "previousSynchronousPolling == null || previousSynchronousPolling.isDone()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 278,
      "startColumnNumber" : 28,
      "endLineNumber" : 278,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 8,
        "startLineNumber" : 278,
        "startColumnNumber" : 24,
        "endLineNumber" : 278,
        "endColumnNumber" : 32
      },
      "nodeContext" : "t != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 278,
        "startColumnNumber" : 24,
        "endLineNumber" : 278,
        "endColumnNumber" : 50
      },
      "nodeContext" : "t != null && t.spec != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 278,
        "startColumnNumber" : 24,
        "endLineNumber" : 278,
        "endColumnNumber" : 68
      },
      "nodeContext" : "t != null && t.spec != null && t.tabs != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2135,
        "startLineNumber" : 278,
        "startColumnNumber" : 20,
        "endLineNumber" : 305,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (t != null && t.spec != null && t.tabs != null) {\n  LOGGER.log(Level.FINE,\"cron checking {0} with spec ‘{1}’\",new Object[]{p,t.spec.trim()});\n  if (t.tabs.check(cal)) {\n    LOGGER.log(Level.CONFIG,\"cron triggered {0}\",p);\n    try {\n      long begin_time=System.currentTimeMillis();\n      t.run();\n      long end_time=System.currentTimeMillis();\n      if ((end_time - begin_time) > (CRON_THRESHOLD * 1000)) {\n        TriggerDescriptor descriptor=t.getDescriptor();\n        String name=descriptor.getDisplayName();\n        final String msg=String.format(\"Trigger '%s' triggered by '%s' (%s) spent too much time (%s) in its execution, other timers could be delayed.\",name,p.getFullDisplayName(),p.getFullName(),Util.getTimeSpanString(end_time - begin_time));\n        LOGGER.log(Level.WARNING,msg);\n        SlowTriggerAdminMonitor.getInstance().report(descriptor.getClass(),p.getFullName(),end_time - begin_time);\n      }\n    }\n catch (    Throwable e) {\n      LOGGER.log(Level.WARNING,t.getClass().getName() + \".run() failed for \" + p,e);\n    }\n  }\n else {\n    LOGGER.log(Level.FINER,\"did not trigger {0}\",p);\n  }\n}\n else {\n  LOGGER.log(Level.WARNING,\"The job {0} has a syntactically incorrect config and is missing the cron spec for a trigger\",p.getFullName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 191,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2177,
        "startLineNumber" : 277,
        "startColumnNumber" : 75,
        "endLineNumber" : 306,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  if (t != null && t.spec != null && t.tabs != null) {\n    LOGGER.log(Level.FINE,\"cron checking {0} with spec ‘{1}’\",new Object[]{p,t.spec.trim()});\n    if (t.tabs.check(cal)) {\n      LOGGER.log(Level.CONFIG,\"cron triggered {0}\",p);\n      try {\n        long begin_time=System.currentTimeMillis();\n        t.run();\n        long end_time=System.currentTimeMillis();\n        if ((end_time - begin_time) > (CRON_THRESHOLD * 1000)) {\n          TriggerDescriptor descriptor=t.getDescriptor();\n          String name=descriptor.getDisplayName();\n          final String msg=String.format(\"Trigger '%s' triggered by '%s' (%s) spent too much time (%s) in its execution, other timers could be delayed.\",name,p.getFullDisplayName(),p.getFullName(),Util.getTimeSpanString(end_time - begin_time));\n          LOGGER.log(Level.WARNING,msg);\n          SlowTriggerAdminMonitor.getInstance().report(descriptor.getClass(),p.getFullName(),end_time - begin_time);\n        }\n      }\n catch (      Throwable e) {\n        LOGGER.log(Level.WARNING,t.getClass().getName() + \".run() failed for \" + p,e);\n      }\n    }\n else {\n      LOGGER.log(Level.FINER,\"did not trigger {0}\",p);\n    }\n  }\n else {\n    LOGGER.log(Level.WARNING,\"The job {0} has a syntactically incorrect config and is missing the cron spec for a trigger\",p.getFullName());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 192,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2236,
        "startLineNumber" : 277,
        "startColumnNumber" : 16,
        "endLineNumber" : 306,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (!(t instanceof SCMTrigger && scmd.synchronousPolling)) {\n  if (t != null && t.spec != null && t.tabs != null) {\n    LOGGER.log(Level.FINE,\"cron checking {0} with spec ‘{1}’\",new Object[]{p,t.spec.trim()});\n    if (t.tabs.check(cal)) {\n      LOGGER.log(Level.CONFIG,\"cron triggered {0}\",p);\n      try {\n        long begin_time=System.currentTimeMillis();\n        t.run();\n        long end_time=System.currentTimeMillis();\n        if ((end_time - begin_time) > (CRON_THRESHOLD * 1000)) {\n          TriggerDescriptor descriptor=t.getDescriptor();\n          String name=descriptor.getDisplayName();\n          final String msg=String.format(\"Trigger '%s' triggered by '%s' (%s) spent too much time (%s) in its execution, other timers could be delayed.\",name,p.getFullDisplayName(),p.getFullName(),Util.getTimeSpanString(end_time - begin_time));\n          LOGGER.log(Level.WARNING,msg);\n          SlowTriggerAdminMonitor.getInstance().report(descriptor.getClass(),p.getFullName(),end_time - begin_time);\n        }\n      }\n catch (      Throwable e) {\n        LOGGER.log(Level.WARNING,t.getClass().getName() + \".run() failed for \" + p,e);\n      }\n    }\n else {\n      LOGGER.log(Level.FINER,\"did not trigger {0}\",p);\n    }\n  }\n else {\n    LOGGER.log(Level.WARNING,\"The job {0} has a syntactically incorrect config and is missing the cron spec for a trigger\",p.getFullName());\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 203,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2270,
        "startLineNumber" : 276,
        "startColumnNumber" : 55,
        "endLineNumber" : 307,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (!(t instanceof SCMTrigger && scmd.synchronousPolling)) {\n    if (t != null && t.spec != null && t.tabs != null) {\n      LOGGER.log(Level.FINE,\"cron checking {0} with spec ‘{1}’\",new Object[]{p,t.spec.trim()});\n      if (t.tabs.check(cal)) {\n        LOGGER.log(Level.CONFIG,\"cron triggered {0}\",p);\n        try {\n          long begin_time=System.currentTimeMillis();\n          t.run();\n          long end_time=System.currentTimeMillis();\n          if ((end_time - begin_time) > (CRON_THRESHOLD * 1000)) {\n            TriggerDescriptor descriptor=t.getDescriptor();\n            String name=descriptor.getDisplayName();\n            final String msg=String.format(\"Trigger '%s' triggered by '%s' (%s) spent too much time (%s) in its execution, other timers could be delayed.\",name,p.getFullDisplayName(),p.getFullName(),Util.getTimeSpanString(end_time - begin_time));\n            LOGGER.log(Level.WARNING,msg);\n            SlowTriggerAdminMonitor.getInstance().report(descriptor.getClass(),p.getFullName(),end_time - begin_time);\n          }\n        }\n catch (        Throwable e) {\n          LOGGER.log(Level.WARNING,t.getClass().getName() + \".run() failed for \" + p,e);\n        }\n      }\n else {\n        LOGGER.log(Level.FINER,\"did not trigger {0}\",p);\n      }\n    }\n else {\n      LOGGER.log(Level.WARNING,\"The job {0} has a syntactically incorrect config and is missing the cron spec for a trigger\",p.getFullName());\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 204,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2313,
        "startLineNumber" : 276,
        "startColumnNumber" : 12,
        "endLineNumber" : 307,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (Trigger t : p.getTriggers().values()) {\n  if (!(t instanceof SCMTrigger && scmd.synchronousPolling)) {\n    if (t != null && t.spec != null && t.tabs != null) {\n      LOGGER.log(Level.FINE,\"cron checking {0} with spec ‘{1}’\",new Object[]{p,t.spec.trim()});\n      if (t.tabs.check(cal)) {\n        LOGGER.log(Level.CONFIG,\"cron triggered {0}\",p);\n        try {\n          long begin_time=System.currentTimeMillis();\n          t.run();\n          long end_time=System.currentTimeMillis();\n          if ((end_time - begin_time) > (CRON_THRESHOLD * 1000)) {\n            TriggerDescriptor descriptor=t.getDescriptor();\n            String name=descriptor.getDisplayName();\n            final String msg=String.format(\"Trigger '%s' triggered by '%s' (%s) spent too much time (%s) in its execution, other timers could be delayed.\",name,p.getFullDisplayName(),p.getFullName(),Util.getTimeSpanString(end_time - begin_time));\n            LOGGER.log(Level.WARNING,msg);\n            SlowTriggerAdminMonitor.getInstance().report(descriptor.getClass(),p.getFullName(),end_time - begin_time);\n          }\n        }\n catch (        Throwable e) {\n          LOGGER.log(Level.WARNING,t.getClass().getName() + \".run() failed for \" + p,e);\n        }\n      }\n else {\n        LOGGER.log(Level.FINER,\"did not trigger {0}\",p);\n      }\n    }\n else {\n      LOGGER.log(Level.WARNING,\"The job {0} has a syntactically incorrect config and is missing the cron spec for a trigger\",p.getFullName());\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 214,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2339,
        "startLineNumber" : 275,
        "startColumnNumber" : 123,
        "endLineNumber" : 308,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  for (  Trigger t : p.getTriggers().values()) {\n    if (!(t instanceof SCMTrigger && scmd.synchronousPolling)) {\n      if (t != null && t.spec != null && t.tabs != null) {\n        LOGGER.log(Level.FINE,\"cron checking {0} with spec ‘{1}’\",new Object[]{p,t.spec.trim()});\n        if (t.tabs.check(cal)) {\n          LOGGER.log(Level.CONFIG,\"cron triggered {0}\",p);\n          try {\n            long begin_time=System.currentTimeMillis();\n            t.run();\n            long end_time=System.currentTimeMillis();\n            if ((end_time - begin_time) > (CRON_THRESHOLD * 1000)) {\n              TriggerDescriptor descriptor=t.getDescriptor();\n              String name=descriptor.getDisplayName();\n              final String msg=String.format(\"Trigger '%s' triggered by '%s' (%s) spent too much time (%s) in its execution, other timers could be delayed.\",name,p.getFullDisplayName(),p.getFullName(),Util.getTimeSpanString(end_time - begin_time));\n              LOGGER.log(Level.WARNING,msg);\n              SlowTriggerAdminMonitor.getInstance().report(descriptor.getClass(),p.getFullName(),end_time - begin_time);\n            }\n          }\n catch (          Throwable e) {\n            LOGGER.log(Level.WARNING,t.getClass().getName() + \".run() failed for \" + p,e);\n          }\n        }\n else {\n          LOGGER.log(Level.FINER,\"did not trigger {0}\",p);\n        }\n      }\n else {\n        LOGGER.log(Level.WARNING,\"The job {0} has a syntactically incorrect config and is missing the cron spec for a trigger\",p.getFullName());\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 215,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2454,
        "startLineNumber" : 275,
        "startColumnNumber" : 8,
        "endLineNumber" : 308,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (ParameterizedJobMixIn.ParameterizedJob<?,?> p : inst.allItems(ParameterizedJobMixIn.ParameterizedJob.class)) {\n  for (  Trigger t : p.getTriggers().values()) {\n    if (!(t instanceof SCMTrigger && scmd.synchronousPolling)) {\n      if (t != null && t.spec != null && t.tabs != null) {\n        LOGGER.log(Level.FINE,\"cron checking {0} with spec ‘{1}’\",new Object[]{p,t.spec.trim()});\n        if (t.tabs.check(cal)) {\n          LOGGER.log(Level.CONFIG,\"cron triggered {0}\",p);\n          try {\n            long begin_time=System.currentTimeMillis();\n            t.run();\n            long end_time=System.currentTimeMillis();\n            if ((end_time - begin_time) > (CRON_THRESHOLD * 1000)) {\n              TriggerDescriptor descriptor=t.getDescriptor();\n              String name=descriptor.getDisplayName();\n              final String msg=String.format(\"Trigger '%s' triggered by '%s' (%s) spent too much time (%s) in its execution, other timers could be delayed.\",name,p.getFullDisplayName(),p.getFullName(),Util.getTimeSpanString(end_time - begin_time));\n              LOGGER.log(Level.WARNING,msg);\n              SlowTriggerAdminMonitor.getInstance().report(descriptor.getClass(),p.getFullName(),end_time - begin_time);\n            }\n          }\n catch (          Throwable e) {\n            LOGGER.log(Level.WARNING,t.getClass().getName() + \".run() failed for \" + p,e);\n          }\n        }\n else {\n          LOGGER.log(Level.FINER,\"did not trigger {0}\",p);\n        }\n      }\n else {\n        LOGGER.log(Level.WARNING,\"The job {0} has a syntactically incorrect config and is missing the cron spec for a trigger\",p.getFullName());\n      }\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 233,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4131,
        "startLineNumber" : 245,
        "startColumnNumber" : 57,
        "endLineNumber" : 309,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Jenkins inst=Jenkins.get();\n  SCMTrigger.DescriptorImpl scmd=inst.getDescriptorByType(SCMTrigger.DescriptorImpl.class);\n  if (scmd.synchronousPolling) {\n    LOGGER.fine(\"using synchronous polling\");\n    if (previousSynchronousPolling == null || previousSynchronousPolling.isDone()) {\n      previousSynchronousPolling=scmd.getExecutor().submit(new DependencyRunner(new ProjectRunnable(){\n        public void run(        AbstractProject p){\n          for (          Trigger t : (Collection<Trigger>)p.getTriggers().values()) {\n            if (t instanceof SCMTrigger) {\n              LOGGER.fine(\"synchronously triggering SCMTrigger for project \" + t.job.getName());\n              t.run();\n            }\n          }\n        }\n      }\n));\n    }\n else {\n      LOGGER.fine(\"synchronous polling has detected unfinished jobs, will not trigger additional jobs.\");\n    }\n  }\n  for (  ParameterizedJobMixIn.ParameterizedJob<?,?> p : inst.allItems(ParameterizedJobMixIn.ParameterizedJob.class)) {\n    for (    Trigger t : p.getTriggers().values()) {\n      if (!(t instanceof SCMTrigger && scmd.synchronousPolling)) {\n        if (t != null && t.spec != null && t.tabs != null) {\n          LOGGER.log(Level.FINE,\"cron checking {0} with spec ‘{1}’\",new Object[]{p,t.spec.trim()});\n          if (t.tabs.check(cal)) {\n            LOGGER.log(Level.CONFIG,\"cron triggered {0}\",p);\n            try {\n              long begin_time=System.currentTimeMillis();\n              t.run();\n              long end_time=System.currentTimeMillis();\n              if ((end_time - begin_time) > (CRON_THRESHOLD * 1000)) {\n                TriggerDescriptor descriptor=t.getDescriptor();\n                String name=descriptor.getDisplayName();\n                final String msg=String.format(\"Trigger '%s' triggered by '%s' (%s) spent too much time (%s) in its execution, other timers could be delayed.\",name,p.getFullDisplayName(),p.getFullName(),Util.getTimeSpanString(end_time - begin_time));\n                LOGGER.log(Level.WARNING,msg);\n                SlowTriggerAdminMonitor.getInstance().report(descriptor.getClass(),p.getFullName(),end_time - begin_time);\n              }\n            }\n catch (            Throwable e) {\n              LOGGER.log(Level.WARNING,t.getClass().getName() + \".run() failed for \" + p,e);\n            }\n          }\n else {\n            LOGGER.log(Level.FINER,\"did not trigger {0}\",p);\n          }\n        }\n else {\n          LOGGER.log(Level.WARNING,\"The job {0} has a syntactically incorrect config and is missing the cron spec for a trigger\",p.getFullName());\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 344,
      "astHeight" : 23
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4184,
        "startLineNumber" : 245,
        "startColumnNumber" : 4,
        "endLineNumber" : 309,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static void checkTriggers(final Calendar cal){\n  Jenkins inst=Jenkins.get();\n  SCMTrigger.DescriptorImpl scmd=inst.getDescriptorByType(SCMTrigger.DescriptorImpl.class);\n  if (scmd.synchronousPolling) {\n    LOGGER.fine(\"using synchronous polling\");\n    if (previousSynchronousPolling == null || previousSynchronousPolling.isDone()) {\n      previousSynchronousPolling=scmd.getExecutor().submit(new DependencyRunner(new ProjectRunnable(){\n        public void run(        AbstractProject p){\n          for (          Trigger t : (Collection<Trigger>)p.getTriggers().values()) {\n            if (t instanceof SCMTrigger) {\n              LOGGER.fine(\"synchronously triggering SCMTrigger for project \" + t.job.getName());\n              t.run();\n            }\n          }\n        }\n      }\n));\n    }\n else {\n      LOGGER.fine(\"synchronous polling has detected unfinished jobs, will not trigger additional jobs.\");\n    }\n  }\n  for (  ParameterizedJobMixIn.ParameterizedJob<?,?> p : inst.allItems(ParameterizedJobMixIn.ParameterizedJob.class)) {\n    for (    Trigger t : p.getTriggers().values()) {\n      if (!(t instanceof SCMTrigger && scmd.synchronousPolling)) {\n        if (t != null && t.spec != null && t.tabs != null) {\n          LOGGER.log(Level.FINE,\"cron checking {0} with spec ‘{1}’\",new Object[]{p,t.spec.trim()});\n          if (t.tabs.check(cal)) {\n            LOGGER.log(Level.CONFIG,\"cron triggered {0}\",p);\n            try {\n              long begin_time=System.currentTimeMillis();\n              t.run();\n              long end_time=System.currentTimeMillis();\n              if ((end_time - begin_time) > (CRON_THRESHOLD * 1000)) {\n                TriggerDescriptor descriptor=t.getDescriptor();\n                String name=descriptor.getDisplayName();\n                final String msg=String.format(\"Trigger '%s' triggered by '%s' (%s) spent too much time (%s) in its execution, other timers could be delayed.\",name,p.getFullDisplayName(),p.getFullName(),Util.getTimeSpanString(end_time - begin_time));\n                LOGGER.log(Level.WARNING,msg);\n                SlowTriggerAdminMonitor.getInstance().report(descriptor.getClass(),p.getFullName(),end_time - begin_time);\n              }\n            }\n catch (            Throwable e) {\n              LOGGER.log(Level.WARNING,t.getClass().getName() + \".run() failed for \" + p,e);\n            }\n          }\n else {\n            LOGGER.log(Level.FINER,\"did not trigger {0}\",p);\n          }\n        }\n else {\n          LOGGER.log(Level.WARNING,\"The job {0} has a syntactically incorrect config and is missing the cron spec for a trigger\",p.getFullName());\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 354,
      "astHeight" : 24
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 278,
        "startColumnNumber" : 24,
        "endLineNumber" : 278,
        "endColumnNumber" : 68
      },
      "nodeContext" : "t != null && t.spec != null && t.tabs != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 15,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 278,
      "startColumnNumber" : 46,
      "endLineNumber" : 278,
      "endColumnNumber" : 50
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 278,
        "startColumnNumber" : 36,
        "endLineNumber" : 278,
        "endColumnNumber" : 50
      },
      "nodeContext" : "t.spec != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 278,
        "startColumnNumber" : 24,
        "endLineNumber" : 278,
        "endColumnNumber" : 50
      },
      "nodeContext" : "t != null && t.spec != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 278,
        "startColumnNumber" : 24,
        "endLineNumber" : 278,
        "endColumnNumber" : 68
      },
      "nodeContext" : "t != null && t.spec != null && t.tabs != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2135,
        "startLineNumber" : 278,
        "startColumnNumber" : 20,
        "endLineNumber" : 305,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (t != null && t.spec != null && t.tabs != null) {\n  LOGGER.log(Level.FINE,\"cron checking {0} with spec ‘{1}’\",new Object[]{p,t.spec.trim()});\n  if (t.tabs.check(cal)) {\n    LOGGER.log(Level.CONFIG,\"cron triggered {0}\",p);\n    try {\n      long begin_time=System.currentTimeMillis();\n      t.run();\n      long end_time=System.currentTimeMillis();\n      if ((end_time - begin_time) > (CRON_THRESHOLD * 1000)) {\n        TriggerDescriptor descriptor=t.getDescriptor();\n        String name=descriptor.getDisplayName();\n        final String msg=String.format(\"Trigger '%s' triggered by '%s' (%s) spent too much time (%s) in its execution, other timers could be delayed.\",name,p.getFullDisplayName(),p.getFullName(),Util.getTimeSpanString(end_time - begin_time));\n        LOGGER.log(Level.WARNING,msg);\n        SlowTriggerAdminMonitor.getInstance().report(descriptor.getClass(),p.getFullName(),end_time - begin_time);\n      }\n    }\n catch (    Throwable e) {\n      LOGGER.log(Level.WARNING,t.getClass().getName() + \".run() failed for \" + p,e);\n    }\n  }\n else {\n    LOGGER.log(Level.FINER,\"did not trigger {0}\",p);\n  }\n}\n else {\n  LOGGER.log(Level.WARNING,\"The job {0} has a syntactically incorrect config and is missing the cron spec for a trigger\",p.getFullName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 191,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2177,
        "startLineNumber" : 277,
        "startColumnNumber" : 75,
        "endLineNumber" : 306,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  if (t != null && t.spec != null && t.tabs != null) {\n    LOGGER.log(Level.FINE,\"cron checking {0} with spec ‘{1}’\",new Object[]{p,t.spec.trim()});\n    if (t.tabs.check(cal)) {\n      LOGGER.log(Level.CONFIG,\"cron triggered {0}\",p);\n      try {\n        long begin_time=System.currentTimeMillis();\n        t.run();\n        long end_time=System.currentTimeMillis();\n        if ((end_time - begin_time) > (CRON_THRESHOLD * 1000)) {\n          TriggerDescriptor descriptor=t.getDescriptor();\n          String name=descriptor.getDisplayName();\n          final String msg=String.format(\"Trigger '%s' triggered by '%s' (%s) spent too much time (%s) in its execution, other timers could be delayed.\",name,p.getFullDisplayName(),p.getFullName(),Util.getTimeSpanString(end_time - begin_time));\n          LOGGER.log(Level.WARNING,msg);\n          SlowTriggerAdminMonitor.getInstance().report(descriptor.getClass(),p.getFullName(),end_time - begin_time);\n        }\n      }\n catch (      Throwable e) {\n        LOGGER.log(Level.WARNING,t.getClass().getName() + \".run() failed for \" + p,e);\n      }\n    }\n else {\n      LOGGER.log(Level.FINER,\"did not trigger {0}\",p);\n    }\n  }\n else {\n    LOGGER.log(Level.WARNING,\"The job {0} has a syntactically incorrect config and is missing the cron spec for a trigger\",p.getFullName());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 192,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2236,
        "startLineNumber" : 277,
        "startColumnNumber" : 16,
        "endLineNumber" : 306,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (!(t instanceof SCMTrigger && scmd.synchronousPolling)) {\n  if (t != null && t.spec != null && t.tabs != null) {\n    LOGGER.log(Level.FINE,\"cron checking {0} with spec ‘{1}’\",new Object[]{p,t.spec.trim()});\n    if (t.tabs.check(cal)) {\n      LOGGER.log(Level.CONFIG,\"cron triggered {0}\",p);\n      try {\n        long begin_time=System.currentTimeMillis();\n        t.run();\n        long end_time=System.currentTimeMillis();\n        if ((end_time - begin_time) > (CRON_THRESHOLD * 1000)) {\n          TriggerDescriptor descriptor=t.getDescriptor();\n          String name=descriptor.getDisplayName();\n          final String msg=String.format(\"Trigger '%s' triggered by '%s' (%s) spent too much time (%s) in its execution, other timers could be delayed.\",name,p.getFullDisplayName(),p.getFullName(),Util.getTimeSpanString(end_time - begin_time));\n          LOGGER.log(Level.WARNING,msg);\n          SlowTriggerAdminMonitor.getInstance().report(descriptor.getClass(),p.getFullName(),end_time - begin_time);\n        }\n      }\n catch (      Throwable e) {\n        LOGGER.log(Level.WARNING,t.getClass().getName() + \".run() failed for \" + p,e);\n      }\n    }\n else {\n      LOGGER.log(Level.FINER,\"did not trigger {0}\",p);\n    }\n  }\n else {\n    LOGGER.log(Level.WARNING,\"The job {0} has a syntactically incorrect config and is missing the cron spec for a trigger\",p.getFullName());\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 203,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2270,
        "startLineNumber" : 276,
        "startColumnNumber" : 55,
        "endLineNumber" : 307,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (!(t instanceof SCMTrigger && scmd.synchronousPolling)) {\n    if (t != null && t.spec != null && t.tabs != null) {\n      LOGGER.log(Level.FINE,\"cron checking {0} with spec ‘{1}’\",new Object[]{p,t.spec.trim()});\n      if (t.tabs.check(cal)) {\n        LOGGER.log(Level.CONFIG,\"cron triggered {0}\",p);\n        try {\n          long begin_time=System.currentTimeMillis();\n          t.run();\n          long end_time=System.currentTimeMillis();\n          if ((end_time - begin_time) > (CRON_THRESHOLD * 1000)) {\n            TriggerDescriptor descriptor=t.getDescriptor();\n            String name=descriptor.getDisplayName();\n            final String msg=String.format(\"Trigger '%s' triggered by '%s' (%s) spent too much time (%s) in its execution, other timers could be delayed.\",name,p.getFullDisplayName(),p.getFullName(),Util.getTimeSpanString(end_time - begin_time));\n            LOGGER.log(Level.WARNING,msg);\n            SlowTriggerAdminMonitor.getInstance().report(descriptor.getClass(),p.getFullName(),end_time - begin_time);\n          }\n        }\n catch (        Throwable e) {\n          LOGGER.log(Level.WARNING,t.getClass().getName() + \".run() failed for \" + p,e);\n        }\n      }\n else {\n        LOGGER.log(Level.FINER,\"did not trigger {0}\",p);\n      }\n    }\n else {\n      LOGGER.log(Level.WARNING,\"The job {0} has a syntactically incorrect config and is missing the cron spec for a trigger\",p.getFullName());\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 204,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2313,
        "startLineNumber" : 276,
        "startColumnNumber" : 12,
        "endLineNumber" : 307,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (Trigger t : p.getTriggers().values()) {\n  if (!(t instanceof SCMTrigger && scmd.synchronousPolling)) {\n    if (t != null && t.spec != null && t.tabs != null) {\n      LOGGER.log(Level.FINE,\"cron checking {0} with spec ‘{1}’\",new Object[]{p,t.spec.trim()});\n      if (t.tabs.check(cal)) {\n        LOGGER.log(Level.CONFIG,\"cron triggered {0}\",p);\n        try {\n          long begin_time=System.currentTimeMillis();\n          t.run();\n          long end_time=System.currentTimeMillis();\n          if ((end_time - begin_time) > (CRON_THRESHOLD * 1000)) {\n            TriggerDescriptor descriptor=t.getDescriptor();\n            String name=descriptor.getDisplayName();\n            final String msg=String.format(\"Trigger '%s' triggered by '%s' (%s) spent too much time (%s) in its execution, other timers could be delayed.\",name,p.getFullDisplayName(),p.getFullName(),Util.getTimeSpanString(end_time - begin_time));\n            LOGGER.log(Level.WARNING,msg);\n            SlowTriggerAdminMonitor.getInstance().report(descriptor.getClass(),p.getFullName(),end_time - begin_time);\n          }\n        }\n catch (        Throwable e) {\n          LOGGER.log(Level.WARNING,t.getClass().getName() + \".run() failed for \" + p,e);\n        }\n      }\n else {\n        LOGGER.log(Level.FINER,\"did not trigger {0}\",p);\n      }\n    }\n else {\n      LOGGER.log(Level.WARNING,\"The job {0} has a syntactically incorrect config and is missing the cron spec for a trigger\",p.getFullName());\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 214,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2339,
        "startLineNumber" : 275,
        "startColumnNumber" : 123,
        "endLineNumber" : 308,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  for (  Trigger t : p.getTriggers().values()) {\n    if (!(t instanceof SCMTrigger && scmd.synchronousPolling)) {\n      if (t != null && t.spec != null && t.tabs != null) {\n        LOGGER.log(Level.FINE,\"cron checking {0} with spec ‘{1}’\",new Object[]{p,t.spec.trim()});\n        if (t.tabs.check(cal)) {\n          LOGGER.log(Level.CONFIG,\"cron triggered {0}\",p);\n          try {\n            long begin_time=System.currentTimeMillis();\n            t.run();\n            long end_time=System.currentTimeMillis();\n            if ((end_time - begin_time) > (CRON_THRESHOLD * 1000)) {\n              TriggerDescriptor descriptor=t.getDescriptor();\n              String name=descriptor.getDisplayName();\n              final String msg=String.format(\"Trigger '%s' triggered by '%s' (%s) spent too much time (%s) in its execution, other timers could be delayed.\",name,p.getFullDisplayName(),p.getFullName(),Util.getTimeSpanString(end_time - begin_time));\n              LOGGER.log(Level.WARNING,msg);\n              SlowTriggerAdminMonitor.getInstance().report(descriptor.getClass(),p.getFullName(),end_time - begin_time);\n            }\n          }\n catch (          Throwable e) {\n            LOGGER.log(Level.WARNING,t.getClass().getName() + \".run() failed for \" + p,e);\n          }\n        }\n else {\n          LOGGER.log(Level.FINER,\"did not trigger {0}\",p);\n        }\n      }\n else {\n        LOGGER.log(Level.WARNING,\"The job {0} has a syntactically incorrect config and is missing the cron spec for a trigger\",p.getFullName());\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 215,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2454,
        "startLineNumber" : 275,
        "startColumnNumber" : 8,
        "endLineNumber" : 308,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (ParameterizedJobMixIn.ParameterizedJob<?,?> p : inst.allItems(ParameterizedJobMixIn.ParameterizedJob.class)) {\n  for (  Trigger t : p.getTriggers().values()) {\n    if (!(t instanceof SCMTrigger && scmd.synchronousPolling)) {\n      if (t != null && t.spec != null && t.tabs != null) {\n        LOGGER.log(Level.FINE,\"cron checking {0} with spec ‘{1}’\",new Object[]{p,t.spec.trim()});\n        if (t.tabs.check(cal)) {\n          LOGGER.log(Level.CONFIG,\"cron triggered {0}\",p);\n          try {\n            long begin_time=System.currentTimeMillis();\n            t.run();\n            long end_time=System.currentTimeMillis();\n            if ((end_time - begin_time) > (CRON_THRESHOLD * 1000)) {\n              TriggerDescriptor descriptor=t.getDescriptor();\n              String name=descriptor.getDisplayName();\n              final String msg=String.format(\"Trigger '%s' triggered by '%s' (%s) spent too much time (%s) in its execution, other timers could be delayed.\",name,p.getFullDisplayName(),p.getFullName(),Util.getTimeSpanString(end_time - begin_time));\n              LOGGER.log(Level.WARNING,msg);\n              SlowTriggerAdminMonitor.getInstance().report(descriptor.getClass(),p.getFullName(),end_time - begin_time);\n            }\n          }\n catch (          Throwable e) {\n            LOGGER.log(Level.WARNING,t.getClass().getName() + \".run() failed for \" + p,e);\n          }\n        }\n else {\n          LOGGER.log(Level.FINER,\"did not trigger {0}\",p);\n        }\n      }\n else {\n        LOGGER.log(Level.WARNING,\"The job {0} has a syntactically incorrect config and is missing the cron spec for a trigger\",p.getFullName());\n      }\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 233,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4131,
        "startLineNumber" : 245,
        "startColumnNumber" : 57,
        "endLineNumber" : 309,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Jenkins inst=Jenkins.get();\n  SCMTrigger.DescriptorImpl scmd=inst.getDescriptorByType(SCMTrigger.DescriptorImpl.class);\n  if (scmd.synchronousPolling) {\n    LOGGER.fine(\"using synchronous polling\");\n    if (previousSynchronousPolling == null || previousSynchronousPolling.isDone()) {\n      previousSynchronousPolling=scmd.getExecutor().submit(new DependencyRunner(new ProjectRunnable(){\n        public void run(        AbstractProject p){\n          for (          Trigger t : (Collection<Trigger>)p.getTriggers().values()) {\n            if (t instanceof SCMTrigger) {\n              LOGGER.fine(\"synchronously triggering SCMTrigger for project \" + t.job.getName());\n              t.run();\n            }\n          }\n        }\n      }\n));\n    }\n else {\n      LOGGER.fine(\"synchronous polling has detected unfinished jobs, will not trigger additional jobs.\");\n    }\n  }\n  for (  ParameterizedJobMixIn.ParameterizedJob<?,?> p : inst.allItems(ParameterizedJobMixIn.ParameterizedJob.class)) {\n    for (    Trigger t : p.getTriggers().values()) {\n      if (!(t instanceof SCMTrigger && scmd.synchronousPolling)) {\n        if (t != null && t.spec != null && t.tabs != null) {\n          LOGGER.log(Level.FINE,\"cron checking {0} with spec ‘{1}’\",new Object[]{p,t.spec.trim()});\n          if (t.tabs.check(cal)) {\n            LOGGER.log(Level.CONFIG,\"cron triggered {0}\",p);\n            try {\n              long begin_time=System.currentTimeMillis();\n              t.run();\n              long end_time=System.currentTimeMillis();\n              if ((end_time - begin_time) > (CRON_THRESHOLD * 1000)) {\n                TriggerDescriptor descriptor=t.getDescriptor();\n                String name=descriptor.getDisplayName();\n                final String msg=String.format(\"Trigger '%s' triggered by '%s' (%s) spent too much time (%s) in its execution, other timers could be delayed.\",name,p.getFullDisplayName(),p.getFullName(),Util.getTimeSpanString(end_time - begin_time));\n                LOGGER.log(Level.WARNING,msg);\n                SlowTriggerAdminMonitor.getInstance().report(descriptor.getClass(),p.getFullName(),end_time - begin_time);\n              }\n            }\n catch (            Throwable e) {\n              LOGGER.log(Level.WARNING,t.getClass().getName() + \".run() failed for \" + p,e);\n            }\n          }\n else {\n            LOGGER.log(Level.FINER,\"did not trigger {0}\",p);\n          }\n        }\n else {\n          LOGGER.log(Level.WARNING,\"The job {0} has a syntactically incorrect config and is missing the cron spec for a trigger\",p.getFullName());\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 344,
      "astHeight" : 23
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4184,
        "startLineNumber" : 245,
        "startColumnNumber" : 4,
        "endLineNumber" : 309,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static void checkTriggers(final Calendar cal){\n  Jenkins inst=Jenkins.get();\n  SCMTrigger.DescriptorImpl scmd=inst.getDescriptorByType(SCMTrigger.DescriptorImpl.class);\n  if (scmd.synchronousPolling) {\n    LOGGER.fine(\"using synchronous polling\");\n    if (previousSynchronousPolling == null || previousSynchronousPolling.isDone()) {\n      previousSynchronousPolling=scmd.getExecutor().submit(new DependencyRunner(new ProjectRunnable(){\n        public void run(        AbstractProject p){\n          for (          Trigger t : (Collection<Trigger>)p.getTriggers().values()) {\n            if (t instanceof SCMTrigger) {\n              LOGGER.fine(\"synchronously triggering SCMTrigger for project \" + t.job.getName());\n              t.run();\n            }\n          }\n        }\n      }\n));\n    }\n else {\n      LOGGER.fine(\"synchronous polling has detected unfinished jobs, will not trigger additional jobs.\");\n    }\n  }\n  for (  ParameterizedJobMixIn.ParameterizedJob<?,?> p : inst.allItems(ParameterizedJobMixIn.ParameterizedJob.class)) {\n    for (    Trigger t : p.getTriggers().values()) {\n      if (!(t instanceof SCMTrigger && scmd.synchronousPolling)) {\n        if (t != null && t.spec != null && t.tabs != null) {\n          LOGGER.log(Level.FINE,\"cron checking {0} with spec ‘{1}’\",new Object[]{p,t.spec.trim()});\n          if (t.tabs.check(cal)) {\n            LOGGER.log(Level.CONFIG,\"cron triggered {0}\",p);\n            try {\n              long begin_time=System.currentTimeMillis();\n              t.run();\n              long end_time=System.currentTimeMillis();\n              if ((end_time - begin_time) > (CRON_THRESHOLD * 1000)) {\n                TriggerDescriptor descriptor=t.getDescriptor();\n                String name=descriptor.getDisplayName();\n                final String msg=String.format(\"Trigger '%s' triggered by '%s' (%s) spent too much time (%s) in its execution, other timers could be delayed.\",name,p.getFullDisplayName(),p.getFullName(),Util.getTimeSpanString(end_time - begin_time));\n                LOGGER.log(Level.WARNING,msg);\n                SlowTriggerAdminMonitor.getInstance().report(descriptor.getClass(),p.getFullName(),end_time - begin_time);\n              }\n            }\n catch (            Throwable e) {\n              LOGGER.log(Level.WARNING,t.getClass().getName() + \".run() failed for \" + p,e);\n            }\n          }\n else {\n            LOGGER.log(Level.FINER,\"did not trigger {0}\",p);\n          }\n        }\n else {\n          LOGGER.log(Level.WARNING,\"The job {0} has a syntactically incorrect config and is missing the cron spec for a trigger\",p.getFullName());\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 354,
      "astHeight" : 24
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 278,
        "startColumnNumber" : 24,
        "endLineNumber" : 278,
        "endColumnNumber" : 68
      },
      "nodeContext" : "t != null && t.spec != null && t.tabs != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 15,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 278,
      "startColumnNumber" : 64,
      "endLineNumber" : 278,
      "endColumnNumber" : 68
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 278,
        "startColumnNumber" : 54,
        "endLineNumber" : 278,
        "endColumnNumber" : 68
      },
      "nodeContext" : "t.tabs != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 278,
        "startColumnNumber" : 24,
        "endLineNumber" : 278,
        "endColumnNumber" : 68
      },
      "nodeContext" : "t != null && t.spec != null && t.tabs != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2135,
        "startLineNumber" : 278,
        "startColumnNumber" : 20,
        "endLineNumber" : 305,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (t != null && t.spec != null && t.tabs != null) {\n  LOGGER.log(Level.FINE,\"cron checking {0} with spec ‘{1}’\",new Object[]{p,t.spec.trim()});\n  if (t.tabs.check(cal)) {\n    LOGGER.log(Level.CONFIG,\"cron triggered {0}\",p);\n    try {\n      long begin_time=System.currentTimeMillis();\n      t.run();\n      long end_time=System.currentTimeMillis();\n      if ((end_time - begin_time) > (CRON_THRESHOLD * 1000)) {\n        TriggerDescriptor descriptor=t.getDescriptor();\n        String name=descriptor.getDisplayName();\n        final String msg=String.format(\"Trigger '%s' triggered by '%s' (%s) spent too much time (%s) in its execution, other timers could be delayed.\",name,p.getFullDisplayName(),p.getFullName(),Util.getTimeSpanString(end_time - begin_time));\n        LOGGER.log(Level.WARNING,msg);\n        SlowTriggerAdminMonitor.getInstance().report(descriptor.getClass(),p.getFullName(),end_time - begin_time);\n      }\n    }\n catch (    Throwable e) {\n      LOGGER.log(Level.WARNING,t.getClass().getName() + \".run() failed for \" + p,e);\n    }\n  }\n else {\n    LOGGER.log(Level.FINER,\"did not trigger {0}\",p);\n  }\n}\n else {\n  LOGGER.log(Level.WARNING,\"The job {0} has a syntactically incorrect config and is missing the cron spec for a trigger\",p.getFullName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 191,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2177,
        "startLineNumber" : 277,
        "startColumnNumber" : 75,
        "endLineNumber" : 306,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  if (t != null && t.spec != null && t.tabs != null) {\n    LOGGER.log(Level.FINE,\"cron checking {0} with spec ‘{1}’\",new Object[]{p,t.spec.trim()});\n    if (t.tabs.check(cal)) {\n      LOGGER.log(Level.CONFIG,\"cron triggered {0}\",p);\n      try {\n        long begin_time=System.currentTimeMillis();\n        t.run();\n        long end_time=System.currentTimeMillis();\n        if ((end_time - begin_time) > (CRON_THRESHOLD * 1000)) {\n          TriggerDescriptor descriptor=t.getDescriptor();\n          String name=descriptor.getDisplayName();\n          final String msg=String.format(\"Trigger '%s' triggered by '%s' (%s) spent too much time (%s) in its execution, other timers could be delayed.\",name,p.getFullDisplayName(),p.getFullName(),Util.getTimeSpanString(end_time - begin_time));\n          LOGGER.log(Level.WARNING,msg);\n          SlowTriggerAdminMonitor.getInstance().report(descriptor.getClass(),p.getFullName(),end_time - begin_time);\n        }\n      }\n catch (      Throwable e) {\n        LOGGER.log(Level.WARNING,t.getClass().getName() + \".run() failed for \" + p,e);\n      }\n    }\n else {\n      LOGGER.log(Level.FINER,\"did not trigger {0}\",p);\n    }\n  }\n else {\n    LOGGER.log(Level.WARNING,\"The job {0} has a syntactically incorrect config and is missing the cron spec for a trigger\",p.getFullName());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 192,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2236,
        "startLineNumber" : 277,
        "startColumnNumber" : 16,
        "endLineNumber" : 306,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (!(t instanceof SCMTrigger && scmd.synchronousPolling)) {\n  if (t != null && t.spec != null && t.tabs != null) {\n    LOGGER.log(Level.FINE,\"cron checking {0} with spec ‘{1}’\",new Object[]{p,t.spec.trim()});\n    if (t.tabs.check(cal)) {\n      LOGGER.log(Level.CONFIG,\"cron triggered {0}\",p);\n      try {\n        long begin_time=System.currentTimeMillis();\n        t.run();\n        long end_time=System.currentTimeMillis();\n        if ((end_time - begin_time) > (CRON_THRESHOLD * 1000)) {\n          TriggerDescriptor descriptor=t.getDescriptor();\n          String name=descriptor.getDisplayName();\n          final String msg=String.format(\"Trigger '%s' triggered by '%s' (%s) spent too much time (%s) in its execution, other timers could be delayed.\",name,p.getFullDisplayName(),p.getFullName(),Util.getTimeSpanString(end_time - begin_time));\n          LOGGER.log(Level.WARNING,msg);\n          SlowTriggerAdminMonitor.getInstance().report(descriptor.getClass(),p.getFullName(),end_time - begin_time);\n        }\n      }\n catch (      Throwable e) {\n        LOGGER.log(Level.WARNING,t.getClass().getName() + \".run() failed for \" + p,e);\n      }\n    }\n else {\n      LOGGER.log(Level.FINER,\"did not trigger {0}\",p);\n    }\n  }\n else {\n    LOGGER.log(Level.WARNING,\"The job {0} has a syntactically incorrect config and is missing the cron spec for a trigger\",p.getFullName());\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 203,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2270,
        "startLineNumber" : 276,
        "startColumnNumber" : 55,
        "endLineNumber" : 307,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (!(t instanceof SCMTrigger && scmd.synchronousPolling)) {\n    if (t != null && t.spec != null && t.tabs != null) {\n      LOGGER.log(Level.FINE,\"cron checking {0} with spec ‘{1}’\",new Object[]{p,t.spec.trim()});\n      if (t.tabs.check(cal)) {\n        LOGGER.log(Level.CONFIG,\"cron triggered {0}\",p);\n        try {\n          long begin_time=System.currentTimeMillis();\n          t.run();\n          long end_time=System.currentTimeMillis();\n          if ((end_time - begin_time) > (CRON_THRESHOLD * 1000)) {\n            TriggerDescriptor descriptor=t.getDescriptor();\n            String name=descriptor.getDisplayName();\n            final String msg=String.format(\"Trigger '%s' triggered by '%s' (%s) spent too much time (%s) in its execution, other timers could be delayed.\",name,p.getFullDisplayName(),p.getFullName(),Util.getTimeSpanString(end_time - begin_time));\n            LOGGER.log(Level.WARNING,msg);\n            SlowTriggerAdminMonitor.getInstance().report(descriptor.getClass(),p.getFullName(),end_time - begin_time);\n          }\n        }\n catch (        Throwable e) {\n          LOGGER.log(Level.WARNING,t.getClass().getName() + \".run() failed for \" + p,e);\n        }\n      }\n else {\n        LOGGER.log(Level.FINER,\"did not trigger {0}\",p);\n      }\n    }\n else {\n      LOGGER.log(Level.WARNING,\"The job {0} has a syntactically incorrect config and is missing the cron spec for a trigger\",p.getFullName());\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 204,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2313,
        "startLineNumber" : 276,
        "startColumnNumber" : 12,
        "endLineNumber" : 307,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (Trigger t : p.getTriggers().values()) {\n  if (!(t instanceof SCMTrigger && scmd.synchronousPolling)) {\n    if (t != null && t.spec != null && t.tabs != null) {\n      LOGGER.log(Level.FINE,\"cron checking {0} with spec ‘{1}’\",new Object[]{p,t.spec.trim()});\n      if (t.tabs.check(cal)) {\n        LOGGER.log(Level.CONFIG,\"cron triggered {0}\",p);\n        try {\n          long begin_time=System.currentTimeMillis();\n          t.run();\n          long end_time=System.currentTimeMillis();\n          if ((end_time - begin_time) > (CRON_THRESHOLD * 1000)) {\n            TriggerDescriptor descriptor=t.getDescriptor();\n            String name=descriptor.getDisplayName();\n            final String msg=String.format(\"Trigger '%s' triggered by '%s' (%s) spent too much time (%s) in its execution, other timers could be delayed.\",name,p.getFullDisplayName(),p.getFullName(),Util.getTimeSpanString(end_time - begin_time));\n            LOGGER.log(Level.WARNING,msg);\n            SlowTriggerAdminMonitor.getInstance().report(descriptor.getClass(),p.getFullName(),end_time - begin_time);\n          }\n        }\n catch (        Throwable e) {\n          LOGGER.log(Level.WARNING,t.getClass().getName() + \".run() failed for \" + p,e);\n        }\n      }\n else {\n        LOGGER.log(Level.FINER,\"did not trigger {0}\",p);\n      }\n    }\n else {\n      LOGGER.log(Level.WARNING,\"The job {0} has a syntactically incorrect config and is missing the cron spec for a trigger\",p.getFullName());\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 214,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2339,
        "startLineNumber" : 275,
        "startColumnNumber" : 123,
        "endLineNumber" : 308,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  for (  Trigger t : p.getTriggers().values()) {\n    if (!(t instanceof SCMTrigger && scmd.synchronousPolling)) {\n      if (t != null && t.spec != null && t.tabs != null) {\n        LOGGER.log(Level.FINE,\"cron checking {0} with spec ‘{1}’\",new Object[]{p,t.spec.trim()});\n        if (t.tabs.check(cal)) {\n          LOGGER.log(Level.CONFIG,\"cron triggered {0}\",p);\n          try {\n            long begin_time=System.currentTimeMillis();\n            t.run();\n            long end_time=System.currentTimeMillis();\n            if ((end_time - begin_time) > (CRON_THRESHOLD * 1000)) {\n              TriggerDescriptor descriptor=t.getDescriptor();\n              String name=descriptor.getDisplayName();\n              final String msg=String.format(\"Trigger '%s' triggered by '%s' (%s) spent too much time (%s) in its execution, other timers could be delayed.\",name,p.getFullDisplayName(),p.getFullName(),Util.getTimeSpanString(end_time - begin_time));\n              LOGGER.log(Level.WARNING,msg);\n              SlowTriggerAdminMonitor.getInstance().report(descriptor.getClass(),p.getFullName(),end_time - begin_time);\n            }\n          }\n catch (          Throwable e) {\n            LOGGER.log(Level.WARNING,t.getClass().getName() + \".run() failed for \" + p,e);\n          }\n        }\n else {\n          LOGGER.log(Level.FINER,\"did not trigger {0}\",p);\n        }\n      }\n else {\n        LOGGER.log(Level.WARNING,\"The job {0} has a syntactically incorrect config and is missing the cron spec for a trigger\",p.getFullName());\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 215,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2454,
        "startLineNumber" : 275,
        "startColumnNumber" : 8,
        "endLineNumber" : 308,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (ParameterizedJobMixIn.ParameterizedJob<?,?> p : inst.allItems(ParameterizedJobMixIn.ParameterizedJob.class)) {\n  for (  Trigger t : p.getTriggers().values()) {\n    if (!(t instanceof SCMTrigger && scmd.synchronousPolling)) {\n      if (t != null && t.spec != null && t.tabs != null) {\n        LOGGER.log(Level.FINE,\"cron checking {0} with spec ‘{1}’\",new Object[]{p,t.spec.trim()});\n        if (t.tabs.check(cal)) {\n          LOGGER.log(Level.CONFIG,\"cron triggered {0}\",p);\n          try {\n            long begin_time=System.currentTimeMillis();\n            t.run();\n            long end_time=System.currentTimeMillis();\n            if ((end_time - begin_time) > (CRON_THRESHOLD * 1000)) {\n              TriggerDescriptor descriptor=t.getDescriptor();\n              String name=descriptor.getDisplayName();\n              final String msg=String.format(\"Trigger '%s' triggered by '%s' (%s) spent too much time (%s) in its execution, other timers could be delayed.\",name,p.getFullDisplayName(),p.getFullName(),Util.getTimeSpanString(end_time - begin_time));\n              LOGGER.log(Level.WARNING,msg);\n              SlowTriggerAdminMonitor.getInstance().report(descriptor.getClass(),p.getFullName(),end_time - begin_time);\n            }\n          }\n catch (          Throwable e) {\n            LOGGER.log(Level.WARNING,t.getClass().getName() + \".run() failed for \" + p,e);\n          }\n        }\n else {\n          LOGGER.log(Level.FINER,\"did not trigger {0}\",p);\n        }\n      }\n else {\n        LOGGER.log(Level.WARNING,\"The job {0} has a syntactically incorrect config and is missing the cron spec for a trigger\",p.getFullName());\n      }\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 233,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4131,
        "startLineNumber" : 245,
        "startColumnNumber" : 57,
        "endLineNumber" : 309,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Jenkins inst=Jenkins.get();\n  SCMTrigger.DescriptorImpl scmd=inst.getDescriptorByType(SCMTrigger.DescriptorImpl.class);\n  if (scmd.synchronousPolling) {\n    LOGGER.fine(\"using synchronous polling\");\n    if (previousSynchronousPolling == null || previousSynchronousPolling.isDone()) {\n      previousSynchronousPolling=scmd.getExecutor().submit(new DependencyRunner(new ProjectRunnable(){\n        public void run(        AbstractProject p){\n          for (          Trigger t : (Collection<Trigger>)p.getTriggers().values()) {\n            if (t instanceof SCMTrigger) {\n              LOGGER.fine(\"synchronously triggering SCMTrigger for project \" + t.job.getName());\n              t.run();\n            }\n          }\n        }\n      }\n));\n    }\n else {\n      LOGGER.fine(\"synchronous polling has detected unfinished jobs, will not trigger additional jobs.\");\n    }\n  }\n  for (  ParameterizedJobMixIn.ParameterizedJob<?,?> p : inst.allItems(ParameterizedJobMixIn.ParameterizedJob.class)) {\n    for (    Trigger t : p.getTriggers().values()) {\n      if (!(t instanceof SCMTrigger && scmd.synchronousPolling)) {\n        if (t != null && t.spec != null && t.tabs != null) {\n          LOGGER.log(Level.FINE,\"cron checking {0} with spec ‘{1}’\",new Object[]{p,t.spec.trim()});\n          if (t.tabs.check(cal)) {\n            LOGGER.log(Level.CONFIG,\"cron triggered {0}\",p);\n            try {\n              long begin_time=System.currentTimeMillis();\n              t.run();\n              long end_time=System.currentTimeMillis();\n              if ((end_time - begin_time) > (CRON_THRESHOLD * 1000)) {\n                TriggerDescriptor descriptor=t.getDescriptor();\n                String name=descriptor.getDisplayName();\n                final String msg=String.format(\"Trigger '%s' triggered by '%s' (%s) spent too much time (%s) in its execution, other timers could be delayed.\",name,p.getFullDisplayName(),p.getFullName(),Util.getTimeSpanString(end_time - begin_time));\n                LOGGER.log(Level.WARNING,msg);\n                SlowTriggerAdminMonitor.getInstance().report(descriptor.getClass(),p.getFullName(),end_time - begin_time);\n              }\n            }\n catch (            Throwable e) {\n              LOGGER.log(Level.WARNING,t.getClass().getName() + \".run() failed for \" + p,e);\n            }\n          }\n else {\n            LOGGER.log(Level.FINER,\"did not trigger {0}\",p);\n          }\n        }\n else {\n          LOGGER.log(Level.WARNING,\"The job {0} has a syntactically incorrect config and is missing the cron spec for a trigger\",p.getFullName());\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 344,
      "astHeight" : 23
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4184,
        "startLineNumber" : 245,
        "startColumnNumber" : 4,
        "endLineNumber" : 309,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static void checkTriggers(final Calendar cal){\n  Jenkins inst=Jenkins.get();\n  SCMTrigger.DescriptorImpl scmd=inst.getDescriptorByType(SCMTrigger.DescriptorImpl.class);\n  if (scmd.synchronousPolling) {\n    LOGGER.fine(\"using synchronous polling\");\n    if (previousSynchronousPolling == null || previousSynchronousPolling.isDone()) {\n      previousSynchronousPolling=scmd.getExecutor().submit(new DependencyRunner(new ProjectRunnable(){\n        public void run(        AbstractProject p){\n          for (          Trigger t : (Collection<Trigger>)p.getTriggers().values()) {\n            if (t instanceof SCMTrigger) {\n              LOGGER.fine(\"synchronously triggering SCMTrigger for project \" + t.job.getName());\n              t.run();\n            }\n          }\n        }\n      }\n));\n    }\n else {\n      LOGGER.fine(\"synchronous polling has detected unfinished jobs, will not trigger additional jobs.\");\n    }\n  }\n  for (  ParameterizedJobMixIn.ParameterizedJob<?,?> p : inst.allItems(ParameterizedJobMixIn.ParameterizedJob.class)) {\n    for (    Trigger t : p.getTriggers().values()) {\n      if (!(t instanceof SCMTrigger && scmd.synchronousPolling)) {\n        if (t != null && t.spec != null && t.tabs != null) {\n          LOGGER.log(Level.FINE,\"cron checking {0} with spec ‘{1}’\",new Object[]{p,t.spec.trim()});\n          if (t.tabs.check(cal)) {\n            LOGGER.log(Level.CONFIG,\"cron triggered {0}\",p);\n            try {\n              long begin_time=System.currentTimeMillis();\n              t.run();\n              long end_time=System.currentTimeMillis();\n              if ((end_time - begin_time) > (CRON_THRESHOLD * 1000)) {\n                TriggerDescriptor descriptor=t.getDescriptor();\n                String name=descriptor.getDisplayName();\n                final String msg=String.format(\"Trigger '%s' triggered by '%s' (%s) spent too much time (%s) in its execution, other timers could be delayed.\",name,p.getFullDisplayName(),p.getFullName(),Util.getTimeSpanString(end_time - begin_time));\n                LOGGER.log(Level.WARNING,msg);\n                SlowTriggerAdminMonitor.getInstance().report(descriptor.getClass(),p.getFullName(),end_time - begin_time);\n              }\n            }\n catch (            Throwable e) {\n              LOGGER.log(Level.WARNING,t.getClass().getName() + \".run() failed for \" + p,e);\n            }\n          }\n else {\n            LOGGER.log(Level.FINER,\"did not trigger {0}\",p);\n          }\n        }\n else {\n          LOGGER.log(Level.WARNING,\"The job {0} has a syntactically incorrect config and is missing the cron spec for a trigger\",p.getFullName());\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 354,
      "astHeight" : 24
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 278,
        "startColumnNumber" : 24,
        "endLineNumber" : 278,
        "endColumnNumber" : 68
      },
      "nodeContext" : "t != null && t.spec != null && t.tabs != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 15,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "null"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 254,
    "startColumnNumber" : 46,
    "endLineNumber" : 254,
    "endColumnNumber" : 50
  }, {
    "charLength" : 4,
    "startLineNumber" : 278,
    "startColumnNumber" : 28,
    "endLineNumber" : 278,
    "endColumnNumber" : 32
  }, {
    "charLength" : 4,
    "startLineNumber" : 278,
    "startColumnNumber" : 46,
    "endLineNumber" : 278,
    "endColumnNumber" : 50
  }, {
    "charLength" : 4,
    "startLineNumber" : 278,
    "startColumnNumber" : 64,
    "endLineNumber" : 278,
    "endColumnNumber" : 68
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 10
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 10
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 9
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 1
  } ]
}