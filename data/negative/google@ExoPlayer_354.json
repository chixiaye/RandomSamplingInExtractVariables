{
  "id" : 354,
  "expression" : "C.UUID_NIL",
  "projectName" : "google@ExoPlayer",
  "commitID" : "4803ab3bd12b71fc32150e96475c0e16aaf6ddc5",
  "filePath" : "/library/extractor/src/main/java/com/google/android/exoplayer2/extractor/mkv/MatroskaExtractor.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "C.UUID_NIL",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 753,
      "startColumnNumber" : 22,
      "endLineNumber" : 753,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 110,
        "startLineNumber" : 752,
        "startColumnNumber" : 18,
        "endLineNumber" : 753,
        "endColumnNumber" : 94
      },
      "nodeContext" : "new SchemeData(C.UUID_NIL,MimeTypes.VIDEO_WEBM,currentTrack.cryptoData.encryptionKey)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 14,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 146,
        "startLineNumber" : 751,
        "startColumnNumber" : 14,
        "endLineNumber" : 753,
        "endColumnNumber" : 95
      },
      "nodeContext" : "new DrmInitData(new SchemeData(C.UUID_NIL,MimeTypes.VIDEO_WEBM,currentTrack.cryptoData.encryptionKey))",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 187,
        "startLineNumber" : 750,
        "startColumnNumber" : 10,
        "endLineNumber" : 753,
        "endColumnNumber" : 95
      },
      "nodeContext" : "currentTrack.drmInitData=new DrmInitData(new SchemeData(C.UUID_NIL,MimeTypes.VIDEO_WEBM,currentTrack.cryptoData.encryptionKey))",
      "nodeType" : "Assignment",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 188,
        "startLineNumber" : 750,
        "startColumnNumber" : 10,
        "endLineNumber" : 753,
        "endColumnNumber" : 96
      },
      "nodeContext" : "currentTrack.drmInitData=new DrmInitData(new SchemeData(C.UUID_NIL,MimeTypes.VIDEO_WEBM,currentTrack.cryptoData.encryptionKey));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 22,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 429,
        "startLineNumber" : 745,
        "startColumnNumber" : 47,
        "endLineNumber" : 754,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (currentTrack.cryptoData == null) {\n    throw ParserException.createForMalformedContainer(\"Encrypted Track found but ContentEncKeyID was not found\",null);\n  }\n  currentTrack.drmInitData=new DrmInitData(new SchemeData(C.UUID_NIL,MimeTypes.VIDEO_WEBM,currentTrack.cryptoData.encryptionKey));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 36,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 468,
        "startLineNumber" : 745,
        "startColumnNumber" : 8,
        "endLineNumber" : 754,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (currentTrack.hasContentEncryption) {\n  if (currentTrack.cryptoData == null) {\n    throw ParserException.createForMalformedContainer(\"Encrypted Track found but ContentEncKeyID was not found\",null);\n  }\n  currentTrack.drmInitData=new DrmInitData(new SchemeData(C.UUID_NIL,MimeTypes.VIDEO_WEBM,currentTrack.cryptoData.encryptionKey));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 40,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3915,
        "startLineNumber" : 688,
        "startColumnNumber" : 4,
        "endLineNumber" : 785,
        "endColumnNumber" : 5
      },
      "nodeContext" : "switch (id) {\ncase ID_SEGMENT_INFO:  if (timecodeScale == C.TIME_UNSET) {\n    timecodeScale=1000000;\n  }\nif (durationTimecode != C.TIME_UNSET) {\n  durationUs=scaleTimecodeToUs(durationTimecode);\n}\nbreak;\ncase ID_SEEK:if (seekEntryId == UNSET_ENTRY_ID || seekEntryPosition == C.POSITION_UNSET) {\nthrow ParserException.createForMalformedContainer(\"Mandatory element SeekID or SeekPosition not found\",null);\n}\nif (seekEntryId == ID_CUES) {\ncuesContentPosition=seekEntryPosition;\n}\nbreak;\ncase ID_CUES:if (!sentSeekMap) {\nextractorOutput.seekMap(buildSeekMap(cueTimesUs,cueClusterPositions));\nsentSeekMap=true;\n}\n else {\n}\nthis.cueTimesUs=null;\nthis.cueClusterPositions=null;\nbreak;\ncase ID_BLOCK_GROUP:if (blockState != BLOCK_STATE_DATA) {\nreturn;\n}\nint sampleOffset=0;\nfor (int i=0; i < blockSampleCount; i++) {\nsampleOffset+=blockSampleSizes[i];\n}\nTrack track=tracks.get(blockTrackNumber);\ntrack.assertOutputInitialized();\nfor (int i=0; i < blockSampleCount; i++) {\nlong sampleTimeUs=blockTimeUs + (i * track.defaultSampleDurationNs) / 1000;\nint sampleFlags=blockFlags;\nif (i == 0 && !blockHasReferenceBlock) {\nsampleFlags|=C.BUFFER_FLAG_KEY_FRAME;\n}\nint sampleSize=blockSampleSizes[i];\nsampleOffset-=sampleSize;\ncommitSampleToOutput(track,sampleTimeUs,sampleFlags,sampleSize,sampleOffset);\n}\nblockState=BLOCK_STATE_START;\nbreak;\ncase ID_CONTENT_ENCODING:assertInTrackEntry(id);\nif (currentTrack.hasContentEncryption) {\nif (currentTrack.cryptoData == null) {\nthrow ParserException.createForMalformedContainer(\"Encrypted Track found but ContentEncKeyID was not found\",null);\n}\ncurrentTrack.drmInitData=new DrmInitData(new SchemeData(C.UUID_NIL,MimeTypes.VIDEO_WEBM,currentTrack.cryptoData.encryptionKey));\n}\nbreak;\ncase ID_CONTENT_ENCODINGS:assertInTrackEntry(id);\nif (currentTrack.hasContentEncryption && currentTrack.sampleStrippedBytes != null) {\nthrow ParserException.createForMalformedContainer(\"Combining encryption and compression is not supported\",null);\n}\nbreak;\ncase ID_TRACK_ENTRY:Track currentTrack=checkStateNotNull(this.currentTrack);\nif (currentTrack.codecId == null) {\nthrow ParserException.createForMalformedContainer(\"CodecId is missing in TrackEntry element\",null);\n}\n else {\nif (isCodecSupported(currentTrack.codecId)) {\ncurrentTrack.initializeOutput(extractorOutput,currentTrack.number);\ntracks.put(currentTrack.number,currentTrack);\n}\n}\nthis.currentTrack=null;\nbreak;\ncase ID_TRACKS:if (tracks.size() == 0) {\nthrow ParserException.createForMalformedContainer(\"No valid tracks were found\",null);\n}\nextractorOutput.endTracks();\nbreak;\ndefault:break;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 352,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3950,
        "startLineNumber" : 686,
        "startColumnNumber" : 65,
        "endLineNumber" : 786,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  assertInitialized();\nswitch (id) {\ncase ID_SEGMENT_INFO:    if (timecodeScale == C.TIME_UNSET) {\n      timecodeScale=1000000;\n    }\n  if (durationTimecode != C.TIME_UNSET) {\n    durationUs=scaleTimecodeToUs(durationTimecode);\n  }\nbreak;\ncase ID_SEEK:if (seekEntryId == UNSET_ENTRY_ID || seekEntryPosition == C.POSITION_UNSET) {\nthrow ParserException.createForMalformedContainer(\"Mandatory element SeekID or SeekPosition not found\",null);\n}\nif (seekEntryId == ID_CUES) {\ncuesContentPosition=seekEntryPosition;\n}\nbreak;\ncase ID_CUES:if (!sentSeekMap) {\nextractorOutput.seekMap(buildSeekMap(cueTimesUs,cueClusterPositions));\nsentSeekMap=true;\n}\n else {\n}\nthis.cueTimesUs=null;\nthis.cueClusterPositions=null;\nbreak;\ncase ID_BLOCK_GROUP:if (blockState != BLOCK_STATE_DATA) {\nreturn;\n}\nint sampleOffset=0;\nfor (int i=0; i < blockSampleCount; i++) {\nsampleOffset+=blockSampleSizes[i];\n}\nTrack track=tracks.get(blockTrackNumber);\ntrack.assertOutputInitialized();\nfor (int i=0; i < blockSampleCount; i++) {\nlong sampleTimeUs=blockTimeUs + (i * track.defaultSampleDurationNs) / 1000;\nint sampleFlags=blockFlags;\nif (i == 0 && !blockHasReferenceBlock) {\nsampleFlags|=C.BUFFER_FLAG_KEY_FRAME;\n}\nint sampleSize=blockSampleSizes[i];\nsampleOffset-=sampleSize;\ncommitSampleToOutput(track,sampleTimeUs,sampleFlags,sampleSize,sampleOffset);\n}\nblockState=BLOCK_STATE_START;\nbreak;\ncase ID_CONTENT_ENCODING:assertInTrackEntry(id);\nif (currentTrack.hasContentEncryption) {\nif (currentTrack.cryptoData == null) {\nthrow ParserException.createForMalformedContainer(\"Encrypted Track found but ContentEncKeyID was not found\",null);\n}\ncurrentTrack.drmInitData=new DrmInitData(new SchemeData(C.UUID_NIL,MimeTypes.VIDEO_WEBM,currentTrack.cryptoData.encryptionKey));\n}\nbreak;\ncase ID_CONTENT_ENCODINGS:assertInTrackEntry(id);\nif (currentTrack.hasContentEncryption && currentTrack.sampleStrippedBytes != null) {\nthrow ParserException.createForMalformedContainer(\"Combining encryption and compression is not supported\",null);\n}\nbreak;\ncase ID_TRACK_ENTRY:Track currentTrack=checkStateNotNull(this.currentTrack);\nif (currentTrack.codecId == null) {\nthrow ParserException.createForMalformedContainer(\"CodecId is missing in TrackEntry element\",null);\n}\n else {\nif (isCodecSupported(currentTrack.codecId)) {\ncurrentTrack.initializeOutput(extractorOutput,currentTrack.number);\ntracks.put(currentTrack.number,currentTrack);\n}\n}\nthis.currentTrack=null;\nbreak;\ncase ID_TRACKS:if (tracks.size() == 0) {\nthrow ParserException.createForMalformedContainer(\"No valid tracks were found\",null);\n}\nextractorOutput.endTracks();\nbreak;\ndefault:break;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 356,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4150,
        "startLineNumber" : 680,
        "startColumnNumber" : 2,
        "endLineNumber" : 786,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Called when the end of a master element is encountered.\n * @see EbmlProcessor#endMasterElement(int)\n */\n@CallSuper protected void endMasterElement(int id) throws ParserException {\n  assertInitialized();\nswitch (id) {\ncase ID_SEGMENT_INFO:    if (timecodeScale == C.TIME_UNSET) {\n      timecodeScale=1000000;\n    }\n  if (durationTimecode != C.TIME_UNSET) {\n    durationUs=scaleTimecodeToUs(durationTimecode);\n  }\nbreak;\ncase ID_SEEK:if (seekEntryId == UNSET_ENTRY_ID || seekEntryPosition == C.POSITION_UNSET) {\nthrow ParserException.createForMalformedContainer(\"Mandatory element SeekID or SeekPosition not found\",null);\n}\nif (seekEntryId == ID_CUES) {\ncuesContentPosition=seekEntryPosition;\n}\nbreak;\ncase ID_CUES:if (!sentSeekMap) {\nextractorOutput.seekMap(buildSeekMap(cueTimesUs,cueClusterPositions));\nsentSeekMap=true;\n}\n else {\n}\nthis.cueTimesUs=null;\nthis.cueClusterPositions=null;\nbreak;\ncase ID_BLOCK_GROUP:if (blockState != BLOCK_STATE_DATA) {\nreturn;\n}\nint sampleOffset=0;\nfor (int i=0; i < blockSampleCount; i++) {\nsampleOffset+=blockSampleSizes[i];\n}\nTrack track=tracks.get(blockTrackNumber);\ntrack.assertOutputInitialized();\nfor (int i=0; i < blockSampleCount; i++) {\nlong sampleTimeUs=blockTimeUs + (i * track.defaultSampleDurationNs) / 1000;\nint sampleFlags=blockFlags;\nif (i == 0 && !blockHasReferenceBlock) {\nsampleFlags|=C.BUFFER_FLAG_KEY_FRAME;\n}\nint sampleSize=blockSampleSizes[i];\nsampleOffset-=sampleSize;\ncommitSampleToOutput(track,sampleTimeUs,sampleFlags,sampleSize,sampleOffset);\n}\nblockState=BLOCK_STATE_START;\nbreak;\ncase ID_CONTENT_ENCODING:assertInTrackEntry(id);\nif (currentTrack.hasContentEncryption) {\nif (currentTrack.cryptoData == null) {\nthrow ParserException.createForMalformedContainer(\"Encrypted Track found but ContentEncKeyID was not found\",null);\n}\ncurrentTrack.drmInitData=new DrmInitData(new SchemeData(C.UUID_NIL,MimeTypes.VIDEO_WEBM,currentTrack.cryptoData.encryptionKey));\n}\nbreak;\ncase ID_CONTENT_ENCODINGS:assertInTrackEntry(id);\nif (currentTrack.hasContentEncryption && currentTrack.sampleStrippedBytes != null) {\nthrow ParserException.createForMalformedContainer(\"Combining encryption and compression is not supported\",null);\n}\nbreak;\ncase ID_TRACK_ENTRY:Track currentTrack=checkStateNotNull(this.currentTrack);\nif (currentTrack.codecId == null) {\nthrow ParserException.createForMalformedContainer(\"CodecId is missing in TrackEntry element\",null);\n}\n else {\nif (isCodecSupported(currentTrack.codecId)) {\ncurrentTrack.initializeOutput(extractorOutput,currentTrack.number);\ntracks.put(currentTrack.number,currentTrack);\n}\n}\nthis.currentTrack=null;\nbreak;\ncase ID_TRACKS:if (tracks.size() == 0) {\nthrow ParserException.createForMalformedContainer(\"No valid tracks were found\",null);\n}\nextractorOutput.endTracks();\nbreak;\ndefault:break;\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 368,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 110,
        "startLineNumber" : 752,
        "startColumnNumber" : 18,
        "endLineNumber" : 753,
        "endColumnNumber" : 94
      },
      "nodeContext" : "new SchemeData(C.UUID_NIL,MimeTypes.VIDEO_WEBM,currentTrack.cryptoData.encryptionKey)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 14,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "java.util.UUID"
  } ],
  "positionList" : [ {
    "charLength" : 10,
    "startLineNumber" : 753,
    "startColumnNumber" : 22,
    "endLineNumber" : 753,
    "endColumnNumber" : 32
  } ],
  "layoutRelationDataList" : [ ]
}