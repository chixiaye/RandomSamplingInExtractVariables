{
  "id" : 93,
  "expression" : "branchSession",
  "projectName" : "seata@seata",
  "commitID" : "eb96fbe11f007662f891c7fc3d3de627179b2189",
  "filePath" : "server/src/main/java/com/alibaba/fescar/server/lock/DefaultLockManagerImpl.java",
  "occurrences" : 7,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "branchSession",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 43,
      "startColumnNumber" : 28,
      "endLineNumber" : 43,
      "endColumnNumber" : 41
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 43,
        "startColumnNumber" : 28,
        "endLineNumber" : 43,
        "endColumnNumber" : 57
      },
      "nodeContext" : "branchSession.getResourceId()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 43,
        "startColumnNumber" : 15,
        "endLineNumber" : 43,
        "endColumnNumber" : 57
      },
      "nodeContext" : "resourceId=branchSession.getResourceId()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 43,
        "startColumnNumber" : 8,
        "endLineNumber" : 43,
        "endColumnNumber" : 58
      },
      "nodeContext" : "String resourceId=branchSession.getResourceId();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3171,
        "startLineNumber" : 42,
        "startColumnNumber" : 88,
        "endLineNumber" : 103,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String resourceId=branchSession.getResourceId();\n  long transactionId=branchSession.getTransactionId();\n  ConcurrentHashMap<String,ConcurrentHashMap<Integer,Map<String,Long>>> dbLockMap=LOCK_MAP.get(resourceId);\n  if (dbLockMap == null) {\n    LOCK_MAP.putIfAbsent(resourceId,new ConcurrentHashMap<String,ConcurrentHashMap<Integer,Map<String,Long>>>());\n    dbLockMap=LOCK_MAP.get(resourceId);\n  }\n  ConcurrentHashMap<Map<String,Long>,Set<String>> bucketHolder=branchSession.getLockHolder();\n  String lockKey=branchSession.getLockKey();\n  if (StringUtils.isEmpty(lockKey)) {\n    return true;\n  }\n  String[] tableGroupedLockKeys=lockKey.split(\";\");\n  for (  String tableGroupedLockKey : tableGroupedLockKeys) {\n    int idx=tableGroupedLockKey.indexOf(\":\");\n    if (idx < 0) {\n      branchSession.unlock();\n      throw new ShouldNeverHappenException(\"Wrong format of LOCK KEYS: \" + branchSession.getLockKey());\n    }\n    String tableName=tableGroupedLockKey.substring(0,idx);\n    String mergedPKs=tableGroupedLockKey.substring(idx + 1);\n    ConcurrentHashMap<Integer,Map<String,Long>> tableLockMap=dbLockMap.get(tableName);\n    if (tableLockMap == null) {\n      dbLockMap.putIfAbsent(tableName,new ConcurrentHashMap<Integer,Map<String,Long>>());\n      tableLockMap=dbLockMap.get(tableName);\n    }\n    String[] pks=mergedPKs.split(\",\");\n    for (    String pk : pks) {\n      int bucketId=pk.hashCode() % BUCKET_PER_TABLE;\n      Map<String,Long> bucketLockMap=tableLockMap.get(bucketId);\n      if (bucketLockMap == null) {\n        tableLockMap.putIfAbsent(bucketId,new HashMap<String,Long>());\n        bucketLockMap=tableLockMap.get(bucketId);\n      }\nsynchronized (bucketLockMap) {\n        Long lockingTransactionId=bucketLockMap.get(pk);\n        if (lockingTransactionId == null) {\n          bucketLockMap.put(pk,transactionId);\n          Set<String> keysInHolder=bucketHolder.get(bucketLockMap);\n          if (keysInHolder == null) {\n            bucketHolder.putIfAbsent(bucketLockMap,new ConcurrentSet<String>());\n            keysInHolder=bucketHolder.get(bucketLockMap);\n          }\n          keysInHolder.add(pk);\n        }\n else         if (lockingTransactionId.longValue() == transactionId) {\n          continue;\n        }\n else {\n          LOGGER.info(\"Global lock on [\" + tableName + \":\"+ pk+ \"] is holding by \"+ lockingTransactionId);\n          branchSession.unlock();\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 383,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3269,
        "startLineNumber" : 41,
        "startColumnNumber" : 4,
        "endLineNumber" : 103,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public boolean acquireLock(BranchSession branchSession) throws TransactionException {\n  String resourceId=branchSession.getResourceId();\n  long transactionId=branchSession.getTransactionId();\n  ConcurrentHashMap<String,ConcurrentHashMap<Integer,Map<String,Long>>> dbLockMap=LOCK_MAP.get(resourceId);\n  if (dbLockMap == null) {\n    LOCK_MAP.putIfAbsent(resourceId,new ConcurrentHashMap<String,ConcurrentHashMap<Integer,Map<String,Long>>>());\n    dbLockMap=LOCK_MAP.get(resourceId);\n  }\n  ConcurrentHashMap<Map<String,Long>,Set<String>> bucketHolder=branchSession.getLockHolder();\n  String lockKey=branchSession.getLockKey();\n  if (StringUtils.isEmpty(lockKey)) {\n    return true;\n  }\n  String[] tableGroupedLockKeys=lockKey.split(\";\");\n  for (  String tableGroupedLockKey : tableGroupedLockKeys) {\n    int idx=tableGroupedLockKey.indexOf(\":\");\n    if (idx < 0) {\n      branchSession.unlock();\n      throw new ShouldNeverHappenException(\"Wrong format of LOCK KEYS: \" + branchSession.getLockKey());\n    }\n    String tableName=tableGroupedLockKey.substring(0,idx);\n    String mergedPKs=tableGroupedLockKey.substring(idx + 1);\n    ConcurrentHashMap<Integer,Map<String,Long>> tableLockMap=dbLockMap.get(tableName);\n    if (tableLockMap == null) {\n      dbLockMap.putIfAbsent(tableName,new ConcurrentHashMap<Integer,Map<String,Long>>());\n      tableLockMap=dbLockMap.get(tableName);\n    }\n    String[] pks=mergedPKs.split(\",\");\n    for (    String pk : pks) {\n      int bucketId=pk.hashCode() % BUCKET_PER_TABLE;\n      Map<String,Long> bucketLockMap=tableLockMap.get(bucketId);\n      if (bucketLockMap == null) {\n        tableLockMap.putIfAbsent(bucketId,new HashMap<String,Long>());\n        bucketLockMap=tableLockMap.get(bucketId);\n      }\nsynchronized (bucketLockMap) {\n        Long lockingTransactionId=bucketLockMap.get(pk);\n        if (lockingTransactionId == null) {\n          bucketLockMap.put(pk,transactionId);\n          Set<String> keysInHolder=bucketHolder.get(bucketLockMap);\n          if (keysInHolder == null) {\n            bucketHolder.putIfAbsent(bucketLockMap,new ConcurrentSet<String>());\n            keysInHolder=bucketHolder.get(bucketLockMap);\n          }\n          keysInHolder.add(pk);\n        }\n else         if (lockingTransactionId.longValue() == transactionId) {\n          continue;\n        }\n else {\n          LOGGER.info(\"Global lock on [\" + tableName + \":\"+ pk+ \"] is holding by \"+ lockingTransactionId);\n          branchSession.unlock();\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 395,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 43,
        "startColumnNumber" : 8,
        "endLineNumber" : 43,
        "endColumnNumber" : 58
      },
      "nodeContext" : "String resourceId=branchSession.getResourceId();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.alibaba.fescar.server.session.BranchSession"
  }, {
    "nodeContext" : "branchSession",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 44,
      "startColumnNumber" : 29,
      "endLineNumber" : 44,
      "endColumnNumber" : 42
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 44,
        "startColumnNumber" : 29,
        "endLineNumber" : 44,
        "endColumnNumber" : 61
      },
      "nodeContext" : "branchSession.getTransactionId()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 44,
        "startColumnNumber" : 13,
        "endLineNumber" : 44,
        "endColumnNumber" : 61
      },
      "nodeContext" : "transactionId=branchSession.getTransactionId()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 44,
        "startColumnNumber" : 8,
        "endLineNumber" : 44,
        "endColumnNumber" : 62
      },
      "nodeContext" : "long transactionId=branchSession.getTransactionId();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3171,
        "startLineNumber" : 42,
        "startColumnNumber" : 88,
        "endLineNumber" : 103,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String resourceId=branchSession.getResourceId();\n  long transactionId=branchSession.getTransactionId();\n  ConcurrentHashMap<String,ConcurrentHashMap<Integer,Map<String,Long>>> dbLockMap=LOCK_MAP.get(resourceId);\n  if (dbLockMap == null) {\n    LOCK_MAP.putIfAbsent(resourceId,new ConcurrentHashMap<String,ConcurrentHashMap<Integer,Map<String,Long>>>());\n    dbLockMap=LOCK_MAP.get(resourceId);\n  }\n  ConcurrentHashMap<Map<String,Long>,Set<String>> bucketHolder=branchSession.getLockHolder();\n  String lockKey=branchSession.getLockKey();\n  if (StringUtils.isEmpty(lockKey)) {\n    return true;\n  }\n  String[] tableGroupedLockKeys=lockKey.split(\";\");\n  for (  String tableGroupedLockKey : tableGroupedLockKeys) {\n    int idx=tableGroupedLockKey.indexOf(\":\");\n    if (idx < 0) {\n      branchSession.unlock();\n      throw new ShouldNeverHappenException(\"Wrong format of LOCK KEYS: \" + branchSession.getLockKey());\n    }\n    String tableName=tableGroupedLockKey.substring(0,idx);\n    String mergedPKs=tableGroupedLockKey.substring(idx + 1);\n    ConcurrentHashMap<Integer,Map<String,Long>> tableLockMap=dbLockMap.get(tableName);\n    if (tableLockMap == null) {\n      dbLockMap.putIfAbsent(tableName,new ConcurrentHashMap<Integer,Map<String,Long>>());\n      tableLockMap=dbLockMap.get(tableName);\n    }\n    String[] pks=mergedPKs.split(\",\");\n    for (    String pk : pks) {\n      int bucketId=pk.hashCode() % BUCKET_PER_TABLE;\n      Map<String,Long> bucketLockMap=tableLockMap.get(bucketId);\n      if (bucketLockMap == null) {\n        tableLockMap.putIfAbsent(bucketId,new HashMap<String,Long>());\n        bucketLockMap=tableLockMap.get(bucketId);\n      }\nsynchronized (bucketLockMap) {\n        Long lockingTransactionId=bucketLockMap.get(pk);\n        if (lockingTransactionId == null) {\n          bucketLockMap.put(pk,transactionId);\n          Set<String> keysInHolder=bucketHolder.get(bucketLockMap);\n          if (keysInHolder == null) {\n            bucketHolder.putIfAbsent(bucketLockMap,new ConcurrentSet<String>());\n            keysInHolder=bucketHolder.get(bucketLockMap);\n          }\n          keysInHolder.add(pk);\n        }\n else         if (lockingTransactionId.longValue() == transactionId) {\n          continue;\n        }\n else {\n          LOGGER.info(\"Global lock on [\" + tableName + \":\"+ pk+ \"] is holding by \"+ lockingTransactionId);\n          branchSession.unlock();\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 383,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3269,
        "startLineNumber" : 41,
        "startColumnNumber" : 4,
        "endLineNumber" : 103,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public boolean acquireLock(BranchSession branchSession) throws TransactionException {\n  String resourceId=branchSession.getResourceId();\n  long transactionId=branchSession.getTransactionId();\n  ConcurrentHashMap<String,ConcurrentHashMap<Integer,Map<String,Long>>> dbLockMap=LOCK_MAP.get(resourceId);\n  if (dbLockMap == null) {\n    LOCK_MAP.putIfAbsent(resourceId,new ConcurrentHashMap<String,ConcurrentHashMap<Integer,Map<String,Long>>>());\n    dbLockMap=LOCK_MAP.get(resourceId);\n  }\n  ConcurrentHashMap<Map<String,Long>,Set<String>> bucketHolder=branchSession.getLockHolder();\n  String lockKey=branchSession.getLockKey();\n  if (StringUtils.isEmpty(lockKey)) {\n    return true;\n  }\n  String[] tableGroupedLockKeys=lockKey.split(\";\");\n  for (  String tableGroupedLockKey : tableGroupedLockKeys) {\n    int idx=tableGroupedLockKey.indexOf(\":\");\n    if (idx < 0) {\n      branchSession.unlock();\n      throw new ShouldNeverHappenException(\"Wrong format of LOCK KEYS: \" + branchSession.getLockKey());\n    }\n    String tableName=tableGroupedLockKey.substring(0,idx);\n    String mergedPKs=tableGroupedLockKey.substring(idx + 1);\n    ConcurrentHashMap<Integer,Map<String,Long>> tableLockMap=dbLockMap.get(tableName);\n    if (tableLockMap == null) {\n      dbLockMap.putIfAbsent(tableName,new ConcurrentHashMap<Integer,Map<String,Long>>());\n      tableLockMap=dbLockMap.get(tableName);\n    }\n    String[] pks=mergedPKs.split(\",\");\n    for (    String pk : pks) {\n      int bucketId=pk.hashCode() % BUCKET_PER_TABLE;\n      Map<String,Long> bucketLockMap=tableLockMap.get(bucketId);\n      if (bucketLockMap == null) {\n        tableLockMap.putIfAbsent(bucketId,new HashMap<String,Long>());\n        bucketLockMap=tableLockMap.get(bucketId);\n      }\nsynchronized (bucketLockMap) {\n        Long lockingTransactionId=bucketLockMap.get(pk);\n        if (lockingTransactionId == null) {\n          bucketLockMap.put(pk,transactionId);\n          Set<String> keysInHolder=bucketHolder.get(bucketLockMap);\n          if (keysInHolder == null) {\n            bucketHolder.putIfAbsent(bucketLockMap,new ConcurrentSet<String>());\n            keysInHolder=bucketHolder.get(bucketLockMap);\n          }\n          keysInHolder.add(pk);\n        }\n else         if (lockingTransactionId.longValue() == transactionId) {\n          continue;\n        }\n else {\n          LOGGER.info(\"Global lock on [\" + tableName + \":\"+ pk+ \"] is holding by \"+ lockingTransactionId);\n          branchSession.unlock();\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 395,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 44,
        "startColumnNumber" : 8,
        "endLineNumber" : 44,
        "endColumnNumber" : 62
      },
      "nodeContext" : "long transactionId=branchSession.getTransactionId();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.alibaba.fescar.server.session.BranchSession"
  }, {
    "nodeContext" : "branchSession",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 50,
      "startColumnNumber" : 73,
      "endLineNumber" : 50,
      "endColumnNumber" : 86
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 50,
        "startColumnNumber" : 73,
        "endLineNumber" : 50,
        "endColumnNumber" : 102
      },
      "nodeContext" : "branchSession.getLockHolder()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 50,
        "startColumnNumber" : 58,
        "endLineNumber" : 50,
        "endColumnNumber" : 102
      },
      "nodeContext" : "bucketHolder=branchSession.getLockHolder()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 50,
        "startColumnNumber" : 8,
        "endLineNumber" : 50,
        "endColumnNumber" : 103
      },
      "nodeContext" : "ConcurrentHashMap<Map<String,Long>,Set<String>> bucketHolder=branchSession.getLockHolder();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 21,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3171,
        "startLineNumber" : 42,
        "startColumnNumber" : 88,
        "endLineNumber" : 103,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String resourceId=branchSession.getResourceId();\n  long transactionId=branchSession.getTransactionId();\n  ConcurrentHashMap<String,ConcurrentHashMap<Integer,Map<String,Long>>> dbLockMap=LOCK_MAP.get(resourceId);\n  if (dbLockMap == null) {\n    LOCK_MAP.putIfAbsent(resourceId,new ConcurrentHashMap<String,ConcurrentHashMap<Integer,Map<String,Long>>>());\n    dbLockMap=LOCK_MAP.get(resourceId);\n  }\n  ConcurrentHashMap<Map<String,Long>,Set<String>> bucketHolder=branchSession.getLockHolder();\n  String lockKey=branchSession.getLockKey();\n  if (StringUtils.isEmpty(lockKey)) {\n    return true;\n  }\n  String[] tableGroupedLockKeys=lockKey.split(\";\");\n  for (  String tableGroupedLockKey : tableGroupedLockKeys) {\n    int idx=tableGroupedLockKey.indexOf(\":\");\n    if (idx < 0) {\n      branchSession.unlock();\n      throw new ShouldNeverHappenException(\"Wrong format of LOCK KEYS: \" + branchSession.getLockKey());\n    }\n    String tableName=tableGroupedLockKey.substring(0,idx);\n    String mergedPKs=tableGroupedLockKey.substring(idx + 1);\n    ConcurrentHashMap<Integer,Map<String,Long>> tableLockMap=dbLockMap.get(tableName);\n    if (tableLockMap == null) {\n      dbLockMap.putIfAbsent(tableName,new ConcurrentHashMap<Integer,Map<String,Long>>());\n      tableLockMap=dbLockMap.get(tableName);\n    }\n    String[] pks=mergedPKs.split(\",\");\n    for (    String pk : pks) {\n      int bucketId=pk.hashCode() % BUCKET_PER_TABLE;\n      Map<String,Long> bucketLockMap=tableLockMap.get(bucketId);\n      if (bucketLockMap == null) {\n        tableLockMap.putIfAbsent(bucketId,new HashMap<String,Long>());\n        bucketLockMap=tableLockMap.get(bucketId);\n      }\nsynchronized (bucketLockMap) {\n        Long lockingTransactionId=bucketLockMap.get(pk);\n        if (lockingTransactionId == null) {\n          bucketLockMap.put(pk,transactionId);\n          Set<String> keysInHolder=bucketHolder.get(bucketLockMap);\n          if (keysInHolder == null) {\n            bucketHolder.putIfAbsent(bucketLockMap,new ConcurrentSet<String>());\n            keysInHolder=bucketHolder.get(bucketLockMap);\n          }\n          keysInHolder.add(pk);\n        }\n else         if (lockingTransactionId.longValue() == transactionId) {\n          continue;\n        }\n else {\n          LOGGER.info(\"Global lock on [\" + tableName + \":\"+ pk+ \"] is holding by \"+ lockingTransactionId);\n          branchSession.unlock();\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 383,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3269,
        "startLineNumber" : 41,
        "startColumnNumber" : 4,
        "endLineNumber" : 103,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public boolean acquireLock(BranchSession branchSession) throws TransactionException {\n  String resourceId=branchSession.getResourceId();\n  long transactionId=branchSession.getTransactionId();\n  ConcurrentHashMap<String,ConcurrentHashMap<Integer,Map<String,Long>>> dbLockMap=LOCK_MAP.get(resourceId);\n  if (dbLockMap == null) {\n    LOCK_MAP.putIfAbsent(resourceId,new ConcurrentHashMap<String,ConcurrentHashMap<Integer,Map<String,Long>>>());\n    dbLockMap=LOCK_MAP.get(resourceId);\n  }\n  ConcurrentHashMap<Map<String,Long>,Set<String>> bucketHolder=branchSession.getLockHolder();\n  String lockKey=branchSession.getLockKey();\n  if (StringUtils.isEmpty(lockKey)) {\n    return true;\n  }\n  String[] tableGroupedLockKeys=lockKey.split(\";\");\n  for (  String tableGroupedLockKey : tableGroupedLockKeys) {\n    int idx=tableGroupedLockKey.indexOf(\":\");\n    if (idx < 0) {\n      branchSession.unlock();\n      throw new ShouldNeverHappenException(\"Wrong format of LOCK KEYS: \" + branchSession.getLockKey());\n    }\n    String tableName=tableGroupedLockKey.substring(0,idx);\n    String mergedPKs=tableGroupedLockKey.substring(idx + 1);\n    ConcurrentHashMap<Integer,Map<String,Long>> tableLockMap=dbLockMap.get(tableName);\n    if (tableLockMap == null) {\n      dbLockMap.putIfAbsent(tableName,new ConcurrentHashMap<Integer,Map<String,Long>>());\n      tableLockMap=dbLockMap.get(tableName);\n    }\n    String[] pks=mergedPKs.split(\",\");\n    for (    String pk : pks) {\n      int bucketId=pk.hashCode() % BUCKET_PER_TABLE;\n      Map<String,Long> bucketLockMap=tableLockMap.get(bucketId);\n      if (bucketLockMap == null) {\n        tableLockMap.putIfAbsent(bucketId,new HashMap<String,Long>());\n        bucketLockMap=tableLockMap.get(bucketId);\n      }\nsynchronized (bucketLockMap) {\n        Long lockingTransactionId=bucketLockMap.get(pk);\n        if (lockingTransactionId == null) {\n          bucketLockMap.put(pk,transactionId);\n          Set<String> keysInHolder=bucketHolder.get(bucketLockMap);\n          if (keysInHolder == null) {\n            bucketHolder.putIfAbsent(bucketLockMap,new ConcurrentSet<String>());\n            keysInHolder=bucketHolder.get(bucketLockMap);\n          }\n          keysInHolder.add(pk);\n        }\n else         if (lockingTransactionId.longValue() == transactionId) {\n          continue;\n        }\n else {\n          LOGGER.info(\"Global lock on [\" + tableName + \":\"+ pk+ \"] is holding by \"+ lockingTransactionId);\n          branchSession.unlock();\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 395,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 50,
        "startColumnNumber" : 8,
        "endLineNumber" : 50,
        "endColumnNumber" : 103
      },
      "nodeContext" : "ConcurrentHashMap<Map<String,Long>,Set<String>> bucketHolder=branchSession.getLockHolder();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 21,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.alibaba.fescar.server.session.BranchSession"
  }, {
    "nodeContext" : "branchSession",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 52,
      "startColumnNumber" : 25,
      "endLineNumber" : 52,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 52,
        "startColumnNumber" : 25,
        "endLineNumber" : 52,
        "endColumnNumber" : 51
      },
      "nodeContext" : "branchSession.getLockKey()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 52,
        "startColumnNumber" : 15,
        "endLineNumber" : 52,
        "endColumnNumber" : 51
      },
      "nodeContext" : "lockKey=branchSession.getLockKey()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 52,
        "startColumnNumber" : 8,
        "endLineNumber" : 52,
        "endColumnNumber" : 52
      },
      "nodeContext" : "String lockKey=branchSession.getLockKey();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3171,
        "startLineNumber" : 42,
        "startColumnNumber" : 88,
        "endLineNumber" : 103,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String resourceId=branchSession.getResourceId();\n  long transactionId=branchSession.getTransactionId();\n  ConcurrentHashMap<String,ConcurrentHashMap<Integer,Map<String,Long>>> dbLockMap=LOCK_MAP.get(resourceId);\n  if (dbLockMap == null) {\n    LOCK_MAP.putIfAbsent(resourceId,new ConcurrentHashMap<String,ConcurrentHashMap<Integer,Map<String,Long>>>());\n    dbLockMap=LOCK_MAP.get(resourceId);\n  }\n  ConcurrentHashMap<Map<String,Long>,Set<String>> bucketHolder=branchSession.getLockHolder();\n  String lockKey=branchSession.getLockKey();\n  if (StringUtils.isEmpty(lockKey)) {\n    return true;\n  }\n  String[] tableGroupedLockKeys=lockKey.split(\";\");\n  for (  String tableGroupedLockKey : tableGroupedLockKeys) {\n    int idx=tableGroupedLockKey.indexOf(\":\");\n    if (idx < 0) {\n      branchSession.unlock();\n      throw new ShouldNeverHappenException(\"Wrong format of LOCK KEYS: \" + branchSession.getLockKey());\n    }\n    String tableName=tableGroupedLockKey.substring(0,idx);\n    String mergedPKs=tableGroupedLockKey.substring(idx + 1);\n    ConcurrentHashMap<Integer,Map<String,Long>> tableLockMap=dbLockMap.get(tableName);\n    if (tableLockMap == null) {\n      dbLockMap.putIfAbsent(tableName,new ConcurrentHashMap<Integer,Map<String,Long>>());\n      tableLockMap=dbLockMap.get(tableName);\n    }\n    String[] pks=mergedPKs.split(\",\");\n    for (    String pk : pks) {\n      int bucketId=pk.hashCode() % BUCKET_PER_TABLE;\n      Map<String,Long> bucketLockMap=tableLockMap.get(bucketId);\n      if (bucketLockMap == null) {\n        tableLockMap.putIfAbsent(bucketId,new HashMap<String,Long>());\n        bucketLockMap=tableLockMap.get(bucketId);\n      }\nsynchronized (bucketLockMap) {\n        Long lockingTransactionId=bucketLockMap.get(pk);\n        if (lockingTransactionId == null) {\n          bucketLockMap.put(pk,transactionId);\n          Set<String> keysInHolder=bucketHolder.get(bucketLockMap);\n          if (keysInHolder == null) {\n            bucketHolder.putIfAbsent(bucketLockMap,new ConcurrentSet<String>());\n            keysInHolder=bucketHolder.get(bucketLockMap);\n          }\n          keysInHolder.add(pk);\n        }\n else         if (lockingTransactionId.longValue() == transactionId) {\n          continue;\n        }\n else {\n          LOGGER.info(\"Global lock on [\" + tableName + \":\"+ pk+ \"] is holding by \"+ lockingTransactionId);\n          branchSession.unlock();\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 383,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3269,
        "startLineNumber" : 41,
        "startColumnNumber" : 4,
        "endLineNumber" : 103,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public boolean acquireLock(BranchSession branchSession) throws TransactionException {\n  String resourceId=branchSession.getResourceId();\n  long transactionId=branchSession.getTransactionId();\n  ConcurrentHashMap<String,ConcurrentHashMap<Integer,Map<String,Long>>> dbLockMap=LOCK_MAP.get(resourceId);\n  if (dbLockMap == null) {\n    LOCK_MAP.putIfAbsent(resourceId,new ConcurrentHashMap<String,ConcurrentHashMap<Integer,Map<String,Long>>>());\n    dbLockMap=LOCK_MAP.get(resourceId);\n  }\n  ConcurrentHashMap<Map<String,Long>,Set<String>> bucketHolder=branchSession.getLockHolder();\n  String lockKey=branchSession.getLockKey();\n  if (StringUtils.isEmpty(lockKey)) {\n    return true;\n  }\n  String[] tableGroupedLockKeys=lockKey.split(\";\");\n  for (  String tableGroupedLockKey : tableGroupedLockKeys) {\n    int idx=tableGroupedLockKey.indexOf(\":\");\n    if (idx < 0) {\n      branchSession.unlock();\n      throw new ShouldNeverHappenException(\"Wrong format of LOCK KEYS: \" + branchSession.getLockKey());\n    }\n    String tableName=tableGroupedLockKey.substring(0,idx);\n    String mergedPKs=tableGroupedLockKey.substring(idx + 1);\n    ConcurrentHashMap<Integer,Map<String,Long>> tableLockMap=dbLockMap.get(tableName);\n    if (tableLockMap == null) {\n      dbLockMap.putIfAbsent(tableName,new ConcurrentHashMap<Integer,Map<String,Long>>());\n      tableLockMap=dbLockMap.get(tableName);\n    }\n    String[] pks=mergedPKs.split(\",\");\n    for (    String pk : pks) {\n      int bucketId=pk.hashCode() % BUCKET_PER_TABLE;\n      Map<String,Long> bucketLockMap=tableLockMap.get(bucketId);\n      if (bucketLockMap == null) {\n        tableLockMap.putIfAbsent(bucketId,new HashMap<String,Long>());\n        bucketLockMap=tableLockMap.get(bucketId);\n      }\nsynchronized (bucketLockMap) {\n        Long lockingTransactionId=bucketLockMap.get(pk);\n        if (lockingTransactionId == null) {\n          bucketLockMap.put(pk,transactionId);\n          Set<String> keysInHolder=bucketHolder.get(bucketLockMap);\n          if (keysInHolder == null) {\n            bucketHolder.putIfAbsent(bucketLockMap,new ConcurrentSet<String>());\n            keysInHolder=bucketHolder.get(bucketLockMap);\n          }\n          keysInHolder.add(pk);\n        }\n else         if (lockingTransactionId.longValue() == transactionId) {\n          continue;\n        }\n else {\n          LOGGER.info(\"Global lock on [\" + tableName + \":\"+ pk+ \"] is holding by \"+ lockingTransactionId);\n          branchSession.unlock();\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 395,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 52,
        "startColumnNumber" : 8,
        "endLineNumber" : 52,
        "endColumnNumber" : 52
      },
      "nodeContext" : "String lockKey=branchSession.getLockKey();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.alibaba.fescar.server.session.BranchSession"
  }, {
    "nodeContext" : "branchSession",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 61,
      "startColumnNumber" : 16,
      "endLineNumber" : 61,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 61,
        "startColumnNumber" : 16,
        "endLineNumber" : 61,
        "endColumnNumber" : 38
      },
      "nodeContext" : "branchSession.unlock()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 61,
        "startColumnNumber" : 16,
        "endLineNumber" : 61,
        "endColumnNumber" : 39
      },
      "nodeContext" : "branchSession.unlock();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 169,
        "startLineNumber" : 60,
        "startColumnNumber" : 25,
        "endLineNumber" : 63,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  branchSession.unlock();\n  throw new ShouldNeverHappenException(\"Wrong format of LOCK KEYS: \" + branchSession.getLockKey());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 182,
        "startLineNumber" : 60,
        "startColumnNumber" : 12,
        "endLineNumber" : 63,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (idx < 0) {\n  branchSession.unlock();\n  throw new ShouldNeverHappenException(\"Wrong format of LOCK KEYS: \" + branchSession.getLockKey());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 18,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2301,
        "startLineNumber" : 58,
        "startColumnNumber" : 64,
        "endLineNumber" : 101,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  int idx=tableGroupedLockKey.indexOf(\":\");\n  if (idx < 0) {\n    branchSession.unlock();\n    throw new ShouldNeverHappenException(\"Wrong format of LOCK KEYS: \" + branchSession.getLockKey());\n  }\n  String tableName=tableGroupedLockKey.substring(0,idx);\n  String mergedPKs=tableGroupedLockKey.substring(idx + 1);\n  ConcurrentHashMap<Integer,Map<String,Long>> tableLockMap=dbLockMap.get(tableName);\n  if (tableLockMap == null) {\n    dbLockMap.putIfAbsent(tableName,new ConcurrentHashMap<Integer,Map<String,Long>>());\n    tableLockMap=dbLockMap.get(tableName);\n  }\n  String[] pks=mergedPKs.split(\",\");\n  for (  String pk : pks) {\n    int bucketId=pk.hashCode() % BUCKET_PER_TABLE;\n    Map<String,Long> bucketLockMap=tableLockMap.get(bucketId);\n    if (bucketLockMap == null) {\n      tableLockMap.putIfAbsent(bucketId,new HashMap<String,Long>());\n      bucketLockMap=tableLockMap.get(bucketId);\n    }\nsynchronized (bucketLockMap) {\n      Long lockingTransactionId=bucketLockMap.get(pk);\n      if (lockingTransactionId == null) {\n        bucketLockMap.put(pk,transactionId);\n        Set<String> keysInHolder=bucketHolder.get(bucketLockMap);\n        if (keysInHolder == null) {\n          bucketHolder.putIfAbsent(bucketLockMap,new ConcurrentSet<String>());\n          keysInHolder=bucketHolder.get(bucketLockMap);\n        }\n        keysInHolder.add(pk);\n      }\n else       if (lockingTransactionId.longValue() == transactionId) {\n        continue;\n      }\n else {\n        LOGGER.info(\"Global lock on [\" + tableName + \":\"+ pk+ \"] is holding by \"+ lockingTransactionId);\n        branchSession.unlock();\n        return false;\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 252,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2357,
        "startLineNumber" : 58,
        "startColumnNumber" : 8,
        "endLineNumber" : 101,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (String tableGroupedLockKey : tableGroupedLockKeys) {\n  int idx=tableGroupedLockKey.indexOf(\":\");\n  if (idx < 0) {\n    branchSession.unlock();\n    throw new ShouldNeverHappenException(\"Wrong format of LOCK KEYS: \" + branchSession.getLockKey());\n  }\n  String tableName=tableGroupedLockKey.substring(0,idx);\n  String mergedPKs=tableGroupedLockKey.substring(idx + 1);\n  ConcurrentHashMap<Integer,Map<String,Long>> tableLockMap=dbLockMap.get(tableName);\n  if (tableLockMap == null) {\n    dbLockMap.putIfAbsent(tableName,new ConcurrentHashMap<Integer,Map<String,Long>>());\n    tableLockMap=dbLockMap.get(tableName);\n  }\n  String[] pks=mergedPKs.split(\",\");\n  for (  String pk : pks) {\n    int bucketId=pk.hashCode() % BUCKET_PER_TABLE;\n    Map<String,Long> bucketLockMap=tableLockMap.get(bucketId);\n    if (bucketLockMap == null) {\n      tableLockMap.putIfAbsent(bucketId,new HashMap<String,Long>());\n      bucketLockMap=tableLockMap.get(bucketId);\n    }\nsynchronized (bucketLockMap) {\n      Long lockingTransactionId=bucketLockMap.get(pk);\n      if (lockingTransactionId == null) {\n        bucketLockMap.put(pk,transactionId);\n        Set<String> keysInHolder=bucketHolder.get(bucketLockMap);\n        if (keysInHolder == null) {\n          bucketHolder.putIfAbsent(bucketLockMap,new ConcurrentSet<String>());\n          keysInHolder=bucketHolder.get(bucketLockMap);\n        }\n        keysInHolder.add(pk);\n      }\n else       if (lockingTransactionId.longValue() == transactionId) {\n        continue;\n      }\n else {\n        LOGGER.info(\"Global lock on [\" + tableName + \":\"+ pk+ \"] is holding by \"+ lockingTransactionId);\n        branchSession.unlock();\n        return false;\n      }\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 258,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3171,
        "startLineNumber" : 42,
        "startColumnNumber" : 88,
        "endLineNumber" : 103,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String resourceId=branchSession.getResourceId();\n  long transactionId=branchSession.getTransactionId();\n  ConcurrentHashMap<String,ConcurrentHashMap<Integer,Map<String,Long>>> dbLockMap=LOCK_MAP.get(resourceId);\n  if (dbLockMap == null) {\n    LOCK_MAP.putIfAbsent(resourceId,new ConcurrentHashMap<String,ConcurrentHashMap<Integer,Map<String,Long>>>());\n    dbLockMap=LOCK_MAP.get(resourceId);\n  }\n  ConcurrentHashMap<Map<String,Long>,Set<String>> bucketHolder=branchSession.getLockHolder();\n  String lockKey=branchSession.getLockKey();\n  if (StringUtils.isEmpty(lockKey)) {\n    return true;\n  }\n  String[] tableGroupedLockKeys=lockKey.split(\";\");\n  for (  String tableGroupedLockKey : tableGroupedLockKeys) {\n    int idx=tableGroupedLockKey.indexOf(\":\");\n    if (idx < 0) {\n      branchSession.unlock();\n      throw new ShouldNeverHappenException(\"Wrong format of LOCK KEYS: \" + branchSession.getLockKey());\n    }\n    String tableName=tableGroupedLockKey.substring(0,idx);\n    String mergedPKs=tableGroupedLockKey.substring(idx + 1);\n    ConcurrentHashMap<Integer,Map<String,Long>> tableLockMap=dbLockMap.get(tableName);\n    if (tableLockMap == null) {\n      dbLockMap.putIfAbsent(tableName,new ConcurrentHashMap<Integer,Map<String,Long>>());\n      tableLockMap=dbLockMap.get(tableName);\n    }\n    String[] pks=mergedPKs.split(\",\");\n    for (    String pk : pks) {\n      int bucketId=pk.hashCode() % BUCKET_PER_TABLE;\n      Map<String,Long> bucketLockMap=tableLockMap.get(bucketId);\n      if (bucketLockMap == null) {\n        tableLockMap.putIfAbsent(bucketId,new HashMap<String,Long>());\n        bucketLockMap=tableLockMap.get(bucketId);\n      }\nsynchronized (bucketLockMap) {\n        Long lockingTransactionId=bucketLockMap.get(pk);\n        if (lockingTransactionId == null) {\n          bucketLockMap.put(pk,transactionId);\n          Set<String> keysInHolder=bucketHolder.get(bucketLockMap);\n          if (keysInHolder == null) {\n            bucketHolder.putIfAbsent(bucketLockMap,new ConcurrentSet<String>());\n            keysInHolder=bucketHolder.get(bucketLockMap);\n          }\n          keysInHolder.add(pk);\n        }\n else         if (lockingTransactionId.longValue() == transactionId) {\n          continue;\n        }\n else {\n          LOGGER.info(\"Global lock on [\" + tableName + \":\"+ pk+ \"] is holding by \"+ lockingTransactionId);\n          branchSession.unlock();\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 383,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3269,
        "startLineNumber" : 41,
        "startColumnNumber" : 4,
        "endLineNumber" : 103,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public boolean acquireLock(BranchSession branchSession) throws TransactionException {\n  String resourceId=branchSession.getResourceId();\n  long transactionId=branchSession.getTransactionId();\n  ConcurrentHashMap<String,ConcurrentHashMap<Integer,Map<String,Long>>> dbLockMap=LOCK_MAP.get(resourceId);\n  if (dbLockMap == null) {\n    LOCK_MAP.putIfAbsent(resourceId,new ConcurrentHashMap<String,ConcurrentHashMap<Integer,Map<String,Long>>>());\n    dbLockMap=LOCK_MAP.get(resourceId);\n  }\n  ConcurrentHashMap<Map<String,Long>,Set<String>> bucketHolder=branchSession.getLockHolder();\n  String lockKey=branchSession.getLockKey();\n  if (StringUtils.isEmpty(lockKey)) {\n    return true;\n  }\n  String[] tableGroupedLockKeys=lockKey.split(\";\");\n  for (  String tableGroupedLockKey : tableGroupedLockKeys) {\n    int idx=tableGroupedLockKey.indexOf(\":\");\n    if (idx < 0) {\n      branchSession.unlock();\n      throw new ShouldNeverHappenException(\"Wrong format of LOCK KEYS: \" + branchSession.getLockKey());\n    }\n    String tableName=tableGroupedLockKey.substring(0,idx);\n    String mergedPKs=tableGroupedLockKey.substring(idx + 1);\n    ConcurrentHashMap<Integer,Map<String,Long>> tableLockMap=dbLockMap.get(tableName);\n    if (tableLockMap == null) {\n      dbLockMap.putIfAbsent(tableName,new ConcurrentHashMap<Integer,Map<String,Long>>());\n      tableLockMap=dbLockMap.get(tableName);\n    }\n    String[] pks=mergedPKs.split(\",\");\n    for (    String pk : pks) {\n      int bucketId=pk.hashCode() % BUCKET_PER_TABLE;\n      Map<String,Long> bucketLockMap=tableLockMap.get(bucketId);\n      if (bucketLockMap == null) {\n        tableLockMap.putIfAbsent(bucketId,new HashMap<String,Long>());\n        bucketLockMap=tableLockMap.get(bucketId);\n      }\nsynchronized (bucketLockMap) {\n        Long lockingTransactionId=bucketLockMap.get(pk);\n        if (lockingTransactionId == null) {\n          bucketLockMap.put(pk,transactionId);\n          Set<String> keysInHolder=bucketHolder.get(bucketLockMap);\n          if (keysInHolder == null) {\n            bucketHolder.putIfAbsent(bucketLockMap,new ConcurrentSet<String>());\n            keysInHolder=bucketHolder.get(bucketLockMap);\n          }\n          keysInHolder.add(pk);\n        }\n else         if (lockingTransactionId.longValue() == transactionId) {\n          continue;\n        }\n else {\n          LOGGER.info(\"Global lock on [\" + tableName + \":\"+ pk+ \"] is holding by \"+ lockingTransactionId);\n          branchSession.unlock();\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 395,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 61,
        "startColumnNumber" : 16,
        "endLineNumber" : 61,
        "endColumnNumber" : 39
      },
      "nodeContext" : "branchSession.unlock();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.alibaba.fescar.server.session.BranchSession"
  }, {
    "nodeContext" : "branchSession",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 62,
      "startColumnNumber" : 85,
      "endLineNumber" : 62,
      "endColumnNumber" : 98
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 62,
        "startColumnNumber" : 85,
        "endLineNumber" : 62,
        "endColumnNumber" : 111
      },
      "nodeContext" : "branchSession.getLockKey()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 62,
        "startColumnNumber" : 53,
        "endLineNumber" : 62,
        "endColumnNumber" : 111
      },
      "nodeContext" : "\"Wrong format of LOCK KEYS: \" + branchSession.getLockKey()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 62,
        "startColumnNumber" : 22,
        "endLineNumber" : 62,
        "endColumnNumber" : 112
      },
      "nodeContext" : "new ShouldNeverHappenException(\"Wrong format of LOCK KEYS: \" + branchSession.getLockKey())",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 97,
        "startLineNumber" : 62,
        "startColumnNumber" : 16,
        "endLineNumber" : 62,
        "endColumnNumber" : 113
      },
      "nodeContext" : "throw new ShouldNeverHappenException(\"Wrong format of LOCK KEYS: \" + branchSession.getLockKey());\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 169,
        "startLineNumber" : 60,
        "startColumnNumber" : 25,
        "endLineNumber" : 63,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  branchSession.unlock();\n  throw new ShouldNeverHappenException(\"Wrong format of LOCK KEYS: \" + branchSession.getLockKey());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 182,
        "startLineNumber" : 60,
        "startColumnNumber" : 12,
        "endLineNumber" : 63,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (idx < 0) {\n  branchSession.unlock();\n  throw new ShouldNeverHappenException(\"Wrong format of LOCK KEYS: \" + branchSession.getLockKey());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 18,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2301,
        "startLineNumber" : 58,
        "startColumnNumber" : 64,
        "endLineNumber" : 101,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  int idx=tableGroupedLockKey.indexOf(\":\");\n  if (idx < 0) {\n    branchSession.unlock();\n    throw new ShouldNeverHappenException(\"Wrong format of LOCK KEYS: \" + branchSession.getLockKey());\n  }\n  String tableName=tableGroupedLockKey.substring(0,idx);\n  String mergedPKs=tableGroupedLockKey.substring(idx + 1);\n  ConcurrentHashMap<Integer,Map<String,Long>> tableLockMap=dbLockMap.get(tableName);\n  if (tableLockMap == null) {\n    dbLockMap.putIfAbsent(tableName,new ConcurrentHashMap<Integer,Map<String,Long>>());\n    tableLockMap=dbLockMap.get(tableName);\n  }\n  String[] pks=mergedPKs.split(\",\");\n  for (  String pk : pks) {\n    int bucketId=pk.hashCode() % BUCKET_PER_TABLE;\n    Map<String,Long> bucketLockMap=tableLockMap.get(bucketId);\n    if (bucketLockMap == null) {\n      tableLockMap.putIfAbsent(bucketId,new HashMap<String,Long>());\n      bucketLockMap=tableLockMap.get(bucketId);\n    }\nsynchronized (bucketLockMap) {\n      Long lockingTransactionId=bucketLockMap.get(pk);\n      if (lockingTransactionId == null) {\n        bucketLockMap.put(pk,transactionId);\n        Set<String> keysInHolder=bucketHolder.get(bucketLockMap);\n        if (keysInHolder == null) {\n          bucketHolder.putIfAbsent(bucketLockMap,new ConcurrentSet<String>());\n          keysInHolder=bucketHolder.get(bucketLockMap);\n        }\n        keysInHolder.add(pk);\n      }\n else       if (lockingTransactionId.longValue() == transactionId) {\n        continue;\n      }\n else {\n        LOGGER.info(\"Global lock on [\" + tableName + \":\"+ pk+ \"] is holding by \"+ lockingTransactionId);\n        branchSession.unlock();\n        return false;\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 252,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2357,
        "startLineNumber" : 58,
        "startColumnNumber" : 8,
        "endLineNumber" : 101,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (String tableGroupedLockKey : tableGroupedLockKeys) {\n  int idx=tableGroupedLockKey.indexOf(\":\");\n  if (idx < 0) {\n    branchSession.unlock();\n    throw new ShouldNeverHappenException(\"Wrong format of LOCK KEYS: \" + branchSession.getLockKey());\n  }\n  String tableName=tableGroupedLockKey.substring(0,idx);\n  String mergedPKs=tableGroupedLockKey.substring(idx + 1);\n  ConcurrentHashMap<Integer,Map<String,Long>> tableLockMap=dbLockMap.get(tableName);\n  if (tableLockMap == null) {\n    dbLockMap.putIfAbsent(tableName,new ConcurrentHashMap<Integer,Map<String,Long>>());\n    tableLockMap=dbLockMap.get(tableName);\n  }\n  String[] pks=mergedPKs.split(\",\");\n  for (  String pk : pks) {\n    int bucketId=pk.hashCode() % BUCKET_PER_TABLE;\n    Map<String,Long> bucketLockMap=tableLockMap.get(bucketId);\n    if (bucketLockMap == null) {\n      tableLockMap.putIfAbsent(bucketId,new HashMap<String,Long>());\n      bucketLockMap=tableLockMap.get(bucketId);\n    }\nsynchronized (bucketLockMap) {\n      Long lockingTransactionId=bucketLockMap.get(pk);\n      if (lockingTransactionId == null) {\n        bucketLockMap.put(pk,transactionId);\n        Set<String> keysInHolder=bucketHolder.get(bucketLockMap);\n        if (keysInHolder == null) {\n          bucketHolder.putIfAbsent(bucketLockMap,new ConcurrentSet<String>());\n          keysInHolder=bucketHolder.get(bucketLockMap);\n        }\n        keysInHolder.add(pk);\n      }\n else       if (lockingTransactionId.longValue() == transactionId) {\n        continue;\n      }\n else {\n        LOGGER.info(\"Global lock on [\" + tableName + \":\"+ pk+ \"] is holding by \"+ lockingTransactionId);\n        branchSession.unlock();\n        return false;\n      }\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 258,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3171,
        "startLineNumber" : 42,
        "startColumnNumber" : 88,
        "endLineNumber" : 103,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String resourceId=branchSession.getResourceId();\n  long transactionId=branchSession.getTransactionId();\n  ConcurrentHashMap<String,ConcurrentHashMap<Integer,Map<String,Long>>> dbLockMap=LOCK_MAP.get(resourceId);\n  if (dbLockMap == null) {\n    LOCK_MAP.putIfAbsent(resourceId,new ConcurrentHashMap<String,ConcurrentHashMap<Integer,Map<String,Long>>>());\n    dbLockMap=LOCK_MAP.get(resourceId);\n  }\n  ConcurrentHashMap<Map<String,Long>,Set<String>> bucketHolder=branchSession.getLockHolder();\n  String lockKey=branchSession.getLockKey();\n  if (StringUtils.isEmpty(lockKey)) {\n    return true;\n  }\n  String[] tableGroupedLockKeys=lockKey.split(\";\");\n  for (  String tableGroupedLockKey : tableGroupedLockKeys) {\n    int idx=tableGroupedLockKey.indexOf(\":\");\n    if (idx < 0) {\n      branchSession.unlock();\n      throw new ShouldNeverHappenException(\"Wrong format of LOCK KEYS: \" + branchSession.getLockKey());\n    }\n    String tableName=tableGroupedLockKey.substring(0,idx);\n    String mergedPKs=tableGroupedLockKey.substring(idx + 1);\n    ConcurrentHashMap<Integer,Map<String,Long>> tableLockMap=dbLockMap.get(tableName);\n    if (tableLockMap == null) {\n      dbLockMap.putIfAbsent(tableName,new ConcurrentHashMap<Integer,Map<String,Long>>());\n      tableLockMap=dbLockMap.get(tableName);\n    }\n    String[] pks=mergedPKs.split(\",\");\n    for (    String pk : pks) {\n      int bucketId=pk.hashCode() % BUCKET_PER_TABLE;\n      Map<String,Long> bucketLockMap=tableLockMap.get(bucketId);\n      if (bucketLockMap == null) {\n        tableLockMap.putIfAbsent(bucketId,new HashMap<String,Long>());\n        bucketLockMap=tableLockMap.get(bucketId);\n      }\nsynchronized (bucketLockMap) {\n        Long lockingTransactionId=bucketLockMap.get(pk);\n        if (lockingTransactionId == null) {\n          bucketLockMap.put(pk,transactionId);\n          Set<String> keysInHolder=bucketHolder.get(bucketLockMap);\n          if (keysInHolder == null) {\n            bucketHolder.putIfAbsent(bucketLockMap,new ConcurrentSet<String>());\n            keysInHolder=bucketHolder.get(bucketLockMap);\n          }\n          keysInHolder.add(pk);\n        }\n else         if (lockingTransactionId.longValue() == transactionId) {\n          continue;\n        }\n else {\n          LOGGER.info(\"Global lock on [\" + tableName + \":\"+ pk+ \"] is holding by \"+ lockingTransactionId);\n          branchSession.unlock();\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 383,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3269,
        "startLineNumber" : 41,
        "startColumnNumber" : 4,
        "endLineNumber" : 103,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public boolean acquireLock(BranchSession branchSession) throws TransactionException {\n  String resourceId=branchSession.getResourceId();\n  long transactionId=branchSession.getTransactionId();\n  ConcurrentHashMap<String,ConcurrentHashMap<Integer,Map<String,Long>>> dbLockMap=LOCK_MAP.get(resourceId);\n  if (dbLockMap == null) {\n    LOCK_MAP.putIfAbsent(resourceId,new ConcurrentHashMap<String,ConcurrentHashMap<Integer,Map<String,Long>>>());\n    dbLockMap=LOCK_MAP.get(resourceId);\n  }\n  ConcurrentHashMap<Map<String,Long>,Set<String>> bucketHolder=branchSession.getLockHolder();\n  String lockKey=branchSession.getLockKey();\n  if (StringUtils.isEmpty(lockKey)) {\n    return true;\n  }\n  String[] tableGroupedLockKeys=lockKey.split(\";\");\n  for (  String tableGroupedLockKey : tableGroupedLockKeys) {\n    int idx=tableGroupedLockKey.indexOf(\":\");\n    if (idx < 0) {\n      branchSession.unlock();\n      throw new ShouldNeverHappenException(\"Wrong format of LOCK KEYS: \" + branchSession.getLockKey());\n    }\n    String tableName=tableGroupedLockKey.substring(0,idx);\n    String mergedPKs=tableGroupedLockKey.substring(idx + 1);\n    ConcurrentHashMap<Integer,Map<String,Long>> tableLockMap=dbLockMap.get(tableName);\n    if (tableLockMap == null) {\n      dbLockMap.putIfAbsent(tableName,new ConcurrentHashMap<Integer,Map<String,Long>>());\n      tableLockMap=dbLockMap.get(tableName);\n    }\n    String[] pks=mergedPKs.split(\",\");\n    for (    String pk : pks) {\n      int bucketId=pk.hashCode() % BUCKET_PER_TABLE;\n      Map<String,Long> bucketLockMap=tableLockMap.get(bucketId);\n      if (bucketLockMap == null) {\n        tableLockMap.putIfAbsent(bucketId,new HashMap<String,Long>());\n        bucketLockMap=tableLockMap.get(bucketId);\n      }\nsynchronized (bucketLockMap) {\n        Long lockingTransactionId=bucketLockMap.get(pk);\n        if (lockingTransactionId == null) {\n          bucketLockMap.put(pk,transactionId);\n          Set<String> keysInHolder=bucketHolder.get(bucketLockMap);\n          if (keysInHolder == null) {\n            bucketHolder.putIfAbsent(bucketLockMap,new ConcurrentSet<String>());\n            keysInHolder=bucketHolder.get(bucketLockMap);\n          }\n          keysInHolder.add(pk);\n        }\n else         if (lockingTransactionId.longValue() == transactionId) {\n          continue;\n        }\n else {\n          LOGGER.info(\"Global lock on [\" + tableName + \":\"+ pk+ \"] is holding by \"+ lockingTransactionId);\n          branchSession.unlock();\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 395,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 97,
        "startLineNumber" : 62,
        "startColumnNumber" : 16,
        "endLineNumber" : 62,
        "endColumnNumber" : 113
      },
      "nodeContext" : "throw new ShouldNeverHappenException(\"Wrong format of LOCK KEYS: \" + branchSession.getLockKey());\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.alibaba.fescar.server.session.BranchSession"
  }, {
    "nodeContext" : "branchSession",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 96,
      "startColumnNumber" : 24,
      "endLineNumber" : 96,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 96,
        "startColumnNumber" : 24,
        "endLineNumber" : 96,
        "endColumnNumber" : 46
      },
      "nodeContext" : "branchSession.unlock()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 96,
        "startColumnNumber" : 24,
        "endLineNumber" : 96,
        "endColumnNumber" : 47
      },
      "nodeContext" : "branchSession.unlock();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 264,
        "startLineNumber" : 94,
        "startColumnNumber" : 27,
        "endLineNumber" : 98,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  LOGGER.info(\"Global lock on [\" + tableName + \":\"+ pk+ \"] is holding by \"+ lockingTransactionId);\n  branchSession.unlock();\n  return false;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 422,
        "startLineNumber" : 91,
        "startColumnNumber" : 27,
        "endLineNumber" : 98,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (lockingTransactionId.longValue() == transactionId) {\n  continue;\n}\n else {\n  LOGGER.info(\"Global lock on [\" + tableName + \":\"+ pk+ \"] is holding by \"+ lockingTransactionId);\n  branchSession.unlock();\n  return false;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 26,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 974,
        "startLineNumber" : 81,
        "startColumnNumber" : 20,
        "endLineNumber" : 98,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (lockingTransactionId == null) {\n  bucketLockMap.put(pk,transactionId);\n  Set<String> keysInHolder=bucketHolder.get(bucketLockMap);\n  if (keysInHolder == null) {\n    bucketHolder.putIfAbsent(bucketLockMap,new ConcurrentSet<String>());\n    keysInHolder=bucketHolder.get(bucketLockMap);\n  }\n  keysInHolder.add(pk);\n}\n else if (lockingTransactionId.longValue() == transactionId) {\n  continue;\n}\n else {\n  LOGGER.info(\"Global lock on [\" + tableName + \":\"+ pk+ \"] is holding by \"+ lockingTransactionId);\n  branchSession.unlock();\n  return false;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 77,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.SynchronizedStatement,body]",
      "nodePosition" : {
        "charLength" : 1085,
        "startLineNumber" : 79,
        "startColumnNumber" : 45,
        "endLineNumber" : 99,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  Long lockingTransactionId=bucketLockMap.get(pk);\n  if (lockingTransactionId == null) {\n    bucketLockMap.put(pk,transactionId);\n    Set<String> keysInHolder=bucketHolder.get(bucketLockMap);\n    if (keysInHolder == null) {\n      bucketHolder.putIfAbsent(bucketLockMap,new ConcurrentSet<String>());\n      keysInHolder=bucketHolder.get(bucketLockMap);\n    }\n    keysInHolder.add(pk);\n  }\n else   if (lockingTransactionId.longValue() == transactionId) {\n    continue;\n  }\n else {\n    LOGGER.info(\"Global lock on [\" + tableName + \":\"+ pk+ \"] is holding by \"+ lockingTransactionId);\n    branchSession.unlock();\n    return false;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 87,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1114,
        "startLineNumber" : 79,
        "startColumnNumber" : 16,
        "endLineNumber" : 99,
        "endColumnNumber" : 17
      },
      "nodeContext" : "synchronized (bucketLockMap) {\n  Long lockingTransactionId=bucketLockMap.get(pk);\n  if (lockingTransactionId == null) {\n    bucketLockMap.put(pk,transactionId);\n    Set<String> keysInHolder=bucketHolder.get(bucketLockMap);\n    if (keysInHolder == null) {\n      bucketHolder.putIfAbsent(bucketLockMap,new ConcurrentSet<String>());\n      keysInHolder=bucketHolder.get(bucketLockMap);\n    }\n    keysInHolder.add(pk);\n  }\n else   if (lockingTransactionId.longValue() == transactionId) {\n    continue;\n  }\n else {\n    LOGGER.info(\"Global lock on [\" + tableName + \":\"+ pk+ \"] is holding by \"+ lockingTransactionId);\n    branchSession.unlock();\n    return false;\n  }\n}\n",
      "nodeType" : "SynchronizedStatement",
      "astNodeNumber" : 89,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1501,
        "startLineNumber" : 72,
        "startColumnNumber" : 34,
        "endLineNumber" : 100,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  int bucketId=pk.hashCode() % BUCKET_PER_TABLE;\n  Map<String,Long> bucketLockMap=tableLockMap.get(bucketId);\n  if (bucketLockMap == null) {\n    tableLockMap.putIfAbsent(bucketId,new HashMap<String,Long>());\n    bucketLockMap=tableLockMap.get(bucketId);\n  }\nsynchronized (bucketLockMap) {\n    Long lockingTransactionId=bucketLockMap.get(pk);\n    if (lockingTransactionId == null) {\n      bucketLockMap.put(pk,transactionId);\n      Set<String> keysInHolder=bucketHolder.get(bucketLockMap);\n      if (keysInHolder == null) {\n        bucketHolder.putIfAbsent(bucketLockMap,new ConcurrentSet<String>());\n        keysInHolder=bucketHolder.get(bucketLockMap);\n      }\n      keysInHolder.add(pk);\n    }\n else     if (lockingTransactionId.longValue() == transactionId) {\n      continue;\n    }\n else {\n      LOGGER.info(\"Global lock on [\" + tableName + \":\"+ pk+ \"] is holding by \"+ lockingTransactionId);\n      branchSession.unlock();\n      return false;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 138,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1523,
        "startLineNumber" : 72,
        "startColumnNumber" : 12,
        "endLineNumber" : 100,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (String pk : pks) {\n  int bucketId=pk.hashCode() % BUCKET_PER_TABLE;\n  Map<String,Long> bucketLockMap=tableLockMap.get(bucketId);\n  if (bucketLockMap == null) {\n    tableLockMap.putIfAbsent(bucketId,new HashMap<String,Long>());\n    bucketLockMap=tableLockMap.get(bucketId);\n  }\nsynchronized (bucketLockMap) {\n    Long lockingTransactionId=bucketLockMap.get(pk);\n    if (lockingTransactionId == null) {\n      bucketLockMap.put(pk,transactionId);\n      Set<String> keysInHolder=bucketHolder.get(bucketLockMap);\n      if (keysInHolder == null) {\n        bucketHolder.putIfAbsent(bucketLockMap,new ConcurrentSet<String>());\n        keysInHolder=bucketHolder.get(bucketLockMap);\n      }\n      keysInHolder.add(pk);\n    }\n else     if (lockingTransactionId.longValue() == transactionId) {\n      continue;\n    }\n else {\n      LOGGER.info(\"Global lock on [\" + tableName + \":\"+ pk+ \"] is holding by \"+ lockingTransactionId);\n      branchSession.unlock();\n      return false;\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 144,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2301,
        "startLineNumber" : 58,
        "startColumnNumber" : 64,
        "endLineNumber" : 101,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  int idx=tableGroupedLockKey.indexOf(\":\");\n  if (idx < 0) {\n    branchSession.unlock();\n    throw new ShouldNeverHappenException(\"Wrong format of LOCK KEYS: \" + branchSession.getLockKey());\n  }\n  String tableName=tableGroupedLockKey.substring(0,idx);\n  String mergedPKs=tableGroupedLockKey.substring(idx + 1);\n  ConcurrentHashMap<Integer,Map<String,Long>> tableLockMap=dbLockMap.get(tableName);\n  if (tableLockMap == null) {\n    dbLockMap.putIfAbsent(tableName,new ConcurrentHashMap<Integer,Map<String,Long>>());\n    tableLockMap=dbLockMap.get(tableName);\n  }\n  String[] pks=mergedPKs.split(\",\");\n  for (  String pk : pks) {\n    int bucketId=pk.hashCode() % BUCKET_PER_TABLE;\n    Map<String,Long> bucketLockMap=tableLockMap.get(bucketId);\n    if (bucketLockMap == null) {\n      tableLockMap.putIfAbsent(bucketId,new HashMap<String,Long>());\n      bucketLockMap=tableLockMap.get(bucketId);\n    }\nsynchronized (bucketLockMap) {\n      Long lockingTransactionId=bucketLockMap.get(pk);\n      if (lockingTransactionId == null) {\n        bucketLockMap.put(pk,transactionId);\n        Set<String> keysInHolder=bucketHolder.get(bucketLockMap);\n        if (keysInHolder == null) {\n          bucketHolder.putIfAbsent(bucketLockMap,new ConcurrentSet<String>());\n          keysInHolder=bucketHolder.get(bucketLockMap);\n        }\n        keysInHolder.add(pk);\n      }\n else       if (lockingTransactionId.longValue() == transactionId) {\n        continue;\n      }\n else {\n        LOGGER.info(\"Global lock on [\" + tableName + \":\"+ pk+ \"] is holding by \"+ lockingTransactionId);\n        branchSession.unlock();\n        return false;\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 252,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2357,
        "startLineNumber" : 58,
        "startColumnNumber" : 8,
        "endLineNumber" : 101,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (String tableGroupedLockKey : tableGroupedLockKeys) {\n  int idx=tableGroupedLockKey.indexOf(\":\");\n  if (idx < 0) {\n    branchSession.unlock();\n    throw new ShouldNeverHappenException(\"Wrong format of LOCK KEYS: \" + branchSession.getLockKey());\n  }\n  String tableName=tableGroupedLockKey.substring(0,idx);\n  String mergedPKs=tableGroupedLockKey.substring(idx + 1);\n  ConcurrentHashMap<Integer,Map<String,Long>> tableLockMap=dbLockMap.get(tableName);\n  if (tableLockMap == null) {\n    dbLockMap.putIfAbsent(tableName,new ConcurrentHashMap<Integer,Map<String,Long>>());\n    tableLockMap=dbLockMap.get(tableName);\n  }\n  String[] pks=mergedPKs.split(\",\");\n  for (  String pk : pks) {\n    int bucketId=pk.hashCode() % BUCKET_PER_TABLE;\n    Map<String,Long> bucketLockMap=tableLockMap.get(bucketId);\n    if (bucketLockMap == null) {\n      tableLockMap.putIfAbsent(bucketId,new HashMap<String,Long>());\n      bucketLockMap=tableLockMap.get(bucketId);\n    }\nsynchronized (bucketLockMap) {\n      Long lockingTransactionId=bucketLockMap.get(pk);\n      if (lockingTransactionId == null) {\n        bucketLockMap.put(pk,transactionId);\n        Set<String> keysInHolder=bucketHolder.get(bucketLockMap);\n        if (keysInHolder == null) {\n          bucketHolder.putIfAbsent(bucketLockMap,new ConcurrentSet<String>());\n          keysInHolder=bucketHolder.get(bucketLockMap);\n        }\n        keysInHolder.add(pk);\n      }\n else       if (lockingTransactionId.longValue() == transactionId) {\n        continue;\n      }\n else {\n        LOGGER.info(\"Global lock on [\" + tableName + \":\"+ pk+ \"] is holding by \"+ lockingTransactionId);\n        branchSession.unlock();\n        return false;\n      }\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 258,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3171,
        "startLineNumber" : 42,
        "startColumnNumber" : 88,
        "endLineNumber" : 103,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String resourceId=branchSession.getResourceId();\n  long transactionId=branchSession.getTransactionId();\n  ConcurrentHashMap<String,ConcurrentHashMap<Integer,Map<String,Long>>> dbLockMap=LOCK_MAP.get(resourceId);\n  if (dbLockMap == null) {\n    LOCK_MAP.putIfAbsent(resourceId,new ConcurrentHashMap<String,ConcurrentHashMap<Integer,Map<String,Long>>>());\n    dbLockMap=LOCK_MAP.get(resourceId);\n  }\n  ConcurrentHashMap<Map<String,Long>,Set<String>> bucketHolder=branchSession.getLockHolder();\n  String lockKey=branchSession.getLockKey();\n  if (StringUtils.isEmpty(lockKey)) {\n    return true;\n  }\n  String[] tableGroupedLockKeys=lockKey.split(\";\");\n  for (  String tableGroupedLockKey : tableGroupedLockKeys) {\n    int idx=tableGroupedLockKey.indexOf(\":\");\n    if (idx < 0) {\n      branchSession.unlock();\n      throw new ShouldNeverHappenException(\"Wrong format of LOCK KEYS: \" + branchSession.getLockKey());\n    }\n    String tableName=tableGroupedLockKey.substring(0,idx);\n    String mergedPKs=tableGroupedLockKey.substring(idx + 1);\n    ConcurrentHashMap<Integer,Map<String,Long>> tableLockMap=dbLockMap.get(tableName);\n    if (tableLockMap == null) {\n      dbLockMap.putIfAbsent(tableName,new ConcurrentHashMap<Integer,Map<String,Long>>());\n      tableLockMap=dbLockMap.get(tableName);\n    }\n    String[] pks=mergedPKs.split(\",\");\n    for (    String pk : pks) {\n      int bucketId=pk.hashCode() % BUCKET_PER_TABLE;\n      Map<String,Long> bucketLockMap=tableLockMap.get(bucketId);\n      if (bucketLockMap == null) {\n        tableLockMap.putIfAbsent(bucketId,new HashMap<String,Long>());\n        bucketLockMap=tableLockMap.get(bucketId);\n      }\nsynchronized (bucketLockMap) {\n        Long lockingTransactionId=bucketLockMap.get(pk);\n        if (lockingTransactionId == null) {\n          bucketLockMap.put(pk,transactionId);\n          Set<String> keysInHolder=bucketHolder.get(bucketLockMap);\n          if (keysInHolder == null) {\n            bucketHolder.putIfAbsent(bucketLockMap,new ConcurrentSet<String>());\n            keysInHolder=bucketHolder.get(bucketLockMap);\n          }\n          keysInHolder.add(pk);\n        }\n else         if (lockingTransactionId.longValue() == transactionId) {\n          continue;\n        }\n else {\n          LOGGER.info(\"Global lock on [\" + tableName + \":\"+ pk+ \"] is holding by \"+ lockingTransactionId);\n          branchSession.unlock();\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 383,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3269,
        "startLineNumber" : 41,
        "startColumnNumber" : 4,
        "endLineNumber" : 103,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public boolean acquireLock(BranchSession branchSession) throws TransactionException {\n  String resourceId=branchSession.getResourceId();\n  long transactionId=branchSession.getTransactionId();\n  ConcurrentHashMap<String,ConcurrentHashMap<Integer,Map<String,Long>>> dbLockMap=LOCK_MAP.get(resourceId);\n  if (dbLockMap == null) {\n    LOCK_MAP.putIfAbsent(resourceId,new ConcurrentHashMap<String,ConcurrentHashMap<Integer,Map<String,Long>>>());\n    dbLockMap=LOCK_MAP.get(resourceId);\n  }\n  ConcurrentHashMap<Map<String,Long>,Set<String>> bucketHolder=branchSession.getLockHolder();\n  String lockKey=branchSession.getLockKey();\n  if (StringUtils.isEmpty(lockKey)) {\n    return true;\n  }\n  String[] tableGroupedLockKeys=lockKey.split(\";\");\n  for (  String tableGroupedLockKey : tableGroupedLockKeys) {\n    int idx=tableGroupedLockKey.indexOf(\":\");\n    if (idx < 0) {\n      branchSession.unlock();\n      throw new ShouldNeverHappenException(\"Wrong format of LOCK KEYS: \" + branchSession.getLockKey());\n    }\n    String tableName=tableGroupedLockKey.substring(0,idx);\n    String mergedPKs=tableGroupedLockKey.substring(idx + 1);\n    ConcurrentHashMap<Integer,Map<String,Long>> tableLockMap=dbLockMap.get(tableName);\n    if (tableLockMap == null) {\n      dbLockMap.putIfAbsent(tableName,new ConcurrentHashMap<Integer,Map<String,Long>>());\n      tableLockMap=dbLockMap.get(tableName);\n    }\n    String[] pks=mergedPKs.split(\",\");\n    for (    String pk : pks) {\n      int bucketId=pk.hashCode() % BUCKET_PER_TABLE;\n      Map<String,Long> bucketLockMap=tableLockMap.get(bucketId);\n      if (bucketLockMap == null) {\n        tableLockMap.putIfAbsent(bucketId,new HashMap<String,Long>());\n        bucketLockMap=tableLockMap.get(bucketId);\n      }\nsynchronized (bucketLockMap) {\n        Long lockingTransactionId=bucketLockMap.get(pk);\n        if (lockingTransactionId == null) {\n          bucketLockMap.put(pk,transactionId);\n          Set<String> keysInHolder=bucketHolder.get(bucketLockMap);\n          if (keysInHolder == null) {\n            bucketHolder.putIfAbsent(bucketLockMap,new ConcurrentSet<String>());\n            keysInHolder=bucketHolder.get(bucketLockMap);\n          }\n          keysInHolder.add(pk);\n        }\n else         if (lockingTransactionId.longValue() == transactionId) {\n          continue;\n        }\n else {\n          LOGGER.info(\"Global lock on [\" + tableName + \":\"+ pk+ \"] is holding by \"+ lockingTransactionId);\n          branchSession.unlock();\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 395,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 96,
        "startColumnNumber" : 24,
        "endLineNumber" : 96,
        "endColumnNumber" : 47
      },
      "nodeContext" : "branchSession.unlock();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.alibaba.fescar.server.session.BranchSession"
  } ],
  "positionList" : [ {
    "charLength" : 13,
    "startLineNumber" : 43,
    "startColumnNumber" : 28,
    "endLineNumber" : 43,
    "endColumnNumber" : 41
  }, {
    "charLength" : 13,
    "startLineNumber" : 44,
    "startColumnNumber" : 29,
    "endLineNumber" : 44,
    "endColumnNumber" : 42
  }, {
    "charLength" : 13,
    "startLineNumber" : 50,
    "startColumnNumber" : 73,
    "endLineNumber" : 50,
    "endColumnNumber" : 86
  }, {
    "charLength" : 13,
    "startLineNumber" : 52,
    "startColumnNumber" : 25,
    "endLineNumber" : 52,
    "endColumnNumber" : 38
  }, {
    "charLength" : 13,
    "startLineNumber" : 61,
    "startColumnNumber" : 16,
    "endLineNumber" : 61,
    "endColumnNumber" : 29
  }, {
    "charLength" : 13,
    "startLineNumber" : 62,
    "startColumnNumber" : 85,
    "endLineNumber" : 62,
    "endColumnNumber" : 98
  }, {
    "charLength" : 13,
    "startLineNumber" : 96,
    "startColumnNumber" : 24,
    "endLineNumber" : 96,
    "endColumnNumber" : 37
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 8
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 11
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 11
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 11
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 11
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 9
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 9
  } ]
}