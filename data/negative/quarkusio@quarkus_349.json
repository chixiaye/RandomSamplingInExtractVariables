{
  "id" : 349,
  "expression" : "runGradleWrapper(projectDir,\"clean\",\"build\")",
  "projectName" : "quarkusio@quarkus",
  "commitID" : "2862b200ee266332150317795b9fe315be51d68b",
  "filePath" : "/integration-tests/gradle/src/test/java/io/quarkus/gradle/MultiModuleKotlinProjectBuildTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "runGradleWrapper(projectDir,\"clean\",\"build\")",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 46,
      "startLineNumber" : 14,
      "startColumnNumber" : 34,
      "endLineNumber" : 14,
      "endColumnNumber" : 80
    },
    "astNodeNumber" : 5,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 14,
        "startColumnNumber" : 26,
        "endLineNumber" : 14,
        "endColumnNumber" : 80
      },
      "nodeContext" : "build=runGradleWrapper(projectDir,\"clean\",\"build\")",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 14,
        "startColumnNumber" : 8,
        "endLineNumber" : 14,
        "endColumnNumber" : 81
      },
      "nodeContext" : "final BuildResult build=runGradleWrapper(projectDir,\"clean\",\"build\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 371,
        "startLineNumber" : 12,
        "startColumnNumber" : 61,
        "endLineNumber" : 17,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final File projectDir=getProjectDir(\"multi-module-kotlin-project\");\n  final BuildResult build=runGradleWrapper(projectDir,\"clean\",\"build\");\n  assertThat(build.getTasks().get(\":quarkusGenerateCode\")).isEqualTo(BuildResult.SUCCESS_OUTCOME);\n  assertThat(build.getTasks().get(\":compileKotlin\")).isEqualTo(BuildResult.SUCCESS_OUTCOME);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 49,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 438,
        "startLineNumber" : 11,
        "startColumnNumber" : 4,
        "endLineNumber" : 17,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testBasicMultiModuleBuild() throws Exception {\n  final File projectDir=getProjectDir(\"multi-module-kotlin-project\");\n  final BuildResult build=runGradleWrapper(projectDir,\"clean\",\"build\");\n  assertThat(build.getTasks().get(\":quarkusGenerateCode\")).isEqualTo(BuildResult.SUCCESS_OUTCOME);\n  assertThat(build.getTasks().get(\":compileKotlin\")).isEqualTo(BuildResult.SUCCESS_OUTCOME);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 57,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 14,
        "startColumnNumber" : 8,
        "endLineNumber" : 14,
        "endColumnNumber" : 81
      },
      "nodeContext" : "final BuildResult build=runGradleWrapper(projectDir,\"clean\",\"build\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 4,
    "type" : "io.quarkus.gradle.BuildResult"
  } ],
  "positionList" : [ {
    "charLength" : 46,
    "startLineNumber" : 14,
    "startColumnNumber" : 34,
    "endLineNumber" : 14,
    "endColumnNumber" : 80
  } ],
  "layoutRelationDataList" : [ ]
}