{
  "id" : 490,
  "expression" : "Feature",
  "projectName" : "alibaba@fastjson",
  "commitID" : "2ea5b3f9872f89523b602a558c83d8c1f4d57dce",
  "filePath" : "src/main/java/com/alibaba/fastjson/parser/DefaultJSONParser.java",
  "occurrences" : 5,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Feature",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 204,
      "startColumnNumber" : 30,
      "endLineNumber" : 204,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 204,
        "startColumnNumber" : 30,
        "endLineNumber" : 204,
        "endColumnNumber" : 58
      },
      "nodeContext" : "Feature.AllowArbitraryCommas",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 204,
        "startColumnNumber" : 20,
        "endLineNumber" : 204,
        "endColumnNumber" : 59
      },
      "nodeContext" : "isEnabled(Feature.AllowArbitraryCommas)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 267,
        "startLineNumber" : 204,
        "startColumnNumber" : 16,
        "endLineNumber" : 210,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (isEnabled(Feature.AllowArbitraryCommas)) {\n  while (ch == ',') {\n    lexer.next();\n    lexer.skipWhitespace();\n    ch=lexer.getCurrent();\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 26,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 13486,
        "startLineNumber" : 201,
        "startColumnNumber" : 21,
        "endLineNumber" : 505,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  lexer.skipWhitespace();\n  char ch=lexer.getCurrent();\n  if (isEnabled(Feature.AllowArbitraryCommas)) {\n    while (ch == ',') {\n      lexer.next();\n      lexer.skipWhitespace();\n      ch=lexer.getCurrent();\n    }\n  }\n  boolean isObjectKey=false;\n  Object key;\n  if (ch == '\"') {\n    key=lexer.scanSymbol(symbolTable,'\"');\n    lexer.skipWhitespace();\n    ch=lexer.getCurrent();\n    if (ch != ':') {\n      throw new JSONException(\"expect ':' at \" + lexer.pos() + \", name \"+ key);\n    }\n  }\n else   if (ch == '}') {\n    lexer.next();\n    lexer.resetStringPosition();\n    lexer.nextToken();\n    return object;\n  }\n else   if (ch == '\\'') {\n    if (!isEnabled(Feature.AllowSingleQuotes)) {\n      throw new JSONException(\"syntax error\");\n    }\n    key=lexer.scanSymbol(symbolTable,'\\'');\n    lexer.skipWhitespace();\n    ch=lexer.getCurrent();\n    if (ch != ':') {\n      throw new JSONException(\"expect ':' at \" + lexer.pos());\n    }\n  }\n else   if (ch == EOI) {\n    throw new JSONException(\"syntax error\");\n  }\n else   if (ch == ',') {\n    throw new JSONException(\"syntax error\");\n  }\n else   if ((ch >= '0' && ch <= '9') || ch == '-') {\n    lexer.resetStringPosition();\n    lexer.scanNumber();\n    if (lexer.token() == JSONToken.LITERAL_INT) {\n      key=lexer.integerValue();\n    }\n else {\n      key=lexer.decimalValue(true);\n    }\n    ch=lexer.getCurrent();\n    if (ch != ':') {\n      throw new JSONException(\"expect ':' at \" + lexer.pos() + \", name \"+ key);\n    }\n  }\n else   if (ch == '{' || ch == '[') {\n    lexer.nextToken();\n    key=parse();\n    isObjectKey=true;\n  }\n else {\n    if (!isEnabled(Feature.AllowUnQuotedFieldNames)) {\n      throw new JSONException(\"syntax error\");\n    }\n    key=lexer.scanSymbolUnQuoted(symbolTable);\n    lexer.skipWhitespace();\n    ch=lexer.getCurrent();\n    if (ch != ':') {\n      throw new JSONException(\"expect ':' at \" + lexer.pos() + \", actual \"+ ch);\n    }\n  }\n  if (!isObjectKey) {\n    lexer.next();\n    lexer.skipWhitespace();\n  }\n  ch=lexer.getCurrent();\n  lexer.resetStringPosition();\n  if (key == JSON.DEFAULT_TYPE_KEY) {\n    String typeName=lexer.scanSymbol(symbolTable,'\"');\n    Class<?> clazz=TypeUtils.loadClass(typeName);\n    if (clazz == null) {\n      object.put(JSON.DEFAULT_TYPE_KEY,typeName);\n      continue;\n    }\n    lexer.nextToken(JSONToken.COMMA);\n    if (lexer.token() == JSONToken.RBRACE) {\n      lexer.nextToken(JSONToken.COMMA);\n      try {\n        Object instance=null;\n        ObjectDeserializer deserializer=this.config.getDeserializer(clazz);\n        if (deserializer instanceof ASMJavaBeanDeserializer) {\n          instance=((ASMJavaBeanDeserializer)deserializer).createInstance(this,clazz);\n        }\n else         if (deserializer instanceof JavaBeanDeserializer) {\n          instance=((JavaBeanDeserializer)deserializer).createInstance(this,clazz);\n        }\n        if (instance == null) {\n          if (clazz == Cloneable.class) {\n            instance=new HashMap();\n          }\n else {\n            instance=clazz.newInstance();\n          }\n        }\n        return instance;\n      }\n catch (      Exception e) {\n        throw new JSONException(\"create instance error\",e);\n      }\n    }\n    this.setResolveStatus(TypeNameRedirect);\n    if (this.context != null && !(fieldName instanceof Integer)) {\n      this.popContext();\n    }\n    ObjectDeserializer deserializer=config.getDeserializer(clazz);\n    return deserializer.deserialze(this,clazz,fieldName);\n  }\n  if (key == \"$ref\") {\n    lexer.nextToken(JSONToken.LITERAL_STRING);\n    if (lexer.token() == JSONToken.LITERAL_STRING) {\n      String ref=lexer.stringVal();\n      lexer.nextToken(JSONToken.RBRACE);\n      Object refValue=null;\n      if (\"@\".equals(ref)) {\n        if (this.getContext() != null) {\n          ParseContext thisContext=this.getContext();\n          Object thisObj=thisContext.getObject();\n          if (thisObj instanceof Object[] || thisObj instanceof Collection<?>) {\n            refValue=thisObj;\n          }\n else           if (thisContext.getParentContext() != null) {\n            refValue=thisContext.getParentContext().getObject();\n          }\n        }\n      }\n else       if (\"..\".equals(ref)) {\n        ParseContext parentContext=context.getParentContext();\n        if (parentContext.getObject() != null) {\n          refValue=parentContext.getObject();\n        }\n else {\n          addResolveTask(new ResolveTask(parentContext,ref));\n          setResolveStatus(DefaultJSONParser.NeedToResolve);\n        }\n      }\n else       if (\"$\".equals(ref)) {\n        ParseContext rootContext=context;\n        while (rootContext.getParentContext() != null) {\n          rootContext=rootContext.getParentContext();\n        }\n        if (rootContext.getObject() != null) {\n          refValue=rootContext.getObject();\n        }\n else {\n          addResolveTask(new ResolveTask(rootContext,ref));\n          setResolveStatus(DefaultJSONParser.NeedToResolve);\n        }\n      }\n else {\n        addResolveTask(new ResolveTask(context,ref));\n        setResolveStatus(DefaultJSONParser.NeedToResolve);\n      }\n      if (lexer.token() != JSONToken.RBRACE) {\n        throw new JSONException(\"syntax error\");\n      }\n      lexer.nextToken(JSONToken.COMMA);\n      return refValue;\n    }\n else {\n      throw new JSONException(\"illegal ref, \" + JSONToken.name(lexer.token()));\n    }\n  }\n  if (!setContextFlag) {\n    setContext(object,fieldName);\n    setContextFlag=true;\n    if (this.context != null && !(fieldName instanceof Integer)) {\n      this.popContext();\n    }\n  }\n  if (object.getClass() == JSONObject.class) {\n    key=(key == null) ? \"null\" : key.toString();\n  }\n  Object value;\n  if (ch == '\"') {\n    lexer.scanString();\n    String strValue=lexer.stringVal();\n    value=strValue;\n    if (lexer.isEnabled(Feature.AllowISO8601DateFormat)) {\n      JSONScanner iso8601Lexer=new JSONScanner(strValue);\n      if (iso8601Lexer.scanISO8601DateIfMatch()) {\n        value=iso8601Lexer.getCalendar().getTime();\n      }\n      iso8601Lexer.close();\n    }\n    object.put(key,value);\n  }\n else   if (ch >= '0' && ch <= '9' || ch == '-') {\n    lexer.scanNumber();\n    if (lexer.token() == JSONToken.LITERAL_INT) {\n      value=lexer.integerValue();\n    }\n else {\n      value=lexer.decimalValue(isEnabled(Feature.UseBigDecimal));\n    }\n    object.put(key,value);\n  }\n else   if (ch == '[') {\n    lexer.nextToken();\n    JSONArray list=new JSONArray();\n    this.parseArray(list,key);\n    value=list;\n    object.put(key,value);\n    if (lexer.token() == JSONToken.RBRACE) {\n      lexer.nextToken();\n      return object;\n    }\n else     if (lexer.token() == JSONToken.COMMA) {\n      continue;\n    }\n else {\n      throw new JSONException(\"syntax error\");\n    }\n  }\n else   if (ch == '{') {\n    lexer.nextToken();\n    final boolean parentIsArray=fieldName != null && fieldName.getClass() == Integer.class;\n    JSONObject input=new JSONObject();\n    ParseContext ctxLocal=null;\n    if (!parentIsArray) {\n      ctxLocal=setContext(context,input,key);\n    }\n    Object obj=this.parseObject(input,key);\n    if (ctxLocal != null && input != obj) {\n      ctxLocal.setObject(object);\n    }\n    checkMapResolve(object,key.toString());\n    if (object.getClass() == JSONObject.class) {\n      object.put(key.toString(),obj);\n    }\n else {\n      object.put(key,obj);\n    }\n    if (parentIsArray) {\n      setContext(context,obj,key);\n    }\n    if (lexer.token() == JSONToken.RBRACE) {\n      lexer.nextToken();\n      setContext(context);\n      return object;\n    }\n else     if (lexer.token() == JSONToken.COMMA) {\n      continue;\n    }\n else {\n      throw new JSONException(\"syntax error, \" + lexer.tokenName());\n    }\n  }\n else {\n    lexer.nextToken();\n    value=parse();\n    if (object.getClass() == JSONObject.class) {\n      key=key.toString();\n    }\n    object.put(key,value);\n    if (lexer.token() == JSONToken.RBRACE) {\n      lexer.nextToken();\n      return object;\n    }\n else     if (lexer.token() == JSONToken.COMMA) {\n      continue;\n    }\n else {\n      throw new JSONException(\"syntax error, position at \" + lexer.pos() + \", name \"+ key);\n    }\n  }\n  lexer.skipWhitespace();\n  ch=lexer.getCurrent();\n  if (ch == ',') {\n    lexer.next();\n    continue;\n  }\n else   if (ch == '}') {\n    lexer.next();\n    lexer.resetStringPosition();\n    lexer.nextToken();\n    this.setContext(object,fieldName);\n    return object;\n  }\n else {\n    throw new JSONException(\"syntax error, position at \" + lexer.pos() + \", name \"+ key);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1294,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 13495,
        "startLineNumber" : 201,
        "startColumnNumber" : 12,
        "endLineNumber" : 505,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (; ; ) {\n  lexer.skipWhitespace();\n  char ch=lexer.getCurrent();\n  if (isEnabled(Feature.AllowArbitraryCommas)) {\n    while (ch == ',') {\n      lexer.next();\n      lexer.skipWhitespace();\n      ch=lexer.getCurrent();\n    }\n  }\n  boolean isObjectKey=false;\n  Object key;\n  if (ch == '\"') {\n    key=lexer.scanSymbol(symbolTable,'\"');\n    lexer.skipWhitespace();\n    ch=lexer.getCurrent();\n    if (ch != ':') {\n      throw new JSONException(\"expect ':' at \" + lexer.pos() + \", name \"+ key);\n    }\n  }\n else   if (ch == '}') {\n    lexer.next();\n    lexer.resetStringPosition();\n    lexer.nextToken();\n    return object;\n  }\n else   if (ch == '\\'') {\n    if (!isEnabled(Feature.AllowSingleQuotes)) {\n      throw new JSONException(\"syntax error\");\n    }\n    key=lexer.scanSymbol(symbolTable,'\\'');\n    lexer.skipWhitespace();\n    ch=lexer.getCurrent();\n    if (ch != ':') {\n      throw new JSONException(\"expect ':' at \" + lexer.pos());\n    }\n  }\n else   if (ch == EOI) {\n    throw new JSONException(\"syntax error\");\n  }\n else   if (ch == ',') {\n    throw new JSONException(\"syntax error\");\n  }\n else   if ((ch >= '0' && ch <= '9') || ch == '-') {\n    lexer.resetStringPosition();\n    lexer.scanNumber();\n    if (lexer.token() == JSONToken.LITERAL_INT) {\n      key=lexer.integerValue();\n    }\n else {\n      key=lexer.decimalValue(true);\n    }\n    ch=lexer.getCurrent();\n    if (ch != ':') {\n      throw new JSONException(\"expect ':' at \" + lexer.pos() + \", name \"+ key);\n    }\n  }\n else   if (ch == '{' || ch == '[') {\n    lexer.nextToken();\n    key=parse();\n    isObjectKey=true;\n  }\n else {\n    if (!isEnabled(Feature.AllowUnQuotedFieldNames)) {\n      throw new JSONException(\"syntax error\");\n    }\n    key=lexer.scanSymbolUnQuoted(symbolTable);\n    lexer.skipWhitespace();\n    ch=lexer.getCurrent();\n    if (ch != ':') {\n      throw new JSONException(\"expect ':' at \" + lexer.pos() + \", actual \"+ ch);\n    }\n  }\n  if (!isObjectKey) {\n    lexer.next();\n    lexer.skipWhitespace();\n  }\n  ch=lexer.getCurrent();\n  lexer.resetStringPosition();\n  if (key == JSON.DEFAULT_TYPE_KEY) {\n    String typeName=lexer.scanSymbol(symbolTable,'\"');\n    Class<?> clazz=TypeUtils.loadClass(typeName);\n    if (clazz == null) {\n      object.put(JSON.DEFAULT_TYPE_KEY,typeName);\n      continue;\n    }\n    lexer.nextToken(JSONToken.COMMA);\n    if (lexer.token() == JSONToken.RBRACE) {\n      lexer.nextToken(JSONToken.COMMA);\n      try {\n        Object instance=null;\n        ObjectDeserializer deserializer=this.config.getDeserializer(clazz);\n        if (deserializer instanceof ASMJavaBeanDeserializer) {\n          instance=((ASMJavaBeanDeserializer)deserializer).createInstance(this,clazz);\n        }\n else         if (deserializer instanceof JavaBeanDeserializer) {\n          instance=((JavaBeanDeserializer)deserializer).createInstance(this,clazz);\n        }\n        if (instance == null) {\n          if (clazz == Cloneable.class) {\n            instance=new HashMap();\n          }\n else {\n            instance=clazz.newInstance();\n          }\n        }\n        return instance;\n      }\n catch (      Exception e) {\n        throw new JSONException(\"create instance error\",e);\n      }\n    }\n    this.setResolveStatus(TypeNameRedirect);\n    if (this.context != null && !(fieldName instanceof Integer)) {\n      this.popContext();\n    }\n    ObjectDeserializer deserializer=config.getDeserializer(clazz);\n    return deserializer.deserialze(this,clazz,fieldName);\n  }\n  if (key == \"$ref\") {\n    lexer.nextToken(JSONToken.LITERAL_STRING);\n    if (lexer.token() == JSONToken.LITERAL_STRING) {\n      String ref=lexer.stringVal();\n      lexer.nextToken(JSONToken.RBRACE);\n      Object refValue=null;\n      if (\"@\".equals(ref)) {\n        if (this.getContext() != null) {\n          ParseContext thisContext=this.getContext();\n          Object thisObj=thisContext.getObject();\n          if (thisObj instanceof Object[] || thisObj instanceof Collection<?>) {\n            refValue=thisObj;\n          }\n else           if (thisContext.getParentContext() != null) {\n            refValue=thisContext.getParentContext().getObject();\n          }\n        }\n      }\n else       if (\"..\".equals(ref)) {\n        ParseContext parentContext=context.getParentContext();\n        if (parentContext.getObject() != null) {\n          refValue=parentContext.getObject();\n        }\n else {\n          addResolveTask(new ResolveTask(parentContext,ref));\n          setResolveStatus(DefaultJSONParser.NeedToResolve);\n        }\n      }\n else       if (\"$\".equals(ref)) {\n        ParseContext rootContext=context;\n        while (rootContext.getParentContext() != null) {\n          rootContext=rootContext.getParentContext();\n        }\n        if (rootContext.getObject() != null) {\n          refValue=rootContext.getObject();\n        }\n else {\n          addResolveTask(new ResolveTask(rootContext,ref));\n          setResolveStatus(DefaultJSONParser.NeedToResolve);\n        }\n      }\n else {\n        addResolveTask(new ResolveTask(context,ref));\n        setResolveStatus(DefaultJSONParser.NeedToResolve);\n      }\n      if (lexer.token() != JSONToken.RBRACE) {\n        throw new JSONException(\"syntax error\");\n      }\n      lexer.nextToken(JSONToken.COMMA);\n      return refValue;\n    }\n else {\n      throw new JSONException(\"illegal ref, \" + JSONToken.name(lexer.token()));\n    }\n  }\n  if (!setContextFlag) {\n    setContext(object,fieldName);\n    setContextFlag=true;\n    if (this.context != null && !(fieldName instanceof Integer)) {\n      this.popContext();\n    }\n  }\n  if (object.getClass() == JSONObject.class) {\n    key=(key == null) ? \"null\" : key.toString();\n  }\n  Object value;\n  if (ch == '\"') {\n    lexer.scanString();\n    String strValue=lexer.stringVal();\n    value=strValue;\n    if (lexer.isEnabled(Feature.AllowISO8601DateFormat)) {\n      JSONScanner iso8601Lexer=new JSONScanner(strValue);\n      if (iso8601Lexer.scanISO8601DateIfMatch()) {\n        value=iso8601Lexer.getCalendar().getTime();\n      }\n      iso8601Lexer.close();\n    }\n    object.put(key,value);\n  }\n else   if (ch >= '0' && ch <= '9' || ch == '-') {\n    lexer.scanNumber();\n    if (lexer.token() == JSONToken.LITERAL_INT) {\n      value=lexer.integerValue();\n    }\n else {\n      value=lexer.decimalValue(isEnabled(Feature.UseBigDecimal));\n    }\n    object.put(key,value);\n  }\n else   if (ch == '[') {\n    lexer.nextToken();\n    JSONArray list=new JSONArray();\n    this.parseArray(list,key);\n    value=list;\n    object.put(key,value);\n    if (lexer.token() == JSONToken.RBRACE) {\n      lexer.nextToken();\n      return object;\n    }\n else     if (lexer.token() == JSONToken.COMMA) {\n      continue;\n    }\n else {\n      throw new JSONException(\"syntax error\");\n    }\n  }\n else   if (ch == '{') {\n    lexer.nextToken();\n    final boolean parentIsArray=fieldName != null && fieldName.getClass() == Integer.class;\n    JSONObject input=new JSONObject();\n    ParseContext ctxLocal=null;\n    if (!parentIsArray) {\n      ctxLocal=setContext(context,input,key);\n    }\n    Object obj=this.parseObject(input,key);\n    if (ctxLocal != null && input != obj) {\n      ctxLocal.setObject(object);\n    }\n    checkMapResolve(object,key.toString());\n    if (object.getClass() == JSONObject.class) {\n      object.put(key.toString(),obj);\n    }\n else {\n      object.put(key,obj);\n    }\n    if (parentIsArray) {\n      setContext(context,obj,key);\n    }\n    if (lexer.token() == JSONToken.RBRACE) {\n      lexer.nextToken();\n      setContext(context);\n      return object;\n    }\n else     if (lexer.token() == JSONToken.COMMA) {\n      continue;\n    }\n else {\n      throw new JSONException(\"syntax error, \" + lexer.tokenName());\n    }\n  }\n else {\n    lexer.nextToken();\n    value=parse();\n    if (object.getClass() == JSONObject.class) {\n      key=key.toString();\n    }\n    object.put(key,value);\n    if (lexer.token() == JSONToken.RBRACE) {\n      lexer.nextToken();\n      return object;\n    }\n else     if (lexer.token() == JSONToken.COMMA) {\n      continue;\n    }\n else {\n      throw new JSONException(\"syntax error, position at \" + lexer.pos() + \", name \"+ key);\n    }\n  }\n  lexer.skipWhitespace();\n  ch=lexer.getCurrent();\n  if (ch == ',') {\n    lexer.next();\n    continue;\n  }\n else   if (ch == '}') {\n    lexer.next();\n    lexer.resetStringPosition();\n    lexer.nextToken();\n    this.setContext(object,fieldName);\n    return object;\n  }\n else {\n    throw new JSONException(\"syntax error, position at \" + lexer.pos() + \", name \"+ key);\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 1295,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 13566,
        "startLineNumber" : 199,
        "startColumnNumber" : 12,
        "endLineNumber" : 506,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  boolean setContextFlag=false;\n  for (; ; ) {\n    lexer.skipWhitespace();\n    char ch=lexer.getCurrent();\n    if (isEnabled(Feature.AllowArbitraryCommas)) {\n      while (ch == ',') {\n        lexer.next();\n        lexer.skipWhitespace();\n        ch=lexer.getCurrent();\n      }\n    }\n    boolean isObjectKey=false;\n    Object key;\n    if (ch == '\"') {\n      key=lexer.scanSymbol(symbolTable,'\"');\n      lexer.skipWhitespace();\n      ch=lexer.getCurrent();\n      if (ch != ':') {\n        throw new JSONException(\"expect ':' at \" + lexer.pos() + \", name \"+ key);\n      }\n    }\n else     if (ch == '}') {\n      lexer.next();\n      lexer.resetStringPosition();\n      lexer.nextToken();\n      return object;\n    }\n else     if (ch == '\\'') {\n      if (!isEnabled(Feature.AllowSingleQuotes)) {\n        throw new JSONException(\"syntax error\");\n      }\n      key=lexer.scanSymbol(symbolTable,'\\'');\n      lexer.skipWhitespace();\n      ch=lexer.getCurrent();\n      if (ch != ':') {\n        throw new JSONException(\"expect ':' at \" + lexer.pos());\n      }\n    }\n else     if (ch == EOI) {\n      throw new JSONException(\"syntax error\");\n    }\n else     if (ch == ',') {\n      throw new JSONException(\"syntax error\");\n    }\n else     if ((ch >= '0' && ch <= '9') || ch == '-') {\n      lexer.resetStringPosition();\n      lexer.scanNumber();\n      if (lexer.token() == JSONToken.LITERAL_INT) {\n        key=lexer.integerValue();\n      }\n else {\n        key=lexer.decimalValue(true);\n      }\n      ch=lexer.getCurrent();\n      if (ch != ':') {\n        throw new JSONException(\"expect ':' at \" + lexer.pos() + \", name \"+ key);\n      }\n    }\n else     if (ch == '{' || ch == '[') {\n      lexer.nextToken();\n      key=parse();\n      isObjectKey=true;\n    }\n else {\n      if (!isEnabled(Feature.AllowUnQuotedFieldNames)) {\n        throw new JSONException(\"syntax error\");\n      }\n      key=lexer.scanSymbolUnQuoted(symbolTable);\n      lexer.skipWhitespace();\n      ch=lexer.getCurrent();\n      if (ch != ':') {\n        throw new JSONException(\"expect ':' at \" + lexer.pos() + \", actual \"+ ch);\n      }\n    }\n    if (!isObjectKey) {\n      lexer.next();\n      lexer.skipWhitespace();\n    }\n    ch=lexer.getCurrent();\n    lexer.resetStringPosition();\n    if (key == JSON.DEFAULT_TYPE_KEY) {\n      String typeName=lexer.scanSymbol(symbolTable,'\"');\n      Class<?> clazz=TypeUtils.loadClass(typeName);\n      if (clazz == null) {\n        object.put(JSON.DEFAULT_TYPE_KEY,typeName);\n        continue;\n      }\n      lexer.nextToken(JSONToken.COMMA);\n      if (lexer.token() == JSONToken.RBRACE) {\n        lexer.nextToken(JSONToken.COMMA);\n        try {\n          Object instance=null;\n          ObjectDeserializer deserializer=this.config.getDeserializer(clazz);\n          if (deserializer instanceof ASMJavaBeanDeserializer) {\n            instance=((ASMJavaBeanDeserializer)deserializer).createInstance(this,clazz);\n          }\n else           if (deserializer instanceof JavaBeanDeserializer) {\n            instance=((JavaBeanDeserializer)deserializer).createInstance(this,clazz);\n          }\n          if (instance == null) {\n            if (clazz == Cloneable.class) {\n              instance=new HashMap();\n            }\n else {\n              instance=clazz.newInstance();\n            }\n          }\n          return instance;\n        }\n catch (        Exception e) {\n          throw new JSONException(\"create instance error\",e);\n        }\n      }\n      this.setResolveStatus(TypeNameRedirect);\n      if (this.context != null && !(fieldName instanceof Integer)) {\n        this.popContext();\n      }\n      ObjectDeserializer deserializer=config.getDeserializer(clazz);\n      return deserializer.deserialze(this,clazz,fieldName);\n    }\n    if (key == \"$ref\") {\n      lexer.nextToken(JSONToken.LITERAL_STRING);\n      if (lexer.token() == JSONToken.LITERAL_STRING) {\n        String ref=lexer.stringVal();\n        lexer.nextToken(JSONToken.RBRACE);\n        Object refValue=null;\n        if (\"@\".equals(ref)) {\n          if (this.getContext() != null) {\n            ParseContext thisContext=this.getContext();\n            Object thisObj=thisContext.getObject();\n            if (thisObj instanceof Object[] || thisObj instanceof Collection<?>) {\n              refValue=thisObj;\n            }\n else             if (thisContext.getParentContext() != null) {\n              refValue=thisContext.getParentContext().getObject();\n            }\n          }\n        }\n else         if (\"..\".equals(ref)) {\n          ParseContext parentContext=context.getParentContext();\n          if (parentContext.getObject() != null) {\n            refValue=parentContext.getObject();\n          }\n else {\n            addResolveTask(new ResolveTask(parentContext,ref));\n            setResolveStatus(DefaultJSONParser.NeedToResolve);\n          }\n        }\n else         if (\"$\".equals(ref)) {\n          ParseContext rootContext=context;\n          while (rootContext.getParentContext() != null) {\n            rootContext=rootContext.getParentContext();\n          }\n          if (rootContext.getObject() != null) {\n            refValue=rootContext.getObject();\n          }\n else {\n            addResolveTask(new ResolveTask(rootContext,ref));\n            setResolveStatus(DefaultJSONParser.NeedToResolve);\n          }\n        }\n else {\n          addResolveTask(new ResolveTask(context,ref));\n          setResolveStatus(DefaultJSONParser.NeedToResolve);\n        }\n        if (lexer.token() != JSONToken.RBRACE) {\n          throw new JSONException(\"syntax error\");\n        }\n        lexer.nextToken(JSONToken.COMMA);\n        return refValue;\n      }\n else {\n        throw new JSONException(\"illegal ref, \" + JSONToken.name(lexer.token()));\n      }\n    }\n    if (!setContextFlag) {\n      setContext(object,fieldName);\n      setContextFlag=true;\n      if (this.context != null && !(fieldName instanceof Integer)) {\n        this.popContext();\n      }\n    }\n    if (object.getClass() == JSONObject.class) {\n      key=(key == null) ? \"null\" : key.toString();\n    }\n    Object value;\n    if (ch == '\"') {\n      lexer.scanString();\n      String strValue=lexer.stringVal();\n      value=strValue;\n      if (lexer.isEnabled(Feature.AllowISO8601DateFormat)) {\n        JSONScanner iso8601Lexer=new JSONScanner(strValue);\n        if (iso8601Lexer.scanISO8601DateIfMatch()) {\n          value=iso8601Lexer.getCalendar().getTime();\n        }\n        iso8601Lexer.close();\n      }\n      object.put(key,value);\n    }\n else     if (ch >= '0' && ch <= '9' || ch == '-') {\n      lexer.scanNumber();\n      if (lexer.token() == JSONToken.LITERAL_INT) {\n        value=lexer.integerValue();\n      }\n else {\n        value=lexer.decimalValue(isEnabled(Feature.UseBigDecimal));\n      }\n      object.put(key,value);\n    }\n else     if (ch == '[') {\n      lexer.nextToken();\n      JSONArray list=new JSONArray();\n      this.parseArray(list,key);\n      value=list;\n      object.put(key,value);\n      if (lexer.token() == JSONToken.RBRACE) {\n        lexer.nextToken();\n        return object;\n      }\n else       if (lexer.token() == JSONToken.COMMA) {\n        continue;\n      }\n else {\n        throw new JSONException(\"syntax error\");\n      }\n    }\n else     if (ch == '{') {\n      lexer.nextToken();\n      final boolean parentIsArray=fieldName != null && fieldName.getClass() == Integer.class;\n      JSONObject input=new JSONObject();\n      ParseContext ctxLocal=null;\n      if (!parentIsArray) {\n        ctxLocal=setContext(context,input,key);\n      }\n      Object obj=this.parseObject(input,key);\n      if (ctxLocal != null && input != obj) {\n        ctxLocal.setObject(object);\n      }\n      checkMapResolve(object,key.toString());\n      if (object.getClass() == JSONObject.class) {\n        object.put(key.toString(),obj);\n      }\n else {\n        object.put(key,obj);\n      }\n      if (parentIsArray) {\n        setContext(context,obj,key);\n      }\n      if (lexer.token() == JSONToken.RBRACE) {\n        lexer.nextToken();\n        setContext(context);\n        return object;\n      }\n else       if (lexer.token() == JSONToken.COMMA) {\n        continue;\n      }\n else {\n        throw new JSONException(\"syntax error, \" + lexer.tokenName());\n      }\n    }\n else {\n      lexer.nextToken();\n      value=parse();\n      if (object.getClass() == JSONObject.class) {\n        key=key.toString();\n      }\n      object.put(key,value);\n      if (lexer.token() == JSONToken.RBRACE) {\n        lexer.nextToken();\n        return object;\n      }\n else       if (lexer.token() == JSONToken.COMMA) {\n        continue;\n      }\n else {\n        throw new JSONException(\"syntax error, position at \" + lexer.pos() + \", name \"+ key);\n      }\n    }\n    lexer.skipWhitespace();\n    ch=lexer.getCurrent();\n    if (ch == ',') {\n      lexer.next();\n      continue;\n    }\n else     if (ch == '}') {\n      lexer.next();\n      lexer.resetStringPosition();\n      lexer.nextToken();\n      this.setContext(object,fieldName);\n      return object;\n    }\n else {\n      throw new JSONException(\"syntax error, position at \" + lexer.pos() + \", name \"+ key);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1301,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 13630,
        "startLineNumber" : 199,
        "startColumnNumber" : 8,
        "endLineNumber" : 508,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  boolean setContextFlag=false;\n  for (; ; ) {\n    lexer.skipWhitespace();\n    char ch=lexer.getCurrent();\n    if (isEnabled(Feature.AllowArbitraryCommas)) {\n      while (ch == ',') {\n        lexer.next();\n        lexer.skipWhitespace();\n        ch=lexer.getCurrent();\n      }\n    }\n    boolean isObjectKey=false;\n    Object key;\n    if (ch == '\"') {\n      key=lexer.scanSymbol(symbolTable,'\"');\n      lexer.skipWhitespace();\n      ch=lexer.getCurrent();\n      if (ch != ':') {\n        throw new JSONException(\"expect ':' at \" + lexer.pos() + \", name \"+ key);\n      }\n    }\n else     if (ch == '}') {\n      lexer.next();\n      lexer.resetStringPosition();\n      lexer.nextToken();\n      return object;\n    }\n else     if (ch == '\\'') {\n      if (!isEnabled(Feature.AllowSingleQuotes)) {\n        throw new JSONException(\"syntax error\");\n      }\n      key=lexer.scanSymbol(symbolTable,'\\'');\n      lexer.skipWhitespace();\n      ch=lexer.getCurrent();\n      if (ch != ':') {\n        throw new JSONException(\"expect ':' at \" + lexer.pos());\n      }\n    }\n else     if (ch == EOI) {\n      throw new JSONException(\"syntax error\");\n    }\n else     if (ch == ',') {\n      throw new JSONException(\"syntax error\");\n    }\n else     if ((ch >= '0' && ch <= '9') || ch == '-') {\n      lexer.resetStringPosition();\n      lexer.scanNumber();\n      if (lexer.token() == JSONToken.LITERAL_INT) {\n        key=lexer.integerValue();\n      }\n else {\n        key=lexer.decimalValue(true);\n      }\n      ch=lexer.getCurrent();\n      if (ch != ':') {\n        throw new JSONException(\"expect ':' at \" + lexer.pos() + \", name \"+ key);\n      }\n    }\n else     if (ch == '{' || ch == '[') {\n      lexer.nextToken();\n      key=parse();\n      isObjectKey=true;\n    }\n else {\n      if (!isEnabled(Feature.AllowUnQuotedFieldNames)) {\n        throw new JSONException(\"syntax error\");\n      }\n      key=lexer.scanSymbolUnQuoted(symbolTable);\n      lexer.skipWhitespace();\n      ch=lexer.getCurrent();\n      if (ch != ':') {\n        throw new JSONException(\"expect ':' at \" + lexer.pos() + \", actual \"+ ch);\n      }\n    }\n    if (!isObjectKey) {\n      lexer.next();\n      lexer.skipWhitespace();\n    }\n    ch=lexer.getCurrent();\n    lexer.resetStringPosition();\n    if (key == JSON.DEFAULT_TYPE_KEY) {\n      String typeName=lexer.scanSymbol(symbolTable,'\"');\n      Class<?> clazz=TypeUtils.loadClass(typeName);\n      if (clazz == null) {\n        object.put(JSON.DEFAULT_TYPE_KEY,typeName);\n        continue;\n      }\n      lexer.nextToken(JSONToken.COMMA);\n      if (lexer.token() == JSONToken.RBRACE) {\n        lexer.nextToken(JSONToken.COMMA);\n        try {\n          Object instance=null;\n          ObjectDeserializer deserializer=this.config.getDeserializer(clazz);\n          if (deserializer instanceof ASMJavaBeanDeserializer) {\n            instance=((ASMJavaBeanDeserializer)deserializer).createInstance(this,clazz);\n          }\n else           if (deserializer instanceof JavaBeanDeserializer) {\n            instance=((JavaBeanDeserializer)deserializer).createInstance(this,clazz);\n          }\n          if (instance == null) {\n            if (clazz == Cloneable.class) {\n              instance=new HashMap();\n            }\n else {\n              instance=clazz.newInstance();\n            }\n          }\n          return instance;\n        }\n catch (        Exception e) {\n          throw new JSONException(\"create instance error\",e);\n        }\n      }\n      this.setResolveStatus(TypeNameRedirect);\n      if (this.context != null && !(fieldName instanceof Integer)) {\n        this.popContext();\n      }\n      ObjectDeserializer deserializer=config.getDeserializer(clazz);\n      return deserializer.deserialze(this,clazz,fieldName);\n    }\n    if (key == \"$ref\") {\n      lexer.nextToken(JSONToken.LITERAL_STRING);\n      if (lexer.token() == JSONToken.LITERAL_STRING) {\n        String ref=lexer.stringVal();\n        lexer.nextToken(JSONToken.RBRACE);\n        Object refValue=null;\n        if (\"@\".equals(ref)) {\n          if (this.getContext() != null) {\n            ParseContext thisContext=this.getContext();\n            Object thisObj=thisContext.getObject();\n            if (thisObj instanceof Object[] || thisObj instanceof Collection<?>) {\n              refValue=thisObj;\n            }\n else             if (thisContext.getParentContext() != null) {\n              refValue=thisContext.getParentContext().getObject();\n            }\n          }\n        }\n else         if (\"..\".equals(ref)) {\n          ParseContext parentContext=context.getParentContext();\n          if (parentContext.getObject() != null) {\n            refValue=parentContext.getObject();\n          }\n else {\n            addResolveTask(new ResolveTask(parentContext,ref));\n            setResolveStatus(DefaultJSONParser.NeedToResolve);\n          }\n        }\n else         if (\"$\".equals(ref)) {\n          ParseContext rootContext=context;\n          while (rootContext.getParentContext() != null) {\n            rootContext=rootContext.getParentContext();\n          }\n          if (rootContext.getObject() != null) {\n            refValue=rootContext.getObject();\n          }\n else {\n            addResolveTask(new ResolveTask(rootContext,ref));\n            setResolveStatus(DefaultJSONParser.NeedToResolve);\n          }\n        }\n else {\n          addResolveTask(new ResolveTask(context,ref));\n          setResolveStatus(DefaultJSONParser.NeedToResolve);\n        }\n        if (lexer.token() != JSONToken.RBRACE) {\n          throw new JSONException(\"syntax error\");\n        }\n        lexer.nextToken(JSONToken.COMMA);\n        return refValue;\n      }\n else {\n        throw new JSONException(\"illegal ref, \" + JSONToken.name(lexer.token()));\n      }\n    }\n    if (!setContextFlag) {\n      setContext(object,fieldName);\n      setContextFlag=true;\n      if (this.context != null && !(fieldName instanceof Integer)) {\n        this.popContext();\n      }\n    }\n    if (object.getClass() == JSONObject.class) {\n      key=(key == null) ? \"null\" : key.toString();\n    }\n    Object value;\n    if (ch == '\"') {\n      lexer.scanString();\n      String strValue=lexer.stringVal();\n      value=strValue;\n      if (lexer.isEnabled(Feature.AllowISO8601DateFormat)) {\n        JSONScanner iso8601Lexer=new JSONScanner(strValue);\n        if (iso8601Lexer.scanISO8601DateIfMatch()) {\n          value=iso8601Lexer.getCalendar().getTime();\n        }\n        iso8601Lexer.close();\n      }\n      object.put(key,value);\n    }\n else     if (ch >= '0' && ch <= '9' || ch == '-') {\n      lexer.scanNumber();\n      if (lexer.token() == JSONToken.LITERAL_INT) {\n        value=lexer.integerValue();\n      }\n else {\n        value=lexer.decimalValue(isEnabled(Feature.UseBigDecimal));\n      }\n      object.put(key,value);\n    }\n else     if (ch == '[') {\n      lexer.nextToken();\n      JSONArray list=new JSONArray();\n      this.parseArray(list,key);\n      value=list;\n      object.put(key,value);\n      if (lexer.token() == JSONToken.RBRACE) {\n        lexer.nextToken();\n        return object;\n      }\n else       if (lexer.token() == JSONToken.COMMA) {\n        continue;\n      }\n else {\n        throw new JSONException(\"syntax error\");\n      }\n    }\n else     if (ch == '{') {\n      lexer.nextToken();\n      final boolean parentIsArray=fieldName != null && fieldName.getClass() == Integer.class;\n      JSONObject input=new JSONObject();\n      ParseContext ctxLocal=null;\n      if (!parentIsArray) {\n        ctxLocal=setContext(context,input,key);\n      }\n      Object obj=this.parseObject(input,key);\n      if (ctxLocal != null && input != obj) {\n        ctxLocal.setObject(object);\n      }\n      checkMapResolve(object,key.toString());\n      if (object.getClass() == JSONObject.class) {\n        object.put(key.toString(),obj);\n      }\n else {\n        object.put(key,obj);\n      }\n      if (parentIsArray) {\n        setContext(context,obj,key);\n      }\n      if (lexer.token() == JSONToken.RBRACE) {\n        lexer.nextToken();\n        setContext(context);\n        return object;\n      }\n else       if (lexer.token() == JSONToken.COMMA) {\n        continue;\n      }\n else {\n        throw new JSONException(\"syntax error, \" + lexer.tokenName());\n      }\n    }\n else {\n      lexer.nextToken();\n      value=parse();\n      if (object.getClass() == JSONObject.class) {\n        key=key.toString();\n      }\n      object.put(key,value);\n      if (lexer.token() == JSONToken.RBRACE) {\n        lexer.nextToken();\n        return object;\n      }\n else       if (lexer.token() == JSONToken.COMMA) {\n        continue;\n      }\n else {\n        throw new JSONException(\"syntax error, position at \" + lexer.pos() + \", name \"+ key);\n      }\n    }\n    lexer.skipWhitespace();\n    ch=lexer.getCurrent();\n    if (ch == ',') {\n      lexer.next();\n      continue;\n    }\n else     if (ch == '}') {\n      lexer.next();\n      lexer.resetStringPosition();\n      lexer.nextToken();\n      this.setContext(object,fieldName);\n      return object;\n    }\n else {\n      throw new JSONException(\"syntax error, position at \" + lexer.pos() + \", name \"+ key);\n    }\n  }\n}\n  finally {\n  this.setContext(context);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 1308,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 13940,
        "startLineNumber" : 191,
        "startColumnNumber" : 72,
        "endLineNumber" : 510,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final JSONLexer lexer=this.lexer;\n  if (lexer.token() != JSONToken.LBRACE && lexer.token() != JSONToken.COMMA) {\n    throw new JSONException(\"syntax error, expect {, actual \" + lexer.tokenName());\n  }\n  ParseContext context=this.getContext();\n  try {\n    boolean setContextFlag=false;\n    for (; ; ) {\n      lexer.skipWhitespace();\n      char ch=lexer.getCurrent();\n      if (isEnabled(Feature.AllowArbitraryCommas)) {\n        while (ch == ',') {\n          lexer.next();\n          lexer.skipWhitespace();\n          ch=lexer.getCurrent();\n        }\n      }\n      boolean isObjectKey=false;\n      Object key;\n      if (ch == '\"') {\n        key=lexer.scanSymbol(symbolTable,'\"');\n        lexer.skipWhitespace();\n        ch=lexer.getCurrent();\n        if (ch != ':') {\n          throw new JSONException(\"expect ':' at \" + lexer.pos() + \", name \"+ key);\n        }\n      }\n else       if (ch == '}') {\n        lexer.next();\n        lexer.resetStringPosition();\n        lexer.nextToken();\n        return object;\n      }\n else       if (ch == '\\'') {\n        if (!isEnabled(Feature.AllowSingleQuotes)) {\n          throw new JSONException(\"syntax error\");\n        }\n        key=lexer.scanSymbol(symbolTable,'\\'');\n        lexer.skipWhitespace();\n        ch=lexer.getCurrent();\n        if (ch != ':') {\n          throw new JSONException(\"expect ':' at \" + lexer.pos());\n        }\n      }\n else       if (ch == EOI) {\n        throw new JSONException(\"syntax error\");\n      }\n else       if (ch == ',') {\n        throw new JSONException(\"syntax error\");\n      }\n else       if ((ch >= '0' && ch <= '9') || ch == '-') {\n        lexer.resetStringPosition();\n        lexer.scanNumber();\n        if (lexer.token() == JSONToken.LITERAL_INT) {\n          key=lexer.integerValue();\n        }\n else {\n          key=lexer.decimalValue(true);\n        }\n        ch=lexer.getCurrent();\n        if (ch != ':') {\n          throw new JSONException(\"expect ':' at \" + lexer.pos() + \", name \"+ key);\n        }\n      }\n else       if (ch == '{' || ch == '[') {\n        lexer.nextToken();\n        key=parse();\n        isObjectKey=true;\n      }\n else {\n        if (!isEnabled(Feature.AllowUnQuotedFieldNames)) {\n          throw new JSONException(\"syntax error\");\n        }\n        key=lexer.scanSymbolUnQuoted(symbolTable);\n        lexer.skipWhitespace();\n        ch=lexer.getCurrent();\n        if (ch != ':') {\n          throw new JSONException(\"expect ':' at \" + lexer.pos() + \", actual \"+ ch);\n        }\n      }\n      if (!isObjectKey) {\n        lexer.next();\n        lexer.skipWhitespace();\n      }\n      ch=lexer.getCurrent();\n      lexer.resetStringPosition();\n      if (key == JSON.DEFAULT_TYPE_KEY) {\n        String typeName=lexer.scanSymbol(symbolTable,'\"');\n        Class<?> clazz=TypeUtils.loadClass(typeName);\n        if (clazz == null) {\n          object.put(JSON.DEFAULT_TYPE_KEY,typeName);\n          continue;\n        }\n        lexer.nextToken(JSONToken.COMMA);\n        if (lexer.token() == JSONToken.RBRACE) {\n          lexer.nextToken(JSONToken.COMMA);\n          try {\n            Object instance=null;\n            ObjectDeserializer deserializer=this.config.getDeserializer(clazz);\n            if (deserializer instanceof ASMJavaBeanDeserializer) {\n              instance=((ASMJavaBeanDeserializer)deserializer).createInstance(this,clazz);\n            }\n else             if (deserializer instanceof JavaBeanDeserializer) {\n              instance=((JavaBeanDeserializer)deserializer).createInstance(this,clazz);\n            }\n            if (instance == null) {\n              if (clazz == Cloneable.class) {\n                instance=new HashMap();\n              }\n else {\n                instance=clazz.newInstance();\n              }\n            }\n            return instance;\n          }\n catch (          Exception e) {\n            throw new JSONException(\"create instance error\",e);\n          }\n        }\n        this.setResolveStatus(TypeNameRedirect);\n        if (this.context != null && !(fieldName instanceof Integer)) {\n          this.popContext();\n        }\n        ObjectDeserializer deserializer=config.getDeserializer(clazz);\n        return deserializer.deserialze(this,clazz,fieldName);\n      }\n      if (key == \"$ref\") {\n        lexer.nextToken(JSONToken.LITERAL_STRING);\n        if (lexer.token() == JSONToken.LITERAL_STRING) {\n          String ref=lexer.stringVal();\n          lexer.nextToken(JSONToken.RBRACE);\n          Object refValue=null;\n          if (\"@\".equals(ref)) {\n            if (this.getContext() != null) {\n              ParseContext thisContext=this.getContext();\n              Object thisObj=thisContext.getObject();\n              if (thisObj instanceof Object[] || thisObj instanceof Collection<?>) {\n                refValue=thisObj;\n              }\n else               if (thisContext.getParentContext() != null) {\n                refValue=thisContext.getParentContext().getObject();\n              }\n            }\n          }\n else           if (\"..\".equals(ref)) {\n            ParseContext parentContext=context.getParentContext();\n            if (parentContext.getObject() != null) {\n              refValue=parentContext.getObject();\n            }\n else {\n              addResolveTask(new ResolveTask(parentContext,ref));\n              setResolveStatus(DefaultJSONParser.NeedToResolve);\n            }\n          }\n else           if (\"$\".equals(ref)) {\n            ParseContext rootContext=context;\n            while (rootContext.getParentContext() != null) {\n              rootContext=rootContext.getParentContext();\n            }\n            if (rootContext.getObject() != null) {\n              refValue=rootContext.getObject();\n            }\n else {\n              addResolveTask(new ResolveTask(rootContext,ref));\n              setResolveStatus(DefaultJSONParser.NeedToResolve);\n            }\n          }\n else {\n            addResolveTask(new ResolveTask(context,ref));\n            setResolveStatus(DefaultJSONParser.NeedToResolve);\n          }\n          if (lexer.token() != JSONToken.RBRACE) {\n            throw new JSONException(\"syntax error\");\n          }\n          lexer.nextToken(JSONToken.COMMA);\n          return refValue;\n        }\n else {\n          throw new JSONException(\"illegal ref, \" + JSONToken.name(lexer.token()));\n        }\n      }\n      if (!setContextFlag) {\n        setContext(object,fieldName);\n        setContextFlag=true;\n        if (this.context != null && !(fieldName instanceof Integer)) {\n          this.popContext();\n        }\n      }\n      if (object.getClass() == JSONObject.class) {\n        key=(key == null) ? \"null\" : key.toString();\n      }\n      Object value;\n      if (ch == '\"') {\n        lexer.scanString();\n        String strValue=lexer.stringVal();\n        value=strValue;\n        if (lexer.isEnabled(Feature.AllowISO8601DateFormat)) {\n          JSONScanner iso8601Lexer=new JSONScanner(strValue);\n          if (iso8601Lexer.scanISO8601DateIfMatch()) {\n            value=iso8601Lexer.getCalendar().getTime();\n          }\n          iso8601Lexer.close();\n        }\n        object.put(key,value);\n      }\n else       if (ch >= '0' && ch <= '9' || ch == '-') {\n        lexer.scanNumber();\n        if (lexer.token() == JSONToken.LITERAL_INT) {\n          value=lexer.integerValue();\n        }\n else {\n          value=lexer.decimalValue(isEnabled(Feature.UseBigDecimal));\n        }\n        object.put(key,value);\n      }\n else       if (ch == '[') {\n        lexer.nextToken();\n        JSONArray list=new JSONArray();\n        this.parseArray(list,key);\n        value=list;\n        object.put(key,value);\n        if (lexer.token() == JSONToken.RBRACE) {\n          lexer.nextToken();\n          return object;\n        }\n else         if (lexer.token() == JSONToken.COMMA) {\n          continue;\n        }\n else {\n          throw new JSONException(\"syntax error\");\n        }\n      }\n else       if (ch == '{') {\n        lexer.nextToken();\n        final boolean parentIsArray=fieldName != null && fieldName.getClass() == Integer.class;\n        JSONObject input=new JSONObject();\n        ParseContext ctxLocal=null;\n        if (!parentIsArray) {\n          ctxLocal=setContext(context,input,key);\n        }\n        Object obj=this.parseObject(input,key);\n        if (ctxLocal != null && input != obj) {\n          ctxLocal.setObject(object);\n        }\n        checkMapResolve(object,key.toString());\n        if (object.getClass() == JSONObject.class) {\n          object.put(key.toString(),obj);\n        }\n else {\n          object.put(key,obj);\n        }\n        if (parentIsArray) {\n          setContext(context,obj,key);\n        }\n        if (lexer.token() == JSONToken.RBRACE) {\n          lexer.nextToken();\n          setContext(context);\n          return object;\n        }\n else         if (lexer.token() == JSONToken.COMMA) {\n          continue;\n        }\n else {\n          throw new JSONException(\"syntax error, \" + lexer.tokenName());\n        }\n      }\n else {\n        lexer.nextToken();\n        value=parse();\n        if (object.getClass() == JSONObject.class) {\n          key=key.toString();\n        }\n        object.put(key,value);\n        if (lexer.token() == JSONToken.RBRACE) {\n          lexer.nextToken();\n          return object;\n        }\n else         if (lexer.token() == JSONToken.COMMA) {\n          continue;\n        }\n else {\n          throw new JSONException(\"syntax error, position at \" + lexer.pos() + \", name \"+ key);\n        }\n      }\n      lexer.skipWhitespace();\n      ch=lexer.getCurrent();\n      if (ch == ',') {\n        lexer.next();\n        continue;\n      }\n else       if (ch == '}') {\n        lexer.next();\n        lexer.resetStringPosition();\n        lexer.nextToken();\n        this.setContext(object,fieldName);\n        return object;\n      }\n else {\n        throw new JSONException(\"syntax error, position at \" + lexer.pos() + \", name \"+ key);\n      }\n    }\n  }\n  finally {\n    this.setContext(context);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1352,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 14060,
        "startLineNumber" : 190,
        "startColumnNumber" : 4,
        "endLineNumber" : 510,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@SuppressWarnings({\"unchecked\",\"rawtypes\"}) public final Object parseObject(final Map object,Object fieldName){\n  final JSONLexer lexer=this.lexer;\n  if (lexer.token() != JSONToken.LBRACE && lexer.token() != JSONToken.COMMA) {\n    throw new JSONException(\"syntax error, expect {, actual \" + lexer.tokenName());\n  }\n  ParseContext context=this.getContext();\n  try {\n    boolean setContextFlag=false;\n    for (; ; ) {\n      lexer.skipWhitespace();\n      char ch=lexer.getCurrent();\n      if (isEnabled(Feature.AllowArbitraryCommas)) {\n        while (ch == ',') {\n          lexer.next();\n          lexer.skipWhitespace();\n          ch=lexer.getCurrent();\n        }\n      }\n      boolean isObjectKey=false;\n      Object key;\n      if (ch == '\"') {\n        key=lexer.scanSymbol(symbolTable,'\"');\n        lexer.skipWhitespace();\n        ch=lexer.getCurrent();\n        if (ch != ':') {\n          throw new JSONException(\"expect ':' at \" + lexer.pos() + \", name \"+ key);\n        }\n      }\n else       if (ch == '}') {\n        lexer.next();\n        lexer.resetStringPosition();\n        lexer.nextToken();\n        return object;\n      }\n else       if (ch == '\\'') {\n        if (!isEnabled(Feature.AllowSingleQuotes)) {\n          throw new JSONException(\"syntax error\");\n        }\n        key=lexer.scanSymbol(symbolTable,'\\'');\n        lexer.skipWhitespace();\n        ch=lexer.getCurrent();\n        if (ch != ':') {\n          throw new JSONException(\"expect ':' at \" + lexer.pos());\n        }\n      }\n else       if (ch == EOI) {\n        throw new JSONException(\"syntax error\");\n      }\n else       if (ch == ',') {\n        throw new JSONException(\"syntax error\");\n      }\n else       if ((ch >= '0' && ch <= '9') || ch == '-') {\n        lexer.resetStringPosition();\n        lexer.scanNumber();\n        if (lexer.token() == JSONToken.LITERAL_INT) {\n          key=lexer.integerValue();\n        }\n else {\n          key=lexer.decimalValue(true);\n        }\n        ch=lexer.getCurrent();\n        if (ch != ':') {\n          throw new JSONException(\"expect ':' at \" + lexer.pos() + \", name \"+ key);\n        }\n      }\n else       if (ch == '{' || ch == '[') {\n        lexer.nextToken();\n        key=parse();\n        isObjectKey=true;\n      }\n else {\n        if (!isEnabled(Feature.AllowUnQuotedFieldNames)) {\n          throw new JSONException(\"syntax error\");\n        }\n        key=lexer.scanSymbolUnQuoted(symbolTable);\n        lexer.skipWhitespace();\n        ch=lexer.getCurrent();\n        if (ch != ':') {\n          throw new JSONException(\"expect ':' at \" + lexer.pos() + \", actual \"+ ch);\n        }\n      }\n      if (!isObjectKey) {\n        lexer.next();\n        lexer.skipWhitespace();\n      }\n      ch=lexer.getCurrent();\n      lexer.resetStringPosition();\n      if (key == JSON.DEFAULT_TYPE_KEY) {\n        String typeName=lexer.scanSymbol(symbolTable,'\"');\n        Class<?> clazz=TypeUtils.loadClass(typeName);\n        if (clazz == null) {\n          object.put(JSON.DEFAULT_TYPE_KEY,typeName);\n          continue;\n        }\n        lexer.nextToken(JSONToken.COMMA);\n        if (lexer.token() == JSONToken.RBRACE) {\n          lexer.nextToken(JSONToken.COMMA);\n          try {\n            Object instance=null;\n            ObjectDeserializer deserializer=this.config.getDeserializer(clazz);\n            if (deserializer instanceof ASMJavaBeanDeserializer) {\n              instance=((ASMJavaBeanDeserializer)deserializer).createInstance(this,clazz);\n            }\n else             if (deserializer instanceof JavaBeanDeserializer) {\n              instance=((JavaBeanDeserializer)deserializer).createInstance(this,clazz);\n            }\n            if (instance == null) {\n              if (clazz == Cloneable.class) {\n                instance=new HashMap();\n              }\n else {\n                instance=clazz.newInstance();\n              }\n            }\n            return instance;\n          }\n catch (          Exception e) {\n            throw new JSONException(\"create instance error\",e);\n          }\n        }\n        this.setResolveStatus(TypeNameRedirect);\n        if (this.context != null && !(fieldName instanceof Integer)) {\n          this.popContext();\n        }\n        ObjectDeserializer deserializer=config.getDeserializer(clazz);\n        return deserializer.deserialze(this,clazz,fieldName);\n      }\n      if (key == \"$ref\") {\n        lexer.nextToken(JSONToken.LITERAL_STRING);\n        if (lexer.token() == JSONToken.LITERAL_STRING) {\n          String ref=lexer.stringVal();\n          lexer.nextToken(JSONToken.RBRACE);\n          Object refValue=null;\n          if (\"@\".equals(ref)) {\n            if (this.getContext() != null) {\n              ParseContext thisContext=this.getContext();\n              Object thisObj=thisContext.getObject();\n              if (thisObj instanceof Object[] || thisObj instanceof Collection<?>) {\n                refValue=thisObj;\n              }\n else               if (thisContext.getParentContext() != null) {\n                refValue=thisContext.getParentContext().getObject();\n              }\n            }\n          }\n else           if (\"..\".equals(ref)) {\n            ParseContext parentContext=context.getParentContext();\n            if (parentContext.getObject() != null) {\n              refValue=parentContext.getObject();\n            }\n else {\n              addResolveTask(new ResolveTask(parentContext,ref));\n              setResolveStatus(DefaultJSONParser.NeedToResolve);\n            }\n          }\n else           if (\"$\".equals(ref)) {\n            ParseContext rootContext=context;\n            while (rootContext.getParentContext() != null) {\n              rootContext=rootContext.getParentContext();\n            }\n            if (rootContext.getObject() != null) {\n              refValue=rootContext.getObject();\n            }\n else {\n              addResolveTask(new ResolveTask(rootContext,ref));\n              setResolveStatus(DefaultJSONParser.NeedToResolve);\n            }\n          }\n else {\n            addResolveTask(new ResolveTask(context,ref));\n            setResolveStatus(DefaultJSONParser.NeedToResolve);\n          }\n          if (lexer.token() != JSONToken.RBRACE) {\n            throw new JSONException(\"syntax error\");\n          }\n          lexer.nextToken(JSONToken.COMMA);\n          return refValue;\n        }\n else {\n          throw new JSONException(\"illegal ref, \" + JSONToken.name(lexer.token()));\n        }\n      }\n      if (!setContextFlag) {\n        setContext(object,fieldName);\n        setContextFlag=true;\n        if (this.context != null && !(fieldName instanceof Integer)) {\n          this.popContext();\n        }\n      }\n      if (object.getClass() == JSONObject.class) {\n        key=(key == null) ? \"null\" : key.toString();\n      }\n      Object value;\n      if (ch == '\"') {\n        lexer.scanString();\n        String strValue=lexer.stringVal();\n        value=strValue;\n        if (lexer.isEnabled(Feature.AllowISO8601DateFormat)) {\n          JSONScanner iso8601Lexer=new JSONScanner(strValue);\n          if (iso8601Lexer.scanISO8601DateIfMatch()) {\n            value=iso8601Lexer.getCalendar().getTime();\n          }\n          iso8601Lexer.close();\n        }\n        object.put(key,value);\n      }\n else       if (ch >= '0' && ch <= '9' || ch == '-') {\n        lexer.scanNumber();\n        if (lexer.token() == JSONToken.LITERAL_INT) {\n          value=lexer.integerValue();\n        }\n else {\n          value=lexer.decimalValue(isEnabled(Feature.UseBigDecimal));\n        }\n        object.put(key,value);\n      }\n else       if (ch == '[') {\n        lexer.nextToken();\n        JSONArray list=new JSONArray();\n        this.parseArray(list,key);\n        value=list;\n        object.put(key,value);\n        if (lexer.token() == JSONToken.RBRACE) {\n          lexer.nextToken();\n          return object;\n        }\n else         if (lexer.token() == JSONToken.COMMA) {\n          continue;\n        }\n else {\n          throw new JSONException(\"syntax error\");\n        }\n      }\n else       if (ch == '{') {\n        lexer.nextToken();\n        final boolean parentIsArray=fieldName != null && fieldName.getClass() == Integer.class;\n        JSONObject input=new JSONObject();\n        ParseContext ctxLocal=null;\n        if (!parentIsArray) {\n          ctxLocal=setContext(context,input,key);\n        }\n        Object obj=this.parseObject(input,key);\n        if (ctxLocal != null && input != obj) {\n          ctxLocal.setObject(object);\n        }\n        checkMapResolve(object,key.toString());\n        if (object.getClass() == JSONObject.class) {\n          object.put(key.toString(),obj);\n        }\n else {\n          object.put(key,obj);\n        }\n        if (parentIsArray) {\n          setContext(context,obj,key);\n        }\n        if (lexer.token() == JSONToken.RBRACE) {\n          lexer.nextToken();\n          setContext(context);\n          return object;\n        }\n else         if (lexer.token() == JSONToken.COMMA) {\n          continue;\n        }\n else {\n          throw new JSONException(\"syntax error, \" + lexer.tokenName());\n        }\n      }\n else {\n        lexer.nextToken();\n        value=parse();\n        if (object.getClass() == JSONObject.class) {\n          key=key.toString();\n        }\n        object.put(key,value);\n        if (lexer.token() == JSONToken.RBRACE) {\n          lexer.nextToken();\n          return object;\n        }\n else         if (lexer.token() == JSONToken.COMMA) {\n          continue;\n        }\n else {\n          throw new JSONException(\"syntax error, position at \" + lexer.pos() + \", name \"+ key);\n        }\n      }\n      lexer.skipWhitespace();\n      ch=lexer.getCurrent();\n      if (ch == ',') {\n        lexer.next();\n        continue;\n      }\n else       if (ch == '}') {\n        lexer.next();\n        lexer.resetStringPosition();\n        lexer.nextToken();\n        this.setContext(object,fieldName);\n        return object;\n      }\n else {\n        throw new JSONException(\"syntax error, position at \" + lexer.pos() + \", name \"+ key);\n      }\n    }\n  }\n  finally {\n    this.setContext(context);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1372,
      "astHeight" : 22
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 204,
        "startColumnNumber" : 20,
        "endLineNumber" : 204,
        "endColumnNumber" : 59
      },
      "nodeContext" : "isEnabled(Feature.AllowArbitraryCommas)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.alibaba.fastjson.parser.Feature"
  }, {
    "nodeContext" : "Feature",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 227,
      "startColumnNumber" : 35,
      "endLineNumber" : 227,
      "endColumnNumber" : 42
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 227,
        "startColumnNumber" : 35,
        "endLineNumber" : 227,
        "endColumnNumber" : 60
      },
      "nodeContext" : "Feature.AllowSingleQuotes",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 227,
        "startColumnNumber" : 25,
        "endLineNumber" : 227,
        "endColumnNumber" : 61
      },
      "nodeContext" : "isEnabled(Feature.AllowSingleQuotes)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 227,
        "startColumnNumber" : 24,
        "endLineNumber" : 227,
        "endColumnNumber" : 61
      },
      "nodeContext" : "!isEnabled(Feature.AllowSingleQuotes)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 133,
        "startLineNumber" : 227,
        "startColumnNumber" : 20,
        "endLineNumber" : 229,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (!isEnabled(Feature.AllowSingleQuotes)) {\n  throw new JSONException(\"syntax error\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 475,
        "startLineNumber" : 226,
        "startColumnNumber" : 39,
        "endLineNumber" : 237,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  if (!isEnabled(Feature.AllowSingleQuotes)) {\n    throw new JSONException(\"syntax error\");\n  }\n  key=lexer.scanSymbol(symbolTable,'\\'');\n  lexer.skipWhitespace();\n  ch=lexer.getCurrent();\n  if (ch != ':') {\n    throw new JSONException(\"expect ':' at \" + lexer.pos());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 46,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1973,
        "startLineNumber" : 226,
        "startColumnNumber" : 23,
        "endLineNumber" : 268,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (ch == '\\'') {\n  if (!isEnabled(Feature.AllowSingleQuotes)) {\n    throw new JSONException(\"syntax error\");\n  }\n  key=lexer.scanSymbol(symbolTable,'\\'');\n  lexer.skipWhitespace();\n  ch=lexer.getCurrent();\n  if (ch != ':') {\n    throw new JSONException(\"expect ':' at \" + lexer.pos());\n  }\n}\n else if (ch == EOI) {\n  throw new JSONException(\"syntax error\");\n}\n else if (ch == ',') {\n  throw new JSONException(\"syntax error\");\n}\n else if ((ch >= '0' && ch <= '9') || ch == '-') {\n  lexer.resetStringPosition();\n  lexer.scanNumber();\n  if (lexer.token() == JSONToken.LITERAL_INT) {\n    key=lexer.integerValue();\n  }\n else {\n    key=lexer.decimalValue(true);\n  }\n  ch=lexer.getCurrent();\n  if (ch != ':') {\n    throw new JSONException(\"expect ':' at \" + lexer.pos() + \", name \"+ key);\n  }\n}\n else if (ch == '{' || ch == '[') {\n  lexer.nextToken();\n  key=parse();\n  isObjectKey=true;\n}\n else {\n  if (!isEnabled(Feature.AllowUnQuotedFieldNames)) {\n    throw new JSONException(\"syntax error\");\n  }\n  key=lexer.scanSymbolUnQuoted(symbolTable);\n  lexer.skipWhitespace();\n  ch=lexer.getCurrent();\n  if (ch != ':') {\n    throw new JSONException(\"expect ':' at \" + lexer.pos() + \", actual \"+ ch);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 206,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2175,
        "startLineNumber" : 221,
        "startColumnNumber" : 23,
        "endLineNumber" : 268,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (ch == '}') {\n  lexer.next();\n  lexer.resetStringPosition();\n  lexer.nextToken();\n  return object;\n}\n else if (ch == '\\'') {\n  if (!isEnabled(Feature.AllowSingleQuotes)) {\n    throw new JSONException(\"syntax error\");\n  }\n  key=lexer.scanSymbol(symbolTable,'\\'');\n  lexer.skipWhitespace();\n  ch=lexer.getCurrent();\n  if (ch != ':') {\n    throw new JSONException(\"expect ':' at \" + lexer.pos());\n  }\n}\n else if (ch == EOI) {\n  throw new JSONException(\"syntax error\");\n}\n else if (ch == ',') {\n  throw new JSONException(\"syntax error\");\n}\n else if ((ch >= '0' && ch <= '9') || ch == '-') {\n  lexer.resetStringPosition();\n  lexer.scanNumber();\n  if (lexer.token() == JSONToken.LITERAL_INT) {\n    key=lexer.integerValue();\n  }\n else {\n    key=lexer.decimalValue(true);\n  }\n  ch=lexer.getCurrent();\n  if (ch != ':') {\n    throw new JSONException(\"expect ':' at \" + lexer.pos() + \", name \"+ key);\n  }\n}\n else if (ch == '{' || ch == '[') {\n  lexer.nextToken();\n  key=parse();\n  isObjectKey=true;\n}\n else {\n  if (!isEnabled(Feature.AllowUnQuotedFieldNames)) {\n    throw new JSONException(\"syntax error\");\n  }\n  key=lexer.scanSymbolUnQuoted(symbolTable);\n  lexer.skipWhitespace();\n  ch=lexer.getCurrent();\n  if (ch != ':') {\n    throw new JSONException(\"expect ':' at \" + lexer.pos() + \", actual \"+ ch);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 225,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2531,
        "startLineNumber" : 214,
        "startColumnNumber" : 16,
        "endLineNumber" : 268,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (ch == '\"') {\n  key=lexer.scanSymbol(symbolTable,'\"');\n  lexer.skipWhitespace();\n  ch=lexer.getCurrent();\n  if (ch != ':') {\n    throw new JSONException(\"expect ':' at \" + lexer.pos() + \", name \"+ key);\n  }\n}\n else if (ch == '}') {\n  lexer.next();\n  lexer.resetStringPosition();\n  lexer.nextToken();\n  return object;\n}\n else if (ch == '\\'') {\n  if (!isEnabled(Feature.AllowSingleQuotes)) {\n    throw new JSONException(\"syntax error\");\n  }\n  key=lexer.scanSymbol(symbolTable,'\\'');\n  lexer.skipWhitespace();\n  ch=lexer.getCurrent();\n  if (ch != ':') {\n    throw new JSONException(\"expect ':' at \" + lexer.pos());\n  }\n}\n else if (ch == EOI) {\n  throw new JSONException(\"syntax error\");\n}\n else if (ch == ',') {\n  throw new JSONException(\"syntax error\");\n}\n else if ((ch >= '0' && ch <= '9') || ch == '-') {\n  lexer.resetStringPosition();\n  lexer.scanNumber();\n  if (lexer.token() == JSONToken.LITERAL_INT) {\n    key=lexer.integerValue();\n  }\n else {\n    key=lexer.decimalValue(true);\n  }\n  ch=lexer.getCurrent();\n  if (ch != ':') {\n    throw new JSONException(\"expect ':' at \" + lexer.pos() + \", name \"+ key);\n  }\n}\n else if (ch == '{' || ch == '[') {\n  lexer.nextToken();\n  key=parse();\n  isObjectKey=true;\n}\n else {\n  if (!isEnabled(Feature.AllowUnQuotedFieldNames)) {\n    throw new JSONException(\"syntax error\");\n  }\n  key=lexer.scanSymbolUnQuoted(symbolTable);\n  lexer.skipWhitespace();\n  ch=lexer.getCurrent();\n  if (ch != ':') {\n    throw new JSONException(\"expect ':' at \" + lexer.pos() + \", actual \"+ ch);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 264,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 13486,
        "startLineNumber" : 201,
        "startColumnNumber" : 21,
        "endLineNumber" : 505,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  lexer.skipWhitespace();\n  char ch=lexer.getCurrent();\n  if (isEnabled(Feature.AllowArbitraryCommas)) {\n    while (ch == ',') {\n      lexer.next();\n      lexer.skipWhitespace();\n      ch=lexer.getCurrent();\n    }\n  }\n  boolean isObjectKey=false;\n  Object key;\n  if (ch == '\"') {\n    key=lexer.scanSymbol(symbolTable,'\"');\n    lexer.skipWhitespace();\n    ch=lexer.getCurrent();\n    if (ch != ':') {\n      throw new JSONException(\"expect ':' at \" + lexer.pos() + \", name \"+ key);\n    }\n  }\n else   if (ch == '}') {\n    lexer.next();\n    lexer.resetStringPosition();\n    lexer.nextToken();\n    return object;\n  }\n else   if (ch == '\\'') {\n    if (!isEnabled(Feature.AllowSingleQuotes)) {\n      throw new JSONException(\"syntax error\");\n    }\n    key=lexer.scanSymbol(symbolTable,'\\'');\n    lexer.skipWhitespace();\n    ch=lexer.getCurrent();\n    if (ch != ':') {\n      throw new JSONException(\"expect ':' at \" + lexer.pos());\n    }\n  }\n else   if (ch == EOI) {\n    throw new JSONException(\"syntax error\");\n  }\n else   if (ch == ',') {\n    throw new JSONException(\"syntax error\");\n  }\n else   if ((ch >= '0' && ch <= '9') || ch == '-') {\n    lexer.resetStringPosition();\n    lexer.scanNumber();\n    if (lexer.token() == JSONToken.LITERAL_INT) {\n      key=lexer.integerValue();\n    }\n else {\n      key=lexer.decimalValue(true);\n    }\n    ch=lexer.getCurrent();\n    if (ch != ':') {\n      throw new JSONException(\"expect ':' at \" + lexer.pos() + \", name \"+ key);\n    }\n  }\n else   if (ch == '{' || ch == '[') {\n    lexer.nextToken();\n    key=parse();\n    isObjectKey=true;\n  }\n else {\n    if (!isEnabled(Feature.AllowUnQuotedFieldNames)) {\n      throw new JSONException(\"syntax error\");\n    }\n    key=lexer.scanSymbolUnQuoted(symbolTable);\n    lexer.skipWhitespace();\n    ch=lexer.getCurrent();\n    if (ch != ':') {\n      throw new JSONException(\"expect ':' at \" + lexer.pos() + \", actual \"+ ch);\n    }\n  }\n  if (!isObjectKey) {\n    lexer.next();\n    lexer.skipWhitespace();\n  }\n  ch=lexer.getCurrent();\n  lexer.resetStringPosition();\n  if (key == JSON.DEFAULT_TYPE_KEY) {\n    String typeName=lexer.scanSymbol(symbolTable,'\"');\n    Class<?> clazz=TypeUtils.loadClass(typeName);\n    if (clazz == null) {\n      object.put(JSON.DEFAULT_TYPE_KEY,typeName);\n      continue;\n    }\n    lexer.nextToken(JSONToken.COMMA);\n    if (lexer.token() == JSONToken.RBRACE) {\n      lexer.nextToken(JSONToken.COMMA);\n      try {\n        Object instance=null;\n        ObjectDeserializer deserializer=this.config.getDeserializer(clazz);\n        if (deserializer instanceof ASMJavaBeanDeserializer) {\n          instance=((ASMJavaBeanDeserializer)deserializer).createInstance(this,clazz);\n        }\n else         if (deserializer instanceof JavaBeanDeserializer) {\n          instance=((JavaBeanDeserializer)deserializer).createInstance(this,clazz);\n        }\n        if (instance == null) {\n          if (clazz == Cloneable.class) {\n            instance=new HashMap();\n          }\n else {\n            instance=clazz.newInstance();\n          }\n        }\n        return instance;\n      }\n catch (      Exception e) {\n        throw new JSONException(\"create instance error\",e);\n      }\n    }\n    this.setResolveStatus(TypeNameRedirect);\n    if (this.context != null && !(fieldName instanceof Integer)) {\n      this.popContext();\n    }\n    ObjectDeserializer deserializer=config.getDeserializer(clazz);\n    return deserializer.deserialze(this,clazz,fieldName);\n  }\n  if (key == \"$ref\") {\n    lexer.nextToken(JSONToken.LITERAL_STRING);\n    if (lexer.token() == JSONToken.LITERAL_STRING) {\n      String ref=lexer.stringVal();\n      lexer.nextToken(JSONToken.RBRACE);\n      Object refValue=null;\n      if (\"@\".equals(ref)) {\n        if (this.getContext() != null) {\n          ParseContext thisContext=this.getContext();\n          Object thisObj=thisContext.getObject();\n          if (thisObj instanceof Object[] || thisObj instanceof Collection<?>) {\n            refValue=thisObj;\n          }\n else           if (thisContext.getParentContext() != null) {\n            refValue=thisContext.getParentContext().getObject();\n          }\n        }\n      }\n else       if (\"..\".equals(ref)) {\n        ParseContext parentContext=context.getParentContext();\n        if (parentContext.getObject() != null) {\n          refValue=parentContext.getObject();\n        }\n else {\n          addResolveTask(new ResolveTask(parentContext,ref));\n          setResolveStatus(DefaultJSONParser.NeedToResolve);\n        }\n      }\n else       if (\"$\".equals(ref)) {\n        ParseContext rootContext=context;\n        while (rootContext.getParentContext() != null) {\n          rootContext=rootContext.getParentContext();\n        }\n        if (rootContext.getObject() != null) {\n          refValue=rootContext.getObject();\n        }\n else {\n          addResolveTask(new ResolveTask(rootContext,ref));\n          setResolveStatus(DefaultJSONParser.NeedToResolve);\n        }\n      }\n else {\n        addResolveTask(new ResolveTask(context,ref));\n        setResolveStatus(DefaultJSONParser.NeedToResolve);\n      }\n      if (lexer.token() != JSONToken.RBRACE) {\n        throw new JSONException(\"syntax error\");\n      }\n      lexer.nextToken(JSONToken.COMMA);\n      return refValue;\n    }\n else {\n      throw new JSONException(\"illegal ref, \" + JSONToken.name(lexer.token()));\n    }\n  }\n  if (!setContextFlag) {\n    setContext(object,fieldName);\n    setContextFlag=true;\n    if (this.context != null && !(fieldName instanceof Integer)) {\n      this.popContext();\n    }\n  }\n  if (object.getClass() == JSONObject.class) {\n    key=(key == null) ? \"null\" : key.toString();\n  }\n  Object value;\n  if (ch == '\"') {\n    lexer.scanString();\n    String strValue=lexer.stringVal();\n    value=strValue;\n    if (lexer.isEnabled(Feature.AllowISO8601DateFormat)) {\n      JSONScanner iso8601Lexer=new JSONScanner(strValue);\n      if (iso8601Lexer.scanISO8601DateIfMatch()) {\n        value=iso8601Lexer.getCalendar().getTime();\n      }\n      iso8601Lexer.close();\n    }\n    object.put(key,value);\n  }\n else   if (ch >= '0' && ch <= '9' || ch == '-') {\n    lexer.scanNumber();\n    if (lexer.token() == JSONToken.LITERAL_INT) {\n      value=lexer.integerValue();\n    }\n else {\n      value=lexer.decimalValue(isEnabled(Feature.UseBigDecimal));\n    }\n    object.put(key,value);\n  }\n else   if (ch == '[') {\n    lexer.nextToken();\n    JSONArray list=new JSONArray();\n    this.parseArray(list,key);\n    value=list;\n    object.put(key,value);\n    if (lexer.token() == JSONToken.RBRACE) {\n      lexer.nextToken();\n      return object;\n    }\n else     if (lexer.token() == JSONToken.COMMA) {\n      continue;\n    }\n else {\n      throw new JSONException(\"syntax error\");\n    }\n  }\n else   if (ch == '{') {\n    lexer.nextToken();\n    final boolean parentIsArray=fieldName != null && fieldName.getClass() == Integer.class;\n    JSONObject input=new JSONObject();\n    ParseContext ctxLocal=null;\n    if (!parentIsArray) {\n      ctxLocal=setContext(context,input,key);\n    }\n    Object obj=this.parseObject(input,key);\n    if (ctxLocal != null && input != obj) {\n      ctxLocal.setObject(object);\n    }\n    checkMapResolve(object,key.toString());\n    if (object.getClass() == JSONObject.class) {\n      object.put(key.toString(),obj);\n    }\n else {\n      object.put(key,obj);\n    }\n    if (parentIsArray) {\n      setContext(context,obj,key);\n    }\n    if (lexer.token() == JSONToken.RBRACE) {\n      lexer.nextToken();\n      setContext(context);\n      return object;\n    }\n else     if (lexer.token() == JSONToken.COMMA) {\n      continue;\n    }\n else {\n      throw new JSONException(\"syntax error, \" + lexer.tokenName());\n    }\n  }\n else {\n    lexer.nextToken();\n    value=parse();\n    if (object.getClass() == JSONObject.class) {\n      key=key.toString();\n    }\n    object.put(key,value);\n    if (lexer.token() == JSONToken.RBRACE) {\n      lexer.nextToken();\n      return object;\n    }\n else     if (lexer.token() == JSONToken.COMMA) {\n      continue;\n    }\n else {\n      throw new JSONException(\"syntax error, position at \" + lexer.pos() + \", name \"+ key);\n    }\n  }\n  lexer.skipWhitespace();\n  ch=lexer.getCurrent();\n  if (ch == ',') {\n    lexer.next();\n    continue;\n  }\n else   if (ch == '}') {\n    lexer.next();\n    lexer.resetStringPosition();\n    lexer.nextToken();\n    this.setContext(object,fieldName);\n    return object;\n  }\n else {\n    throw new JSONException(\"syntax error, position at \" + lexer.pos() + \", name \"+ key);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1294,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 13495,
        "startLineNumber" : 201,
        "startColumnNumber" : 12,
        "endLineNumber" : 505,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (; ; ) {\n  lexer.skipWhitespace();\n  char ch=lexer.getCurrent();\n  if (isEnabled(Feature.AllowArbitraryCommas)) {\n    while (ch == ',') {\n      lexer.next();\n      lexer.skipWhitespace();\n      ch=lexer.getCurrent();\n    }\n  }\n  boolean isObjectKey=false;\n  Object key;\n  if (ch == '\"') {\n    key=lexer.scanSymbol(symbolTable,'\"');\n    lexer.skipWhitespace();\n    ch=lexer.getCurrent();\n    if (ch != ':') {\n      throw new JSONException(\"expect ':' at \" + lexer.pos() + \", name \"+ key);\n    }\n  }\n else   if (ch == '}') {\n    lexer.next();\n    lexer.resetStringPosition();\n    lexer.nextToken();\n    return object;\n  }\n else   if (ch == '\\'') {\n    if (!isEnabled(Feature.AllowSingleQuotes)) {\n      throw new JSONException(\"syntax error\");\n    }\n    key=lexer.scanSymbol(symbolTable,'\\'');\n    lexer.skipWhitespace();\n    ch=lexer.getCurrent();\n    if (ch != ':') {\n      throw new JSONException(\"expect ':' at \" + lexer.pos());\n    }\n  }\n else   if (ch == EOI) {\n    throw new JSONException(\"syntax error\");\n  }\n else   if (ch == ',') {\n    throw new JSONException(\"syntax error\");\n  }\n else   if ((ch >= '0' && ch <= '9') || ch == '-') {\n    lexer.resetStringPosition();\n    lexer.scanNumber();\n    if (lexer.token() == JSONToken.LITERAL_INT) {\n      key=lexer.integerValue();\n    }\n else {\n      key=lexer.decimalValue(true);\n    }\n    ch=lexer.getCurrent();\n    if (ch != ':') {\n      throw new JSONException(\"expect ':' at \" + lexer.pos() + \", name \"+ key);\n    }\n  }\n else   if (ch == '{' || ch == '[') {\n    lexer.nextToken();\n    key=parse();\n    isObjectKey=true;\n  }\n else {\n    if (!isEnabled(Feature.AllowUnQuotedFieldNames)) {\n      throw new JSONException(\"syntax error\");\n    }\n    key=lexer.scanSymbolUnQuoted(symbolTable);\n    lexer.skipWhitespace();\n    ch=lexer.getCurrent();\n    if (ch != ':') {\n      throw new JSONException(\"expect ':' at \" + lexer.pos() + \", actual \"+ ch);\n    }\n  }\n  if (!isObjectKey) {\n    lexer.next();\n    lexer.skipWhitespace();\n  }\n  ch=lexer.getCurrent();\n  lexer.resetStringPosition();\n  if (key == JSON.DEFAULT_TYPE_KEY) {\n    String typeName=lexer.scanSymbol(symbolTable,'\"');\n    Class<?> clazz=TypeUtils.loadClass(typeName);\n    if (clazz == null) {\n      object.put(JSON.DEFAULT_TYPE_KEY,typeName);\n      continue;\n    }\n    lexer.nextToken(JSONToken.COMMA);\n    if (lexer.token() == JSONToken.RBRACE) {\n      lexer.nextToken(JSONToken.COMMA);\n      try {\n        Object instance=null;\n        ObjectDeserializer deserializer=this.config.getDeserializer(clazz);\n        if (deserializer instanceof ASMJavaBeanDeserializer) {\n          instance=((ASMJavaBeanDeserializer)deserializer).createInstance(this,clazz);\n        }\n else         if (deserializer instanceof JavaBeanDeserializer) {\n          instance=((JavaBeanDeserializer)deserializer).createInstance(this,clazz);\n        }\n        if (instance == null) {\n          if (clazz == Cloneable.class) {\n            instance=new HashMap();\n          }\n else {\n            instance=clazz.newInstance();\n          }\n        }\n        return instance;\n      }\n catch (      Exception e) {\n        throw new JSONException(\"create instance error\",e);\n      }\n    }\n    this.setResolveStatus(TypeNameRedirect);\n    if (this.context != null && !(fieldName instanceof Integer)) {\n      this.popContext();\n    }\n    ObjectDeserializer deserializer=config.getDeserializer(clazz);\n    return deserializer.deserialze(this,clazz,fieldName);\n  }\n  if (key == \"$ref\") {\n    lexer.nextToken(JSONToken.LITERAL_STRING);\n    if (lexer.token() == JSONToken.LITERAL_STRING) {\n      String ref=lexer.stringVal();\n      lexer.nextToken(JSONToken.RBRACE);\n      Object refValue=null;\n      if (\"@\".equals(ref)) {\n        if (this.getContext() != null) {\n          ParseContext thisContext=this.getContext();\n          Object thisObj=thisContext.getObject();\n          if (thisObj instanceof Object[] || thisObj instanceof Collection<?>) {\n            refValue=thisObj;\n          }\n else           if (thisContext.getParentContext() != null) {\n            refValue=thisContext.getParentContext().getObject();\n          }\n        }\n      }\n else       if (\"..\".equals(ref)) {\n        ParseContext parentContext=context.getParentContext();\n        if (parentContext.getObject() != null) {\n          refValue=parentContext.getObject();\n        }\n else {\n          addResolveTask(new ResolveTask(parentContext,ref));\n          setResolveStatus(DefaultJSONParser.NeedToResolve);\n        }\n      }\n else       if (\"$\".equals(ref)) {\n        ParseContext rootContext=context;\n        while (rootContext.getParentContext() != null) {\n          rootContext=rootContext.getParentContext();\n        }\n        if (rootContext.getObject() != null) {\n          refValue=rootContext.getObject();\n        }\n else {\n          addResolveTask(new ResolveTask(rootContext,ref));\n          setResolveStatus(DefaultJSONParser.NeedToResolve);\n        }\n      }\n else {\n        addResolveTask(new ResolveTask(context,ref));\n        setResolveStatus(DefaultJSONParser.NeedToResolve);\n      }\n      if (lexer.token() != JSONToken.RBRACE) {\n        throw new JSONException(\"syntax error\");\n      }\n      lexer.nextToken(JSONToken.COMMA);\n      return refValue;\n    }\n else {\n      throw new JSONException(\"illegal ref, \" + JSONToken.name(lexer.token()));\n    }\n  }\n  if (!setContextFlag) {\n    setContext(object,fieldName);\n    setContextFlag=true;\n    if (this.context != null && !(fieldName instanceof Integer)) {\n      this.popContext();\n    }\n  }\n  if (object.getClass() == JSONObject.class) {\n    key=(key == null) ? \"null\" : key.toString();\n  }\n  Object value;\n  if (ch == '\"') {\n    lexer.scanString();\n    String strValue=lexer.stringVal();\n    value=strValue;\n    if (lexer.isEnabled(Feature.AllowISO8601DateFormat)) {\n      JSONScanner iso8601Lexer=new JSONScanner(strValue);\n      if (iso8601Lexer.scanISO8601DateIfMatch()) {\n        value=iso8601Lexer.getCalendar().getTime();\n      }\n      iso8601Lexer.close();\n    }\n    object.put(key,value);\n  }\n else   if (ch >= '0' && ch <= '9' || ch == '-') {\n    lexer.scanNumber();\n    if (lexer.token() == JSONToken.LITERAL_INT) {\n      value=lexer.integerValue();\n    }\n else {\n      value=lexer.decimalValue(isEnabled(Feature.UseBigDecimal));\n    }\n    object.put(key,value);\n  }\n else   if (ch == '[') {\n    lexer.nextToken();\n    JSONArray list=new JSONArray();\n    this.parseArray(list,key);\n    value=list;\n    object.put(key,value);\n    if (lexer.token() == JSONToken.RBRACE) {\n      lexer.nextToken();\n      return object;\n    }\n else     if (lexer.token() == JSONToken.COMMA) {\n      continue;\n    }\n else {\n      throw new JSONException(\"syntax error\");\n    }\n  }\n else   if (ch == '{') {\n    lexer.nextToken();\n    final boolean parentIsArray=fieldName != null && fieldName.getClass() == Integer.class;\n    JSONObject input=new JSONObject();\n    ParseContext ctxLocal=null;\n    if (!parentIsArray) {\n      ctxLocal=setContext(context,input,key);\n    }\n    Object obj=this.parseObject(input,key);\n    if (ctxLocal != null && input != obj) {\n      ctxLocal.setObject(object);\n    }\n    checkMapResolve(object,key.toString());\n    if (object.getClass() == JSONObject.class) {\n      object.put(key.toString(),obj);\n    }\n else {\n      object.put(key,obj);\n    }\n    if (parentIsArray) {\n      setContext(context,obj,key);\n    }\n    if (lexer.token() == JSONToken.RBRACE) {\n      lexer.nextToken();\n      setContext(context);\n      return object;\n    }\n else     if (lexer.token() == JSONToken.COMMA) {\n      continue;\n    }\n else {\n      throw new JSONException(\"syntax error, \" + lexer.tokenName());\n    }\n  }\n else {\n    lexer.nextToken();\n    value=parse();\n    if (object.getClass() == JSONObject.class) {\n      key=key.toString();\n    }\n    object.put(key,value);\n    if (lexer.token() == JSONToken.RBRACE) {\n      lexer.nextToken();\n      return object;\n    }\n else     if (lexer.token() == JSONToken.COMMA) {\n      continue;\n    }\n else {\n      throw new JSONException(\"syntax error, position at \" + lexer.pos() + \", name \"+ key);\n    }\n  }\n  lexer.skipWhitespace();\n  ch=lexer.getCurrent();\n  if (ch == ',') {\n    lexer.next();\n    continue;\n  }\n else   if (ch == '}') {\n    lexer.next();\n    lexer.resetStringPosition();\n    lexer.nextToken();\n    this.setContext(object,fieldName);\n    return object;\n  }\n else {\n    throw new JSONException(\"syntax error, position at \" + lexer.pos() + \", name \"+ key);\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 1295,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 13566,
        "startLineNumber" : 199,
        "startColumnNumber" : 12,
        "endLineNumber" : 506,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  boolean setContextFlag=false;\n  for (; ; ) {\n    lexer.skipWhitespace();\n    char ch=lexer.getCurrent();\n    if (isEnabled(Feature.AllowArbitraryCommas)) {\n      while (ch == ',') {\n        lexer.next();\n        lexer.skipWhitespace();\n        ch=lexer.getCurrent();\n      }\n    }\n    boolean isObjectKey=false;\n    Object key;\n    if (ch == '\"') {\n      key=lexer.scanSymbol(symbolTable,'\"');\n      lexer.skipWhitespace();\n      ch=lexer.getCurrent();\n      if (ch != ':') {\n        throw new JSONException(\"expect ':' at \" + lexer.pos() + \", name \"+ key);\n      }\n    }\n else     if (ch == '}') {\n      lexer.next();\n      lexer.resetStringPosition();\n      lexer.nextToken();\n      return object;\n    }\n else     if (ch == '\\'') {\n      if (!isEnabled(Feature.AllowSingleQuotes)) {\n        throw new JSONException(\"syntax error\");\n      }\n      key=lexer.scanSymbol(symbolTable,'\\'');\n      lexer.skipWhitespace();\n      ch=lexer.getCurrent();\n      if (ch != ':') {\n        throw new JSONException(\"expect ':' at \" + lexer.pos());\n      }\n    }\n else     if (ch == EOI) {\n      throw new JSONException(\"syntax error\");\n    }\n else     if (ch == ',') {\n      throw new JSONException(\"syntax error\");\n    }\n else     if ((ch >= '0' && ch <= '9') || ch == '-') {\n      lexer.resetStringPosition();\n      lexer.scanNumber();\n      if (lexer.token() == JSONToken.LITERAL_INT) {\n        key=lexer.integerValue();\n      }\n else {\n        key=lexer.decimalValue(true);\n      }\n      ch=lexer.getCurrent();\n      if (ch != ':') {\n        throw new JSONException(\"expect ':' at \" + lexer.pos() + \", name \"+ key);\n      }\n    }\n else     if (ch == '{' || ch == '[') {\n      lexer.nextToken();\n      key=parse();\n      isObjectKey=true;\n    }\n else {\n      if (!isEnabled(Feature.AllowUnQuotedFieldNames)) {\n        throw new JSONException(\"syntax error\");\n      }\n      key=lexer.scanSymbolUnQuoted(symbolTable);\n      lexer.skipWhitespace();\n      ch=lexer.getCurrent();\n      if (ch != ':') {\n        throw new JSONException(\"expect ':' at \" + lexer.pos() + \", actual \"+ ch);\n      }\n    }\n    if (!isObjectKey) {\n      lexer.next();\n      lexer.skipWhitespace();\n    }\n    ch=lexer.getCurrent();\n    lexer.resetStringPosition();\n    if (key == JSON.DEFAULT_TYPE_KEY) {\n      String typeName=lexer.scanSymbol(symbolTable,'\"');\n      Class<?> clazz=TypeUtils.loadClass(typeName);\n      if (clazz == null) {\n        object.put(JSON.DEFAULT_TYPE_KEY,typeName);\n        continue;\n      }\n      lexer.nextToken(JSONToken.COMMA);\n      if (lexer.token() == JSONToken.RBRACE) {\n        lexer.nextToken(JSONToken.COMMA);\n        try {\n          Object instance=null;\n          ObjectDeserializer deserializer=this.config.getDeserializer(clazz);\n          if (deserializer instanceof ASMJavaBeanDeserializer) {\n            instance=((ASMJavaBeanDeserializer)deserializer).createInstance(this,clazz);\n          }\n else           if (deserializer instanceof JavaBeanDeserializer) {\n            instance=((JavaBeanDeserializer)deserializer).createInstance(this,clazz);\n          }\n          if (instance == null) {\n            if (clazz == Cloneable.class) {\n              instance=new HashMap();\n            }\n else {\n              instance=clazz.newInstance();\n            }\n          }\n          return instance;\n        }\n catch (        Exception e) {\n          throw new JSONException(\"create instance error\",e);\n        }\n      }\n      this.setResolveStatus(TypeNameRedirect);\n      if (this.context != null && !(fieldName instanceof Integer)) {\n        this.popContext();\n      }\n      ObjectDeserializer deserializer=config.getDeserializer(clazz);\n      return deserializer.deserialze(this,clazz,fieldName);\n    }\n    if (key == \"$ref\") {\n      lexer.nextToken(JSONToken.LITERAL_STRING);\n      if (lexer.token() == JSONToken.LITERAL_STRING) {\n        String ref=lexer.stringVal();\n        lexer.nextToken(JSONToken.RBRACE);\n        Object refValue=null;\n        if (\"@\".equals(ref)) {\n          if (this.getContext() != null) {\n            ParseContext thisContext=this.getContext();\n            Object thisObj=thisContext.getObject();\n            if (thisObj instanceof Object[] || thisObj instanceof Collection<?>) {\n              refValue=thisObj;\n            }\n else             if (thisContext.getParentContext() != null) {\n              refValue=thisContext.getParentContext().getObject();\n            }\n          }\n        }\n else         if (\"..\".equals(ref)) {\n          ParseContext parentContext=context.getParentContext();\n          if (parentContext.getObject() != null) {\n            refValue=parentContext.getObject();\n          }\n else {\n            addResolveTask(new ResolveTask(parentContext,ref));\n            setResolveStatus(DefaultJSONParser.NeedToResolve);\n          }\n        }\n else         if (\"$\".equals(ref)) {\n          ParseContext rootContext=context;\n          while (rootContext.getParentContext() != null) {\n            rootContext=rootContext.getParentContext();\n          }\n          if (rootContext.getObject() != null) {\n            refValue=rootContext.getObject();\n          }\n else {\n            addResolveTask(new ResolveTask(rootContext,ref));\n            setResolveStatus(DefaultJSONParser.NeedToResolve);\n          }\n        }\n else {\n          addResolveTask(new ResolveTask(context,ref));\n          setResolveStatus(DefaultJSONParser.NeedToResolve);\n        }\n        if (lexer.token() != JSONToken.RBRACE) {\n          throw new JSONException(\"syntax error\");\n        }\n        lexer.nextToken(JSONToken.COMMA);\n        return refValue;\n      }\n else {\n        throw new JSONException(\"illegal ref, \" + JSONToken.name(lexer.token()));\n      }\n    }\n    if (!setContextFlag) {\n      setContext(object,fieldName);\n      setContextFlag=true;\n      if (this.context != null && !(fieldName instanceof Integer)) {\n        this.popContext();\n      }\n    }\n    if (object.getClass() == JSONObject.class) {\n      key=(key == null) ? \"null\" : key.toString();\n    }\n    Object value;\n    if (ch == '\"') {\n      lexer.scanString();\n      String strValue=lexer.stringVal();\n      value=strValue;\n      if (lexer.isEnabled(Feature.AllowISO8601DateFormat)) {\n        JSONScanner iso8601Lexer=new JSONScanner(strValue);\n        if (iso8601Lexer.scanISO8601DateIfMatch()) {\n          value=iso8601Lexer.getCalendar().getTime();\n        }\n        iso8601Lexer.close();\n      }\n      object.put(key,value);\n    }\n else     if (ch >= '0' && ch <= '9' || ch == '-') {\n      lexer.scanNumber();\n      if (lexer.token() == JSONToken.LITERAL_INT) {\n        value=lexer.integerValue();\n      }\n else {\n        value=lexer.decimalValue(isEnabled(Feature.UseBigDecimal));\n      }\n      object.put(key,value);\n    }\n else     if (ch == '[') {\n      lexer.nextToken();\n      JSONArray list=new JSONArray();\n      this.parseArray(list,key);\n      value=list;\n      object.put(key,value);\n      if (lexer.token() == JSONToken.RBRACE) {\n        lexer.nextToken();\n        return object;\n      }\n else       if (lexer.token() == JSONToken.COMMA) {\n        continue;\n      }\n else {\n        throw new JSONException(\"syntax error\");\n      }\n    }\n else     if (ch == '{') {\n      lexer.nextToken();\n      final boolean parentIsArray=fieldName != null && fieldName.getClass() == Integer.class;\n      JSONObject input=new JSONObject();\n      ParseContext ctxLocal=null;\n      if (!parentIsArray) {\n        ctxLocal=setContext(context,input,key);\n      }\n      Object obj=this.parseObject(input,key);\n      if (ctxLocal != null && input != obj) {\n        ctxLocal.setObject(object);\n      }\n      checkMapResolve(object,key.toString());\n      if (object.getClass() == JSONObject.class) {\n        object.put(key.toString(),obj);\n      }\n else {\n        object.put(key,obj);\n      }\n      if (parentIsArray) {\n        setContext(context,obj,key);\n      }\n      if (lexer.token() == JSONToken.RBRACE) {\n        lexer.nextToken();\n        setContext(context);\n        return object;\n      }\n else       if (lexer.token() == JSONToken.COMMA) {\n        continue;\n      }\n else {\n        throw new JSONException(\"syntax error, \" + lexer.tokenName());\n      }\n    }\n else {\n      lexer.nextToken();\n      value=parse();\n      if (object.getClass() == JSONObject.class) {\n        key=key.toString();\n      }\n      object.put(key,value);\n      if (lexer.token() == JSONToken.RBRACE) {\n        lexer.nextToken();\n        return object;\n      }\n else       if (lexer.token() == JSONToken.COMMA) {\n        continue;\n      }\n else {\n        throw new JSONException(\"syntax error, position at \" + lexer.pos() + \", name \"+ key);\n      }\n    }\n    lexer.skipWhitespace();\n    ch=lexer.getCurrent();\n    if (ch == ',') {\n      lexer.next();\n      continue;\n    }\n else     if (ch == '}') {\n      lexer.next();\n      lexer.resetStringPosition();\n      lexer.nextToken();\n      this.setContext(object,fieldName);\n      return object;\n    }\n else {\n      throw new JSONException(\"syntax error, position at \" + lexer.pos() + \", name \"+ key);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1301,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 13630,
        "startLineNumber" : 199,
        "startColumnNumber" : 8,
        "endLineNumber" : 508,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  boolean setContextFlag=false;\n  for (; ; ) {\n    lexer.skipWhitespace();\n    char ch=lexer.getCurrent();\n    if (isEnabled(Feature.AllowArbitraryCommas)) {\n      while (ch == ',') {\n        lexer.next();\n        lexer.skipWhitespace();\n        ch=lexer.getCurrent();\n      }\n    }\n    boolean isObjectKey=false;\n    Object key;\n    if (ch == '\"') {\n      key=lexer.scanSymbol(symbolTable,'\"');\n      lexer.skipWhitespace();\n      ch=lexer.getCurrent();\n      if (ch != ':') {\n        throw new JSONException(\"expect ':' at \" + lexer.pos() + \", name \"+ key);\n      }\n    }\n else     if (ch == '}') {\n      lexer.next();\n      lexer.resetStringPosition();\n      lexer.nextToken();\n      return object;\n    }\n else     if (ch == '\\'') {\n      if (!isEnabled(Feature.AllowSingleQuotes)) {\n        throw new JSONException(\"syntax error\");\n      }\n      key=lexer.scanSymbol(symbolTable,'\\'');\n      lexer.skipWhitespace();\n      ch=lexer.getCurrent();\n      if (ch != ':') {\n        throw new JSONException(\"expect ':' at \" + lexer.pos());\n      }\n    }\n else     if (ch == EOI) {\n      throw new JSONException(\"syntax error\");\n    }\n else     if (ch == ',') {\n      throw new JSONException(\"syntax error\");\n    }\n else     if ((ch >= '0' && ch <= '9') || ch == '-') {\n      lexer.resetStringPosition();\n      lexer.scanNumber();\n      if (lexer.token() == JSONToken.LITERAL_INT) {\n        key=lexer.integerValue();\n      }\n else {\n        key=lexer.decimalValue(true);\n      }\n      ch=lexer.getCurrent();\n      if (ch != ':') {\n        throw new JSONException(\"expect ':' at \" + lexer.pos() + \", name \"+ key);\n      }\n    }\n else     if (ch == '{' || ch == '[') {\n      lexer.nextToken();\n      key=parse();\n      isObjectKey=true;\n    }\n else {\n      if (!isEnabled(Feature.AllowUnQuotedFieldNames)) {\n        throw new JSONException(\"syntax error\");\n      }\n      key=lexer.scanSymbolUnQuoted(symbolTable);\n      lexer.skipWhitespace();\n      ch=lexer.getCurrent();\n      if (ch != ':') {\n        throw new JSONException(\"expect ':' at \" + lexer.pos() + \", actual \"+ ch);\n      }\n    }\n    if (!isObjectKey) {\n      lexer.next();\n      lexer.skipWhitespace();\n    }\n    ch=lexer.getCurrent();\n    lexer.resetStringPosition();\n    if (key == JSON.DEFAULT_TYPE_KEY) {\n      String typeName=lexer.scanSymbol(symbolTable,'\"');\n      Class<?> clazz=TypeUtils.loadClass(typeName);\n      if (clazz == null) {\n        object.put(JSON.DEFAULT_TYPE_KEY,typeName);\n        continue;\n      }\n      lexer.nextToken(JSONToken.COMMA);\n      if (lexer.token() == JSONToken.RBRACE) {\n        lexer.nextToken(JSONToken.COMMA);\n        try {\n          Object instance=null;\n          ObjectDeserializer deserializer=this.config.getDeserializer(clazz);\n          if (deserializer instanceof ASMJavaBeanDeserializer) {\n            instance=((ASMJavaBeanDeserializer)deserializer).createInstance(this,clazz);\n          }\n else           if (deserializer instanceof JavaBeanDeserializer) {\n            instance=((JavaBeanDeserializer)deserializer).createInstance(this,clazz);\n          }\n          if (instance == null) {\n            if (clazz == Cloneable.class) {\n              instance=new HashMap();\n            }\n else {\n              instance=clazz.newInstance();\n            }\n          }\n          return instance;\n        }\n catch (        Exception e) {\n          throw new JSONException(\"create instance error\",e);\n        }\n      }\n      this.setResolveStatus(TypeNameRedirect);\n      if (this.context != null && !(fieldName instanceof Integer)) {\n        this.popContext();\n      }\n      ObjectDeserializer deserializer=config.getDeserializer(clazz);\n      return deserializer.deserialze(this,clazz,fieldName);\n    }\n    if (key == \"$ref\") {\n      lexer.nextToken(JSONToken.LITERAL_STRING);\n      if (lexer.token() == JSONToken.LITERAL_STRING) {\n        String ref=lexer.stringVal();\n        lexer.nextToken(JSONToken.RBRACE);\n        Object refValue=null;\n        if (\"@\".equals(ref)) {\n          if (this.getContext() != null) {\n            ParseContext thisContext=this.getContext();\n            Object thisObj=thisContext.getObject();\n            if (thisObj instanceof Object[] || thisObj instanceof Collection<?>) {\n              refValue=thisObj;\n            }\n else             if (thisContext.getParentContext() != null) {\n              refValue=thisContext.getParentContext().getObject();\n            }\n          }\n        }\n else         if (\"..\".equals(ref)) {\n          ParseContext parentContext=context.getParentContext();\n          if (parentContext.getObject() != null) {\n            refValue=parentContext.getObject();\n          }\n else {\n            addResolveTask(new ResolveTask(parentContext,ref));\n            setResolveStatus(DefaultJSONParser.NeedToResolve);\n          }\n        }\n else         if (\"$\".equals(ref)) {\n          ParseContext rootContext=context;\n          while (rootContext.getParentContext() != null) {\n            rootContext=rootContext.getParentContext();\n          }\n          if (rootContext.getObject() != null) {\n            refValue=rootContext.getObject();\n          }\n else {\n            addResolveTask(new ResolveTask(rootContext,ref));\n            setResolveStatus(DefaultJSONParser.NeedToResolve);\n          }\n        }\n else {\n          addResolveTask(new ResolveTask(context,ref));\n          setResolveStatus(DefaultJSONParser.NeedToResolve);\n        }\n        if (lexer.token() != JSONToken.RBRACE) {\n          throw new JSONException(\"syntax error\");\n        }\n        lexer.nextToken(JSONToken.COMMA);\n        return refValue;\n      }\n else {\n        throw new JSONException(\"illegal ref, \" + JSONToken.name(lexer.token()));\n      }\n    }\n    if (!setContextFlag) {\n      setContext(object,fieldName);\n      setContextFlag=true;\n      if (this.context != null && !(fieldName instanceof Integer)) {\n        this.popContext();\n      }\n    }\n    if (object.getClass() == JSONObject.class) {\n      key=(key == null) ? \"null\" : key.toString();\n    }\n    Object value;\n    if (ch == '\"') {\n      lexer.scanString();\n      String strValue=lexer.stringVal();\n      value=strValue;\n      if (lexer.isEnabled(Feature.AllowISO8601DateFormat)) {\n        JSONScanner iso8601Lexer=new JSONScanner(strValue);\n        if (iso8601Lexer.scanISO8601DateIfMatch()) {\n          value=iso8601Lexer.getCalendar().getTime();\n        }\n        iso8601Lexer.close();\n      }\n      object.put(key,value);\n    }\n else     if (ch >= '0' && ch <= '9' || ch == '-') {\n      lexer.scanNumber();\n      if (lexer.token() == JSONToken.LITERAL_INT) {\n        value=lexer.integerValue();\n      }\n else {\n        value=lexer.decimalValue(isEnabled(Feature.UseBigDecimal));\n      }\n      object.put(key,value);\n    }\n else     if (ch == '[') {\n      lexer.nextToken();\n      JSONArray list=new JSONArray();\n      this.parseArray(list,key);\n      value=list;\n      object.put(key,value);\n      if (lexer.token() == JSONToken.RBRACE) {\n        lexer.nextToken();\n        return object;\n      }\n else       if (lexer.token() == JSONToken.COMMA) {\n        continue;\n      }\n else {\n        throw new JSONException(\"syntax error\");\n      }\n    }\n else     if (ch == '{') {\n      lexer.nextToken();\n      final boolean parentIsArray=fieldName != null && fieldName.getClass() == Integer.class;\n      JSONObject input=new JSONObject();\n      ParseContext ctxLocal=null;\n      if (!parentIsArray) {\n        ctxLocal=setContext(context,input,key);\n      }\n      Object obj=this.parseObject(input,key);\n      if (ctxLocal != null && input != obj) {\n        ctxLocal.setObject(object);\n      }\n      checkMapResolve(object,key.toString());\n      if (object.getClass() == JSONObject.class) {\n        object.put(key.toString(),obj);\n      }\n else {\n        object.put(key,obj);\n      }\n      if (parentIsArray) {\n        setContext(context,obj,key);\n      }\n      if (lexer.token() == JSONToken.RBRACE) {\n        lexer.nextToken();\n        setContext(context);\n        return object;\n      }\n else       if (lexer.token() == JSONToken.COMMA) {\n        continue;\n      }\n else {\n        throw new JSONException(\"syntax error, \" + lexer.tokenName());\n      }\n    }\n else {\n      lexer.nextToken();\n      value=parse();\n      if (object.getClass() == JSONObject.class) {\n        key=key.toString();\n      }\n      object.put(key,value);\n      if (lexer.token() == JSONToken.RBRACE) {\n        lexer.nextToken();\n        return object;\n      }\n else       if (lexer.token() == JSONToken.COMMA) {\n        continue;\n      }\n else {\n        throw new JSONException(\"syntax error, position at \" + lexer.pos() + \", name \"+ key);\n      }\n    }\n    lexer.skipWhitespace();\n    ch=lexer.getCurrent();\n    if (ch == ',') {\n      lexer.next();\n      continue;\n    }\n else     if (ch == '}') {\n      lexer.next();\n      lexer.resetStringPosition();\n      lexer.nextToken();\n      this.setContext(object,fieldName);\n      return object;\n    }\n else {\n      throw new JSONException(\"syntax error, position at \" + lexer.pos() + \", name \"+ key);\n    }\n  }\n}\n  finally {\n  this.setContext(context);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 1308,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 13940,
        "startLineNumber" : 191,
        "startColumnNumber" : 72,
        "endLineNumber" : 510,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final JSONLexer lexer=this.lexer;\n  if (lexer.token() != JSONToken.LBRACE && lexer.token() != JSONToken.COMMA) {\n    throw new JSONException(\"syntax error, expect {, actual \" + lexer.tokenName());\n  }\n  ParseContext context=this.getContext();\n  try {\n    boolean setContextFlag=false;\n    for (; ; ) {\n      lexer.skipWhitespace();\n      char ch=lexer.getCurrent();\n      if (isEnabled(Feature.AllowArbitraryCommas)) {\n        while (ch == ',') {\n          lexer.next();\n          lexer.skipWhitespace();\n          ch=lexer.getCurrent();\n        }\n      }\n      boolean isObjectKey=false;\n      Object key;\n      if (ch == '\"') {\n        key=lexer.scanSymbol(symbolTable,'\"');\n        lexer.skipWhitespace();\n        ch=lexer.getCurrent();\n        if (ch != ':') {\n          throw new JSONException(\"expect ':' at \" + lexer.pos() + \", name \"+ key);\n        }\n      }\n else       if (ch == '}') {\n        lexer.next();\n        lexer.resetStringPosition();\n        lexer.nextToken();\n        return object;\n      }\n else       if (ch == '\\'') {\n        if (!isEnabled(Feature.AllowSingleQuotes)) {\n          throw new JSONException(\"syntax error\");\n        }\n        key=lexer.scanSymbol(symbolTable,'\\'');\n        lexer.skipWhitespace();\n        ch=lexer.getCurrent();\n        if (ch != ':') {\n          throw new JSONException(\"expect ':' at \" + lexer.pos());\n        }\n      }\n else       if (ch == EOI) {\n        throw new JSONException(\"syntax error\");\n      }\n else       if (ch == ',') {\n        throw new JSONException(\"syntax error\");\n      }\n else       if ((ch >= '0' && ch <= '9') || ch == '-') {\n        lexer.resetStringPosition();\n        lexer.scanNumber();\n        if (lexer.token() == JSONToken.LITERAL_INT) {\n          key=lexer.integerValue();\n        }\n else {\n          key=lexer.decimalValue(true);\n        }\n        ch=lexer.getCurrent();\n        if (ch != ':') {\n          throw new JSONException(\"expect ':' at \" + lexer.pos() + \", name \"+ key);\n        }\n      }\n else       if (ch == '{' || ch == '[') {\n        lexer.nextToken();\n        key=parse();\n        isObjectKey=true;\n      }\n else {\n        if (!isEnabled(Feature.AllowUnQuotedFieldNames)) {\n          throw new JSONException(\"syntax error\");\n        }\n        key=lexer.scanSymbolUnQuoted(symbolTable);\n        lexer.skipWhitespace();\n        ch=lexer.getCurrent();\n        if (ch != ':') {\n          throw new JSONException(\"expect ':' at \" + lexer.pos() + \", actual \"+ ch);\n        }\n      }\n      if (!isObjectKey) {\n        lexer.next();\n        lexer.skipWhitespace();\n      }\n      ch=lexer.getCurrent();\n      lexer.resetStringPosition();\n      if (key == JSON.DEFAULT_TYPE_KEY) {\n        String typeName=lexer.scanSymbol(symbolTable,'\"');\n        Class<?> clazz=TypeUtils.loadClass(typeName);\n        if (clazz == null) {\n          object.put(JSON.DEFAULT_TYPE_KEY,typeName);\n          continue;\n        }\n        lexer.nextToken(JSONToken.COMMA);\n        if (lexer.token() == JSONToken.RBRACE) {\n          lexer.nextToken(JSONToken.COMMA);\n          try {\n            Object instance=null;\n            ObjectDeserializer deserializer=this.config.getDeserializer(clazz);\n            if (deserializer instanceof ASMJavaBeanDeserializer) {\n              instance=((ASMJavaBeanDeserializer)deserializer).createInstance(this,clazz);\n            }\n else             if (deserializer instanceof JavaBeanDeserializer) {\n              instance=((JavaBeanDeserializer)deserializer).createInstance(this,clazz);\n            }\n            if (instance == null) {\n              if (clazz == Cloneable.class) {\n                instance=new HashMap();\n              }\n else {\n                instance=clazz.newInstance();\n              }\n            }\n            return instance;\n          }\n catch (          Exception e) {\n            throw new JSONException(\"create instance error\",e);\n          }\n        }\n        this.setResolveStatus(TypeNameRedirect);\n        if (this.context != null && !(fieldName instanceof Integer)) {\n          this.popContext();\n        }\n        ObjectDeserializer deserializer=config.getDeserializer(clazz);\n        return deserializer.deserialze(this,clazz,fieldName);\n      }\n      if (key == \"$ref\") {\n        lexer.nextToken(JSONToken.LITERAL_STRING);\n        if (lexer.token() == JSONToken.LITERAL_STRING) {\n          String ref=lexer.stringVal();\n          lexer.nextToken(JSONToken.RBRACE);\n          Object refValue=null;\n          if (\"@\".equals(ref)) {\n            if (this.getContext() != null) {\n              ParseContext thisContext=this.getContext();\n              Object thisObj=thisContext.getObject();\n              if (thisObj instanceof Object[] || thisObj instanceof Collection<?>) {\n                refValue=thisObj;\n              }\n else               if (thisContext.getParentContext() != null) {\n                refValue=thisContext.getParentContext().getObject();\n              }\n            }\n          }\n else           if (\"..\".equals(ref)) {\n            ParseContext parentContext=context.getParentContext();\n            if (parentContext.getObject() != null) {\n              refValue=parentContext.getObject();\n            }\n else {\n              addResolveTask(new ResolveTask(parentContext,ref));\n              setResolveStatus(DefaultJSONParser.NeedToResolve);\n            }\n          }\n else           if (\"$\".equals(ref)) {\n            ParseContext rootContext=context;\n            while (rootContext.getParentContext() != null) {\n              rootContext=rootContext.getParentContext();\n            }\n            if (rootContext.getObject() != null) {\n              refValue=rootContext.getObject();\n            }\n else {\n              addResolveTask(new ResolveTask(rootContext,ref));\n              setResolveStatus(DefaultJSONParser.NeedToResolve);\n            }\n          }\n else {\n            addResolveTask(new ResolveTask(context,ref));\n            setResolveStatus(DefaultJSONParser.NeedToResolve);\n          }\n          if (lexer.token() != JSONToken.RBRACE) {\n            throw new JSONException(\"syntax error\");\n          }\n          lexer.nextToken(JSONToken.COMMA);\n          return refValue;\n        }\n else {\n          throw new JSONException(\"illegal ref, \" + JSONToken.name(lexer.token()));\n        }\n      }\n      if (!setContextFlag) {\n        setContext(object,fieldName);\n        setContextFlag=true;\n        if (this.context != null && !(fieldName instanceof Integer)) {\n          this.popContext();\n        }\n      }\n      if (object.getClass() == JSONObject.class) {\n        key=(key == null) ? \"null\" : key.toString();\n      }\n      Object value;\n      if (ch == '\"') {\n        lexer.scanString();\n        String strValue=lexer.stringVal();\n        value=strValue;\n        if (lexer.isEnabled(Feature.AllowISO8601DateFormat)) {\n          JSONScanner iso8601Lexer=new JSONScanner(strValue);\n          if (iso8601Lexer.scanISO8601DateIfMatch()) {\n            value=iso8601Lexer.getCalendar().getTime();\n          }\n          iso8601Lexer.close();\n        }\n        object.put(key,value);\n      }\n else       if (ch >= '0' && ch <= '9' || ch == '-') {\n        lexer.scanNumber();\n        if (lexer.token() == JSONToken.LITERAL_INT) {\n          value=lexer.integerValue();\n        }\n else {\n          value=lexer.decimalValue(isEnabled(Feature.UseBigDecimal));\n        }\n        object.put(key,value);\n      }\n else       if (ch == '[') {\n        lexer.nextToken();\n        JSONArray list=new JSONArray();\n        this.parseArray(list,key);\n        value=list;\n        object.put(key,value);\n        if (lexer.token() == JSONToken.RBRACE) {\n          lexer.nextToken();\n          return object;\n        }\n else         if (lexer.token() == JSONToken.COMMA) {\n          continue;\n        }\n else {\n          throw new JSONException(\"syntax error\");\n        }\n      }\n else       if (ch == '{') {\n        lexer.nextToken();\n        final boolean parentIsArray=fieldName != null && fieldName.getClass() == Integer.class;\n        JSONObject input=new JSONObject();\n        ParseContext ctxLocal=null;\n        if (!parentIsArray) {\n          ctxLocal=setContext(context,input,key);\n        }\n        Object obj=this.parseObject(input,key);\n        if (ctxLocal != null && input != obj) {\n          ctxLocal.setObject(object);\n        }\n        checkMapResolve(object,key.toString());\n        if (object.getClass() == JSONObject.class) {\n          object.put(key.toString(),obj);\n        }\n else {\n          object.put(key,obj);\n        }\n        if (parentIsArray) {\n          setContext(context,obj,key);\n        }\n        if (lexer.token() == JSONToken.RBRACE) {\n          lexer.nextToken();\n          setContext(context);\n          return object;\n        }\n else         if (lexer.token() == JSONToken.COMMA) {\n          continue;\n        }\n else {\n          throw new JSONException(\"syntax error, \" + lexer.tokenName());\n        }\n      }\n else {\n        lexer.nextToken();\n        value=parse();\n        if (object.getClass() == JSONObject.class) {\n          key=key.toString();\n        }\n        object.put(key,value);\n        if (lexer.token() == JSONToken.RBRACE) {\n          lexer.nextToken();\n          return object;\n        }\n else         if (lexer.token() == JSONToken.COMMA) {\n          continue;\n        }\n else {\n          throw new JSONException(\"syntax error, position at \" + lexer.pos() + \", name \"+ key);\n        }\n      }\n      lexer.skipWhitespace();\n      ch=lexer.getCurrent();\n      if (ch == ',') {\n        lexer.next();\n        continue;\n      }\n else       if (ch == '}') {\n        lexer.next();\n        lexer.resetStringPosition();\n        lexer.nextToken();\n        this.setContext(object,fieldName);\n        return object;\n      }\n else {\n        throw new JSONException(\"syntax error, position at \" + lexer.pos() + \", name \"+ key);\n      }\n    }\n  }\n  finally {\n    this.setContext(context);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1352,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 14060,
        "startLineNumber" : 190,
        "startColumnNumber" : 4,
        "endLineNumber" : 510,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@SuppressWarnings({\"unchecked\",\"rawtypes\"}) public final Object parseObject(final Map object,Object fieldName){\n  final JSONLexer lexer=this.lexer;\n  if (lexer.token() != JSONToken.LBRACE && lexer.token() != JSONToken.COMMA) {\n    throw new JSONException(\"syntax error, expect {, actual \" + lexer.tokenName());\n  }\n  ParseContext context=this.getContext();\n  try {\n    boolean setContextFlag=false;\n    for (; ; ) {\n      lexer.skipWhitespace();\n      char ch=lexer.getCurrent();\n      if (isEnabled(Feature.AllowArbitraryCommas)) {\n        while (ch == ',') {\n          lexer.next();\n          lexer.skipWhitespace();\n          ch=lexer.getCurrent();\n        }\n      }\n      boolean isObjectKey=false;\n      Object key;\n      if (ch == '\"') {\n        key=lexer.scanSymbol(symbolTable,'\"');\n        lexer.skipWhitespace();\n        ch=lexer.getCurrent();\n        if (ch != ':') {\n          throw new JSONException(\"expect ':' at \" + lexer.pos() + \", name \"+ key);\n        }\n      }\n else       if (ch == '}') {\n        lexer.next();\n        lexer.resetStringPosition();\n        lexer.nextToken();\n        return object;\n      }\n else       if (ch == '\\'') {\n        if (!isEnabled(Feature.AllowSingleQuotes)) {\n          throw new JSONException(\"syntax error\");\n        }\n        key=lexer.scanSymbol(symbolTable,'\\'');\n        lexer.skipWhitespace();\n        ch=lexer.getCurrent();\n        if (ch != ':') {\n          throw new JSONException(\"expect ':' at \" + lexer.pos());\n        }\n      }\n else       if (ch == EOI) {\n        throw new JSONException(\"syntax error\");\n      }\n else       if (ch == ',') {\n        throw new JSONException(\"syntax error\");\n      }\n else       if ((ch >= '0' && ch <= '9') || ch == '-') {\n        lexer.resetStringPosition();\n        lexer.scanNumber();\n        if (lexer.token() == JSONToken.LITERAL_INT) {\n          key=lexer.integerValue();\n        }\n else {\n          key=lexer.decimalValue(true);\n        }\n        ch=lexer.getCurrent();\n        if (ch != ':') {\n          throw new JSONException(\"expect ':' at \" + lexer.pos() + \", name \"+ key);\n        }\n      }\n else       if (ch == '{' || ch == '[') {\n        lexer.nextToken();\n        key=parse();\n        isObjectKey=true;\n      }\n else {\n        if (!isEnabled(Feature.AllowUnQuotedFieldNames)) {\n          throw new JSONException(\"syntax error\");\n        }\n        key=lexer.scanSymbolUnQuoted(symbolTable);\n        lexer.skipWhitespace();\n        ch=lexer.getCurrent();\n        if (ch != ':') {\n          throw new JSONException(\"expect ':' at \" + lexer.pos() + \", actual \"+ ch);\n        }\n      }\n      if (!isObjectKey) {\n        lexer.next();\n        lexer.skipWhitespace();\n      }\n      ch=lexer.getCurrent();\n      lexer.resetStringPosition();\n      if (key == JSON.DEFAULT_TYPE_KEY) {\n        String typeName=lexer.scanSymbol(symbolTable,'\"');\n        Class<?> clazz=TypeUtils.loadClass(typeName);\n        if (clazz == null) {\n          object.put(JSON.DEFAULT_TYPE_KEY,typeName);\n          continue;\n        }\n        lexer.nextToken(JSONToken.COMMA);\n        if (lexer.token() == JSONToken.RBRACE) {\n          lexer.nextToken(JSONToken.COMMA);\n          try {\n            Object instance=null;\n            ObjectDeserializer deserializer=this.config.getDeserializer(clazz);\n            if (deserializer instanceof ASMJavaBeanDeserializer) {\n              instance=((ASMJavaBeanDeserializer)deserializer).createInstance(this,clazz);\n            }\n else             if (deserializer instanceof JavaBeanDeserializer) {\n              instance=((JavaBeanDeserializer)deserializer).createInstance(this,clazz);\n            }\n            if (instance == null) {\n              if (clazz == Cloneable.class) {\n                instance=new HashMap();\n              }\n else {\n                instance=clazz.newInstance();\n              }\n            }\n            return instance;\n          }\n catch (          Exception e) {\n            throw new JSONException(\"create instance error\",e);\n          }\n        }\n        this.setResolveStatus(TypeNameRedirect);\n        if (this.context != null && !(fieldName instanceof Integer)) {\n          this.popContext();\n        }\n        ObjectDeserializer deserializer=config.getDeserializer(clazz);\n        return deserializer.deserialze(this,clazz,fieldName);\n      }\n      if (key == \"$ref\") {\n        lexer.nextToken(JSONToken.LITERAL_STRING);\n        if (lexer.token() == JSONToken.LITERAL_STRING) {\n          String ref=lexer.stringVal();\n          lexer.nextToken(JSONToken.RBRACE);\n          Object refValue=null;\n          if (\"@\".equals(ref)) {\n            if (this.getContext() != null) {\n              ParseContext thisContext=this.getContext();\n              Object thisObj=thisContext.getObject();\n              if (thisObj instanceof Object[] || thisObj instanceof Collection<?>) {\n                refValue=thisObj;\n              }\n else               if (thisContext.getParentContext() != null) {\n                refValue=thisContext.getParentContext().getObject();\n              }\n            }\n          }\n else           if (\"..\".equals(ref)) {\n            ParseContext parentContext=context.getParentContext();\n            if (parentContext.getObject() != null) {\n              refValue=parentContext.getObject();\n            }\n else {\n              addResolveTask(new ResolveTask(parentContext,ref));\n              setResolveStatus(DefaultJSONParser.NeedToResolve);\n            }\n          }\n else           if (\"$\".equals(ref)) {\n            ParseContext rootContext=context;\n            while (rootContext.getParentContext() != null) {\n              rootContext=rootContext.getParentContext();\n            }\n            if (rootContext.getObject() != null) {\n              refValue=rootContext.getObject();\n            }\n else {\n              addResolveTask(new ResolveTask(rootContext,ref));\n              setResolveStatus(DefaultJSONParser.NeedToResolve);\n            }\n          }\n else {\n            addResolveTask(new ResolveTask(context,ref));\n            setResolveStatus(DefaultJSONParser.NeedToResolve);\n          }\n          if (lexer.token() != JSONToken.RBRACE) {\n            throw new JSONException(\"syntax error\");\n          }\n          lexer.nextToken(JSONToken.COMMA);\n          return refValue;\n        }\n else {\n          throw new JSONException(\"illegal ref, \" + JSONToken.name(lexer.token()));\n        }\n      }\n      if (!setContextFlag) {\n        setContext(object,fieldName);\n        setContextFlag=true;\n        if (this.context != null && !(fieldName instanceof Integer)) {\n          this.popContext();\n        }\n      }\n      if (object.getClass() == JSONObject.class) {\n        key=(key == null) ? \"null\" : key.toString();\n      }\n      Object value;\n      if (ch == '\"') {\n        lexer.scanString();\n        String strValue=lexer.stringVal();\n        value=strValue;\n        if (lexer.isEnabled(Feature.AllowISO8601DateFormat)) {\n          JSONScanner iso8601Lexer=new JSONScanner(strValue);\n          if (iso8601Lexer.scanISO8601DateIfMatch()) {\n            value=iso8601Lexer.getCalendar().getTime();\n          }\n          iso8601Lexer.close();\n        }\n        object.put(key,value);\n      }\n else       if (ch >= '0' && ch <= '9' || ch == '-') {\n        lexer.scanNumber();\n        if (lexer.token() == JSONToken.LITERAL_INT) {\n          value=lexer.integerValue();\n        }\n else {\n          value=lexer.decimalValue(isEnabled(Feature.UseBigDecimal));\n        }\n        object.put(key,value);\n      }\n else       if (ch == '[') {\n        lexer.nextToken();\n        JSONArray list=new JSONArray();\n        this.parseArray(list,key);\n        value=list;\n        object.put(key,value);\n        if (lexer.token() == JSONToken.RBRACE) {\n          lexer.nextToken();\n          return object;\n        }\n else         if (lexer.token() == JSONToken.COMMA) {\n          continue;\n        }\n else {\n          throw new JSONException(\"syntax error\");\n        }\n      }\n else       if (ch == '{') {\n        lexer.nextToken();\n        final boolean parentIsArray=fieldName != null && fieldName.getClass() == Integer.class;\n        JSONObject input=new JSONObject();\n        ParseContext ctxLocal=null;\n        if (!parentIsArray) {\n          ctxLocal=setContext(context,input,key);\n        }\n        Object obj=this.parseObject(input,key);\n        if (ctxLocal != null && input != obj) {\n          ctxLocal.setObject(object);\n        }\n        checkMapResolve(object,key.toString());\n        if (object.getClass() == JSONObject.class) {\n          object.put(key.toString(),obj);\n        }\n else {\n          object.put(key,obj);\n        }\n        if (parentIsArray) {\n          setContext(context,obj,key);\n        }\n        if (lexer.token() == JSONToken.RBRACE) {\n          lexer.nextToken();\n          setContext(context);\n          return object;\n        }\n else         if (lexer.token() == JSONToken.COMMA) {\n          continue;\n        }\n else {\n          throw new JSONException(\"syntax error, \" + lexer.tokenName());\n        }\n      }\n else {\n        lexer.nextToken();\n        value=parse();\n        if (object.getClass() == JSONObject.class) {\n          key=key.toString();\n        }\n        object.put(key,value);\n        if (lexer.token() == JSONToken.RBRACE) {\n          lexer.nextToken();\n          return object;\n        }\n else         if (lexer.token() == JSONToken.COMMA) {\n          continue;\n        }\n else {\n          throw new JSONException(\"syntax error, position at \" + lexer.pos() + \", name \"+ key);\n        }\n      }\n      lexer.skipWhitespace();\n      ch=lexer.getCurrent();\n      if (ch == ',') {\n        lexer.next();\n        continue;\n      }\n else       if (ch == '}') {\n        lexer.next();\n        lexer.resetStringPosition();\n        lexer.nextToken();\n        this.setContext(object,fieldName);\n        return object;\n      }\n else {\n        throw new JSONException(\"syntax error, position at \" + lexer.pos() + \", name \"+ key);\n      }\n    }\n  }\n  finally {\n    this.setContext(context);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1372,
      "astHeight" : 22
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 227,
        "startColumnNumber" : 24,
        "endLineNumber" : 227,
        "endColumnNumber" : 61
      },
      "nodeContext" : "!isEnabled(Feature.AllowSingleQuotes)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.alibaba.fastjson.parser.Feature"
  }, {
    "nodeContext" : "Feature",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 258,
      "startColumnNumber" : 35,
      "endLineNumber" : 258,
      "endColumnNumber" : 42
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 258,
        "startColumnNumber" : 35,
        "endLineNumber" : 258,
        "endColumnNumber" : 66
      },
      "nodeContext" : "Feature.AllowUnQuotedFieldNames",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 258,
        "startColumnNumber" : 25,
        "endLineNumber" : 258,
        "endColumnNumber" : 67
      },
      "nodeContext" : "isEnabled(Feature.AllowUnQuotedFieldNames)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 258,
        "startColumnNumber" : 24,
        "endLineNumber" : 258,
        "endColumnNumber" : 67
      },
      "nodeContext" : "!isEnabled(Feature.AllowUnQuotedFieldNames)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 139,
        "startLineNumber" : 258,
        "startColumnNumber" : 20,
        "endLineNumber" : 260,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (!isEnabled(Feature.AllowUnQuotedFieldNames)) {\n  throw new JSONException(\"syntax error\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 502,
        "startLineNumber" : 257,
        "startColumnNumber" : 23,
        "endLineNumber" : 268,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  if (!isEnabled(Feature.AllowUnQuotedFieldNames)) {\n    throw new JSONException(\"syntax error\");\n  }\n  key=lexer.scanSymbolUnQuoted(symbolTable);\n  lexer.skipWhitespace();\n  ch=lexer.getCurrent();\n  if (ch != ':') {\n    throw new JSONException(\"expect ':' at \" + lexer.pos() + \", actual \"+ ch);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 47,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 673,
        "startLineNumber" : 253,
        "startColumnNumber" : 23,
        "endLineNumber" : 268,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (ch == '{' || ch == '[') {\n  lexer.nextToken();\n  key=parse();\n  isObjectKey=true;\n}\n else {\n  if (!isEnabled(Feature.AllowUnQuotedFieldNames)) {\n    throw new JSONException(\"syntax error\");\n  }\n  key=lexer.scanSymbolUnQuoted(symbolTable);\n  lexer.skipWhitespace();\n  ch=lexer.getCurrent();\n  if (ch != ':') {\n    throw new JSONException(\"expect ':' at \" + lexer.pos() + \", actual \"+ ch);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 69,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1270,
        "startLineNumber" : 241,
        "startColumnNumber" : 23,
        "endLineNumber" : 268,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if ((ch >= '0' && ch <= '9') || ch == '-') {\n  lexer.resetStringPosition();\n  lexer.scanNumber();\n  if (lexer.token() == JSONToken.LITERAL_INT) {\n    key=lexer.integerValue();\n  }\n else {\n    key=lexer.decimalValue(true);\n  }\n  ch=lexer.getCurrent();\n  if (ch != ':') {\n    throw new JSONException(\"expect ':' at \" + lexer.pos() + \", name \"+ key);\n  }\n}\n else if (ch == '{' || ch == '[') {\n  lexer.nextToken();\n  key=parse();\n  isObjectKey=true;\n}\n else {\n  if (!isEnabled(Feature.AllowUnQuotedFieldNames)) {\n    throw new JSONException(\"syntax error\");\n  }\n  key=lexer.scanSymbolUnQuoted(symbolTable);\n  lexer.skipWhitespace();\n  ch=lexer.getCurrent();\n  if (ch != ':') {\n    throw new JSONException(\"expect ':' at \" + lexer.pos() + \", actual \"+ ch);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 136,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1373,
        "startLineNumber" : 239,
        "startColumnNumber" : 23,
        "endLineNumber" : 268,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (ch == ',') {\n  throw new JSONException(\"syntax error\");\n}\n else if ((ch >= '0' && ch <= '9') || ch == '-') {\n  lexer.resetStringPosition();\n  lexer.scanNumber();\n  if (lexer.token() == JSONToken.LITERAL_INT) {\n    key=lexer.integerValue();\n  }\n else {\n    key=lexer.decimalValue(true);\n  }\n  ch=lexer.getCurrent();\n  if (ch != ':') {\n    throw new JSONException(\"expect ':' at \" + lexer.pos() + \", name \"+ key);\n  }\n}\n else if (ch == '{' || ch == '[') {\n  lexer.nextToken();\n  key=parse();\n  isObjectKey=true;\n}\n else {\n  if (!isEnabled(Feature.AllowUnQuotedFieldNames)) {\n    throw new JSONException(\"syntax error\");\n  }\n  key=lexer.scanSymbolUnQuoted(symbolTable);\n  lexer.skipWhitespace();\n  ch=lexer.getCurrent();\n  if (ch != ':') {\n    throw new JSONException(\"expect ':' at \" + lexer.pos() + \", actual \"+ ch);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 146,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1476,
        "startLineNumber" : 237,
        "startColumnNumber" : 23,
        "endLineNumber" : 268,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (ch == EOI) {\n  throw new JSONException(\"syntax error\");\n}\n else if (ch == ',') {\n  throw new JSONException(\"syntax error\");\n}\n else if ((ch >= '0' && ch <= '9') || ch == '-') {\n  lexer.resetStringPosition();\n  lexer.scanNumber();\n  if (lexer.token() == JSONToken.LITERAL_INT) {\n    key=lexer.integerValue();\n  }\n else {\n    key=lexer.decimalValue(true);\n  }\n  ch=lexer.getCurrent();\n  if (ch != ':') {\n    throw new JSONException(\"expect ':' at \" + lexer.pos() + \", name \"+ key);\n  }\n}\n else if (ch == '{' || ch == '[') {\n  lexer.nextToken();\n  key=parse();\n  isObjectKey=true;\n}\n else {\n  if (!isEnabled(Feature.AllowUnQuotedFieldNames)) {\n    throw new JSONException(\"syntax error\");\n  }\n  key=lexer.scanSymbolUnQuoted(symbolTable);\n  lexer.skipWhitespace();\n  ch=lexer.getCurrent();\n  if (ch != ':') {\n    throw new JSONException(\"expect ':' at \" + lexer.pos() + \", actual \"+ ch);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 156,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1973,
        "startLineNumber" : 226,
        "startColumnNumber" : 23,
        "endLineNumber" : 268,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (ch == '\\'') {\n  if (!isEnabled(Feature.AllowSingleQuotes)) {\n    throw new JSONException(\"syntax error\");\n  }\n  key=lexer.scanSymbol(symbolTable,'\\'');\n  lexer.skipWhitespace();\n  ch=lexer.getCurrent();\n  if (ch != ':') {\n    throw new JSONException(\"expect ':' at \" + lexer.pos());\n  }\n}\n else if (ch == EOI) {\n  throw new JSONException(\"syntax error\");\n}\n else if (ch == ',') {\n  throw new JSONException(\"syntax error\");\n}\n else if ((ch >= '0' && ch <= '9') || ch == '-') {\n  lexer.resetStringPosition();\n  lexer.scanNumber();\n  if (lexer.token() == JSONToken.LITERAL_INT) {\n    key=lexer.integerValue();\n  }\n else {\n    key=lexer.decimalValue(true);\n  }\n  ch=lexer.getCurrent();\n  if (ch != ':') {\n    throw new JSONException(\"expect ':' at \" + lexer.pos() + \", name \"+ key);\n  }\n}\n else if (ch == '{' || ch == '[') {\n  lexer.nextToken();\n  key=parse();\n  isObjectKey=true;\n}\n else {\n  if (!isEnabled(Feature.AllowUnQuotedFieldNames)) {\n    throw new JSONException(\"syntax error\");\n  }\n  key=lexer.scanSymbolUnQuoted(symbolTable);\n  lexer.skipWhitespace();\n  ch=lexer.getCurrent();\n  if (ch != ':') {\n    throw new JSONException(\"expect ':' at \" + lexer.pos() + \", actual \"+ ch);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 206,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2175,
        "startLineNumber" : 221,
        "startColumnNumber" : 23,
        "endLineNumber" : 268,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (ch == '}') {\n  lexer.next();\n  lexer.resetStringPosition();\n  lexer.nextToken();\n  return object;\n}\n else if (ch == '\\'') {\n  if (!isEnabled(Feature.AllowSingleQuotes)) {\n    throw new JSONException(\"syntax error\");\n  }\n  key=lexer.scanSymbol(symbolTable,'\\'');\n  lexer.skipWhitespace();\n  ch=lexer.getCurrent();\n  if (ch != ':') {\n    throw new JSONException(\"expect ':' at \" + lexer.pos());\n  }\n}\n else if (ch == EOI) {\n  throw new JSONException(\"syntax error\");\n}\n else if (ch == ',') {\n  throw new JSONException(\"syntax error\");\n}\n else if ((ch >= '0' && ch <= '9') || ch == '-') {\n  lexer.resetStringPosition();\n  lexer.scanNumber();\n  if (lexer.token() == JSONToken.LITERAL_INT) {\n    key=lexer.integerValue();\n  }\n else {\n    key=lexer.decimalValue(true);\n  }\n  ch=lexer.getCurrent();\n  if (ch != ':') {\n    throw new JSONException(\"expect ':' at \" + lexer.pos() + \", name \"+ key);\n  }\n}\n else if (ch == '{' || ch == '[') {\n  lexer.nextToken();\n  key=parse();\n  isObjectKey=true;\n}\n else {\n  if (!isEnabled(Feature.AllowUnQuotedFieldNames)) {\n    throw new JSONException(\"syntax error\");\n  }\n  key=lexer.scanSymbolUnQuoted(symbolTable);\n  lexer.skipWhitespace();\n  ch=lexer.getCurrent();\n  if (ch != ':') {\n    throw new JSONException(\"expect ':' at \" + lexer.pos() + \", actual \"+ ch);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 225,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2531,
        "startLineNumber" : 214,
        "startColumnNumber" : 16,
        "endLineNumber" : 268,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (ch == '\"') {\n  key=lexer.scanSymbol(symbolTable,'\"');\n  lexer.skipWhitespace();\n  ch=lexer.getCurrent();\n  if (ch != ':') {\n    throw new JSONException(\"expect ':' at \" + lexer.pos() + \", name \"+ key);\n  }\n}\n else if (ch == '}') {\n  lexer.next();\n  lexer.resetStringPosition();\n  lexer.nextToken();\n  return object;\n}\n else if (ch == '\\'') {\n  if (!isEnabled(Feature.AllowSingleQuotes)) {\n    throw new JSONException(\"syntax error\");\n  }\n  key=lexer.scanSymbol(symbolTable,'\\'');\n  lexer.skipWhitespace();\n  ch=lexer.getCurrent();\n  if (ch != ':') {\n    throw new JSONException(\"expect ':' at \" + lexer.pos());\n  }\n}\n else if (ch == EOI) {\n  throw new JSONException(\"syntax error\");\n}\n else if (ch == ',') {\n  throw new JSONException(\"syntax error\");\n}\n else if ((ch >= '0' && ch <= '9') || ch == '-') {\n  lexer.resetStringPosition();\n  lexer.scanNumber();\n  if (lexer.token() == JSONToken.LITERAL_INT) {\n    key=lexer.integerValue();\n  }\n else {\n    key=lexer.decimalValue(true);\n  }\n  ch=lexer.getCurrent();\n  if (ch != ':') {\n    throw new JSONException(\"expect ':' at \" + lexer.pos() + \", name \"+ key);\n  }\n}\n else if (ch == '{' || ch == '[') {\n  lexer.nextToken();\n  key=parse();\n  isObjectKey=true;\n}\n else {\n  if (!isEnabled(Feature.AllowUnQuotedFieldNames)) {\n    throw new JSONException(\"syntax error\");\n  }\n  key=lexer.scanSymbolUnQuoted(symbolTable);\n  lexer.skipWhitespace();\n  ch=lexer.getCurrent();\n  if (ch != ':') {\n    throw new JSONException(\"expect ':' at \" + lexer.pos() + \", actual \"+ ch);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 264,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 13486,
        "startLineNumber" : 201,
        "startColumnNumber" : 21,
        "endLineNumber" : 505,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  lexer.skipWhitespace();\n  char ch=lexer.getCurrent();\n  if (isEnabled(Feature.AllowArbitraryCommas)) {\n    while (ch == ',') {\n      lexer.next();\n      lexer.skipWhitespace();\n      ch=lexer.getCurrent();\n    }\n  }\n  boolean isObjectKey=false;\n  Object key;\n  if (ch == '\"') {\n    key=lexer.scanSymbol(symbolTable,'\"');\n    lexer.skipWhitespace();\n    ch=lexer.getCurrent();\n    if (ch != ':') {\n      throw new JSONException(\"expect ':' at \" + lexer.pos() + \", name \"+ key);\n    }\n  }\n else   if (ch == '}') {\n    lexer.next();\n    lexer.resetStringPosition();\n    lexer.nextToken();\n    return object;\n  }\n else   if (ch == '\\'') {\n    if (!isEnabled(Feature.AllowSingleQuotes)) {\n      throw new JSONException(\"syntax error\");\n    }\n    key=lexer.scanSymbol(symbolTable,'\\'');\n    lexer.skipWhitespace();\n    ch=lexer.getCurrent();\n    if (ch != ':') {\n      throw new JSONException(\"expect ':' at \" + lexer.pos());\n    }\n  }\n else   if (ch == EOI) {\n    throw new JSONException(\"syntax error\");\n  }\n else   if (ch == ',') {\n    throw new JSONException(\"syntax error\");\n  }\n else   if ((ch >= '0' && ch <= '9') || ch == '-') {\n    lexer.resetStringPosition();\n    lexer.scanNumber();\n    if (lexer.token() == JSONToken.LITERAL_INT) {\n      key=lexer.integerValue();\n    }\n else {\n      key=lexer.decimalValue(true);\n    }\n    ch=lexer.getCurrent();\n    if (ch != ':') {\n      throw new JSONException(\"expect ':' at \" + lexer.pos() + \", name \"+ key);\n    }\n  }\n else   if (ch == '{' || ch == '[') {\n    lexer.nextToken();\n    key=parse();\n    isObjectKey=true;\n  }\n else {\n    if (!isEnabled(Feature.AllowUnQuotedFieldNames)) {\n      throw new JSONException(\"syntax error\");\n    }\n    key=lexer.scanSymbolUnQuoted(symbolTable);\n    lexer.skipWhitespace();\n    ch=lexer.getCurrent();\n    if (ch != ':') {\n      throw new JSONException(\"expect ':' at \" + lexer.pos() + \", actual \"+ ch);\n    }\n  }\n  if (!isObjectKey) {\n    lexer.next();\n    lexer.skipWhitespace();\n  }\n  ch=lexer.getCurrent();\n  lexer.resetStringPosition();\n  if (key == JSON.DEFAULT_TYPE_KEY) {\n    String typeName=lexer.scanSymbol(symbolTable,'\"');\n    Class<?> clazz=TypeUtils.loadClass(typeName);\n    if (clazz == null) {\n      object.put(JSON.DEFAULT_TYPE_KEY,typeName);\n      continue;\n    }\n    lexer.nextToken(JSONToken.COMMA);\n    if (lexer.token() == JSONToken.RBRACE) {\n      lexer.nextToken(JSONToken.COMMA);\n      try {\n        Object instance=null;\n        ObjectDeserializer deserializer=this.config.getDeserializer(clazz);\n        if (deserializer instanceof ASMJavaBeanDeserializer) {\n          instance=((ASMJavaBeanDeserializer)deserializer).createInstance(this,clazz);\n        }\n else         if (deserializer instanceof JavaBeanDeserializer) {\n          instance=((JavaBeanDeserializer)deserializer).createInstance(this,clazz);\n        }\n        if (instance == null) {\n          if (clazz == Cloneable.class) {\n            instance=new HashMap();\n          }\n else {\n            instance=clazz.newInstance();\n          }\n        }\n        return instance;\n      }\n catch (      Exception e) {\n        throw new JSONException(\"create instance error\",e);\n      }\n    }\n    this.setResolveStatus(TypeNameRedirect);\n    if (this.context != null && !(fieldName instanceof Integer)) {\n      this.popContext();\n    }\n    ObjectDeserializer deserializer=config.getDeserializer(clazz);\n    return deserializer.deserialze(this,clazz,fieldName);\n  }\n  if (key == \"$ref\") {\n    lexer.nextToken(JSONToken.LITERAL_STRING);\n    if (lexer.token() == JSONToken.LITERAL_STRING) {\n      String ref=lexer.stringVal();\n      lexer.nextToken(JSONToken.RBRACE);\n      Object refValue=null;\n      if (\"@\".equals(ref)) {\n        if (this.getContext() != null) {\n          ParseContext thisContext=this.getContext();\n          Object thisObj=thisContext.getObject();\n          if (thisObj instanceof Object[] || thisObj instanceof Collection<?>) {\n            refValue=thisObj;\n          }\n else           if (thisContext.getParentContext() != null) {\n            refValue=thisContext.getParentContext().getObject();\n          }\n        }\n      }\n else       if (\"..\".equals(ref)) {\n        ParseContext parentContext=context.getParentContext();\n        if (parentContext.getObject() != null) {\n          refValue=parentContext.getObject();\n        }\n else {\n          addResolveTask(new ResolveTask(parentContext,ref));\n          setResolveStatus(DefaultJSONParser.NeedToResolve);\n        }\n      }\n else       if (\"$\".equals(ref)) {\n        ParseContext rootContext=context;\n        while (rootContext.getParentContext() != null) {\n          rootContext=rootContext.getParentContext();\n        }\n        if (rootContext.getObject() != null) {\n          refValue=rootContext.getObject();\n        }\n else {\n          addResolveTask(new ResolveTask(rootContext,ref));\n          setResolveStatus(DefaultJSONParser.NeedToResolve);\n        }\n      }\n else {\n        addResolveTask(new ResolveTask(context,ref));\n        setResolveStatus(DefaultJSONParser.NeedToResolve);\n      }\n      if (lexer.token() != JSONToken.RBRACE) {\n        throw new JSONException(\"syntax error\");\n      }\n      lexer.nextToken(JSONToken.COMMA);\n      return refValue;\n    }\n else {\n      throw new JSONException(\"illegal ref, \" + JSONToken.name(lexer.token()));\n    }\n  }\n  if (!setContextFlag) {\n    setContext(object,fieldName);\n    setContextFlag=true;\n    if (this.context != null && !(fieldName instanceof Integer)) {\n      this.popContext();\n    }\n  }\n  if (object.getClass() == JSONObject.class) {\n    key=(key == null) ? \"null\" : key.toString();\n  }\n  Object value;\n  if (ch == '\"') {\n    lexer.scanString();\n    String strValue=lexer.stringVal();\n    value=strValue;\n    if (lexer.isEnabled(Feature.AllowISO8601DateFormat)) {\n      JSONScanner iso8601Lexer=new JSONScanner(strValue);\n      if (iso8601Lexer.scanISO8601DateIfMatch()) {\n        value=iso8601Lexer.getCalendar().getTime();\n      }\n      iso8601Lexer.close();\n    }\n    object.put(key,value);\n  }\n else   if (ch >= '0' && ch <= '9' || ch == '-') {\n    lexer.scanNumber();\n    if (lexer.token() == JSONToken.LITERAL_INT) {\n      value=lexer.integerValue();\n    }\n else {\n      value=lexer.decimalValue(isEnabled(Feature.UseBigDecimal));\n    }\n    object.put(key,value);\n  }\n else   if (ch == '[') {\n    lexer.nextToken();\n    JSONArray list=new JSONArray();\n    this.parseArray(list,key);\n    value=list;\n    object.put(key,value);\n    if (lexer.token() == JSONToken.RBRACE) {\n      lexer.nextToken();\n      return object;\n    }\n else     if (lexer.token() == JSONToken.COMMA) {\n      continue;\n    }\n else {\n      throw new JSONException(\"syntax error\");\n    }\n  }\n else   if (ch == '{') {\n    lexer.nextToken();\n    final boolean parentIsArray=fieldName != null && fieldName.getClass() == Integer.class;\n    JSONObject input=new JSONObject();\n    ParseContext ctxLocal=null;\n    if (!parentIsArray) {\n      ctxLocal=setContext(context,input,key);\n    }\n    Object obj=this.parseObject(input,key);\n    if (ctxLocal != null && input != obj) {\n      ctxLocal.setObject(object);\n    }\n    checkMapResolve(object,key.toString());\n    if (object.getClass() == JSONObject.class) {\n      object.put(key.toString(),obj);\n    }\n else {\n      object.put(key,obj);\n    }\n    if (parentIsArray) {\n      setContext(context,obj,key);\n    }\n    if (lexer.token() == JSONToken.RBRACE) {\n      lexer.nextToken();\n      setContext(context);\n      return object;\n    }\n else     if (lexer.token() == JSONToken.COMMA) {\n      continue;\n    }\n else {\n      throw new JSONException(\"syntax error, \" + lexer.tokenName());\n    }\n  }\n else {\n    lexer.nextToken();\n    value=parse();\n    if (object.getClass() == JSONObject.class) {\n      key=key.toString();\n    }\n    object.put(key,value);\n    if (lexer.token() == JSONToken.RBRACE) {\n      lexer.nextToken();\n      return object;\n    }\n else     if (lexer.token() == JSONToken.COMMA) {\n      continue;\n    }\n else {\n      throw new JSONException(\"syntax error, position at \" + lexer.pos() + \", name \"+ key);\n    }\n  }\n  lexer.skipWhitespace();\n  ch=lexer.getCurrent();\n  if (ch == ',') {\n    lexer.next();\n    continue;\n  }\n else   if (ch == '}') {\n    lexer.next();\n    lexer.resetStringPosition();\n    lexer.nextToken();\n    this.setContext(object,fieldName);\n    return object;\n  }\n else {\n    throw new JSONException(\"syntax error, position at \" + lexer.pos() + \", name \"+ key);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1294,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 13495,
        "startLineNumber" : 201,
        "startColumnNumber" : 12,
        "endLineNumber" : 505,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (; ; ) {\n  lexer.skipWhitespace();\n  char ch=lexer.getCurrent();\n  if (isEnabled(Feature.AllowArbitraryCommas)) {\n    while (ch == ',') {\n      lexer.next();\n      lexer.skipWhitespace();\n      ch=lexer.getCurrent();\n    }\n  }\n  boolean isObjectKey=false;\n  Object key;\n  if (ch == '\"') {\n    key=lexer.scanSymbol(symbolTable,'\"');\n    lexer.skipWhitespace();\n    ch=lexer.getCurrent();\n    if (ch != ':') {\n      throw new JSONException(\"expect ':' at \" + lexer.pos() + \", name \"+ key);\n    }\n  }\n else   if (ch == '}') {\n    lexer.next();\n    lexer.resetStringPosition();\n    lexer.nextToken();\n    return object;\n  }\n else   if (ch == '\\'') {\n    if (!isEnabled(Feature.AllowSingleQuotes)) {\n      throw new JSONException(\"syntax error\");\n    }\n    key=lexer.scanSymbol(symbolTable,'\\'');\n    lexer.skipWhitespace();\n    ch=lexer.getCurrent();\n    if (ch != ':') {\n      throw new JSONException(\"expect ':' at \" + lexer.pos());\n    }\n  }\n else   if (ch == EOI) {\n    throw new JSONException(\"syntax error\");\n  }\n else   if (ch == ',') {\n    throw new JSONException(\"syntax error\");\n  }\n else   if ((ch >= '0' && ch <= '9') || ch == '-') {\n    lexer.resetStringPosition();\n    lexer.scanNumber();\n    if (lexer.token() == JSONToken.LITERAL_INT) {\n      key=lexer.integerValue();\n    }\n else {\n      key=lexer.decimalValue(true);\n    }\n    ch=lexer.getCurrent();\n    if (ch != ':') {\n      throw new JSONException(\"expect ':' at \" + lexer.pos() + \", name \"+ key);\n    }\n  }\n else   if (ch == '{' || ch == '[') {\n    lexer.nextToken();\n    key=parse();\n    isObjectKey=true;\n  }\n else {\n    if (!isEnabled(Feature.AllowUnQuotedFieldNames)) {\n      throw new JSONException(\"syntax error\");\n    }\n    key=lexer.scanSymbolUnQuoted(symbolTable);\n    lexer.skipWhitespace();\n    ch=lexer.getCurrent();\n    if (ch != ':') {\n      throw new JSONException(\"expect ':' at \" + lexer.pos() + \", actual \"+ ch);\n    }\n  }\n  if (!isObjectKey) {\n    lexer.next();\n    lexer.skipWhitespace();\n  }\n  ch=lexer.getCurrent();\n  lexer.resetStringPosition();\n  if (key == JSON.DEFAULT_TYPE_KEY) {\n    String typeName=lexer.scanSymbol(symbolTable,'\"');\n    Class<?> clazz=TypeUtils.loadClass(typeName);\n    if (clazz == null) {\n      object.put(JSON.DEFAULT_TYPE_KEY,typeName);\n      continue;\n    }\n    lexer.nextToken(JSONToken.COMMA);\n    if (lexer.token() == JSONToken.RBRACE) {\n      lexer.nextToken(JSONToken.COMMA);\n      try {\n        Object instance=null;\n        ObjectDeserializer deserializer=this.config.getDeserializer(clazz);\n        if (deserializer instanceof ASMJavaBeanDeserializer) {\n          instance=((ASMJavaBeanDeserializer)deserializer).createInstance(this,clazz);\n        }\n else         if (deserializer instanceof JavaBeanDeserializer) {\n          instance=((JavaBeanDeserializer)deserializer).createInstance(this,clazz);\n        }\n        if (instance == null) {\n          if (clazz == Cloneable.class) {\n            instance=new HashMap();\n          }\n else {\n            instance=clazz.newInstance();\n          }\n        }\n        return instance;\n      }\n catch (      Exception e) {\n        throw new JSONException(\"create instance error\",e);\n      }\n    }\n    this.setResolveStatus(TypeNameRedirect);\n    if (this.context != null && !(fieldName instanceof Integer)) {\n      this.popContext();\n    }\n    ObjectDeserializer deserializer=config.getDeserializer(clazz);\n    return deserializer.deserialze(this,clazz,fieldName);\n  }\n  if (key == \"$ref\") {\n    lexer.nextToken(JSONToken.LITERAL_STRING);\n    if (lexer.token() == JSONToken.LITERAL_STRING) {\n      String ref=lexer.stringVal();\n      lexer.nextToken(JSONToken.RBRACE);\n      Object refValue=null;\n      if (\"@\".equals(ref)) {\n        if (this.getContext() != null) {\n          ParseContext thisContext=this.getContext();\n          Object thisObj=thisContext.getObject();\n          if (thisObj instanceof Object[] || thisObj instanceof Collection<?>) {\n            refValue=thisObj;\n          }\n else           if (thisContext.getParentContext() != null) {\n            refValue=thisContext.getParentContext().getObject();\n          }\n        }\n      }\n else       if (\"..\".equals(ref)) {\n        ParseContext parentContext=context.getParentContext();\n        if (parentContext.getObject() != null) {\n          refValue=parentContext.getObject();\n        }\n else {\n          addResolveTask(new ResolveTask(parentContext,ref));\n          setResolveStatus(DefaultJSONParser.NeedToResolve);\n        }\n      }\n else       if (\"$\".equals(ref)) {\n        ParseContext rootContext=context;\n        while (rootContext.getParentContext() != null) {\n          rootContext=rootContext.getParentContext();\n        }\n        if (rootContext.getObject() != null) {\n          refValue=rootContext.getObject();\n        }\n else {\n          addResolveTask(new ResolveTask(rootContext,ref));\n          setResolveStatus(DefaultJSONParser.NeedToResolve);\n        }\n      }\n else {\n        addResolveTask(new ResolveTask(context,ref));\n        setResolveStatus(DefaultJSONParser.NeedToResolve);\n      }\n      if (lexer.token() != JSONToken.RBRACE) {\n        throw new JSONException(\"syntax error\");\n      }\n      lexer.nextToken(JSONToken.COMMA);\n      return refValue;\n    }\n else {\n      throw new JSONException(\"illegal ref, \" + JSONToken.name(lexer.token()));\n    }\n  }\n  if (!setContextFlag) {\n    setContext(object,fieldName);\n    setContextFlag=true;\n    if (this.context != null && !(fieldName instanceof Integer)) {\n      this.popContext();\n    }\n  }\n  if (object.getClass() == JSONObject.class) {\n    key=(key == null) ? \"null\" : key.toString();\n  }\n  Object value;\n  if (ch == '\"') {\n    lexer.scanString();\n    String strValue=lexer.stringVal();\n    value=strValue;\n    if (lexer.isEnabled(Feature.AllowISO8601DateFormat)) {\n      JSONScanner iso8601Lexer=new JSONScanner(strValue);\n      if (iso8601Lexer.scanISO8601DateIfMatch()) {\n        value=iso8601Lexer.getCalendar().getTime();\n      }\n      iso8601Lexer.close();\n    }\n    object.put(key,value);\n  }\n else   if (ch >= '0' && ch <= '9' || ch == '-') {\n    lexer.scanNumber();\n    if (lexer.token() == JSONToken.LITERAL_INT) {\n      value=lexer.integerValue();\n    }\n else {\n      value=lexer.decimalValue(isEnabled(Feature.UseBigDecimal));\n    }\n    object.put(key,value);\n  }\n else   if (ch == '[') {\n    lexer.nextToken();\n    JSONArray list=new JSONArray();\n    this.parseArray(list,key);\n    value=list;\n    object.put(key,value);\n    if (lexer.token() == JSONToken.RBRACE) {\n      lexer.nextToken();\n      return object;\n    }\n else     if (lexer.token() == JSONToken.COMMA) {\n      continue;\n    }\n else {\n      throw new JSONException(\"syntax error\");\n    }\n  }\n else   if (ch == '{') {\n    lexer.nextToken();\n    final boolean parentIsArray=fieldName != null && fieldName.getClass() == Integer.class;\n    JSONObject input=new JSONObject();\n    ParseContext ctxLocal=null;\n    if (!parentIsArray) {\n      ctxLocal=setContext(context,input,key);\n    }\n    Object obj=this.parseObject(input,key);\n    if (ctxLocal != null && input != obj) {\n      ctxLocal.setObject(object);\n    }\n    checkMapResolve(object,key.toString());\n    if (object.getClass() == JSONObject.class) {\n      object.put(key.toString(),obj);\n    }\n else {\n      object.put(key,obj);\n    }\n    if (parentIsArray) {\n      setContext(context,obj,key);\n    }\n    if (lexer.token() == JSONToken.RBRACE) {\n      lexer.nextToken();\n      setContext(context);\n      return object;\n    }\n else     if (lexer.token() == JSONToken.COMMA) {\n      continue;\n    }\n else {\n      throw new JSONException(\"syntax error, \" + lexer.tokenName());\n    }\n  }\n else {\n    lexer.nextToken();\n    value=parse();\n    if (object.getClass() == JSONObject.class) {\n      key=key.toString();\n    }\n    object.put(key,value);\n    if (lexer.token() == JSONToken.RBRACE) {\n      lexer.nextToken();\n      return object;\n    }\n else     if (lexer.token() == JSONToken.COMMA) {\n      continue;\n    }\n else {\n      throw new JSONException(\"syntax error, position at \" + lexer.pos() + \", name \"+ key);\n    }\n  }\n  lexer.skipWhitespace();\n  ch=lexer.getCurrent();\n  if (ch == ',') {\n    lexer.next();\n    continue;\n  }\n else   if (ch == '}') {\n    lexer.next();\n    lexer.resetStringPosition();\n    lexer.nextToken();\n    this.setContext(object,fieldName);\n    return object;\n  }\n else {\n    throw new JSONException(\"syntax error, position at \" + lexer.pos() + \", name \"+ key);\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 1295,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 13566,
        "startLineNumber" : 199,
        "startColumnNumber" : 12,
        "endLineNumber" : 506,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  boolean setContextFlag=false;\n  for (; ; ) {\n    lexer.skipWhitespace();\n    char ch=lexer.getCurrent();\n    if (isEnabled(Feature.AllowArbitraryCommas)) {\n      while (ch == ',') {\n        lexer.next();\n        lexer.skipWhitespace();\n        ch=lexer.getCurrent();\n      }\n    }\n    boolean isObjectKey=false;\n    Object key;\n    if (ch == '\"') {\n      key=lexer.scanSymbol(symbolTable,'\"');\n      lexer.skipWhitespace();\n      ch=lexer.getCurrent();\n      if (ch != ':') {\n        throw new JSONException(\"expect ':' at \" + lexer.pos() + \", name \"+ key);\n      }\n    }\n else     if (ch == '}') {\n      lexer.next();\n      lexer.resetStringPosition();\n      lexer.nextToken();\n      return object;\n    }\n else     if (ch == '\\'') {\n      if (!isEnabled(Feature.AllowSingleQuotes)) {\n        throw new JSONException(\"syntax error\");\n      }\n      key=lexer.scanSymbol(symbolTable,'\\'');\n      lexer.skipWhitespace();\n      ch=lexer.getCurrent();\n      if (ch != ':') {\n        throw new JSONException(\"expect ':' at \" + lexer.pos());\n      }\n    }\n else     if (ch == EOI) {\n      throw new JSONException(\"syntax error\");\n    }\n else     if (ch == ',') {\n      throw new JSONException(\"syntax error\");\n    }\n else     if ((ch >= '0' && ch <= '9') || ch == '-') {\n      lexer.resetStringPosition();\n      lexer.scanNumber();\n      if (lexer.token() == JSONToken.LITERAL_INT) {\n        key=lexer.integerValue();\n      }\n else {\n        key=lexer.decimalValue(true);\n      }\n      ch=lexer.getCurrent();\n      if (ch != ':') {\n        throw new JSONException(\"expect ':' at \" + lexer.pos() + \", name \"+ key);\n      }\n    }\n else     if (ch == '{' || ch == '[') {\n      lexer.nextToken();\n      key=parse();\n      isObjectKey=true;\n    }\n else {\n      if (!isEnabled(Feature.AllowUnQuotedFieldNames)) {\n        throw new JSONException(\"syntax error\");\n      }\n      key=lexer.scanSymbolUnQuoted(symbolTable);\n      lexer.skipWhitespace();\n      ch=lexer.getCurrent();\n      if (ch != ':') {\n        throw new JSONException(\"expect ':' at \" + lexer.pos() + \", actual \"+ ch);\n      }\n    }\n    if (!isObjectKey) {\n      lexer.next();\n      lexer.skipWhitespace();\n    }\n    ch=lexer.getCurrent();\n    lexer.resetStringPosition();\n    if (key == JSON.DEFAULT_TYPE_KEY) {\n      String typeName=lexer.scanSymbol(symbolTable,'\"');\n      Class<?> clazz=TypeUtils.loadClass(typeName);\n      if (clazz == null) {\n        object.put(JSON.DEFAULT_TYPE_KEY,typeName);\n        continue;\n      }\n      lexer.nextToken(JSONToken.COMMA);\n      if (lexer.token() == JSONToken.RBRACE) {\n        lexer.nextToken(JSONToken.COMMA);\n        try {\n          Object instance=null;\n          ObjectDeserializer deserializer=this.config.getDeserializer(clazz);\n          if (deserializer instanceof ASMJavaBeanDeserializer) {\n            instance=((ASMJavaBeanDeserializer)deserializer).createInstance(this,clazz);\n          }\n else           if (deserializer instanceof JavaBeanDeserializer) {\n            instance=((JavaBeanDeserializer)deserializer).createInstance(this,clazz);\n          }\n          if (instance == null) {\n            if (clazz == Cloneable.class) {\n              instance=new HashMap();\n            }\n else {\n              instance=clazz.newInstance();\n            }\n          }\n          return instance;\n        }\n catch (        Exception e) {\n          throw new JSONException(\"create instance error\",e);\n        }\n      }\n      this.setResolveStatus(TypeNameRedirect);\n      if (this.context != null && !(fieldName instanceof Integer)) {\n        this.popContext();\n      }\n      ObjectDeserializer deserializer=config.getDeserializer(clazz);\n      return deserializer.deserialze(this,clazz,fieldName);\n    }\n    if (key == \"$ref\") {\n      lexer.nextToken(JSONToken.LITERAL_STRING);\n      if (lexer.token() == JSONToken.LITERAL_STRING) {\n        String ref=lexer.stringVal();\n        lexer.nextToken(JSONToken.RBRACE);\n        Object refValue=null;\n        if (\"@\".equals(ref)) {\n          if (this.getContext() != null) {\n            ParseContext thisContext=this.getContext();\n            Object thisObj=thisContext.getObject();\n            if (thisObj instanceof Object[] || thisObj instanceof Collection<?>) {\n              refValue=thisObj;\n            }\n else             if (thisContext.getParentContext() != null) {\n              refValue=thisContext.getParentContext().getObject();\n            }\n          }\n        }\n else         if (\"..\".equals(ref)) {\n          ParseContext parentContext=context.getParentContext();\n          if (parentContext.getObject() != null) {\n            refValue=parentContext.getObject();\n          }\n else {\n            addResolveTask(new ResolveTask(parentContext,ref));\n            setResolveStatus(DefaultJSONParser.NeedToResolve);\n          }\n        }\n else         if (\"$\".equals(ref)) {\n          ParseContext rootContext=context;\n          while (rootContext.getParentContext() != null) {\n            rootContext=rootContext.getParentContext();\n          }\n          if (rootContext.getObject() != null) {\n            refValue=rootContext.getObject();\n          }\n else {\n            addResolveTask(new ResolveTask(rootContext,ref));\n            setResolveStatus(DefaultJSONParser.NeedToResolve);\n          }\n        }\n else {\n          addResolveTask(new ResolveTask(context,ref));\n          setResolveStatus(DefaultJSONParser.NeedToResolve);\n        }\n        if (lexer.token() != JSONToken.RBRACE) {\n          throw new JSONException(\"syntax error\");\n        }\n        lexer.nextToken(JSONToken.COMMA);\n        return refValue;\n      }\n else {\n        throw new JSONException(\"illegal ref, \" + JSONToken.name(lexer.token()));\n      }\n    }\n    if (!setContextFlag) {\n      setContext(object,fieldName);\n      setContextFlag=true;\n      if (this.context != null && !(fieldName instanceof Integer)) {\n        this.popContext();\n      }\n    }\n    if (object.getClass() == JSONObject.class) {\n      key=(key == null) ? \"null\" : key.toString();\n    }\n    Object value;\n    if (ch == '\"') {\n      lexer.scanString();\n      String strValue=lexer.stringVal();\n      value=strValue;\n      if (lexer.isEnabled(Feature.AllowISO8601DateFormat)) {\n        JSONScanner iso8601Lexer=new JSONScanner(strValue);\n        if (iso8601Lexer.scanISO8601DateIfMatch()) {\n          value=iso8601Lexer.getCalendar().getTime();\n        }\n        iso8601Lexer.close();\n      }\n      object.put(key,value);\n    }\n else     if (ch >= '0' && ch <= '9' || ch == '-') {\n      lexer.scanNumber();\n      if (lexer.token() == JSONToken.LITERAL_INT) {\n        value=lexer.integerValue();\n      }\n else {\n        value=lexer.decimalValue(isEnabled(Feature.UseBigDecimal));\n      }\n      object.put(key,value);\n    }\n else     if (ch == '[') {\n      lexer.nextToken();\n      JSONArray list=new JSONArray();\n      this.parseArray(list,key);\n      value=list;\n      object.put(key,value);\n      if (lexer.token() == JSONToken.RBRACE) {\n        lexer.nextToken();\n        return object;\n      }\n else       if (lexer.token() == JSONToken.COMMA) {\n        continue;\n      }\n else {\n        throw new JSONException(\"syntax error\");\n      }\n    }\n else     if (ch == '{') {\n      lexer.nextToken();\n      final boolean parentIsArray=fieldName != null && fieldName.getClass() == Integer.class;\n      JSONObject input=new JSONObject();\n      ParseContext ctxLocal=null;\n      if (!parentIsArray) {\n        ctxLocal=setContext(context,input,key);\n      }\n      Object obj=this.parseObject(input,key);\n      if (ctxLocal != null && input != obj) {\n        ctxLocal.setObject(object);\n      }\n      checkMapResolve(object,key.toString());\n      if (object.getClass() == JSONObject.class) {\n        object.put(key.toString(),obj);\n      }\n else {\n        object.put(key,obj);\n      }\n      if (parentIsArray) {\n        setContext(context,obj,key);\n      }\n      if (lexer.token() == JSONToken.RBRACE) {\n        lexer.nextToken();\n        setContext(context);\n        return object;\n      }\n else       if (lexer.token() == JSONToken.COMMA) {\n        continue;\n      }\n else {\n        throw new JSONException(\"syntax error, \" + lexer.tokenName());\n      }\n    }\n else {\n      lexer.nextToken();\n      value=parse();\n      if (object.getClass() == JSONObject.class) {\n        key=key.toString();\n      }\n      object.put(key,value);\n      if (lexer.token() == JSONToken.RBRACE) {\n        lexer.nextToken();\n        return object;\n      }\n else       if (lexer.token() == JSONToken.COMMA) {\n        continue;\n      }\n else {\n        throw new JSONException(\"syntax error, position at \" + lexer.pos() + \", name \"+ key);\n      }\n    }\n    lexer.skipWhitespace();\n    ch=lexer.getCurrent();\n    if (ch == ',') {\n      lexer.next();\n      continue;\n    }\n else     if (ch == '}') {\n      lexer.next();\n      lexer.resetStringPosition();\n      lexer.nextToken();\n      this.setContext(object,fieldName);\n      return object;\n    }\n else {\n      throw new JSONException(\"syntax error, position at \" + lexer.pos() + \", name \"+ key);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1301,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 13630,
        "startLineNumber" : 199,
        "startColumnNumber" : 8,
        "endLineNumber" : 508,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  boolean setContextFlag=false;\n  for (; ; ) {\n    lexer.skipWhitespace();\n    char ch=lexer.getCurrent();\n    if (isEnabled(Feature.AllowArbitraryCommas)) {\n      while (ch == ',') {\n        lexer.next();\n        lexer.skipWhitespace();\n        ch=lexer.getCurrent();\n      }\n    }\n    boolean isObjectKey=false;\n    Object key;\n    if (ch == '\"') {\n      key=lexer.scanSymbol(symbolTable,'\"');\n      lexer.skipWhitespace();\n      ch=lexer.getCurrent();\n      if (ch != ':') {\n        throw new JSONException(\"expect ':' at \" + lexer.pos() + \", name \"+ key);\n      }\n    }\n else     if (ch == '}') {\n      lexer.next();\n      lexer.resetStringPosition();\n      lexer.nextToken();\n      return object;\n    }\n else     if (ch == '\\'') {\n      if (!isEnabled(Feature.AllowSingleQuotes)) {\n        throw new JSONException(\"syntax error\");\n      }\n      key=lexer.scanSymbol(symbolTable,'\\'');\n      lexer.skipWhitespace();\n      ch=lexer.getCurrent();\n      if (ch != ':') {\n        throw new JSONException(\"expect ':' at \" + lexer.pos());\n      }\n    }\n else     if (ch == EOI) {\n      throw new JSONException(\"syntax error\");\n    }\n else     if (ch == ',') {\n      throw new JSONException(\"syntax error\");\n    }\n else     if ((ch >= '0' && ch <= '9') || ch == '-') {\n      lexer.resetStringPosition();\n      lexer.scanNumber();\n      if (lexer.token() == JSONToken.LITERAL_INT) {\n        key=lexer.integerValue();\n      }\n else {\n        key=lexer.decimalValue(true);\n      }\n      ch=lexer.getCurrent();\n      if (ch != ':') {\n        throw new JSONException(\"expect ':' at \" + lexer.pos() + \", name \"+ key);\n      }\n    }\n else     if (ch == '{' || ch == '[') {\n      lexer.nextToken();\n      key=parse();\n      isObjectKey=true;\n    }\n else {\n      if (!isEnabled(Feature.AllowUnQuotedFieldNames)) {\n        throw new JSONException(\"syntax error\");\n      }\n      key=lexer.scanSymbolUnQuoted(symbolTable);\n      lexer.skipWhitespace();\n      ch=lexer.getCurrent();\n      if (ch != ':') {\n        throw new JSONException(\"expect ':' at \" + lexer.pos() + \", actual \"+ ch);\n      }\n    }\n    if (!isObjectKey) {\n      lexer.next();\n      lexer.skipWhitespace();\n    }\n    ch=lexer.getCurrent();\n    lexer.resetStringPosition();\n    if (key == JSON.DEFAULT_TYPE_KEY) {\n      String typeName=lexer.scanSymbol(symbolTable,'\"');\n      Class<?> clazz=TypeUtils.loadClass(typeName);\n      if (clazz == null) {\n        object.put(JSON.DEFAULT_TYPE_KEY,typeName);\n        continue;\n      }\n      lexer.nextToken(JSONToken.COMMA);\n      if (lexer.token() == JSONToken.RBRACE) {\n        lexer.nextToken(JSONToken.COMMA);\n        try {\n          Object instance=null;\n          ObjectDeserializer deserializer=this.config.getDeserializer(clazz);\n          if (deserializer instanceof ASMJavaBeanDeserializer) {\n            instance=((ASMJavaBeanDeserializer)deserializer).createInstance(this,clazz);\n          }\n else           if (deserializer instanceof JavaBeanDeserializer) {\n            instance=((JavaBeanDeserializer)deserializer).createInstance(this,clazz);\n          }\n          if (instance == null) {\n            if (clazz == Cloneable.class) {\n              instance=new HashMap();\n            }\n else {\n              instance=clazz.newInstance();\n            }\n          }\n          return instance;\n        }\n catch (        Exception e) {\n          throw new JSONException(\"create instance error\",e);\n        }\n      }\n      this.setResolveStatus(TypeNameRedirect);\n      if (this.context != null && !(fieldName instanceof Integer)) {\n        this.popContext();\n      }\n      ObjectDeserializer deserializer=config.getDeserializer(clazz);\n      return deserializer.deserialze(this,clazz,fieldName);\n    }\n    if (key == \"$ref\") {\n      lexer.nextToken(JSONToken.LITERAL_STRING);\n      if (lexer.token() == JSONToken.LITERAL_STRING) {\n        String ref=lexer.stringVal();\n        lexer.nextToken(JSONToken.RBRACE);\n        Object refValue=null;\n        if (\"@\".equals(ref)) {\n          if (this.getContext() != null) {\n            ParseContext thisContext=this.getContext();\n            Object thisObj=thisContext.getObject();\n            if (thisObj instanceof Object[] || thisObj instanceof Collection<?>) {\n              refValue=thisObj;\n            }\n else             if (thisContext.getParentContext() != null) {\n              refValue=thisContext.getParentContext().getObject();\n            }\n          }\n        }\n else         if (\"..\".equals(ref)) {\n          ParseContext parentContext=context.getParentContext();\n          if (parentContext.getObject() != null) {\n            refValue=parentContext.getObject();\n          }\n else {\n            addResolveTask(new ResolveTask(parentContext,ref));\n            setResolveStatus(DefaultJSONParser.NeedToResolve);\n          }\n        }\n else         if (\"$\".equals(ref)) {\n          ParseContext rootContext=context;\n          while (rootContext.getParentContext() != null) {\n            rootContext=rootContext.getParentContext();\n          }\n          if (rootContext.getObject() != null) {\n            refValue=rootContext.getObject();\n          }\n else {\n            addResolveTask(new ResolveTask(rootContext,ref));\n            setResolveStatus(DefaultJSONParser.NeedToResolve);\n          }\n        }\n else {\n          addResolveTask(new ResolveTask(context,ref));\n          setResolveStatus(DefaultJSONParser.NeedToResolve);\n        }\n        if (lexer.token() != JSONToken.RBRACE) {\n          throw new JSONException(\"syntax error\");\n        }\n        lexer.nextToken(JSONToken.COMMA);\n        return refValue;\n      }\n else {\n        throw new JSONException(\"illegal ref, \" + JSONToken.name(lexer.token()));\n      }\n    }\n    if (!setContextFlag) {\n      setContext(object,fieldName);\n      setContextFlag=true;\n      if (this.context != null && !(fieldName instanceof Integer)) {\n        this.popContext();\n      }\n    }\n    if (object.getClass() == JSONObject.class) {\n      key=(key == null) ? \"null\" : key.toString();\n    }\n    Object value;\n    if (ch == '\"') {\n      lexer.scanString();\n      String strValue=lexer.stringVal();\n      value=strValue;\n      if (lexer.isEnabled(Feature.AllowISO8601DateFormat)) {\n        JSONScanner iso8601Lexer=new JSONScanner(strValue);\n        if (iso8601Lexer.scanISO8601DateIfMatch()) {\n          value=iso8601Lexer.getCalendar().getTime();\n        }\n        iso8601Lexer.close();\n      }\n      object.put(key,value);\n    }\n else     if (ch >= '0' && ch <= '9' || ch == '-') {\n      lexer.scanNumber();\n      if (lexer.token() == JSONToken.LITERAL_INT) {\n        value=lexer.integerValue();\n      }\n else {\n        value=lexer.decimalValue(isEnabled(Feature.UseBigDecimal));\n      }\n      object.put(key,value);\n    }\n else     if (ch == '[') {\n      lexer.nextToken();\n      JSONArray list=new JSONArray();\n      this.parseArray(list,key);\n      value=list;\n      object.put(key,value);\n      if (lexer.token() == JSONToken.RBRACE) {\n        lexer.nextToken();\n        return object;\n      }\n else       if (lexer.token() == JSONToken.COMMA) {\n        continue;\n      }\n else {\n        throw new JSONException(\"syntax error\");\n      }\n    }\n else     if (ch == '{') {\n      lexer.nextToken();\n      final boolean parentIsArray=fieldName != null && fieldName.getClass() == Integer.class;\n      JSONObject input=new JSONObject();\n      ParseContext ctxLocal=null;\n      if (!parentIsArray) {\n        ctxLocal=setContext(context,input,key);\n      }\n      Object obj=this.parseObject(input,key);\n      if (ctxLocal != null && input != obj) {\n        ctxLocal.setObject(object);\n      }\n      checkMapResolve(object,key.toString());\n      if (object.getClass() == JSONObject.class) {\n        object.put(key.toString(),obj);\n      }\n else {\n        object.put(key,obj);\n      }\n      if (parentIsArray) {\n        setContext(context,obj,key);\n      }\n      if (lexer.token() == JSONToken.RBRACE) {\n        lexer.nextToken();\n        setContext(context);\n        return object;\n      }\n else       if (lexer.token() == JSONToken.COMMA) {\n        continue;\n      }\n else {\n        throw new JSONException(\"syntax error, \" + lexer.tokenName());\n      }\n    }\n else {\n      lexer.nextToken();\n      value=parse();\n      if (object.getClass() == JSONObject.class) {\n        key=key.toString();\n      }\n      object.put(key,value);\n      if (lexer.token() == JSONToken.RBRACE) {\n        lexer.nextToken();\n        return object;\n      }\n else       if (lexer.token() == JSONToken.COMMA) {\n        continue;\n      }\n else {\n        throw new JSONException(\"syntax error, position at \" + lexer.pos() + \", name \"+ key);\n      }\n    }\n    lexer.skipWhitespace();\n    ch=lexer.getCurrent();\n    if (ch == ',') {\n      lexer.next();\n      continue;\n    }\n else     if (ch == '}') {\n      lexer.next();\n      lexer.resetStringPosition();\n      lexer.nextToken();\n      this.setContext(object,fieldName);\n      return object;\n    }\n else {\n      throw new JSONException(\"syntax error, position at \" + lexer.pos() + \", name \"+ key);\n    }\n  }\n}\n  finally {\n  this.setContext(context);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 1308,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 13940,
        "startLineNumber" : 191,
        "startColumnNumber" : 72,
        "endLineNumber" : 510,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final JSONLexer lexer=this.lexer;\n  if (lexer.token() != JSONToken.LBRACE && lexer.token() != JSONToken.COMMA) {\n    throw new JSONException(\"syntax error, expect {, actual \" + lexer.tokenName());\n  }\n  ParseContext context=this.getContext();\n  try {\n    boolean setContextFlag=false;\n    for (; ; ) {\n      lexer.skipWhitespace();\n      char ch=lexer.getCurrent();\n      if (isEnabled(Feature.AllowArbitraryCommas)) {\n        while (ch == ',') {\n          lexer.next();\n          lexer.skipWhitespace();\n          ch=lexer.getCurrent();\n        }\n      }\n      boolean isObjectKey=false;\n      Object key;\n      if (ch == '\"') {\n        key=lexer.scanSymbol(symbolTable,'\"');\n        lexer.skipWhitespace();\n        ch=lexer.getCurrent();\n        if (ch != ':') {\n          throw new JSONException(\"expect ':' at \" + lexer.pos() + \", name \"+ key);\n        }\n      }\n else       if (ch == '}') {\n        lexer.next();\n        lexer.resetStringPosition();\n        lexer.nextToken();\n        return object;\n      }\n else       if (ch == '\\'') {\n        if (!isEnabled(Feature.AllowSingleQuotes)) {\n          throw new JSONException(\"syntax error\");\n        }\n        key=lexer.scanSymbol(symbolTable,'\\'');\n        lexer.skipWhitespace();\n        ch=lexer.getCurrent();\n        if (ch != ':') {\n          throw new JSONException(\"expect ':' at \" + lexer.pos());\n        }\n      }\n else       if (ch == EOI) {\n        throw new JSONException(\"syntax error\");\n      }\n else       if (ch == ',') {\n        throw new JSONException(\"syntax error\");\n      }\n else       if ((ch >= '0' && ch <= '9') || ch == '-') {\n        lexer.resetStringPosition();\n        lexer.scanNumber();\n        if (lexer.token() == JSONToken.LITERAL_INT) {\n          key=lexer.integerValue();\n        }\n else {\n          key=lexer.decimalValue(true);\n        }\n        ch=lexer.getCurrent();\n        if (ch != ':') {\n          throw new JSONException(\"expect ':' at \" + lexer.pos() + \", name \"+ key);\n        }\n      }\n else       if (ch == '{' || ch == '[') {\n        lexer.nextToken();\n        key=parse();\n        isObjectKey=true;\n      }\n else {\n        if (!isEnabled(Feature.AllowUnQuotedFieldNames)) {\n          throw new JSONException(\"syntax error\");\n        }\n        key=lexer.scanSymbolUnQuoted(symbolTable);\n        lexer.skipWhitespace();\n        ch=lexer.getCurrent();\n        if (ch != ':') {\n          throw new JSONException(\"expect ':' at \" + lexer.pos() + \", actual \"+ ch);\n        }\n      }\n      if (!isObjectKey) {\n        lexer.next();\n        lexer.skipWhitespace();\n      }\n      ch=lexer.getCurrent();\n      lexer.resetStringPosition();\n      if (key == JSON.DEFAULT_TYPE_KEY) {\n        String typeName=lexer.scanSymbol(symbolTable,'\"');\n        Class<?> clazz=TypeUtils.loadClass(typeName);\n        if (clazz == null) {\n          object.put(JSON.DEFAULT_TYPE_KEY,typeName);\n          continue;\n        }\n        lexer.nextToken(JSONToken.COMMA);\n        if (lexer.token() == JSONToken.RBRACE) {\n          lexer.nextToken(JSONToken.COMMA);\n          try {\n            Object instance=null;\n            ObjectDeserializer deserializer=this.config.getDeserializer(clazz);\n            if (deserializer instanceof ASMJavaBeanDeserializer) {\n              instance=((ASMJavaBeanDeserializer)deserializer).createInstance(this,clazz);\n            }\n else             if (deserializer instanceof JavaBeanDeserializer) {\n              instance=((JavaBeanDeserializer)deserializer).createInstance(this,clazz);\n            }\n            if (instance == null) {\n              if (clazz == Cloneable.class) {\n                instance=new HashMap();\n              }\n else {\n                instance=clazz.newInstance();\n              }\n            }\n            return instance;\n          }\n catch (          Exception e) {\n            throw new JSONException(\"create instance error\",e);\n          }\n        }\n        this.setResolveStatus(TypeNameRedirect);\n        if (this.context != null && !(fieldName instanceof Integer)) {\n          this.popContext();\n        }\n        ObjectDeserializer deserializer=config.getDeserializer(clazz);\n        return deserializer.deserialze(this,clazz,fieldName);\n      }\n      if (key == \"$ref\") {\n        lexer.nextToken(JSONToken.LITERAL_STRING);\n        if (lexer.token() == JSONToken.LITERAL_STRING) {\n          String ref=lexer.stringVal();\n          lexer.nextToken(JSONToken.RBRACE);\n          Object refValue=null;\n          if (\"@\".equals(ref)) {\n            if (this.getContext() != null) {\n              ParseContext thisContext=this.getContext();\n              Object thisObj=thisContext.getObject();\n              if (thisObj instanceof Object[] || thisObj instanceof Collection<?>) {\n                refValue=thisObj;\n              }\n else               if (thisContext.getParentContext() != null) {\n                refValue=thisContext.getParentContext().getObject();\n              }\n            }\n          }\n else           if (\"..\".equals(ref)) {\n            ParseContext parentContext=context.getParentContext();\n            if (parentContext.getObject() != null) {\n              refValue=parentContext.getObject();\n            }\n else {\n              addResolveTask(new ResolveTask(parentContext,ref));\n              setResolveStatus(DefaultJSONParser.NeedToResolve);\n            }\n          }\n else           if (\"$\".equals(ref)) {\n            ParseContext rootContext=context;\n            while (rootContext.getParentContext() != null) {\n              rootContext=rootContext.getParentContext();\n            }\n            if (rootContext.getObject() != null) {\n              refValue=rootContext.getObject();\n            }\n else {\n              addResolveTask(new ResolveTask(rootContext,ref));\n              setResolveStatus(DefaultJSONParser.NeedToResolve);\n            }\n          }\n else {\n            addResolveTask(new ResolveTask(context,ref));\n            setResolveStatus(DefaultJSONParser.NeedToResolve);\n          }\n          if (lexer.token() != JSONToken.RBRACE) {\n            throw new JSONException(\"syntax error\");\n          }\n          lexer.nextToken(JSONToken.COMMA);\n          return refValue;\n        }\n else {\n          throw new JSONException(\"illegal ref, \" + JSONToken.name(lexer.token()));\n        }\n      }\n      if (!setContextFlag) {\n        setContext(object,fieldName);\n        setContextFlag=true;\n        if (this.context != null && !(fieldName instanceof Integer)) {\n          this.popContext();\n        }\n      }\n      if (object.getClass() == JSONObject.class) {\n        key=(key == null) ? \"null\" : key.toString();\n      }\n      Object value;\n      if (ch == '\"') {\n        lexer.scanString();\n        String strValue=lexer.stringVal();\n        value=strValue;\n        if (lexer.isEnabled(Feature.AllowISO8601DateFormat)) {\n          JSONScanner iso8601Lexer=new JSONScanner(strValue);\n          if (iso8601Lexer.scanISO8601DateIfMatch()) {\n            value=iso8601Lexer.getCalendar().getTime();\n          }\n          iso8601Lexer.close();\n        }\n        object.put(key,value);\n      }\n else       if (ch >= '0' && ch <= '9' || ch == '-') {\n        lexer.scanNumber();\n        if (lexer.token() == JSONToken.LITERAL_INT) {\n          value=lexer.integerValue();\n        }\n else {\n          value=lexer.decimalValue(isEnabled(Feature.UseBigDecimal));\n        }\n        object.put(key,value);\n      }\n else       if (ch == '[') {\n        lexer.nextToken();\n        JSONArray list=new JSONArray();\n        this.parseArray(list,key);\n        value=list;\n        object.put(key,value);\n        if (lexer.token() == JSONToken.RBRACE) {\n          lexer.nextToken();\n          return object;\n        }\n else         if (lexer.token() == JSONToken.COMMA) {\n          continue;\n        }\n else {\n          throw new JSONException(\"syntax error\");\n        }\n      }\n else       if (ch == '{') {\n        lexer.nextToken();\n        final boolean parentIsArray=fieldName != null && fieldName.getClass() == Integer.class;\n        JSONObject input=new JSONObject();\n        ParseContext ctxLocal=null;\n        if (!parentIsArray) {\n          ctxLocal=setContext(context,input,key);\n        }\n        Object obj=this.parseObject(input,key);\n        if (ctxLocal != null && input != obj) {\n          ctxLocal.setObject(object);\n        }\n        checkMapResolve(object,key.toString());\n        if (object.getClass() == JSONObject.class) {\n          object.put(key.toString(),obj);\n        }\n else {\n          object.put(key,obj);\n        }\n        if (parentIsArray) {\n          setContext(context,obj,key);\n        }\n        if (lexer.token() == JSONToken.RBRACE) {\n          lexer.nextToken();\n          setContext(context);\n          return object;\n        }\n else         if (lexer.token() == JSONToken.COMMA) {\n          continue;\n        }\n else {\n          throw new JSONException(\"syntax error, \" + lexer.tokenName());\n        }\n      }\n else {\n        lexer.nextToken();\n        value=parse();\n        if (object.getClass() == JSONObject.class) {\n          key=key.toString();\n        }\n        object.put(key,value);\n        if (lexer.token() == JSONToken.RBRACE) {\n          lexer.nextToken();\n          return object;\n        }\n else         if (lexer.token() == JSONToken.COMMA) {\n          continue;\n        }\n else {\n          throw new JSONException(\"syntax error, position at \" + lexer.pos() + \", name \"+ key);\n        }\n      }\n      lexer.skipWhitespace();\n      ch=lexer.getCurrent();\n      if (ch == ',') {\n        lexer.next();\n        continue;\n      }\n else       if (ch == '}') {\n        lexer.next();\n        lexer.resetStringPosition();\n        lexer.nextToken();\n        this.setContext(object,fieldName);\n        return object;\n      }\n else {\n        throw new JSONException(\"syntax error, position at \" + lexer.pos() + \", name \"+ key);\n      }\n    }\n  }\n  finally {\n    this.setContext(context);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1352,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 14060,
        "startLineNumber" : 190,
        "startColumnNumber" : 4,
        "endLineNumber" : 510,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@SuppressWarnings({\"unchecked\",\"rawtypes\"}) public final Object parseObject(final Map object,Object fieldName){\n  final JSONLexer lexer=this.lexer;\n  if (lexer.token() != JSONToken.LBRACE && lexer.token() != JSONToken.COMMA) {\n    throw new JSONException(\"syntax error, expect {, actual \" + lexer.tokenName());\n  }\n  ParseContext context=this.getContext();\n  try {\n    boolean setContextFlag=false;\n    for (; ; ) {\n      lexer.skipWhitespace();\n      char ch=lexer.getCurrent();\n      if (isEnabled(Feature.AllowArbitraryCommas)) {\n        while (ch == ',') {\n          lexer.next();\n          lexer.skipWhitespace();\n          ch=lexer.getCurrent();\n        }\n      }\n      boolean isObjectKey=false;\n      Object key;\n      if (ch == '\"') {\n        key=lexer.scanSymbol(symbolTable,'\"');\n        lexer.skipWhitespace();\n        ch=lexer.getCurrent();\n        if (ch != ':') {\n          throw new JSONException(\"expect ':' at \" + lexer.pos() + \", name \"+ key);\n        }\n      }\n else       if (ch == '}') {\n        lexer.next();\n        lexer.resetStringPosition();\n        lexer.nextToken();\n        return object;\n      }\n else       if (ch == '\\'') {\n        if (!isEnabled(Feature.AllowSingleQuotes)) {\n          throw new JSONException(\"syntax error\");\n        }\n        key=lexer.scanSymbol(symbolTable,'\\'');\n        lexer.skipWhitespace();\n        ch=lexer.getCurrent();\n        if (ch != ':') {\n          throw new JSONException(\"expect ':' at \" + lexer.pos());\n        }\n      }\n else       if (ch == EOI) {\n        throw new JSONException(\"syntax error\");\n      }\n else       if (ch == ',') {\n        throw new JSONException(\"syntax error\");\n      }\n else       if ((ch >= '0' && ch <= '9') || ch == '-') {\n        lexer.resetStringPosition();\n        lexer.scanNumber();\n        if (lexer.token() == JSONToken.LITERAL_INT) {\n          key=lexer.integerValue();\n        }\n else {\n          key=lexer.decimalValue(true);\n        }\n        ch=lexer.getCurrent();\n        if (ch != ':') {\n          throw new JSONException(\"expect ':' at \" + lexer.pos() + \", name \"+ key);\n        }\n      }\n else       if (ch == '{' || ch == '[') {\n        lexer.nextToken();\n        key=parse();\n        isObjectKey=true;\n      }\n else {\n        if (!isEnabled(Feature.AllowUnQuotedFieldNames)) {\n          throw new JSONException(\"syntax error\");\n        }\n        key=lexer.scanSymbolUnQuoted(symbolTable);\n        lexer.skipWhitespace();\n        ch=lexer.getCurrent();\n        if (ch != ':') {\n          throw new JSONException(\"expect ':' at \" + lexer.pos() + \", actual \"+ ch);\n        }\n      }\n      if (!isObjectKey) {\n        lexer.next();\n        lexer.skipWhitespace();\n      }\n      ch=lexer.getCurrent();\n      lexer.resetStringPosition();\n      if (key == JSON.DEFAULT_TYPE_KEY) {\n        String typeName=lexer.scanSymbol(symbolTable,'\"');\n        Class<?> clazz=TypeUtils.loadClass(typeName);\n        if (clazz == null) {\n          object.put(JSON.DEFAULT_TYPE_KEY,typeName);\n          continue;\n        }\n        lexer.nextToken(JSONToken.COMMA);\n        if (lexer.token() == JSONToken.RBRACE) {\n          lexer.nextToken(JSONToken.COMMA);\n          try {\n            Object instance=null;\n            ObjectDeserializer deserializer=this.config.getDeserializer(clazz);\n            if (deserializer instanceof ASMJavaBeanDeserializer) {\n              instance=((ASMJavaBeanDeserializer)deserializer).createInstance(this,clazz);\n            }\n else             if (deserializer instanceof JavaBeanDeserializer) {\n              instance=((JavaBeanDeserializer)deserializer).createInstance(this,clazz);\n            }\n            if (instance == null) {\n              if (clazz == Cloneable.class) {\n                instance=new HashMap();\n              }\n else {\n                instance=clazz.newInstance();\n              }\n            }\n            return instance;\n          }\n catch (          Exception e) {\n            throw new JSONException(\"create instance error\",e);\n          }\n        }\n        this.setResolveStatus(TypeNameRedirect);\n        if (this.context != null && !(fieldName instanceof Integer)) {\n          this.popContext();\n        }\n        ObjectDeserializer deserializer=config.getDeserializer(clazz);\n        return deserializer.deserialze(this,clazz,fieldName);\n      }\n      if (key == \"$ref\") {\n        lexer.nextToken(JSONToken.LITERAL_STRING);\n        if (lexer.token() == JSONToken.LITERAL_STRING) {\n          String ref=lexer.stringVal();\n          lexer.nextToken(JSONToken.RBRACE);\n          Object refValue=null;\n          if (\"@\".equals(ref)) {\n            if (this.getContext() != null) {\n              ParseContext thisContext=this.getContext();\n              Object thisObj=thisContext.getObject();\n              if (thisObj instanceof Object[] || thisObj instanceof Collection<?>) {\n                refValue=thisObj;\n              }\n else               if (thisContext.getParentContext() != null) {\n                refValue=thisContext.getParentContext().getObject();\n              }\n            }\n          }\n else           if (\"..\".equals(ref)) {\n            ParseContext parentContext=context.getParentContext();\n            if (parentContext.getObject() != null) {\n              refValue=parentContext.getObject();\n            }\n else {\n              addResolveTask(new ResolveTask(parentContext,ref));\n              setResolveStatus(DefaultJSONParser.NeedToResolve);\n            }\n          }\n else           if (\"$\".equals(ref)) {\n            ParseContext rootContext=context;\n            while (rootContext.getParentContext() != null) {\n              rootContext=rootContext.getParentContext();\n            }\n            if (rootContext.getObject() != null) {\n              refValue=rootContext.getObject();\n            }\n else {\n              addResolveTask(new ResolveTask(rootContext,ref));\n              setResolveStatus(DefaultJSONParser.NeedToResolve);\n            }\n          }\n else {\n            addResolveTask(new ResolveTask(context,ref));\n            setResolveStatus(DefaultJSONParser.NeedToResolve);\n          }\n          if (lexer.token() != JSONToken.RBRACE) {\n            throw new JSONException(\"syntax error\");\n          }\n          lexer.nextToken(JSONToken.COMMA);\n          return refValue;\n        }\n else {\n          throw new JSONException(\"illegal ref, \" + JSONToken.name(lexer.token()));\n        }\n      }\n      if (!setContextFlag) {\n        setContext(object,fieldName);\n        setContextFlag=true;\n        if (this.context != null && !(fieldName instanceof Integer)) {\n          this.popContext();\n        }\n      }\n      if (object.getClass() == JSONObject.class) {\n        key=(key == null) ? \"null\" : key.toString();\n      }\n      Object value;\n      if (ch == '\"') {\n        lexer.scanString();\n        String strValue=lexer.stringVal();\n        value=strValue;\n        if (lexer.isEnabled(Feature.AllowISO8601DateFormat)) {\n          JSONScanner iso8601Lexer=new JSONScanner(strValue);\n          if (iso8601Lexer.scanISO8601DateIfMatch()) {\n            value=iso8601Lexer.getCalendar().getTime();\n          }\n          iso8601Lexer.close();\n        }\n        object.put(key,value);\n      }\n else       if (ch >= '0' && ch <= '9' || ch == '-') {\n        lexer.scanNumber();\n        if (lexer.token() == JSONToken.LITERAL_INT) {\n          value=lexer.integerValue();\n        }\n else {\n          value=lexer.decimalValue(isEnabled(Feature.UseBigDecimal));\n        }\n        object.put(key,value);\n      }\n else       if (ch == '[') {\n        lexer.nextToken();\n        JSONArray list=new JSONArray();\n        this.parseArray(list,key);\n        value=list;\n        object.put(key,value);\n        if (lexer.token() == JSONToken.RBRACE) {\n          lexer.nextToken();\n          return object;\n        }\n else         if (lexer.token() == JSONToken.COMMA) {\n          continue;\n        }\n else {\n          throw new JSONException(\"syntax error\");\n        }\n      }\n else       if (ch == '{') {\n        lexer.nextToken();\n        final boolean parentIsArray=fieldName != null && fieldName.getClass() == Integer.class;\n        JSONObject input=new JSONObject();\n        ParseContext ctxLocal=null;\n        if (!parentIsArray) {\n          ctxLocal=setContext(context,input,key);\n        }\n        Object obj=this.parseObject(input,key);\n        if (ctxLocal != null && input != obj) {\n          ctxLocal.setObject(object);\n        }\n        checkMapResolve(object,key.toString());\n        if (object.getClass() == JSONObject.class) {\n          object.put(key.toString(),obj);\n        }\n else {\n          object.put(key,obj);\n        }\n        if (parentIsArray) {\n          setContext(context,obj,key);\n        }\n        if (lexer.token() == JSONToken.RBRACE) {\n          lexer.nextToken();\n          setContext(context);\n          return object;\n        }\n else         if (lexer.token() == JSONToken.COMMA) {\n          continue;\n        }\n else {\n          throw new JSONException(\"syntax error, \" + lexer.tokenName());\n        }\n      }\n else {\n        lexer.nextToken();\n        value=parse();\n        if (object.getClass() == JSONObject.class) {\n          key=key.toString();\n        }\n        object.put(key,value);\n        if (lexer.token() == JSONToken.RBRACE) {\n          lexer.nextToken();\n          return object;\n        }\n else         if (lexer.token() == JSONToken.COMMA) {\n          continue;\n        }\n else {\n          throw new JSONException(\"syntax error, position at \" + lexer.pos() + \", name \"+ key);\n        }\n      }\n      lexer.skipWhitespace();\n      ch=lexer.getCurrent();\n      if (ch == ',') {\n        lexer.next();\n        continue;\n      }\n else       if (ch == '}') {\n        lexer.next();\n        lexer.resetStringPosition();\n        lexer.nextToken();\n        this.setContext(object,fieldName);\n        return object;\n      }\n else {\n        throw new JSONException(\"syntax error, position at \" + lexer.pos() + \", name \"+ key);\n      }\n    }\n  }\n  finally {\n    this.setContext(context);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1372,
      "astHeight" : 22
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 258,
        "startColumnNumber" : 24,
        "endLineNumber" : 258,
        "endColumnNumber" : 67
      },
      "nodeContext" : "!isEnabled(Feature.AllowUnQuotedFieldNames)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.alibaba.fastjson.parser.Feature"
  }, {
    "nodeContext" : "Feature",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 397,
      "startColumnNumber" : 40,
      "endLineNumber" : 397,
      "endColumnNumber" : 47
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 397,
        "startColumnNumber" : 40,
        "endLineNumber" : 397,
        "endColumnNumber" : 70
      },
      "nodeContext" : "Feature.AllowISO8601DateFormat",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 397,
        "startColumnNumber" : 24,
        "endLineNumber" : 397,
        "endColumnNumber" : 71
      },
      "nodeContext" : "lexer.isEnabled(Feature.AllowISO8601DateFormat)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 375,
        "startLineNumber" : 397,
        "startColumnNumber" : 20,
        "endLineNumber" : 403,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (lexer.isEnabled(Feature.AllowISO8601DateFormat)) {\n  JSONScanner iso8601Lexer=new JSONScanner(strValue);\n  if (iso8601Lexer.scanISO8601DateIfMatch()) {\n    value=iso8601Lexer.getCalendar().getTime();\n  }\n  iso8601Lexer.close();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 34,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 604,
        "startLineNumber" : 392,
        "startColumnNumber" : 31,
        "endLineNumber" : 406,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  lexer.scanString();\n  String strValue=lexer.stringVal();\n  value=strValue;\n  if (lexer.isEnabled(Feature.AllowISO8601DateFormat)) {\n    JSONScanner iso8601Lexer=new JSONScanner(strValue);\n    if (iso8601Lexer.scanISO8601DateIfMatch()) {\n      value=iso8601Lexer.getCalendar().getTime();\n    }\n    iso8601Lexer.close();\n  }\n  object.put(key,value);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 57,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4048,
        "startLineNumber" : 392,
        "startColumnNumber" : 16,
        "endLineNumber" : 486,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (ch == '\"') {\n  lexer.scanString();\n  String strValue=lexer.stringVal();\n  value=strValue;\n  if (lexer.isEnabled(Feature.AllowISO8601DateFormat)) {\n    JSONScanner iso8601Lexer=new JSONScanner(strValue);\n    if (iso8601Lexer.scanISO8601DateIfMatch()) {\n      value=iso8601Lexer.getCalendar().getTime();\n    }\n    iso8601Lexer.close();\n  }\n  object.put(key,value);\n}\n else if (ch >= '0' && ch <= '9' || ch == '-') {\n  lexer.scanNumber();\n  if (lexer.token() == JSONToken.LITERAL_INT) {\n    value=lexer.integerValue();\n  }\n else {\n    value=lexer.decimalValue(isEnabled(Feature.UseBigDecimal));\n  }\n  object.put(key,value);\n}\n else if (ch == '[') {\n  lexer.nextToken();\n  JSONArray list=new JSONArray();\n  this.parseArray(list,key);\n  value=list;\n  object.put(key,value);\n  if (lexer.token() == JSONToken.RBRACE) {\n    lexer.nextToken();\n    return object;\n  }\n else   if (lexer.token() == JSONToken.COMMA) {\n    continue;\n  }\n else {\n    throw new JSONException(\"syntax error\");\n  }\n}\n else if (ch == '{') {\n  lexer.nextToken();\n  final boolean parentIsArray=fieldName != null && fieldName.getClass() == Integer.class;\n  JSONObject input=new JSONObject();\n  ParseContext ctxLocal=null;\n  if (!parentIsArray) {\n    ctxLocal=setContext(context,input,key);\n  }\n  Object obj=this.parseObject(input,key);\n  if (ctxLocal != null && input != obj) {\n    ctxLocal.setObject(object);\n  }\n  checkMapResolve(object,key.toString());\n  if (object.getClass() == JSONObject.class) {\n    object.put(key.toString(),obj);\n  }\n else {\n    object.put(key,obj);\n  }\n  if (parentIsArray) {\n    setContext(context,obj,key);\n  }\n  if (lexer.token() == JSONToken.RBRACE) {\n    lexer.nextToken();\n    setContext(context);\n    return object;\n  }\n else   if (lexer.token() == JSONToken.COMMA) {\n    continue;\n  }\n else {\n    throw new JSONException(\"syntax error, \" + lexer.tokenName());\n  }\n}\n else {\n  lexer.nextToken();\n  value=parse();\n  if (object.getClass() == JSONObject.class) {\n    key=key.toString();\n  }\n  object.put(key,value);\n  if (lexer.token() == JSONToken.RBRACE) {\n    lexer.nextToken();\n    return object;\n  }\n else   if (lexer.token() == JSONToken.COMMA) {\n    continue;\n  }\n else {\n    throw new JSONException(\"syntax error, position at \" + lexer.pos() + \", name \"+ key);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 397,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 13486,
        "startLineNumber" : 201,
        "startColumnNumber" : 21,
        "endLineNumber" : 505,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  lexer.skipWhitespace();\n  char ch=lexer.getCurrent();\n  if (isEnabled(Feature.AllowArbitraryCommas)) {\n    while (ch == ',') {\n      lexer.next();\n      lexer.skipWhitespace();\n      ch=lexer.getCurrent();\n    }\n  }\n  boolean isObjectKey=false;\n  Object key;\n  if (ch == '\"') {\n    key=lexer.scanSymbol(symbolTable,'\"');\n    lexer.skipWhitespace();\n    ch=lexer.getCurrent();\n    if (ch != ':') {\n      throw new JSONException(\"expect ':' at \" + lexer.pos() + \", name \"+ key);\n    }\n  }\n else   if (ch == '}') {\n    lexer.next();\n    lexer.resetStringPosition();\n    lexer.nextToken();\n    return object;\n  }\n else   if (ch == '\\'') {\n    if (!isEnabled(Feature.AllowSingleQuotes)) {\n      throw new JSONException(\"syntax error\");\n    }\n    key=lexer.scanSymbol(symbolTable,'\\'');\n    lexer.skipWhitespace();\n    ch=lexer.getCurrent();\n    if (ch != ':') {\n      throw new JSONException(\"expect ':' at \" + lexer.pos());\n    }\n  }\n else   if (ch == EOI) {\n    throw new JSONException(\"syntax error\");\n  }\n else   if (ch == ',') {\n    throw new JSONException(\"syntax error\");\n  }\n else   if ((ch >= '0' && ch <= '9') || ch == '-') {\n    lexer.resetStringPosition();\n    lexer.scanNumber();\n    if (lexer.token() == JSONToken.LITERAL_INT) {\n      key=lexer.integerValue();\n    }\n else {\n      key=lexer.decimalValue(true);\n    }\n    ch=lexer.getCurrent();\n    if (ch != ':') {\n      throw new JSONException(\"expect ':' at \" + lexer.pos() + \", name \"+ key);\n    }\n  }\n else   if (ch == '{' || ch == '[') {\n    lexer.nextToken();\n    key=parse();\n    isObjectKey=true;\n  }\n else {\n    if (!isEnabled(Feature.AllowUnQuotedFieldNames)) {\n      throw new JSONException(\"syntax error\");\n    }\n    key=lexer.scanSymbolUnQuoted(symbolTable);\n    lexer.skipWhitespace();\n    ch=lexer.getCurrent();\n    if (ch != ':') {\n      throw new JSONException(\"expect ':' at \" + lexer.pos() + \", actual \"+ ch);\n    }\n  }\n  if (!isObjectKey) {\n    lexer.next();\n    lexer.skipWhitespace();\n  }\n  ch=lexer.getCurrent();\n  lexer.resetStringPosition();\n  if (key == JSON.DEFAULT_TYPE_KEY) {\n    String typeName=lexer.scanSymbol(symbolTable,'\"');\n    Class<?> clazz=TypeUtils.loadClass(typeName);\n    if (clazz == null) {\n      object.put(JSON.DEFAULT_TYPE_KEY,typeName);\n      continue;\n    }\n    lexer.nextToken(JSONToken.COMMA);\n    if (lexer.token() == JSONToken.RBRACE) {\n      lexer.nextToken(JSONToken.COMMA);\n      try {\n        Object instance=null;\n        ObjectDeserializer deserializer=this.config.getDeserializer(clazz);\n        if (deserializer instanceof ASMJavaBeanDeserializer) {\n          instance=((ASMJavaBeanDeserializer)deserializer).createInstance(this,clazz);\n        }\n else         if (deserializer instanceof JavaBeanDeserializer) {\n          instance=((JavaBeanDeserializer)deserializer).createInstance(this,clazz);\n        }\n        if (instance == null) {\n          if (clazz == Cloneable.class) {\n            instance=new HashMap();\n          }\n else {\n            instance=clazz.newInstance();\n          }\n        }\n        return instance;\n      }\n catch (      Exception e) {\n        throw new JSONException(\"create instance error\",e);\n      }\n    }\n    this.setResolveStatus(TypeNameRedirect);\n    if (this.context != null && !(fieldName instanceof Integer)) {\n      this.popContext();\n    }\n    ObjectDeserializer deserializer=config.getDeserializer(clazz);\n    return deserializer.deserialze(this,clazz,fieldName);\n  }\n  if (key == \"$ref\") {\n    lexer.nextToken(JSONToken.LITERAL_STRING);\n    if (lexer.token() == JSONToken.LITERAL_STRING) {\n      String ref=lexer.stringVal();\n      lexer.nextToken(JSONToken.RBRACE);\n      Object refValue=null;\n      if (\"@\".equals(ref)) {\n        if (this.getContext() != null) {\n          ParseContext thisContext=this.getContext();\n          Object thisObj=thisContext.getObject();\n          if (thisObj instanceof Object[] || thisObj instanceof Collection<?>) {\n            refValue=thisObj;\n          }\n else           if (thisContext.getParentContext() != null) {\n            refValue=thisContext.getParentContext().getObject();\n          }\n        }\n      }\n else       if (\"..\".equals(ref)) {\n        ParseContext parentContext=context.getParentContext();\n        if (parentContext.getObject() != null) {\n          refValue=parentContext.getObject();\n        }\n else {\n          addResolveTask(new ResolveTask(parentContext,ref));\n          setResolveStatus(DefaultJSONParser.NeedToResolve);\n        }\n      }\n else       if (\"$\".equals(ref)) {\n        ParseContext rootContext=context;\n        while (rootContext.getParentContext() != null) {\n          rootContext=rootContext.getParentContext();\n        }\n        if (rootContext.getObject() != null) {\n          refValue=rootContext.getObject();\n        }\n else {\n          addResolveTask(new ResolveTask(rootContext,ref));\n          setResolveStatus(DefaultJSONParser.NeedToResolve);\n        }\n      }\n else {\n        addResolveTask(new ResolveTask(context,ref));\n        setResolveStatus(DefaultJSONParser.NeedToResolve);\n      }\n      if (lexer.token() != JSONToken.RBRACE) {\n        throw new JSONException(\"syntax error\");\n      }\n      lexer.nextToken(JSONToken.COMMA);\n      return refValue;\n    }\n else {\n      throw new JSONException(\"illegal ref, \" + JSONToken.name(lexer.token()));\n    }\n  }\n  if (!setContextFlag) {\n    setContext(object,fieldName);\n    setContextFlag=true;\n    if (this.context != null && !(fieldName instanceof Integer)) {\n      this.popContext();\n    }\n  }\n  if (object.getClass() == JSONObject.class) {\n    key=(key == null) ? \"null\" : key.toString();\n  }\n  Object value;\n  if (ch == '\"') {\n    lexer.scanString();\n    String strValue=lexer.stringVal();\n    value=strValue;\n    if (lexer.isEnabled(Feature.AllowISO8601DateFormat)) {\n      JSONScanner iso8601Lexer=new JSONScanner(strValue);\n      if (iso8601Lexer.scanISO8601DateIfMatch()) {\n        value=iso8601Lexer.getCalendar().getTime();\n      }\n      iso8601Lexer.close();\n    }\n    object.put(key,value);\n  }\n else   if (ch >= '0' && ch <= '9' || ch == '-') {\n    lexer.scanNumber();\n    if (lexer.token() == JSONToken.LITERAL_INT) {\n      value=lexer.integerValue();\n    }\n else {\n      value=lexer.decimalValue(isEnabled(Feature.UseBigDecimal));\n    }\n    object.put(key,value);\n  }\n else   if (ch == '[') {\n    lexer.nextToken();\n    JSONArray list=new JSONArray();\n    this.parseArray(list,key);\n    value=list;\n    object.put(key,value);\n    if (lexer.token() == JSONToken.RBRACE) {\n      lexer.nextToken();\n      return object;\n    }\n else     if (lexer.token() == JSONToken.COMMA) {\n      continue;\n    }\n else {\n      throw new JSONException(\"syntax error\");\n    }\n  }\n else   if (ch == '{') {\n    lexer.nextToken();\n    final boolean parentIsArray=fieldName != null && fieldName.getClass() == Integer.class;\n    JSONObject input=new JSONObject();\n    ParseContext ctxLocal=null;\n    if (!parentIsArray) {\n      ctxLocal=setContext(context,input,key);\n    }\n    Object obj=this.parseObject(input,key);\n    if (ctxLocal != null && input != obj) {\n      ctxLocal.setObject(object);\n    }\n    checkMapResolve(object,key.toString());\n    if (object.getClass() == JSONObject.class) {\n      object.put(key.toString(),obj);\n    }\n else {\n      object.put(key,obj);\n    }\n    if (parentIsArray) {\n      setContext(context,obj,key);\n    }\n    if (lexer.token() == JSONToken.RBRACE) {\n      lexer.nextToken();\n      setContext(context);\n      return object;\n    }\n else     if (lexer.token() == JSONToken.COMMA) {\n      continue;\n    }\n else {\n      throw new JSONException(\"syntax error, \" + lexer.tokenName());\n    }\n  }\n else {\n    lexer.nextToken();\n    value=parse();\n    if (object.getClass() == JSONObject.class) {\n      key=key.toString();\n    }\n    object.put(key,value);\n    if (lexer.token() == JSONToken.RBRACE) {\n      lexer.nextToken();\n      return object;\n    }\n else     if (lexer.token() == JSONToken.COMMA) {\n      continue;\n    }\n else {\n      throw new JSONException(\"syntax error, position at \" + lexer.pos() + \", name \"+ key);\n    }\n  }\n  lexer.skipWhitespace();\n  ch=lexer.getCurrent();\n  if (ch == ',') {\n    lexer.next();\n    continue;\n  }\n else   if (ch == '}') {\n    lexer.next();\n    lexer.resetStringPosition();\n    lexer.nextToken();\n    this.setContext(object,fieldName);\n    return object;\n  }\n else {\n    throw new JSONException(\"syntax error, position at \" + lexer.pos() + \", name \"+ key);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1294,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 13495,
        "startLineNumber" : 201,
        "startColumnNumber" : 12,
        "endLineNumber" : 505,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (; ; ) {\n  lexer.skipWhitespace();\n  char ch=lexer.getCurrent();\n  if (isEnabled(Feature.AllowArbitraryCommas)) {\n    while (ch == ',') {\n      lexer.next();\n      lexer.skipWhitespace();\n      ch=lexer.getCurrent();\n    }\n  }\n  boolean isObjectKey=false;\n  Object key;\n  if (ch == '\"') {\n    key=lexer.scanSymbol(symbolTable,'\"');\n    lexer.skipWhitespace();\n    ch=lexer.getCurrent();\n    if (ch != ':') {\n      throw new JSONException(\"expect ':' at \" + lexer.pos() + \", name \"+ key);\n    }\n  }\n else   if (ch == '}') {\n    lexer.next();\n    lexer.resetStringPosition();\n    lexer.nextToken();\n    return object;\n  }\n else   if (ch == '\\'') {\n    if (!isEnabled(Feature.AllowSingleQuotes)) {\n      throw new JSONException(\"syntax error\");\n    }\n    key=lexer.scanSymbol(symbolTable,'\\'');\n    lexer.skipWhitespace();\n    ch=lexer.getCurrent();\n    if (ch != ':') {\n      throw new JSONException(\"expect ':' at \" + lexer.pos());\n    }\n  }\n else   if (ch == EOI) {\n    throw new JSONException(\"syntax error\");\n  }\n else   if (ch == ',') {\n    throw new JSONException(\"syntax error\");\n  }\n else   if ((ch >= '0' && ch <= '9') || ch == '-') {\n    lexer.resetStringPosition();\n    lexer.scanNumber();\n    if (lexer.token() == JSONToken.LITERAL_INT) {\n      key=lexer.integerValue();\n    }\n else {\n      key=lexer.decimalValue(true);\n    }\n    ch=lexer.getCurrent();\n    if (ch != ':') {\n      throw new JSONException(\"expect ':' at \" + lexer.pos() + \", name \"+ key);\n    }\n  }\n else   if (ch == '{' || ch == '[') {\n    lexer.nextToken();\n    key=parse();\n    isObjectKey=true;\n  }\n else {\n    if (!isEnabled(Feature.AllowUnQuotedFieldNames)) {\n      throw new JSONException(\"syntax error\");\n    }\n    key=lexer.scanSymbolUnQuoted(symbolTable);\n    lexer.skipWhitespace();\n    ch=lexer.getCurrent();\n    if (ch != ':') {\n      throw new JSONException(\"expect ':' at \" + lexer.pos() + \", actual \"+ ch);\n    }\n  }\n  if (!isObjectKey) {\n    lexer.next();\n    lexer.skipWhitespace();\n  }\n  ch=lexer.getCurrent();\n  lexer.resetStringPosition();\n  if (key == JSON.DEFAULT_TYPE_KEY) {\n    String typeName=lexer.scanSymbol(symbolTable,'\"');\n    Class<?> clazz=TypeUtils.loadClass(typeName);\n    if (clazz == null) {\n      object.put(JSON.DEFAULT_TYPE_KEY,typeName);\n      continue;\n    }\n    lexer.nextToken(JSONToken.COMMA);\n    if (lexer.token() == JSONToken.RBRACE) {\n      lexer.nextToken(JSONToken.COMMA);\n      try {\n        Object instance=null;\n        ObjectDeserializer deserializer=this.config.getDeserializer(clazz);\n        if (deserializer instanceof ASMJavaBeanDeserializer) {\n          instance=((ASMJavaBeanDeserializer)deserializer).createInstance(this,clazz);\n        }\n else         if (deserializer instanceof JavaBeanDeserializer) {\n          instance=((JavaBeanDeserializer)deserializer).createInstance(this,clazz);\n        }\n        if (instance == null) {\n          if (clazz == Cloneable.class) {\n            instance=new HashMap();\n          }\n else {\n            instance=clazz.newInstance();\n          }\n        }\n        return instance;\n      }\n catch (      Exception e) {\n        throw new JSONException(\"create instance error\",e);\n      }\n    }\n    this.setResolveStatus(TypeNameRedirect);\n    if (this.context != null && !(fieldName instanceof Integer)) {\n      this.popContext();\n    }\n    ObjectDeserializer deserializer=config.getDeserializer(clazz);\n    return deserializer.deserialze(this,clazz,fieldName);\n  }\n  if (key == \"$ref\") {\n    lexer.nextToken(JSONToken.LITERAL_STRING);\n    if (lexer.token() == JSONToken.LITERAL_STRING) {\n      String ref=lexer.stringVal();\n      lexer.nextToken(JSONToken.RBRACE);\n      Object refValue=null;\n      if (\"@\".equals(ref)) {\n        if (this.getContext() != null) {\n          ParseContext thisContext=this.getContext();\n          Object thisObj=thisContext.getObject();\n          if (thisObj instanceof Object[] || thisObj instanceof Collection<?>) {\n            refValue=thisObj;\n          }\n else           if (thisContext.getParentContext() != null) {\n            refValue=thisContext.getParentContext().getObject();\n          }\n        }\n      }\n else       if (\"..\".equals(ref)) {\n        ParseContext parentContext=context.getParentContext();\n        if (parentContext.getObject() != null) {\n          refValue=parentContext.getObject();\n        }\n else {\n          addResolveTask(new ResolveTask(parentContext,ref));\n          setResolveStatus(DefaultJSONParser.NeedToResolve);\n        }\n      }\n else       if (\"$\".equals(ref)) {\n        ParseContext rootContext=context;\n        while (rootContext.getParentContext() != null) {\n          rootContext=rootContext.getParentContext();\n        }\n        if (rootContext.getObject() != null) {\n          refValue=rootContext.getObject();\n        }\n else {\n          addResolveTask(new ResolveTask(rootContext,ref));\n          setResolveStatus(DefaultJSONParser.NeedToResolve);\n        }\n      }\n else {\n        addResolveTask(new ResolveTask(context,ref));\n        setResolveStatus(DefaultJSONParser.NeedToResolve);\n      }\n      if (lexer.token() != JSONToken.RBRACE) {\n        throw new JSONException(\"syntax error\");\n      }\n      lexer.nextToken(JSONToken.COMMA);\n      return refValue;\n    }\n else {\n      throw new JSONException(\"illegal ref, \" + JSONToken.name(lexer.token()));\n    }\n  }\n  if (!setContextFlag) {\n    setContext(object,fieldName);\n    setContextFlag=true;\n    if (this.context != null && !(fieldName instanceof Integer)) {\n      this.popContext();\n    }\n  }\n  if (object.getClass() == JSONObject.class) {\n    key=(key == null) ? \"null\" : key.toString();\n  }\n  Object value;\n  if (ch == '\"') {\n    lexer.scanString();\n    String strValue=lexer.stringVal();\n    value=strValue;\n    if (lexer.isEnabled(Feature.AllowISO8601DateFormat)) {\n      JSONScanner iso8601Lexer=new JSONScanner(strValue);\n      if (iso8601Lexer.scanISO8601DateIfMatch()) {\n        value=iso8601Lexer.getCalendar().getTime();\n      }\n      iso8601Lexer.close();\n    }\n    object.put(key,value);\n  }\n else   if (ch >= '0' && ch <= '9' || ch == '-') {\n    lexer.scanNumber();\n    if (lexer.token() == JSONToken.LITERAL_INT) {\n      value=lexer.integerValue();\n    }\n else {\n      value=lexer.decimalValue(isEnabled(Feature.UseBigDecimal));\n    }\n    object.put(key,value);\n  }\n else   if (ch == '[') {\n    lexer.nextToken();\n    JSONArray list=new JSONArray();\n    this.parseArray(list,key);\n    value=list;\n    object.put(key,value);\n    if (lexer.token() == JSONToken.RBRACE) {\n      lexer.nextToken();\n      return object;\n    }\n else     if (lexer.token() == JSONToken.COMMA) {\n      continue;\n    }\n else {\n      throw new JSONException(\"syntax error\");\n    }\n  }\n else   if (ch == '{') {\n    lexer.nextToken();\n    final boolean parentIsArray=fieldName != null && fieldName.getClass() == Integer.class;\n    JSONObject input=new JSONObject();\n    ParseContext ctxLocal=null;\n    if (!parentIsArray) {\n      ctxLocal=setContext(context,input,key);\n    }\n    Object obj=this.parseObject(input,key);\n    if (ctxLocal != null && input != obj) {\n      ctxLocal.setObject(object);\n    }\n    checkMapResolve(object,key.toString());\n    if (object.getClass() == JSONObject.class) {\n      object.put(key.toString(),obj);\n    }\n else {\n      object.put(key,obj);\n    }\n    if (parentIsArray) {\n      setContext(context,obj,key);\n    }\n    if (lexer.token() == JSONToken.RBRACE) {\n      lexer.nextToken();\n      setContext(context);\n      return object;\n    }\n else     if (lexer.token() == JSONToken.COMMA) {\n      continue;\n    }\n else {\n      throw new JSONException(\"syntax error, \" + lexer.tokenName());\n    }\n  }\n else {\n    lexer.nextToken();\n    value=parse();\n    if (object.getClass() == JSONObject.class) {\n      key=key.toString();\n    }\n    object.put(key,value);\n    if (lexer.token() == JSONToken.RBRACE) {\n      lexer.nextToken();\n      return object;\n    }\n else     if (lexer.token() == JSONToken.COMMA) {\n      continue;\n    }\n else {\n      throw new JSONException(\"syntax error, position at \" + lexer.pos() + \", name \"+ key);\n    }\n  }\n  lexer.skipWhitespace();\n  ch=lexer.getCurrent();\n  if (ch == ',') {\n    lexer.next();\n    continue;\n  }\n else   if (ch == '}') {\n    lexer.next();\n    lexer.resetStringPosition();\n    lexer.nextToken();\n    this.setContext(object,fieldName);\n    return object;\n  }\n else {\n    throw new JSONException(\"syntax error, position at \" + lexer.pos() + \", name \"+ key);\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 1295,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 13566,
        "startLineNumber" : 199,
        "startColumnNumber" : 12,
        "endLineNumber" : 506,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  boolean setContextFlag=false;\n  for (; ; ) {\n    lexer.skipWhitespace();\n    char ch=lexer.getCurrent();\n    if (isEnabled(Feature.AllowArbitraryCommas)) {\n      while (ch == ',') {\n        lexer.next();\n        lexer.skipWhitespace();\n        ch=lexer.getCurrent();\n      }\n    }\n    boolean isObjectKey=false;\n    Object key;\n    if (ch == '\"') {\n      key=lexer.scanSymbol(symbolTable,'\"');\n      lexer.skipWhitespace();\n      ch=lexer.getCurrent();\n      if (ch != ':') {\n        throw new JSONException(\"expect ':' at \" + lexer.pos() + \", name \"+ key);\n      }\n    }\n else     if (ch == '}') {\n      lexer.next();\n      lexer.resetStringPosition();\n      lexer.nextToken();\n      return object;\n    }\n else     if (ch == '\\'') {\n      if (!isEnabled(Feature.AllowSingleQuotes)) {\n        throw new JSONException(\"syntax error\");\n      }\n      key=lexer.scanSymbol(symbolTable,'\\'');\n      lexer.skipWhitespace();\n      ch=lexer.getCurrent();\n      if (ch != ':') {\n        throw new JSONException(\"expect ':' at \" + lexer.pos());\n      }\n    }\n else     if (ch == EOI) {\n      throw new JSONException(\"syntax error\");\n    }\n else     if (ch == ',') {\n      throw new JSONException(\"syntax error\");\n    }\n else     if ((ch >= '0' && ch <= '9') || ch == '-') {\n      lexer.resetStringPosition();\n      lexer.scanNumber();\n      if (lexer.token() == JSONToken.LITERAL_INT) {\n        key=lexer.integerValue();\n      }\n else {\n        key=lexer.decimalValue(true);\n      }\n      ch=lexer.getCurrent();\n      if (ch != ':') {\n        throw new JSONException(\"expect ':' at \" + lexer.pos() + \", name \"+ key);\n      }\n    }\n else     if (ch == '{' || ch == '[') {\n      lexer.nextToken();\n      key=parse();\n      isObjectKey=true;\n    }\n else {\n      if (!isEnabled(Feature.AllowUnQuotedFieldNames)) {\n        throw new JSONException(\"syntax error\");\n      }\n      key=lexer.scanSymbolUnQuoted(symbolTable);\n      lexer.skipWhitespace();\n      ch=lexer.getCurrent();\n      if (ch != ':') {\n        throw new JSONException(\"expect ':' at \" + lexer.pos() + \", actual \"+ ch);\n      }\n    }\n    if (!isObjectKey) {\n      lexer.next();\n      lexer.skipWhitespace();\n    }\n    ch=lexer.getCurrent();\n    lexer.resetStringPosition();\n    if (key == JSON.DEFAULT_TYPE_KEY) {\n      String typeName=lexer.scanSymbol(symbolTable,'\"');\n      Class<?> clazz=TypeUtils.loadClass(typeName);\n      if (clazz == null) {\n        object.put(JSON.DEFAULT_TYPE_KEY,typeName);\n        continue;\n      }\n      lexer.nextToken(JSONToken.COMMA);\n      if (lexer.token() == JSONToken.RBRACE) {\n        lexer.nextToken(JSONToken.COMMA);\n        try {\n          Object instance=null;\n          ObjectDeserializer deserializer=this.config.getDeserializer(clazz);\n          if (deserializer instanceof ASMJavaBeanDeserializer) {\n            instance=((ASMJavaBeanDeserializer)deserializer).createInstance(this,clazz);\n          }\n else           if (deserializer instanceof JavaBeanDeserializer) {\n            instance=((JavaBeanDeserializer)deserializer).createInstance(this,clazz);\n          }\n          if (instance == null) {\n            if (clazz == Cloneable.class) {\n              instance=new HashMap();\n            }\n else {\n              instance=clazz.newInstance();\n            }\n          }\n          return instance;\n        }\n catch (        Exception e) {\n          throw new JSONException(\"create instance error\",e);\n        }\n      }\n      this.setResolveStatus(TypeNameRedirect);\n      if (this.context != null && !(fieldName instanceof Integer)) {\n        this.popContext();\n      }\n      ObjectDeserializer deserializer=config.getDeserializer(clazz);\n      return deserializer.deserialze(this,clazz,fieldName);\n    }\n    if (key == \"$ref\") {\n      lexer.nextToken(JSONToken.LITERAL_STRING);\n      if (lexer.token() == JSONToken.LITERAL_STRING) {\n        String ref=lexer.stringVal();\n        lexer.nextToken(JSONToken.RBRACE);\n        Object refValue=null;\n        if (\"@\".equals(ref)) {\n          if (this.getContext() != null) {\n            ParseContext thisContext=this.getContext();\n            Object thisObj=thisContext.getObject();\n            if (thisObj instanceof Object[] || thisObj instanceof Collection<?>) {\n              refValue=thisObj;\n            }\n else             if (thisContext.getParentContext() != null) {\n              refValue=thisContext.getParentContext().getObject();\n            }\n          }\n        }\n else         if (\"..\".equals(ref)) {\n          ParseContext parentContext=context.getParentContext();\n          if (parentContext.getObject() != null) {\n            refValue=parentContext.getObject();\n          }\n else {\n            addResolveTask(new ResolveTask(parentContext,ref));\n            setResolveStatus(DefaultJSONParser.NeedToResolve);\n          }\n        }\n else         if (\"$\".equals(ref)) {\n          ParseContext rootContext=context;\n          while (rootContext.getParentContext() != null) {\n            rootContext=rootContext.getParentContext();\n          }\n          if (rootContext.getObject() != null) {\n            refValue=rootContext.getObject();\n          }\n else {\n            addResolveTask(new ResolveTask(rootContext,ref));\n            setResolveStatus(DefaultJSONParser.NeedToResolve);\n          }\n        }\n else {\n          addResolveTask(new ResolveTask(context,ref));\n          setResolveStatus(DefaultJSONParser.NeedToResolve);\n        }\n        if (lexer.token() != JSONToken.RBRACE) {\n          throw new JSONException(\"syntax error\");\n        }\n        lexer.nextToken(JSONToken.COMMA);\n        return refValue;\n      }\n else {\n        throw new JSONException(\"illegal ref, \" + JSONToken.name(lexer.token()));\n      }\n    }\n    if (!setContextFlag) {\n      setContext(object,fieldName);\n      setContextFlag=true;\n      if (this.context != null && !(fieldName instanceof Integer)) {\n        this.popContext();\n      }\n    }\n    if (object.getClass() == JSONObject.class) {\n      key=(key == null) ? \"null\" : key.toString();\n    }\n    Object value;\n    if (ch == '\"') {\n      lexer.scanString();\n      String strValue=lexer.stringVal();\n      value=strValue;\n      if (lexer.isEnabled(Feature.AllowISO8601DateFormat)) {\n        JSONScanner iso8601Lexer=new JSONScanner(strValue);\n        if (iso8601Lexer.scanISO8601DateIfMatch()) {\n          value=iso8601Lexer.getCalendar().getTime();\n        }\n        iso8601Lexer.close();\n      }\n      object.put(key,value);\n    }\n else     if (ch >= '0' && ch <= '9' || ch == '-') {\n      lexer.scanNumber();\n      if (lexer.token() == JSONToken.LITERAL_INT) {\n        value=lexer.integerValue();\n      }\n else {\n        value=lexer.decimalValue(isEnabled(Feature.UseBigDecimal));\n      }\n      object.put(key,value);\n    }\n else     if (ch == '[') {\n      lexer.nextToken();\n      JSONArray list=new JSONArray();\n      this.parseArray(list,key);\n      value=list;\n      object.put(key,value);\n      if (lexer.token() == JSONToken.RBRACE) {\n        lexer.nextToken();\n        return object;\n      }\n else       if (lexer.token() == JSONToken.COMMA) {\n        continue;\n      }\n else {\n        throw new JSONException(\"syntax error\");\n      }\n    }\n else     if (ch == '{') {\n      lexer.nextToken();\n      final boolean parentIsArray=fieldName != null && fieldName.getClass() == Integer.class;\n      JSONObject input=new JSONObject();\n      ParseContext ctxLocal=null;\n      if (!parentIsArray) {\n        ctxLocal=setContext(context,input,key);\n      }\n      Object obj=this.parseObject(input,key);\n      if (ctxLocal != null && input != obj) {\n        ctxLocal.setObject(object);\n      }\n      checkMapResolve(object,key.toString());\n      if (object.getClass() == JSONObject.class) {\n        object.put(key.toString(),obj);\n      }\n else {\n        object.put(key,obj);\n      }\n      if (parentIsArray) {\n        setContext(context,obj,key);\n      }\n      if (lexer.token() == JSONToken.RBRACE) {\n        lexer.nextToken();\n        setContext(context);\n        return object;\n      }\n else       if (lexer.token() == JSONToken.COMMA) {\n        continue;\n      }\n else {\n        throw new JSONException(\"syntax error, \" + lexer.tokenName());\n      }\n    }\n else {\n      lexer.nextToken();\n      value=parse();\n      if (object.getClass() == JSONObject.class) {\n        key=key.toString();\n      }\n      object.put(key,value);\n      if (lexer.token() == JSONToken.RBRACE) {\n        lexer.nextToken();\n        return object;\n      }\n else       if (lexer.token() == JSONToken.COMMA) {\n        continue;\n      }\n else {\n        throw new JSONException(\"syntax error, position at \" + lexer.pos() + \", name \"+ key);\n      }\n    }\n    lexer.skipWhitespace();\n    ch=lexer.getCurrent();\n    if (ch == ',') {\n      lexer.next();\n      continue;\n    }\n else     if (ch == '}') {\n      lexer.next();\n      lexer.resetStringPosition();\n      lexer.nextToken();\n      this.setContext(object,fieldName);\n      return object;\n    }\n else {\n      throw new JSONException(\"syntax error, position at \" + lexer.pos() + \", name \"+ key);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1301,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 13630,
        "startLineNumber" : 199,
        "startColumnNumber" : 8,
        "endLineNumber" : 508,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  boolean setContextFlag=false;\n  for (; ; ) {\n    lexer.skipWhitespace();\n    char ch=lexer.getCurrent();\n    if (isEnabled(Feature.AllowArbitraryCommas)) {\n      while (ch == ',') {\n        lexer.next();\n        lexer.skipWhitespace();\n        ch=lexer.getCurrent();\n      }\n    }\n    boolean isObjectKey=false;\n    Object key;\n    if (ch == '\"') {\n      key=lexer.scanSymbol(symbolTable,'\"');\n      lexer.skipWhitespace();\n      ch=lexer.getCurrent();\n      if (ch != ':') {\n        throw new JSONException(\"expect ':' at \" + lexer.pos() + \", name \"+ key);\n      }\n    }\n else     if (ch == '}') {\n      lexer.next();\n      lexer.resetStringPosition();\n      lexer.nextToken();\n      return object;\n    }\n else     if (ch == '\\'') {\n      if (!isEnabled(Feature.AllowSingleQuotes)) {\n        throw new JSONException(\"syntax error\");\n      }\n      key=lexer.scanSymbol(symbolTable,'\\'');\n      lexer.skipWhitespace();\n      ch=lexer.getCurrent();\n      if (ch != ':') {\n        throw new JSONException(\"expect ':' at \" + lexer.pos());\n      }\n    }\n else     if (ch == EOI) {\n      throw new JSONException(\"syntax error\");\n    }\n else     if (ch == ',') {\n      throw new JSONException(\"syntax error\");\n    }\n else     if ((ch >= '0' && ch <= '9') || ch == '-') {\n      lexer.resetStringPosition();\n      lexer.scanNumber();\n      if (lexer.token() == JSONToken.LITERAL_INT) {\n        key=lexer.integerValue();\n      }\n else {\n        key=lexer.decimalValue(true);\n      }\n      ch=lexer.getCurrent();\n      if (ch != ':') {\n        throw new JSONException(\"expect ':' at \" + lexer.pos() + \", name \"+ key);\n      }\n    }\n else     if (ch == '{' || ch == '[') {\n      lexer.nextToken();\n      key=parse();\n      isObjectKey=true;\n    }\n else {\n      if (!isEnabled(Feature.AllowUnQuotedFieldNames)) {\n        throw new JSONException(\"syntax error\");\n      }\n      key=lexer.scanSymbolUnQuoted(symbolTable);\n      lexer.skipWhitespace();\n      ch=lexer.getCurrent();\n      if (ch != ':') {\n        throw new JSONException(\"expect ':' at \" + lexer.pos() + \", actual \"+ ch);\n      }\n    }\n    if (!isObjectKey) {\n      lexer.next();\n      lexer.skipWhitespace();\n    }\n    ch=lexer.getCurrent();\n    lexer.resetStringPosition();\n    if (key == JSON.DEFAULT_TYPE_KEY) {\n      String typeName=lexer.scanSymbol(symbolTable,'\"');\n      Class<?> clazz=TypeUtils.loadClass(typeName);\n      if (clazz == null) {\n        object.put(JSON.DEFAULT_TYPE_KEY,typeName);\n        continue;\n      }\n      lexer.nextToken(JSONToken.COMMA);\n      if (lexer.token() == JSONToken.RBRACE) {\n        lexer.nextToken(JSONToken.COMMA);\n        try {\n          Object instance=null;\n          ObjectDeserializer deserializer=this.config.getDeserializer(clazz);\n          if (deserializer instanceof ASMJavaBeanDeserializer) {\n            instance=((ASMJavaBeanDeserializer)deserializer).createInstance(this,clazz);\n          }\n else           if (deserializer instanceof JavaBeanDeserializer) {\n            instance=((JavaBeanDeserializer)deserializer).createInstance(this,clazz);\n          }\n          if (instance == null) {\n            if (clazz == Cloneable.class) {\n              instance=new HashMap();\n            }\n else {\n              instance=clazz.newInstance();\n            }\n          }\n          return instance;\n        }\n catch (        Exception e) {\n          throw new JSONException(\"create instance error\",e);\n        }\n      }\n      this.setResolveStatus(TypeNameRedirect);\n      if (this.context != null && !(fieldName instanceof Integer)) {\n        this.popContext();\n      }\n      ObjectDeserializer deserializer=config.getDeserializer(clazz);\n      return deserializer.deserialze(this,clazz,fieldName);\n    }\n    if (key == \"$ref\") {\n      lexer.nextToken(JSONToken.LITERAL_STRING);\n      if (lexer.token() == JSONToken.LITERAL_STRING) {\n        String ref=lexer.stringVal();\n        lexer.nextToken(JSONToken.RBRACE);\n        Object refValue=null;\n        if (\"@\".equals(ref)) {\n          if (this.getContext() != null) {\n            ParseContext thisContext=this.getContext();\n            Object thisObj=thisContext.getObject();\n            if (thisObj instanceof Object[] || thisObj instanceof Collection<?>) {\n              refValue=thisObj;\n            }\n else             if (thisContext.getParentContext() != null) {\n              refValue=thisContext.getParentContext().getObject();\n            }\n          }\n        }\n else         if (\"..\".equals(ref)) {\n          ParseContext parentContext=context.getParentContext();\n          if (parentContext.getObject() != null) {\n            refValue=parentContext.getObject();\n          }\n else {\n            addResolveTask(new ResolveTask(parentContext,ref));\n            setResolveStatus(DefaultJSONParser.NeedToResolve);\n          }\n        }\n else         if (\"$\".equals(ref)) {\n          ParseContext rootContext=context;\n          while (rootContext.getParentContext() != null) {\n            rootContext=rootContext.getParentContext();\n          }\n          if (rootContext.getObject() != null) {\n            refValue=rootContext.getObject();\n          }\n else {\n            addResolveTask(new ResolveTask(rootContext,ref));\n            setResolveStatus(DefaultJSONParser.NeedToResolve);\n          }\n        }\n else {\n          addResolveTask(new ResolveTask(context,ref));\n          setResolveStatus(DefaultJSONParser.NeedToResolve);\n        }\n        if (lexer.token() != JSONToken.RBRACE) {\n          throw new JSONException(\"syntax error\");\n        }\n        lexer.nextToken(JSONToken.COMMA);\n        return refValue;\n      }\n else {\n        throw new JSONException(\"illegal ref, \" + JSONToken.name(lexer.token()));\n      }\n    }\n    if (!setContextFlag) {\n      setContext(object,fieldName);\n      setContextFlag=true;\n      if (this.context != null && !(fieldName instanceof Integer)) {\n        this.popContext();\n      }\n    }\n    if (object.getClass() == JSONObject.class) {\n      key=(key == null) ? \"null\" : key.toString();\n    }\n    Object value;\n    if (ch == '\"') {\n      lexer.scanString();\n      String strValue=lexer.stringVal();\n      value=strValue;\n      if (lexer.isEnabled(Feature.AllowISO8601DateFormat)) {\n        JSONScanner iso8601Lexer=new JSONScanner(strValue);\n        if (iso8601Lexer.scanISO8601DateIfMatch()) {\n          value=iso8601Lexer.getCalendar().getTime();\n        }\n        iso8601Lexer.close();\n      }\n      object.put(key,value);\n    }\n else     if (ch >= '0' && ch <= '9' || ch == '-') {\n      lexer.scanNumber();\n      if (lexer.token() == JSONToken.LITERAL_INT) {\n        value=lexer.integerValue();\n      }\n else {\n        value=lexer.decimalValue(isEnabled(Feature.UseBigDecimal));\n      }\n      object.put(key,value);\n    }\n else     if (ch == '[') {\n      lexer.nextToken();\n      JSONArray list=new JSONArray();\n      this.parseArray(list,key);\n      value=list;\n      object.put(key,value);\n      if (lexer.token() == JSONToken.RBRACE) {\n        lexer.nextToken();\n        return object;\n      }\n else       if (lexer.token() == JSONToken.COMMA) {\n        continue;\n      }\n else {\n        throw new JSONException(\"syntax error\");\n      }\n    }\n else     if (ch == '{') {\n      lexer.nextToken();\n      final boolean parentIsArray=fieldName != null && fieldName.getClass() == Integer.class;\n      JSONObject input=new JSONObject();\n      ParseContext ctxLocal=null;\n      if (!parentIsArray) {\n        ctxLocal=setContext(context,input,key);\n      }\n      Object obj=this.parseObject(input,key);\n      if (ctxLocal != null && input != obj) {\n        ctxLocal.setObject(object);\n      }\n      checkMapResolve(object,key.toString());\n      if (object.getClass() == JSONObject.class) {\n        object.put(key.toString(),obj);\n      }\n else {\n        object.put(key,obj);\n      }\n      if (parentIsArray) {\n        setContext(context,obj,key);\n      }\n      if (lexer.token() == JSONToken.RBRACE) {\n        lexer.nextToken();\n        setContext(context);\n        return object;\n      }\n else       if (lexer.token() == JSONToken.COMMA) {\n        continue;\n      }\n else {\n        throw new JSONException(\"syntax error, \" + lexer.tokenName());\n      }\n    }\n else {\n      lexer.nextToken();\n      value=parse();\n      if (object.getClass() == JSONObject.class) {\n        key=key.toString();\n      }\n      object.put(key,value);\n      if (lexer.token() == JSONToken.RBRACE) {\n        lexer.nextToken();\n        return object;\n      }\n else       if (lexer.token() == JSONToken.COMMA) {\n        continue;\n      }\n else {\n        throw new JSONException(\"syntax error, position at \" + lexer.pos() + \", name \"+ key);\n      }\n    }\n    lexer.skipWhitespace();\n    ch=lexer.getCurrent();\n    if (ch == ',') {\n      lexer.next();\n      continue;\n    }\n else     if (ch == '}') {\n      lexer.next();\n      lexer.resetStringPosition();\n      lexer.nextToken();\n      this.setContext(object,fieldName);\n      return object;\n    }\n else {\n      throw new JSONException(\"syntax error, position at \" + lexer.pos() + \", name \"+ key);\n    }\n  }\n}\n  finally {\n  this.setContext(context);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 1308,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 13940,
        "startLineNumber" : 191,
        "startColumnNumber" : 72,
        "endLineNumber" : 510,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final JSONLexer lexer=this.lexer;\n  if (lexer.token() != JSONToken.LBRACE && lexer.token() != JSONToken.COMMA) {\n    throw new JSONException(\"syntax error, expect {, actual \" + lexer.tokenName());\n  }\n  ParseContext context=this.getContext();\n  try {\n    boolean setContextFlag=false;\n    for (; ; ) {\n      lexer.skipWhitespace();\n      char ch=lexer.getCurrent();\n      if (isEnabled(Feature.AllowArbitraryCommas)) {\n        while (ch == ',') {\n          lexer.next();\n          lexer.skipWhitespace();\n          ch=lexer.getCurrent();\n        }\n      }\n      boolean isObjectKey=false;\n      Object key;\n      if (ch == '\"') {\n        key=lexer.scanSymbol(symbolTable,'\"');\n        lexer.skipWhitespace();\n        ch=lexer.getCurrent();\n        if (ch != ':') {\n          throw new JSONException(\"expect ':' at \" + lexer.pos() + \", name \"+ key);\n        }\n      }\n else       if (ch == '}') {\n        lexer.next();\n        lexer.resetStringPosition();\n        lexer.nextToken();\n        return object;\n      }\n else       if (ch == '\\'') {\n        if (!isEnabled(Feature.AllowSingleQuotes)) {\n          throw new JSONException(\"syntax error\");\n        }\n        key=lexer.scanSymbol(symbolTable,'\\'');\n        lexer.skipWhitespace();\n        ch=lexer.getCurrent();\n        if (ch != ':') {\n          throw new JSONException(\"expect ':' at \" + lexer.pos());\n        }\n      }\n else       if (ch == EOI) {\n        throw new JSONException(\"syntax error\");\n      }\n else       if (ch == ',') {\n        throw new JSONException(\"syntax error\");\n      }\n else       if ((ch >= '0' && ch <= '9') || ch == '-') {\n        lexer.resetStringPosition();\n        lexer.scanNumber();\n        if (lexer.token() == JSONToken.LITERAL_INT) {\n          key=lexer.integerValue();\n        }\n else {\n          key=lexer.decimalValue(true);\n        }\n        ch=lexer.getCurrent();\n        if (ch != ':') {\n          throw new JSONException(\"expect ':' at \" + lexer.pos() + \", name \"+ key);\n        }\n      }\n else       if (ch == '{' || ch == '[') {\n        lexer.nextToken();\n        key=parse();\n        isObjectKey=true;\n      }\n else {\n        if (!isEnabled(Feature.AllowUnQuotedFieldNames)) {\n          throw new JSONException(\"syntax error\");\n        }\n        key=lexer.scanSymbolUnQuoted(symbolTable);\n        lexer.skipWhitespace();\n        ch=lexer.getCurrent();\n        if (ch != ':') {\n          throw new JSONException(\"expect ':' at \" + lexer.pos() + \", actual \"+ ch);\n        }\n      }\n      if (!isObjectKey) {\n        lexer.next();\n        lexer.skipWhitespace();\n      }\n      ch=lexer.getCurrent();\n      lexer.resetStringPosition();\n      if (key == JSON.DEFAULT_TYPE_KEY) {\n        String typeName=lexer.scanSymbol(symbolTable,'\"');\n        Class<?> clazz=TypeUtils.loadClass(typeName);\n        if (clazz == null) {\n          object.put(JSON.DEFAULT_TYPE_KEY,typeName);\n          continue;\n        }\n        lexer.nextToken(JSONToken.COMMA);\n        if (lexer.token() == JSONToken.RBRACE) {\n          lexer.nextToken(JSONToken.COMMA);\n          try {\n            Object instance=null;\n            ObjectDeserializer deserializer=this.config.getDeserializer(clazz);\n            if (deserializer instanceof ASMJavaBeanDeserializer) {\n              instance=((ASMJavaBeanDeserializer)deserializer).createInstance(this,clazz);\n            }\n else             if (deserializer instanceof JavaBeanDeserializer) {\n              instance=((JavaBeanDeserializer)deserializer).createInstance(this,clazz);\n            }\n            if (instance == null) {\n              if (clazz == Cloneable.class) {\n                instance=new HashMap();\n              }\n else {\n                instance=clazz.newInstance();\n              }\n            }\n            return instance;\n          }\n catch (          Exception e) {\n            throw new JSONException(\"create instance error\",e);\n          }\n        }\n        this.setResolveStatus(TypeNameRedirect);\n        if (this.context != null && !(fieldName instanceof Integer)) {\n          this.popContext();\n        }\n        ObjectDeserializer deserializer=config.getDeserializer(clazz);\n        return deserializer.deserialze(this,clazz,fieldName);\n      }\n      if (key == \"$ref\") {\n        lexer.nextToken(JSONToken.LITERAL_STRING);\n        if (lexer.token() == JSONToken.LITERAL_STRING) {\n          String ref=lexer.stringVal();\n          lexer.nextToken(JSONToken.RBRACE);\n          Object refValue=null;\n          if (\"@\".equals(ref)) {\n            if (this.getContext() != null) {\n              ParseContext thisContext=this.getContext();\n              Object thisObj=thisContext.getObject();\n              if (thisObj instanceof Object[] || thisObj instanceof Collection<?>) {\n                refValue=thisObj;\n              }\n else               if (thisContext.getParentContext() != null) {\n                refValue=thisContext.getParentContext().getObject();\n              }\n            }\n          }\n else           if (\"..\".equals(ref)) {\n            ParseContext parentContext=context.getParentContext();\n            if (parentContext.getObject() != null) {\n              refValue=parentContext.getObject();\n            }\n else {\n              addResolveTask(new ResolveTask(parentContext,ref));\n              setResolveStatus(DefaultJSONParser.NeedToResolve);\n            }\n          }\n else           if (\"$\".equals(ref)) {\n            ParseContext rootContext=context;\n            while (rootContext.getParentContext() != null) {\n              rootContext=rootContext.getParentContext();\n            }\n            if (rootContext.getObject() != null) {\n              refValue=rootContext.getObject();\n            }\n else {\n              addResolveTask(new ResolveTask(rootContext,ref));\n              setResolveStatus(DefaultJSONParser.NeedToResolve);\n            }\n          }\n else {\n            addResolveTask(new ResolveTask(context,ref));\n            setResolveStatus(DefaultJSONParser.NeedToResolve);\n          }\n          if (lexer.token() != JSONToken.RBRACE) {\n            throw new JSONException(\"syntax error\");\n          }\n          lexer.nextToken(JSONToken.COMMA);\n          return refValue;\n        }\n else {\n          throw new JSONException(\"illegal ref, \" + JSONToken.name(lexer.token()));\n        }\n      }\n      if (!setContextFlag) {\n        setContext(object,fieldName);\n        setContextFlag=true;\n        if (this.context != null && !(fieldName instanceof Integer)) {\n          this.popContext();\n        }\n      }\n      if (object.getClass() == JSONObject.class) {\n        key=(key == null) ? \"null\" : key.toString();\n      }\n      Object value;\n      if (ch == '\"') {\n        lexer.scanString();\n        String strValue=lexer.stringVal();\n        value=strValue;\n        if (lexer.isEnabled(Feature.AllowISO8601DateFormat)) {\n          JSONScanner iso8601Lexer=new JSONScanner(strValue);\n          if (iso8601Lexer.scanISO8601DateIfMatch()) {\n            value=iso8601Lexer.getCalendar().getTime();\n          }\n          iso8601Lexer.close();\n        }\n        object.put(key,value);\n      }\n else       if (ch >= '0' && ch <= '9' || ch == '-') {\n        lexer.scanNumber();\n        if (lexer.token() == JSONToken.LITERAL_INT) {\n          value=lexer.integerValue();\n        }\n else {\n          value=lexer.decimalValue(isEnabled(Feature.UseBigDecimal));\n        }\n        object.put(key,value);\n      }\n else       if (ch == '[') {\n        lexer.nextToken();\n        JSONArray list=new JSONArray();\n        this.parseArray(list,key);\n        value=list;\n        object.put(key,value);\n        if (lexer.token() == JSONToken.RBRACE) {\n          lexer.nextToken();\n          return object;\n        }\n else         if (lexer.token() == JSONToken.COMMA) {\n          continue;\n        }\n else {\n          throw new JSONException(\"syntax error\");\n        }\n      }\n else       if (ch == '{') {\n        lexer.nextToken();\n        final boolean parentIsArray=fieldName != null && fieldName.getClass() == Integer.class;\n        JSONObject input=new JSONObject();\n        ParseContext ctxLocal=null;\n        if (!parentIsArray) {\n          ctxLocal=setContext(context,input,key);\n        }\n        Object obj=this.parseObject(input,key);\n        if (ctxLocal != null && input != obj) {\n          ctxLocal.setObject(object);\n        }\n        checkMapResolve(object,key.toString());\n        if (object.getClass() == JSONObject.class) {\n          object.put(key.toString(),obj);\n        }\n else {\n          object.put(key,obj);\n        }\n        if (parentIsArray) {\n          setContext(context,obj,key);\n        }\n        if (lexer.token() == JSONToken.RBRACE) {\n          lexer.nextToken();\n          setContext(context);\n          return object;\n        }\n else         if (lexer.token() == JSONToken.COMMA) {\n          continue;\n        }\n else {\n          throw new JSONException(\"syntax error, \" + lexer.tokenName());\n        }\n      }\n else {\n        lexer.nextToken();\n        value=parse();\n        if (object.getClass() == JSONObject.class) {\n          key=key.toString();\n        }\n        object.put(key,value);\n        if (lexer.token() == JSONToken.RBRACE) {\n          lexer.nextToken();\n          return object;\n        }\n else         if (lexer.token() == JSONToken.COMMA) {\n          continue;\n        }\n else {\n          throw new JSONException(\"syntax error, position at \" + lexer.pos() + \", name \"+ key);\n        }\n      }\n      lexer.skipWhitespace();\n      ch=lexer.getCurrent();\n      if (ch == ',') {\n        lexer.next();\n        continue;\n      }\n else       if (ch == '}') {\n        lexer.next();\n        lexer.resetStringPosition();\n        lexer.nextToken();\n        this.setContext(object,fieldName);\n        return object;\n      }\n else {\n        throw new JSONException(\"syntax error, position at \" + lexer.pos() + \", name \"+ key);\n      }\n    }\n  }\n  finally {\n    this.setContext(context);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1352,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 14060,
        "startLineNumber" : 190,
        "startColumnNumber" : 4,
        "endLineNumber" : 510,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@SuppressWarnings({\"unchecked\",\"rawtypes\"}) public final Object parseObject(final Map object,Object fieldName){\n  final JSONLexer lexer=this.lexer;\n  if (lexer.token() != JSONToken.LBRACE && lexer.token() != JSONToken.COMMA) {\n    throw new JSONException(\"syntax error, expect {, actual \" + lexer.tokenName());\n  }\n  ParseContext context=this.getContext();\n  try {\n    boolean setContextFlag=false;\n    for (; ; ) {\n      lexer.skipWhitespace();\n      char ch=lexer.getCurrent();\n      if (isEnabled(Feature.AllowArbitraryCommas)) {\n        while (ch == ',') {\n          lexer.next();\n          lexer.skipWhitespace();\n          ch=lexer.getCurrent();\n        }\n      }\n      boolean isObjectKey=false;\n      Object key;\n      if (ch == '\"') {\n        key=lexer.scanSymbol(symbolTable,'\"');\n        lexer.skipWhitespace();\n        ch=lexer.getCurrent();\n        if (ch != ':') {\n          throw new JSONException(\"expect ':' at \" + lexer.pos() + \", name \"+ key);\n        }\n      }\n else       if (ch == '}') {\n        lexer.next();\n        lexer.resetStringPosition();\n        lexer.nextToken();\n        return object;\n      }\n else       if (ch == '\\'') {\n        if (!isEnabled(Feature.AllowSingleQuotes)) {\n          throw new JSONException(\"syntax error\");\n        }\n        key=lexer.scanSymbol(symbolTable,'\\'');\n        lexer.skipWhitespace();\n        ch=lexer.getCurrent();\n        if (ch != ':') {\n          throw new JSONException(\"expect ':' at \" + lexer.pos());\n        }\n      }\n else       if (ch == EOI) {\n        throw new JSONException(\"syntax error\");\n      }\n else       if (ch == ',') {\n        throw new JSONException(\"syntax error\");\n      }\n else       if ((ch >= '0' && ch <= '9') || ch == '-') {\n        lexer.resetStringPosition();\n        lexer.scanNumber();\n        if (lexer.token() == JSONToken.LITERAL_INT) {\n          key=lexer.integerValue();\n        }\n else {\n          key=lexer.decimalValue(true);\n        }\n        ch=lexer.getCurrent();\n        if (ch != ':') {\n          throw new JSONException(\"expect ':' at \" + lexer.pos() + \", name \"+ key);\n        }\n      }\n else       if (ch == '{' || ch == '[') {\n        lexer.nextToken();\n        key=parse();\n        isObjectKey=true;\n      }\n else {\n        if (!isEnabled(Feature.AllowUnQuotedFieldNames)) {\n          throw new JSONException(\"syntax error\");\n        }\n        key=lexer.scanSymbolUnQuoted(symbolTable);\n        lexer.skipWhitespace();\n        ch=lexer.getCurrent();\n        if (ch != ':') {\n          throw new JSONException(\"expect ':' at \" + lexer.pos() + \", actual \"+ ch);\n        }\n      }\n      if (!isObjectKey) {\n        lexer.next();\n        lexer.skipWhitespace();\n      }\n      ch=lexer.getCurrent();\n      lexer.resetStringPosition();\n      if (key == JSON.DEFAULT_TYPE_KEY) {\n        String typeName=lexer.scanSymbol(symbolTable,'\"');\n        Class<?> clazz=TypeUtils.loadClass(typeName);\n        if (clazz == null) {\n          object.put(JSON.DEFAULT_TYPE_KEY,typeName);\n          continue;\n        }\n        lexer.nextToken(JSONToken.COMMA);\n        if (lexer.token() == JSONToken.RBRACE) {\n          lexer.nextToken(JSONToken.COMMA);\n          try {\n            Object instance=null;\n            ObjectDeserializer deserializer=this.config.getDeserializer(clazz);\n            if (deserializer instanceof ASMJavaBeanDeserializer) {\n              instance=((ASMJavaBeanDeserializer)deserializer).createInstance(this,clazz);\n            }\n else             if (deserializer instanceof JavaBeanDeserializer) {\n              instance=((JavaBeanDeserializer)deserializer).createInstance(this,clazz);\n            }\n            if (instance == null) {\n              if (clazz == Cloneable.class) {\n                instance=new HashMap();\n              }\n else {\n                instance=clazz.newInstance();\n              }\n            }\n            return instance;\n          }\n catch (          Exception e) {\n            throw new JSONException(\"create instance error\",e);\n          }\n        }\n        this.setResolveStatus(TypeNameRedirect);\n        if (this.context != null && !(fieldName instanceof Integer)) {\n          this.popContext();\n        }\n        ObjectDeserializer deserializer=config.getDeserializer(clazz);\n        return deserializer.deserialze(this,clazz,fieldName);\n      }\n      if (key == \"$ref\") {\n        lexer.nextToken(JSONToken.LITERAL_STRING);\n        if (lexer.token() == JSONToken.LITERAL_STRING) {\n          String ref=lexer.stringVal();\n          lexer.nextToken(JSONToken.RBRACE);\n          Object refValue=null;\n          if (\"@\".equals(ref)) {\n            if (this.getContext() != null) {\n              ParseContext thisContext=this.getContext();\n              Object thisObj=thisContext.getObject();\n              if (thisObj instanceof Object[] || thisObj instanceof Collection<?>) {\n                refValue=thisObj;\n              }\n else               if (thisContext.getParentContext() != null) {\n                refValue=thisContext.getParentContext().getObject();\n              }\n            }\n          }\n else           if (\"..\".equals(ref)) {\n            ParseContext parentContext=context.getParentContext();\n            if (parentContext.getObject() != null) {\n              refValue=parentContext.getObject();\n            }\n else {\n              addResolveTask(new ResolveTask(parentContext,ref));\n              setResolveStatus(DefaultJSONParser.NeedToResolve);\n            }\n          }\n else           if (\"$\".equals(ref)) {\n            ParseContext rootContext=context;\n            while (rootContext.getParentContext() != null) {\n              rootContext=rootContext.getParentContext();\n            }\n            if (rootContext.getObject() != null) {\n              refValue=rootContext.getObject();\n            }\n else {\n              addResolveTask(new ResolveTask(rootContext,ref));\n              setResolveStatus(DefaultJSONParser.NeedToResolve);\n            }\n          }\n else {\n            addResolveTask(new ResolveTask(context,ref));\n            setResolveStatus(DefaultJSONParser.NeedToResolve);\n          }\n          if (lexer.token() != JSONToken.RBRACE) {\n            throw new JSONException(\"syntax error\");\n          }\n          lexer.nextToken(JSONToken.COMMA);\n          return refValue;\n        }\n else {\n          throw new JSONException(\"illegal ref, \" + JSONToken.name(lexer.token()));\n        }\n      }\n      if (!setContextFlag) {\n        setContext(object,fieldName);\n        setContextFlag=true;\n        if (this.context != null && !(fieldName instanceof Integer)) {\n          this.popContext();\n        }\n      }\n      if (object.getClass() == JSONObject.class) {\n        key=(key == null) ? \"null\" : key.toString();\n      }\n      Object value;\n      if (ch == '\"') {\n        lexer.scanString();\n        String strValue=lexer.stringVal();\n        value=strValue;\n        if (lexer.isEnabled(Feature.AllowISO8601DateFormat)) {\n          JSONScanner iso8601Lexer=new JSONScanner(strValue);\n          if (iso8601Lexer.scanISO8601DateIfMatch()) {\n            value=iso8601Lexer.getCalendar().getTime();\n          }\n          iso8601Lexer.close();\n        }\n        object.put(key,value);\n      }\n else       if (ch >= '0' && ch <= '9' || ch == '-') {\n        lexer.scanNumber();\n        if (lexer.token() == JSONToken.LITERAL_INT) {\n          value=lexer.integerValue();\n        }\n else {\n          value=lexer.decimalValue(isEnabled(Feature.UseBigDecimal));\n        }\n        object.put(key,value);\n      }\n else       if (ch == '[') {\n        lexer.nextToken();\n        JSONArray list=new JSONArray();\n        this.parseArray(list,key);\n        value=list;\n        object.put(key,value);\n        if (lexer.token() == JSONToken.RBRACE) {\n          lexer.nextToken();\n          return object;\n        }\n else         if (lexer.token() == JSONToken.COMMA) {\n          continue;\n        }\n else {\n          throw new JSONException(\"syntax error\");\n        }\n      }\n else       if (ch == '{') {\n        lexer.nextToken();\n        final boolean parentIsArray=fieldName != null && fieldName.getClass() == Integer.class;\n        JSONObject input=new JSONObject();\n        ParseContext ctxLocal=null;\n        if (!parentIsArray) {\n          ctxLocal=setContext(context,input,key);\n        }\n        Object obj=this.parseObject(input,key);\n        if (ctxLocal != null && input != obj) {\n          ctxLocal.setObject(object);\n        }\n        checkMapResolve(object,key.toString());\n        if (object.getClass() == JSONObject.class) {\n          object.put(key.toString(),obj);\n        }\n else {\n          object.put(key,obj);\n        }\n        if (parentIsArray) {\n          setContext(context,obj,key);\n        }\n        if (lexer.token() == JSONToken.RBRACE) {\n          lexer.nextToken();\n          setContext(context);\n          return object;\n        }\n else         if (lexer.token() == JSONToken.COMMA) {\n          continue;\n        }\n else {\n          throw new JSONException(\"syntax error, \" + lexer.tokenName());\n        }\n      }\n else {\n        lexer.nextToken();\n        value=parse();\n        if (object.getClass() == JSONObject.class) {\n          key=key.toString();\n        }\n        object.put(key,value);\n        if (lexer.token() == JSONToken.RBRACE) {\n          lexer.nextToken();\n          return object;\n        }\n else         if (lexer.token() == JSONToken.COMMA) {\n          continue;\n        }\n else {\n          throw new JSONException(\"syntax error, position at \" + lexer.pos() + \", name \"+ key);\n        }\n      }\n      lexer.skipWhitespace();\n      ch=lexer.getCurrent();\n      if (ch == ',') {\n        lexer.next();\n        continue;\n      }\n else       if (ch == '}') {\n        lexer.next();\n        lexer.resetStringPosition();\n        lexer.nextToken();\n        this.setContext(object,fieldName);\n        return object;\n      }\n else {\n        throw new JSONException(\"syntax error, position at \" + lexer.pos() + \", name \"+ key);\n      }\n    }\n  }\n  finally {\n    this.setContext(context);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1372,
      "astHeight" : 22
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 397,
        "startColumnNumber" : 24,
        "endLineNumber" : 397,
        "endColumnNumber" : 71
      },
      "nodeContext" : "lexer.isEnabled(Feature.AllowISO8601DateFormat)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.alibaba.fastjson.parser.Feature"
  }, {
    "nodeContext" : "Feature",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 411,
      "startColumnNumber" : 61,
      "endLineNumber" : 411,
      "endColumnNumber" : 68
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 411,
        "startColumnNumber" : 61,
        "endLineNumber" : 411,
        "endColumnNumber" : 82
      },
      "nodeContext" : "Feature.UseBigDecimal",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 411,
        "startColumnNumber" : 51,
        "endLineNumber" : 411,
        "endColumnNumber" : 83
      },
      "nodeContext" : "isEnabled(Feature.UseBigDecimal)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 411,
        "startColumnNumber" : 32,
        "endLineNumber" : 411,
        "endColumnNumber" : 84
      },
      "nodeContext" : "lexer.decimalValue(isEnabled(Feature.UseBigDecimal))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 411,
        "startColumnNumber" : 24,
        "endLineNumber" : 411,
        "endColumnNumber" : 84
      },
      "nodeContext" : "value=lexer.decimalValue(isEnabled(Feature.UseBigDecimal))",
      "nodeType" : "Assignment",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 411,
        "startColumnNumber" : 24,
        "endLineNumber" : 411,
        "endColumnNumber" : 85
      },
      "nodeContext" : "value=lexer.decimalValue(isEnabled(Feature.UseBigDecimal));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 111,
        "startLineNumber" : 410,
        "startColumnNumber" : 27,
        "endLineNumber" : 412,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  value=lexer.decimalValue(isEnabled(Feature.UseBigDecimal));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 12,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 240,
        "startLineNumber" : 408,
        "startColumnNumber" : 20,
        "endLineNumber" : 412,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (lexer.token() == JSONToken.LITERAL_INT) {\n  value=lexer.integerValue();\n}\n else {\n  value=lexer.decimalValue(isEnabled(Feature.UseBigDecimal));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 27,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 370,
        "startLineNumber" : 406,
        "startColumnNumber" : 64,
        "endLineNumber" : 415,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  lexer.scanNumber();\n  if (lexer.token() == JSONToken.LITERAL_INT) {\n    value=lexer.integerValue();\n  }\n else {\n    value=lexer.decimalValue(isEnabled(Feature.UseBigDecimal));\n  }\n  object.put(key,value);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 38,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 3423,
        "startLineNumber" : 406,
        "startColumnNumber" : 23,
        "endLineNumber" : 486,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (ch >= '0' && ch <= '9' || ch == '-') {\n  lexer.scanNumber();\n  if (lexer.token() == JSONToken.LITERAL_INT) {\n    value=lexer.integerValue();\n  }\n else {\n    value=lexer.decimalValue(isEnabled(Feature.UseBigDecimal));\n  }\n  object.put(key,value);\n}\n else if (ch == '[') {\n  lexer.nextToken();\n  JSONArray list=new JSONArray();\n  this.parseArray(list,key);\n  value=list;\n  object.put(key,value);\n  if (lexer.token() == JSONToken.RBRACE) {\n    lexer.nextToken();\n    return object;\n  }\n else   if (lexer.token() == JSONToken.COMMA) {\n    continue;\n  }\n else {\n    throw new JSONException(\"syntax error\");\n  }\n}\n else if (ch == '{') {\n  lexer.nextToken();\n  final boolean parentIsArray=fieldName != null && fieldName.getClass() == Integer.class;\n  JSONObject input=new JSONObject();\n  ParseContext ctxLocal=null;\n  if (!parentIsArray) {\n    ctxLocal=setContext(context,input,key);\n  }\n  Object obj=this.parseObject(input,key);\n  if (ctxLocal != null && input != obj) {\n    ctxLocal.setObject(object);\n  }\n  checkMapResolve(object,key.toString());\n  if (object.getClass() == JSONObject.class) {\n    object.put(key.toString(),obj);\n  }\n else {\n    object.put(key,obj);\n  }\n  if (parentIsArray) {\n    setContext(context,obj,key);\n  }\n  if (lexer.token() == JSONToken.RBRACE) {\n    lexer.nextToken();\n    setContext(context);\n    return object;\n  }\n else   if (lexer.token() == JSONToken.COMMA) {\n    continue;\n  }\n else {\n    throw new JSONException(\"syntax error, \" + lexer.tokenName());\n  }\n}\n else {\n  lexer.nextToken();\n  value=parse();\n  if (object.getClass() == JSONObject.class) {\n    key=key.toString();\n  }\n  object.put(key,value);\n  if (lexer.token() == JSONToken.RBRACE) {\n    lexer.nextToken();\n    return object;\n  }\n else   if (lexer.token() == JSONToken.COMMA) {\n    continue;\n  }\n else {\n    throw new JSONException(\"syntax error, position at \" + lexer.pos() + \", name \"+ key);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 336,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4048,
        "startLineNumber" : 392,
        "startColumnNumber" : 16,
        "endLineNumber" : 486,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (ch == '\"') {\n  lexer.scanString();\n  String strValue=lexer.stringVal();\n  value=strValue;\n  if (lexer.isEnabled(Feature.AllowISO8601DateFormat)) {\n    JSONScanner iso8601Lexer=new JSONScanner(strValue);\n    if (iso8601Lexer.scanISO8601DateIfMatch()) {\n      value=iso8601Lexer.getCalendar().getTime();\n    }\n    iso8601Lexer.close();\n  }\n  object.put(key,value);\n}\n else if (ch >= '0' && ch <= '9' || ch == '-') {\n  lexer.scanNumber();\n  if (lexer.token() == JSONToken.LITERAL_INT) {\n    value=lexer.integerValue();\n  }\n else {\n    value=lexer.decimalValue(isEnabled(Feature.UseBigDecimal));\n  }\n  object.put(key,value);\n}\n else if (ch == '[') {\n  lexer.nextToken();\n  JSONArray list=new JSONArray();\n  this.parseArray(list,key);\n  value=list;\n  object.put(key,value);\n  if (lexer.token() == JSONToken.RBRACE) {\n    lexer.nextToken();\n    return object;\n  }\n else   if (lexer.token() == JSONToken.COMMA) {\n    continue;\n  }\n else {\n    throw new JSONException(\"syntax error\");\n  }\n}\n else if (ch == '{') {\n  lexer.nextToken();\n  final boolean parentIsArray=fieldName != null && fieldName.getClass() == Integer.class;\n  JSONObject input=new JSONObject();\n  ParseContext ctxLocal=null;\n  if (!parentIsArray) {\n    ctxLocal=setContext(context,input,key);\n  }\n  Object obj=this.parseObject(input,key);\n  if (ctxLocal != null && input != obj) {\n    ctxLocal.setObject(object);\n  }\n  checkMapResolve(object,key.toString());\n  if (object.getClass() == JSONObject.class) {\n    object.put(key.toString(),obj);\n  }\n else {\n    object.put(key,obj);\n  }\n  if (parentIsArray) {\n    setContext(context,obj,key);\n  }\n  if (lexer.token() == JSONToken.RBRACE) {\n    lexer.nextToken();\n    setContext(context);\n    return object;\n  }\n else   if (lexer.token() == JSONToken.COMMA) {\n    continue;\n  }\n else {\n    throw new JSONException(\"syntax error, \" + lexer.tokenName());\n  }\n}\n else {\n  lexer.nextToken();\n  value=parse();\n  if (object.getClass() == JSONObject.class) {\n    key=key.toString();\n  }\n  object.put(key,value);\n  if (lexer.token() == JSONToken.RBRACE) {\n    lexer.nextToken();\n    return object;\n  }\n else   if (lexer.token() == JSONToken.COMMA) {\n    continue;\n  }\n else {\n    throw new JSONException(\"syntax error, position at \" + lexer.pos() + \", name \"+ key);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 397,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 13486,
        "startLineNumber" : 201,
        "startColumnNumber" : 21,
        "endLineNumber" : 505,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  lexer.skipWhitespace();\n  char ch=lexer.getCurrent();\n  if (isEnabled(Feature.AllowArbitraryCommas)) {\n    while (ch == ',') {\n      lexer.next();\n      lexer.skipWhitespace();\n      ch=lexer.getCurrent();\n    }\n  }\n  boolean isObjectKey=false;\n  Object key;\n  if (ch == '\"') {\n    key=lexer.scanSymbol(symbolTable,'\"');\n    lexer.skipWhitespace();\n    ch=lexer.getCurrent();\n    if (ch != ':') {\n      throw new JSONException(\"expect ':' at \" + lexer.pos() + \", name \"+ key);\n    }\n  }\n else   if (ch == '}') {\n    lexer.next();\n    lexer.resetStringPosition();\n    lexer.nextToken();\n    return object;\n  }\n else   if (ch == '\\'') {\n    if (!isEnabled(Feature.AllowSingleQuotes)) {\n      throw new JSONException(\"syntax error\");\n    }\n    key=lexer.scanSymbol(symbolTable,'\\'');\n    lexer.skipWhitespace();\n    ch=lexer.getCurrent();\n    if (ch != ':') {\n      throw new JSONException(\"expect ':' at \" + lexer.pos());\n    }\n  }\n else   if (ch == EOI) {\n    throw new JSONException(\"syntax error\");\n  }\n else   if (ch == ',') {\n    throw new JSONException(\"syntax error\");\n  }\n else   if ((ch >= '0' && ch <= '9') || ch == '-') {\n    lexer.resetStringPosition();\n    lexer.scanNumber();\n    if (lexer.token() == JSONToken.LITERAL_INT) {\n      key=lexer.integerValue();\n    }\n else {\n      key=lexer.decimalValue(true);\n    }\n    ch=lexer.getCurrent();\n    if (ch != ':') {\n      throw new JSONException(\"expect ':' at \" + lexer.pos() + \", name \"+ key);\n    }\n  }\n else   if (ch == '{' || ch == '[') {\n    lexer.nextToken();\n    key=parse();\n    isObjectKey=true;\n  }\n else {\n    if (!isEnabled(Feature.AllowUnQuotedFieldNames)) {\n      throw new JSONException(\"syntax error\");\n    }\n    key=lexer.scanSymbolUnQuoted(symbolTable);\n    lexer.skipWhitespace();\n    ch=lexer.getCurrent();\n    if (ch != ':') {\n      throw new JSONException(\"expect ':' at \" + lexer.pos() + \", actual \"+ ch);\n    }\n  }\n  if (!isObjectKey) {\n    lexer.next();\n    lexer.skipWhitespace();\n  }\n  ch=lexer.getCurrent();\n  lexer.resetStringPosition();\n  if (key == JSON.DEFAULT_TYPE_KEY) {\n    String typeName=lexer.scanSymbol(symbolTable,'\"');\n    Class<?> clazz=TypeUtils.loadClass(typeName);\n    if (clazz == null) {\n      object.put(JSON.DEFAULT_TYPE_KEY,typeName);\n      continue;\n    }\n    lexer.nextToken(JSONToken.COMMA);\n    if (lexer.token() == JSONToken.RBRACE) {\n      lexer.nextToken(JSONToken.COMMA);\n      try {\n        Object instance=null;\n        ObjectDeserializer deserializer=this.config.getDeserializer(clazz);\n        if (deserializer instanceof ASMJavaBeanDeserializer) {\n          instance=((ASMJavaBeanDeserializer)deserializer).createInstance(this,clazz);\n        }\n else         if (deserializer instanceof JavaBeanDeserializer) {\n          instance=((JavaBeanDeserializer)deserializer).createInstance(this,clazz);\n        }\n        if (instance == null) {\n          if (clazz == Cloneable.class) {\n            instance=new HashMap();\n          }\n else {\n            instance=clazz.newInstance();\n          }\n        }\n        return instance;\n      }\n catch (      Exception e) {\n        throw new JSONException(\"create instance error\",e);\n      }\n    }\n    this.setResolveStatus(TypeNameRedirect);\n    if (this.context != null && !(fieldName instanceof Integer)) {\n      this.popContext();\n    }\n    ObjectDeserializer deserializer=config.getDeserializer(clazz);\n    return deserializer.deserialze(this,clazz,fieldName);\n  }\n  if (key == \"$ref\") {\n    lexer.nextToken(JSONToken.LITERAL_STRING);\n    if (lexer.token() == JSONToken.LITERAL_STRING) {\n      String ref=lexer.stringVal();\n      lexer.nextToken(JSONToken.RBRACE);\n      Object refValue=null;\n      if (\"@\".equals(ref)) {\n        if (this.getContext() != null) {\n          ParseContext thisContext=this.getContext();\n          Object thisObj=thisContext.getObject();\n          if (thisObj instanceof Object[] || thisObj instanceof Collection<?>) {\n            refValue=thisObj;\n          }\n else           if (thisContext.getParentContext() != null) {\n            refValue=thisContext.getParentContext().getObject();\n          }\n        }\n      }\n else       if (\"..\".equals(ref)) {\n        ParseContext parentContext=context.getParentContext();\n        if (parentContext.getObject() != null) {\n          refValue=parentContext.getObject();\n        }\n else {\n          addResolveTask(new ResolveTask(parentContext,ref));\n          setResolveStatus(DefaultJSONParser.NeedToResolve);\n        }\n      }\n else       if (\"$\".equals(ref)) {\n        ParseContext rootContext=context;\n        while (rootContext.getParentContext() != null) {\n          rootContext=rootContext.getParentContext();\n        }\n        if (rootContext.getObject() != null) {\n          refValue=rootContext.getObject();\n        }\n else {\n          addResolveTask(new ResolveTask(rootContext,ref));\n          setResolveStatus(DefaultJSONParser.NeedToResolve);\n        }\n      }\n else {\n        addResolveTask(new ResolveTask(context,ref));\n        setResolveStatus(DefaultJSONParser.NeedToResolve);\n      }\n      if (lexer.token() != JSONToken.RBRACE) {\n        throw new JSONException(\"syntax error\");\n      }\n      lexer.nextToken(JSONToken.COMMA);\n      return refValue;\n    }\n else {\n      throw new JSONException(\"illegal ref, \" + JSONToken.name(lexer.token()));\n    }\n  }\n  if (!setContextFlag) {\n    setContext(object,fieldName);\n    setContextFlag=true;\n    if (this.context != null && !(fieldName instanceof Integer)) {\n      this.popContext();\n    }\n  }\n  if (object.getClass() == JSONObject.class) {\n    key=(key == null) ? \"null\" : key.toString();\n  }\n  Object value;\n  if (ch == '\"') {\n    lexer.scanString();\n    String strValue=lexer.stringVal();\n    value=strValue;\n    if (lexer.isEnabled(Feature.AllowISO8601DateFormat)) {\n      JSONScanner iso8601Lexer=new JSONScanner(strValue);\n      if (iso8601Lexer.scanISO8601DateIfMatch()) {\n        value=iso8601Lexer.getCalendar().getTime();\n      }\n      iso8601Lexer.close();\n    }\n    object.put(key,value);\n  }\n else   if (ch >= '0' && ch <= '9' || ch == '-') {\n    lexer.scanNumber();\n    if (lexer.token() == JSONToken.LITERAL_INT) {\n      value=lexer.integerValue();\n    }\n else {\n      value=lexer.decimalValue(isEnabled(Feature.UseBigDecimal));\n    }\n    object.put(key,value);\n  }\n else   if (ch == '[') {\n    lexer.nextToken();\n    JSONArray list=new JSONArray();\n    this.parseArray(list,key);\n    value=list;\n    object.put(key,value);\n    if (lexer.token() == JSONToken.RBRACE) {\n      lexer.nextToken();\n      return object;\n    }\n else     if (lexer.token() == JSONToken.COMMA) {\n      continue;\n    }\n else {\n      throw new JSONException(\"syntax error\");\n    }\n  }\n else   if (ch == '{') {\n    lexer.nextToken();\n    final boolean parentIsArray=fieldName != null && fieldName.getClass() == Integer.class;\n    JSONObject input=new JSONObject();\n    ParseContext ctxLocal=null;\n    if (!parentIsArray) {\n      ctxLocal=setContext(context,input,key);\n    }\n    Object obj=this.parseObject(input,key);\n    if (ctxLocal != null && input != obj) {\n      ctxLocal.setObject(object);\n    }\n    checkMapResolve(object,key.toString());\n    if (object.getClass() == JSONObject.class) {\n      object.put(key.toString(),obj);\n    }\n else {\n      object.put(key,obj);\n    }\n    if (parentIsArray) {\n      setContext(context,obj,key);\n    }\n    if (lexer.token() == JSONToken.RBRACE) {\n      lexer.nextToken();\n      setContext(context);\n      return object;\n    }\n else     if (lexer.token() == JSONToken.COMMA) {\n      continue;\n    }\n else {\n      throw new JSONException(\"syntax error, \" + lexer.tokenName());\n    }\n  }\n else {\n    lexer.nextToken();\n    value=parse();\n    if (object.getClass() == JSONObject.class) {\n      key=key.toString();\n    }\n    object.put(key,value);\n    if (lexer.token() == JSONToken.RBRACE) {\n      lexer.nextToken();\n      return object;\n    }\n else     if (lexer.token() == JSONToken.COMMA) {\n      continue;\n    }\n else {\n      throw new JSONException(\"syntax error, position at \" + lexer.pos() + \", name \"+ key);\n    }\n  }\n  lexer.skipWhitespace();\n  ch=lexer.getCurrent();\n  if (ch == ',') {\n    lexer.next();\n    continue;\n  }\n else   if (ch == '}') {\n    lexer.next();\n    lexer.resetStringPosition();\n    lexer.nextToken();\n    this.setContext(object,fieldName);\n    return object;\n  }\n else {\n    throw new JSONException(\"syntax error, position at \" + lexer.pos() + \", name \"+ key);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1294,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 13495,
        "startLineNumber" : 201,
        "startColumnNumber" : 12,
        "endLineNumber" : 505,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (; ; ) {\n  lexer.skipWhitespace();\n  char ch=lexer.getCurrent();\n  if (isEnabled(Feature.AllowArbitraryCommas)) {\n    while (ch == ',') {\n      lexer.next();\n      lexer.skipWhitespace();\n      ch=lexer.getCurrent();\n    }\n  }\n  boolean isObjectKey=false;\n  Object key;\n  if (ch == '\"') {\n    key=lexer.scanSymbol(symbolTable,'\"');\n    lexer.skipWhitespace();\n    ch=lexer.getCurrent();\n    if (ch != ':') {\n      throw new JSONException(\"expect ':' at \" + lexer.pos() + \", name \"+ key);\n    }\n  }\n else   if (ch == '}') {\n    lexer.next();\n    lexer.resetStringPosition();\n    lexer.nextToken();\n    return object;\n  }\n else   if (ch == '\\'') {\n    if (!isEnabled(Feature.AllowSingleQuotes)) {\n      throw new JSONException(\"syntax error\");\n    }\n    key=lexer.scanSymbol(symbolTable,'\\'');\n    lexer.skipWhitespace();\n    ch=lexer.getCurrent();\n    if (ch != ':') {\n      throw new JSONException(\"expect ':' at \" + lexer.pos());\n    }\n  }\n else   if (ch == EOI) {\n    throw new JSONException(\"syntax error\");\n  }\n else   if (ch == ',') {\n    throw new JSONException(\"syntax error\");\n  }\n else   if ((ch >= '0' && ch <= '9') || ch == '-') {\n    lexer.resetStringPosition();\n    lexer.scanNumber();\n    if (lexer.token() == JSONToken.LITERAL_INT) {\n      key=lexer.integerValue();\n    }\n else {\n      key=lexer.decimalValue(true);\n    }\n    ch=lexer.getCurrent();\n    if (ch != ':') {\n      throw new JSONException(\"expect ':' at \" + lexer.pos() + \", name \"+ key);\n    }\n  }\n else   if (ch == '{' || ch == '[') {\n    lexer.nextToken();\n    key=parse();\n    isObjectKey=true;\n  }\n else {\n    if (!isEnabled(Feature.AllowUnQuotedFieldNames)) {\n      throw new JSONException(\"syntax error\");\n    }\n    key=lexer.scanSymbolUnQuoted(symbolTable);\n    lexer.skipWhitespace();\n    ch=lexer.getCurrent();\n    if (ch != ':') {\n      throw new JSONException(\"expect ':' at \" + lexer.pos() + \", actual \"+ ch);\n    }\n  }\n  if (!isObjectKey) {\n    lexer.next();\n    lexer.skipWhitespace();\n  }\n  ch=lexer.getCurrent();\n  lexer.resetStringPosition();\n  if (key == JSON.DEFAULT_TYPE_KEY) {\n    String typeName=lexer.scanSymbol(symbolTable,'\"');\n    Class<?> clazz=TypeUtils.loadClass(typeName);\n    if (clazz == null) {\n      object.put(JSON.DEFAULT_TYPE_KEY,typeName);\n      continue;\n    }\n    lexer.nextToken(JSONToken.COMMA);\n    if (lexer.token() == JSONToken.RBRACE) {\n      lexer.nextToken(JSONToken.COMMA);\n      try {\n        Object instance=null;\n        ObjectDeserializer deserializer=this.config.getDeserializer(clazz);\n        if (deserializer instanceof ASMJavaBeanDeserializer) {\n          instance=((ASMJavaBeanDeserializer)deserializer).createInstance(this,clazz);\n        }\n else         if (deserializer instanceof JavaBeanDeserializer) {\n          instance=((JavaBeanDeserializer)deserializer).createInstance(this,clazz);\n        }\n        if (instance == null) {\n          if (clazz == Cloneable.class) {\n            instance=new HashMap();\n          }\n else {\n            instance=clazz.newInstance();\n          }\n        }\n        return instance;\n      }\n catch (      Exception e) {\n        throw new JSONException(\"create instance error\",e);\n      }\n    }\n    this.setResolveStatus(TypeNameRedirect);\n    if (this.context != null && !(fieldName instanceof Integer)) {\n      this.popContext();\n    }\n    ObjectDeserializer deserializer=config.getDeserializer(clazz);\n    return deserializer.deserialze(this,clazz,fieldName);\n  }\n  if (key == \"$ref\") {\n    lexer.nextToken(JSONToken.LITERAL_STRING);\n    if (lexer.token() == JSONToken.LITERAL_STRING) {\n      String ref=lexer.stringVal();\n      lexer.nextToken(JSONToken.RBRACE);\n      Object refValue=null;\n      if (\"@\".equals(ref)) {\n        if (this.getContext() != null) {\n          ParseContext thisContext=this.getContext();\n          Object thisObj=thisContext.getObject();\n          if (thisObj instanceof Object[] || thisObj instanceof Collection<?>) {\n            refValue=thisObj;\n          }\n else           if (thisContext.getParentContext() != null) {\n            refValue=thisContext.getParentContext().getObject();\n          }\n        }\n      }\n else       if (\"..\".equals(ref)) {\n        ParseContext parentContext=context.getParentContext();\n        if (parentContext.getObject() != null) {\n          refValue=parentContext.getObject();\n        }\n else {\n          addResolveTask(new ResolveTask(parentContext,ref));\n          setResolveStatus(DefaultJSONParser.NeedToResolve);\n        }\n      }\n else       if (\"$\".equals(ref)) {\n        ParseContext rootContext=context;\n        while (rootContext.getParentContext() != null) {\n          rootContext=rootContext.getParentContext();\n        }\n        if (rootContext.getObject() != null) {\n          refValue=rootContext.getObject();\n        }\n else {\n          addResolveTask(new ResolveTask(rootContext,ref));\n          setResolveStatus(DefaultJSONParser.NeedToResolve);\n        }\n      }\n else {\n        addResolveTask(new ResolveTask(context,ref));\n        setResolveStatus(DefaultJSONParser.NeedToResolve);\n      }\n      if (lexer.token() != JSONToken.RBRACE) {\n        throw new JSONException(\"syntax error\");\n      }\n      lexer.nextToken(JSONToken.COMMA);\n      return refValue;\n    }\n else {\n      throw new JSONException(\"illegal ref, \" + JSONToken.name(lexer.token()));\n    }\n  }\n  if (!setContextFlag) {\n    setContext(object,fieldName);\n    setContextFlag=true;\n    if (this.context != null && !(fieldName instanceof Integer)) {\n      this.popContext();\n    }\n  }\n  if (object.getClass() == JSONObject.class) {\n    key=(key == null) ? \"null\" : key.toString();\n  }\n  Object value;\n  if (ch == '\"') {\n    lexer.scanString();\n    String strValue=lexer.stringVal();\n    value=strValue;\n    if (lexer.isEnabled(Feature.AllowISO8601DateFormat)) {\n      JSONScanner iso8601Lexer=new JSONScanner(strValue);\n      if (iso8601Lexer.scanISO8601DateIfMatch()) {\n        value=iso8601Lexer.getCalendar().getTime();\n      }\n      iso8601Lexer.close();\n    }\n    object.put(key,value);\n  }\n else   if (ch >= '0' && ch <= '9' || ch == '-') {\n    lexer.scanNumber();\n    if (lexer.token() == JSONToken.LITERAL_INT) {\n      value=lexer.integerValue();\n    }\n else {\n      value=lexer.decimalValue(isEnabled(Feature.UseBigDecimal));\n    }\n    object.put(key,value);\n  }\n else   if (ch == '[') {\n    lexer.nextToken();\n    JSONArray list=new JSONArray();\n    this.parseArray(list,key);\n    value=list;\n    object.put(key,value);\n    if (lexer.token() == JSONToken.RBRACE) {\n      lexer.nextToken();\n      return object;\n    }\n else     if (lexer.token() == JSONToken.COMMA) {\n      continue;\n    }\n else {\n      throw new JSONException(\"syntax error\");\n    }\n  }\n else   if (ch == '{') {\n    lexer.nextToken();\n    final boolean parentIsArray=fieldName != null && fieldName.getClass() == Integer.class;\n    JSONObject input=new JSONObject();\n    ParseContext ctxLocal=null;\n    if (!parentIsArray) {\n      ctxLocal=setContext(context,input,key);\n    }\n    Object obj=this.parseObject(input,key);\n    if (ctxLocal != null && input != obj) {\n      ctxLocal.setObject(object);\n    }\n    checkMapResolve(object,key.toString());\n    if (object.getClass() == JSONObject.class) {\n      object.put(key.toString(),obj);\n    }\n else {\n      object.put(key,obj);\n    }\n    if (parentIsArray) {\n      setContext(context,obj,key);\n    }\n    if (lexer.token() == JSONToken.RBRACE) {\n      lexer.nextToken();\n      setContext(context);\n      return object;\n    }\n else     if (lexer.token() == JSONToken.COMMA) {\n      continue;\n    }\n else {\n      throw new JSONException(\"syntax error, \" + lexer.tokenName());\n    }\n  }\n else {\n    lexer.nextToken();\n    value=parse();\n    if (object.getClass() == JSONObject.class) {\n      key=key.toString();\n    }\n    object.put(key,value);\n    if (lexer.token() == JSONToken.RBRACE) {\n      lexer.nextToken();\n      return object;\n    }\n else     if (lexer.token() == JSONToken.COMMA) {\n      continue;\n    }\n else {\n      throw new JSONException(\"syntax error, position at \" + lexer.pos() + \", name \"+ key);\n    }\n  }\n  lexer.skipWhitespace();\n  ch=lexer.getCurrent();\n  if (ch == ',') {\n    lexer.next();\n    continue;\n  }\n else   if (ch == '}') {\n    lexer.next();\n    lexer.resetStringPosition();\n    lexer.nextToken();\n    this.setContext(object,fieldName);\n    return object;\n  }\n else {\n    throw new JSONException(\"syntax error, position at \" + lexer.pos() + \", name \"+ key);\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 1295,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 13566,
        "startLineNumber" : 199,
        "startColumnNumber" : 12,
        "endLineNumber" : 506,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  boolean setContextFlag=false;\n  for (; ; ) {\n    lexer.skipWhitespace();\n    char ch=lexer.getCurrent();\n    if (isEnabled(Feature.AllowArbitraryCommas)) {\n      while (ch == ',') {\n        lexer.next();\n        lexer.skipWhitespace();\n        ch=lexer.getCurrent();\n      }\n    }\n    boolean isObjectKey=false;\n    Object key;\n    if (ch == '\"') {\n      key=lexer.scanSymbol(symbolTable,'\"');\n      lexer.skipWhitespace();\n      ch=lexer.getCurrent();\n      if (ch != ':') {\n        throw new JSONException(\"expect ':' at \" + lexer.pos() + \", name \"+ key);\n      }\n    }\n else     if (ch == '}') {\n      lexer.next();\n      lexer.resetStringPosition();\n      lexer.nextToken();\n      return object;\n    }\n else     if (ch == '\\'') {\n      if (!isEnabled(Feature.AllowSingleQuotes)) {\n        throw new JSONException(\"syntax error\");\n      }\n      key=lexer.scanSymbol(symbolTable,'\\'');\n      lexer.skipWhitespace();\n      ch=lexer.getCurrent();\n      if (ch != ':') {\n        throw new JSONException(\"expect ':' at \" + lexer.pos());\n      }\n    }\n else     if (ch == EOI) {\n      throw new JSONException(\"syntax error\");\n    }\n else     if (ch == ',') {\n      throw new JSONException(\"syntax error\");\n    }\n else     if ((ch >= '0' && ch <= '9') || ch == '-') {\n      lexer.resetStringPosition();\n      lexer.scanNumber();\n      if (lexer.token() == JSONToken.LITERAL_INT) {\n        key=lexer.integerValue();\n      }\n else {\n        key=lexer.decimalValue(true);\n      }\n      ch=lexer.getCurrent();\n      if (ch != ':') {\n        throw new JSONException(\"expect ':' at \" + lexer.pos() + \", name \"+ key);\n      }\n    }\n else     if (ch == '{' || ch == '[') {\n      lexer.nextToken();\n      key=parse();\n      isObjectKey=true;\n    }\n else {\n      if (!isEnabled(Feature.AllowUnQuotedFieldNames)) {\n        throw new JSONException(\"syntax error\");\n      }\n      key=lexer.scanSymbolUnQuoted(symbolTable);\n      lexer.skipWhitespace();\n      ch=lexer.getCurrent();\n      if (ch != ':') {\n        throw new JSONException(\"expect ':' at \" + lexer.pos() + \", actual \"+ ch);\n      }\n    }\n    if (!isObjectKey) {\n      lexer.next();\n      lexer.skipWhitespace();\n    }\n    ch=lexer.getCurrent();\n    lexer.resetStringPosition();\n    if (key == JSON.DEFAULT_TYPE_KEY) {\n      String typeName=lexer.scanSymbol(symbolTable,'\"');\n      Class<?> clazz=TypeUtils.loadClass(typeName);\n      if (clazz == null) {\n        object.put(JSON.DEFAULT_TYPE_KEY,typeName);\n        continue;\n      }\n      lexer.nextToken(JSONToken.COMMA);\n      if (lexer.token() == JSONToken.RBRACE) {\n        lexer.nextToken(JSONToken.COMMA);\n        try {\n          Object instance=null;\n          ObjectDeserializer deserializer=this.config.getDeserializer(clazz);\n          if (deserializer instanceof ASMJavaBeanDeserializer) {\n            instance=((ASMJavaBeanDeserializer)deserializer).createInstance(this,clazz);\n          }\n else           if (deserializer instanceof JavaBeanDeserializer) {\n            instance=((JavaBeanDeserializer)deserializer).createInstance(this,clazz);\n          }\n          if (instance == null) {\n            if (clazz == Cloneable.class) {\n              instance=new HashMap();\n            }\n else {\n              instance=clazz.newInstance();\n            }\n          }\n          return instance;\n        }\n catch (        Exception e) {\n          throw new JSONException(\"create instance error\",e);\n        }\n      }\n      this.setResolveStatus(TypeNameRedirect);\n      if (this.context != null && !(fieldName instanceof Integer)) {\n        this.popContext();\n      }\n      ObjectDeserializer deserializer=config.getDeserializer(clazz);\n      return deserializer.deserialze(this,clazz,fieldName);\n    }\n    if (key == \"$ref\") {\n      lexer.nextToken(JSONToken.LITERAL_STRING);\n      if (lexer.token() == JSONToken.LITERAL_STRING) {\n        String ref=lexer.stringVal();\n        lexer.nextToken(JSONToken.RBRACE);\n        Object refValue=null;\n        if (\"@\".equals(ref)) {\n          if (this.getContext() != null) {\n            ParseContext thisContext=this.getContext();\n            Object thisObj=thisContext.getObject();\n            if (thisObj instanceof Object[] || thisObj instanceof Collection<?>) {\n              refValue=thisObj;\n            }\n else             if (thisContext.getParentContext() != null) {\n              refValue=thisContext.getParentContext().getObject();\n            }\n          }\n        }\n else         if (\"..\".equals(ref)) {\n          ParseContext parentContext=context.getParentContext();\n          if (parentContext.getObject() != null) {\n            refValue=parentContext.getObject();\n          }\n else {\n            addResolveTask(new ResolveTask(parentContext,ref));\n            setResolveStatus(DefaultJSONParser.NeedToResolve);\n          }\n        }\n else         if (\"$\".equals(ref)) {\n          ParseContext rootContext=context;\n          while (rootContext.getParentContext() != null) {\n            rootContext=rootContext.getParentContext();\n          }\n          if (rootContext.getObject() != null) {\n            refValue=rootContext.getObject();\n          }\n else {\n            addResolveTask(new ResolveTask(rootContext,ref));\n            setResolveStatus(DefaultJSONParser.NeedToResolve);\n          }\n        }\n else {\n          addResolveTask(new ResolveTask(context,ref));\n          setResolveStatus(DefaultJSONParser.NeedToResolve);\n        }\n        if (lexer.token() != JSONToken.RBRACE) {\n          throw new JSONException(\"syntax error\");\n        }\n        lexer.nextToken(JSONToken.COMMA);\n        return refValue;\n      }\n else {\n        throw new JSONException(\"illegal ref, \" + JSONToken.name(lexer.token()));\n      }\n    }\n    if (!setContextFlag) {\n      setContext(object,fieldName);\n      setContextFlag=true;\n      if (this.context != null && !(fieldName instanceof Integer)) {\n        this.popContext();\n      }\n    }\n    if (object.getClass() == JSONObject.class) {\n      key=(key == null) ? \"null\" : key.toString();\n    }\n    Object value;\n    if (ch == '\"') {\n      lexer.scanString();\n      String strValue=lexer.stringVal();\n      value=strValue;\n      if (lexer.isEnabled(Feature.AllowISO8601DateFormat)) {\n        JSONScanner iso8601Lexer=new JSONScanner(strValue);\n        if (iso8601Lexer.scanISO8601DateIfMatch()) {\n          value=iso8601Lexer.getCalendar().getTime();\n        }\n        iso8601Lexer.close();\n      }\n      object.put(key,value);\n    }\n else     if (ch >= '0' && ch <= '9' || ch == '-') {\n      lexer.scanNumber();\n      if (lexer.token() == JSONToken.LITERAL_INT) {\n        value=lexer.integerValue();\n      }\n else {\n        value=lexer.decimalValue(isEnabled(Feature.UseBigDecimal));\n      }\n      object.put(key,value);\n    }\n else     if (ch == '[') {\n      lexer.nextToken();\n      JSONArray list=new JSONArray();\n      this.parseArray(list,key);\n      value=list;\n      object.put(key,value);\n      if (lexer.token() == JSONToken.RBRACE) {\n        lexer.nextToken();\n        return object;\n      }\n else       if (lexer.token() == JSONToken.COMMA) {\n        continue;\n      }\n else {\n        throw new JSONException(\"syntax error\");\n      }\n    }\n else     if (ch == '{') {\n      lexer.nextToken();\n      final boolean parentIsArray=fieldName != null && fieldName.getClass() == Integer.class;\n      JSONObject input=new JSONObject();\n      ParseContext ctxLocal=null;\n      if (!parentIsArray) {\n        ctxLocal=setContext(context,input,key);\n      }\n      Object obj=this.parseObject(input,key);\n      if (ctxLocal != null && input != obj) {\n        ctxLocal.setObject(object);\n      }\n      checkMapResolve(object,key.toString());\n      if (object.getClass() == JSONObject.class) {\n        object.put(key.toString(),obj);\n      }\n else {\n        object.put(key,obj);\n      }\n      if (parentIsArray) {\n        setContext(context,obj,key);\n      }\n      if (lexer.token() == JSONToken.RBRACE) {\n        lexer.nextToken();\n        setContext(context);\n        return object;\n      }\n else       if (lexer.token() == JSONToken.COMMA) {\n        continue;\n      }\n else {\n        throw new JSONException(\"syntax error, \" + lexer.tokenName());\n      }\n    }\n else {\n      lexer.nextToken();\n      value=parse();\n      if (object.getClass() == JSONObject.class) {\n        key=key.toString();\n      }\n      object.put(key,value);\n      if (lexer.token() == JSONToken.RBRACE) {\n        lexer.nextToken();\n        return object;\n      }\n else       if (lexer.token() == JSONToken.COMMA) {\n        continue;\n      }\n else {\n        throw new JSONException(\"syntax error, position at \" + lexer.pos() + \", name \"+ key);\n      }\n    }\n    lexer.skipWhitespace();\n    ch=lexer.getCurrent();\n    if (ch == ',') {\n      lexer.next();\n      continue;\n    }\n else     if (ch == '}') {\n      lexer.next();\n      lexer.resetStringPosition();\n      lexer.nextToken();\n      this.setContext(object,fieldName);\n      return object;\n    }\n else {\n      throw new JSONException(\"syntax error, position at \" + lexer.pos() + \", name \"+ key);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1301,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 13630,
        "startLineNumber" : 199,
        "startColumnNumber" : 8,
        "endLineNumber" : 508,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  boolean setContextFlag=false;\n  for (; ; ) {\n    lexer.skipWhitespace();\n    char ch=lexer.getCurrent();\n    if (isEnabled(Feature.AllowArbitraryCommas)) {\n      while (ch == ',') {\n        lexer.next();\n        lexer.skipWhitespace();\n        ch=lexer.getCurrent();\n      }\n    }\n    boolean isObjectKey=false;\n    Object key;\n    if (ch == '\"') {\n      key=lexer.scanSymbol(symbolTable,'\"');\n      lexer.skipWhitespace();\n      ch=lexer.getCurrent();\n      if (ch != ':') {\n        throw new JSONException(\"expect ':' at \" + lexer.pos() + \", name \"+ key);\n      }\n    }\n else     if (ch == '}') {\n      lexer.next();\n      lexer.resetStringPosition();\n      lexer.nextToken();\n      return object;\n    }\n else     if (ch == '\\'') {\n      if (!isEnabled(Feature.AllowSingleQuotes)) {\n        throw new JSONException(\"syntax error\");\n      }\n      key=lexer.scanSymbol(symbolTable,'\\'');\n      lexer.skipWhitespace();\n      ch=lexer.getCurrent();\n      if (ch != ':') {\n        throw new JSONException(\"expect ':' at \" + lexer.pos());\n      }\n    }\n else     if (ch == EOI) {\n      throw new JSONException(\"syntax error\");\n    }\n else     if (ch == ',') {\n      throw new JSONException(\"syntax error\");\n    }\n else     if ((ch >= '0' && ch <= '9') || ch == '-') {\n      lexer.resetStringPosition();\n      lexer.scanNumber();\n      if (lexer.token() == JSONToken.LITERAL_INT) {\n        key=lexer.integerValue();\n      }\n else {\n        key=lexer.decimalValue(true);\n      }\n      ch=lexer.getCurrent();\n      if (ch != ':') {\n        throw new JSONException(\"expect ':' at \" + lexer.pos() + \", name \"+ key);\n      }\n    }\n else     if (ch == '{' || ch == '[') {\n      lexer.nextToken();\n      key=parse();\n      isObjectKey=true;\n    }\n else {\n      if (!isEnabled(Feature.AllowUnQuotedFieldNames)) {\n        throw new JSONException(\"syntax error\");\n      }\n      key=lexer.scanSymbolUnQuoted(symbolTable);\n      lexer.skipWhitespace();\n      ch=lexer.getCurrent();\n      if (ch != ':') {\n        throw new JSONException(\"expect ':' at \" + lexer.pos() + \", actual \"+ ch);\n      }\n    }\n    if (!isObjectKey) {\n      lexer.next();\n      lexer.skipWhitespace();\n    }\n    ch=lexer.getCurrent();\n    lexer.resetStringPosition();\n    if (key == JSON.DEFAULT_TYPE_KEY) {\n      String typeName=lexer.scanSymbol(symbolTable,'\"');\n      Class<?> clazz=TypeUtils.loadClass(typeName);\n      if (clazz == null) {\n        object.put(JSON.DEFAULT_TYPE_KEY,typeName);\n        continue;\n      }\n      lexer.nextToken(JSONToken.COMMA);\n      if (lexer.token() == JSONToken.RBRACE) {\n        lexer.nextToken(JSONToken.COMMA);\n        try {\n          Object instance=null;\n          ObjectDeserializer deserializer=this.config.getDeserializer(clazz);\n          if (deserializer instanceof ASMJavaBeanDeserializer) {\n            instance=((ASMJavaBeanDeserializer)deserializer).createInstance(this,clazz);\n          }\n else           if (deserializer instanceof JavaBeanDeserializer) {\n            instance=((JavaBeanDeserializer)deserializer).createInstance(this,clazz);\n          }\n          if (instance == null) {\n            if (clazz == Cloneable.class) {\n              instance=new HashMap();\n            }\n else {\n              instance=clazz.newInstance();\n            }\n          }\n          return instance;\n        }\n catch (        Exception e) {\n          throw new JSONException(\"create instance error\",e);\n        }\n      }\n      this.setResolveStatus(TypeNameRedirect);\n      if (this.context != null && !(fieldName instanceof Integer)) {\n        this.popContext();\n      }\n      ObjectDeserializer deserializer=config.getDeserializer(clazz);\n      return deserializer.deserialze(this,clazz,fieldName);\n    }\n    if (key == \"$ref\") {\n      lexer.nextToken(JSONToken.LITERAL_STRING);\n      if (lexer.token() == JSONToken.LITERAL_STRING) {\n        String ref=lexer.stringVal();\n        lexer.nextToken(JSONToken.RBRACE);\n        Object refValue=null;\n        if (\"@\".equals(ref)) {\n          if (this.getContext() != null) {\n            ParseContext thisContext=this.getContext();\n            Object thisObj=thisContext.getObject();\n            if (thisObj instanceof Object[] || thisObj instanceof Collection<?>) {\n              refValue=thisObj;\n            }\n else             if (thisContext.getParentContext() != null) {\n              refValue=thisContext.getParentContext().getObject();\n            }\n          }\n        }\n else         if (\"..\".equals(ref)) {\n          ParseContext parentContext=context.getParentContext();\n          if (parentContext.getObject() != null) {\n            refValue=parentContext.getObject();\n          }\n else {\n            addResolveTask(new ResolveTask(parentContext,ref));\n            setResolveStatus(DefaultJSONParser.NeedToResolve);\n          }\n        }\n else         if (\"$\".equals(ref)) {\n          ParseContext rootContext=context;\n          while (rootContext.getParentContext() != null) {\n            rootContext=rootContext.getParentContext();\n          }\n          if (rootContext.getObject() != null) {\n            refValue=rootContext.getObject();\n          }\n else {\n            addResolveTask(new ResolveTask(rootContext,ref));\n            setResolveStatus(DefaultJSONParser.NeedToResolve);\n          }\n        }\n else {\n          addResolveTask(new ResolveTask(context,ref));\n          setResolveStatus(DefaultJSONParser.NeedToResolve);\n        }\n        if (lexer.token() != JSONToken.RBRACE) {\n          throw new JSONException(\"syntax error\");\n        }\n        lexer.nextToken(JSONToken.COMMA);\n        return refValue;\n      }\n else {\n        throw new JSONException(\"illegal ref, \" + JSONToken.name(lexer.token()));\n      }\n    }\n    if (!setContextFlag) {\n      setContext(object,fieldName);\n      setContextFlag=true;\n      if (this.context != null && !(fieldName instanceof Integer)) {\n        this.popContext();\n      }\n    }\n    if (object.getClass() == JSONObject.class) {\n      key=(key == null) ? \"null\" : key.toString();\n    }\n    Object value;\n    if (ch == '\"') {\n      lexer.scanString();\n      String strValue=lexer.stringVal();\n      value=strValue;\n      if (lexer.isEnabled(Feature.AllowISO8601DateFormat)) {\n        JSONScanner iso8601Lexer=new JSONScanner(strValue);\n        if (iso8601Lexer.scanISO8601DateIfMatch()) {\n          value=iso8601Lexer.getCalendar().getTime();\n        }\n        iso8601Lexer.close();\n      }\n      object.put(key,value);\n    }\n else     if (ch >= '0' && ch <= '9' || ch == '-') {\n      lexer.scanNumber();\n      if (lexer.token() == JSONToken.LITERAL_INT) {\n        value=lexer.integerValue();\n      }\n else {\n        value=lexer.decimalValue(isEnabled(Feature.UseBigDecimal));\n      }\n      object.put(key,value);\n    }\n else     if (ch == '[') {\n      lexer.nextToken();\n      JSONArray list=new JSONArray();\n      this.parseArray(list,key);\n      value=list;\n      object.put(key,value);\n      if (lexer.token() == JSONToken.RBRACE) {\n        lexer.nextToken();\n        return object;\n      }\n else       if (lexer.token() == JSONToken.COMMA) {\n        continue;\n      }\n else {\n        throw new JSONException(\"syntax error\");\n      }\n    }\n else     if (ch == '{') {\n      lexer.nextToken();\n      final boolean parentIsArray=fieldName != null && fieldName.getClass() == Integer.class;\n      JSONObject input=new JSONObject();\n      ParseContext ctxLocal=null;\n      if (!parentIsArray) {\n        ctxLocal=setContext(context,input,key);\n      }\n      Object obj=this.parseObject(input,key);\n      if (ctxLocal != null && input != obj) {\n        ctxLocal.setObject(object);\n      }\n      checkMapResolve(object,key.toString());\n      if (object.getClass() == JSONObject.class) {\n        object.put(key.toString(),obj);\n      }\n else {\n        object.put(key,obj);\n      }\n      if (parentIsArray) {\n        setContext(context,obj,key);\n      }\n      if (lexer.token() == JSONToken.RBRACE) {\n        lexer.nextToken();\n        setContext(context);\n        return object;\n      }\n else       if (lexer.token() == JSONToken.COMMA) {\n        continue;\n      }\n else {\n        throw new JSONException(\"syntax error, \" + lexer.tokenName());\n      }\n    }\n else {\n      lexer.nextToken();\n      value=parse();\n      if (object.getClass() == JSONObject.class) {\n        key=key.toString();\n      }\n      object.put(key,value);\n      if (lexer.token() == JSONToken.RBRACE) {\n        lexer.nextToken();\n        return object;\n      }\n else       if (lexer.token() == JSONToken.COMMA) {\n        continue;\n      }\n else {\n        throw new JSONException(\"syntax error, position at \" + lexer.pos() + \", name \"+ key);\n      }\n    }\n    lexer.skipWhitespace();\n    ch=lexer.getCurrent();\n    if (ch == ',') {\n      lexer.next();\n      continue;\n    }\n else     if (ch == '}') {\n      lexer.next();\n      lexer.resetStringPosition();\n      lexer.nextToken();\n      this.setContext(object,fieldName);\n      return object;\n    }\n else {\n      throw new JSONException(\"syntax error, position at \" + lexer.pos() + \", name \"+ key);\n    }\n  }\n}\n  finally {\n  this.setContext(context);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 1308,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 13940,
        "startLineNumber" : 191,
        "startColumnNumber" : 72,
        "endLineNumber" : 510,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final JSONLexer lexer=this.lexer;\n  if (lexer.token() != JSONToken.LBRACE && lexer.token() != JSONToken.COMMA) {\n    throw new JSONException(\"syntax error, expect {, actual \" + lexer.tokenName());\n  }\n  ParseContext context=this.getContext();\n  try {\n    boolean setContextFlag=false;\n    for (; ; ) {\n      lexer.skipWhitespace();\n      char ch=lexer.getCurrent();\n      if (isEnabled(Feature.AllowArbitraryCommas)) {\n        while (ch == ',') {\n          lexer.next();\n          lexer.skipWhitespace();\n          ch=lexer.getCurrent();\n        }\n      }\n      boolean isObjectKey=false;\n      Object key;\n      if (ch == '\"') {\n        key=lexer.scanSymbol(symbolTable,'\"');\n        lexer.skipWhitespace();\n        ch=lexer.getCurrent();\n        if (ch != ':') {\n          throw new JSONException(\"expect ':' at \" + lexer.pos() + \", name \"+ key);\n        }\n      }\n else       if (ch == '}') {\n        lexer.next();\n        lexer.resetStringPosition();\n        lexer.nextToken();\n        return object;\n      }\n else       if (ch == '\\'') {\n        if (!isEnabled(Feature.AllowSingleQuotes)) {\n          throw new JSONException(\"syntax error\");\n        }\n        key=lexer.scanSymbol(symbolTable,'\\'');\n        lexer.skipWhitespace();\n        ch=lexer.getCurrent();\n        if (ch != ':') {\n          throw new JSONException(\"expect ':' at \" + lexer.pos());\n        }\n      }\n else       if (ch == EOI) {\n        throw new JSONException(\"syntax error\");\n      }\n else       if (ch == ',') {\n        throw new JSONException(\"syntax error\");\n      }\n else       if ((ch >= '0' && ch <= '9') || ch == '-') {\n        lexer.resetStringPosition();\n        lexer.scanNumber();\n        if (lexer.token() == JSONToken.LITERAL_INT) {\n          key=lexer.integerValue();\n        }\n else {\n          key=lexer.decimalValue(true);\n        }\n        ch=lexer.getCurrent();\n        if (ch != ':') {\n          throw new JSONException(\"expect ':' at \" + lexer.pos() + \", name \"+ key);\n        }\n      }\n else       if (ch == '{' || ch == '[') {\n        lexer.nextToken();\n        key=parse();\n        isObjectKey=true;\n      }\n else {\n        if (!isEnabled(Feature.AllowUnQuotedFieldNames)) {\n          throw new JSONException(\"syntax error\");\n        }\n        key=lexer.scanSymbolUnQuoted(symbolTable);\n        lexer.skipWhitespace();\n        ch=lexer.getCurrent();\n        if (ch != ':') {\n          throw new JSONException(\"expect ':' at \" + lexer.pos() + \", actual \"+ ch);\n        }\n      }\n      if (!isObjectKey) {\n        lexer.next();\n        lexer.skipWhitespace();\n      }\n      ch=lexer.getCurrent();\n      lexer.resetStringPosition();\n      if (key == JSON.DEFAULT_TYPE_KEY) {\n        String typeName=lexer.scanSymbol(symbolTable,'\"');\n        Class<?> clazz=TypeUtils.loadClass(typeName);\n        if (clazz == null) {\n          object.put(JSON.DEFAULT_TYPE_KEY,typeName);\n          continue;\n        }\n        lexer.nextToken(JSONToken.COMMA);\n        if (lexer.token() == JSONToken.RBRACE) {\n          lexer.nextToken(JSONToken.COMMA);\n          try {\n            Object instance=null;\n            ObjectDeserializer deserializer=this.config.getDeserializer(clazz);\n            if (deserializer instanceof ASMJavaBeanDeserializer) {\n              instance=((ASMJavaBeanDeserializer)deserializer).createInstance(this,clazz);\n            }\n else             if (deserializer instanceof JavaBeanDeserializer) {\n              instance=((JavaBeanDeserializer)deserializer).createInstance(this,clazz);\n            }\n            if (instance == null) {\n              if (clazz == Cloneable.class) {\n                instance=new HashMap();\n              }\n else {\n                instance=clazz.newInstance();\n              }\n            }\n            return instance;\n          }\n catch (          Exception e) {\n            throw new JSONException(\"create instance error\",e);\n          }\n        }\n        this.setResolveStatus(TypeNameRedirect);\n        if (this.context != null && !(fieldName instanceof Integer)) {\n          this.popContext();\n        }\n        ObjectDeserializer deserializer=config.getDeserializer(clazz);\n        return deserializer.deserialze(this,clazz,fieldName);\n      }\n      if (key == \"$ref\") {\n        lexer.nextToken(JSONToken.LITERAL_STRING);\n        if (lexer.token() == JSONToken.LITERAL_STRING) {\n          String ref=lexer.stringVal();\n          lexer.nextToken(JSONToken.RBRACE);\n          Object refValue=null;\n          if (\"@\".equals(ref)) {\n            if (this.getContext() != null) {\n              ParseContext thisContext=this.getContext();\n              Object thisObj=thisContext.getObject();\n              if (thisObj instanceof Object[] || thisObj instanceof Collection<?>) {\n                refValue=thisObj;\n              }\n else               if (thisContext.getParentContext() != null) {\n                refValue=thisContext.getParentContext().getObject();\n              }\n            }\n          }\n else           if (\"..\".equals(ref)) {\n            ParseContext parentContext=context.getParentContext();\n            if (parentContext.getObject() != null) {\n              refValue=parentContext.getObject();\n            }\n else {\n              addResolveTask(new ResolveTask(parentContext,ref));\n              setResolveStatus(DefaultJSONParser.NeedToResolve);\n            }\n          }\n else           if (\"$\".equals(ref)) {\n            ParseContext rootContext=context;\n            while (rootContext.getParentContext() != null) {\n              rootContext=rootContext.getParentContext();\n            }\n            if (rootContext.getObject() != null) {\n              refValue=rootContext.getObject();\n            }\n else {\n              addResolveTask(new ResolveTask(rootContext,ref));\n              setResolveStatus(DefaultJSONParser.NeedToResolve);\n            }\n          }\n else {\n            addResolveTask(new ResolveTask(context,ref));\n            setResolveStatus(DefaultJSONParser.NeedToResolve);\n          }\n          if (lexer.token() != JSONToken.RBRACE) {\n            throw new JSONException(\"syntax error\");\n          }\n          lexer.nextToken(JSONToken.COMMA);\n          return refValue;\n        }\n else {\n          throw new JSONException(\"illegal ref, \" + JSONToken.name(lexer.token()));\n        }\n      }\n      if (!setContextFlag) {\n        setContext(object,fieldName);\n        setContextFlag=true;\n        if (this.context != null && !(fieldName instanceof Integer)) {\n          this.popContext();\n        }\n      }\n      if (object.getClass() == JSONObject.class) {\n        key=(key == null) ? \"null\" : key.toString();\n      }\n      Object value;\n      if (ch == '\"') {\n        lexer.scanString();\n        String strValue=lexer.stringVal();\n        value=strValue;\n        if (lexer.isEnabled(Feature.AllowISO8601DateFormat)) {\n          JSONScanner iso8601Lexer=new JSONScanner(strValue);\n          if (iso8601Lexer.scanISO8601DateIfMatch()) {\n            value=iso8601Lexer.getCalendar().getTime();\n          }\n          iso8601Lexer.close();\n        }\n        object.put(key,value);\n      }\n else       if (ch >= '0' && ch <= '9' || ch == '-') {\n        lexer.scanNumber();\n        if (lexer.token() == JSONToken.LITERAL_INT) {\n          value=lexer.integerValue();\n        }\n else {\n          value=lexer.decimalValue(isEnabled(Feature.UseBigDecimal));\n        }\n        object.put(key,value);\n      }\n else       if (ch == '[') {\n        lexer.nextToken();\n        JSONArray list=new JSONArray();\n        this.parseArray(list,key);\n        value=list;\n        object.put(key,value);\n        if (lexer.token() == JSONToken.RBRACE) {\n          lexer.nextToken();\n          return object;\n        }\n else         if (lexer.token() == JSONToken.COMMA) {\n          continue;\n        }\n else {\n          throw new JSONException(\"syntax error\");\n        }\n      }\n else       if (ch == '{') {\n        lexer.nextToken();\n        final boolean parentIsArray=fieldName != null && fieldName.getClass() == Integer.class;\n        JSONObject input=new JSONObject();\n        ParseContext ctxLocal=null;\n        if (!parentIsArray) {\n          ctxLocal=setContext(context,input,key);\n        }\n        Object obj=this.parseObject(input,key);\n        if (ctxLocal != null && input != obj) {\n          ctxLocal.setObject(object);\n        }\n        checkMapResolve(object,key.toString());\n        if (object.getClass() == JSONObject.class) {\n          object.put(key.toString(),obj);\n        }\n else {\n          object.put(key,obj);\n        }\n        if (parentIsArray) {\n          setContext(context,obj,key);\n        }\n        if (lexer.token() == JSONToken.RBRACE) {\n          lexer.nextToken();\n          setContext(context);\n          return object;\n        }\n else         if (lexer.token() == JSONToken.COMMA) {\n          continue;\n        }\n else {\n          throw new JSONException(\"syntax error, \" + lexer.tokenName());\n        }\n      }\n else {\n        lexer.nextToken();\n        value=parse();\n        if (object.getClass() == JSONObject.class) {\n          key=key.toString();\n        }\n        object.put(key,value);\n        if (lexer.token() == JSONToken.RBRACE) {\n          lexer.nextToken();\n          return object;\n        }\n else         if (lexer.token() == JSONToken.COMMA) {\n          continue;\n        }\n else {\n          throw new JSONException(\"syntax error, position at \" + lexer.pos() + \", name \"+ key);\n        }\n      }\n      lexer.skipWhitespace();\n      ch=lexer.getCurrent();\n      if (ch == ',') {\n        lexer.next();\n        continue;\n      }\n else       if (ch == '}') {\n        lexer.next();\n        lexer.resetStringPosition();\n        lexer.nextToken();\n        this.setContext(object,fieldName);\n        return object;\n      }\n else {\n        throw new JSONException(\"syntax error, position at \" + lexer.pos() + \", name \"+ key);\n      }\n    }\n  }\n  finally {\n    this.setContext(context);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1352,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 14060,
        "startLineNumber" : 190,
        "startColumnNumber" : 4,
        "endLineNumber" : 510,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@SuppressWarnings({\"unchecked\",\"rawtypes\"}) public final Object parseObject(final Map object,Object fieldName){\n  final JSONLexer lexer=this.lexer;\n  if (lexer.token() != JSONToken.LBRACE && lexer.token() != JSONToken.COMMA) {\n    throw new JSONException(\"syntax error, expect {, actual \" + lexer.tokenName());\n  }\n  ParseContext context=this.getContext();\n  try {\n    boolean setContextFlag=false;\n    for (; ; ) {\n      lexer.skipWhitespace();\n      char ch=lexer.getCurrent();\n      if (isEnabled(Feature.AllowArbitraryCommas)) {\n        while (ch == ',') {\n          lexer.next();\n          lexer.skipWhitespace();\n          ch=lexer.getCurrent();\n        }\n      }\n      boolean isObjectKey=false;\n      Object key;\n      if (ch == '\"') {\n        key=lexer.scanSymbol(symbolTable,'\"');\n        lexer.skipWhitespace();\n        ch=lexer.getCurrent();\n        if (ch != ':') {\n          throw new JSONException(\"expect ':' at \" + lexer.pos() + \", name \"+ key);\n        }\n      }\n else       if (ch == '}') {\n        lexer.next();\n        lexer.resetStringPosition();\n        lexer.nextToken();\n        return object;\n      }\n else       if (ch == '\\'') {\n        if (!isEnabled(Feature.AllowSingleQuotes)) {\n          throw new JSONException(\"syntax error\");\n        }\n        key=lexer.scanSymbol(symbolTable,'\\'');\n        lexer.skipWhitespace();\n        ch=lexer.getCurrent();\n        if (ch != ':') {\n          throw new JSONException(\"expect ':' at \" + lexer.pos());\n        }\n      }\n else       if (ch == EOI) {\n        throw new JSONException(\"syntax error\");\n      }\n else       if (ch == ',') {\n        throw new JSONException(\"syntax error\");\n      }\n else       if ((ch >= '0' && ch <= '9') || ch == '-') {\n        lexer.resetStringPosition();\n        lexer.scanNumber();\n        if (lexer.token() == JSONToken.LITERAL_INT) {\n          key=lexer.integerValue();\n        }\n else {\n          key=lexer.decimalValue(true);\n        }\n        ch=lexer.getCurrent();\n        if (ch != ':') {\n          throw new JSONException(\"expect ':' at \" + lexer.pos() + \", name \"+ key);\n        }\n      }\n else       if (ch == '{' || ch == '[') {\n        lexer.nextToken();\n        key=parse();\n        isObjectKey=true;\n      }\n else {\n        if (!isEnabled(Feature.AllowUnQuotedFieldNames)) {\n          throw new JSONException(\"syntax error\");\n        }\n        key=lexer.scanSymbolUnQuoted(symbolTable);\n        lexer.skipWhitespace();\n        ch=lexer.getCurrent();\n        if (ch != ':') {\n          throw new JSONException(\"expect ':' at \" + lexer.pos() + \", actual \"+ ch);\n        }\n      }\n      if (!isObjectKey) {\n        lexer.next();\n        lexer.skipWhitespace();\n      }\n      ch=lexer.getCurrent();\n      lexer.resetStringPosition();\n      if (key == JSON.DEFAULT_TYPE_KEY) {\n        String typeName=lexer.scanSymbol(symbolTable,'\"');\n        Class<?> clazz=TypeUtils.loadClass(typeName);\n        if (clazz == null) {\n          object.put(JSON.DEFAULT_TYPE_KEY,typeName);\n          continue;\n        }\n        lexer.nextToken(JSONToken.COMMA);\n        if (lexer.token() == JSONToken.RBRACE) {\n          lexer.nextToken(JSONToken.COMMA);\n          try {\n            Object instance=null;\n            ObjectDeserializer deserializer=this.config.getDeserializer(clazz);\n            if (deserializer instanceof ASMJavaBeanDeserializer) {\n              instance=((ASMJavaBeanDeserializer)deserializer).createInstance(this,clazz);\n            }\n else             if (deserializer instanceof JavaBeanDeserializer) {\n              instance=((JavaBeanDeserializer)deserializer).createInstance(this,clazz);\n            }\n            if (instance == null) {\n              if (clazz == Cloneable.class) {\n                instance=new HashMap();\n              }\n else {\n                instance=clazz.newInstance();\n              }\n            }\n            return instance;\n          }\n catch (          Exception e) {\n            throw new JSONException(\"create instance error\",e);\n          }\n        }\n        this.setResolveStatus(TypeNameRedirect);\n        if (this.context != null && !(fieldName instanceof Integer)) {\n          this.popContext();\n        }\n        ObjectDeserializer deserializer=config.getDeserializer(clazz);\n        return deserializer.deserialze(this,clazz,fieldName);\n      }\n      if (key == \"$ref\") {\n        lexer.nextToken(JSONToken.LITERAL_STRING);\n        if (lexer.token() == JSONToken.LITERAL_STRING) {\n          String ref=lexer.stringVal();\n          lexer.nextToken(JSONToken.RBRACE);\n          Object refValue=null;\n          if (\"@\".equals(ref)) {\n            if (this.getContext() != null) {\n              ParseContext thisContext=this.getContext();\n              Object thisObj=thisContext.getObject();\n              if (thisObj instanceof Object[] || thisObj instanceof Collection<?>) {\n                refValue=thisObj;\n              }\n else               if (thisContext.getParentContext() != null) {\n                refValue=thisContext.getParentContext().getObject();\n              }\n            }\n          }\n else           if (\"..\".equals(ref)) {\n            ParseContext parentContext=context.getParentContext();\n            if (parentContext.getObject() != null) {\n              refValue=parentContext.getObject();\n            }\n else {\n              addResolveTask(new ResolveTask(parentContext,ref));\n              setResolveStatus(DefaultJSONParser.NeedToResolve);\n            }\n          }\n else           if (\"$\".equals(ref)) {\n            ParseContext rootContext=context;\n            while (rootContext.getParentContext() != null) {\n              rootContext=rootContext.getParentContext();\n            }\n            if (rootContext.getObject() != null) {\n              refValue=rootContext.getObject();\n            }\n else {\n              addResolveTask(new ResolveTask(rootContext,ref));\n              setResolveStatus(DefaultJSONParser.NeedToResolve);\n            }\n          }\n else {\n            addResolveTask(new ResolveTask(context,ref));\n            setResolveStatus(DefaultJSONParser.NeedToResolve);\n          }\n          if (lexer.token() != JSONToken.RBRACE) {\n            throw new JSONException(\"syntax error\");\n          }\n          lexer.nextToken(JSONToken.COMMA);\n          return refValue;\n        }\n else {\n          throw new JSONException(\"illegal ref, \" + JSONToken.name(lexer.token()));\n        }\n      }\n      if (!setContextFlag) {\n        setContext(object,fieldName);\n        setContextFlag=true;\n        if (this.context != null && !(fieldName instanceof Integer)) {\n          this.popContext();\n        }\n      }\n      if (object.getClass() == JSONObject.class) {\n        key=(key == null) ? \"null\" : key.toString();\n      }\n      Object value;\n      if (ch == '\"') {\n        lexer.scanString();\n        String strValue=lexer.stringVal();\n        value=strValue;\n        if (lexer.isEnabled(Feature.AllowISO8601DateFormat)) {\n          JSONScanner iso8601Lexer=new JSONScanner(strValue);\n          if (iso8601Lexer.scanISO8601DateIfMatch()) {\n            value=iso8601Lexer.getCalendar().getTime();\n          }\n          iso8601Lexer.close();\n        }\n        object.put(key,value);\n      }\n else       if (ch >= '0' && ch <= '9' || ch == '-') {\n        lexer.scanNumber();\n        if (lexer.token() == JSONToken.LITERAL_INT) {\n          value=lexer.integerValue();\n        }\n else {\n          value=lexer.decimalValue(isEnabled(Feature.UseBigDecimal));\n        }\n        object.put(key,value);\n      }\n else       if (ch == '[') {\n        lexer.nextToken();\n        JSONArray list=new JSONArray();\n        this.parseArray(list,key);\n        value=list;\n        object.put(key,value);\n        if (lexer.token() == JSONToken.RBRACE) {\n          lexer.nextToken();\n          return object;\n        }\n else         if (lexer.token() == JSONToken.COMMA) {\n          continue;\n        }\n else {\n          throw new JSONException(\"syntax error\");\n        }\n      }\n else       if (ch == '{') {\n        lexer.nextToken();\n        final boolean parentIsArray=fieldName != null && fieldName.getClass() == Integer.class;\n        JSONObject input=new JSONObject();\n        ParseContext ctxLocal=null;\n        if (!parentIsArray) {\n          ctxLocal=setContext(context,input,key);\n        }\n        Object obj=this.parseObject(input,key);\n        if (ctxLocal != null && input != obj) {\n          ctxLocal.setObject(object);\n        }\n        checkMapResolve(object,key.toString());\n        if (object.getClass() == JSONObject.class) {\n          object.put(key.toString(),obj);\n        }\n else {\n          object.put(key,obj);\n        }\n        if (parentIsArray) {\n          setContext(context,obj,key);\n        }\n        if (lexer.token() == JSONToken.RBRACE) {\n          lexer.nextToken();\n          setContext(context);\n          return object;\n        }\n else         if (lexer.token() == JSONToken.COMMA) {\n          continue;\n        }\n else {\n          throw new JSONException(\"syntax error, \" + lexer.tokenName());\n        }\n      }\n else {\n        lexer.nextToken();\n        value=parse();\n        if (object.getClass() == JSONObject.class) {\n          key=key.toString();\n        }\n        object.put(key,value);\n        if (lexer.token() == JSONToken.RBRACE) {\n          lexer.nextToken();\n          return object;\n        }\n else         if (lexer.token() == JSONToken.COMMA) {\n          continue;\n        }\n else {\n          throw new JSONException(\"syntax error, position at \" + lexer.pos() + \", name \"+ key);\n        }\n      }\n      lexer.skipWhitespace();\n      ch=lexer.getCurrent();\n      if (ch == ',') {\n        lexer.next();\n        continue;\n      }\n else       if (ch == '}') {\n        lexer.next();\n        lexer.resetStringPosition();\n        lexer.nextToken();\n        this.setContext(object,fieldName);\n        return object;\n      }\n else {\n        throw new JSONException(\"syntax error, position at \" + lexer.pos() + \", name \"+ key);\n      }\n    }\n  }\n  finally {\n    this.setContext(context);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1372,
      "astHeight" : 22
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 411,
        "startColumnNumber" : 24,
        "endLineNumber" : 411,
        "endColumnNumber" : 85
      },
      "nodeContext" : "value=lexer.decimalValue(isEnabled(Feature.UseBigDecimal));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "com.alibaba.fastjson.parser.Feature"
  } ],
  "positionList" : [ {
    "charLength" : 7,
    "startLineNumber" : 204,
    "startColumnNumber" : 30,
    "endLineNumber" : 204,
    "endColumnNumber" : 37
  }, {
    "charLength" : 7,
    "startLineNumber" : 227,
    "startColumnNumber" : 35,
    "endLineNumber" : 227,
    "endColumnNumber" : 42
  }, {
    "charLength" : 7,
    "startLineNumber" : 258,
    "startColumnNumber" : 35,
    "endLineNumber" : 258,
    "endColumnNumber" : 42
  }, {
    "charLength" : 7,
    "startLineNumber" : 397,
    "startColumnNumber" : 40,
    "endLineNumber" : 397,
    "endColumnNumber" : 47
  }, {
    "charLength" : 7,
    "startLineNumber" : 411,
    "startColumnNumber" : 61,
    "endLineNumber" : 411,
    "endColumnNumber" : 68
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 8
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 8
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 12
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 9
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 12
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 12
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 10
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 10
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 10
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 9
  } ]
}