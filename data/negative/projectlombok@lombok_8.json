{
  "id" : 8,
  "expression" : "!mName.equals(name)",
  "projectName" : "projectlombok@lombok",
  "commitID" : "25def866b50860715ee7c315c678b8c3d1ba9b56",
  "filePath" : "/src/core/lombok/javac/handlers/JavacHandlerUtil.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "!mName.equals(name)",
    "nodeType" : "PrefixExpression",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 196,
      "startColumnNumber" : 8,
      "endLineNumber" : 196,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 196,
        "startColumnNumber" : 4,
        "endLineNumber" : 196,
        "endColumnNumber" : 38
      },
      "nodeContext" : "if (!mName.equals(name)) continue;\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 736,
        "startLineNumber" : 183,
        "startColumnNumber" : 38,
        "endLineNumber" : 212,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  String mName;\n  JCExpression rhs;\n  if (arg instanceof JCAssign) {\n    JCAssign assign=(JCAssign)arg;\n    mName=assign.lhs.toString();\n    rhs=assign.rhs;\n  }\n else {\n    rhs=arg;\n    mName=\"value\";\n  }\n  if (!mName.equals(name))   continue;\n  isExplicit=true;\n  if (rhs instanceof JCNewArray) {\n    List<JCExpression> elems=((JCNewArray)rhs).elems;\n    for (    JCExpression inner : elems) {\n      raws.add(inner.toString());\n      expressions.add(inner);\n      guesses.add(calculateGuess(inner));\n      positions.add(inner.pos());\n    }\n  }\n else {\n    raws.add(rhs.toString());\n    expressions.add(rhs);\n    guesses.add(calculateGuess(rhs));\n    positions.add(rhs.pos());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 141,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 771,
        "startLineNumber" : 183,
        "startColumnNumber" : 3,
        "endLineNumber" : 212,
        "endColumnNumber" : 4
      },
      "nodeContext" : "for (JCExpression arg : arguments) {\n  String mName;\n  JCExpression rhs;\n  if (arg instanceof JCAssign) {\n    JCAssign assign=(JCAssign)arg;\n    mName=assign.lhs.toString();\n    rhs=assign.rhs;\n  }\n else {\n    rhs=arg;\n    mName=\"value\";\n  }\n  if (!mName.equals(name))   continue;\n  isExplicit=true;\n  if (rhs instanceof JCNewArray) {\n    List<JCExpression> elems=((JCNewArray)rhs).elems;\n    for (    JCExpression inner : elems) {\n      raws.add(inner.toString());\n      expressions.add(inner);\n      guesses.add(calculateGuess(inner));\n      positions.add(inner.pos());\n    }\n  }\n else {\n    raws.add(rhs.toString());\n    expressions.add(rhs);\n    guesses.add(calculateGuess(rhs));\n    positions.add(rhs.pos());\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 147,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1640,
        "startLineNumber" : 174,
        "startColumnNumber" : 45,
        "endLineNumber" : 224,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (!Modifier.isPublic(m.getModifiers()))   continue;\n  String name=m.getName();\n  java.util.List<String> raws=new ArrayList<String>();\n  java.util.List<Object> guesses=new ArrayList<Object>();\n  java.util.List<Object> expressions=new ArrayList<Object>();\n  final java.util.List<DiagnosticPosition> positions=new ArrayList<DiagnosticPosition>();\n  boolean isExplicit=false;\n  for (  JCExpression arg : arguments) {\n    String mName;\n    JCExpression rhs;\n    if (arg instanceof JCAssign) {\n      JCAssign assign=(JCAssign)arg;\n      mName=assign.lhs.toString();\n      rhs=assign.rhs;\n    }\n else {\n      rhs=arg;\n      mName=\"value\";\n    }\n    if (!mName.equals(name))     continue;\n    isExplicit=true;\n    if (rhs instanceof JCNewArray) {\n      List<JCExpression> elems=((JCNewArray)rhs).elems;\n      for (      JCExpression inner : elems) {\n        raws.add(inner.toString());\n        expressions.add(inner);\n        guesses.add(calculateGuess(inner));\n        positions.add(inner.pos());\n      }\n    }\n else {\n      raws.add(rhs.toString());\n      expressions.add(rhs);\n      guesses.add(calculateGuess(rhs));\n      positions.add(rhs.pos());\n    }\n  }\n  values.put(name,new AnnotationValue(node,raws,expressions,guesses,isExplicit){\n    @Override public void setError(    String message,    int valueIdx){\n      if (valueIdx < 0)       node.addError(message);\n else       node.addError(message,positions.get(valueIdx));\n    }\n    @Override public void setWarning(    String message,    int valueIdx){\n      if (valueIdx < 0)       node.addWarning(message);\n else       node.addWarning(message,positions.get(valueIdx));\n    }\n  }\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 321,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1683,
        "startLineNumber" : 174,
        "startColumnNumber" : 2,
        "endLineNumber" : 224,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (Method m : type.getDeclaredMethods()) {\n  if (!Modifier.isPublic(m.getModifiers()))   continue;\n  String name=m.getName();\n  java.util.List<String> raws=new ArrayList<String>();\n  java.util.List<Object> guesses=new ArrayList<Object>();\n  java.util.List<Object> expressions=new ArrayList<Object>();\n  final java.util.List<DiagnosticPosition> positions=new ArrayList<DiagnosticPosition>();\n  boolean isExplicit=false;\n  for (  JCExpression arg : arguments) {\n    String mName;\n    JCExpression rhs;\n    if (arg instanceof JCAssign) {\n      JCAssign assign=(JCAssign)arg;\n      mName=assign.lhs.toString();\n      rhs=assign.rhs;\n    }\n else {\n      rhs=arg;\n      mName=\"value\";\n    }\n    if (!mName.equals(name))     continue;\n    isExplicit=true;\n    if (rhs instanceof JCNewArray) {\n      List<JCExpression> elems=((JCNewArray)rhs).elems;\n      for (      JCExpression inner : elems) {\n        raws.add(inner.toString());\n        expressions.add(inner);\n        guesses.add(calculateGuess(inner));\n        positions.add(inner.pos());\n      }\n    }\n else {\n      raws.add(rhs.toString());\n      expressions.add(rhs);\n      guesses.add(calculateGuess(rhs));\n      positions.add(rhs.pos());\n    }\n  }\n  values.put(name,new AnnotationValue(node,raws,expressions,guesses,isExplicit){\n    @Override public void setError(    String message,    int valueIdx){\n      if (valueIdx < 0)       node.addError(message);\n else       node.addError(message,positions.get(valueIdx));\n    }\n    @Override public void setWarning(    String message,    int valueIdx){\n      if (valueIdx < 0)       node.addWarning(message);\n else       node.addWarning(message,positions.get(valueIdx));\n    }\n  }\n);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 329,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1930,
        "startLineNumber" : 170,
        "startColumnNumber" : 112,
        "endLineNumber" : 227,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  Map<String,AnnotationValue> values=new HashMap<String,AnnotationValue>();\n  JCAnnotation anno=(JCAnnotation)node.get();\n  List<JCExpression> arguments=anno.getArguments();\n  for (  Method m : type.getDeclaredMethods()) {\n    if (!Modifier.isPublic(m.getModifiers()))     continue;\n    String name=m.getName();\n    java.util.List<String> raws=new ArrayList<String>();\n    java.util.List<Object> guesses=new ArrayList<Object>();\n    java.util.List<Object> expressions=new ArrayList<Object>();\n    final java.util.List<DiagnosticPosition> positions=new ArrayList<DiagnosticPosition>();\n    boolean isExplicit=false;\n    for (    JCExpression arg : arguments) {\n      String mName;\n      JCExpression rhs;\n      if (arg instanceof JCAssign) {\n        JCAssign assign=(JCAssign)arg;\n        mName=assign.lhs.toString();\n        rhs=assign.rhs;\n      }\n else {\n        rhs=arg;\n        mName=\"value\";\n      }\n      if (!mName.equals(name))       continue;\n      isExplicit=true;\n      if (rhs instanceof JCNewArray) {\n        List<JCExpression> elems=((JCNewArray)rhs).elems;\n        for (        JCExpression inner : elems) {\n          raws.add(inner.toString());\n          expressions.add(inner);\n          guesses.add(calculateGuess(inner));\n          positions.add(inner.pos());\n        }\n      }\n else {\n        raws.add(rhs.toString());\n        expressions.add(rhs);\n        guesses.add(calculateGuess(rhs));\n        positions.add(rhs.pos());\n      }\n    }\n    values.put(name,new AnnotationValue(node,raws,expressions,guesses,isExplicit){\n      @Override public void setError(      String message,      int valueIdx){\n        if (valueIdx < 0)         node.addError(message);\n else         node.addError(message,positions.get(valueIdx));\n      }\n      @Override public void setWarning(      String message,      int valueIdx){\n        if (valueIdx < 0)         node.addWarning(message);\n else         node.addWarning(message,positions.get(valueIdx));\n      }\n    }\n);\n  }\n  return new AnnotationValues<A>(type,values,node);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 380,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2291,
        "startLineNumber" : 164,
        "startColumnNumber" : 1,
        "endLineNumber" : 227,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Creates an instance of  {@code AnnotationValues} for the provided AST Node.\n * @param type An annotation class type, such as {@code lombok.Getter.class}.\n * @param node A Lombok AST node representing an annotation in source code.\n */\npublic static <A extends Annotation>AnnotationValues<A> createAnnotation(Class<A> type,final JavacNode node){\n  Map<String,AnnotationValue> values=new HashMap<String,AnnotationValue>();\n  JCAnnotation anno=(JCAnnotation)node.get();\n  List<JCExpression> arguments=anno.getArguments();\n  for (  Method m : type.getDeclaredMethods()) {\n    if (!Modifier.isPublic(m.getModifiers()))     continue;\n    String name=m.getName();\n    java.util.List<String> raws=new ArrayList<String>();\n    java.util.List<Object> guesses=new ArrayList<Object>();\n    java.util.List<Object> expressions=new ArrayList<Object>();\n    final java.util.List<DiagnosticPosition> positions=new ArrayList<DiagnosticPosition>();\n    boolean isExplicit=false;\n    for (    JCExpression arg : arguments) {\n      String mName;\n      JCExpression rhs;\n      if (arg instanceof JCAssign) {\n        JCAssign assign=(JCAssign)arg;\n        mName=assign.lhs.toString();\n        rhs=assign.rhs;\n      }\n else {\n        rhs=arg;\n        mName=\"value\";\n      }\n      if (!mName.equals(name))       continue;\n      isExplicit=true;\n      if (rhs instanceof JCNewArray) {\n        List<JCExpression> elems=((JCNewArray)rhs).elems;\n        for (        JCExpression inner : elems) {\n          raws.add(inner.toString());\n          expressions.add(inner);\n          guesses.add(calculateGuess(inner));\n          positions.add(inner.pos());\n        }\n      }\n else {\n        raws.add(rhs.toString());\n        expressions.add(rhs);\n        guesses.add(calculateGuess(rhs));\n        positions.add(rhs.pos());\n      }\n    }\n    values.put(name,new AnnotationValue(node,raws,expressions,guesses,isExplicit){\n      @Override public void setError(      String message,      int valueIdx){\n        if (valueIdx < 0)         node.addError(message);\n else         node.addError(message,positions.get(valueIdx));\n      }\n      @Override public void setWarning(      String message,      int valueIdx){\n        if (valueIdx < 0)         node.addWarning(message);\n else         node.addWarning(message,positions.get(valueIdx));\n      }\n    }\n);\n  }\n  return new AnnotationValues<A>(type,values,node);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 406,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 196,
        "startColumnNumber" : 4,
        "endLineNumber" : 196,
        "endColumnNumber" : 38
      },
      "nodeContext" : "if (!mName.equals(name)) continue;\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 19,
    "startLineNumber" : 196,
    "startColumnNumber" : 8,
    "endLineNumber" : 196,
    "endColumnNumber" : 27
  } ],
  "layoutRelationDataList" : [ ]
}