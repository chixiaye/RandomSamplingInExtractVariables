{
  "id" : 359,
  "expression" : "ImmutableList.Builder",
  "projectName" : "GoogleContainerTools@jib",
  "commitID" : "369e30d0f67ceba656e7600035259f941963c688",
  "filePath" : "jib-core/src/main/java/com/google/cloud/tools/jib/frontend/ExposedPortsParser.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "ImmutableList.Builder",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 21,
      "startLineNumber" : 53,
      "startColumnNumber" : 4,
      "endLineNumber" : 53,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParameterizedType,type]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 53,
        "startColumnNumber" : 4,
        "endLineNumber" : 53,
        "endColumnNumber" : 25
      },
      "nodeContext" : "ImmutableList.Builder",
      "nodeType" : "SimpleType",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,type]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 53,
        "startColumnNumber" : 4,
        "endLineNumber" : 53,
        "endColumnNumber" : 33
      },
      "nodeContext" : "ImmutableList.Builder<String>",
      "nodeType" : "ParameterizedType",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 53,
        "startColumnNumber" : 4,
        "endLineNumber" : 53,
        "endColumnNumber" : 73
      },
      "nodeContext" : "ImmutableList.Builder<String> result=new ImmutableList.Builder<>();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 16,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1515,
        "startLineNumber" : 52,
        "startColumnNumber" : 35,
        "endLineNumber" : 95,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  ImmutableList.Builder<String> result=new ImmutableList.Builder<>();\n  for (  String port : ports) {\n    Matcher matcher=portPattern.matcher(port);\n    if (!matcher.matches()) {\n      throw new NumberFormatException(\"Invalid port configuration: '\" + port + \"'. Make sure the port is a single number or a range of two numbers separated \"+ \"with a '-', with or without protocol specified (e.g. '<portNum>/tcp' or \"+ \"'<portNum>/udp').\");\n    }\n    int min=Integer.parseInt(matcher.group(1));\n    int max=min;\n    if (!Strings.isNullOrEmpty(matcher.group(2))) {\n      max=Integer.parseInt(matcher.group(2));\n    }\n    String protocol=matcher.group(3);\n    if (min > max) {\n      throw new NumberFormatException(\"Invalid port range '\" + port + \"'; smaller number must come first.\");\n    }\n    if (min < 1 || max > 65535) {\n      buildLogger.warn(\"Port number '\" + port + \"' is out of usual range (1-65535).\");\n    }\n    String portString=(protocol == null ? \"\" : protocol);\n    for (int portNum=min; portNum <= max; portNum++) {\n      result.add(portNum + portString);\n    }\n  }\n  return result.build();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 159,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2203,
        "startLineNumber" : 37,
        "startColumnNumber" : 2,
        "endLineNumber" : 95,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * TODO: Return list of  {@link PortWithProtocol}s instead of strings <p>Converts/validates a list of ports with ranges to an expanded form without ranges. <p>Example:  {@code [\"1000/tcp\", \"2000-2002/tcp\"] -> [\"1000/tcp\", \"2000/tcp\", \"2001/tcp\",\"2002/tcp\"]}\n * @param ports the list of port numbers/ranges\n * @param buildLogger used to log warning messages\n * @return the ports as a list of integers\n * @throws NumberFormatException if any of the ports are in an invalid format or out of range\n */\n@VisibleForTesting public static ImmutableList<String> parse(List<String> ports,BuildLogger buildLogger) throws NumberFormatException {\n  ImmutableList.Builder<String> result=new ImmutableList.Builder<>();\n  for (  String port : ports) {\n    Matcher matcher=portPattern.matcher(port);\n    if (!matcher.matches()) {\n      throw new NumberFormatException(\"Invalid port configuration: '\" + port + \"'. Make sure the port is a single number or a range of two numbers separated \"+ \"with a '-', with or without protocol specified (e.g. '<portNum>/tcp' or \"+ \"'<portNum>/udp').\");\n    }\n    int min=Integer.parseInt(matcher.group(1));\n    int max=min;\n    if (!Strings.isNullOrEmpty(matcher.group(2))) {\n      max=Integer.parseInt(matcher.group(2));\n    }\n    String protocol=matcher.group(3);\n    if (min > max) {\n      throw new NumberFormatException(\"Invalid port range '\" + port + \"'; smaller number must come first.\");\n    }\n    if (min < 1 || max > 65535) {\n      buildLogger.warn(\"Port number '\" + port + \"' is out of usual range (1-65535).\");\n    }\n    String portString=(protocol == null ? \"\" : protocol);\n    for (int portNum=min; portNum <= max; portNum++) {\n      result.add(portNum + portString);\n    }\n  }\n  return result.build();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 184,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 53,
        "startColumnNumber" : 4,
        "endLineNumber" : 53,
        "endColumnNumber" : 73
      },
      "nodeContext" : "ImmutableList.Builder<String> result=new ImmutableList.Builder<>();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 16,
      "astHeight" : 7
    },
    "tokenLength" : 2,
    "type" : "ImmutableList"
  }, {
    "nodeContext" : "ImmutableList.Builder",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 21,
      "startLineNumber" : 53,
      "startColumnNumber" : 47,
      "endLineNumber" : 53,
      "endColumnNumber" : 68
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParameterizedType,type]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 53,
        "startColumnNumber" : 47,
        "endLineNumber" : 53,
        "endColumnNumber" : 68
      },
      "nodeContext" : "ImmutableList.Builder",
      "nodeType" : "SimpleType",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,type]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 53,
        "startColumnNumber" : 47,
        "endLineNumber" : 53,
        "endColumnNumber" : 70
      },
      "nodeContext" : "ImmutableList.Builder<>",
      "nodeType" : "ParameterizedType",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 53,
        "startColumnNumber" : 43,
        "endLineNumber" : 53,
        "endColumnNumber" : 72
      },
      "nodeContext" : "new ImmutableList.Builder<>()",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 6,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 53,
        "startColumnNumber" : 34,
        "endLineNumber" : 53,
        "endColumnNumber" : 72
      },
      "nodeContext" : "result=new ImmutableList.Builder<>()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 53,
        "startColumnNumber" : 4,
        "endLineNumber" : 53,
        "endColumnNumber" : 73
      },
      "nodeContext" : "ImmutableList.Builder<String> result=new ImmutableList.Builder<>();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 16,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1515,
        "startLineNumber" : 52,
        "startColumnNumber" : 35,
        "endLineNumber" : 95,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  ImmutableList.Builder<String> result=new ImmutableList.Builder<>();\n  for (  String port : ports) {\n    Matcher matcher=portPattern.matcher(port);\n    if (!matcher.matches()) {\n      throw new NumberFormatException(\"Invalid port configuration: '\" + port + \"'. Make sure the port is a single number or a range of two numbers separated \"+ \"with a '-', with or without protocol specified (e.g. '<portNum>/tcp' or \"+ \"'<portNum>/udp').\");\n    }\n    int min=Integer.parseInt(matcher.group(1));\n    int max=min;\n    if (!Strings.isNullOrEmpty(matcher.group(2))) {\n      max=Integer.parseInt(matcher.group(2));\n    }\n    String protocol=matcher.group(3);\n    if (min > max) {\n      throw new NumberFormatException(\"Invalid port range '\" + port + \"'; smaller number must come first.\");\n    }\n    if (min < 1 || max > 65535) {\n      buildLogger.warn(\"Port number '\" + port + \"' is out of usual range (1-65535).\");\n    }\n    String portString=(protocol == null ? \"\" : protocol);\n    for (int portNum=min; portNum <= max; portNum++) {\n      result.add(portNum + portString);\n    }\n  }\n  return result.build();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 159,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2203,
        "startLineNumber" : 37,
        "startColumnNumber" : 2,
        "endLineNumber" : 95,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * TODO: Return list of  {@link PortWithProtocol}s instead of strings <p>Converts/validates a list of ports with ranges to an expanded form without ranges. <p>Example:  {@code [\"1000/tcp\", \"2000-2002/tcp\"] -> [\"1000/tcp\", \"2000/tcp\", \"2001/tcp\",\"2002/tcp\"]}\n * @param ports the list of port numbers/ranges\n * @param buildLogger used to log warning messages\n * @return the ports as a list of integers\n * @throws NumberFormatException if any of the ports are in an invalid format or out of range\n */\n@VisibleForTesting public static ImmutableList<String> parse(List<String> ports,BuildLogger buildLogger) throws NumberFormatException {\n  ImmutableList.Builder<String> result=new ImmutableList.Builder<>();\n  for (  String port : ports) {\n    Matcher matcher=portPattern.matcher(port);\n    if (!matcher.matches()) {\n      throw new NumberFormatException(\"Invalid port configuration: '\" + port + \"'. Make sure the port is a single number or a range of two numbers separated \"+ \"with a '-', with or without protocol specified (e.g. '<portNum>/tcp' or \"+ \"'<portNum>/udp').\");\n    }\n    int min=Integer.parseInt(matcher.group(1));\n    int max=min;\n    if (!Strings.isNullOrEmpty(matcher.group(2))) {\n      max=Integer.parseInt(matcher.group(2));\n    }\n    String protocol=matcher.group(3);\n    if (min > max) {\n      throw new NumberFormatException(\"Invalid port range '\" + port + \"'; smaller number must come first.\");\n    }\n    if (min < 1 || max > 65535) {\n      buildLogger.warn(\"Port number '\" + port + \"' is out of usual range (1-65535).\");\n    }\n    String portString=(protocol == null ? \"\" : protocol);\n    for (int portNum=min; portNum <= max; portNum++) {\n      result.add(portNum + portString);\n    }\n  }\n  return result.build();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 184,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 53,
        "startColumnNumber" : 4,
        "endLineNumber" : 53,
        "endColumnNumber" : 73
      },
      "nodeContext" : "ImmutableList.Builder<String> result=new ImmutableList.Builder<>();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 16,
      "astHeight" : 7
    },
    "tokenLength" : 2,
    "type" : "ImmutableList"
  } ],
  "positionList" : [ {
    "charLength" : 21,
    "startLineNumber" : 53,
    "startColumnNumber" : 4,
    "endLineNumber" : 53,
    "endColumnNumber" : 25
  }, {
    "charLength" : 21,
    "startLineNumber" : 53,
    "startColumnNumber" : 47,
    "endLineNumber" : 53,
    "endColumnNumber" : 68
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  } ]
}