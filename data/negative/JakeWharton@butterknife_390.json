{
  "id" : 390,
  "expression" : "j",
  "projectName" : "JakeWharton@butterknife",
  "commitID" : "45b1eb9534d51405b993ae17dabc774a9d4a3892",
  "filePath" : "butterknife/src/main/java/butterknife/internal/InjectViewProcessor.java",
  "occurrences" : 9,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "j",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 295,
      "startColumnNumber" : 24,
      "endLineNumber" : 295,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 295,
        "startColumnNumber" : 24,
        "endLineNumber" : 295,
        "endColumnNumber" : 49
      },
      "nodeContext" : "j < parameterTypes.size()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 363,
        "startLineNumber" : 295,
        "startColumnNumber" : 8,
        "endLineNumber" : 304,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int j=0; j < parameterTypes.size(); j++) {\n  if (methodParameterUsed.get(j)) {\n    continue;\n  }\n  if (isSubtypeOfType(methodParameterType,parameterTypes.get(j))) {\n    parameters[i]=new Parameter(j,methodParameterType.toString());\n    methodParameterUsed.set(j);\n    break;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 48,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 2101,
        "startLineNumber" : 291,
        "startColumnNumber" : 56,
        "endLineNumber" : 341,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  VariableElement methodParameter=methodParameters.get(i);\n  TypeMirror methodParameterType=methodParameter.asType();\n  for (int j=0; j < parameterTypes.size(); j++) {\n    if (methodParameterUsed.get(j)) {\n      continue;\n    }\n    if (isSubtypeOfType(methodParameterType,parameterTypes.get(j))) {\n      parameters[i]=new Parameter(j,methodParameterType.toString());\n      methodParameterUsed.set(j);\n      break;\n    }\n  }\n  if (parameters[i] == null) {\n    StringBuilder builder=new StringBuilder();\n    builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n    for (int j=0; j < parameters.length; j++) {\n      Parameter parameter=parameters[j];\n      builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n      if (parameter == null) {\n        builder.append(\"did not match any listener parameters\");\n      }\n else {\n        builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n      }\n    }\n    builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n    for (    String parameterType : listener.getParameterTypes()) {\n      builder.append(\"\\n  \").append(parameterType);\n    }\n    builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n    error(executableElement,builder.toString());\n    return;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 234,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2151,
        "startLineNumber" : 291,
        "startColumnNumber" : 6,
        "endLineNumber" : 341,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int i=0; i < methodParameters.size(); i++) {\n  VariableElement methodParameter=methodParameters.get(i);\n  TypeMirror methodParameterType=methodParameter.asType();\n  for (int j=0; j < parameterTypes.size(); j++) {\n    if (methodParameterUsed.get(j)) {\n      continue;\n    }\n    if (isSubtypeOfType(methodParameterType,parameterTypes.get(j))) {\n      parameters[i]=new Parameter(j,methodParameterType.toString());\n      methodParameterUsed.set(j);\n      break;\n    }\n  }\n  if (parameters[i] == null) {\n    StringBuilder builder=new StringBuilder();\n    builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n    for (int j=0; j < parameters.length; j++) {\n      Parameter parameter=parameters[j];\n      builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n      if (parameter == null) {\n        builder.append(\"did not match any listener parameters\");\n      }\n else {\n        builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n      }\n    }\n    builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n    for (    String parameterType : listener.getParameterTypes()) {\n      builder.append(\"\\n  \").append(parameterType);\n    }\n    builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n    error(executableElement,builder.toString());\n    return;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 247,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2362,
        "startLineNumber" : 287,
        "startColumnNumber" : 37,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  parameters=new Parameter[methodParameters.size()];\n  BitSet methodParameterUsed=new BitSet(methodParameters.size());\n  List<String> parameterTypes=listener.getParameterTypes();\n  for (int i=0; i < methodParameters.size(); i++) {\n    VariableElement methodParameter=methodParameters.get(i);\n    TypeMirror methodParameterType=methodParameter.asType();\n    for (int j=0; j < parameterTypes.size(); j++) {\n      if (methodParameterUsed.get(j)) {\n        continue;\n      }\n      if (isSubtypeOfType(methodParameterType,parameterTypes.get(j))) {\n        parameters[i]=new Parameter(j,methodParameterType.toString());\n        methodParameterUsed.set(j);\n        break;\n      }\n    }\n    if (parameters[i] == null) {\n      StringBuilder builder=new StringBuilder();\n      builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n      for (int j=0; j < parameters.length; j++) {\n        Parameter parameter=parameters[j];\n        builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n        if (parameter == null) {\n          builder.append(\"did not match any listener parameters\");\n        }\n else {\n          builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n        }\n      }\n      builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n      for (      String parameterType : listener.getParameterTypes()) {\n        builder.append(\"\\n  \").append(parameterType);\n      }\n      builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n      error(executableElement,builder.toString());\n      return;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 281,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2395,
        "startLineNumber" : 287,
        "startColumnNumber" : 4,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (!methodParameters.isEmpty()) {\n  parameters=new Parameter[methodParameters.size()];\n  BitSet methodParameterUsed=new BitSet(methodParameters.size());\n  List<String> parameterTypes=listener.getParameterTypes();\n  for (int i=0; i < methodParameters.size(); i++) {\n    VariableElement methodParameter=methodParameters.get(i);\n    TypeMirror methodParameterType=methodParameter.asType();\n    for (int j=0; j < parameterTypes.size(); j++) {\n      if (methodParameterUsed.get(j)) {\n        continue;\n      }\n      if (isSubtypeOfType(methodParameterType,parameterTypes.get(j))) {\n        parameters[i]=new Parameter(j,methodParameterType.toString());\n        methodParameterUsed.set(j);\n        break;\n      }\n    }\n    if (parameters[i] == null) {\n      StringBuilder builder=new StringBuilder();\n      builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n      for (int j=0; j < parameters.length; j++) {\n        Parameter parameter=parameters[j];\n        builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n        if (parameter == null) {\n          builder.append(\"did not match any listener parameters\");\n        }\n else {\n          builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n        }\n      }\n      builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n      for (      String parameterType : listener.getParameterTypes()) {\n        builder.append(\"\\n  \").append(parameterType);\n      }\n      builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n      error(executableElement,builder.toString());\n      return;\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 286,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6627,
        "startLineNumber" : 208,
        "startColumnNumber" : 23,
        "endLineNumber" : 356,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (!(element instanceof ExecutableElement) || element.getKind() != METHOD) {\n    error(element,\"@%s annotation must be on a method.\",annotationClass.getSimpleName());\n    return;\n  }\n  ExecutableElement executableElement=(ExecutableElement)element;\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  Annotation annotation=element.getAnnotation(annotationClass);\n  Method annotationValue=annotationClass.getDeclaredMethod(\"value\");\n  if (annotationValue == null || annotationValue.getReturnType() != int[].class) {\n    error(element,\"@%s annotation lacks int[] value property. (%s.%s)\",annotationClass,enclosingElement.getQualifiedName(),element.getSimpleName());\n    return;\n  }\n  int[] ids=(int[])annotationValue.invoke(annotation);\n  String name=executableElement.getSimpleName().toString();\n  boolean required=element.getAnnotation(Optional.class) == null;\n  boolean hasError=isValidForGeneratedCode(annotationClass,\"methods\",element);\n  Set<Integer> seenIds=new LinkedHashSet<Integer>(ids.length);\n  for (  int id : ids) {\n    if (!seenIds.add(id)) {\n      error(element,\"@%s annotation for method contains duplicate ID %d. (%s.%s)\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName(),element.getSimpleName());\n      hasError=true;\n    }\n  }\n  ListenerClass listenerClass=annotationClass.getAnnotation(ListenerClass.class);\n  if (listenerClass == null) {\n    error(element,\"No @%s defined on @%s.\",ListenerClass.class.getSimpleName(),annotationClass.getSimpleName());\n    return;\n  }\n  Class<?> listenerClassClass=listenerClass.value();\n  Listener listener=LISTENER_MAP.get(listenerClassClass);\n  if (listener == null) {\n    try {\n      listener=Listener.from(listenerClassClass);\n      LISTENER_MAP.put(listenerClassClass,listener);\n    }\n catch (    IllegalArgumentException e) {\n      error(elementUtils.getTypeElement(annotationClass.getName()),\"%s (%s on @%s)\",e.getMessage(),listenerClassClass.getName(),annotationClass.getName());\n      return;\n    }\n  }\n  List<? extends VariableElement> methodParameters=executableElement.getParameters();\n  if (methodParameters.size() > listener.getParameterTypes().size()) {\n    error(element,\"@%s methods can have at most %s parameter(s). (%s.%s)\",annotationClass.getSimpleName(),listener.getParameterTypes().size(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (!executableElement.getReturnType().toString().equals(listener.getReturnType())) {\n    error(element,\"@%s methods must have a '%s' return type. (%s.%s)\",annotationClass.getSimpleName(),listener.getReturnType(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (hasError) {\n    return;\n  }\n  Parameter[] parameters=Parameter.NONE;\n  if (!methodParameters.isEmpty()) {\n    parameters=new Parameter[methodParameters.size()];\n    BitSet methodParameterUsed=new BitSet(methodParameters.size());\n    List<String> parameterTypes=listener.getParameterTypes();\n    for (int i=0; i < methodParameters.size(); i++) {\n      VariableElement methodParameter=methodParameters.get(i);\n      TypeMirror methodParameterType=methodParameter.asType();\n      for (int j=0; j < parameterTypes.size(); j++) {\n        if (methodParameterUsed.get(j)) {\n          continue;\n        }\n        if (isSubtypeOfType(methodParameterType,parameterTypes.get(j))) {\n          parameters[i]=new Parameter(j,methodParameterType.toString());\n          methodParameterUsed.set(j);\n          break;\n        }\n      }\n      if (parameters[i] == null) {\n        StringBuilder builder=new StringBuilder();\n        builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n        for (int j=0; j < parameters.length; j++) {\n          Parameter parameter=parameters[j];\n          builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n          if (parameter == null) {\n            builder.append(\"did not match any listener parameters\");\n          }\n else {\n            builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n          }\n        }\n        builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n        for (        String parameterType : listener.getParameterTypes()) {\n          builder.append(\"\\n  \").append(parameterType);\n        }\n        builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n        error(executableElement,builder.toString());\n        return;\n      }\n    }\n  }\n  ViewInjector viewInjector=getOrCreateTargetClass(targetClassMap,enclosingElement);\n  for (  int id : ids) {\n    if (!viewInjector.addMethod(id,listener,name,Arrays.asList(parameters),required)) {\n      error(element,\"Multiple @%s methods declared for ID %s in %s.\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName());\n      return;\n    }\n  }\n  TypeMirror erasedTargetType=typeUtils.erasure(enclosingElement.asType());\n  erasedTargetTypes.add(erasedTargetType);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 716,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6837,
        "startLineNumber" : 206,
        "startColumnNumber" : 2,
        "endLineNumber" : 356,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private void parseListenerAnnotation(Class<? extends Annotation> annotationClass,Element element,Map<TypeElement,ViewInjector> targetClassMap,Set<TypeMirror> erasedTargetTypes) throws Exception {\n  if (!(element instanceof ExecutableElement) || element.getKind() != METHOD) {\n    error(element,\"@%s annotation must be on a method.\",annotationClass.getSimpleName());\n    return;\n  }\n  ExecutableElement executableElement=(ExecutableElement)element;\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  Annotation annotation=element.getAnnotation(annotationClass);\n  Method annotationValue=annotationClass.getDeclaredMethod(\"value\");\n  if (annotationValue == null || annotationValue.getReturnType() != int[].class) {\n    error(element,\"@%s annotation lacks int[] value property. (%s.%s)\",annotationClass,enclosingElement.getQualifiedName(),element.getSimpleName());\n    return;\n  }\n  int[] ids=(int[])annotationValue.invoke(annotation);\n  String name=executableElement.getSimpleName().toString();\n  boolean required=element.getAnnotation(Optional.class) == null;\n  boolean hasError=isValidForGeneratedCode(annotationClass,\"methods\",element);\n  Set<Integer> seenIds=new LinkedHashSet<Integer>(ids.length);\n  for (  int id : ids) {\n    if (!seenIds.add(id)) {\n      error(element,\"@%s annotation for method contains duplicate ID %d. (%s.%s)\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName(),element.getSimpleName());\n      hasError=true;\n    }\n  }\n  ListenerClass listenerClass=annotationClass.getAnnotation(ListenerClass.class);\n  if (listenerClass == null) {\n    error(element,\"No @%s defined on @%s.\",ListenerClass.class.getSimpleName(),annotationClass.getSimpleName());\n    return;\n  }\n  Class<?> listenerClassClass=listenerClass.value();\n  Listener listener=LISTENER_MAP.get(listenerClassClass);\n  if (listener == null) {\n    try {\n      listener=Listener.from(listenerClassClass);\n      LISTENER_MAP.put(listenerClassClass,listener);\n    }\n catch (    IllegalArgumentException e) {\n      error(elementUtils.getTypeElement(annotationClass.getName()),\"%s (%s on @%s)\",e.getMessage(),listenerClassClass.getName(),annotationClass.getName());\n      return;\n    }\n  }\n  List<? extends VariableElement> methodParameters=executableElement.getParameters();\n  if (methodParameters.size() > listener.getParameterTypes().size()) {\n    error(element,\"@%s methods can have at most %s parameter(s). (%s.%s)\",annotationClass.getSimpleName(),listener.getParameterTypes().size(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (!executableElement.getReturnType().toString().equals(listener.getReturnType())) {\n    error(element,\"@%s methods must have a '%s' return type. (%s.%s)\",annotationClass.getSimpleName(),listener.getReturnType(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (hasError) {\n    return;\n  }\n  Parameter[] parameters=Parameter.NONE;\n  if (!methodParameters.isEmpty()) {\n    parameters=new Parameter[methodParameters.size()];\n    BitSet methodParameterUsed=new BitSet(methodParameters.size());\n    List<String> parameterTypes=listener.getParameterTypes();\n    for (int i=0; i < methodParameters.size(); i++) {\n      VariableElement methodParameter=methodParameters.get(i);\n      TypeMirror methodParameterType=methodParameter.asType();\n      for (int j=0; j < parameterTypes.size(); j++) {\n        if (methodParameterUsed.get(j)) {\n          continue;\n        }\n        if (isSubtypeOfType(methodParameterType,parameterTypes.get(j))) {\n          parameters[i]=new Parameter(j,methodParameterType.toString());\n          methodParameterUsed.set(j);\n          break;\n        }\n      }\n      if (parameters[i] == null) {\n        StringBuilder builder=new StringBuilder();\n        builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n        for (int j=0; j < parameters.length; j++) {\n          Parameter parameter=parameters[j];\n          builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n          if (parameter == null) {\n            builder.append(\"did not match any listener parameters\");\n          }\n else {\n            builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n          }\n        }\n        builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n        for (        String parameterType : listener.getParameterTypes()) {\n          builder.append(\"\\n  \").append(parameterType);\n        }\n        builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n        error(executableElement,builder.toString());\n        return;\n      }\n    }\n  }\n  ViewInjector viewInjector=getOrCreateTargetClass(targetClassMap,enclosingElement);\n  for (  int id : ids) {\n    if (!viewInjector.addMethod(id,listener,name,Arrays.asList(parameters),required)) {\n      error(element,\"Multiple @%s methods declared for ID %s in %s.\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName());\n      return;\n    }\n  }\n  TypeMirror erasedTargetType=typeUtils.erasure(enclosingElement.asType());\n  erasedTargetTypes.add(erasedTargetType);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 750,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 295,
        "startColumnNumber" : 24,
        "endLineNumber" : 295,
        "endColumnNumber" : 49
      },
      "nodeContext" : "j < parameterTypes.size()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "j",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 296,
      "startColumnNumber" : 38,
      "endLineNumber" : 296,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 296,
        "startColumnNumber" : 14,
        "endLineNumber" : 296,
        "endColumnNumber" : 40
      },
      "nodeContext" : "methodParameterUsed.get(j)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 296,
        "startColumnNumber" : 10,
        "endLineNumber" : 298,
        "endColumnNumber" : 11
      },
      "nodeContext" : "if (methodParameterUsed.get(j)) {\n  continue;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 315,
        "startLineNumber" : 295,
        "startColumnNumber" : 56,
        "endLineNumber" : 304,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (methodParameterUsed.get(j)) {\n    continue;\n  }\n  if (isSubtypeOfType(methodParameterType,parameterTypes.get(j))) {\n    parameters[i]=new Parameter(j,methodParameterType.toString());\n    methodParameterUsed.set(j);\n    break;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 35,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 363,
        "startLineNumber" : 295,
        "startColumnNumber" : 8,
        "endLineNumber" : 304,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int j=0; j < parameterTypes.size(); j++) {\n  if (methodParameterUsed.get(j)) {\n    continue;\n  }\n  if (isSubtypeOfType(methodParameterType,parameterTypes.get(j))) {\n    parameters[i]=new Parameter(j,methodParameterType.toString());\n    methodParameterUsed.set(j);\n    break;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 48,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 2101,
        "startLineNumber" : 291,
        "startColumnNumber" : 56,
        "endLineNumber" : 341,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  VariableElement methodParameter=methodParameters.get(i);\n  TypeMirror methodParameterType=methodParameter.asType();\n  for (int j=0; j < parameterTypes.size(); j++) {\n    if (methodParameterUsed.get(j)) {\n      continue;\n    }\n    if (isSubtypeOfType(methodParameterType,parameterTypes.get(j))) {\n      parameters[i]=new Parameter(j,methodParameterType.toString());\n      methodParameterUsed.set(j);\n      break;\n    }\n  }\n  if (parameters[i] == null) {\n    StringBuilder builder=new StringBuilder();\n    builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n    for (int j=0; j < parameters.length; j++) {\n      Parameter parameter=parameters[j];\n      builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n      if (parameter == null) {\n        builder.append(\"did not match any listener parameters\");\n      }\n else {\n        builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n      }\n    }\n    builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n    for (    String parameterType : listener.getParameterTypes()) {\n      builder.append(\"\\n  \").append(parameterType);\n    }\n    builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n    error(executableElement,builder.toString());\n    return;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 234,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2151,
        "startLineNumber" : 291,
        "startColumnNumber" : 6,
        "endLineNumber" : 341,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int i=0; i < methodParameters.size(); i++) {\n  VariableElement methodParameter=methodParameters.get(i);\n  TypeMirror methodParameterType=methodParameter.asType();\n  for (int j=0; j < parameterTypes.size(); j++) {\n    if (methodParameterUsed.get(j)) {\n      continue;\n    }\n    if (isSubtypeOfType(methodParameterType,parameterTypes.get(j))) {\n      parameters[i]=new Parameter(j,methodParameterType.toString());\n      methodParameterUsed.set(j);\n      break;\n    }\n  }\n  if (parameters[i] == null) {\n    StringBuilder builder=new StringBuilder();\n    builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n    for (int j=0; j < parameters.length; j++) {\n      Parameter parameter=parameters[j];\n      builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n      if (parameter == null) {\n        builder.append(\"did not match any listener parameters\");\n      }\n else {\n        builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n      }\n    }\n    builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n    for (    String parameterType : listener.getParameterTypes()) {\n      builder.append(\"\\n  \").append(parameterType);\n    }\n    builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n    error(executableElement,builder.toString());\n    return;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 247,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2362,
        "startLineNumber" : 287,
        "startColumnNumber" : 37,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  parameters=new Parameter[methodParameters.size()];\n  BitSet methodParameterUsed=new BitSet(methodParameters.size());\n  List<String> parameterTypes=listener.getParameterTypes();\n  for (int i=0; i < methodParameters.size(); i++) {\n    VariableElement methodParameter=methodParameters.get(i);\n    TypeMirror methodParameterType=methodParameter.asType();\n    for (int j=0; j < parameterTypes.size(); j++) {\n      if (methodParameterUsed.get(j)) {\n        continue;\n      }\n      if (isSubtypeOfType(methodParameterType,parameterTypes.get(j))) {\n        parameters[i]=new Parameter(j,methodParameterType.toString());\n        methodParameterUsed.set(j);\n        break;\n      }\n    }\n    if (parameters[i] == null) {\n      StringBuilder builder=new StringBuilder();\n      builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n      for (int j=0; j < parameters.length; j++) {\n        Parameter parameter=parameters[j];\n        builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n        if (parameter == null) {\n          builder.append(\"did not match any listener parameters\");\n        }\n else {\n          builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n        }\n      }\n      builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n      for (      String parameterType : listener.getParameterTypes()) {\n        builder.append(\"\\n  \").append(parameterType);\n      }\n      builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n      error(executableElement,builder.toString());\n      return;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 281,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2395,
        "startLineNumber" : 287,
        "startColumnNumber" : 4,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (!methodParameters.isEmpty()) {\n  parameters=new Parameter[methodParameters.size()];\n  BitSet methodParameterUsed=new BitSet(methodParameters.size());\n  List<String> parameterTypes=listener.getParameterTypes();\n  for (int i=0; i < methodParameters.size(); i++) {\n    VariableElement methodParameter=methodParameters.get(i);\n    TypeMirror methodParameterType=methodParameter.asType();\n    for (int j=0; j < parameterTypes.size(); j++) {\n      if (methodParameterUsed.get(j)) {\n        continue;\n      }\n      if (isSubtypeOfType(methodParameterType,parameterTypes.get(j))) {\n        parameters[i]=new Parameter(j,methodParameterType.toString());\n        methodParameterUsed.set(j);\n        break;\n      }\n    }\n    if (parameters[i] == null) {\n      StringBuilder builder=new StringBuilder();\n      builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n      for (int j=0; j < parameters.length; j++) {\n        Parameter parameter=parameters[j];\n        builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n        if (parameter == null) {\n          builder.append(\"did not match any listener parameters\");\n        }\n else {\n          builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n        }\n      }\n      builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n      for (      String parameterType : listener.getParameterTypes()) {\n        builder.append(\"\\n  \").append(parameterType);\n      }\n      builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n      error(executableElement,builder.toString());\n      return;\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 286,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6627,
        "startLineNumber" : 208,
        "startColumnNumber" : 23,
        "endLineNumber" : 356,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (!(element instanceof ExecutableElement) || element.getKind() != METHOD) {\n    error(element,\"@%s annotation must be on a method.\",annotationClass.getSimpleName());\n    return;\n  }\n  ExecutableElement executableElement=(ExecutableElement)element;\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  Annotation annotation=element.getAnnotation(annotationClass);\n  Method annotationValue=annotationClass.getDeclaredMethod(\"value\");\n  if (annotationValue == null || annotationValue.getReturnType() != int[].class) {\n    error(element,\"@%s annotation lacks int[] value property. (%s.%s)\",annotationClass,enclosingElement.getQualifiedName(),element.getSimpleName());\n    return;\n  }\n  int[] ids=(int[])annotationValue.invoke(annotation);\n  String name=executableElement.getSimpleName().toString();\n  boolean required=element.getAnnotation(Optional.class) == null;\n  boolean hasError=isValidForGeneratedCode(annotationClass,\"methods\",element);\n  Set<Integer> seenIds=new LinkedHashSet<Integer>(ids.length);\n  for (  int id : ids) {\n    if (!seenIds.add(id)) {\n      error(element,\"@%s annotation for method contains duplicate ID %d. (%s.%s)\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName(),element.getSimpleName());\n      hasError=true;\n    }\n  }\n  ListenerClass listenerClass=annotationClass.getAnnotation(ListenerClass.class);\n  if (listenerClass == null) {\n    error(element,\"No @%s defined on @%s.\",ListenerClass.class.getSimpleName(),annotationClass.getSimpleName());\n    return;\n  }\n  Class<?> listenerClassClass=listenerClass.value();\n  Listener listener=LISTENER_MAP.get(listenerClassClass);\n  if (listener == null) {\n    try {\n      listener=Listener.from(listenerClassClass);\n      LISTENER_MAP.put(listenerClassClass,listener);\n    }\n catch (    IllegalArgumentException e) {\n      error(elementUtils.getTypeElement(annotationClass.getName()),\"%s (%s on @%s)\",e.getMessage(),listenerClassClass.getName(),annotationClass.getName());\n      return;\n    }\n  }\n  List<? extends VariableElement> methodParameters=executableElement.getParameters();\n  if (methodParameters.size() > listener.getParameterTypes().size()) {\n    error(element,\"@%s methods can have at most %s parameter(s). (%s.%s)\",annotationClass.getSimpleName(),listener.getParameterTypes().size(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (!executableElement.getReturnType().toString().equals(listener.getReturnType())) {\n    error(element,\"@%s methods must have a '%s' return type. (%s.%s)\",annotationClass.getSimpleName(),listener.getReturnType(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (hasError) {\n    return;\n  }\n  Parameter[] parameters=Parameter.NONE;\n  if (!methodParameters.isEmpty()) {\n    parameters=new Parameter[methodParameters.size()];\n    BitSet methodParameterUsed=new BitSet(methodParameters.size());\n    List<String> parameterTypes=listener.getParameterTypes();\n    for (int i=0; i < methodParameters.size(); i++) {\n      VariableElement methodParameter=methodParameters.get(i);\n      TypeMirror methodParameterType=methodParameter.asType();\n      for (int j=0; j < parameterTypes.size(); j++) {\n        if (methodParameterUsed.get(j)) {\n          continue;\n        }\n        if (isSubtypeOfType(methodParameterType,parameterTypes.get(j))) {\n          parameters[i]=new Parameter(j,methodParameterType.toString());\n          methodParameterUsed.set(j);\n          break;\n        }\n      }\n      if (parameters[i] == null) {\n        StringBuilder builder=new StringBuilder();\n        builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n        for (int j=0; j < parameters.length; j++) {\n          Parameter parameter=parameters[j];\n          builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n          if (parameter == null) {\n            builder.append(\"did not match any listener parameters\");\n          }\n else {\n            builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n          }\n        }\n        builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n        for (        String parameterType : listener.getParameterTypes()) {\n          builder.append(\"\\n  \").append(parameterType);\n        }\n        builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n        error(executableElement,builder.toString());\n        return;\n      }\n    }\n  }\n  ViewInjector viewInjector=getOrCreateTargetClass(targetClassMap,enclosingElement);\n  for (  int id : ids) {\n    if (!viewInjector.addMethod(id,listener,name,Arrays.asList(parameters),required)) {\n      error(element,\"Multiple @%s methods declared for ID %s in %s.\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName());\n      return;\n    }\n  }\n  TypeMirror erasedTargetType=typeUtils.erasure(enclosingElement.asType());\n  erasedTargetTypes.add(erasedTargetType);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 716,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6837,
        "startLineNumber" : 206,
        "startColumnNumber" : 2,
        "endLineNumber" : 356,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private void parseListenerAnnotation(Class<? extends Annotation> annotationClass,Element element,Map<TypeElement,ViewInjector> targetClassMap,Set<TypeMirror> erasedTargetTypes) throws Exception {\n  if (!(element instanceof ExecutableElement) || element.getKind() != METHOD) {\n    error(element,\"@%s annotation must be on a method.\",annotationClass.getSimpleName());\n    return;\n  }\n  ExecutableElement executableElement=(ExecutableElement)element;\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  Annotation annotation=element.getAnnotation(annotationClass);\n  Method annotationValue=annotationClass.getDeclaredMethod(\"value\");\n  if (annotationValue == null || annotationValue.getReturnType() != int[].class) {\n    error(element,\"@%s annotation lacks int[] value property. (%s.%s)\",annotationClass,enclosingElement.getQualifiedName(),element.getSimpleName());\n    return;\n  }\n  int[] ids=(int[])annotationValue.invoke(annotation);\n  String name=executableElement.getSimpleName().toString();\n  boolean required=element.getAnnotation(Optional.class) == null;\n  boolean hasError=isValidForGeneratedCode(annotationClass,\"methods\",element);\n  Set<Integer> seenIds=new LinkedHashSet<Integer>(ids.length);\n  for (  int id : ids) {\n    if (!seenIds.add(id)) {\n      error(element,\"@%s annotation for method contains duplicate ID %d. (%s.%s)\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName(),element.getSimpleName());\n      hasError=true;\n    }\n  }\n  ListenerClass listenerClass=annotationClass.getAnnotation(ListenerClass.class);\n  if (listenerClass == null) {\n    error(element,\"No @%s defined on @%s.\",ListenerClass.class.getSimpleName(),annotationClass.getSimpleName());\n    return;\n  }\n  Class<?> listenerClassClass=listenerClass.value();\n  Listener listener=LISTENER_MAP.get(listenerClassClass);\n  if (listener == null) {\n    try {\n      listener=Listener.from(listenerClassClass);\n      LISTENER_MAP.put(listenerClassClass,listener);\n    }\n catch (    IllegalArgumentException e) {\n      error(elementUtils.getTypeElement(annotationClass.getName()),\"%s (%s on @%s)\",e.getMessage(),listenerClassClass.getName(),annotationClass.getName());\n      return;\n    }\n  }\n  List<? extends VariableElement> methodParameters=executableElement.getParameters();\n  if (methodParameters.size() > listener.getParameterTypes().size()) {\n    error(element,\"@%s methods can have at most %s parameter(s). (%s.%s)\",annotationClass.getSimpleName(),listener.getParameterTypes().size(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (!executableElement.getReturnType().toString().equals(listener.getReturnType())) {\n    error(element,\"@%s methods must have a '%s' return type. (%s.%s)\",annotationClass.getSimpleName(),listener.getReturnType(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (hasError) {\n    return;\n  }\n  Parameter[] parameters=Parameter.NONE;\n  if (!methodParameters.isEmpty()) {\n    parameters=new Parameter[methodParameters.size()];\n    BitSet methodParameterUsed=new BitSet(methodParameters.size());\n    List<String> parameterTypes=listener.getParameterTypes();\n    for (int i=0; i < methodParameters.size(); i++) {\n      VariableElement methodParameter=methodParameters.get(i);\n      TypeMirror methodParameterType=methodParameter.asType();\n      for (int j=0; j < parameterTypes.size(); j++) {\n        if (methodParameterUsed.get(j)) {\n          continue;\n        }\n        if (isSubtypeOfType(methodParameterType,parameterTypes.get(j))) {\n          parameters[i]=new Parameter(j,methodParameterType.toString());\n          methodParameterUsed.set(j);\n          break;\n        }\n      }\n      if (parameters[i] == null) {\n        StringBuilder builder=new StringBuilder();\n        builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n        for (int j=0; j < parameters.length; j++) {\n          Parameter parameter=parameters[j];\n          builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n          if (parameter == null) {\n            builder.append(\"did not match any listener parameters\");\n          }\n else {\n            builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n          }\n        }\n        builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n        for (        String parameterType : listener.getParameterTypes()) {\n          builder.append(\"\\n  \").append(parameterType);\n        }\n        builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n        error(executableElement,builder.toString());\n        return;\n      }\n    }\n  }\n  ViewInjector viewInjector=getOrCreateTargetClass(targetClassMap,enclosingElement);\n  for (  int id : ids) {\n    if (!viewInjector.addMethod(id,listener,name,Arrays.asList(parameters),required)) {\n      error(element,\"Multiple @%s methods declared for ID %s in %s.\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName());\n      return;\n    }\n  }\n  TypeMirror erasedTargetType=typeUtils.erasure(enclosingElement.asType());\n  erasedTargetTypes.add(erasedTargetType);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 750,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 296,
        "startColumnNumber" : 14,
        "endLineNumber" : 296,
        "endColumnNumber" : 40
      },
      "nodeContext" : "methodParameterUsed.get(j)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "j",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 299,
      "startColumnNumber" : 70,
      "endLineNumber" : 299,
      "endColumnNumber" : 71
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 299,
        "startColumnNumber" : 51,
        "endLineNumber" : 299,
        "endColumnNumber" : 72
      },
      "nodeContext" : "parameterTypes.get(j)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 299,
        "startColumnNumber" : 14,
        "endLineNumber" : 299,
        "endColumnNumber" : 73
      },
      "nodeContext" : "isSubtypeOfType(methodParameterType,parameterTypes.get(j))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 215,
        "startLineNumber" : 299,
        "startColumnNumber" : 10,
        "endLineNumber" : 303,
        "endColumnNumber" : 11
      },
      "nodeContext" : "if (isSubtypeOfType(methodParameterType,parameterTypes.get(j))) {\n  parameters[i]=new Parameter(j,methodParameterType.toString());\n  methodParameterUsed.set(j);\n  break;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 27,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 315,
        "startLineNumber" : 295,
        "startColumnNumber" : 56,
        "endLineNumber" : 304,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (methodParameterUsed.get(j)) {\n    continue;\n  }\n  if (isSubtypeOfType(methodParameterType,parameterTypes.get(j))) {\n    parameters[i]=new Parameter(j,methodParameterType.toString());\n    methodParameterUsed.set(j);\n    break;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 35,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 363,
        "startLineNumber" : 295,
        "startColumnNumber" : 8,
        "endLineNumber" : 304,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int j=0; j < parameterTypes.size(); j++) {\n  if (methodParameterUsed.get(j)) {\n    continue;\n  }\n  if (isSubtypeOfType(methodParameterType,parameterTypes.get(j))) {\n    parameters[i]=new Parameter(j,methodParameterType.toString());\n    methodParameterUsed.set(j);\n    break;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 48,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 2101,
        "startLineNumber" : 291,
        "startColumnNumber" : 56,
        "endLineNumber" : 341,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  VariableElement methodParameter=methodParameters.get(i);\n  TypeMirror methodParameterType=methodParameter.asType();\n  for (int j=0; j < parameterTypes.size(); j++) {\n    if (methodParameterUsed.get(j)) {\n      continue;\n    }\n    if (isSubtypeOfType(methodParameterType,parameterTypes.get(j))) {\n      parameters[i]=new Parameter(j,methodParameterType.toString());\n      methodParameterUsed.set(j);\n      break;\n    }\n  }\n  if (parameters[i] == null) {\n    StringBuilder builder=new StringBuilder();\n    builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n    for (int j=0; j < parameters.length; j++) {\n      Parameter parameter=parameters[j];\n      builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n      if (parameter == null) {\n        builder.append(\"did not match any listener parameters\");\n      }\n else {\n        builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n      }\n    }\n    builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n    for (    String parameterType : listener.getParameterTypes()) {\n      builder.append(\"\\n  \").append(parameterType);\n    }\n    builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n    error(executableElement,builder.toString());\n    return;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 234,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2151,
        "startLineNumber" : 291,
        "startColumnNumber" : 6,
        "endLineNumber" : 341,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int i=0; i < methodParameters.size(); i++) {\n  VariableElement methodParameter=methodParameters.get(i);\n  TypeMirror methodParameterType=methodParameter.asType();\n  for (int j=0; j < parameterTypes.size(); j++) {\n    if (methodParameterUsed.get(j)) {\n      continue;\n    }\n    if (isSubtypeOfType(methodParameterType,parameterTypes.get(j))) {\n      parameters[i]=new Parameter(j,methodParameterType.toString());\n      methodParameterUsed.set(j);\n      break;\n    }\n  }\n  if (parameters[i] == null) {\n    StringBuilder builder=new StringBuilder();\n    builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n    for (int j=0; j < parameters.length; j++) {\n      Parameter parameter=parameters[j];\n      builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n      if (parameter == null) {\n        builder.append(\"did not match any listener parameters\");\n      }\n else {\n        builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n      }\n    }\n    builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n    for (    String parameterType : listener.getParameterTypes()) {\n      builder.append(\"\\n  \").append(parameterType);\n    }\n    builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n    error(executableElement,builder.toString());\n    return;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 247,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2362,
        "startLineNumber" : 287,
        "startColumnNumber" : 37,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  parameters=new Parameter[methodParameters.size()];\n  BitSet methodParameterUsed=new BitSet(methodParameters.size());\n  List<String> parameterTypes=listener.getParameterTypes();\n  for (int i=0; i < methodParameters.size(); i++) {\n    VariableElement methodParameter=methodParameters.get(i);\n    TypeMirror methodParameterType=methodParameter.asType();\n    for (int j=0; j < parameterTypes.size(); j++) {\n      if (methodParameterUsed.get(j)) {\n        continue;\n      }\n      if (isSubtypeOfType(methodParameterType,parameterTypes.get(j))) {\n        parameters[i]=new Parameter(j,methodParameterType.toString());\n        methodParameterUsed.set(j);\n        break;\n      }\n    }\n    if (parameters[i] == null) {\n      StringBuilder builder=new StringBuilder();\n      builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n      for (int j=0; j < parameters.length; j++) {\n        Parameter parameter=parameters[j];\n        builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n        if (parameter == null) {\n          builder.append(\"did not match any listener parameters\");\n        }\n else {\n          builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n        }\n      }\n      builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n      for (      String parameterType : listener.getParameterTypes()) {\n        builder.append(\"\\n  \").append(parameterType);\n      }\n      builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n      error(executableElement,builder.toString());\n      return;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 281,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2395,
        "startLineNumber" : 287,
        "startColumnNumber" : 4,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (!methodParameters.isEmpty()) {\n  parameters=new Parameter[methodParameters.size()];\n  BitSet methodParameterUsed=new BitSet(methodParameters.size());\n  List<String> parameterTypes=listener.getParameterTypes();\n  for (int i=0; i < methodParameters.size(); i++) {\n    VariableElement methodParameter=methodParameters.get(i);\n    TypeMirror methodParameterType=methodParameter.asType();\n    for (int j=0; j < parameterTypes.size(); j++) {\n      if (methodParameterUsed.get(j)) {\n        continue;\n      }\n      if (isSubtypeOfType(methodParameterType,parameterTypes.get(j))) {\n        parameters[i]=new Parameter(j,methodParameterType.toString());\n        methodParameterUsed.set(j);\n        break;\n      }\n    }\n    if (parameters[i] == null) {\n      StringBuilder builder=new StringBuilder();\n      builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n      for (int j=0; j < parameters.length; j++) {\n        Parameter parameter=parameters[j];\n        builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n        if (parameter == null) {\n          builder.append(\"did not match any listener parameters\");\n        }\n else {\n          builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n        }\n      }\n      builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n      for (      String parameterType : listener.getParameterTypes()) {\n        builder.append(\"\\n  \").append(parameterType);\n      }\n      builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n      error(executableElement,builder.toString());\n      return;\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 286,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6627,
        "startLineNumber" : 208,
        "startColumnNumber" : 23,
        "endLineNumber" : 356,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (!(element instanceof ExecutableElement) || element.getKind() != METHOD) {\n    error(element,\"@%s annotation must be on a method.\",annotationClass.getSimpleName());\n    return;\n  }\n  ExecutableElement executableElement=(ExecutableElement)element;\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  Annotation annotation=element.getAnnotation(annotationClass);\n  Method annotationValue=annotationClass.getDeclaredMethod(\"value\");\n  if (annotationValue == null || annotationValue.getReturnType() != int[].class) {\n    error(element,\"@%s annotation lacks int[] value property. (%s.%s)\",annotationClass,enclosingElement.getQualifiedName(),element.getSimpleName());\n    return;\n  }\n  int[] ids=(int[])annotationValue.invoke(annotation);\n  String name=executableElement.getSimpleName().toString();\n  boolean required=element.getAnnotation(Optional.class) == null;\n  boolean hasError=isValidForGeneratedCode(annotationClass,\"methods\",element);\n  Set<Integer> seenIds=new LinkedHashSet<Integer>(ids.length);\n  for (  int id : ids) {\n    if (!seenIds.add(id)) {\n      error(element,\"@%s annotation for method contains duplicate ID %d. (%s.%s)\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName(),element.getSimpleName());\n      hasError=true;\n    }\n  }\n  ListenerClass listenerClass=annotationClass.getAnnotation(ListenerClass.class);\n  if (listenerClass == null) {\n    error(element,\"No @%s defined on @%s.\",ListenerClass.class.getSimpleName(),annotationClass.getSimpleName());\n    return;\n  }\n  Class<?> listenerClassClass=listenerClass.value();\n  Listener listener=LISTENER_MAP.get(listenerClassClass);\n  if (listener == null) {\n    try {\n      listener=Listener.from(listenerClassClass);\n      LISTENER_MAP.put(listenerClassClass,listener);\n    }\n catch (    IllegalArgumentException e) {\n      error(elementUtils.getTypeElement(annotationClass.getName()),\"%s (%s on @%s)\",e.getMessage(),listenerClassClass.getName(),annotationClass.getName());\n      return;\n    }\n  }\n  List<? extends VariableElement> methodParameters=executableElement.getParameters();\n  if (methodParameters.size() > listener.getParameterTypes().size()) {\n    error(element,\"@%s methods can have at most %s parameter(s). (%s.%s)\",annotationClass.getSimpleName(),listener.getParameterTypes().size(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (!executableElement.getReturnType().toString().equals(listener.getReturnType())) {\n    error(element,\"@%s methods must have a '%s' return type. (%s.%s)\",annotationClass.getSimpleName(),listener.getReturnType(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (hasError) {\n    return;\n  }\n  Parameter[] parameters=Parameter.NONE;\n  if (!methodParameters.isEmpty()) {\n    parameters=new Parameter[methodParameters.size()];\n    BitSet methodParameterUsed=new BitSet(methodParameters.size());\n    List<String> parameterTypes=listener.getParameterTypes();\n    for (int i=0; i < methodParameters.size(); i++) {\n      VariableElement methodParameter=methodParameters.get(i);\n      TypeMirror methodParameterType=methodParameter.asType();\n      for (int j=0; j < parameterTypes.size(); j++) {\n        if (methodParameterUsed.get(j)) {\n          continue;\n        }\n        if (isSubtypeOfType(methodParameterType,parameterTypes.get(j))) {\n          parameters[i]=new Parameter(j,methodParameterType.toString());\n          methodParameterUsed.set(j);\n          break;\n        }\n      }\n      if (parameters[i] == null) {\n        StringBuilder builder=new StringBuilder();\n        builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n        for (int j=0; j < parameters.length; j++) {\n          Parameter parameter=parameters[j];\n          builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n          if (parameter == null) {\n            builder.append(\"did not match any listener parameters\");\n          }\n else {\n            builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n          }\n        }\n        builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n        for (        String parameterType : listener.getParameterTypes()) {\n          builder.append(\"\\n  \").append(parameterType);\n        }\n        builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n        error(executableElement,builder.toString());\n        return;\n      }\n    }\n  }\n  ViewInjector viewInjector=getOrCreateTargetClass(targetClassMap,enclosingElement);\n  for (  int id : ids) {\n    if (!viewInjector.addMethod(id,listener,name,Arrays.asList(parameters),required)) {\n      error(element,\"Multiple @%s methods declared for ID %s in %s.\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName());\n      return;\n    }\n  }\n  TypeMirror erasedTargetType=typeUtils.erasure(enclosingElement.asType());\n  erasedTargetTypes.add(erasedTargetType);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 716,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6837,
        "startLineNumber" : 206,
        "startColumnNumber" : 2,
        "endLineNumber" : 356,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private void parseListenerAnnotation(Class<? extends Annotation> annotationClass,Element element,Map<TypeElement,ViewInjector> targetClassMap,Set<TypeMirror> erasedTargetTypes) throws Exception {\n  if (!(element instanceof ExecutableElement) || element.getKind() != METHOD) {\n    error(element,\"@%s annotation must be on a method.\",annotationClass.getSimpleName());\n    return;\n  }\n  ExecutableElement executableElement=(ExecutableElement)element;\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  Annotation annotation=element.getAnnotation(annotationClass);\n  Method annotationValue=annotationClass.getDeclaredMethod(\"value\");\n  if (annotationValue == null || annotationValue.getReturnType() != int[].class) {\n    error(element,\"@%s annotation lacks int[] value property. (%s.%s)\",annotationClass,enclosingElement.getQualifiedName(),element.getSimpleName());\n    return;\n  }\n  int[] ids=(int[])annotationValue.invoke(annotation);\n  String name=executableElement.getSimpleName().toString();\n  boolean required=element.getAnnotation(Optional.class) == null;\n  boolean hasError=isValidForGeneratedCode(annotationClass,\"methods\",element);\n  Set<Integer> seenIds=new LinkedHashSet<Integer>(ids.length);\n  for (  int id : ids) {\n    if (!seenIds.add(id)) {\n      error(element,\"@%s annotation for method contains duplicate ID %d. (%s.%s)\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName(),element.getSimpleName());\n      hasError=true;\n    }\n  }\n  ListenerClass listenerClass=annotationClass.getAnnotation(ListenerClass.class);\n  if (listenerClass == null) {\n    error(element,\"No @%s defined on @%s.\",ListenerClass.class.getSimpleName(),annotationClass.getSimpleName());\n    return;\n  }\n  Class<?> listenerClassClass=listenerClass.value();\n  Listener listener=LISTENER_MAP.get(listenerClassClass);\n  if (listener == null) {\n    try {\n      listener=Listener.from(listenerClassClass);\n      LISTENER_MAP.put(listenerClassClass,listener);\n    }\n catch (    IllegalArgumentException e) {\n      error(elementUtils.getTypeElement(annotationClass.getName()),\"%s (%s on @%s)\",e.getMessage(),listenerClassClass.getName(),annotationClass.getName());\n      return;\n    }\n  }\n  List<? extends VariableElement> methodParameters=executableElement.getParameters();\n  if (methodParameters.size() > listener.getParameterTypes().size()) {\n    error(element,\"@%s methods can have at most %s parameter(s). (%s.%s)\",annotationClass.getSimpleName(),listener.getParameterTypes().size(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (!executableElement.getReturnType().toString().equals(listener.getReturnType())) {\n    error(element,\"@%s methods must have a '%s' return type. (%s.%s)\",annotationClass.getSimpleName(),listener.getReturnType(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (hasError) {\n    return;\n  }\n  Parameter[] parameters=Parameter.NONE;\n  if (!methodParameters.isEmpty()) {\n    parameters=new Parameter[methodParameters.size()];\n    BitSet methodParameterUsed=new BitSet(methodParameters.size());\n    List<String> parameterTypes=listener.getParameterTypes();\n    for (int i=0; i < methodParameters.size(); i++) {\n      VariableElement methodParameter=methodParameters.get(i);\n      TypeMirror methodParameterType=methodParameter.asType();\n      for (int j=0; j < parameterTypes.size(); j++) {\n        if (methodParameterUsed.get(j)) {\n          continue;\n        }\n        if (isSubtypeOfType(methodParameterType,parameterTypes.get(j))) {\n          parameters[i]=new Parameter(j,methodParameterType.toString());\n          methodParameterUsed.set(j);\n          break;\n        }\n      }\n      if (parameters[i] == null) {\n        StringBuilder builder=new StringBuilder();\n        builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n        for (int j=0; j < parameters.length; j++) {\n          Parameter parameter=parameters[j];\n          builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n          if (parameter == null) {\n            builder.append(\"did not match any listener parameters\");\n          }\n else {\n            builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n          }\n        }\n        builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n        for (        String parameterType : listener.getParameterTypes()) {\n          builder.append(\"\\n  \").append(parameterType);\n        }\n        builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n        error(executableElement,builder.toString());\n        return;\n      }\n    }\n  }\n  ViewInjector viewInjector=getOrCreateTargetClass(targetClassMap,enclosingElement);\n  for (  int id : ids) {\n    if (!viewInjector.addMethod(id,listener,name,Arrays.asList(parameters),required)) {\n      error(element,\"Multiple @%s methods declared for ID %s in %s.\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName());\n      return;\n    }\n  }\n  TypeMirror erasedTargetType=typeUtils.erasure(enclosingElement.asType());\n  erasedTargetTypes.add(erasedTargetType);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 750,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 299,
        "startColumnNumber" : 14,
        "endLineNumber" : 299,
        "endColumnNumber" : 73
      },
      "nodeContext" : "isSubtypeOfType(methodParameterType,parameterTypes.get(j))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "j",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 300,
      "startColumnNumber" : 42,
      "endLineNumber" : 300,
      "endColumnNumber" : 43
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 300,
        "startColumnNumber" : 28,
        "endLineNumber" : 300,
        "endColumnNumber" : 76
      },
      "nodeContext" : "new Parameter(j,methodParameterType.toString())",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 300,
        "startColumnNumber" : 12,
        "endLineNumber" : 300,
        "endColumnNumber" : 76
      },
      "nodeContext" : "parameters[i]=new Parameter(j,methodParameterType.toString())",
      "nodeType" : "Assignment",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 300,
        "startColumnNumber" : 12,
        "endLineNumber" : 300,
        "endColumnNumber" : 77
      },
      "nodeContext" : "parameters[i]=new Parameter(j,methodParameterType.toString());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 150,
        "startLineNumber" : 299,
        "startColumnNumber" : 75,
        "endLineNumber" : 303,
        "endColumnNumber" : 11
      },
      "nodeContext" : "{\n  parameters[i]=new Parameter(j,methodParameterType.toString());\n  methodParameterUsed.set(j);\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 215,
        "startLineNumber" : 299,
        "startColumnNumber" : 10,
        "endLineNumber" : 303,
        "endColumnNumber" : 11
      },
      "nodeContext" : "if (isSubtypeOfType(methodParameterType,parameterTypes.get(j))) {\n  parameters[i]=new Parameter(j,methodParameterType.toString());\n  methodParameterUsed.set(j);\n  break;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 27,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 315,
        "startLineNumber" : 295,
        "startColumnNumber" : 56,
        "endLineNumber" : 304,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (methodParameterUsed.get(j)) {\n    continue;\n  }\n  if (isSubtypeOfType(methodParameterType,parameterTypes.get(j))) {\n    parameters[i]=new Parameter(j,methodParameterType.toString());\n    methodParameterUsed.set(j);\n    break;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 35,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 363,
        "startLineNumber" : 295,
        "startColumnNumber" : 8,
        "endLineNumber" : 304,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int j=0; j < parameterTypes.size(); j++) {\n  if (methodParameterUsed.get(j)) {\n    continue;\n  }\n  if (isSubtypeOfType(methodParameterType,parameterTypes.get(j))) {\n    parameters[i]=new Parameter(j,methodParameterType.toString());\n    methodParameterUsed.set(j);\n    break;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 48,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 2101,
        "startLineNumber" : 291,
        "startColumnNumber" : 56,
        "endLineNumber" : 341,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  VariableElement methodParameter=methodParameters.get(i);\n  TypeMirror methodParameterType=methodParameter.asType();\n  for (int j=0; j < parameterTypes.size(); j++) {\n    if (methodParameterUsed.get(j)) {\n      continue;\n    }\n    if (isSubtypeOfType(methodParameterType,parameterTypes.get(j))) {\n      parameters[i]=new Parameter(j,methodParameterType.toString());\n      methodParameterUsed.set(j);\n      break;\n    }\n  }\n  if (parameters[i] == null) {\n    StringBuilder builder=new StringBuilder();\n    builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n    for (int j=0; j < parameters.length; j++) {\n      Parameter parameter=parameters[j];\n      builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n      if (parameter == null) {\n        builder.append(\"did not match any listener parameters\");\n      }\n else {\n        builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n      }\n    }\n    builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n    for (    String parameterType : listener.getParameterTypes()) {\n      builder.append(\"\\n  \").append(parameterType);\n    }\n    builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n    error(executableElement,builder.toString());\n    return;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 234,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2151,
        "startLineNumber" : 291,
        "startColumnNumber" : 6,
        "endLineNumber" : 341,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int i=0; i < methodParameters.size(); i++) {\n  VariableElement methodParameter=methodParameters.get(i);\n  TypeMirror methodParameterType=methodParameter.asType();\n  for (int j=0; j < parameterTypes.size(); j++) {\n    if (methodParameterUsed.get(j)) {\n      continue;\n    }\n    if (isSubtypeOfType(methodParameterType,parameterTypes.get(j))) {\n      parameters[i]=new Parameter(j,methodParameterType.toString());\n      methodParameterUsed.set(j);\n      break;\n    }\n  }\n  if (parameters[i] == null) {\n    StringBuilder builder=new StringBuilder();\n    builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n    for (int j=0; j < parameters.length; j++) {\n      Parameter parameter=parameters[j];\n      builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n      if (parameter == null) {\n        builder.append(\"did not match any listener parameters\");\n      }\n else {\n        builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n      }\n    }\n    builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n    for (    String parameterType : listener.getParameterTypes()) {\n      builder.append(\"\\n  \").append(parameterType);\n    }\n    builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n    error(executableElement,builder.toString());\n    return;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 247,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2362,
        "startLineNumber" : 287,
        "startColumnNumber" : 37,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  parameters=new Parameter[methodParameters.size()];\n  BitSet methodParameterUsed=new BitSet(methodParameters.size());\n  List<String> parameterTypes=listener.getParameterTypes();\n  for (int i=0; i < methodParameters.size(); i++) {\n    VariableElement methodParameter=methodParameters.get(i);\n    TypeMirror methodParameterType=methodParameter.asType();\n    for (int j=0; j < parameterTypes.size(); j++) {\n      if (methodParameterUsed.get(j)) {\n        continue;\n      }\n      if (isSubtypeOfType(methodParameterType,parameterTypes.get(j))) {\n        parameters[i]=new Parameter(j,methodParameterType.toString());\n        methodParameterUsed.set(j);\n        break;\n      }\n    }\n    if (parameters[i] == null) {\n      StringBuilder builder=new StringBuilder();\n      builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n      for (int j=0; j < parameters.length; j++) {\n        Parameter parameter=parameters[j];\n        builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n        if (parameter == null) {\n          builder.append(\"did not match any listener parameters\");\n        }\n else {\n          builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n        }\n      }\n      builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n      for (      String parameterType : listener.getParameterTypes()) {\n        builder.append(\"\\n  \").append(parameterType);\n      }\n      builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n      error(executableElement,builder.toString());\n      return;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 281,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2395,
        "startLineNumber" : 287,
        "startColumnNumber" : 4,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (!methodParameters.isEmpty()) {\n  parameters=new Parameter[methodParameters.size()];\n  BitSet methodParameterUsed=new BitSet(methodParameters.size());\n  List<String> parameterTypes=listener.getParameterTypes();\n  for (int i=0; i < methodParameters.size(); i++) {\n    VariableElement methodParameter=methodParameters.get(i);\n    TypeMirror methodParameterType=methodParameter.asType();\n    for (int j=0; j < parameterTypes.size(); j++) {\n      if (methodParameterUsed.get(j)) {\n        continue;\n      }\n      if (isSubtypeOfType(methodParameterType,parameterTypes.get(j))) {\n        parameters[i]=new Parameter(j,methodParameterType.toString());\n        methodParameterUsed.set(j);\n        break;\n      }\n    }\n    if (parameters[i] == null) {\n      StringBuilder builder=new StringBuilder();\n      builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n      for (int j=0; j < parameters.length; j++) {\n        Parameter parameter=parameters[j];\n        builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n        if (parameter == null) {\n          builder.append(\"did not match any listener parameters\");\n        }\n else {\n          builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n        }\n      }\n      builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n      for (      String parameterType : listener.getParameterTypes()) {\n        builder.append(\"\\n  \").append(parameterType);\n      }\n      builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n      error(executableElement,builder.toString());\n      return;\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 286,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6627,
        "startLineNumber" : 208,
        "startColumnNumber" : 23,
        "endLineNumber" : 356,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (!(element instanceof ExecutableElement) || element.getKind() != METHOD) {\n    error(element,\"@%s annotation must be on a method.\",annotationClass.getSimpleName());\n    return;\n  }\n  ExecutableElement executableElement=(ExecutableElement)element;\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  Annotation annotation=element.getAnnotation(annotationClass);\n  Method annotationValue=annotationClass.getDeclaredMethod(\"value\");\n  if (annotationValue == null || annotationValue.getReturnType() != int[].class) {\n    error(element,\"@%s annotation lacks int[] value property. (%s.%s)\",annotationClass,enclosingElement.getQualifiedName(),element.getSimpleName());\n    return;\n  }\n  int[] ids=(int[])annotationValue.invoke(annotation);\n  String name=executableElement.getSimpleName().toString();\n  boolean required=element.getAnnotation(Optional.class) == null;\n  boolean hasError=isValidForGeneratedCode(annotationClass,\"methods\",element);\n  Set<Integer> seenIds=new LinkedHashSet<Integer>(ids.length);\n  for (  int id : ids) {\n    if (!seenIds.add(id)) {\n      error(element,\"@%s annotation for method contains duplicate ID %d. (%s.%s)\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName(),element.getSimpleName());\n      hasError=true;\n    }\n  }\n  ListenerClass listenerClass=annotationClass.getAnnotation(ListenerClass.class);\n  if (listenerClass == null) {\n    error(element,\"No @%s defined on @%s.\",ListenerClass.class.getSimpleName(),annotationClass.getSimpleName());\n    return;\n  }\n  Class<?> listenerClassClass=listenerClass.value();\n  Listener listener=LISTENER_MAP.get(listenerClassClass);\n  if (listener == null) {\n    try {\n      listener=Listener.from(listenerClassClass);\n      LISTENER_MAP.put(listenerClassClass,listener);\n    }\n catch (    IllegalArgumentException e) {\n      error(elementUtils.getTypeElement(annotationClass.getName()),\"%s (%s on @%s)\",e.getMessage(),listenerClassClass.getName(),annotationClass.getName());\n      return;\n    }\n  }\n  List<? extends VariableElement> methodParameters=executableElement.getParameters();\n  if (methodParameters.size() > listener.getParameterTypes().size()) {\n    error(element,\"@%s methods can have at most %s parameter(s). (%s.%s)\",annotationClass.getSimpleName(),listener.getParameterTypes().size(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (!executableElement.getReturnType().toString().equals(listener.getReturnType())) {\n    error(element,\"@%s methods must have a '%s' return type. (%s.%s)\",annotationClass.getSimpleName(),listener.getReturnType(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (hasError) {\n    return;\n  }\n  Parameter[] parameters=Parameter.NONE;\n  if (!methodParameters.isEmpty()) {\n    parameters=new Parameter[methodParameters.size()];\n    BitSet methodParameterUsed=new BitSet(methodParameters.size());\n    List<String> parameterTypes=listener.getParameterTypes();\n    for (int i=0; i < methodParameters.size(); i++) {\n      VariableElement methodParameter=methodParameters.get(i);\n      TypeMirror methodParameterType=methodParameter.asType();\n      for (int j=0; j < parameterTypes.size(); j++) {\n        if (methodParameterUsed.get(j)) {\n          continue;\n        }\n        if (isSubtypeOfType(methodParameterType,parameterTypes.get(j))) {\n          parameters[i]=new Parameter(j,methodParameterType.toString());\n          methodParameterUsed.set(j);\n          break;\n        }\n      }\n      if (parameters[i] == null) {\n        StringBuilder builder=new StringBuilder();\n        builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n        for (int j=0; j < parameters.length; j++) {\n          Parameter parameter=parameters[j];\n          builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n          if (parameter == null) {\n            builder.append(\"did not match any listener parameters\");\n          }\n else {\n            builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n          }\n        }\n        builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n        for (        String parameterType : listener.getParameterTypes()) {\n          builder.append(\"\\n  \").append(parameterType);\n        }\n        builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n        error(executableElement,builder.toString());\n        return;\n      }\n    }\n  }\n  ViewInjector viewInjector=getOrCreateTargetClass(targetClassMap,enclosingElement);\n  for (  int id : ids) {\n    if (!viewInjector.addMethod(id,listener,name,Arrays.asList(parameters),required)) {\n      error(element,\"Multiple @%s methods declared for ID %s in %s.\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName());\n      return;\n    }\n  }\n  TypeMirror erasedTargetType=typeUtils.erasure(enclosingElement.asType());\n  erasedTargetTypes.add(erasedTargetType);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 716,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6837,
        "startLineNumber" : 206,
        "startColumnNumber" : 2,
        "endLineNumber" : 356,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private void parseListenerAnnotation(Class<? extends Annotation> annotationClass,Element element,Map<TypeElement,ViewInjector> targetClassMap,Set<TypeMirror> erasedTargetTypes) throws Exception {\n  if (!(element instanceof ExecutableElement) || element.getKind() != METHOD) {\n    error(element,\"@%s annotation must be on a method.\",annotationClass.getSimpleName());\n    return;\n  }\n  ExecutableElement executableElement=(ExecutableElement)element;\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  Annotation annotation=element.getAnnotation(annotationClass);\n  Method annotationValue=annotationClass.getDeclaredMethod(\"value\");\n  if (annotationValue == null || annotationValue.getReturnType() != int[].class) {\n    error(element,\"@%s annotation lacks int[] value property. (%s.%s)\",annotationClass,enclosingElement.getQualifiedName(),element.getSimpleName());\n    return;\n  }\n  int[] ids=(int[])annotationValue.invoke(annotation);\n  String name=executableElement.getSimpleName().toString();\n  boolean required=element.getAnnotation(Optional.class) == null;\n  boolean hasError=isValidForGeneratedCode(annotationClass,\"methods\",element);\n  Set<Integer> seenIds=new LinkedHashSet<Integer>(ids.length);\n  for (  int id : ids) {\n    if (!seenIds.add(id)) {\n      error(element,\"@%s annotation for method contains duplicate ID %d. (%s.%s)\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName(),element.getSimpleName());\n      hasError=true;\n    }\n  }\n  ListenerClass listenerClass=annotationClass.getAnnotation(ListenerClass.class);\n  if (listenerClass == null) {\n    error(element,\"No @%s defined on @%s.\",ListenerClass.class.getSimpleName(),annotationClass.getSimpleName());\n    return;\n  }\n  Class<?> listenerClassClass=listenerClass.value();\n  Listener listener=LISTENER_MAP.get(listenerClassClass);\n  if (listener == null) {\n    try {\n      listener=Listener.from(listenerClassClass);\n      LISTENER_MAP.put(listenerClassClass,listener);\n    }\n catch (    IllegalArgumentException e) {\n      error(elementUtils.getTypeElement(annotationClass.getName()),\"%s (%s on @%s)\",e.getMessage(),listenerClassClass.getName(),annotationClass.getName());\n      return;\n    }\n  }\n  List<? extends VariableElement> methodParameters=executableElement.getParameters();\n  if (methodParameters.size() > listener.getParameterTypes().size()) {\n    error(element,\"@%s methods can have at most %s parameter(s). (%s.%s)\",annotationClass.getSimpleName(),listener.getParameterTypes().size(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (!executableElement.getReturnType().toString().equals(listener.getReturnType())) {\n    error(element,\"@%s methods must have a '%s' return type. (%s.%s)\",annotationClass.getSimpleName(),listener.getReturnType(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (hasError) {\n    return;\n  }\n  Parameter[] parameters=Parameter.NONE;\n  if (!methodParameters.isEmpty()) {\n    parameters=new Parameter[methodParameters.size()];\n    BitSet methodParameterUsed=new BitSet(methodParameters.size());\n    List<String> parameterTypes=listener.getParameterTypes();\n    for (int i=0; i < methodParameters.size(); i++) {\n      VariableElement methodParameter=methodParameters.get(i);\n      TypeMirror methodParameterType=methodParameter.asType();\n      for (int j=0; j < parameterTypes.size(); j++) {\n        if (methodParameterUsed.get(j)) {\n          continue;\n        }\n        if (isSubtypeOfType(methodParameterType,parameterTypes.get(j))) {\n          parameters[i]=new Parameter(j,methodParameterType.toString());\n          methodParameterUsed.set(j);\n          break;\n        }\n      }\n      if (parameters[i] == null) {\n        StringBuilder builder=new StringBuilder();\n        builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n        for (int j=0; j < parameters.length; j++) {\n          Parameter parameter=parameters[j];\n          builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n          if (parameter == null) {\n            builder.append(\"did not match any listener parameters\");\n          }\n else {\n            builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n          }\n        }\n        builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n        for (        String parameterType : listener.getParameterTypes()) {\n          builder.append(\"\\n  \").append(parameterType);\n        }\n        builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n        error(executableElement,builder.toString());\n        return;\n      }\n    }\n  }\n  ViewInjector viewInjector=getOrCreateTargetClass(targetClassMap,enclosingElement);\n  for (  int id : ids) {\n    if (!viewInjector.addMethod(id,listener,name,Arrays.asList(parameters),required)) {\n      error(element,\"Multiple @%s methods declared for ID %s in %s.\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName());\n      return;\n    }\n  }\n  TypeMirror erasedTargetType=typeUtils.erasure(enclosingElement.asType());\n  erasedTargetTypes.add(erasedTargetType);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 750,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 300,
        "startColumnNumber" : 12,
        "endLineNumber" : 300,
        "endColumnNumber" : 77
      },
      "nodeContext" : "parameters[i]=new Parameter(j,methodParameterType.toString());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "j",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 301,
      "startColumnNumber" : 36,
      "endLineNumber" : 301,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 301,
        "startColumnNumber" : 12,
        "endLineNumber" : 301,
        "endColumnNumber" : 38
      },
      "nodeContext" : "methodParameterUsed.set(j)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 301,
        "startColumnNumber" : 12,
        "endLineNumber" : 301,
        "endColumnNumber" : 39
      },
      "nodeContext" : "methodParameterUsed.set(j);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 150,
        "startLineNumber" : 299,
        "startColumnNumber" : 75,
        "endLineNumber" : 303,
        "endColumnNumber" : 11
      },
      "nodeContext" : "{\n  parameters[i]=new Parameter(j,methodParameterType.toString());\n  methodParameterUsed.set(j);\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 215,
        "startLineNumber" : 299,
        "startColumnNumber" : 10,
        "endLineNumber" : 303,
        "endColumnNumber" : 11
      },
      "nodeContext" : "if (isSubtypeOfType(methodParameterType,parameterTypes.get(j))) {\n  parameters[i]=new Parameter(j,methodParameterType.toString());\n  methodParameterUsed.set(j);\n  break;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 27,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 315,
        "startLineNumber" : 295,
        "startColumnNumber" : 56,
        "endLineNumber" : 304,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (methodParameterUsed.get(j)) {\n    continue;\n  }\n  if (isSubtypeOfType(methodParameterType,parameterTypes.get(j))) {\n    parameters[i]=new Parameter(j,methodParameterType.toString());\n    methodParameterUsed.set(j);\n    break;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 35,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 363,
        "startLineNumber" : 295,
        "startColumnNumber" : 8,
        "endLineNumber" : 304,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int j=0; j < parameterTypes.size(); j++) {\n  if (methodParameterUsed.get(j)) {\n    continue;\n  }\n  if (isSubtypeOfType(methodParameterType,parameterTypes.get(j))) {\n    parameters[i]=new Parameter(j,methodParameterType.toString());\n    methodParameterUsed.set(j);\n    break;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 48,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 2101,
        "startLineNumber" : 291,
        "startColumnNumber" : 56,
        "endLineNumber" : 341,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  VariableElement methodParameter=methodParameters.get(i);\n  TypeMirror methodParameterType=methodParameter.asType();\n  for (int j=0; j < parameterTypes.size(); j++) {\n    if (methodParameterUsed.get(j)) {\n      continue;\n    }\n    if (isSubtypeOfType(methodParameterType,parameterTypes.get(j))) {\n      parameters[i]=new Parameter(j,methodParameterType.toString());\n      methodParameterUsed.set(j);\n      break;\n    }\n  }\n  if (parameters[i] == null) {\n    StringBuilder builder=new StringBuilder();\n    builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n    for (int j=0; j < parameters.length; j++) {\n      Parameter parameter=parameters[j];\n      builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n      if (parameter == null) {\n        builder.append(\"did not match any listener parameters\");\n      }\n else {\n        builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n      }\n    }\n    builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n    for (    String parameterType : listener.getParameterTypes()) {\n      builder.append(\"\\n  \").append(parameterType);\n    }\n    builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n    error(executableElement,builder.toString());\n    return;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 234,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2151,
        "startLineNumber" : 291,
        "startColumnNumber" : 6,
        "endLineNumber" : 341,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int i=0; i < methodParameters.size(); i++) {\n  VariableElement methodParameter=methodParameters.get(i);\n  TypeMirror methodParameterType=methodParameter.asType();\n  for (int j=0; j < parameterTypes.size(); j++) {\n    if (methodParameterUsed.get(j)) {\n      continue;\n    }\n    if (isSubtypeOfType(methodParameterType,parameterTypes.get(j))) {\n      parameters[i]=new Parameter(j,methodParameterType.toString());\n      methodParameterUsed.set(j);\n      break;\n    }\n  }\n  if (parameters[i] == null) {\n    StringBuilder builder=new StringBuilder();\n    builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n    for (int j=0; j < parameters.length; j++) {\n      Parameter parameter=parameters[j];\n      builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n      if (parameter == null) {\n        builder.append(\"did not match any listener parameters\");\n      }\n else {\n        builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n      }\n    }\n    builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n    for (    String parameterType : listener.getParameterTypes()) {\n      builder.append(\"\\n  \").append(parameterType);\n    }\n    builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n    error(executableElement,builder.toString());\n    return;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 247,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2362,
        "startLineNumber" : 287,
        "startColumnNumber" : 37,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  parameters=new Parameter[methodParameters.size()];\n  BitSet methodParameterUsed=new BitSet(methodParameters.size());\n  List<String> parameterTypes=listener.getParameterTypes();\n  for (int i=0; i < methodParameters.size(); i++) {\n    VariableElement methodParameter=methodParameters.get(i);\n    TypeMirror methodParameterType=methodParameter.asType();\n    for (int j=0; j < parameterTypes.size(); j++) {\n      if (methodParameterUsed.get(j)) {\n        continue;\n      }\n      if (isSubtypeOfType(methodParameterType,parameterTypes.get(j))) {\n        parameters[i]=new Parameter(j,methodParameterType.toString());\n        methodParameterUsed.set(j);\n        break;\n      }\n    }\n    if (parameters[i] == null) {\n      StringBuilder builder=new StringBuilder();\n      builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n      for (int j=0; j < parameters.length; j++) {\n        Parameter parameter=parameters[j];\n        builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n        if (parameter == null) {\n          builder.append(\"did not match any listener parameters\");\n        }\n else {\n          builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n        }\n      }\n      builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n      for (      String parameterType : listener.getParameterTypes()) {\n        builder.append(\"\\n  \").append(parameterType);\n      }\n      builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n      error(executableElement,builder.toString());\n      return;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 281,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2395,
        "startLineNumber" : 287,
        "startColumnNumber" : 4,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (!methodParameters.isEmpty()) {\n  parameters=new Parameter[methodParameters.size()];\n  BitSet methodParameterUsed=new BitSet(methodParameters.size());\n  List<String> parameterTypes=listener.getParameterTypes();\n  for (int i=0; i < methodParameters.size(); i++) {\n    VariableElement methodParameter=methodParameters.get(i);\n    TypeMirror methodParameterType=methodParameter.asType();\n    for (int j=0; j < parameterTypes.size(); j++) {\n      if (methodParameterUsed.get(j)) {\n        continue;\n      }\n      if (isSubtypeOfType(methodParameterType,parameterTypes.get(j))) {\n        parameters[i]=new Parameter(j,methodParameterType.toString());\n        methodParameterUsed.set(j);\n        break;\n      }\n    }\n    if (parameters[i] == null) {\n      StringBuilder builder=new StringBuilder();\n      builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n      for (int j=0; j < parameters.length; j++) {\n        Parameter parameter=parameters[j];\n        builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n        if (parameter == null) {\n          builder.append(\"did not match any listener parameters\");\n        }\n else {\n          builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n        }\n      }\n      builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n      for (      String parameterType : listener.getParameterTypes()) {\n        builder.append(\"\\n  \").append(parameterType);\n      }\n      builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n      error(executableElement,builder.toString());\n      return;\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 286,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6627,
        "startLineNumber" : 208,
        "startColumnNumber" : 23,
        "endLineNumber" : 356,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (!(element instanceof ExecutableElement) || element.getKind() != METHOD) {\n    error(element,\"@%s annotation must be on a method.\",annotationClass.getSimpleName());\n    return;\n  }\n  ExecutableElement executableElement=(ExecutableElement)element;\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  Annotation annotation=element.getAnnotation(annotationClass);\n  Method annotationValue=annotationClass.getDeclaredMethod(\"value\");\n  if (annotationValue == null || annotationValue.getReturnType() != int[].class) {\n    error(element,\"@%s annotation lacks int[] value property. (%s.%s)\",annotationClass,enclosingElement.getQualifiedName(),element.getSimpleName());\n    return;\n  }\n  int[] ids=(int[])annotationValue.invoke(annotation);\n  String name=executableElement.getSimpleName().toString();\n  boolean required=element.getAnnotation(Optional.class) == null;\n  boolean hasError=isValidForGeneratedCode(annotationClass,\"methods\",element);\n  Set<Integer> seenIds=new LinkedHashSet<Integer>(ids.length);\n  for (  int id : ids) {\n    if (!seenIds.add(id)) {\n      error(element,\"@%s annotation for method contains duplicate ID %d. (%s.%s)\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName(),element.getSimpleName());\n      hasError=true;\n    }\n  }\n  ListenerClass listenerClass=annotationClass.getAnnotation(ListenerClass.class);\n  if (listenerClass == null) {\n    error(element,\"No @%s defined on @%s.\",ListenerClass.class.getSimpleName(),annotationClass.getSimpleName());\n    return;\n  }\n  Class<?> listenerClassClass=listenerClass.value();\n  Listener listener=LISTENER_MAP.get(listenerClassClass);\n  if (listener == null) {\n    try {\n      listener=Listener.from(listenerClassClass);\n      LISTENER_MAP.put(listenerClassClass,listener);\n    }\n catch (    IllegalArgumentException e) {\n      error(elementUtils.getTypeElement(annotationClass.getName()),\"%s (%s on @%s)\",e.getMessage(),listenerClassClass.getName(),annotationClass.getName());\n      return;\n    }\n  }\n  List<? extends VariableElement> methodParameters=executableElement.getParameters();\n  if (methodParameters.size() > listener.getParameterTypes().size()) {\n    error(element,\"@%s methods can have at most %s parameter(s). (%s.%s)\",annotationClass.getSimpleName(),listener.getParameterTypes().size(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (!executableElement.getReturnType().toString().equals(listener.getReturnType())) {\n    error(element,\"@%s methods must have a '%s' return type. (%s.%s)\",annotationClass.getSimpleName(),listener.getReturnType(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (hasError) {\n    return;\n  }\n  Parameter[] parameters=Parameter.NONE;\n  if (!methodParameters.isEmpty()) {\n    parameters=new Parameter[methodParameters.size()];\n    BitSet methodParameterUsed=new BitSet(methodParameters.size());\n    List<String> parameterTypes=listener.getParameterTypes();\n    for (int i=0; i < methodParameters.size(); i++) {\n      VariableElement methodParameter=methodParameters.get(i);\n      TypeMirror methodParameterType=methodParameter.asType();\n      for (int j=0; j < parameterTypes.size(); j++) {\n        if (methodParameterUsed.get(j)) {\n          continue;\n        }\n        if (isSubtypeOfType(methodParameterType,parameterTypes.get(j))) {\n          parameters[i]=new Parameter(j,methodParameterType.toString());\n          methodParameterUsed.set(j);\n          break;\n        }\n      }\n      if (parameters[i] == null) {\n        StringBuilder builder=new StringBuilder();\n        builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n        for (int j=0; j < parameters.length; j++) {\n          Parameter parameter=parameters[j];\n          builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n          if (parameter == null) {\n            builder.append(\"did not match any listener parameters\");\n          }\n else {\n            builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n          }\n        }\n        builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n        for (        String parameterType : listener.getParameterTypes()) {\n          builder.append(\"\\n  \").append(parameterType);\n        }\n        builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n        error(executableElement,builder.toString());\n        return;\n      }\n    }\n  }\n  ViewInjector viewInjector=getOrCreateTargetClass(targetClassMap,enclosingElement);\n  for (  int id : ids) {\n    if (!viewInjector.addMethod(id,listener,name,Arrays.asList(parameters),required)) {\n      error(element,\"Multiple @%s methods declared for ID %s in %s.\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName());\n      return;\n    }\n  }\n  TypeMirror erasedTargetType=typeUtils.erasure(enclosingElement.asType());\n  erasedTargetTypes.add(erasedTargetType);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 716,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6837,
        "startLineNumber" : 206,
        "startColumnNumber" : 2,
        "endLineNumber" : 356,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private void parseListenerAnnotation(Class<? extends Annotation> annotationClass,Element element,Map<TypeElement,ViewInjector> targetClassMap,Set<TypeMirror> erasedTargetTypes) throws Exception {\n  if (!(element instanceof ExecutableElement) || element.getKind() != METHOD) {\n    error(element,\"@%s annotation must be on a method.\",annotationClass.getSimpleName());\n    return;\n  }\n  ExecutableElement executableElement=(ExecutableElement)element;\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  Annotation annotation=element.getAnnotation(annotationClass);\n  Method annotationValue=annotationClass.getDeclaredMethod(\"value\");\n  if (annotationValue == null || annotationValue.getReturnType() != int[].class) {\n    error(element,\"@%s annotation lacks int[] value property. (%s.%s)\",annotationClass,enclosingElement.getQualifiedName(),element.getSimpleName());\n    return;\n  }\n  int[] ids=(int[])annotationValue.invoke(annotation);\n  String name=executableElement.getSimpleName().toString();\n  boolean required=element.getAnnotation(Optional.class) == null;\n  boolean hasError=isValidForGeneratedCode(annotationClass,\"methods\",element);\n  Set<Integer> seenIds=new LinkedHashSet<Integer>(ids.length);\n  for (  int id : ids) {\n    if (!seenIds.add(id)) {\n      error(element,\"@%s annotation for method contains duplicate ID %d. (%s.%s)\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName(),element.getSimpleName());\n      hasError=true;\n    }\n  }\n  ListenerClass listenerClass=annotationClass.getAnnotation(ListenerClass.class);\n  if (listenerClass == null) {\n    error(element,\"No @%s defined on @%s.\",ListenerClass.class.getSimpleName(),annotationClass.getSimpleName());\n    return;\n  }\n  Class<?> listenerClassClass=listenerClass.value();\n  Listener listener=LISTENER_MAP.get(listenerClassClass);\n  if (listener == null) {\n    try {\n      listener=Listener.from(listenerClassClass);\n      LISTENER_MAP.put(listenerClassClass,listener);\n    }\n catch (    IllegalArgumentException e) {\n      error(elementUtils.getTypeElement(annotationClass.getName()),\"%s (%s on @%s)\",e.getMessage(),listenerClassClass.getName(),annotationClass.getName());\n      return;\n    }\n  }\n  List<? extends VariableElement> methodParameters=executableElement.getParameters();\n  if (methodParameters.size() > listener.getParameterTypes().size()) {\n    error(element,\"@%s methods can have at most %s parameter(s). (%s.%s)\",annotationClass.getSimpleName(),listener.getParameterTypes().size(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (!executableElement.getReturnType().toString().equals(listener.getReturnType())) {\n    error(element,\"@%s methods must have a '%s' return type. (%s.%s)\",annotationClass.getSimpleName(),listener.getReturnType(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (hasError) {\n    return;\n  }\n  Parameter[] parameters=Parameter.NONE;\n  if (!methodParameters.isEmpty()) {\n    parameters=new Parameter[methodParameters.size()];\n    BitSet methodParameterUsed=new BitSet(methodParameters.size());\n    List<String> parameterTypes=listener.getParameterTypes();\n    for (int i=0; i < methodParameters.size(); i++) {\n      VariableElement methodParameter=methodParameters.get(i);\n      TypeMirror methodParameterType=methodParameter.asType();\n      for (int j=0; j < parameterTypes.size(); j++) {\n        if (methodParameterUsed.get(j)) {\n          continue;\n        }\n        if (isSubtypeOfType(methodParameterType,parameterTypes.get(j))) {\n          parameters[i]=new Parameter(j,methodParameterType.toString());\n          methodParameterUsed.set(j);\n          break;\n        }\n      }\n      if (parameters[i] == null) {\n        StringBuilder builder=new StringBuilder();\n        builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n        for (int j=0; j < parameters.length; j++) {\n          Parameter parameter=parameters[j];\n          builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n          if (parameter == null) {\n            builder.append(\"did not match any listener parameters\");\n          }\n else {\n            builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n          }\n        }\n        builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n        for (        String parameterType : listener.getParameterTypes()) {\n          builder.append(\"\\n  \").append(parameterType);\n        }\n        builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n        error(executableElement,builder.toString());\n        return;\n      }\n    }\n  }\n  ViewInjector viewInjector=getOrCreateTargetClass(targetClassMap,enclosingElement);\n  for (  int id : ids) {\n    if (!viewInjector.addMethod(id,listener,name,Arrays.asList(parameters),required)) {\n      error(element,\"Multiple @%s methods declared for ID %s in %s.\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName());\n      return;\n    }\n  }\n  TypeMirror erasedTargetType=typeUtils.erasure(enclosingElement.asType());\n  erasedTargetTypes.add(erasedTargetType);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 750,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 301,
        "startColumnNumber" : 12,
        "endLineNumber" : 301,
        "endColumnNumber" : 39
      },
      "nodeContext" : "methodParameterUsed.set(j);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "j",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 314,
      "startColumnNumber" : 26,
      "endLineNumber" : 314,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 314,
        "startColumnNumber" : 26,
        "endLineNumber" : 314,
        "endColumnNumber" : 47
      },
      "nodeContext" : "j < parameters.length",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 666,
        "startLineNumber" : 314,
        "startColumnNumber" : 10,
        "endLineNumber" : 329,
        "endColumnNumber" : 11
      },
      "nodeContext" : "for (int j=0; j < parameters.length; j++) {\n  Parameter parameter=parameters[j];\n  builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n  if (parameter == null) {\n    builder.append(\"did not match any listener parameters\");\n  }\n else {\n    builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 79,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1549,
        "startLineNumber" : 305,
        "startColumnNumber" : 35,
        "endLineNumber" : 340,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  StringBuilder builder=new StringBuilder();\n  builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n  for (int j=0; j < parameters.length; j++) {\n    Parameter parameter=parameters[j];\n    builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n    if (parameter == null) {\n      builder.append(\"did not match any listener parameters\");\n    }\n else {\n      builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n    }\n  }\n  builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n  for (  String parameterType : listener.getParameterTypes()) {\n    builder.append(\"\\n  \").append(parameterType);\n  }\n  builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n  error(executableElement,builder.toString());\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 162,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1576,
        "startLineNumber" : 305,
        "startColumnNumber" : 8,
        "endLineNumber" : 340,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (parameters[i] == null) {\n  StringBuilder builder=new StringBuilder();\n  builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n  for (int j=0; j < parameters.length; j++) {\n    Parameter parameter=parameters[j];\n    builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n    if (parameter == null) {\n      builder.append(\"did not match any listener parameters\");\n    }\n else {\n      builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n    }\n  }\n  builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n  for (  String parameterType : listener.getParameterTypes()) {\n    builder.append(\"\\n  \").append(parameterType);\n  }\n  builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n  error(executableElement,builder.toString());\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 168,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 2101,
        "startLineNumber" : 291,
        "startColumnNumber" : 56,
        "endLineNumber" : 341,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  VariableElement methodParameter=methodParameters.get(i);\n  TypeMirror methodParameterType=methodParameter.asType();\n  for (int j=0; j < parameterTypes.size(); j++) {\n    if (methodParameterUsed.get(j)) {\n      continue;\n    }\n    if (isSubtypeOfType(methodParameterType,parameterTypes.get(j))) {\n      parameters[i]=new Parameter(j,methodParameterType.toString());\n      methodParameterUsed.set(j);\n      break;\n    }\n  }\n  if (parameters[i] == null) {\n    StringBuilder builder=new StringBuilder();\n    builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n    for (int j=0; j < parameters.length; j++) {\n      Parameter parameter=parameters[j];\n      builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n      if (parameter == null) {\n        builder.append(\"did not match any listener parameters\");\n      }\n else {\n        builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n      }\n    }\n    builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n    for (    String parameterType : listener.getParameterTypes()) {\n      builder.append(\"\\n  \").append(parameterType);\n    }\n    builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n    error(executableElement,builder.toString());\n    return;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 234,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2151,
        "startLineNumber" : 291,
        "startColumnNumber" : 6,
        "endLineNumber" : 341,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int i=0; i < methodParameters.size(); i++) {\n  VariableElement methodParameter=methodParameters.get(i);\n  TypeMirror methodParameterType=methodParameter.asType();\n  for (int j=0; j < parameterTypes.size(); j++) {\n    if (methodParameterUsed.get(j)) {\n      continue;\n    }\n    if (isSubtypeOfType(methodParameterType,parameterTypes.get(j))) {\n      parameters[i]=new Parameter(j,methodParameterType.toString());\n      methodParameterUsed.set(j);\n      break;\n    }\n  }\n  if (parameters[i] == null) {\n    StringBuilder builder=new StringBuilder();\n    builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n    for (int j=0; j < parameters.length; j++) {\n      Parameter parameter=parameters[j];\n      builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n      if (parameter == null) {\n        builder.append(\"did not match any listener parameters\");\n      }\n else {\n        builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n      }\n    }\n    builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n    for (    String parameterType : listener.getParameterTypes()) {\n      builder.append(\"\\n  \").append(parameterType);\n    }\n    builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n    error(executableElement,builder.toString());\n    return;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 247,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2362,
        "startLineNumber" : 287,
        "startColumnNumber" : 37,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  parameters=new Parameter[methodParameters.size()];\n  BitSet methodParameterUsed=new BitSet(methodParameters.size());\n  List<String> parameterTypes=listener.getParameterTypes();\n  for (int i=0; i < methodParameters.size(); i++) {\n    VariableElement methodParameter=methodParameters.get(i);\n    TypeMirror methodParameterType=methodParameter.asType();\n    for (int j=0; j < parameterTypes.size(); j++) {\n      if (methodParameterUsed.get(j)) {\n        continue;\n      }\n      if (isSubtypeOfType(methodParameterType,parameterTypes.get(j))) {\n        parameters[i]=new Parameter(j,methodParameterType.toString());\n        methodParameterUsed.set(j);\n        break;\n      }\n    }\n    if (parameters[i] == null) {\n      StringBuilder builder=new StringBuilder();\n      builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n      for (int j=0; j < parameters.length; j++) {\n        Parameter parameter=parameters[j];\n        builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n        if (parameter == null) {\n          builder.append(\"did not match any listener parameters\");\n        }\n else {\n          builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n        }\n      }\n      builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n      for (      String parameterType : listener.getParameterTypes()) {\n        builder.append(\"\\n  \").append(parameterType);\n      }\n      builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n      error(executableElement,builder.toString());\n      return;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 281,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2395,
        "startLineNumber" : 287,
        "startColumnNumber" : 4,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (!methodParameters.isEmpty()) {\n  parameters=new Parameter[methodParameters.size()];\n  BitSet methodParameterUsed=new BitSet(methodParameters.size());\n  List<String> parameterTypes=listener.getParameterTypes();\n  for (int i=0; i < methodParameters.size(); i++) {\n    VariableElement methodParameter=methodParameters.get(i);\n    TypeMirror methodParameterType=methodParameter.asType();\n    for (int j=0; j < parameterTypes.size(); j++) {\n      if (methodParameterUsed.get(j)) {\n        continue;\n      }\n      if (isSubtypeOfType(methodParameterType,parameterTypes.get(j))) {\n        parameters[i]=new Parameter(j,methodParameterType.toString());\n        methodParameterUsed.set(j);\n        break;\n      }\n    }\n    if (parameters[i] == null) {\n      StringBuilder builder=new StringBuilder();\n      builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n      for (int j=0; j < parameters.length; j++) {\n        Parameter parameter=parameters[j];\n        builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n        if (parameter == null) {\n          builder.append(\"did not match any listener parameters\");\n        }\n else {\n          builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n        }\n      }\n      builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n      for (      String parameterType : listener.getParameterTypes()) {\n        builder.append(\"\\n  \").append(parameterType);\n      }\n      builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n      error(executableElement,builder.toString());\n      return;\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 286,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6627,
        "startLineNumber" : 208,
        "startColumnNumber" : 23,
        "endLineNumber" : 356,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (!(element instanceof ExecutableElement) || element.getKind() != METHOD) {\n    error(element,\"@%s annotation must be on a method.\",annotationClass.getSimpleName());\n    return;\n  }\n  ExecutableElement executableElement=(ExecutableElement)element;\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  Annotation annotation=element.getAnnotation(annotationClass);\n  Method annotationValue=annotationClass.getDeclaredMethod(\"value\");\n  if (annotationValue == null || annotationValue.getReturnType() != int[].class) {\n    error(element,\"@%s annotation lacks int[] value property. (%s.%s)\",annotationClass,enclosingElement.getQualifiedName(),element.getSimpleName());\n    return;\n  }\n  int[] ids=(int[])annotationValue.invoke(annotation);\n  String name=executableElement.getSimpleName().toString();\n  boolean required=element.getAnnotation(Optional.class) == null;\n  boolean hasError=isValidForGeneratedCode(annotationClass,\"methods\",element);\n  Set<Integer> seenIds=new LinkedHashSet<Integer>(ids.length);\n  for (  int id : ids) {\n    if (!seenIds.add(id)) {\n      error(element,\"@%s annotation for method contains duplicate ID %d. (%s.%s)\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName(),element.getSimpleName());\n      hasError=true;\n    }\n  }\n  ListenerClass listenerClass=annotationClass.getAnnotation(ListenerClass.class);\n  if (listenerClass == null) {\n    error(element,\"No @%s defined on @%s.\",ListenerClass.class.getSimpleName(),annotationClass.getSimpleName());\n    return;\n  }\n  Class<?> listenerClassClass=listenerClass.value();\n  Listener listener=LISTENER_MAP.get(listenerClassClass);\n  if (listener == null) {\n    try {\n      listener=Listener.from(listenerClassClass);\n      LISTENER_MAP.put(listenerClassClass,listener);\n    }\n catch (    IllegalArgumentException e) {\n      error(elementUtils.getTypeElement(annotationClass.getName()),\"%s (%s on @%s)\",e.getMessage(),listenerClassClass.getName(),annotationClass.getName());\n      return;\n    }\n  }\n  List<? extends VariableElement> methodParameters=executableElement.getParameters();\n  if (methodParameters.size() > listener.getParameterTypes().size()) {\n    error(element,\"@%s methods can have at most %s parameter(s). (%s.%s)\",annotationClass.getSimpleName(),listener.getParameterTypes().size(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (!executableElement.getReturnType().toString().equals(listener.getReturnType())) {\n    error(element,\"@%s methods must have a '%s' return type. (%s.%s)\",annotationClass.getSimpleName(),listener.getReturnType(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (hasError) {\n    return;\n  }\n  Parameter[] parameters=Parameter.NONE;\n  if (!methodParameters.isEmpty()) {\n    parameters=new Parameter[methodParameters.size()];\n    BitSet methodParameterUsed=new BitSet(methodParameters.size());\n    List<String> parameterTypes=listener.getParameterTypes();\n    for (int i=0; i < methodParameters.size(); i++) {\n      VariableElement methodParameter=methodParameters.get(i);\n      TypeMirror methodParameterType=methodParameter.asType();\n      for (int j=0; j < parameterTypes.size(); j++) {\n        if (methodParameterUsed.get(j)) {\n          continue;\n        }\n        if (isSubtypeOfType(methodParameterType,parameterTypes.get(j))) {\n          parameters[i]=new Parameter(j,methodParameterType.toString());\n          methodParameterUsed.set(j);\n          break;\n        }\n      }\n      if (parameters[i] == null) {\n        StringBuilder builder=new StringBuilder();\n        builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n        for (int j=0; j < parameters.length; j++) {\n          Parameter parameter=parameters[j];\n          builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n          if (parameter == null) {\n            builder.append(\"did not match any listener parameters\");\n          }\n else {\n            builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n          }\n        }\n        builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n        for (        String parameterType : listener.getParameterTypes()) {\n          builder.append(\"\\n  \").append(parameterType);\n        }\n        builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n        error(executableElement,builder.toString());\n        return;\n      }\n    }\n  }\n  ViewInjector viewInjector=getOrCreateTargetClass(targetClassMap,enclosingElement);\n  for (  int id : ids) {\n    if (!viewInjector.addMethod(id,listener,name,Arrays.asList(parameters),required)) {\n      error(element,\"Multiple @%s methods declared for ID %s in %s.\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName());\n      return;\n    }\n  }\n  TypeMirror erasedTargetType=typeUtils.erasure(enclosingElement.asType());\n  erasedTargetTypes.add(erasedTargetType);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 716,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6837,
        "startLineNumber" : 206,
        "startColumnNumber" : 2,
        "endLineNumber" : 356,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private void parseListenerAnnotation(Class<? extends Annotation> annotationClass,Element element,Map<TypeElement,ViewInjector> targetClassMap,Set<TypeMirror> erasedTargetTypes) throws Exception {\n  if (!(element instanceof ExecutableElement) || element.getKind() != METHOD) {\n    error(element,\"@%s annotation must be on a method.\",annotationClass.getSimpleName());\n    return;\n  }\n  ExecutableElement executableElement=(ExecutableElement)element;\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  Annotation annotation=element.getAnnotation(annotationClass);\n  Method annotationValue=annotationClass.getDeclaredMethod(\"value\");\n  if (annotationValue == null || annotationValue.getReturnType() != int[].class) {\n    error(element,\"@%s annotation lacks int[] value property. (%s.%s)\",annotationClass,enclosingElement.getQualifiedName(),element.getSimpleName());\n    return;\n  }\n  int[] ids=(int[])annotationValue.invoke(annotation);\n  String name=executableElement.getSimpleName().toString();\n  boolean required=element.getAnnotation(Optional.class) == null;\n  boolean hasError=isValidForGeneratedCode(annotationClass,\"methods\",element);\n  Set<Integer> seenIds=new LinkedHashSet<Integer>(ids.length);\n  for (  int id : ids) {\n    if (!seenIds.add(id)) {\n      error(element,\"@%s annotation for method contains duplicate ID %d. (%s.%s)\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName(),element.getSimpleName());\n      hasError=true;\n    }\n  }\n  ListenerClass listenerClass=annotationClass.getAnnotation(ListenerClass.class);\n  if (listenerClass == null) {\n    error(element,\"No @%s defined on @%s.\",ListenerClass.class.getSimpleName(),annotationClass.getSimpleName());\n    return;\n  }\n  Class<?> listenerClassClass=listenerClass.value();\n  Listener listener=LISTENER_MAP.get(listenerClassClass);\n  if (listener == null) {\n    try {\n      listener=Listener.from(listenerClassClass);\n      LISTENER_MAP.put(listenerClassClass,listener);\n    }\n catch (    IllegalArgumentException e) {\n      error(elementUtils.getTypeElement(annotationClass.getName()),\"%s (%s on @%s)\",e.getMessage(),listenerClassClass.getName(),annotationClass.getName());\n      return;\n    }\n  }\n  List<? extends VariableElement> methodParameters=executableElement.getParameters();\n  if (methodParameters.size() > listener.getParameterTypes().size()) {\n    error(element,\"@%s methods can have at most %s parameter(s). (%s.%s)\",annotationClass.getSimpleName(),listener.getParameterTypes().size(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (!executableElement.getReturnType().toString().equals(listener.getReturnType())) {\n    error(element,\"@%s methods must have a '%s' return type. (%s.%s)\",annotationClass.getSimpleName(),listener.getReturnType(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (hasError) {\n    return;\n  }\n  Parameter[] parameters=Parameter.NONE;\n  if (!methodParameters.isEmpty()) {\n    parameters=new Parameter[methodParameters.size()];\n    BitSet methodParameterUsed=new BitSet(methodParameters.size());\n    List<String> parameterTypes=listener.getParameterTypes();\n    for (int i=0; i < methodParameters.size(); i++) {\n      VariableElement methodParameter=methodParameters.get(i);\n      TypeMirror methodParameterType=methodParameter.asType();\n      for (int j=0; j < parameterTypes.size(); j++) {\n        if (methodParameterUsed.get(j)) {\n          continue;\n        }\n        if (isSubtypeOfType(methodParameterType,parameterTypes.get(j))) {\n          parameters[i]=new Parameter(j,methodParameterType.toString());\n          methodParameterUsed.set(j);\n          break;\n        }\n      }\n      if (parameters[i] == null) {\n        StringBuilder builder=new StringBuilder();\n        builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n        for (int j=0; j < parameters.length; j++) {\n          Parameter parameter=parameters[j];\n          builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n          if (parameter == null) {\n            builder.append(\"did not match any listener parameters\");\n          }\n else {\n            builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n          }\n        }\n        builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n        for (        String parameterType : listener.getParameterTypes()) {\n          builder.append(\"\\n  \").append(parameterType);\n        }\n        builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n        error(executableElement,builder.toString());\n        return;\n      }\n    }\n  }\n  ViewInjector viewInjector=getOrCreateTargetClass(targetClassMap,enclosingElement);\n  for (  int id : ids) {\n    if (!viewInjector.addMethod(id,listener,name,Arrays.asList(parameters),required)) {\n      error(element,\"Multiple @%s methods declared for ID %s in %s.\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName());\n      return;\n    }\n  }\n  TypeMirror erasedTargetType=typeUtils.erasure(enclosingElement.asType());\n  erasedTargetTypes.add(erasedTargetType);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 750,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 314,
        "startColumnNumber" : 26,
        "endLineNumber" : 314,
        "endColumnNumber" : 47
      },
      "nodeContext" : "j < parameters.length",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "j",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 315,
      "startColumnNumber" : 45,
      "endLineNumber" : 315,
      "endColumnNumber" : 46
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 315,
        "startColumnNumber" : 34,
        "endLineNumber" : 315,
        "endColumnNumber" : 47
      },
      "nodeContext" : "parameters[j]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 315,
        "startColumnNumber" : 22,
        "endLineNumber" : 315,
        "endColumnNumber" : 47
      },
      "nodeContext" : "parameter=parameters[j]",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 315,
        "startColumnNumber" : 12,
        "endLineNumber" : 315,
        "endColumnNumber" : 48
      },
      "nodeContext" : "Parameter parameter=parameters[j];\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 622,
        "startLineNumber" : 314,
        "startColumnNumber" : 54,
        "endLineNumber" : 329,
        "endColumnNumber" : 11
      },
      "nodeContext" : "{\n  Parameter parameter=parameters[j];\n  builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n  if (parameter == null) {\n    builder.append(\"did not match any listener parameters\");\n  }\n else {\n    builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 66,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 666,
        "startLineNumber" : 314,
        "startColumnNumber" : 10,
        "endLineNumber" : 329,
        "endColumnNumber" : 11
      },
      "nodeContext" : "for (int j=0; j < parameters.length; j++) {\n  Parameter parameter=parameters[j];\n  builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n  if (parameter == null) {\n    builder.append(\"did not match any listener parameters\");\n  }\n else {\n    builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 79,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1549,
        "startLineNumber" : 305,
        "startColumnNumber" : 35,
        "endLineNumber" : 340,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  StringBuilder builder=new StringBuilder();\n  builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n  for (int j=0; j < parameters.length; j++) {\n    Parameter parameter=parameters[j];\n    builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n    if (parameter == null) {\n      builder.append(\"did not match any listener parameters\");\n    }\n else {\n      builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n    }\n  }\n  builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n  for (  String parameterType : listener.getParameterTypes()) {\n    builder.append(\"\\n  \").append(parameterType);\n  }\n  builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n  error(executableElement,builder.toString());\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 162,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1576,
        "startLineNumber" : 305,
        "startColumnNumber" : 8,
        "endLineNumber" : 340,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (parameters[i] == null) {\n  StringBuilder builder=new StringBuilder();\n  builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n  for (int j=0; j < parameters.length; j++) {\n    Parameter parameter=parameters[j];\n    builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n    if (parameter == null) {\n      builder.append(\"did not match any listener parameters\");\n    }\n else {\n      builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n    }\n  }\n  builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n  for (  String parameterType : listener.getParameterTypes()) {\n    builder.append(\"\\n  \").append(parameterType);\n  }\n  builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n  error(executableElement,builder.toString());\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 168,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 2101,
        "startLineNumber" : 291,
        "startColumnNumber" : 56,
        "endLineNumber" : 341,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  VariableElement methodParameter=methodParameters.get(i);\n  TypeMirror methodParameterType=methodParameter.asType();\n  for (int j=0; j < parameterTypes.size(); j++) {\n    if (methodParameterUsed.get(j)) {\n      continue;\n    }\n    if (isSubtypeOfType(methodParameterType,parameterTypes.get(j))) {\n      parameters[i]=new Parameter(j,methodParameterType.toString());\n      methodParameterUsed.set(j);\n      break;\n    }\n  }\n  if (parameters[i] == null) {\n    StringBuilder builder=new StringBuilder();\n    builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n    for (int j=0; j < parameters.length; j++) {\n      Parameter parameter=parameters[j];\n      builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n      if (parameter == null) {\n        builder.append(\"did not match any listener parameters\");\n      }\n else {\n        builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n      }\n    }\n    builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n    for (    String parameterType : listener.getParameterTypes()) {\n      builder.append(\"\\n  \").append(parameterType);\n    }\n    builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n    error(executableElement,builder.toString());\n    return;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 234,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2151,
        "startLineNumber" : 291,
        "startColumnNumber" : 6,
        "endLineNumber" : 341,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int i=0; i < methodParameters.size(); i++) {\n  VariableElement methodParameter=methodParameters.get(i);\n  TypeMirror methodParameterType=methodParameter.asType();\n  for (int j=0; j < parameterTypes.size(); j++) {\n    if (methodParameterUsed.get(j)) {\n      continue;\n    }\n    if (isSubtypeOfType(methodParameterType,parameterTypes.get(j))) {\n      parameters[i]=new Parameter(j,methodParameterType.toString());\n      methodParameterUsed.set(j);\n      break;\n    }\n  }\n  if (parameters[i] == null) {\n    StringBuilder builder=new StringBuilder();\n    builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n    for (int j=0; j < parameters.length; j++) {\n      Parameter parameter=parameters[j];\n      builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n      if (parameter == null) {\n        builder.append(\"did not match any listener parameters\");\n      }\n else {\n        builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n      }\n    }\n    builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n    for (    String parameterType : listener.getParameterTypes()) {\n      builder.append(\"\\n  \").append(parameterType);\n    }\n    builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n    error(executableElement,builder.toString());\n    return;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 247,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2362,
        "startLineNumber" : 287,
        "startColumnNumber" : 37,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  parameters=new Parameter[methodParameters.size()];\n  BitSet methodParameterUsed=new BitSet(methodParameters.size());\n  List<String> parameterTypes=listener.getParameterTypes();\n  for (int i=0; i < methodParameters.size(); i++) {\n    VariableElement methodParameter=methodParameters.get(i);\n    TypeMirror methodParameterType=methodParameter.asType();\n    for (int j=0; j < parameterTypes.size(); j++) {\n      if (methodParameterUsed.get(j)) {\n        continue;\n      }\n      if (isSubtypeOfType(methodParameterType,parameterTypes.get(j))) {\n        parameters[i]=new Parameter(j,methodParameterType.toString());\n        methodParameterUsed.set(j);\n        break;\n      }\n    }\n    if (parameters[i] == null) {\n      StringBuilder builder=new StringBuilder();\n      builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n      for (int j=0; j < parameters.length; j++) {\n        Parameter parameter=parameters[j];\n        builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n        if (parameter == null) {\n          builder.append(\"did not match any listener parameters\");\n        }\n else {\n          builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n        }\n      }\n      builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n      for (      String parameterType : listener.getParameterTypes()) {\n        builder.append(\"\\n  \").append(parameterType);\n      }\n      builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n      error(executableElement,builder.toString());\n      return;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 281,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2395,
        "startLineNumber" : 287,
        "startColumnNumber" : 4,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (!methodParameters.isEmpty()) {\n  parameters=new Parameter[methodParameters.size()];\n  BitSet methodParameterUsed=new BitSet(methodParameters.size());\n  List<String> parameterTypes=listener.getParameterTypes();\n  for (int i=0; i < methodParameters.size(); i++) {\n    VariableElement methodParameter=methodParameters.get(i);\n    TypeMirror methodParameterType=methodParameter.asType();\n    for (int j=0; j < parameterTypes.size(); j++) {\n      if (methodParameterUsed.get(j)) {\n        continue;\n      }\n      if (isSubtypeOfType(methodParameterType,parameterTypes.get(j))) {\n        parameters[i]=new Parameter(j,methodParameterType.toString());\n        methodParameterUsed.set(j);\n        break;\n      }\n    }\n    if (parameters[i] == null) {\n      StringBuilder builder=new StringBuilder();\n      builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n      for (int j=0; j < parameters.length; j++) {\n        Parameter parameter=parameters[j];\n        builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n        if (parameter == null) {\n          builder.append(\"did not match any listener parameters\");\n        }\n else {\n          builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n        }\n      }\n      builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n      for (      String parameterType : listener.getParameterTypes()) {\n        builder.append(\"\\n  \").append(parameterType);\n      }\n      builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n      error(executableElement,builder.toString());\n      return;\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 286,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6627,
        "startLineNumber" : 208,
        "startColumnNumber" : 23,
        "endLineNumber" : 356,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (!(element instanceof ExecutableElement) || element.getKind() != METHOD) {\n    error(element,\"@%s annotation must be on a method.\",annotationClass.getSimpleName());\n    return;\n  }\n  ExecutableElement executableElement=(ExecutableElement)element;\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  Annotation annotation=element.getAnnotation(annotationClass);\n  Method annotationValue=annotationClass.getDeclaredMethod(\"value\");\n  if (annotationValue == null || annotationValue.getReturnType() != int[].class) {\n    error(element,\"@%s annotation lacks int[] value property. (%s.%s)\",annotationClass,enclosingElement.getQualifiedName(),element.getSimpleName());\n    return;\n  }\n  int[] ids=(int[])annotationValue.invoke(annotation);\n  String name=executableElement.getSimpleName().toString();\n  boolean required=element.getAnnotation(Optional.class) == null;\n  boolean hasError=isValidForGeneratedCode(annotationClass,\"methods\",element);\n  Set<Integer> seenIds=new LinkedHashSet<Integer>(ids.length);\n  for (  int id : ids) {\n    if (!seenIds.add(id)) {\n      error(element,\"@%s annotation for method contains duplicate ID %d. (%s.%s)\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName(),element.getSimpleName());\n      hasError=true;\n    }\n  }\n  ListenerClass listenerClass=annotationClass.getAnnotation(ListenerClass.class);\n  if (listenerClass == null) {\n    error(element,\"No @%s defined on @%s.\",ListenerClass.class.getSimpleName(),annotationClass.getSimpleName());\n    return;\n  }\n  Class<?> listenerClassClass=listenerClass.value();\n  Listener listener=LISTENER_MAP.get(listenerClassClass);\n  if (listener == null) {\n    try {\n      listener=Listener.from(listenerClassClass);\n      LISTENER_MAP.put(listenerClassClass,listener);\n    }\n catch (    IllegalArgumentException e) {\n      error(elementUtils.getTypeElement(annotationClass.getName()),\"%s (%s on @%s)\",e.getMessage(),listenerClassClass.getName(),annotationClass.getName());\n      return;\n    }\n  }\n  List<? extends VariableElement> methodParameters=executableElement.getParameters();\n  if (methodParameters.size() > listener.getParameterTypes().size()) {\n    error(element,\"@%s methods can have at most %s parameter(s). (%s.%s)\",annotationClass.getSimpleName(),listener.getParameterTypes().size(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (!executableElement.getReturnType().toString().equals(listener.getReturnType())) {\n    error(element,\"@%s methods must have a '%s' return type. (%s.%s)\",annotationClass.getSimpleName(),listener.getReturnType(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (hasError) {\n    return;\n  }\n  Parameter[] parameters=Parameter.NONE;\n  if (!methodParameters.isEmpty()) {\n    parameters=new Parameter[methodParameters.size()];\n    BitSet methodParameterUsed=new BitSet(methodParameters.size());\n    List<String> parameterTypes=listener.getParameterTypes();\n    for (int i=0; i < methodParameters.size(); i++) {\n      VariableElement methodParameter=methodParameters.get(i);\n      TypeMirror methodParameterType=methodParameter.asType();\n      for (int j=0; j < parameterTypes.size(); j++) {\n        if (methodParameterUsed.get(j)) {\n          continue;\n        }\n        if (isSubtypeOfType(methodParameterType,parameterTypes.get(j))) {\n          parameters[i]=new Parameter(j,methodParameterType.toString());\n          methodParameterUsed.set(j);\n          break;\n        }\n      }\n      if (parameters[i] == null) {\n        StringBuilder builder=new StringBuilder();\n        builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n        for (int j=0; j < parameters.length; j++) {\n          Parameter parameter=parameters[j];\n          builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n          if (parameter == null) {\n            builder.append(\"did not match any listener parameters\");\n          }\n else {\n            builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n          }\n        }\n        builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n        for (        String parameterType : listener.getParameterTypes()) {\n          builder.append(\"\\n  \").append(parameterType);\n        }\n        builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n        error(executableElement,builder.toString());\n        return;\n      }\n    }\n  }\n  ViewInjector viewInjector=getOrCreateTargetClass(targetClassMap,enclosingElement);\n  for (  int id : ids) {\n    if (!viewInjector.addMethod(id,listener,name,Arrays.asList(parameters),required)) {\n      error(element,\"Multiple @%s methods declared for ID %s in %s.\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName());\n      return;\n    }\n  }\n  TypeMirror erasedTargetType=typeUtils.erasure(enclosingElement.asType());\n  erasedTargetTypes.add(erasedTargetType);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 716,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6837,
        "startLineNumber" : 206,
        "startColumnNumber" : 2,
        "endLineNumber" : 356,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private void parseListenerAnnotation(Class<? extends Annotation> annotationClass,Element element,Map<TypeElement,ViewInjector> targetClassMap,Set<TypeMirror> erasedTargetTypes) throws Exception {\n  if (!(element instanceof ExecutableElement) || element.getKind() != METHOD) {\n    error(element,\"@%s annotation must be on a method.\",annotationClass.getSimpleName());\n    return;\n  }\n  ExecutableElement executableElement=(ExecutableElement)element;\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  Annotation annotation=element.getAnnotation(annotationClass);\n  Method annotationValue=annotationClass.getDeclaredMethod(\"value\");\n  if (annotationValue == null || annotationValue.getReturnType() != int[].class) {\n    error(element,\"@%s annotation lacks int[] value property. (%s.%s)\",annotationClass,enclosingElement.getQualifiedName(),element.getSimpleName());\n    return;\n  }\n  int[] ids=(int[])annotationValue.invoke(annotation);\n  String name=executableElement.getSimpleName().toString();\n  boolean required=element.getAnnotation(Optional.class) == null;\n  boolean hasError=isValidForGeneratedCode(annotationClass,\"methods\",element);\n  Set<Integer> seenIds=new LinkedHashSet<Integer>(ids.length);\n  for (  int id : ids) {\n    if (!seenIds.add(id)) {\n      error(element,\"@%s annotation for method contains duplicate ID %d. (%s.%s)\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName(),element.getSimpleName());\n      hasError=true;\n    }\n  }\n  ListenerClass listenerClass=annotationClass.getAnnotation(ListenerClass.class);\n  if (listenerClass == null) {\n    error(element,\"No @%s defined on @%s.\",ListenerClass.class.getSimpleName(),annotationClass.getSimpleName());\n    return;\n  }\n  Class<?> listenerClassClass=listenerClass.value();\n  Listener listener=LISTENER_MAP.get(listenerClassClass);\n  if (listener == null) {\n    try {\n      listener=Listener.from(listenerClassClass);\n      LISTENER_MAP.put(listenerClassClass,listener);\n    }\n catch (    IllegalArgumentException e) {\n      error(elementUtils.getTypeElement(annotationClass.getName()),\"%s (%s on @%s)\",e.getMessage(),listenerClassClass.getName(),annotationClass.getName());\n      return;\n    }\n  }\n  List<? extends VariableElement> methodParameters=executableElement.getParameters();\n  if (methodParameters.size() > listener.getParameterTypes().size()) {\n    error(element,\"@%s methods can have at most %s parameter(s). (%s.%s)\",annotationClass.getSimpleName(),listener.getParameterTypes().size(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (!executableElement.getReturnType().toString().equals(listener.getReturnType())) {\n    error(element,\"@%s methods must have a '%s' return type. (%s.%s)\",annotationClass.getSimpleName(),listener.getReturnType(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (hasError) {\n    return;\n  }\n  Parameter[] parameters=Parameter.NONE;\n  if (!methodParameters.isEmpty()) {\n    parameters=new Parameter[methodParameters.size()];\n    BitSet methodParameterUsed=new BitSet(methodParameters.size());\n    List<String> parameterTypes=listener.getParameterTypes();\n    for (int i=0; i < methodParameters.size(); i++) {\n      VariableElement methodParameter=methodParameters.get(i);\n      TypeMirror methodParameterType=methodParameter.asType();\n      for (int j=0; j < parameterTypes.size(); j++) {\n        if (methodParameterUsed.get(j)) {\n          continue;\n        }\n        if (isSubtypeOfType(methodParameterType,parameterTypes.get(j))) {\n          parameters[i]=new Parameter(j,methodParameterType.toString());\n          methodParameterUsed.set(j);\n          break;\n        }\n      }\n      if (parameters[i] == null) {\n        StringBuilder builder=new StringBuilder();\n        builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n        for (int j=0; j < parameters.length; j++) {\n          Parameter parameter=parameters[j];\n          builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n          if (parameter == null) {\n            builder.append(\"did not match any listener parameters\");\n          }\n else {\n            builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n          }\n        }\n        builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n        for (        String parameterType : listener.getParameterTypes()) {\n          builder.append(\"\\n  \").append(parameterType);\n        }\n        builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n        error(executableElement,builder.toString());\n        return;\n      }\n    }\n  }\n  ViewInjector viewInjector=getOrCreateTargetClass(targetClassMap,enclosingElement);\n  for (  int id : ids) {\n    if (!viewInjector.addMethod(id,listener,name,Arrays.asList(parameters),required)) {\n      error(element,\"Multiple @%s methods declared for ID %s in %s.\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName());\n      return;\n    }\n  }\n  TypeMirror erasedTargetType=typeUtils.erasure(enclosingElement.asType());\n  erasedTargetTypes.add(erasedTargetType);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 750,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 315,
        "startColumnNumber" : 12,
        "endLineNumber" : 315,
        "endColumnNumber" : 48
      },
      "nodeContext" : "Parameter parameter=parameters[j];\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "j",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 317,
      "startColumnNumber" : 24,
      "endLineNumber" : 317,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 5,
        "startLineNumber" : 317,
        "startColumnNumber" : 24,
        "endLineNumber" : 317,
        "endColumnNumber" : 29
      },
      "nodeContext" : "j + 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 316,
        "startColumnNumber" : 12,
        "endLineNumber" : 317,
        "endColumnNumber" : 30
      },
      "nodeContext" : "builder.append(\"\\n\\n  Parameter #\").append(j + 1)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 96,
        "startLineNumber" : 316,
        "startColumnNumber" : 12,
        "endLineNumber" : 318,
        "endColumnNumber" : 29
      },
      "nodeContext" : "builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 165,
        "startLineNumber" : 316,
        "startColumnNumber" : 12,
        "endLineNumber" : 319,
        "endColumnNumber" : 68
      },
      "nodeContext" : "builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 22,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 199,
        "startLineNumber" : 316,
        "startColumnNumber" : 12,
        "endLineNumber" : 320,
        "endColumnNumber" : 33
      },
      "nodeContext" : "builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 25,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 200,
        "startLineNumber" : 316,
        "startColumnNumber" : 12,
        "endLineNumber" : 320,
        "endColumnNumber" : 34
      },
      "nodeContext" : "builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 26,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 622,
        "startLineNumber" : 314,
        "startColumnNumber" : 54,
        "endLineNumber" : 329,
        "endColumnNumber" : 11
      },
      "nodeContext" : "{\n  Parameter parameter=parameters[j];\n  builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n  if (parameter == null) {\n    builder.append(\"did not match any listener parameters\");\n  }\n else {\n    builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 66,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 666,
        "startLineNumber" : 314,
        "startColumnNumber" : 10,
        "endLineNumber" : 329,
        "endColumnNumber" : 11
      },
      "nodeContext" : "for (int j=0; j < parameters.length; j++) {\n  Parameter parameter=parameters[j];\n  builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n  if (parameter == null) {\n    builder.append(\"did not match any listener parameters\");\n  }\n else {\n    builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 79,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1549,
        "startLineNumber" : 305,
        "startColumnNumber" : 35,
        "endLineNumber" : 340,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  StringBuilder builder=new StringBuilder();\n  builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n  for (int j=0; j < parameters.length; j++) {\n    Parameter parameter=parameters[j];\n    builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n    if (parameter == null) {\n      builder.append(\"did not match any listener parameters\");\n    }\n else {\n      builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n    }\n  }\n  builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n  for (  String parameterType : listener.getParameterTypes()) {\n    builder.append(\"\\n  \").append(parameterType);\n  }\n  builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n  error(executableElement,builder.toString());\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 162,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1576,
        "startLineNumber" : 305,
        "startColumnNumber" : 8,
        "endLineNumber" : 340,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (parameters[i] == null) {\n  StringBuilder builder=new StringBuilder();\n  builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n  for (int j=0; j < parameters.length; j++) {\n    Parameter parameter=parameters[j];\n    builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n    if (parameter == null) {\n      builder.append(\"did not match any listener parameters\");\n    }\n else {\n      builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n    }\n  }\n  builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n  for (  String parameterType : listener.getParameterTypes()) {\n    builder.append(\"\\n  \").append(parameterType);\n  }\n  builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n  error(executableElement,builder.toString());\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 168,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 2101,
        "startLineNumber" : 291,
        "startColumnNumber" : 56,
        "endLineNumber" : 341,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  VariableElement methodParameter=methodParameters.get(i);\n  TypeMirror methodParameterType=methodParameter.asType();\n  for (int j=0; j < parameterTypes.size(); j++) {\n    if (methodParameterUsed.get(j)) {\n      continue;\n    }\n    if (isSubtypeOfType(methodParameterType,parameterTypes.get(j))) {\n      parameters[i]=new Parameter(j,methodParameterType.toString());\n      methodParameterUsed.set(j);\n      break;\n    }\n  }\n  if (parameters[i] == null) {\n    StringBuilder builder=new StringBuilder();\n    builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n    for (int j=0; j < parameters.length; j++) {\n      Parameter parameter=parameters[j];\n      builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n      if (parameter == null) {\n        builder.append(\"did not match any listener parameters\");\n      }\n else {\n        builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n      }\n    }\n    builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n    for (    String parameterType : listener.getParameterTypes()) {\n      builder.append(\"\\n  \").append(parameterType);\n    }\n    builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n    error(executableElement,builder.toString());\n    return;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 234,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2151,
        "startLineNumber" : 291,
        "startColumnNumber" : 6,
        "endLineNumber" : 341,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int i=0; i < methodParameters.size(); i++) {\n  VariableElement methodParameter=methodParameters.get(i);\n  TypeMirror methodParameterType=methodParameter.asType();\n  for (int j=0; j < parameterTypes.size(); j++) {\n    if (methodParameterUsed.get(j)) {\n      continue;\n    }\n    if (isSubtypeOfType(methodParameterType,parameterTypes.get(j))) {\n      parameters[i]=new Parameter(j,methodParameterType.toString());\n      methodParameterUsed.set(j);\n      break;\n    }\n  }\n  if (parameters[i] == null) {\n    StringBuilder builder=new StringBuilder();\n    builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n    for (int j=0; j < parameters.length; j++) {\n      Parameter parameter=parameters[j];\n      builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n      if (parameter == null) {\n        builder.append(\"did not match any listener parameters\");\n      }\n else {\n        builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n      }\n    }\n    builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n    for (    String parameterType : listener.getParameterTypes()) {\n      builder.append(\"\\n  \").append(parameterType);\n    }\n    builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n    error(executableElement,builder.toString());\n    return;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 247,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2362,
        "startLineNumber" : 287,
        "startColumnNumber" : 37,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  parameters=new Parameter[methodParameters.size()];\n  BitSet methodParameterUsed=new BitSet(methodParameters.size());\n  List<String> parameterTypes=listener.getParameterTypes();\n  for (int i=0; i < methodParameters.size(); i++) {\n    VariableElement methodParameter=methodParameters.get(i);\n    TypeMirror methodParameterType=methodParameter.asType();\n    for (int j=0; j < parameterTypes.size(); j++) {\n      if (methodParameterUsed.get(j)) {\n        continue;\n      }\n      if (isSubtypeOfType(methodParameterType,parameterTypes.get(j))) {\n        parameters[i]=new Parameter(j,methodParameterType.toString());\n        methodParameterUsed.set(j);\n        break;\n      }\n    }\n    if (parameters[i] == null) {\n      StringBuilder builder=new StringBuilder();\n      builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n      for (int j=0; j < parameters.length; j++) {\n        Parameter parameter=parameters[j];\n        builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n        if (parameter == null) {\n          builder.append(\"did not match any listener parameters\");\n        }\n else {\n          builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n        }\n      }\n      builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n      for (      String parameterType : listener.getParameterTypes()) {\n        builder.append(\"\\n  \").append(parameterType);\n      }\n      builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n      error(executableElement,builder.toString());\n      return;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 281,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2395,
        "startLineNumber" : 287,
        "startColumnNumber" : 4,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (!methodParameters.isEmpty()) {\n  parameters=new Parameter[methodParameters.size()];\n  BitSet methodParameterUsed=new BitSet(methodParameters.size());\n  List<String> parameterTypes=listener.getParameterTypes();\n  for (int i=0; i < methodParameters.size(); i++) {\n    VariableElement methodParameter=methodParameters.get(i);\n    TypeMirror methodParameterType=methodParameter.asType();\n    for (int j=0; j < parameterTypes.size(); j++) {\n      if (methodParameterUsed.get(j)) {\n        continue;\n      }\n      if (isSubtypeOfType(methodParameterType,parameterTypes.get(j))) {\n        parameters[i]=new Parameter(j,methodParameterType.toString());\n        methodParameterUsed.set(j);\n        break;\n      }\n    }\n    if (parameters[i] == null) {\n      StringBuilder builder=new StringBuilder();\n      builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n      for (int j=0; j < parameters.length; j++) {\n        Parameter parameter=parameters[j];\n        builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n        if (parameter == null) {\n          builder.append(\"did not match any listener parameters\");\n        }\n else {\n          builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n        }\n      }\n      builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n      for (      String parameterType : listener.getParameterTypes()) {\n        builder.append(\"\\n  \").append(parameterType);\n      }\n      builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n      error(executableElement,builder.toString());\n      return;\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 286,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6627,
        "startLineNumber" : 208,
        "startColumnNumber" : 23,
        "endLineNumber" : 356,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (!(element instanceof ExecutableElement) || element.getKind() != METHOD) {\n    error(element,\"@%s annotation must be on a method.\",annotationClass.getSimpleName());\n    return;\n  }\n  ExecutableElement executableElement=(ExecutableElement)element;\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  Annotation annotation=element.getAnnotation(annotationClass);\n  Method annotationValue=annotationClass.getDeclaredMethod(\"value\");\n  if (annotationValue == null || annotationValue.getReturnType() != int[].class) {\n    error(element,\"@%s annotation lacks int[] value property. (%s.%s)\",annotationClass,enclosingElement.getQualifiedName(),element.getSimpleName());\n    return;\n  }\n  int[] ids=(int[])annotationValue.invoke(annotation);\n  String name=executableElement.getSimpleName().toString();\n  boolean required=element.getAnnotation(Optional.class) == null;\n  boolean hasError=isValidForGeneratedCode(annotationClass,\"methods\",element);\n  Set<Integer> seenIds=new LinkedHashSet<Integer>(ids.length);\n  for (  int id : ids) {\n    if (!seenIds.add(id)) {\n      error(element,\"@%s annotation for method contains duplicate ID %d. (%s.%s)\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName(),element.getSimpleName());\n      hasError=true;\n    }\n  }\n  ListenerClass listenerClass=annotationClass.getAnnotation(ListenerClass.class);\n  if (listenerClass == null) {\n    error(element,\"No @%s defined on @%s.\",ListenerClass.class.getSimpleName(),annotationClass.getSimpleName());\n    return;\n  }\n  Class<?> listenerClassClass=listenerClass.value();\n  Listener listener=LISTENER_MAP.get(listenerClassClass);\n  if (listener == null) {\n    try {\n      listener=Listener.from(listenerClassClass);\n      LISTENER_MAP.put(listenerClassClass,listener);\n    }\n catch (    IllegalArgumentException e) {\n      error(elementUtils.getTypeElement(annotationClass.getName()),\"%s (%s on @%s)\",e.getMessage(),listenerClassClass.getName(),annotationClass.getName());\n      return;\n    }\n  }\n  List<? extends VariableElement> methodParameters=executableElement.getParameters();\n  if (methodParameters.size() > listener.getParameterTypes().size()) {\n    error(element,\"@%s methods can have at most %s parameter(s). (%s.%s)\",annotationClass.getSimpleName(),listener.getParameterTypes().size(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (!executableElement.getReturnType().toString().equals(listener.getReturnType())) {\n    error(element,\"@%s methods must have a '%s' return type. (%s.%s)\",annotationClass.getSimpleName(),listener.getReturnType(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (hasError) {\n    return;\n  }\n  Parameter[] parameters=Parameter.NONE;\n  if (!methodParameters.isEmpty()) {\n    parameters=new Parameter[methodParameters.size()];\n    BitSet methodParameterUsed=new BitSet(methodParameters.size());\n    List<String> parameterTypes=listener.getParameterTypes();\n    for (int i=0; i < methodParameters.size(); i++) {\n      VariableElement methodParameter=methodParameters.get(i);\n      TypeMirror methodParameterType=methodParameter.asType();\n      for (int j=0; j < parameterTypes.size(); j++) {\n        if (methodParameterUsed.get(j)) {\n          continue;\n        }\n        if (isSubtypeOfType(methodParameterType,parameterTypes.get(j))) {\n          parameters[i]=new Parameter(j,methodParameterType.toString());\n          methodParameterUsed.set(j);\n          break;\n        }\n      }\n      if (parameters[i] == null) {\n        StringBuilder builder=new StringBuilder();\n        builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n        for (int j=0; j < parameters.length; j++) {\n          Parameter parameter=parameters[j];\n          builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n          if (parameter == null) {\n            builder.append(\"did not match any listener parameters\");\n          }\n else {\n            builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n          }\n        }\n        builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n        for (        String parameterType : listener.getParameterTypes()) {\n          builder.append(\"\\n  \").append(parameterType);\n        }\n        builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n        error(executableElement,builder.toString());\n        return;\n      }\n    }\n  }\n  ViewInjector viewInjector=getOrCreateTargetClass(targetClassMap,enclosingElement);\n  for (  int id : ids) {\n    if (!viewInjector.addMethod(id,listener,name,Arrays.asList(parameters),required)) {\n      error(element,\"Multiple @%s methods declared for ID %s in %s.\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName());\n      return;\n    }\n  }\n  TypeMirror erasedTargetType=typeUtils.erasure(enclosingElement.asType());\n  erasedTargetTypes.add(erasedTargetType);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 716,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6837,
        "startLineNumber" : 206,
        "startColumnNumber" : 2,
        "endLineNumber" : 356,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private void parseListenerAnnotation(Class<? extends Annotation> annotationClass,Element element,Map<TypeElement,ViewInjector> targetClassMap,Set<TypeMirror> erasedTargetTypes) throws Exception {\n  if (!(element instanceof ExecutableElement) || element.getKind() != METHOD) {\n    error(element,\"@%s annotation must be on a method.\",annotationClass.getSimpleName());\n    return;\n  }\n  ExecutableElement executableElement=(ExecutableElement)element;\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  Annotation annotation=element.getAnnotation(annotationClass);\n  Method annotationValue=annotationClass.getDeclaredMethod(\"value\");\n  if (annotationValue == null || annotationValue.getReturnType() != int[].class) {\n    error(element,\"@%s annotation lacks int[] value property. (%s.%s)\",annotationClass,enclosingElement.getQualifiedName(),element.getSimpleName());\n    return;\n  }\n  int[] ids=(int[])annotationValue.invoke(annotation);\n  String name=executableElement.getSimpleName().toString();\n  boolean required=element.getAnnotation(Optional.class) == null;\n  boolean hasError=isValidForGeneratedCode(annotationClass,\"methods\",element);\n  Set<Integer> seenIds=new LinkedHashSet<Integer>(ids.length);\n  for (  int id : ids) {\n    if (!seenIds.add(id)) {\n      error(element,\"@%s annotation for method contains duplicate ID %d. (%s.%s)\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName(),element.getSimpleName());\n      hasError=true;\n    }\n  }\n  ListenerClass listenerClass=annotationClass.getAnnotation(ListenerClass.class);\n  if (listenerClass == null) {\n    error(element,\"No @%s defined on @%s.\",ListenerClass.class.getSimpleName(),annotationClass.getSimpleName());\n    return;\n  }\n  Class<?> listenerClassClass=listenerClass.value();\n  Listener listener=LISTENER_MAP.get(listenerClassClass);\n  if (listener == null) {\n    try {\n      listener=Listener.from(listenerClassClass);\n      LISTENER_MAP.put(listenerClassClass,listener);\n    }\n catch (    IllegalArgumentException e) {\n      error(elementUtils.getTypeElement(annotationClass.getName()),\"%s (%s on @%s)\",e.getMessage(),listenerClassClass.getName(),annotationClass.getName());\n      return;\n    }\n  }\n  List<? extends VariableElement> methodParameters=executableElement.getParameters();\n  if (methodParameters.size() > listener.getParameterTypes().size()) {\n    error(element,\"@%s methods can have at most %s parameter(s). (%s.%s)\",annotationClass.getSimpleName(),listener.getParameterTypes().size(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (!executableElement.getReturnType().toString().equals(listener.getReturnType())) {\n    error(element,\"@%s methods must have a '%s' return type. (%s.%s)\",annotationClass.getSimpleName(),listener.getReturnType(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (hasError) {\n    return;\n  }\n  Parameter[] parameters=Parameter.NONE;\n  if (!methodParameters.isEmpty()) {\n    parameters=new Parameter[methodParameters.size()];\n    BitSet methodParameterUsed=new BitSet(methodParameters.size());\n    List<String> parameterTypes=listener.getParameterTypes();\n    for (int i=0; i < methodParameters.size(); i++) {\n      VariableElement methodParameter=methodParameters.get(i);\n      TypeMirror methodParameterType=methodParameter.asType();\n      for (int j=0; j < parameterTypes.size(); j++) {\n        if (methodParameterUsed.get(j)) {\n          continue;\n        }\n        if (isSubtypeOfType(methodParameterType,parameterTypes.get(j))) {\n          parameters[i]=new Parameter(j,methodParameterType.toString());\n          methodParameterUsed.set(j);\n          break;\n        }\n      }\n      if (parameters[i] == null) {\n        StringBuilder builder=new StringBuilder();\n        builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n        for (int j=0; j < parameters.length; j++) {\n          Parameter parameter=parameters[j];\n          builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n          if (parameter == null) {\n            builder.append(\"did not match any listener parameters\");\n          }\n else {\n            builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n          }\n        }\n        builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n        for (        String parameterType : listener.getParameterTypes()) {\n          builder.append(\"\\n  \").append(parameterType);\n        }\n        builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n        error(executableElement,builder.toString());\n        return;\n      }\n    }\n  }\n  ViewInjector viewInjector=getOrCreateTargetClass(targetClassMap,enclosingElement);\n  for (  int id : ids) {\n    if (!viewInjector.addMethod(id,listener,name,Arrays.asList(parameters),required)) {\n      error(element,\"Multiple @%s methods declared for ID %s in %s.\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName());\n      return;\n    }\n  }\n  TypeMirror erasedTargetType=typeUtils.erasure(enclosingElement.asType());\n  erasedTargetTypes.add(erasedTargetType);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 750,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 5,
        "startLineNumber" : 317,
        "startColumnNumber" : 24,
        "endLineNumber" : 317,
        "endColumnNumber" : 29
      },
      "nodeContext" : "j + 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "j",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 319,
      "startColumnNumber" : 45,
      "endLineNumber" : 319,
      "endColumnNumber" : 46
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 319,
        "startColumnNumber" : 24,
        "endLineNumber" : 319,
        "endColumnNumber" : 47
      },
      "nodeContext" : "methodParameters.get(j)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 319,
        "startColumnNumber" : 24,
        "endLineNumber" : 319,
        "endColumnNumber" : 56
      },
      "nodeContext" : "methodParameters.get(j).asType()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 319,
        "startColumnNumber" : 24,
        "endLineNumber" : 319,
        "endColumnNumber" : 67
      },
      "nodeContext" : "methodParameters.get(j).asType().toString()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 165,
        "startLineNumber" : 316,
        "startColumnNumber" : 12,
        "endLineNumber" : 319,
        "endColumnNumber" : 68
      },
      "nodeContext" : "builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 22,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 199,
        "startLineNumber" : 316,
        "startColumnNumber" : 12,
        "endLineNumber" : 320,
        "endColumnNumber" : 33
      },
      "nodeContext" : "builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 25,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 200,
        "startLineNumber" : 316,
        "startColumnNumber" : 12,
        "endLineNumber" : 320,
        "endColumnNumber" : 34
      },
      "nodeContext" : "builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 26,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 622,
        "startLineNumber" : 314,
        "startColumnNumber" : 54,
        "endLineNumber" : 329,
        "endColumnNumber" : 11
      },
      "nodeContext" : "{\n  Parameter parameter=parameters[j];\n  builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n  if (parameter == null) {\n    builder.append(\"did not match any listener parameters\");\n  }\n else {\n    builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 66,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 666,
        "startLineNumber" : 314,
        "startColumnNumber" : 10,
        "endLineNumber" : 329,
        "endColumnNumber" : 11
      },
      "nodeContext" : "for (int j=0; j < parameters.length; j++) {\n  Parameter parameter=parameters[j];\n  builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n  if (parameter == null) {\n    builder.append(\"did not match any listener parameters\");\n  }\n else {\n    builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 79,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1549,
        "startLineNumber" : 305,
        "startColumnNumber" : 35,
        "endLineNumber" : 340,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  StringBuilder builder=new StringBuilder();\n  builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n  for (int j=0; j < parameters.length; j++) {\n    Parameter parameter=parameters[j];\n    builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n    if (parameter == null) {\n      builder.append(\"did not match any listener parameters\");\n    }\n else {\n      builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n    }\n  }\n  builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n  for (  String parameterType : listener.getParameterTypes()) {\n    builder.append(\"\\n  \").append(parameterType);\n  }\n  builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n  error(executableElement,builder.toString());\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 162,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1576,
        "startLineNumber" : 305,
        "startColumnNumber" : 8,
        "endLineNumber" : 340,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (parameters[i] == null) {\n  StringBuilder builder=new StringBuilder();\n  builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n  for (int j=0; j < parameters.length; j++) {\n    Parameter parameter=parameters[j];\n    builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n    if (parameter == null) {\n      builder.append(\"did not match any listener parameters\");\n    }\n else {\n      builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n    }\n  }\n  builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n  for (  String parameterType : listener.getParameterTypes()) {\n    builder.append(\"\\n  \").append(parameterType);\n  }\n  builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n  error(executableElement,builder.toString());\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 168,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 2101,
        "startLineNumber" : 291,
        "startColumnNumber" : 56,
        "endLineNumber" : 341,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  VariableElement methodParameter=methodParameters.get(i);\n  TypeMirror methodParameterType=methodParameter.asType();\n  for (int j=0; j < parameterTypes.size(); j++) {\n    if (methodParameterUsed.get(j)) {\n      continue;\n    }\n    if (isSubtypeOfType(methodParameterType,parameterTypes.get(j))) {\n      parameters[i]=new Parameter(j,methodParameterType.toString());\n      methodParameterUsed.set(j);\n      break;\n    }\n  }\n  if (parameters[i] == null) {\n    StringBuilder builder=new StringBuilder();\n    builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n    for (int j=0; j < parameters.length; j++) {\n      Parameter parameter=parameters[j];\n      builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n      if (parameter == null) {\n        builder.append(\"did not match any listener parameters\");\n      }\n else {\n        builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n      }\n    }\n    builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n    for (    String parameterType : listener.getParameterTypes()) {\n      builder.append(\"\\n  \").append(parameterType);\n    }\n    builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n    error(executableElement,builder.toString());\n    return;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 234,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2151,
        "startLineNumber" : 291,
        "startColumnNumber" : 6,
        "endLineNumber" : 341,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int i=0; i < methodParameters.size(); i++) {\n  VariableElement methodParameter=methodParameters.get(i);\n  TypeMirror methodParameterType=methodParameter.asType();\n  for (int j=0; j < parameterTypes.size(); j++) {\n    if (methodParameterUsed.get(j)) {\n      continue;\n    }\n    if (isSubtypeOfType(methodParameterType,parameterTypes.get(j))) {\n      parameters[i]=new Parameter(j,methodParameterType.toString());\n      methodParameterUsed.set(j);\n      break;\n    }\n  }\n  if (parameters[i] == null) {\n    StringBuilder builder=new StringBuilder();\n    builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n    for (int j=0; j < parameters.length; j++) {\n      Parameter parameter=parameters[j];\n      builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n      if (parameter == null) {\n        builder.append(\"did not match any listener parameters\");\n      }\n else {\n        builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n      }\n    }\n    builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n    for (    String parameterType : listener.getParameterTypes()) {\n      builder.append(\"\\n  \").append(parameterType);\n    }\n    builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n    error(executableElement,builder.toString());\n    return;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 247,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2362,
        "startLineNumber" : 287,
        "startColumnNumber" : 37,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  parameters=new Parameter[methodParameters.size()];\n  BitSet methodParameterUsed=new BitSet(methodParameters.size());\n  List<String> parameterTypes=listener.getParameterTypes();\n  for (int i=0; i < methodParameters.size(); i++) {\n    VariableElement methodParameter=methodParameters.get(i);\n    TypeMirror methodParameterType=methodParameter.asType();\n    for (int j=0; j < parameterTypes.size(); j++) {\n      if (methodParameterUsed.get(j)) {\n        continue;\n      }\n      if (isSubtypeOfType(methodParameterType,parameterTypes.get(j))) {\n        parameters[i]=new Parameter(j,methodParameterType.toString());\n        methodParameterUsed.set(j);\n        break;\n      }\n    }\n    if (parameters[i] == null) {\n      StringBuilder builder=new StringBuilder();\n      builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n      for (int j=0; j < parameters.length; j++) {\n        Parameter parameter=parameters[j];\n        builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n        if (parameter == null) {\n          builder.append(\"did not match any listener parameters\");\n        }\n else {\n          builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n        }\n      }\n      builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n      for (      String parameterType : listener.getParameterTypes()) {\n        builder.append(\"\\n  \").append(parameterType);\n      }\n      builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n      error(executableElement,builder.toString());\n      return;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 281,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2395,
        "startLineNumber" : 287,
        "startColumnNumber" : 4,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (!methodParameters.isEmpty()) {\n  parameters=new Parameter[methodParameters.size()];\n  BitSet methodParameterUsed=new BitSet(methodParameters.size());\n  List<String> parameterTypes=listener.getParameterTypes();\n  for (int i=0; i < methodParameters.size(); i++) {\n    VariableElement methodParameter=methodParameters.get(i);\n    TypeMirror methodParameterType=methodParameter.asType();\n    for (int j=0; j < parameterTypes.size(); j++) {\n      if (methodParameterUsed.get(j)) {\n        continue;\n      }\n      if (isSubtypeOfType(methodParameterType,parameterTypes.get(j))) {\n        parameters[i]=new Parameter(j,methodParameterType.toString());\n        methodParameterUsed.set(j);\n        break;\n      }\n    }\n    if (parameters[i] == null) {\n      StringBuilder builder=new StringBuilder();\n      builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n      for (int j=0; j < parameters.length; j++) {\n        Parameter parameter=parameters[j];\n        builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n        if (parameter == null) {\n          builder.append(\"did not match any listener parameters\");\n        }\n else {\n          builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n        }\n      }\n      builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n      for (      String parameterType : listener.getParameterTypes()) {\n        builder.append(\"\\n  \").append(parameterType);\n      }\n      builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n      error(executableElement,builder.toString());\n      return;\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 286,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6627,
        "startLineNumber" : 208,
        "startColumnNumber" : 23,
        "endLineNumber" : 356,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (!(element instanceof ExecutableElement) || element.getKind() != METHOD) {\n    error(element,\"@%s annotation must be on a method.\",annotationClass.getSimpleName());\n    return;\n  }\n  ExecutableElement executableElement=(ExecutableElement)element;\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  Annotation annotation=element.getAnnotation(annotationClass);\n  Method annotationValue=annotationClass.getDeclaredMethod(\"value\");\n  if (annotationValue == null || annotationValue.getReturnType() != int[].class) {\n    error(element,\"@%s annotation lacks int[] value property. (%s.%s)\",annotationClass,enclosingElement.getQualifiedName(),element.getSimpleName());\n    return;\n  }\n  int[] ids=(int[])annotationValue.invoke(annotation);\n  String name=executableElement.getSimpleName().toString();\n  boolean required=element.getAnnotation(Optional.class) == null;\n  boolean hasError=isValidForGeneratedCode(annotationClass,\"methods\",element);\n  Set<Integer> seenIds=new LinkedHashSet<Integer>(ids.length);\n  for (  int id : ids) {\n    if (!seenIds.add(id)) {\n      error(element,\"@%s annotation for method contains duplicate ID %d. (%s.%s)\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName(),element.getSimpleName());\n      hasError=true;\n    }\n  }\n  ListenerClass listenerClass=annotationClass.getAnnotation(ListenerClass.class);\n  if (listenerClass == null) {\n    error(element,\"No @%s defined on @%s.\",ListenerClass.class.getSimpleName(),annotationClass.getSimpleName());\n    return;\n  }\n  Class<?> listenerClassClass=listenerClass.value();\n  Listener listener=LISTENER_MAP.get(listenerClassClass);\n  if (listener == null) {\n    try {\n      listener=Listener.from(listenerClassClass);\n      LISTENER_MAP.put(listenerClassClass,listener);\n    }\n catch (    IllegalArgumentException e) {\n      error(elementUtils.getTypeElement(annotationClass.getName()),\"%s (%s on @%s)\",e.getMessage(),listenerClassClass.getName(),annotationClass.getName());\n      return;\n    }\n  }\n  List<? extends VariableElement> methodParameters=executableElement.getParameters();\n  if (methodParameters.size() > listener.getParameterTypes().size()) {\n    error(element,\"@%s methods can have at most %s parameter(s). (%s.%s)\",annotationClass.getSimpleName(),listener.getParameterTypes().size(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (!executableElement.getReturnType().toString().equals(listener.getReturnType())) {\n    error(element,\"@%s methods must have a '%s' return type. (%s.%s)\",annotationClass.getSimpleName(),listener.getReturnType(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (hasError) {\n    return;\n  }\n  Parameter[] parameters=Parameter.NONE;\n  if (!methodParameters.isEmpty()) {\n    parameters=new Parameter[methodParameters.size()];\n    BitSet methodParameterUsed=new BitSet(methodParameters.size());\n    List<String> parameterTypes=listener.getParameterTypes();\n    for (int i=0; i < methodParameters.size(); i++) {\n      VariableElement methodParameter=methodParameters.get(i);\n      TypeMirror methodParameterType=methodParameter.asType();\n      for (int j=0; j < parameterTypes.size(); j++) {\n        if (methodParameterUsed.get(j)) {\n          continue;\n        }\n        if (isSubtypeOfType(methodParameterType,parameterTypes.get(j))) {\n          parameters[i]=new Parameter(j,methodParameterType.toString());\n          methodParameterUsed.set(j);\n          break;\n        }\n      }\n      if (parameters[i] == null) {\n        StringBuilder builder=new StringBuilder();\n        builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n        for (int j=0; j < parameters.length; j++) {\n          Parameter parameter=parameters[j];\n          builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n          if (parameter == null) {\n            builder.append(\"did not match any listener parameters\");\n          }\n else {\n            builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n          }\n        }\n        builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n        for (        String parameterType : listener.getParameterTypes()) {\n          builder.append(\"\\n  \").append(parameterType);\n        }\n        builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n        error(executableElement,builder.toString());\n        return;\n      }\n    }\n  }\n  ViewInjector viewInjector=getOrCreateTargetClass(targetClassMap,enclosingElement);\n  for (  int id : ids) {\n    if (!viewInjector.addMethod(id,listener,name,Arrays.asList(parameters),required)) {\n      error(element,\"Multiple @%s methods declared for ID %s in %s.\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName());\n      return;\n    }\n  }\n  TypeMirror erasedTargetType=typeUtils.erasure(enclosingElement.asType());\n  erasedTargetTypes.add(erasedTargetType);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 716,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6837,
        "startLineNumber" : 206,
        "startColumnNumber" : 2,
        "endLineNumber" : 356,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private void parseListenerAnnotation(Class<? extends Annotation> annotationClass,Element element,Map<TypeElement,ViewInjector> targetClassMap,Set<TypeMirror> erasedTargetTypes) throws Exception {\n  if (!(element instanceof ExecutableElement) || element.getKind() != METHOD) {\n    error(element,\"@%s annotation must be on a method.\",annotationClass.getSimpleName());\n    return;\n  }\n  ExecutableElement executableElement=(ExecutableElement)element;\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  Annotation annotation=element.getAnnotation(annotationClass);\n  Method annotationValue=annotationClass.getDeclaredMethod(\"value\");\n  if (annotationValue == null || annotationValue.getReturnType() != int[].class) {\n    error(element,\"@%s annotation lacks int[] value property. (%s.%s)\",annotationClass,enclosingElement.getQualifiedName(),element.getSimpleName());\n    return;\n  }\n  int[] ids=(int[])annotationValue.invoke(annotation);\n  String name=executableElement.getSimpleName().toString();\n  boolean required=element.getAnnotation(Optional.class) == null;\n  boolean hasError=isValidForGeneratedCode(annotationClass,\"methods\",element);\n  Set<Integer> seenIds=new LinkedHashSet<Integer>(ids.length);\n  for (  int id : ids) {\n    if (!seenIds.add(id)) {\n      error(element,\"@%s annotation for method contains duplicate ID %d. (%s.%s)\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName(),element.getSimpleName());\n      hasError=true;\n    }\n  }\n  ListenerClass listenerClass=annotationClass.getAnnotation(ListenerClass.class);\n  if (listenerClass == null) {\n    error(element,\"No @%s defined on @%s.\",ListenerClass.class.getSimpleName(),annotationClass.getSimpleName());\n    return;\n  }\n  Class<?> listenerClassClass=listenerClass.value();\n  Listener listener=LISTENER_MAP.get(listenerClassClass);\n  if (listener == null) {\n    try {\n      listener=Listener.from(listenerClassClass);\n      LISTENER_MAP.put(listenerClassClass,listener);\n    }\n catch (    IllegalArgumentException e) {\n      error(elementUtils.getTypeElement(annotationClass.getName()),\"%s (%s on @%s)\",e.getMessage(),listenerClassClass.getName(),annotationClass.getName());\n      return;\n    }\n  }\n  List<? extends VariableElement> methodParameters=executableElement.getParameters();\n  if (methodParameters.size() > listener.getParameterTypes().size()) {\n    error(element,\"@%s methods can have at most %s parameter(s). (%s.%s)\",annotationClass.getSimpleName(),listener.getParameterTypes().size(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (!executableElement.getReturnType().toString().equals(listener.getReturnType())) {\n    error(element,\"@%s methods must have a '%s' return type. (%s.%s)\",annotationClass.getSimpleName(),listener.getReturnType(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (hasError) {\n    return;\n  }\n  Parameter[] parameters=Parameter.NONE;\n  if (!methodParameters.isEmpty()) {\n    parameters=new Parameter[methodParameters.size()];\n    BitSet methodParameterUsed=new BitSet(methodParameters.size());\n    List<String> parameterTypes=listener.getParameterTypes();\n    for (int i=0; i < methodParameters.size(); i++) {\n      VariableElement methodParameter=methodParameters.get(i);\n      TypeMirror methodParameterType=methodParameter.asType();\n      for (int j=0; j < parameterTypes.size(); j++) {\n        if (methodParameterUsed.get(j)) {\n          continue;\n        }\n        if (isSubtypeOfType(methodParameterType,parameterTypes.get(j))) {\n          parameters[i]=new Parameter(j,methodParameterType.toString());\n          methodParameterUsed.set(j);\n          break;\n        }\n      }\n      if (parameters[i] == null) {\n        StringBuilder builder=new StringBuilder();\n        builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n        for (int j=0; j < parameters.length; j++) {\n          Parameter parameter=parameters[j];\n          builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n          if (parameter == null) {\n            builder.append(\"did not match any listener parameters\");\n          }\n else {\n            builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n          }\n        }\n        builder.append(\"\\n\\nMethods may have up to \").append(listener.getParameterTypes().size()).append(\" parameter(s):\\n\");\n        for (        String parameterType : listener.getParameterTypes()) {\n          builder.append(\"\\n  \").append(parameterType);\n        }\n        builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n        error(executableElement,builder.toString());\n        return;\n      }\n    }\n  }\n  ViewInjector viewInjector=getOrCreateTargetClass(targetClassMap,enclosingElement);\n  for (  int id : ids) {\n    if (!viewInjector.addMethod(id,listener,name,Arrays.asList(parameters),required)) {\n      error(element,\"Multiple @%s methods declared for ID %s in %s.\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName());\n      return;\n    }\n  }\n  TypeMirror erasedTargetType=typeUtils.erasure(enclosingElement.asType());\n  erasedTargetTypes.add(erasedTargetType);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 750,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 319,
        "startColumnNumber" : 24,
        "endLineNumber" : 319,
        "endColumnNumber" : 67
      },
      "nodeContext" : "methodParameters.get(j).asType().toString()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 295,
    "startColumnNumber" : 24,
    "endLineNumber" : 295,
    "endColumnNumber" : 25
  }, {
    "charLength" : 1,
    "startLineNumber" : 296,
    "startColumnNumber" : 38,
    "endLineNumber" : 296,
    "endColumnNumber" : 39
  }, {
    "charLength" : 1,
    "startLineNumber" : 299,
    "startColumnNumber" : 70,
    "endLineNumber" : 299,
    "endColumnNumber" : 71
  }, {
    "charLength" : 1,
    "startLineNumber" : 300,
    "startColumnNumber" : 42,
    "endLineNumber" : 300,
    "endColumnNumber" : 43
  }, {
    "charLength" : 1,
    "startLineNumber" : 301,
    "startColumnNumber" : 36,
    "endLineNumber" : 301,
    "endColumnNumber" : 37
  }, {
    "charLength" : 1,
    "startLineNumber" : 314,
    "startColumnNumber" : 26,
    "endLineNumber" : 314,
    "endColumnNumber" : 27
  }, {
    "charLength" : 1,
    "startLineNumber" : 315,
    "startColumnNumber" : 45,
    "endLineNumber" : 315,
    "endColumnNumber" : 46
  }, {
    "charLength" : 1,
    "startLineNumber" : 317,
    "startColumnNumber" : 24,
    "endLineNumber" : 317,
    "endColumnNumber" : 25
  }, {
    "charLength" : 1,
    "startLineNumber" : 319,
    "startColumnNumber" : 45,
    "endLineNumber" : 319,
    "endColumnNumber" : 46
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 1
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 1
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 1
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 10
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 10
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 10
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 10
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 10
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 10
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 10
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 10
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 10
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 10
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 3
  } ]
}