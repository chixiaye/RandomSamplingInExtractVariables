{
  "id" : 585,
  "expression" : "addAttrValue(attr,attrValue)",
  "projectName" : "bazelbuild@bazel",
  "commitID" : "14292d176cb85d1cf6e20f79fde0249b0fe6ba24",
  "filePath" : "src/main/java/com/google/devtools/build/lib/packages/StarlarkDefinedAspect.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "addAttrValue(attr,attrValue)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 29,
      "startLineNumber" : 158,
      "startColumnNumber" : 15,
      "endLineNumber" : 158,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 158,
        "startColumnNumber" : 8,
        "endLineNumber" : 158,
        "endColumnNumber" : 44
      },
      "nodeContext" : "attr=addAttrValue(attr,attrValue)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 158,
        "startColumnNumber" : 8,
        "endLineNumber" : 158,
        "endColumnNumber" : 45
      },
      "nodeContext" : "attr=addAttrValue(attr,attrValue);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 645,
        "startLineNumber" : 145,
        "startColumnNumber" : 64,
        "endLineNumber" : 159,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  Type<?> attrType=attr.getType();\n  String attrName=attr.getName();\n  String attrValue=aspectParams.getOnlyValueOfAttribute(attrName);\n  Preconditions.checkState(!Attribute.isImplicit(attrName));\n  Preconditions.checkState(attrType == Type.STRING || attrType == Type.INTEGER);\n  Preconditions.checkArgument(aspectParams.getAttribute(attrName).size() == 1,\"Aspect %s parameter %s has %s values (must have exactly 1).\",getName(),attrName,aspectParams.getAttribute(attrName).size());\n  attr=addAttrValue(attr,attrValue);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 81,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 703,
        "startLineNumber" : 145,
        "startColumnNumber" : 6,
        "endLineNumber" : 159,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (!aspectParams.getAttribute(attr.getName()).isEmpty()) {\n  Type<?> attrType=attr.getType();\n  String attrName=attr.getName();\n  String attrValue=aspectParams.getOnlyValueOfAttribute(attrName);\n  Preconditions.checkState(!Attribute.isImplicit(attrName));\n  Preconditions.checkState(attrType == Type.STRING || attrType == Type.INTEGER);\n  Preconditions.checkArgument(aspectParams.getAttribute(attrName).size() == 1,\"Aspect %s parameter %s has %s values (must have exactly 1).\",getName(),attrName,aspectParams.getAttribute(attrName).size());\n  attr=addAttrValue(attr,attrValue);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 91,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 801,
        "startLineNumber" : 143,
        "startColumnNumber" : 43,
        "endLineNumber" : 161,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Attribute attr=attribute;\n  if (!aspectParams.getAttribute(attr.getName()).isEmpty()) {\n    Type<?> attrType=attr.getType();\n    String attrName=attr.getName();\n    String attrValue=aspectParams.getOnlyValueOfAttribute(attrName);\n    Preconditions.checkState(!Attribute.isImplicit(attrName));\n    Preconditions.checkState(attrType == Type.STRING || attrType == Type.INTEGER);\n    Preconditions.checkArgument(aspectParams.getAttribute(attrName).size() == 1,\"Aspect %s parameter %s has %s values (must have exactly 1).\",getName(),attrName,aspectParams.getAttribute(attrName).size());\n    attr=addAttrValue(attr,attrValue);\n  }\n  builder.add(attr);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 103,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 840,
        "startLineNumber" : 143,
        "startColumnNumber" : 4,
        "endLineNumber" : 161,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (Attribute attribute : attributes) {\n  Attribute attr=attribute;\n  if (!aspectParams.getAttribute(attr.getName()).isEmpty()) {\n    Type<?> attrType=attr.getType();\n    String attrName=attr.getName();\n    String attrValue=aspectParams.getOnlyValueOfAttribute(attrName);\n    Preconditions.checkState(!Attribute.isImplicit(attrName));\n    Preconditions.checkState(attrType == Type.STRING || attrType == Type.INTEGER);\n    Preconditions.checkArgument(aspectParams.getAttribute(attrName).size() == 1,\"Aspect %s parameter %s has %s values (must have exactly 1).\",getName(),attrName,aspectParams.getAttribute(attrName).size());\n    attr=addAttrValue(attr,attrValue);\n  }\n  builder.add(attr);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 109,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2259,
        "startLineNumber" : 133,
        "startColumnNumber" : 71,
        "endLineNumber" : 181,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  AspectDefinition.Builder builder=new AspectDefinition.Builder(aspectClass);\n  if (ALL_ATTR_ASPECTS.equals(attributeAspects)) {\n    builder.propagateAlongAllAttributes();\n  }\n else {\n    for (    String attributeAspect : attributeAspects) {\n      builder.propagateAlongAttribute(attributeAspect);\n    }\n  }\n  for (  Attribute attribute : attributes) {\n    Attribute attr=attribute;\n    if (!aspectParams.getAttribute(attr.getName()).isEmpty()) {\n      Type<?> attrType=attr.getType();\n      String attrName=attr.getName();\n      String attrValue=aspectParams.getOnlyValueOfAttribute(attrName);\n      Preconditions.checkState(!Attribute.isImplicit(attrName));\n      Preconditions.checkState(attrType == Type.STRING || attrType == Type.INTEGER);\n      Preconditions.checkArgument(aspectParams.getAttribute(attrName).size() == 1,\"Aspect %s parameter %s has %s values (must have exactly 1).\",getName(),attrName,aspectParams.getAttribute(attrName).size());\n      attr=addAttrValue(attr,attrValue);\n    }\n    builder.add(attr);\n  }\n  builder.requireStarlarkProviderSets(requiredProviders);\n  builder.requireAspectsWithProviders(requiredAspectProviders);\n  ImmutableList.Builder<StarlarkProviderIdentifier> advertisedStarlarkProviders=ImmutableList.builder();\n  for (  StarlarkProviderIdentifier provider : provides) {\n    advertisedStarlarkProviders.add(provider);\n  }\n  builder.advertiseProvider(advertisedStarlarkProviders.build());\n  builder.requiresConfigurationFragmentsByStarlarkBuiltinName(fragments);\n  builder.requiresConfigurationFragmentsByStarlarkBuiltinName(hostTransition,hostFragments);\n  builder.addRequiredToolchains(requiredToolchains);\n  builder.useToolchainTransition(useToolchainTransition);\n  builder.applyToGeneratingRules(applyToGeneratingRules);\n  ImmutableSet.Builder<AspectClass> requiredAspectsClasses=ImmutableSet.builder();\n  for (  StarlarkAspect requiredAspect : requiredAspects) {\n    requiredAspectsClasses.add(requiredAspect.getAspectClass());\n  }\n  builder.requiredAspectClasses(requiredAspectsClasses.build());\n  return builder.build();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 252,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2328,
        "startLineNumber" : 133,
        "startColumnNumber" : 2,
        "endLineNumber" : 181,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public AspectDefinition getDefinition(AspectParameters aspectParams){\n  AspectDefinition.Builder builder=new AspectDefinition.Builder(aspectClass);\n  if (ALL_ATTR_ASPECTS.equals(attributeAspects)) {\n    builder.propagateAlongAllAttributes();\n  }\n else {\n    for (    String attributeAspect : attributeAspects) {\n      builder.propagateAlongAttribute(attributeAspect);\n    }\n  }\n  for (  Attribute attribute : attributes) {\n    Attribute attr=attribute;\n    if (!aspectParams.getAttribute(attr.getName()).isEmpty()) {\n      Type<?> attrType=attr.getType();\n      String attrName=attr.getName();\n      String attrValue=aspectParams.getOnlyValueOfAttribute(attrName);\n      Preconditions.checkState(!Attribute.isImplicit(attrName));\n      Preconditions.checkState(attrType == Type.STRING || attrType == Type.INTEGER);\n      Preconditions.checkArgument(aspectParams.getAttribute(attrName).size() == 1,\"Aspect %s parameter %s has %s values (must have exactly 1).\",getName(),attrName,aspectParams.getAttribute(attrName).size());\n      attr=addAttrValue(attr,attrValue);\n    }\n    builder.add(attr);\n  }\n  builder.requireStarlarkProviderSets(requiredProviders);\n  builder.requireAspectsWithProviders(requiredAspectProviders);\n  ImmutableList.Builder<StarlarkProviderIdentifier> advertisedStarlarkProviders=ImmutableList.builder();\n  for (  StarlarkProviderIdentifier provider : provides) {\n    advertisedStarlarkProviders.add(provider);\n  }\n  builder.advertiseProvider(advertisedStarlarkProviders.build());\n  builder.requiresConfigurationFragmentsByStarlarkBuiltinName(fragments);\n  builder.requiresConfigurationFragmentsByStarlarkBuiltinName(hostTransition,hostFragments);\n  builder.addRequiredToolchains(requiredToolchains);\n  builder.useToolchainTransition(useToolchainTransition);\n  builder.applyToGeneratingRules(applyToGeneratingRules);\n  ImmutableSet.Builder<AspectClass> requiredAspectsClasses=ImmutableSet.builder();\n  for (  StarlarkAspect requiredAspect : requiredAspects) {\n    requiredAspectsClasses.add(requiredAspect.getAspectClass());\n  }\n  builder.requiredAspectClasses(requiredAspectsClasses.build());\n  return builder.build();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 261,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 158,
        "startColumnNumber" : 8,
        "endLineNumber" : 158,
        "endColumnNumber" : 45
      },
      "nodeContext" : "attr=addAttrValue(attr,attrValue);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "com.google.devtools.build.lib.packages.Attribute"
  } ],
  "positionList" : [ {
    "charLength" : 29,
    "startLineNumber" : 158,
    "startColumnNumber" : 15,
    "endLineNumber" : 158,
    "endColumnNumber" : 44
  } ],
  "layoutRelationDataList" : [ ]
}