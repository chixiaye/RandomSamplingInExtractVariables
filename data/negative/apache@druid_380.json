{
  "id" : 380,
  "expression" : "subsetList.stream().map(m -> normalize(m.get(\"d\"),hasMultipleValues)).distinct().collect(Collectors.toList())",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/processing/src/test/java/org/apache/druid/segment/IndexMergerNullHandlingTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "subsetList.stream().map(m -> normalize(m.get(\"d\"),hasMultipleValues)).distinct().collect(Collectors.toList())",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 254,
      "startLineNumber" : 167,
      "startColumnNumber" : 20,
      "endLineNumber" : 170,
      "endColumnNumber" : 59
    },
    "astNodeNumber" : 22,
    "astHeight" : 7,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 318,
        "startLineNumber" : 166,
        "startColumnNumber" : 16,
        "endLineNumber" : 171,
        "endColumnNumber" : 17
      },
      "nodeContext" : "ImmutableMultiset.copyOf(subsetList.stream().map(m -> normalize(m.get(\"d\"),hasMultipleValues)).distinct().collect(Collectors.toList()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 25,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 900,
        "startLineNumber" : 164,
        "startColumnNumber" : 12,
        "endLineNumber" : 180,
        "endColumnNumber" : 13
      },
      "nodeContext" : "Assert.assertEquals(subsetList.toString(),ImmutableMultiset.copyOf(subsetList.stream().map(m -> normalize(m.get(\"d\"),hasMultipleValues)).distinct().collect(Collectors.toList())),ImmutableMultiset.copyOf(IntStream.range(0,index.getNumRows()).mapToObj(rowNumber -> getRow(dictionaryColumn,rowNumber)).distinct().collect(Collectors.toList())))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 57,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 901,
        "startLineNumber" : 164,
        "startColumnNumber" : 12,
        "endLineNumber" : 180,
        "endColumnNumber" : 14
      },
      "nodeContext" : "Assert.assertEquals(subsetList.toString(),ImmutableMultiset.copyOf(subsetList.stream().map(m -> normalize(m.get(\"d\"),hasMultipleValues)).distinct().collect(Collectors.toList())),ImmutableMultiset.copyOf(IntStream.range(0,index.getNumRows()).mapToObj(rowNumber -> getRow(dictionaryColumn,rowNumber)).distinct().collect(Collectors.toList())));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 58,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3054,
        "startLineNumber" : 150,
        "startColumnNumber" : 79,
        "endLineNumber" : 210,
        "endColumnNumber" : 11
      },
      "nodeContext" : "{\n  Assert.assertEquals(subsetList.toString(),uniqueValues.stream().sorted(Comparators.naturalNullsFirst()).collect(Collectors.toList()),IntStream.range(0,dictionaryColumn.getCardinality()).mapToObj(dictionaryColumn::lookupName).collect(Collectors.toList()));\n  Assert.assertEquals(subsetList.toString(),hasMultipleValues,dictionaryColumn.hasMultipleValues());\n  Assert.assertEquals(subsetList.toString(),uniqueValues.size(),dictionaryColumn.getCardinality());\n  Assert.assertEquals(subsetList.toString(),ImmutableMultiset.copyOf(subsetList.stream().map(m -> normalize(m.get(\"d\"),hasMultipleValues)).distinct().collect(Collectors.toList())),ImmutableMultiset.copyOf(IntStream.range(0,index.getNumRows()).mapToObj(rowNumber -> getRow(dictionaryColumn,rowNumber)).distinct().collect(Collectors.toList())));\n  final BitmapIndex bitmapIndex=columnHolder.getBitmapIndex();\n  final List<Integer> expectedNullRows=new ArrayList<>();\n  for (int i=0; i < index.getNumRows(); i++) {\n    final List<String> row=getRow(dictionaryColumn,i);\n    if (row.isEmpty() || row.stream().anyMatch(NullHandling::isNullOrEquivalent)) {\n      expectedNullRows.add(i);\n    }\n  }\n  Assert.assertEquals(subsetList.toString(),expectedNullRows.size() > 0,bitmapIndex.hasNulls());\n  if (expectedNullRows.size() > 0) {\n    Assert.assertEquals(subsetList.toString(),0,bitmapIndex.getIndex(null));\n    final ImmutableBitmap nullBitmap=bitmapIndex.getBitmap(bitmapIndex.getIndex(null));\n    final List<Integer> actualNullRows=new ArrayList<>();\n    final IntIterator iterator=nullBitmap.iterator();\n    while (iterator.hasNext()) {\n      actualNullRows.add(iterator.next());\n    }\n    Assert.assertEquals(subsetList.toString(),expectedNullRows,actualNullRows);\n  }\n else {\n    Assert.assertEquals(-1,bitmapIndex.getIndex(null));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 289,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3195,
        "startLineNumber" : 149,
        "startColumnNumber" : 10,
        "endLineNumber" : 210,
        "endColumnNumber" : 11
      },
      "nodeContext" : "try (final DictionaryEncodedColumn<String> dictionaryColumn=(DictionaryEncodedColumn<String>)columnHolder.getColumn()){\n  Assert.assertEquals(subsetList.toString(),uniqueValues.stream().sorted(Comparators.naturalNullsFirst()).collect(Collectors.toList()),IntStream.range(0,dictionaryColumn.getCardinality()).mapToObj(dictionaryColumn::lookupName).collect(Collectors.toList()));\n  Assert.assertEquals(subsetList.toString(),hasMultipleValues,dictionaryColumn.hasMultipleValues());\n  Assert.assertEquals(subsetList.toString(),uniqueValues.size(),dictionaryColumn.getCardinality());\n  Assert.assertEquals(subsetList.toString(),ImmutableMultiset.copyOf(subsetList.stream().map(m -> normalize(m.get(\"d\"),hasMultipleValues)).distinct().collect(Collectors.toList())),ImmutableMultiset.copyOf(IntStream.range(0,index.getNumRows()).mapToObj(rowNumber -> getRow(dictionaryColumn,rowNumber)).distinct().collect(Collectors.toList())));\n  final BitmapIndex bitmapIndex=columnHolder.getBitmapIndex();\n  final List<Integer> expectedNullRows=new ArrayList<>();\n  for (int i=0; i < index.getNumRows(); i++) {\n    final List<String> row=getRow(dictionaryColumn,i);\n    if (row.isEmpty() || row.stream().anyMatch(NullHandling::isNullOrEquivalent)) {\n      expectedNullRows.add(i);\n    }\n  }\n  Assert.assertEquals(subsetList.toString(),expectedNullRows.size() > 0,bitmapIndex.hasNulls());\n  if (expectedNullRows.size() > 0) {\n    Assert.assertEquals(subsetList.toString(),0,bitmapIndex.getIndex(null));\n    final ImmutableBitmap nullBitmap=bitmapIndex.getBitmap(bitmapIndex.getIndex(null));\n    final List<Integer> actualNullRows=new ArrayList<>();\n    final IntIterator iterator=nullBitmap.iterator();\n    while (iterator.hasNext()) {\n      actualNullRows.add(iterator.next());\n    }\n    Assert.assertEquals(subsetList.toString(),expectedNullRows,actualNullRows);\n  }\n else {\n    Assert.assertEquals(-1,bitmapIndex.getIndex(null));\n  }\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 308,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 4096,
        "startLineNumber" : 130,
        "startColumnNumber" : 15,
        "endLineNumber" : 211,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Assert.assertNotNull(subsetList.toString(),columnHolder);\n  final boolean hasMultipleValues=subsetList.stream().anyMatch(m -> m.get(\"d\") instanceof List && (((List)m.get(\"d\")).size() > 1));\n  final Set<String> uniqueValues=new HashSet<>();\n  for (  Map<String,Object> m : subsetList) {\n    final List<String> dValues=normalize(m.get(\"d\"),hasMultipleValues);\n    uniqueValues.addAll(dValues);\n    if (nullFlavors.contains(m)) {\n      uniqueValues.add(null);\n    }\n  }\n  try (final DictionaryEncodedColumn<String> dictionaryColumn=(DictionaryEncodedColumn<String>)columnHolder.getColumn()){\n    Assert.assertEquals(subsetList.toString(),uniqueValues.stream().sorted(Comparators.naturalNullsFirst()).collect(Collectors.toList()),IntStream.range(0,dictionaryColumn.getCardinality()).mapToObj(dictionaryColumn::lookupName).collect(Collectors.toList()));\n    Assert.assertEquals(subsetList.toString(),hasMultipleValues,dictionaryColumn.hasMultipleValues());\n    Assert.assertEquals(subsetList.toString(),uniqueValues.size(),dictionaryColumn.getCardinality());\n    Assert.assertEquals(subsetList.toString(),ImmutableMultiset.copyOf(subsetList.stream().map(m -> normalize(m.get(\"d\"),hasMultipleValues)).distinct().collect(Collectors.toList())),ImmutableMultiset.copyOf(IntStream.range(0,index.getNumRows()).mapToObj(rowNumber -> getRow(dictionaryColumn,rowNumber)).distinct().collect(Collectors.toList())));\n    final BitmapIndex bitmapIndex=columnHolder.getBitmapIndex();\n    final List<Integer> expectedNullRows=new ArrayList<>();\n    for (int i=0; i < index.getNumRows(); i++) {\n      final List<String> row=getRow(dictionaryColumn,i);\n      if (row.isEmpty() || row.stream().anyMatch(NullHandling::isNullOrEquivalent)) {\n        expectedNullRows.add(i);\n      }\n    }\n    Assert.assertEquals(subsetList.toString(),expectedNullRows.size() > 0,bitmapIndex.hasNulls());\n    if (expectedNullRows.size() > 0) {\n      Assert.assertEquals(subsetList.toString(),0,bitmapIndex.getIndex(null));\n      final ImmutableBitmap nullBitmap=bitmapIndex.getBitmap(bitmapIndex.getIndex(null));\n      final List<Integer> actualNullRows=new ArrayList<>();\n      final IntIterator iterator=nullBitmap.iterator();\n      while (iterator.hasNext()) {\n        actualNullRows.add(iterator.next());\n      }\n      Assert.assertEquals(subsetList.toString(),expectedNullRows,actualNullRows);\n    }\n else {\n      Assert.assertEquals(-1,bitmapIndex.getIndex(null));\n    }\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 408,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4263,
        "startLineNumber" : 127,
        "startColumnNumber" : 8,
        "endLineNumber" : 211,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (nullFlavors.containsAll(subsetList)) {\n  Assert.assertNull(subsetList.toString(),columnHolder);\n}\n else {\n  Assert.assertNotNull(subsetList.toString(),columnHolder);\n  final boolean hasMultipleValues=subsetList.stream().anyMatch(m -> m.get(\"d\") instanceof List && (((List)m.get(\"d\")).size() > 1));\n  final Set<String> uniqueValues=new HashSet<>();\n  for (  Map<String,Object> m : subsetList) {\n    final List<String> dValues=normalize(m.get(\"d\"),hasMultipleValues);\n    uniqueValues.addAll(dValues);\n    if (nullFlavors.contains(m)) {\n      uniqueValues.add(null);\n    }\n  }\n  try (final DictionaryEncodedColumn<String> dictionaryColumn=(DictionaryEncodedColumn<String>)columnHolder.getColumn()){\n    Assert.assertEquals(subsetList.toString(),uniqueValues.stream().sorted(Comparators.naturalNullsFirst()).collect(Collectors.toList()),IntStream.range(0,dictionaryColumn.getCardinality()).mapToObj(dictionaryColumn::lookupName).collect(Collectors.toList()));\n    Assert.assertEquals(subsetList.toString(),hasMultipleValues,dictionaryColumn.hasMultipleValues());\n    Assert.assertEquals(subsetList.toString(),uniqueValues.size(),dictionaryColumn.getCardinality());\n    Assert.assertEquals(subsetList.toString(),ImmutableMultiset.copyOf(subsetList.stream().map(m -> normalize(m.get(\"d\"),hasMultipleValues)).distinct().collect(Collectors.toList())),ImmutableMultiset.copyOf(IntStream.range(0,index.getNumRows()).mapToObj(rowNumber -> getRow(dictionaryColumn,rowNumber)).distinct().collect(Collectors.toList())));\n    final BitmapIndex bitmapIndex=columnHolder.getBitmapIndex();\n    final List<Integer> expectedNullRows=new ArrayList<>();\n    for (int i=0; i < index.getNumRows(); i++) {\n      final List<String> row=getRow(dictionaryColumn,i);\n      if (row.isEmpty() || row.stream().anyMatch(NullHandling::isNullOrEquivalent)) {\n        expectedNullRows.add(i);\n      }\n    }\n    Assert.assertEquals(subsetList.toString(),expectedNullRows.size() > 0,bitmapIndex.hasNulls());\n    if (expectedNullRows.size() > 0) {\n      Assert.assertEquals(subsetList.toString(),0,bitmapIndex.getIndex(null));\n      final ImmutableBitmap nullBitmap=bitmapIndex.getBitmap(bitmapIndex.getIndex(null));\n      final List<Integer> actualNullRows=new ArrayList<>();\n      final IntIterator iterator=nullBitmap.iterator();\n      while (iterator.hasNext()) {\n        actualNullRows.add(iterator.next());\n      }\n      Assert.assertEquals(subsetList.toString(),expectedNullRows,actualNullRows);\n    }\n else {\n      Assert.assertEquals(-1,bitmapIndex.getIndex(null));\n    }\n  }\n }\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 422,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 4352,
        "startLineNumber" : 124,
        "startColumnNumber" : 111,
        "endLineNumber" : 212,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  final ColumnHolder columnHolder=index.getColumnHolder(\"d\");\n  if (nullFlavors.containsAll(subsetList)) {\n    Assert.assertNull(subsetList.toString(),columnHolder);\n  }\n else {\n    Assert.assertNotNull(subsetList.toString(),columnHolder);\n    final boolean hasMultipleValues=subsetList.stream().anyMatch(m -> m.get(\"d\") instanceof List && (((List)m.get(\"d\")).size() > 1));\n    final Set<String> uniqueValues=new HashSet<>();\n    for (    Map<String,Object> m : subsetList) {\n      final List<String> dValues=normalize(m.get(\"d\"),hasMultipleValues);\n      uniqueValues.addAll(dValues);\n      if (nullFlavors.contains(m)) {\n        uniqueValues.add(null);\n      }\n    }\n    try (final DictionaryEncodedColumn<String> dictionaryColumn=(DictionaryEncodedColumn<String>)columnHolder.getColumn()){\n      Assert.assertEquals(subsetList.toString(),uniqueValues.stream().sorted(Comparators.naturalNullsFirst()).collect(Collectors.toList()),IntStream.range(0,dictionaryColumn.getCardinality()).mapToObj(dictionaryColumn::lookupName).collect(Collectors.toList()));\n      Assert.assertEquals(subsetList.toString(),hasMultipleValues,dictionaryColumn.hasMultipleValues());\n      Assert.assertEquals(subsetList.toString(),uniqueValues.size(),dictionaryColumn.getCardinality());\n      Assert.assertEquals(subsetList.toString(),ImmutableMultiset.copyOf(subsetList.stream().map(m -> normalize(m.get(\"d\"),hasMultipleValues)).distinct().collect(Collectors.toList())),ImmutableMultiset.copyOf(IntStream.range(0,index.getNumRows()).mapToObj(rowNumber -> getRow(dictionaryColumn,rowNumber)).distinct().collect(Collectors.toList())));\n      final BitmapIndex bitmapIndex=columnHolder.getBitmapIndex();\n      final List<Integer> expectedNullRows=new ArrayList<>();\n      for (int i=0; i < index.getNumRows(); i++) {\n        final List<String> row=getRow(dictionaryColumn,i);\n        if (row.isEmpty() || row.stream().anyMatch(NullHandling::isNullOrEquivalent)) {\n          expectedNullRows.add(i);\n        }\n      }\n      Assert.assertEquals(subsetList.toString(),expectedNullRows.size() > 0,bitmapIndex.hasNulls());\n      if (expectedNullRows.size() > 0) {\n        Assert.assertEquals(subsetList.toString(),0,bitmapIndex.getIndex(null));\n        final ImmutableBitmap nullBitmap=bitmapIndex.getBitmap(bitmapIndex.getIndex(null));\n        final List<Integer> actualNullRows=new ArrayList<>();\n        final IntIterator iterator=nullBitmap.iterator();\n        while (iterator.hasNext()) {\n          actualNullRows.add(iterator.next());\n        }\n        Assert.assertEquals(subsetList.toString(),expectedNullRows,actualNullRows);\n      }\n else {\n        Assert.assertEquals(-1,bitmapIndex.getIndex(null));\n      }\n    }\n   }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 433,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4457,
        "startLineNumber" : 124,
        "startColumnNumber" : 6,
        "endLineNumber" : 212,
        "endColumnNumber" : 7
      },
      "nodeContext" : "try (QueryableIndex index=indexIO.loadIndex(indexMerger.persist(toPersist,tempDir,indexSpec,null))){\n  final ColumnHolder columnHolder=index.getColumnHolder(\"d\");\n  if (nullFlavors.containsAll(subsetList)) {\n    Assert.assertNull(subsetList.toString(),columnHolder);\n  }\n else {\n    Assert.assertNotNull(subsetList.toString(),columnHolder);\n    final boolean hasMultipleValues=subsetList.stream().anyMatch(m -> m.get(\"d\") instanceof List && (((List)m.get(\"d\")).size() > 1));\n    final Set<String> uniqueValues=new HashSet<>();\n    for (    Map<String,Object> m : subsetList) {\n      final List<String> dValues=normalize(m.get(\"d\"),hasMultipleValues);\n      uniqueValues.addAll(dValues);\n      if (nullFlavors.contains(m)) {\n        uniqueValues.add(null);\n      }\n    }\n    try (final DictionaryEncodedColumn<String> dictionaryColumn=(DictionaryEncodedColumn<String>)columnHolder.getColumn()){\n      Assert.assertEquals(subsetList.toString(),uniqueValues.stream().sorted(Comparators.naturalNullsFirst()).collect(Collectors.toList()),IntStream.range(0,dictionaryColumn.getCardinality()).mapToObj(dictionaryColumn::lookupName).collect(Collectors.toList()));\n      Assert.assertEquals(subsetList.toString(),hasMultipleValues,dictionaryColumn.hasMultipleValues());\n      Assert.assertEquals(subsetList.toString(),uniqueValues.size(),dictionaryColumn.getCardinality());\n      Assert.assertEquals(subsetList.toString(),ImmutableMultiset.copyOf(subsetList.stream().map(m -> normalize(m.get(\"d\"),hasMultipleValues)).distinct().collect(Collectors.toList())),ImmutableMultiset.copyOf(IntStream.range(0,index.getNumRows()).mapToObj(rowNumber -> getRow(dictionaryColumn,rowNumber)).distinct().collect(Collectors.toList())));\n      final BitmapIndex bitmapIndex=columnHolder.getBitmapIndex();\n      final List<Integer> expectedNullRows=new ArrayList<>();\n      for (int i=0; i < index.getNumRows(); i++) {\n        final List<String> row=getRow(dictionaryColumn,i);\n        if (row.isEmpty() || row.stream().anyMatch(NullHandling::isNullOrEquivalent)) {\n          expectedNullRows.add(i);\n        }\n      }\n      Assert.assertEquals(subsetList.toString(),expectedNullRows.size() > 0,bitmapIndex.hasNulls());\n      if (expectedNullRows.size() > 0) {\n        Assert.assertEquals(subsetList.toString(),0,bitmapIndex.getIndex(null));\n        final ImmutableBitmap nullBitmap=bitmapIndex.getBitmap(bitmapIndex.getIndex(null));\n        final List<Integer> actualNullRows=new ArrayList<>();\n        final IntIterator iterator=nullBitmap.iterator();\n        while (iterator.hasNext()) {\n          actualNullRows.add(iterator.next());\n        }\n        Assert.assertEquals(subsetList.toString(),expectedNullRows,actualNullRows);\n      }\n else {\n        Assert.assertEquals(-1,bitmapIndex.getIndex(null));\n      }\n    }\n   }\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 449,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 4890,
        "startLineNumber" : 111,
        "startColumnNumber" : 69,
        "endLineNumber" : 213,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (subset.isEmpty()) {\n    continue;\n  }\n  final List<Map<String,Object>> subsetList=new ArrayList<>(subset);\n  IncrementalIndex toPersist=IncrementalIndexTest.createIndex(new AggregatorFactory[]{});\n  for (  Map<String,Object> m : subsetList) {\n    toPersist.add(new MapBasedInputRow(0L,ImmutableList.of(\"d\"),m));\n  }\n  final File tempDir=temporaryFolder.newFolder();\n  try (QueryableIndex index=indexIO.loadIndex(indexMerger.persist(toPersist,tempDir,indexSpec,null))){\n    final ColumnHolder columnHolder=index.getColumnHolder(\"d\");\n    if (nullFlavors.containsAll(subsetList)) {\n      Assert.assertNull(subsetList.toString(),columnHolder);\n    }\n else {\n      Assert.assertNotNull(subsetList.toString(),columnHolder);\n      final boolean hasMultipleValues=subsetList.stream().anyMatch(m -> m.get(\"d\") instanceof List && (((List)m.get(\"d\")).size() > 1));\n      final Set<String> uniqueValues=new HashSet<>();\n      for (      Map<String,Object> m : subsetList) {\n        final List<String> dValues=normalize(m.get(\"d\"),hasMultipleValues);\n        uniqueValues.addAll(dValues);\n        if (nullFlavors.contains(m)) {\n          uniqueValues.add(null);\n        }\n      }\n      try (final DictionaryEncodedColumn<String> dictionaryColumn=(DictionaryEncodedColumn<String>)columnHolder.getColumn()){\n        Assert.assertEquals(subsetList.toString(),uniqueValues.stream().sorted(Comparators.naturalNullsFirst()).collect(Collectors.toList()),IntStream.range(0,dictionaryColumn.getCardinality()).mapToObj(dictionaryColumn::lookupName).collect(Collectors.toList()));\n        Assert.assertEquals(subsetList.toString(),hasMultipleValues,dictionaryColumn.hasMultipleValues());\n        Assert.assertEquals(subsetList.toString(),uniqueValues.size(),dictionaryColumn.getCardinality());\n        Assert.assertEquals(subsetList.toString(),ImmutableMultiset.copyOf(subsetList.stream().map(m -> normalize(m.get(\"d\"),hasMultipleValues)).distinct().collect(Collectors.toList())),ImmutableMultiset.copyOf(IntStream.range(0,index.getNumRows()).mapToObj(rowNumber -> getRow(dictionaryColumn,rowNumber)).distinct().collect(Collectors.toList())));\n        final BitmapIndex bitmapIndex=columnHolder.getBitmapIndex();\n        final List<Integer> expectedNullRows=new ArrayList<>();\n        for (int i=0; i < index.getNumRows(); i++) {\n          final List<String> row=getRow(dictionaryColumn,i);\n          if (row.isEmpty() || row.stream().anyMatch(NullHandling::isNullOrEquivalent)) {\n            expectedNullRows.add(i);\n          }\n        }\n        Assert.assertEquals(subsetList.toString(),expectedNullRows.size() > 0,bitmapIndex.hasNulls());\n        if (expectedNullRows.size() > 0) {\n          Assert.assertEquals(subsetList.toString(),0,bitmapIndex.getIndex(null));\n          final ImmutableBitmap nullBitmap=bitmapIndex.getBitmap(bitmapIndex.getIndex(null));\n          final List<Integer> actualNullRows=new ArrayList<>();\n          final IntIterator iterator=nullBitmap.iterator();\n          while (iterator.hasNext()) {\n            actualNullRows.add(iterator.next());\n          }\n          Assert.assertEquals(subsetList.toString(),expectedNullRows,actualNullRows);\n        }\n else {\n          Assert.assertEquals(-1,bitmapIndex.getIndex(null));\n        }\n      }\n     }\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 523,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4955,
        "startLineNumber" : 111,
        "startColumnNumber" : 4,
        "endLineNumber" : 213,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (Set<Map<String,Object>> subset : Sets.powerSet(allValues)) {\n  if (subset.isEmpty()) {\n    continue;\n  }\n  final List<Map<String,Object>> subsetList=new ArrayList<>(subset);\n  IncrementalIndex toPersist=IncrementalIndexTest.createIndex(new AggregatorFactory[]{});\n  for (  Map<String,Object> m : subsetList) {\n    toPersist.add(new MapBasedInputRow(0L,ImmutableList.of(\"d\"),m));\n  }\n  final File tempDir=temporaryFolder.newFolder();\n  try (QueryableIndex index=indexIO.loadIndex(indexMerger.persist(toPersist,tempDir,indexSpec,null))){\n    final ColumnHolder columnHolder=index.getColumnHolder(\"d\");\n    if (nullFlavors.containsAll(subsetList)) {\n      Assert.assertNull(subsetList.toString(),columnHolder);\n    }\n else {\n      Assert.assertNotNull(subsetList.toString(),columnHolder);\n      final boolean hasMultipleValues=subsetList.stream().anyMatch(m -> m.get(\"d\") instanceof List && (((List)m.get(\"d\")).size() > 1));\n      final Set<String> uniqueValues=new HashSet<>();\n      for (      Map<String,Object> m : subsetList) {\n        final List<String> dValues=normalize(m.get(\"d\"),hasMultipleValues);\n        uniqueValues.addAll(dValues);\n        if (nullFlavors.contains(m)) {\n          uniqueValues.add(null);\n        }\n      }\n      try (final DictionaryEncodedColumn<String> dictionaryColumn=(DictionaryEncodedColumn<String>)columnHolder.getColumn()){\n        Assert.assertEquals(subsetList.toString(),uniqueValues.stream().sorted(Comparators.naturalNullsFirst()).collect(Collectors.toList()),IntStream.range(0,dictionaryColumn.getCardinality()).mapToObj(dictionaryColumn::lookupName).collect(Collectors.toList()));\n        Assert.assertEquals(subsetList.toString(),hasMultipleValues,dictionaryColumn.hasMultipleValues());\n        Assert.assertEquals(subsetList.toString(),uniqueValues.size(),dictionaryColumn.getCardinality());\n        Assert.assertEquals(subsetList.toString(),ImmutableMultiset.copyOf(subsetList.stream().map(m -> normalize(m.get(\"d\"),hasMultipleValues)).distinct().collect(Collectors.toList())),ImmutableMultiset.copyOf(IntStream.range(0,index.getNumRows()).mapToObj(rowNumber -> getRow(dictionaryColumn,rowNumber)).distinct().collect(Collectors.toList())));\n        final BitmapIndex bitmapIndex=columnHolder.getBitmapIndex();\n        final List<Integer> expectedNullRows=new ArrayList<>();\n        for (int i=0; i < index.getNumRows(); i++) {\n          final List<String> row=getRow(dictionaryColumn,i);\n          if (row.isEmpty() || row.stream().anyMatch(NullHandling::isNullOrEquivalent)) {\n            expectedNullRows.add(i);\n          }\n        }\n        Assert.assertEquals(subsetList.toString(),expectedNullRows.size() > 0,bitmapIndex.hasNulls());\n        if (expectedNullRows.size() > 0) {\n          Assert.assertEquals(subsetList.toString(),0,bitmapIndex.getIndex(null));\n          final ImmutableBitmap nullBitmap=bitmapIndex.getBitmap(bitmapIndex.getIndex(null));\n          final List<Integer> actualNullRows=new ArrayList<>();\n          final IntIterator iterator=nullBitmap.iterator();\n          while (iterator.hasNext()) {\n            actualNullRows.add(iterator.next());\n          }\n          Assert.assertEquals(subsetList.toString(),expectedNullRows,actualNullRows);\n        }\n else {\n          Assert.assertEquals(-1,bitmapIndex.getIndex(null));\n        }\n      }\n     }\n  }\n }\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 540,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6180,
        "startLineNumber" : 80,
        "startColumnNumber" : 2,
        "endLineNumber" : 214,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  List<Map<String,Object>> nonNullFlavors=new ArrayList<>();\n  nonNullFlavors.add(ImmutableMap.of(\"d\",\"a\"));\n  nonNullFlavors.add(ImmutableMap.of(\"d\",ImmutableList.of(\"a\",\"b\")));\n  List<Map<String,Object>> nullFlavors=new ArrayList<>();\n  Map<String,Object> mMissing=ImmutableMap.of();\n  Map<String,Object> mEmptyList=ImmutableMap.of(\"d\",Collections.emptyList());\n  Map<String,Object> mNull=new HashMap<>();\n  mNull.put(\"d\",null);\n  Map<String,Object> mEmptyString=ImmutableMap.of(\"d\",\"\");\n  Map<String,Object> mListOfNull=ImmutableMap.of(\"d\",Collections.singletonList(null));\n  Map<String,Object> mListOfEmptyString=ImmutableMap.of(\"d\",Collections.singletonList(\"\"));\n  nullFlavors.add(mMissing);\n  nullFlavors.add(mEmptyList);\n  nullFlavors.add(mNull);\n  nullFlavors.add(mListOfNull);\n  if (NullHandling.replaceWithDefault()) {\n    nullFlavors.add(mEmptyString);\n    nullFlavors.add(mListOfEmptyString);\n  }\n else {\n    nonNullFlavors.add(mEmptyString);\n    nonNullFlavors.add(mListOfEmptyString);\n  }\n  Set<Map<String,Object>> allValues=new HashSet<>();\n  allValues.addAll(nonNullFlavors);\n  allValues.addAll(nullFlavors);\n  for (  Set<Map<String,Object>> subset : Sets.powerSet(allValues)) {\n    if (subset.isEmpty()) {\n      continue;\n    }\n    final List<Map<String,Object>> subsetList=new ArrayList<>(subset);\n    IncrementalIndex toPersist=IncrementalIndexTest.createIndex(new AggregatorFactory[]{});\n    for (    Map<String,Object> m : subsetList) {\n      toPersist.add(new MapBasedInputRow(0L,ImmutableList.of(\"d\"),m));\n    }\n    final File tempDir=temporaryFolder.newFolder();\n    try (QueryableIndex index=indexIO.loadIndex(indexMerger.persist(toPersist,tempDir,indexSpec,null))){\n      final ColumnHolder columnHolder=index.getColumnHolder(\"d\");\n      if (nullFlavors.containsAll(subsetList)) {\n        Assert.assertNull(subsetList.toString(),columnHolder);\n      }\n else {\n        Assert.assertNotNull(subsetList.toString(),columnHolder);\n        final boolean hasMultipleValues=subsetList.stream().anyMatch(m -> m.get(\"d\") instanceof List && (((List)m.get(\"d\")).size() > 1));\n        final Set<String> uniqueValues=new HashSet<>();\n        for (        Map<String,Object> m : subsetList) {\n          final List<String> dValues=normalize(m.get(\"d\"),hasMultipleValues);\n          uniqueValues.addAll(dValues);\n          if (nullFlavors.contains(m)) {\n            uniqueValues.add(null);\n          }\n        }\n        try (final DictionaryEncodedColumn<String> dictionaryColumn=(DictionaryEncodedColumn<String>)columnHolder.getColumn()){\n          Assert.assertEquals(subsetList.toString(),uniqueValues.stream().sorted(Comparators.naturalNullsFirst()).collect(Collectors.toList()),IntStream.range(0,dictionaryColumn.getCardinality()).mapToObj(dictionaryColumn::lookupName).collect(Collectors.toList()));\n          Assert.assertEquals(subsetList.toString(),hasMultipleValues,dictionaryColumn.hasMultipleValues());\n          Assert.assertEquals(subsetList.toString(),uniqueValues.size(),dictionaryColumn.getCardinality());\n          Assert.assertEquals(subsetList.toString(),ImmutableMultiset.copyOf(subsetList.stream().map(m -> normalize(m.get(\"d\"),hasMultipleValues)).distinct().collect(Collectors.toList())),ImmutableMultiset.copyOf(IntStream.range(0,index.getNumRows()).mapToObj(rowNumber -> getRow(dictionaryColumn,rowNumber)).distinct().collect(Collectors.toList())));\n          final BitmapIndex bitmapIndex=columnHolder.getBitmapIndex();\n          final List<Integer> expectedNullRows=new ArrayList<>();\n          for (int i=0; i < index.getNumRows(); i++) {\n            final List<String> row=getRow(dictionaryColumn,i);\n            if (row.isEmpty() || row.stream().anyMatch(NullHandling::isNullOrEquivalent)) {\n              expectedNullRows.add(i);\n            }\n          }\n          Assert.assertEquals(subsetList.toString(),expectedNullRows.size() > 0,bitmapIndex.hasNulls());\n          if (expectedNullRows.size() > 0) {\n            Assert.assertEquals(subsetList.toString(),0,bitmapIndex.getIndex(null));\n            final ImmutableBitmap nullBitmap=bitmapIndex.getBitmap(bitmapIndex.getIndex(null));\n            final List<Integer> actualNullRows=new ArrayList<>();\n            final IntIterator iterator=nullBitmap.iterator();\n            while (iterator.hasNext()) {\n              actualNullRows.add(iterator.next());\n            }\n            Assert.assertEquals(subsetList.toString(),expectedNullRows,actualNullRows);\n          }\n else {\n            Assert.assertEquals(-1,bitmapIndex.getIndex(null));\n          }\n        }\n       }\n    }\n   }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 771,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6250,
        "startLineNumber" : 78,
        "startColumnNumber" : 2,
        "endLineNumber" : 214,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testStringColumnNullHandling() throws Exception {\n  List<Map<String,Object>> nonNullFlavors=new ArrayList<>();\n  nonNullFlavors.add(ImmutableMap.of(\"d\",\"a\"));\n  nonNullFlavors.add(ImmutableMap.of(\"d\",ImmutableList.of(\"a\",\"b\")));\n  List<Map<String,Object>> nullFlavors=new ArrayList<>();\n  Map<String,Object> mMissing=ImmutableMap.of();\n  Map<String,Object> mEmptyList=ImmutableMap.of(\"d\",Collections.emptyList());\n  Map<String,Object> mNull=new HashMap<>();\n  mNull.put(\"d\",null);\n  Map<String,Object> mEmptyString=ImmutableMap.of(\"d\",\"\");\n  Map<String,Object> mListOfNull=ImmutableMap.of(\"d\",Collections.singletonList(null));\n  Map<String,Object> mListOfEmptyString=ImmutableMap.of(\"d\",Collections.singletonList(\"\"));\n  nullFlavors.add(mMissing);\n  nullFlavors.add(mEmptyList);\n  nullFlavors.add(mNull);\n  nullFlavors.add(mListOfNull);\n  if (NullHandling.replaceWithDefault()) {\n    nullFlavors.add(mEmptyString);\n    nullFlavors.add(mListOfEmptyString);\n  }\n else {\n    nonNullFlavors.add(mEmptyString);\n    nonNullFlavors.add(mListOfEmptyString);\n  }\n  Set<Map<String,Object>> allValues=new HashSet<>();\n  allValues.addAll(nonNullFlavors);\n  allValues.addAll(nullFlavors);\n  for (  Set<Map<String,Object>> subset : Sets.powerSet(allValues)) {\n    if (subset.isEmpty()) {\n      continue;\n    }\n    final List<Map<String,Object>> subsetList=new ArrayList<>(subset);\n    IncrementalIndex toPersist=IncrementalIndexTest.createIndex(new AggregatorFactory[]{});\n    for (    Map<String,Object> m : subsetList) {\n      toPersist.add(new MapBasedInputRow(0L,ImmutableList.of(\"d\"),m));\n    }\n    final File tempDir=temporaryFolder.newFolder();\n    try (QueryableIndex index=indexIO.loadIndex(indexMerger.persist(toPersist,tempDir,indexSpec,null))){\n      final ColumnHolder columnHolder=index.getColumnHolder(\"d\");\n      if (nullFlavors.containsAll(subsetList)) {\n        Assert.assertNull(subsetList.toString(),columnHolder);\n      }\n else {\n        Assert.assertNotNull(subsetList.toString(),columnHolder);\n        final boolean hasMultipleValues=subsetList.stream().anyMatch(m -> m.get(\"d\") instanceof List && (((List)m.get(\"d\")).size() > 1));\n        final Set<String> uniqueValues=new HashSet<>();\n        for (        Map<String,Object> m : subsetList) {\n          final List<String> dValues=normalize(m.get(\"d\"),hasMultipleValues);\n          uniqueValues.addAll(dValues);\n          if (nullFlavors.contains(m)) {\n            uniqueValues.add(null);\n          }\n        }\n        try (final DictionaryEncodedColumn<String> dictionaryColumn=(DictionaryEncodedColumn<String>)columnHolder.getColumn()){\n          Assert.assertEquals(subsetList.toString(),uniqueValues.stream().sorted(Comparators.naturalNullsFirst()).collect(Collectors.toList()),IntStream.range(0,dictionaryColumn.getCardinality()).mapToObj(dictionaryColumn::lookupName).collect(Collectors.toList()));\n          Assert.assertEquals(subsetList.toString(),hasMultipleValues,dictionaryColumn.hasMultipleValues());\n          Assert.assertEquals(subsetList.toString(),uniqueValues.size(),dictionaryColumn.getCardinality());\n          Assert.assertEquals(subsetList.toString(),ImmutableMultiset.copyOf(subsetList.stream().map(m -> normalize(m.get(\"d\"),hasMultipleValues)).distinct().collect(Collectors.toList())),ImmutableMultiset.copyOf(IntStream.range(0,index.getNumRows()).mapToObj(rowNumber -> getRow(dictionaryColumn,rowNumber)).distinct().collect(Collectors.toList())));\n          final BitmapIndex bitmapIndex=columnHolder.getBitmapIndex();\n          final List<Integer> expectedNullRows=new ArrayList<>();\n          for (int i=0; i < index.getNumRows(); i++) {\n            final List<String> row=getRow(dictionaryColumn,i);\n            if (row.isEmpty() || row.stream().anyMatch(NullHandling::isNullOrEquivalent)) {\n              expectedNullRows.add(i);\n            }\n          }\n          Assert.assertEquals(subsetList.toString(),expectedNullRows.size() > 0,bitmapIndex.hasNulls());\n          if (expectedNullRows.size() > 0) {\n            Assert.assertEquals(subsetList.toString(),0,bitmapIndex.getIndex(null));\n            final ImmutableBitmap nullBitmap=bitmapIndex.getBitmap(bitmapIndex.getIndex(null));\n            final List<Integer> actualNullRows=new ArrayList<>();\n            final IntIterator iterator=nullBitmap.iterator();\n            while (iterator.hasNext()) {\n              actualNullRows.add(iterator.next());\n            }\n            Assert.assertEquals(subsetList.toString(),expectedNullRows,actualNullRows);\n          }\n else {\n            Assert.assertEquals(-1,bitmapIndex.getIndex(null));\n          }\n        }\n       }\n    }\n   }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 779,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 318,
        "startLineNumber" : 166,
        "startColumnNumber" : 16,
        "endLineNumber" : 171,
        "endColumnNumber" : 17
      },
      "nodeContext" : "ImmutableMultiset.copyOf(subsetList.stream().map(m -> normalize(m.get(\"d\"),hasMultipleValues)).distinct().collect(Collectors.toList()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 25,
      "astHeight" : 8
    },
    "tokenLength" : 14,
    "type" : "java.util.List<java.util.List<java.lang.String>>"
  } ],
  "positionList" : [ {
    "charLength" : 254,
    "startLineNumber" : 167,
    "startColumnNumber" : 20,
    "endLineNumber" : 170,
    "endColumnNumber" : 59
  } ],
  "layoutRelationDataList" : [ ]
}