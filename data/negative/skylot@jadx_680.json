{
  "id" : 680,
  "expression" : "reg.duplicate(regNum,newSsaVar)",
  "projectName" : "skylot@jadx",
  "commitID" : "cbdc2496fc4b11655005472ad21505113b9071e2",
  "filePath" : "jadx-core/src/main/java/jadx/core/dex/visitors/typeinference/TypeInferenceVisitor.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "reg.duplicate(regNum,newSsaVar)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 32,
      "startLineNumber" : 342,
      "startColumnNumber" : 28,
      "endLineNumber" : 342,
      "endColumnNumber" : 60
    },
    "astNodeNumber" : 5,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 342,
        "startColumnNumber" : 4,
        "endLineNumber" : 342,
        "endColumnNumber" : 61
      },
      "nodeContext" : "phiInsn.replaceArg(reg,reg.duplicate(regNum,newSsaVar))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 342,
        "startColumnNumber" : 4,
        "endLineNumber" : 342,
        "endColumnNumber" : 62
      },
      "nodeContext" : "phiInsn.replaceArg(reg,reg.duplicate(regNum,newSsaVar));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1118,
        "startLineNumber" : 321,
        "startColumnNumber" : 29,
        "endLineNumber" : 353,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  BlockNode blockNode=entry.getValue();\n  InsnNode lastInsn=BlockUtils.getLastInsn(blockNode);\n  if (lastInsn != null && BlockSplitter.SEPARATE_INSNS.contains(lastInsn.getType())) {\n    if (Consts.DEBUG) {\n      LOG.warn(\"Can't insert move for PHI in block with separate insn: {}\",lastInsn);\n    }\n    return false;\n  }\n  int regNum=reg.getRegNum();\n  RegisterArg resultArg=reg.duplicate(regNum,null);\n  SSAVar newSsaVar=mth.makeNewSVar(regNum,resultArg);\n  RegisterArg arg=reg.duplicate(regNum,var);\n  InsnNode moveInsn=new InsnNode(InsnType.MOVE,1);\n  moveInsn.setResult(resultArg);\n  moveInsn.addArg(arg);\n  moveInsn.add(AFlag.SYNTHETIC);\n  blockNode.getInstructions().add(moveInsn);\n  phiInsn.replaceArg(reg,reg.duplicate(regNum,newSsaVar));\n  attachBounds(var);\n  for (  InsnArg phiArg : phiInsn.getArguments()) {\n    attachBounds(((RegisterArg)phiArg).getSVar());\n  }\n  for (  InsnArg phiArg : phiInsn.getArguments()) {\n    mergePhiBounds(((RegisterArg)phiArg).getSVar());\n  }\n  InitCodeVariables.initCodeVar(newSsaVar);\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 177,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1144,
        "startLineNumber" : 321,
        "startColumnNumber" : 3,
        "endLineNumber" : 353,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (reg.getSVar() == var) {\n  BlockNode blockNode=entry.getValue();\n  InsnNode lastInsn=BlockUtils.getLastInsn(blockNode);\n  if (lastInsn != null && BlockSplitter.SEPARATE_INSNS.contains(lastInsn.getType())) {\n    if (Consts.DEBUG) {\n      LOG.warn(\"Can't insert move for PHI in block with separate insn: {}\",lastInsn);\n    }\n    return false;\n  }\n  int regNum=reg.getRegNum();\n  RegisterArg resultArg=reg.duplicate(regNum,null);\n  SSAVar newSsaVar=mth.makeNewSVar(regNum,resultArg);\n  RegisterArg arg=reg.duplicate(regNum,var);\n  InsnNode moveInsn=new InsnNode(InsnType.MOVE,1);\n  moveInsn.setResult(resultArg);\n  moveInsn.addArg(arg);\n  moveInsn.add(AFlag.SYNTHETIC);\n  blockNode.getInstructions().add(moveInsn);\n  phiInsn.replaceArg(reg,reg.duplicate(regNum,newSsaVar));\n  attachBounds(var);\n  for (  InsnArg phiArg : phiInsn.getArguments()) {\n    attachBounds(((RegisterArg)phiArg).getSVar());\n  }\n  for (  InsnArg phiArg : phiInsn.getArguments()) {\n    mergePhiBounds(((RegisterArg)phiArg).getSVar());\n  }\n  InitCodeVariables.initCodeVar(newSsaVar);\n  return true;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 183,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1190,
        "startLineNumber" : 319,
        "startColumnNumber" : 85,
        "endLineNumber" : 354,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  RegisterArg reg=entry.getKey();\n  if (reg.getSVar() == var) {\n    BlockNode blockNode=entry.getValue();\n    InsnNode lastInsn=BlockUtils.getLastInsn(blockNode);\n    if (lastInsn != null && BlockSplitter.SEPARATE_INSNS.contains(lastInsn.getType())) {\n      if (Consts.DEBUG) {\n        LOG.warn(\"Can't insert move for PHI in block with separate insn: {}\",lastInsn);\n      }\n      return false;\n    }\n    int regNum=reg.getRegNum();\n    RegisterArg resultArg=reg.duplicate(regNum,null);\n    SSAVar newSsaVar=mth.makeNewSVar(regNum,resultArg);\n    RegisterArg arg=reg.duplicate(regNum,var);\n    InsnNode moveInsn=new InsnNode(InsnType.MOVE,1);\n    moveInsn.setResult(resultArg);\n    moveInsn.addArg(arg);\n    moveInsn.add(AFlag.SYNTHETIC);\n    blockNode.getInstructions().add(moveInsn);\n    phiInsn.replaceArg(reg,reg.duplicate(regNum,newSsaVar));\n    attachBounds(var);\n    for (    InsnArg phiArg : phiInsn.getArguments()) {\n      attachBounds(((RegisterArg)phiArg).getSVar());\n    }\n    for (    InsnArg phiArg : phiInsn.getArguments()) {\n      mergePhiBounds(((RegisterArg)phiArg).getSVar());\n    }\n    InitCodeVariables.initCodeVar(newSsaVar);\n    return true;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 192,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1273,
        "startLineNumber" : 319,
        "startColumnNumber" : 2,
        "endLineNumber" : 354,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (Map.Entry<RegisterArg,BlockNode> entry : phiInsn.getBlockBinds().entrySet()) {\n  RegisterArg reg=entry.getKey();\n  if (reg.getSVar() == var) {\n    BlockNode blockNode=entry.getValue();\n    InsnNode lastInsn=BlockUtils.getLastInsn(blockNode);\n    if (lastInsn != null && BlockSplitter.SEPARATE_INSNS.contains(lastInsn.getType())) {\n      if (Consts.DEBUG) {\n        LOG.warn(\"Can't insert move for PHI in block with separate insn: {}\",lastInsn);\n      }\n      return false;\n    }\n    int regNum=reg.getRegNum();\n    RegisterArg resultArg=reg.duplicate(regNum,null);\n    SSAVar newSsaVar=mth.makeNewSVar(regNum,resultArg);\n    RegisterArg arg=reg.duplicate(regNum,var);\n    InsnNode moveInsn=new InsnNode(InsnType.MOVE,1);\n    moveInsn.setResult(resultArg);\n    moveInsn.addArg(arg);\n    moveInsn.add(AFlag.SYNTHETIC);\n    blockNode.getInstructions().add(moveInsn);\n    phiInsn.replaceArg(reg,reg.duplicate(regNum,newSsaVar));\n    attachBounds(var);\n    for (    InsnArg phiArg : phiInsn.getArguments()) {\n      attachBounds(((RegisterArg)phiArg).getSVar());\n    }\n    for (    InsnArg phiArg : phiInsn.getArguments()) {\n      mergePhiBounds(((RegisterArg)phiArg).getSVar());\n    }\n    InitCodeVariables.initCodeVar(newSsaVar);\n    return true;\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 209,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1641,
        "startLineNumber" : 305,
        "startColumnNumber" : 69,
        "endLineNumber" : 356,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (var.getTypeInfo().getType().isTypeKnown()) {\n    return false;\n  }\n  PhiInsn phiInsn=var.getUsedInPhi();\n  if (phiInsn == null) {\n    return false;\n  }\n  if (var.getUseCount() == 1) {\n    InsnNode assignInsn=var.getAssign().getAssignInsn();\n    if (assignInsn != null && assignInsn.getType() == InsnType.MOVE) {\n      return false;\n    }\n  }\n  for (  Map.Entry<RegisterArg,BlockNode> entry : phiInsn.getBlockBinds().entrySet()) {\n    RegisterArg reg=entry.getKey();\n    if (reg.getSVar() == var) {\n      BlockNode blockNode=entry.getValue();\n      InsnNode lastInsn=BlockUtils.getLastInsn(blockNode);\n      if (lastInsn != null && BlockSplitter.SEPARATE_INSNS.contains(lastInsn.getType())) {\n        if (Consts.DEBUG) {\n          LOG.warn(\"Can't insert move for PHI in block with separate insn: {}\",lastInsn);\n        }\n        return false;\n      }\n      int regNum=reg.getRegNum();\n      RegisterArg resultArg=reg.duplicate(regNum,null);\n      SSAVar newSsaVar=mth.makeNewSVar(regNum,resultArg);\n      RegisterArg arg=reg.duplicate(regNum,var);\n      InsnNode moveInsn=new InsnNode(InsnType.MOVE,1);\n      moveInsn.setResult(resultArg);\n      moveInsn.addArg(arg);\n      moveInsn.add(AFlag.SYNTHETIC);\n      blockNode.getInstructions().add(moveInsn);\n      phiInsn.replaceArg(reg,reg.duplicate(regNum,newSsaVar));\n      attachBounds(var);\n      for (      InsnArg phiArg : phiInsn.getArguments()) {\n        attachBounds(((RegisterArg)phiArg).getSVar());\n      }\n      for (      InsnArg phiArg : phiInsn.getArguments()) {\n        mergePhiBounds(((RegisterArg)phiArg).getSVar());\n      }\n      InitCodeVariables.initCodeVar(newSsaVar);\n      return true;\n    }\n  }\n  return false;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 270,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1861,
        "startLineNumber" : 301,
        "startColumnNumber" : 1,
        "endLineNumber" : 356,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Add MOVE instruction before PHI in bound blocks to make 'soft' type link. This allows to use different types in blocks merged by PHI.\n */\nprivate boolean tryInsertAdditionalInsn(MethodNode mth,SSAVar var){\n  if (var.getTypeInfo().getType().isTypeKnown()) {\n    return false;\n  }\n  PhiInsn phiInsn=var.getUsedInPhi();\n  if (phiInsn == null) {\n    return false;\n  }\n  if (var.getUseCount() == 1) {\n    InsnNode assignInsn=var.getAssign().getAssignInsn();\n    if (assignInsn != null && assignInsn.getType() == InsnType.MOVE) {\n      return false;\n    }\n  }\n  for (  Map.Entry<RegisterArg,BlockNode> entry : phiInsn.getBlockBinds().entrySet()) {\n    RegisterArg reg=entry.getKey();\n    if (reg.getSVar() == var) {\n      BlockNode blockNode=entry.getValue();\n      InsnNode lastInsn=BlockUtils.getLastInsn(blockNode);\n      if (lastInsn != null && BlockSplitter.SEPARATE_INSNS.contains(lastInsn.getType())) {\n        if (Consts.DEBUG) {\n          LOG.warn(\"Can't insert move for PHI in block with separate insn: {}\",lastInsn);\n        }\n        return false;\n      }\n      int regNum=reg.getRegNum();\n      RegisterArg resultArg=reg.duplicate(regNum,null);\n      SSAVar newSsaVar=mth.makeNewSVar(regNum,resultArg);\n      RegisterArg arg=reg.duplicate(regNum,var);\n      InsnNode moveInsn=new InsnNode(InsnType.MOVE,1);\n      moveInsn.setResult(resultArg);\n      moveInsn.addArg(arg);\n      moveInsn.add(AFlag.SYNTHETIC);\n      blockNode.getInstructions().add(moveInsn);\n      phiInsn.replaceArg(reg,reg.duplicate(regNum,newSsaVar));\n      attachBounds(var);\n      for (      InsnArg phiArg : phiInsn.getArguments()) {\n        attachBounds(((RegisterArg)phiArg).getSVar());\n      }\n      for (      InsnArg phiArg : phiInsn.getArguments()) {\n        mergePhiBounds(((RegisterArg)phiArg).getSVar());\n      }\n      InitCodeVariables.initCodeVar(newSsaVar);\n      return true;\n    }\n  }\n  return false;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 283,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 342,
        "startColumnNumber" : 4,
        "endLineNumber" : 342,
        "endColumnNumber" : 62
      },
      "nodeContext" : "phiInsn.replaceArg(reg,reg.duplicate(regNum,newSsaVar));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 4,
    "type" : "jadx.core.dex.instructions.args.RegisterArg"
  } ],
  "positionList" : [ {
    "charLength" : 32,
    "startLineNumber" : 342,
    "startColumnNumber" : 28,
    "endLineNumber" : 342,
    "endColumnNumber" : 60
  } ],
  "layoutRelationDataList" : [ ]
}