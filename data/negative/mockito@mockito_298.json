{
  "id" : 298,
  "expression" : "\"foo\"",
  "projectName" : "mockito@mockito",
  "commitID" : "3d2e721fafa390dbe13ccfe891816bbc809823d4",
  "filePath" : "subprojects/module-test/src/test/java/org/mockito/moduletest/ModuleHandlingTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"foo\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 154,
      "startColumnNumber" : 46,
      "endLineNumber" : 154,
      "endColumnNumber" : 51
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 154,
        "startColumnNumber" : 12,
        "endLineNumber" : 154,
        "endColumnNumber" : 52
      },
      "nodeContext" : "assertThat(mock.call()).isEqualTo(\"foo\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 154,
        "startColumnNumber" : 12,
        "endLineNumber" : 154,
        "endColumnNumber" : 53
      },
      "nodeContext" : "assertThat(mock.call()).isEqualTo(\"foo\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 848,
        "startLineNumber" : 144,
        "startColumnNumber" : 12,
        "endLineNumber" : 155,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Class<?> mockito=loader.loadClass(Mockito.class.getName());\n  @SuppressWarnings(\"unchecked\") Callable<String> mock=(Callable<String>)mockito.getMethod(\"mock\",Class.class).invoke(null,type);\n  Object stubbing=mockito.getMethod(\"when\",Object.class).invoke(null,mock.call());\n  loader.loadClass(OngoingStubbing.class.getName()).getMethod(\"thenCallRealMethod\").invoke(stubbing);\n  boolean relocated=!Boolean.getBoolean(\"org.mockito.internal.simulateJava11\") && ClassInjector.UsingReflection.isAvailable();\n  String prefix=relocated ? \"sample.MyCallable$MockitoMock$\" : \"org.mockito.codegen.MyCallable$MockitoMock$\";\n  assertThat(mock.getClass().getName()).startsWith(prefix);\n  assertThat(mock.call()).isEqualTo(\"foo\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 121,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 947,
        "startLineNumber" : 144,
        "startColumnNumber" : 8,
        "endLineNumber" : 157,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  Class<?> mockito=loader.loadClass(Mockito.class.getName());\n  @SuppressWarnings(\"unchecked\") Callable<String> mock=(Callable<String>)mockito.getMethod(\"mock\",Class.class).invoke(null,type);\n  Object stubbing=mockito.getMethod(\"when\",Object.class).invoke(null,mock.call());\n  loader.loadClass(OngoingStubbing.class.getName()).getMethod(\"thenCallRealMethod\").invoke(stubbing);\n  boolean relocated=!Boolean.getBoolean(\"org.mockito.internal.simulateJava11\") && ClassInjector.UsingReflection.isAvailable();\n  String prefix=relocated ? \"sample.MyCallable$MockitoMock$\" : \"org.mockito.codegen.MyCallable$MockitoMock$\";\n  assertThat(mock.getClass().getName()).startsWith(prefix);\n  assertThat(mock.call()).isEqualTo(\"foo\");\n}\n  finally {\n  Thread.currentThread().setContextClassLoader(contextLoader);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 130,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1344,
        "startLineNumber" : 135,
        "startColumnNumber" : 69,
        "endLineNumber" : 158,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Path jar=modularJar(true,true,false);\n  ModuleLayer layer=layer(jar,false);\n  ClassLoader loader=layer.findLoader(\"mockito.test\");\n  Class<?> type=loader.loadClass(\"sample.MyCallable\");\n  ClassLoader contextLoader=Thread.currentThread().getContextClassLoader();\n  Thread.currentThread().setContextClassLoader(loader);\n  try {\n    Class<?> mockito=loader.loadClass(Mockito.class.getName());\n    @SuppressWarnings(\"unchecked\") Callable<String> mock=(Callable<String>)mockito.getMethod(\"mock\",Class.class).invoke(null,type);\n    Object stubbing=mockito.getMethod(\"when\",Object.class).invoke(null,mock.call());\n    loader.loadClass(OngoingStubbing.class.getName()).getMethod(\"thenCallRealMethod\").invoke(stubbing);\n    boolean relocated=!Boolean.getBoolean(\"org.mockito.internal.simulateJava11\") && ClassInjector.UsingReflection.isAvailable();\n    String prefix=relocated ? \"sample.MyCallable$MockitoMock$\" : \"org.mockito.codegen.MyCallable$MockitoMock$\";\n    assertThat(mock.getClass().getName()).startsWith(prefix);\n    assertThat(mock.call()).isEqualTo(\"foo\");\n  }\n  finally {\n    Thread.currentThread().setContextClassLoader(contextLoader);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 187,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1420,
        "startLineNumber" : 134,
        "startColumnNumber" : 4,
        "endLineNumber" : 158,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void can_define_class_in_closed_module() throws Exception {\n  Path jar=modularJar(true,true,false);\n  ModuleLayer layer=layer(jar,false);\n  ClassLoader loader=layer.findLoader(\"mockito.test\");\n  Class<?> type=loader.loadClass(\"sample.MyCallable\");\n  ClassLoader contextLoader=Thread.currentThread().getContextClassLoader();\n  Thread.currentThread().setContextClassLoader(loader);\n  try {\n    Class<?> mockito=loader.loadClass(Mockito.class.getName());\n    @SuppressWarnings(\"unchecked\") Callable<String> mock=(Callable<String>)mockito.getMethod(\"mock\",Class.class).invoke(null,type);\n    Object stubbing=mockito.getMethod(\"when\",Object.class).invoke(null,mock.call());\n    loader.loadClass(OngoingStubbing.class.getName()).getMethod(\"thenCallRealMethod\").invoke(stubbing);\n    boolean relocated=!Boolean.getBoolean(\"org.mockito.internal.simulateJava11\") && ClassInjector.UsingReflection.isAvailable();\n    String prefix=relocated ? \"sample.MyCallable$MockitoMock$\" : \"org.mockito.codegen.MyCallable$MockitoMock$\";\n    assertThat(mock.getClass().getName()).startsWith(prefix);\n    assertThat(mock.call()).isEqualTo(\"foo\");\n  }\n  finally {\n    Thread.currentThread().setContextClassLoader(contextLoader);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 195,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 154,
        "startColumnNumber" : 12,
        "endLineNumber" : 154,
        "endColumnNumber" : 53
      },
      "nodeContext" : "assertThat(mock.call()).isEqualTo(\"foo\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 5,
    "startLineNumber" : 154,
    "startColumnNumber" : 46,
    "endLineNumber" : 154,
    "endColumnNumber" : 51
  } ],
  "layoutRelationDataList" : [ ]
}