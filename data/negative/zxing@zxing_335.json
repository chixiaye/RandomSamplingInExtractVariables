{
  "id" : 335,
  "expression" : "i < detectorResult.length",
  "projectName" : "zxing@zxing",
  "commitID" : "303ed2e6a0e8760220d73dd7d6512966a3a10a44",
  "filePath" : "core/src/com/google/zxing/multi/qrcode/QRCodeMultiReader.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "i < detectorResult.length",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 25,
      "startLineNumber" : 52,
      "startColumnNumber" : 20,
      "endLineNumber" : 52,
      "endColumnNumber" : 45
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 826,
        "startLineNumber" : 52,
        "startColumnNumber" : 4,
        "endLineNumber" : 70,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < detectorResult.length; i++) {\n  try {\n    DecoderResult decoderResult=getDecoder().decode(detectorResult[i].getBits());\n    ResultPoint[] points=detectorResult[i].getPoints();\n    Result result=new Result(decoderResult.getText(),decoderResult.getRawBytes(),points,BarcodeFormat.QR_CODE);\n    Vector byteSegments=decoderResult.getByteSegments();\n    if (byteSegments != null) {\n      result.putMetadata(ResultMetadataType.BYTE_SEGMENTS,byteSegments);\n    }\n    String ecLevel=decoderResult.getECLevel();\n    if (ecLevel != null) {\n      result.putMetadata(ResultMetadataType.ERROR_CORRECTION_LEVEL,ecLevel);\n    }\n    results.addElement(result);\n  }\n catch (  ReaderException re) {\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 113,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1248,
        "startLineNumber" : 49,
        "startColumnNumber" : 95,
        "endLineNumber" : 80,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Vector results=new Vector();\n  DetectorResult[] detectorResult=new MultiDetector(image.getBlackMatrix()).detectMulti(hints);\n  for (int i=0; i < detectorResult.length; i++) {\n    try {\n      DecoderResult decoderResult=getDecoder().decode(detectorResult[i].getBits());\n      ResultPoint[] points=detectorResult[i].getPoints();\n      Result result=new Result(decoderResult.getText(),decoderResult.getRawBytes(),points,BarcodeFormat.QR_CODE);\n      Vector byteSegments=decoderResult.getByteSegments();\n      if (byteSegments != null) {\n        result.putMetadata(ResultMetadataType.BYTE_SEGMENTS,byteSegments);\n      }\n      String ecLevel=decoderResult.getECLevel();\n      if (ecLevel != null) {\n        result.putMetadata(ResultMetadataType.ERROR_CORRECTION_LEVEL,ecLevel);\n      }\n      results.addElement(result);\n    }\n catch (    ReaderException re) {\n    }\n  }\n  if (results.isEmpty()) {\n    return EMPTY_RESULT_ARRAY;\n  }\n else {\n    Result[] resultArray=new Result[results.size()];\n    for (int i=0; i < results.size(); i++) {\n      resultArray[i]=(Result)results.elementAt(i);\n    }\n    return resultArray;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 189,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1341,
        "startLineNumber" : 49,
        "startColumnNumber" : 2,
        "endLineNumber" : 80,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public Result[] decodeMultiple(BinaryBitmap image,Hashtable hints) throws NotFoundException {\n  Vector results=new Vector();\n  DetectorResult[] detectorResult=new MultiDetector(image.getBlackMatrix()).detectMulti(hints);\n  for (int i=0; i < detectorResult.length; i++) {\n    try {\n      DecoderResult decoderResult=getDecoder().decode(detectorResult[i].getBits());\n      ResultPoint[] points=detectorResult[i].getPoints();\n      Result result=new Result(decoderResult.getText(),decoderResult.getRawBytes(),points,BarcodeFormat.QR_CODE);\n      Vector byteSegments=decoderResult.getByteSegments();\n      if (byteSegments != null) {\n        result.putMetadata(ResultMetadataType.BYTE_SEGMENTS,byteSegments);\n      }\n      String ecLevel=decoderResult.getECLevel();\n      if (ecLevel != null) {\n        result.putMetadata(ResultMetadataType.ERROR_CORRECTION_LEVEL,ecLevel);\n      }\n      results.addElement(result);\n    }\n catch (    ReaderException re) {\n    }\n  }\n  if (results.isEmpty()) {\n    return EMPTY_RESULT_ARRAY;\n  }\n else {\n    Result[] resultArray=new Result[results.size()];\n    for (int i=0; i < results.size(); i++) {\n      resultArray[i]=(Result)results.elementAt(i);\n    }\n    return resultArray;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 206,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 826,
        "startLineNumber" : 52,
        "startColumnNumber" : 4,
        "endLineNumber" : 70,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < detectorResult.length; i++) {\n  try {\n    DecoderResult decoderResult=getDecoder().decode(detectorResult[i].getBits());\n    ResultPoint[] points=detectorResult[i].getPoints();\n    Result result=new Result(decoderResult.getText(),decoderResult.getRawBytes(),points,BarcodeFormat.QR_CODE);\n    Vector byteSegments=decoderResult.getByteSegments();\n    if (byteSegments != null) {\n      result.putMetadata(ResultMetadataType.BYTE_SEGMENTS,byteSegments);\n    }\n    String ecLevel=decoderResult.getECLevel();\n    if (ecLevel != null) {\n      result.putMetadata(ResultMetadataType.ERROR_CORRECTION_LEVEL,ecLevel);\n    }\n    results.addElement(result);\n  }\n catch (  ReaderException re) {\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 113,
      "astHeight" : 10
    },
    "tokenLength" : 4,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 25,
    "startLineNumber" : 52,
    "startColumnNumber" : 20,
    "endLineNumber" : 52,
    "endColumnNumber" : 45
  } ],
  "layoutRelationDataList" : [ ]
}