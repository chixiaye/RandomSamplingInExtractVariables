{
  "id" : 120,
  "expression" : "secret.matches(requestSecret)",
  "projectName" : "SeleniumHQ@selenium",
  "commitID" : "c146621f39dbec94114835aa1f6af6a0e1fa4cd0",
  "filePath" : "/java/server/src/org/openqa/selenium/grid/security/RequiresSecretFilter.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "secret.matches(requestSecret)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 29,
      "startLineNumber" : 80,
      "startColumnNumber" : 9,
      "endLineNumber" : 80,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 80,
        "startColumnNumber" : 8,
        "endLineNumber" : 80,
        "endColumnNumber" : 38
      },
      "nodeContext" : "!secret.matches(requestSecret)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 129,
        "startLineNumber" : 80,
        "startColumnNumber" : 4,
        "endLineNumber" : 83,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (!secret.matches(requestSecret)) {\n  LOG.warning(\"Unauthorized access attempted to \" + request);\n  return false;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 447,
        "startLineNumber" : 68,
        "startColumnNumber" : 68,
        "endLineNumber" : 86,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  String header=request.getHeader(HEADER_NAME);\n  if (header == null) {\n    if (secret != null) {\n      LOG.warning(\"Unexpectedly received registration secret to \" + request);\n      return false;\n    }\n    return true;\n  }\n  Secret requestSecret=new Secret(header);\n  if (!secret.matches(requestSecret)) {\n    LOG.warning(\"Unauthorized access attempted to \" + request);\n    return false;\n  }\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 58,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 513,
        "startLineNumber" : 68,
        "startColumnNumber" : 2,
        "endLineNumber" : 86,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private boolean isSecretMatch(Secret secret,HttpRequest request){\n  String header=request.getHeader(HEADER_NAME);\n  if (header == null) {\n    if (secret != null) {\n      LOG.warning(\"Unexpectedly received registration secret to \" + request);\n      return false;\n    }\n    return true;\n  }\n  Secret requestSecret=new Secret(header);\n  if (!secret.matches(requestSecret)) {\n    LOG.warning(\"Unauthorized access attempted to \" + request);\n    return false;\n  }\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 70,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 80,
        "startColumnNumber" : 8,
        "endLineNumber" : 80,
        "endColumnNumber" : 38
      },
      "nodeContext" : "!secret.matches(requestSecret)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 29,
    "startLineNumber" : 80,
    "startColumnNumber" : 9,
    "endLineNumber" : 80,
    "endColumnNumber" : 38
  } ],
  "layoutRelationDataList" : [ ]
}