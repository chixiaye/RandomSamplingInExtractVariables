{
  "id" : 399,
  "expression" : "0",
  "projectName" : "alibaba@nacos",
  "commitID" : "4e7346db1d6657ffe07c96bebd2d348229c2812f",
  "filePath" : "/console/src/test/java/com/alibaba/nacos/console/controller/HealthControllerTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "0",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 75,
      "startColumnNumber" : 83,
      "endLineNumber" : 75,
      "endColumnNumber" : 84
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 75,
        "startColumnNumber" : 8,
        "endLineNumber" : 75,
        "endColumnNumber" : 85
      },
      "nodeContext" : "Mockito.when(persistService.configInfoCount(any(String.class))).thenReturn(0)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 75,
        "startColumnNumber" : 8,
        "endLineNumber" : 75,
        "endColumnNumber" : 86
      },
      "nodeContext" : "Mockito.when(persistService.configInfoCount(any(String.class))).thenReturn(0);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2248,
        "startLineNumber" : 72,
        "startColumnNumber" : 49,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String url=\"/v1/console/health/readiness\";\n  Mockito.when(persistService.configInfoCount(any(String.class))).thenReturn(0);\n  Mockito.when(apiCommands.metrics(any(HttpServletRequest.class))).thenReturn(JacksonUtils.createEmptyJsonNode());\n  MockHttpServletRequestBuilder builder=MockMvcRequestBuilders.get(url);\n  Assert.assertEquals(200,mockmvc.perform(builder).andReturn().getResponse().getStatus());\n  Mockito.when(persistService.configInfoCount(any(String.class))).thenThrow(new RuntimeException(\"HealthControllerTest.testReadiness\"));\n  Mockito.when(apiCommands.metrics(any(HttpServletRequest.class))).thenThrow(new RuntimeException(\"HealthControllerTest.testReadiness\"));\n  builder=MockMvcRequestBuilders.get(url);\n  MockHttpServletResponse response=mockmvc.perform(builder).andReturn().getResponse();\n  Assert.assertEquals(500,response.getStatus());\n  Assert.assertEquals(\"Config and Naming are not in readiness\",response.getContentAsString());\n  Mockito.when(persistService.configInfoCount(any(String.class))).thenThrow(new RuntimeException(\"HealthControllerTest.testReadiness\"));\n  Mockito.when(apiCommands.metrics(any(HttpServletRequest.class))).thenReturn(JacksonUtils.createEmptyJsonNode());\n  response=mockmvc.perform(builder).andReturn().getResponse();\n  Assert.assertEquals(500,response.getStatus());\n  Assert.assertEquals(\"Config is not in readiness\",response.getContentAsString());\n  Mockito.when(persistService.configInfoCount(any(String.class))).thenReturn(0);\n  Mockito.when(apiCommands.metrics(any(HttpServletRequest.class))).thenThrow(new RuntimeException(\"HealthControllerTest.testReadiness\"));\n  builder=MockMvcRequestBuilders.get(url);\n  response=mockmvc.perform(builder).andReturn().getResponse();\n  Assert.assertEquals(500,response.getStatus());\n  Assert.assertEquals(\"Naming is not in readiness\",response.getContentAsString());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 264,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2303,
        "startLineNumber" : 71,
        "startColumnNumber" : 4,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testReadiness() throws Exception {\n  String url=\"/v1/console/health/readiness\";\n  Mockito.when(persistService.configInfoCount(any(String.class))).thenReturn(0);\n  Mockito.when(apiCommands.metrics(any(HttpServletRequest.class))).thenReturn(JacksonUtils.createEmptyJsonNode());\n  MockHttpServletRequestBuilder builder=MockMvcRequestBuilders.get(url);\n  Assert.assertEquals(200,mockmvc.perform(builder).andReturn().getResponse().getStatus());\n  Mockito.when(persistService.configInfoCount(any(String.class))).thenThrow(new RuntimeException(\"HealthControllerTest.testReadiness\"));\n  Mockito.when(apiCommands.metrics(any(HttpServletRequest.class))).thenThrow(new RuntimeException(\"HealthControllerTest.testReadiness\"));\n  builder=MockMvcRequestBuilders.get(url);\n  MockHttpServletResponse response=mockmvc.perform(builder).andReturn().getResponse();\n  Assert.assertEquals(500,response.getStatus());\n  Assert.assertEquals(\"Config and Naming are not in readiness\",response.getContentAsString());\n  Mockito.when(persistService.configInfoCount(any(String.class))).thenThrow(new RuntimeException(\"HealthControllerTest.testReadiness\"));\n  Mockito.when(apiCommands.metrics(any(HttpServletRequest.class))).thenReturn(JacksonUtils.createEmptyJsonNode());\n  response=mockmvc.perform(builder).andReturn().getResponse();\n  Assert.assertEquals(500,response.getStatus());\n  Assert.assertEquals(\"Config is not in readiness\",response.getContentAsString());\n  Mockito.when(persistService.configInfoCount(any(String.class))).thenReturn(0);\n  Mockito.when(apiCommands.metrics(any(HttpServletRequest.class))).thenThrow(new RuntimeException(\"HealthControllerTest.testReadiness\"));\n  builder=MockMvcRequestBuilders.get(url);\n  response=mockmvc.perform(builder).andReturn().getResponse();\n  Assert.assertEquals(500,response.getStatus());\n  Assert.assertEquals(\"Naming is not in readiness\",response.getContentAsString());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 272,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 75,
        "startColumnNumber" : 8,
        "endLineNumber" : 75,
        "endColumnNumber" : 86
      },
      "nodeContext" : "Mockito.when(persistService.configInfoCount(any(String.class))).thenReturn(0);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 8
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "0",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 99,
      "startColumnNumber" : 83,
      "endLineNumber" : 99,
      "endColumnNumber" : 84
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 99,
        "startColumnNumber" : 8,
        "endLineNumber" : 99,
        "endColumnNumber" : 85
      },
      "nodeContext" : "Mockito.when(persistService.configInfoCount(any(String.class))).thenReturn(0)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 99,
        "startColumnNumber" : 8,
        "endLineNumber" : 99,
        "endColumnNumber" : 86
      },
      "nodeContext" : "Mockito.when(persistService.configInfoCount(any(String.class))).thenReturn(0);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2248,
        "startLineNumber" : 72,
        "startColumnNumber" : 49,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String url=\"/v1/console/health/readiness\";\n  Mockito.when(persistService.configInfoCount(any(String.class))).thenReturn(0);\n  Mockito.when(apiCommands.metrics(any(HttpServletRequest.class))).thenReturn(JacksonUtils.createEmptyJsonNode());\n  MockHttpServletRequestBuilder builder=MockMvcRequestBuilders.get(url);\n  Assert.assertEquals(200,mockmvc.perform(builder).andReturn().getResponse().getStatus());\n  Mockito.when(persistService.configInfoCount(any(String.class))).thenThrow(new RuntimeException(\"HealthControllerTest.testReadiness\"));\n  Mockito.when(apiCommands.metrics(any(HttpServletRequest.class))).thenThrow(new RuntimeException(\"HealthControllerTest.testReadiness\"));\n  builder=MockMvcRequestBuilders.get(url);\n  MockHttpServletResponse response=mockmvc.perform(builder).andReturn().getResponse();\n  Assert.assertEquals(500,response.getStatus());\n  Assert.assertEquals(\"Config and Naming are not in readiness\",response.getContentAsString());\n  Mockito.when(persistService.configInfoCount(any(String.class))).thenThrow(new RuntimeException(\"HealthControllerTest.testReadiness\"));\n  Mockito.when(apiCommands.metrics(any(HttpServletRequest.class))).thenReturn(JacksonUtils.createEmptyJsonNode());\n  response=mockmvc.perform(builder).andReturn().getResponse();\n  Assert.assertEquals(500,response.getStatus());\n  Assert.assertEquals(\"Config is not in readiness\",response.getContentAsString());\n  Mockito.when(persistService.configInfoCount(any(String.class))).thenReturn(0);\n  Mockito.when(apiCommands.metrics(any(HttpServletRequest.class))).thenThrow(new RuntimeException(\"HealthControllerTest.testReadiness\"));\n  builder=MockMvcRequestBuilders.get(url);\n  response=mockmvc.perform(builder).andReturn().getResponse();\n  Assert.assertEquals(500,response.getStatus());\n  Assert.assertEquals(\"Naming is not in readiness\",response.getContentAsString());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 264,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2303,
        "startLineNumber" : 71,
        "startColumnNumber" : 4,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testReadiness() throws Exception {\n  String url=\"/v1/console/health/readiness\";\n  Mockito.when(persistService.configInfoCount(any(String.class))).thenReturn(0);\n  Mockito.when(apiCommands.metrics(any(HttpServletRequest.class))).thenReturn(JacksonUtils.createEmptyJsonNode());\n  MockHttpServletRequestBuilder builder=MockMvcRequestBuilders.get(url);\n  Assert.assertEquals(200,mockmvc.perform(builder).andReturn().getResponse().getStatus());\n  Mockito.when(persistService.configInfoCount(any(String.class))).thenThrow(new RuntimeException(\"HealthControllerTest.testReadiness\"));\n  Mockito.when(apiCommands.metrics(any(HttpServletRequest.class))).thenThrow(new RuntimeException(\"HealthControllerTest.testReadiness\"));\n  builder=MockMvcRequestBuilders.get(url);\n  MockHttpServletResponse response=mockmvc.perform(builder).andReturn().getResponse();\n  Assert.assertEquals(500,response.getStatus());\n  Assert.assertEquals(\"Config and Naming are not in readiness\",response.getContentAsString());\n  Mockito.when(persistService.configInfoCount(any(String.class))).thenThrow(new RuntimeException(\"HealthControllerTest.testReadiness\"));\n  Mockito.when(apiCommands.metrics(any(HttpServletRequest.class))).thenReturn(JacksonUtils.createEmptyJsonNode());\n  response=mockmvc.perform(builder).andReturn().getResponse();\n  Assert.assertEquals(500,response.getStatus());\n  Assert.assertEquals(\"Config is not in readiness\",response.getContentAsString());\n  Mockito.when(persistService.configInfoCount(any(String.class))).thenReturn(0);\n  Mockito.when(apiCommands.metrics(any(HttpServletRequest.class))).thenThrow(new RuntimeException(\"HealthControllerTest.testReadiness\"));\n  builder=MockMvcRequestBuilders.get(url);\n  response=mockmvc.perform(builder).andReturn().getResponse();\n  Assert.assertEquals(500,response.getStatus());\n  Assert.assertEquals(\"Naming is not in readiness\",response.getContentAsString());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 272,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 99,
        "startColumnNumber" : 8,
        "endLineNumber" : 99,
        "endColumnNumber" : 86
      },
      "nodeContext" : "Mockito.when(persistService.configInfoCount(any(String.class))).thenReturn(0);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 8
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 75,
    "startColumnNumber" : 83,
    "endLineNumber" : 75,
    "endColumnNumber" : 84
  }, {
    "charLength" : 1,
    "startLineNumber" : 99,
    "startColumnNumber" : 83,
    "endLineNumber" : 99,
    "endColumnNumber" : 84
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}