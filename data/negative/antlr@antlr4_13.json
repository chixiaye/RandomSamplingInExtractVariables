{
  "id" : 13,
  "expression" : "s1",
  "projectName" : "antlr@antlr4",
  "commitID" : "f2b93e550cd912be3973743d09206db98f4092c9",
  "filePath" : "/tool/src/org/antlr/v4/tool/GrammarTransformPipeline.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "s1",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 256,
      "startColumnNumber" : 12,
      "endLineNumber" : 256,
      "endColumnNumber" : 14
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 256,
        "startColumnNumber" : 12,
        "endLineNumber" : 256,
        "endColumnNumber" : 42
      },
      "nodeContext" : "s1.substring(1,s1.length() - 1)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 256,
        "startColumnNumber" : 7,
        "endLineNumber" : 256,
        "endColumnNumber" : 42
      },
      "nodeContext" : "s1=s1.substring(1,s1.length() - 1)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 256,
        "startColumnNumber" : 7,
        "endLineNumber" : 256,
        "endColumnNumber" : 43
      },
      "nodeContext" : "s1=s1.substring(1,s1.length() - 1);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 285,
        "startLineNumber" : 254,
        "startColumnNumber" : 11,
        "endLineNumber" : 261,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  String s1=prevAction.getText();\n  s1=s1.substring(1,s1.length() - 1);\n  String s2=action.getText();\n  s2=s2.substring(1,s2.length() - 1);\n  String combinedAction=\"{\" + s1 + '\\n'+ s2+ \"}\";\n  prevAction.token.setText(combinedAction);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 59,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 469,
        "startLineNumber" : 250,
        "startColumnNumber" : 6,
        "endLineNumber" : 261,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (prevAction.g == at.g) {\n  rootGrammar.tool.errMgr.grammarError(ErrorType.ACTION_REDEFINITION,at.g.fileName,name.token,name.getText());\n}\n else {\n  String s1=prevAction.getText();\n  s1=s1.substring(1,s1.length() - 1);\n  String s2=action.getText();\n  s2=s2.substring(1,s2.length() - 1);\n  String combinedAction=\"{\" + s1 + '\\n'+ s2+ \"}\";\n  prevAction.token.setText(combinedAction);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 90,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 486,
        "startLineNumber" : 249,
        "startColumnNumber" : 10,
        "endLineNumber" : 262,
        "endColumnNumber" : 6
      },
      "nodeContext" : "{\n  if (prevAction.g == at.g) {\n    rootGrammar.tool.errMgr.grammarError(ErrorType.ACTION_REDEFINITION,at.g.fileName,name.token,name.getText());\n  }\n else {\n    String s1=prevAction.getText();\n    s1=s1.substring(1,s1.length() - 1);\n    String s2=action.getText();\n    s2=s2.substring(1,s2.length() - 1);\n    String combinedAction=\"{\" + s1 + '\\n'+ s2+ \"}\";\n    prevAction.token.setText(combinedAction);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 91,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 591,
        "startLineNumber" : 246,
        "startColumnNumber" : 5,
        "endLineNumber" : 262,
        "endColumnNumber" : 6
      },
      "nodeContext" : "if (prevAction == null) {\n  namedActions.put(scopeName,name.getText(),action);\n}\n else {\n  if (prevAction.g == at.g) {\n    rootGrammar.tool.errMgr.grammarError(ErrorType.ACTION_REDEFINITION,at.g.fileName,name.token,name.getText());\n  }\n else {\n    String s1=prevAction.getText();\n    s1=s1.substring(1,s1.length() - 1);\n    String s2=action.getText();\n    s2=s2.substring(1,s2.length() - 1);\n    String combinedAction=\"{\" + s1 + '\\n'+ s2+ \"}\";\n    prevAction.token.setText(combinedAction);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 105,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1118,
        "startLineNumber" : 232,
        "startColumnNumber" : 42,
        "endLineNumber" : 263,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String scopeName=rootGrammar.getDefaultActionScope();\n  GrammarAST scope, name, action;\n  if (at.getChildCount() > 2) {\n    scope=(GrammarAST)at.getChild(0);\n    scopeName=scope.getText();\n    name=(GrammarAST)at.getChild(1);\n    action=(GrammarAST)at.getChild(2);\n  }\n else {\n    name=(GrammarAST)at.getChild(0);\n    action=(GrammarAST)at.getChild(1);\n  }\n  GrammarAST prevAction=namedActions.get(scopeName,name.getText());\n  if (prevAction == null) {\n    namedActions.put(scopeName,name.getText(),action);\n  }\n else {\n    if (prevAction.g == at.g) {\n      rootGrammar.tool.errMgr.grammarError(ErrorType.ACTION_REDEFINITION,at.g.fileName,name.token,name.getText());\n    }\n else {\n      String s1=prevAction.getText();\n      s1=s1.substring(1,s1.length() - 1);\n      String s2=action.getText();\n      s2=s2.substring(1,s2.length() - 1);\n      String combinedAction=\"{\" + s1 + '\\n'+ s2+ \"}\";\n      prevAction.token.setText(combinedAction);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 199,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1156,
        "startLineNumber" : 232,
        "startColumnNumber" : 4,
        "endLineNumber" : 263,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (GrammarAST at : all_actionRoots) {\n  String scopeName=rootGrammar.getDefaultActionScope();\n  GrammarAST scope, name, action;\n  if (at.getChildCount() > 2) {\n    scope=(GrammarAST)at.getChild(0);\n    scopeName=scope.getText();\n    name=(GrammarAST)at.getChild(1);\n    action=(GrammarAST)at.getChild(2);\n  }\n else {\n    name=(GrammarAST)at.getChild(0);\n    action=(GrammarAST)at.getChild(1);\n  }\n  GrammarAST prevAction=namedActions.get(scopeName,name.getText());\n  if (prevAction == null) {\n    namedActions.put(scopeName,name.getText(),action);\n  }\n else {\n    if (prevAction.g == at.g) {\n      rootGrammar.tool.errMgr.grammarError(ErrorType.ACTION_REDEFINITION,at.g.fileName,name.token,name.getText());\n    }\n else {\n      String s1=prevAction.getText();\n      s1=s1.substring(1,s1.length() - 1);\n      String s2=action.getText();\n      s2=s2.substring(1,s2.length() - 1);\n      String combinedAction=\"{\" + s1 + '\\n'+ s2+ \"}\";\n      prevAction.token.setText(combinedAction);\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 205,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1940,
        "startLineNumber" : 227,
        "startColumnNumber" : 32,
        "endLineNumber" : 276,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  DoubleKeyMap<String,String,GrammarAST> namedActions=new DoubleKeyMap<String,String,GrammarAST>();\n  rootGrammar.tool.log(\"grammar\",\"imported actions: \" + imp_actionRoots);\n  for (  GrammarAST at : all_actionRoots) {\n    String scopeName=rootGrammar.getDefaultActionScope();\n    GrammarAST scope, name, action;\n    if (at.getChildCount() > 2) {\n      scope=(GrammarAST)at.getChild(0);\n      scopeName=scope.getText();\n      name=(GrammarAST)at.getChild(1);\n      action=(GrammarAST)at.getChild(2);\n    }\n else {\n      name=(GrammarAST)at.getChild(0);\n      action=(GrammarAST)at.getChild(1);\n    }\n    GrammarAST prevAction=namedActions.get(scopeName,name.getText());\n    if (prevAction == null) {\n      namedActions.put(scopeName,name.getText(),action);\n    }\n else {\n      if (prevAction.g == at.g) {\n        rootGrammar.tool.errMgr.grammarError(ErrorType.ACTION_REDEFINITION,at.g.fileName,name.token,name.getText());\n      }\n else {\n        String s1=prevAction.getText();\n        s1=s1.substring(1,s1.length() - 1);\n        String s2=action.getText();\n        s2=s2.substring(1,s2.length() - 1);\n        String combinedAction=\"{\" + s1 + '\\n'+ s2+ \"}\";\n        prevAction.token.setText(combinedAction);\n      }\n    }\n  }\n  for (  String scopeName : namedActions.keySet()) {\n    for (    String name : namedActions.keySet(scopeName)) {\n      GrammarAST action=namedActions.get(scopeName,name);\n      rootGrammar.tool.log(\"grammar\",action.g.name + \" \" + scopeName+ \":\"+ name+ \"=\"+ action.getText());\n      if (action.g != rootGrammar) {\n        root.insertChild(1,action.getParent());\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 303,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1969,
        "startLineNumber" : 227,
        "startColumnNumber" : 3,
        "endLineNumber" : 276,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (imp_actionRoots != null) {\n  DoubleKeyMap<String,String,GrammarAST> namedActions=new DoubleKeyMap<String,String,GrammarAST>();\n  rootGrammar.tool.log(\"grammar\",\"imported actions: \" + imp_actionRoots);\n  for (  GrammarAST at : all_actionRoots) {\n    String scopeName=rootGrammar.getDefaultActionScope();\n    GrammarAST scope, name, action;\n    if (at.getChildCount() > 2) {\n      scope=(GrammarAST)at.getChild(0);\n      scopeName=scope.getText();\n      name=(GrammarAST)at.getChild(1);\n      action=(GrammarAST)at.getChild(2);\n    }\n else {\n      name=(GrammarAST)at.getChild(0);\n      action=(GrammarAST)at.getChild(1);\n    }\n    GrammarAST prevAction=namedActions.get(scopeName,name.getText());\n    if (prevAction == null) {\n      namedActions.put(scopeName,name.getText(),action);\n    }\n else {\n      if (prevAction.g == at.g) {\n        rootGrammar.tool.errMgr.grammarError(ErrorType.ACTION_REDEFINITION,at.g.fileName,name.token,name.getText());\n      }\n else {\n        String s1=prevAction.getText();\n        s1=s1.substring(1,s1.length() - 1);\n        String s2=action.getText();\n        s2=s2.substring(1,s2.length() - 1);\n        String combinedAction=\"{\" + s1 + '\\n'+ s2+ \"}\";\n        prevAction.token.setText(combinedAction);\n      }\n    }\n  }\n  for (  String scopeName : namedActions.keySet()) {\n    for (    String name : namedActions.keySet(scopeName)) {\n      GrammarAST action=namedActions.get(scopeName,name);\n      rootGrammar.tool.log(\"grammar\",action.g.name + \" \" + scopeName+ \":\"+ name+ \"=\"+ action.getText());\n      if (action.g != rootGrammar) {\n        root.insertChild(1,action.getParent());\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 307,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 7114,
        "startLineNumber" : 182,
        "startColumnNumber" : 30,
        "endLineNumber" : 364,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  GrammarAST imp_channelRoot=(GrammarAST)imp.ast.getFirstChildWithType(ANTLRParser.CHANNELS);\n  if (imp_channelRoot != null) {\n    rootGrammar.tool.log(\"grammar\",\"imported channels: \" + imp_channelRoot.getChildren());\n    if (channelsRoot == null) {\n      channelsRoot=imp_channelRoot.dupTree();\n      channelsRoot.g=rootGrammar;\n      root.insertChild(1,channelsRoot);\n    }\n else {\n      for (int c=0; c < imp_channelRoot.getChildCount(); ++c) {\n        String channel=imp_channelRoot.getChild(c).getText();\n        boolean channelIsInRootGrammar=false;\n        for (int rc=0; rc < channelsRoot.getChildCount(); ++rc) {\n          String rootChannel=channelsRoot.getChild(rc).getText();\n          if (rootChannel.equals(channel)) {\n            channelIsInRootGrammar=true;\n            break;\n          }\n        }\n        if (!channelIsInRootGrammar) {\n          channelsRoot.addChild(imp_channelRoot.getChild(c).dupNode());\n        }\n      }\n    }\n  }\n  GrammarAST imp_tokensRoot=(GrammarAST)imp.ast.getFirstChildWithType(ANTLRParser.TOKENS_SPEC);\n  if (imp_tokensRoot != null) {\n    rootGrammar.tool.log(\"grammar\",\"imported tokens: \" + imp_tokensRoot.getChildren());\n    if (tokensRoot == null) {\n      tokensRoot=(GrammarAST)adaptor.create(ANTLRParser.TOKENS_SPEC,\"TOKENS\");\n      tokensRoot.g=rootGrammar;\n      root.insertChild(1,tokensRoot);\n    }\n    tokensRoot.addChildren(Arrays.asList(imp_tokensRoot.getChildren().toArray(new Tree[0])));\n  }\n  List<GrammarAST> all_actionRoots=new ArrayList<GrammarAST>();\n  List<GrammarAST> imp_actionRoots=imp.ast.getAllChildrenWithType(ANTLRParser.AT);\n  if (actionRoots != null)   all_actionRoots.addAll(actionRoots);\n  all_actionRoots.addAll(imp_actionRoots);\n  if (imp_actionRoots != null) {\n    DoubleKeyMap<String,String,GrammarAST> namedActions=new DoubleKeyMap<String,String,GrammarAST>();\n    rootGrammar.tool.log(\"grammar\",\"imported actions: \" + imp_actionRoots);\n    for (    GrammarAST at : all_actionRoots) {\n      String scopeName=rootGrammar.getDefaultActionScope();\n      GrammarAST scope, name, action;\n      if (at.getChildCount() > 2) {\n        scope=(GrammarAST)at.getChild(0);\n        scopeName=scope.getText();\n        name=(GrammarAST)at.getChild(1);\n        action=(GrammarAST)at.getChild(2);\n      }\n else {\n        name=(GrammarAST)at.getChild(0);\n        action=(GrammarAST)at.getChild(1);\n      }\n      GrammarAST prevAction=namedActions.get(scopeName,name.getText());\n      if (prevAction == null) {\n        namedActions.put(scopeName,name.getText(),action);\n      }\n else {\n        if (prevAction.g == at.g) {\n          rootGrammar.tool.errMgr.grammarError(ErrorType.ACTION_REDEFINITION,at.g.fileName,name.token,name.getText());\n        }\n else {\n          String s1=prevAction.getText();\n          s1=s1.substring(1,s1.length() - 1);\n          String s2=action.getText();\n          s2=s2.substring(1,s2.length() - 1);\n          String combinedAction=\"{\" + s1 + '\\n'+ s2+ \"}\";\n          prevAction.token.setText(combinedAction);\n        }\n      }\n    }\n    for (    String scopeName : namedActions.keySet()) {\n      for (      String name : namedActions.keySet(scopeName)) {\n        GrammarAST action=namedActions.get(scopeName,name);\n        rootGrammar.tool.log(\"grammar\",action.g.name + \" \" + scopeName+ \":\"+ name+ \"=\"+ action.getText());\n        if (action.g != rootGrammar) {\n          root.insertChild(1,action.getParent());\n        }\n      }\n    }\n  }\n  List<GrammarAST> modes=imp.ast.getNodesWithType(ANTLRParser.MODE);\n  if (modes != null) {\n    for (    GrammarAST m : modes) {\n      rootGrammar.tool.log(\"grammar\",\"imported mode: \" + m.toStringTree());\n      String name=m.getChild(0).getText();\n      boolean rootAlreadyHasMode=rootModeNames.contains(name);\n      GrammarAST destinationAST=null;\n      if (rootAlreadyHasMode) {\n        for (        GrammarAST m2 : rootModes) {\n          if (m2.getChild(0).getText().equals(name)) {\n            destinationAST=m2;\n            break;\n          }\n        }\n      }\n else {\n        destinationAST=m.dupNode();\n        destinationAST.addChild(m.getChild(0).dupNode());\n      }\n      int addedRules=0;\n      List<GrammarAST> modeRules=m.getAllChildrenWithType(ANTLRParser.RULE);\n      for (      GrammarAST r : modeRules) {\n        rootGrammar.tool.log(\"grammar\",\"imported rule: \" + r.toStringTree());\n        String ruleName=r.getChild(0).getText();\n        boolean rootAlreadyHasRule=rootRuleNames.contains(ruleName);\n        if (!rootAlreadyHasRule) {\n          destinationAST.addChild(r);\n          addedRules++;\n          rootRuleNames.add(ruleName);\n        }\n      }\n      if (!rootAlreadyHasMode && addedRules > 0) {\n        rootGrammar.ast.addChild(destinationAST);\n        rootModeNames.add(name);\n        rootModes.add(destinationAST);\n      }\n    }\n  }\n  List<GrammarAST> rules=imp.ast.getNodesWithType(ANTLRParser.RULE);\n  if (rules != null) {\n    for (    GrammarAST r : rules) {\n      rootGrammar.tool.log(\"grammar\",\"imported rule: \" + r.toStringTree());\n      String name=r.getChild(0).getText();\n      boolean rootAlreadyHasRule=rootRuleNames.contains(name);\n      if (!rootAlreadyHasRule) {\n        RULES.addChild(r);\n        rootRuleNames.add(name);\n      }\n    }\n  }\n  GrammarAST optionsRoot=(GrammarAST)imp.ast.getFirstChildWithType(ANTLRParser.OPTIONS);\n  if (optionsRoot != null) {\n    boolean hasNewOption=false;\n    for (    Map.Entry<String,GrammarAST> option : imp.ast.getOptions().entrySet()) {\n      String importOption=imp.ast.getOptionString(option.getKey());\n      if (importOption == null) {\n        continue;\n      }\n      String rootOption=rootGrammar.ast.getOptionString(option.getKey());\n      if (!importOption.equals(rootOption)) {\n        hasNewOption=true;\n        break;\n      }\n    }\n    if (hasNewOption) {\n      rootGrammar.tool.errMgr.grammarError(ErrorType.OPTIONS_IN_DELEGATE,optionsRoot.g.fileName,optionsRoot.token,imp.name);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 965,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7142,
        "startLineNumber" : 182,
        "startColumnNumber" : 2,
        "endLineNumber" : 364,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (Grammar imp : imports) {\n  GrammarAST imp_channelRoot=(GrammarAST)imp.ast.getFirstChildWithType(ANTLRParser.CHANNELS);\n  if (imp_channelRoot != null) {\n    rootGrammar.tool.log(\"grammar\",\"imported channels: \" + imp_channelRoot.getChildren());\n    if (channelsRoot == null) {\n      channelsRoot=imp_channelRoot.dupTree();\n      channelsRoot.g=rootGrammar;\n      root.insertChild(1,channelsRoot);\n    }\n else {\n      for (int c=0; c < imp_channelRoot.getChildCount(); ++c) {\n        String channel=imp_channelRoot.getChild(c).getText();\n        boolean channelIsInRootGrammar=false;\n        for (int rc=0; rc < channelsRoot.getChildCount(); ++rc) {\n          String rootChannel=channelsRoot.getChild(rc).getText();\n          if (rootChannel.equals(channel)) {\n            channelIsInRootGrammar=true;\n            break;\n          }\n        }\n        if (!channelIsInRootGrammar) {\n          channelsRoot.addChild(imp_channelRoot.getChild(c).dupNode());\n        }\n      }\n    }\n  }\n  GrammarAST imp_tokensRoot=(GrammarAST)imp.ast.getFirstChildWithType(ANTLRParser.TOKENS_SPEC);\n  if (imp_tokensRoot != null) {\n    rootGrammar.tool.log(\"grammar\",\"imported tokens: \" + imp_tokensRoot.getChildren());\n    if (tokensRoot == null) {\n      tokensRoot=(GrammarAST)adaptor.create(ANTLRParser.TOKENS_SPEC,\"TOKENS\");\n      tokensRoot.g=rootGrammar;\n      root.insertChild(1,tokensRoot);\n    }\n    tokensRoot.addChildren(Arrays.asList(imp_tokensRoot.getChildren().toArray(new Tree[0])));\n  }\n  List<GrammarAST> all_actionRoots=new ArrayList<GrammarAST>();\n  List<GrammarAST> imp_actionRoots=imp.ast.getAllChildrenWithType(ANTLRParser.AT);\n  if (actionRoots != null)   all_actionRoots.addAll(actionRoots);\n  all_actionRoots.addAll(imp_actionRoots);\n  if (imp_actionRoots != null) {\n    DoubleKeyMap<String,String,GrammarAST> namedActions=new DoubleKeyMap<String,String,GrammarAST>();\n    rootGrammar.tool.log(\"grammar\",\"imported actions: \" + imp_actionRoots);\n    for (    GrammarAST at : all_actionRoots) {\n      String scopeName=rootGrammar.getDefaultActionScope();\n      GrammarAST scope, name, action;\n      if (at.getChildCount() > 2) {\n        scope=(GrammarAST)at.getChild(0);\n        scopeName=scope.getText();\n        name=(GrammarAST)at.getChild(1);\n        action=(GrammarAST)at.getChild(2);\n      }\n else {\n        name=(GrammarAST)at.getChild(0);\n        action=(GrammarAST)at.getChild(1);\n      }\n      GrammarAST prevAction=namedActions.get(scopeName,name.getText());\n      if (prevAction == null) {\n        namedActions.put(scopeName,name.getText(),action);\n      }\n else {\n        if (prevAction.g == at.g) {\n          rootGrammar.tool.errMgr.grammarError(ErrorType.ACTION_REDEFINITION,at.g.fileName,name.token,name.getText());\n        }\n else {\n          String s1=prevAction.getText();\n          s1=s1.substring(1,s1.length() - 1);\n          String s2=action.getText();\n          s2=s2.substring(1,s2.length() - 1);\n          String combinedAction=\"{\" + s1 + '\\n'+ s2+ \"}\";\n          prevAction.token.setText(combinedAction);\n        }\n      }\n    }\n    for (    String scopeName : namedActions.keySet()) {\n      for (      String name : namedActions.keySet(scopeName)) {\n        GrammarAST action=namedActions.get(scopeName,name);\n        rootGrammar.tool.log(\"grammar\",action.g.name + \" \" + scopeName+ \":\"+ name+ \"=\"+ action.getText());\n        if (action.g != rootGrammar) {\n          root.insertChild(1,action.getParent());\n        }\n      }\n    }\n  }\n  List<GrammarAST> modes=imp.ast.getNodesWithType(ANTLRParser.MODE);\n  if (modes != null) {\n    for (    GrammarAST m : modes) {\n      rootGrammar.tool.log(\"grammar\",\"imported mode: \" + m.toStringTree());\n      String name=m.getChild(0).getText();\n      boolean rootAlreadyHasMode=rootModeNames.contains(name);\n      GrammarAST destinationAST=null;\n      if (rootAlreadyHasMode) {\n        for (        GrammarAST m2 : rootModes) {\n          if (m2.getChild(0).getText().equals(name)) {\n            destinationAST=m2;\n            break;\n          }\n        }\n      }\n else {\n        destinationAST=m.dupNode();\n        destinationAST.addChild(m.getChild(0).dupNode());\n      }\n      int addedRules=0;\n      List<GrammarAST> modeRules=m.getAllChildrenWithType(ANTLRParser.RULE);\n      for (      GrammarAST r : modeRules) {\n        rootGrammar.tool.log(\"grammar\",\"imported rule: \" + r.toStringTree());\n        String ruleName=r.getChild(0).getText();\n        boolean rootAlreadyHasRule=rootRuleNames.contains(ruleName);\n        if (!rootAlreadyHasRule) {\n          destinationAST.addChild(r);\n          addedRules++;\n          rootRuleNames.add(ruleName);\n        }\n      }\n      if (!rootAlreadyHasMode && addedRules > 0) {\n        rootGrammar.ast.addChild(destinationAST);\n        rootModeNames.add(name);\n        rootModes.add(destinationAST);\n      }\n    }\n  }\n  List<GrammarAST> rules=imp.ast.getNodesWithType(ANTLRParser.RULE);\n  if (rules != null) {\n    for (    GrammarAST r : rules) {\n      rootGrammar.tool.log(\"grammar\",\"imported rule: \" + r.toStringTree());\n      String name=r.getChild(0).getText();\n      boolean rootAlreadyHasRule=rootRuleNames.contains(name);\n      if (!rootAlreadyHasRule) {\n        RULES.addChild(r);\n        rootRuleNames.add(name);\n      }\n    }\n  }\n  GrammarAST optionsRoot=(GrammarAST)imp.ast.getFirstChildWithType(ANTLRParser.OPTIONS);\n  if (optionsRoot != null) {\n    boolean hasNewOption=false;\n    for (    Map.Entry<String,GrammarAST> option : imp.ast.getOptions().entrySet()) {\n      String importOption=imp.ast.getOptionString(option.getKey());\n      if (importOption == null) {\n        continue;\n      }\n      String rootOption=rootGrammar.ast.getOptionString(option.getKey());\n      if (!importOption.equals(rootOption)) {\n        hasNewOption=true;\n        break;\n      }\n    }\n    if (hasNewOption) {\n      rootGrammar.tool.errMgr.grammarError(ErrorType.OPTIONS_IN_DELEGATE,optionsRoot.g.fileName,optionsRoot.token,imp.name);\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 971,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8494,
        "startLineNumber" : 156,
        "startColumnNumber" : 60,
        "endLineNumber" : 366,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  List<Grammar> imports=rootGrammar.getAllImportedGrammars();\n  if (imports == null)   return;\n  GrammarAST root=rootGrammar.ast;\n  GrammarAST id=(GrammarAST)root.getChild(0);\n  GrammarASTAdaptor adaptor=new GrammarASTAdaptor(id.token.getInputStream());\n  GrammarAST channelsRoot=(GrammarAST)root.getFirstChildWithType(ANTLRParser.CHANNELS);\n  GrammarAST tokensRoot=(GrammarAST)root.getFirstChildWithType(ANTLRParser.TOKENS_SPEC);\n  List<GrammarAST> actionRoots=root.getNodesWithType(ANTLRParser.AT);\n  GrammarAST RULES=(GrammarAST)root.getFirstChildWithType(ANTLRParser.RULES);\n  Set<String> rootRuleNames=new HashSet<String>();\n  List<GrammarAST> rootRules=RULES.getNodesWithType(ANTLRParser.RULE);\n  for (  GrammarAST r : rootRules)   rootRuleNames.add(r.getChild(0).getText());\n  List<GrammarAST> rootModes=root.getNodesWithType(ANTLRParser.MODE);\n  Set<String> rootModeNames=new HashSet<String>();\n  for (  GrammarAST m : rootModes)   rootModeNames.add(m.getChild(0).getText());\n  List<GrammarAST> addedModes=new ArrayList<GrammarAST>();\n  for (  Grammar imp : imports) {\n    GrammarAST imp_channelRoot=(GrammarAST)imp.ast.getFirstChildWithType(ANTLRParser.CHANNELS);\n    if (imp_channelRoot != null) {\n      rootGrammar.tool.log(\"grammar\",\"imported channels: \" + imp_channelRoot.getChildren());\n      if (channelsRoot == null) {\n        channelsRoot=imp_channelRoot.dupTree();\n        channelsRoot.g=rootGrammar;\n        root.insertChild(1,channelsRoot);\n      }\n else {\n        for (int c=0; c < imp_channelRoot.getChildCount(); ++c) {\n          String channel=imp_channelRoot.getChild(c).getText();\n          boolean channelIsInRootGrammar=false;\n          for (int rc=0; rc < channelsRoot.getChildCount(); ++rc) {\n            String rootChannel=channelsRoot.getChild(rc).getText();\n            if (rootChannel.equals(channel)) {\n              channelIsInRootGrammar=true;\n              break;\n            }\n          }\n          if (!channelIsInRootGrammar) {\n            channelsRoot.addChild(imp_channelRoot.getChild(c).dupNode());\n          }\n        }\n      }\n    }\n    GrammarAST imp_tokensRoot=(GrammarAST)imp.ast.getFirstChildWithType(ANTLRParser.TOKENS_SPEC);\n    if (imp_tokensRoot != null) {\n      rootGrammar.tool.log(\"grammar\",\"imported tokens: \" + imp_tokensRoot.getChildren());\n      if (tokensRoot == null) {\n        tokensRoot=(GrammarAST)adaptor.create(ANTLRParser.TOKENS_SPEC,\"TOKENS\");\n        tokensRoot.g=rootGrammar;\n        root.insertChild(1,tokensRoot);\n      }\n      tokensRoot.addChildren(Arrays.asList(imp_tokensRoot.getChildren().toArray(new Tree[0])));\n    }\n    List<GrammarAST> all_actionRoots=new ArrayList<GrammarAST>();\n    List<GrammarAST> imp_actionRoots=imp.ast.getAllChildrenWithType(ANTLRParser.AT);\n    if (actionRoots != null)     all_actionRoots.addAll(actionRoots);\n    all_actionRoots.addAll(imp_actionRoots);\n    if (imp_actionRoots != null) {\n      DoubleKeyMap<String,String,GrammarAST> namedActions=new DoubleKeyMap<String,String,GrammarAST>();\n      rootGrammar.tool.log(\"grammar\",\"imported actions: \" + imp_actionRoots);\n      for (      GrammarAST at : all_actionRoots) {\n        String scopeName=rootGrammar.getDefaultActionScope();\n        GrammarAST scope, name, action;\n        if (at.getChildCount() > 2) {\n          scope=(GrammarAST)at.getChild(0);\n          scopeName=scope.getText();\n          name=(GrammarAST)at.getChild(1);\n          action=(GrammarAST)at.getChild(2);\n        }\n else {\n          name=(GrammarAST)at.getChild(0);\n          action=(GrammarAST)at.getChild(1);\n        }\n        GrammarAST prevAction=namedActions.get(scopeName,name.getText());\n        if (prevAction == null) {\n          namedActions.put(scopeName,name.getText(),action);\n        }\n else {\n          if (prevAction.g == at.g) {\n            rootGrammar.tool.errMgr.grammarError(ErrorType.ACTION_REDEFINITION,at.g.fileName,name.token,name.getText());\n          }\n else {\n            String s1=prevAction.getText();\n            s1=s1.substring(1,s1.length() - 1);\n            String s2=action.getText();\n            s2=s2.substring(1,s2.length() - 1);\n            String combinedAction=\"{\" + s1 + '\\n'+ s2+ \"}\";\n            prevAction.token.setText(combinedAction);\n          }\n        }\n      }\n      for (      String scopeName : namedActions.keySet()) {\n        for (        String name : namedActions.keySet(scopeName)) {\n          GrammarAST action=namedActions.get(scopeName,name);\n          rootGrammar.tool.log(\"grammar\",action.g.name + \" \" + scopeName+ \":\"+ name+ \"=\"+ action.getText());\n          if (action.g != rootGrammar) {\n            root.insertChild(1,action.getParent());\n          }\n        }\n      }\n    }\n    List<GrammarAST> modes=imp.ast.getNodesWithType(ANTLRParser.MODE);\n    if (modes != null) {\n      for (      GrammarAST m : modes) {\n        rootGrammar.tool.log(\"grammar\",\"imported mode: \" + m.toStringTree());\n        String name=m.getChild(0).getText();\n        boolean rootAlreadyHasMode=rootModeNames.contains(name);\n        GrammarAST destinationAST=null;\n        if (rootAlreadyHasMode) {\n          for (          GrammarAST m2 : rootModes) {\n            if (m2.getChild(0).getText().equals(name)) {\n              destinationAST=m2;\n              break;\n            }\n          }\n        }\n else {\n          destinationAST=m.dupNode();\n          destinationAST.addChild(m.getChild(0).dupNode());\n        }\n        int addedRules=0;\n        List<GrammarAST> modeRules=m.getAllChildrenWithType(ANTLRParser.RULE);\n        for (        GrammarAST r : modeRules) {\n          rootGrammar.tool.log(\"grammar\",\"imported rule: \" + r.toStringTree());\n          String ruleName=r.getChild(0).getText();\n          boolean rootAlreadyHasRule=rootRuleNames.contains(ruleName);\n          if (!rootAlreadyHasRule) {\n            destinationAST.addChild(r);\n            addedRules++;\n            rootRuleNames.add(ruleName);\n          }\n        }\n        if (!rootAlreadyHasMode && addedRules > 0) {\n          rootGrammar.ast.addChild(destinationAST);\n          rootModeNames.add(name);\n          rootModes.add(destinationAST);\n        }\n      }\n    }\n    List<GrammarAST> rules=imp.ast.getNodesWithType(ANTLRParser.RULE);\n    if (rules != null) {\n      for (      GrammarAST r : rules) {\n        rootGrammar.tool.log(\"grammar\",\"imported rule: \" + r.toStringTree());\n        String name=r.getChild(0).getText();\n        boolean rootAlreadyHasRule=rootRuleNames.contains(name);\n        if (!rootAlreadyHasRule) {\n          RULES.addChild(r);\n          rootRuleNames.add(name);\n        }\n      }\n    }\n    GrammarAST optionsRoot=(GrammarAST)imp.ast.getFirstChildWithType(ANTLRParser.OPTIONS);\n    if (optionsRoot != null) {\n      boolean hasNewOption=false;\n      for (      Map.Entry<String,GrammarAST> option : imp.ast.getOptions().entrySet()) {\n        String importOption=imp.ast.getOptionString(option.getKey());\n        if (importOption == null) {\n          continue;\n        }\n        String rootOption=rootGrammar.ast.getOptionString(option.getKey());\n        if (!importOption.equals(rootOption)) {\n          hasNewOption=true;\n          break;\n        }\n      }\n      if (hasNewOption) {\n        rootGrammar.tool.errMgr.grammarError(ErrorType.OPTIONS_IN_DELEGATE,optionsRoot.g.fileName,optionsRoot.token,imp.name);\n      }\n    }\n  }\n  rootGrammar.tool.log(\"grammar\",\"Grammar: \" + rootGrammar.ast.toStringTree());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1193,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 9067,
        "startLineNumber" : 142,
        "startColumnNumber" : 1,
        "endLineNumber" : 366,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Merge all the rules, token definitions, and named actions from imported grammars into the root grammar tree.  Perform: (tokens { X (= Y 'y')) + (tokens { Z )\t-&gt;\t(tokens { X (= Y 'y') Z) (@ members {foo}) + (@ members {bar})\t-&gt;\t(@ members {foobar}) (RULES (RULE x y)) + (RULES (RULE z))\t-&gt;\t(RULES (RULE x y z)) Rules in root prevent same rule from being appended to RULES node. The goal is a complete combined grammar so we can ignore subordinate grammars.\n */\npublic void integrateImportedGrammars(Grammar rootGrammar){\n  List<Grammar> imports=rootGrammar.getAllImportedGrammars();\n  if (imports == null)   return;\n  GrammarAST root=rootGrammar.ast;\n  GrammarAST id=(GrammarAST)root.getChild(0);\n  GrammarASTAdaptor adaptor=new GrammarASTAdaptor(id.token.getInputStream());\n  GrammarAST channelsRoot=(GrammarAST)root.getFirstChildWithType(ANTLRParser.CHANNELS);\n  GrammarAST tokensRoot=(GrammarAST)root.getFirstChildWithType(ANTLRParser.TOKENS_SPEC);\n  List<GrammarAST> actionRoots=root.getNodesWithType(ANTLRParser.AT);\n  GrammarAST RULES=(GrammarAST)root.getFirstChildWithType(ANTLRParser.RULES);\n  Set<String> rootRuleNames=new HashSet<String>();\n  List<GrammarAST> rootRules=RULES.getNodesWithType(ANTLRParser.RULE);\n  for (  GrammarAST r : rootRules)   rootRuleNames.add(r.getChild(0).getText());\n  List<GrammarAST> rootModes=root.getNodesWithType(ANTLRParser.MODE);\n  Set<String> rootModeNames=new HashSet<String>();\n  for (  GrammarAST m : rootModes)   rootModeNames.add(m.getChild(0).getText());\n  List<GrammarAST> addedModes=new ArrayList<GrammarAST>();\n  for (  Grammar imp : imports) {\n    GrammarAST imp_channelRoot=(GrammarAST)imp.ast.getFirstChildWithType(ANTLRParser.CHANNELS);\n    if (imp_channelRoot != null) {\n      rootGrammar.tool.log(\"grammar\",\"imported channels: \" + imp_channelRoot.getChildren());\n      if (channelsRoot == null) {\n        channelsRoot=imp_channelRoot.dupTree();\n        channelsRoot.g=rootGrammar;\n        root.insertChild(1,channelsRoot);\n      }\n else {\n        for (int c=0; c < imp_channelRoot.getChildCount(); ++c) {\n          String channel=imp_channelRoot.getChild(c).getText();\n          boolean channelIsInRootGrammar=false;\n          for (int rc=0; rc < channelsRoot.getChildCount(); ++rc) {\n            String rootChannel=channelsRoot.getChild(rc).getText();\n            if (rootChannel.equals(channel)) {\n              channelIsInRootGrammar=true;\n              break;\n            }\n          }\n          if (!channelIsInRootGrammar) {\n            channelsRoot.addChild(imp_channelRoot.getChild(c).dupNode());\n          }\n        }\n      }\n    }\n    GrammarAST imp_tokensRoot=(GrammarAST)imp.ast.getFirstChildWithType(ANTLRParser.TOKENS_SPEC);\n    if (imp_tokensRoot != null) {\n      rootGrammar.tool.log(\"grammar\",\"imported tokens: \" + imp_tokensRoot.getChildren());\n      if (tokensRoot == null) {\n        tokensRoot=(GrammarAST)adaptor.create(ANTLRParser.TOKENS_SPEC,\"TOKENS\");\n        tokensRoot.g=rootGrammar;\n        root.insertChild(1,tokensRoot);\n      }\n      tokensRoot.addChildren(Arrays.asList(imp_tokensRoot.getChildren().toArray(new Tree[0])));\n    }\n    List<GrammarAST> all_actionRoots=new ArrayList<GrammarAST>();\n    List<GrammarAST> imp_actionRoots=imp.ast.getAllChildrenWithType(ANTLRParser.AT);\n    if (actionRoots != null)     all_actionRoots.addAll(actionRoots);\n    all_actionRoots.addAll(imp_actionRoots);\n    if (imp_actionRoots != null) {\n      DoubleKeyMap<String,String,GrammarAST> namedActions=new DoubleKeyMap<String,String,GrammarAST>();\n      rootGrammar.tool.log(\"grammar\",\"imported actions: \" + imp_actionRoots);\n      for (      GrammarAST at : all_actionRoots) {\n        String scopeName=rootGrammar.getDefaultActionScope();\n        GrammarAST scope, name, action;\n        if (at.getChildCount() > 2) {\n          scope=(GrammarAST)at.getChild(0);\n          scopeName=scope.getText();\n          name=(GrammarAST)at.getChild(1);\n          action=(GrammarAST)at.getChild(2);\n        }\n else {\n          name=(GrammarAST)at.getChild(0);\n          action=(GrammarAST)at.getChild(1);\n        }\n        GrammarAST prevAction=namedActions.get(scopeName,name.getText());\n        if (prevAction == null) {\n          namedActions.put(scopeName,name.getText(),action);\n        }\n else {\n          if (prevAction.g == at.g) {\n            rootGrammar.tool.errMgr.grammarError(ErrorType.ACTION_REDEFINITION,at.g.fileName,name.token,name.getText());\n          }\n else {\n            String s1=prevAction.getText();\n            s1=s1.substring(1,s1.length() - 1);\n            String s2=action.getText();\n            s2=s2.substring(1,s2.length() - 1);\n            String combinedAction=\"{\" + s1 + '\\n'+ s2+ \"}\";\n            prevAction.token.setText(combinedAction);\n          }\n        }\n      }\n      for (      String scopeName : namedActions.keySet()) {\n        for (        String name : namedActions.keySet(scopeName)) {\n          GrammarAST action=namedActions.get(scopeName,name);\n          rootGrammar.tool.log(\"grammar\",action.g.name + \" \" + scopeName+ \":\"+ name+ \"=\"+ action.getText());\n          if (action.g != rootGrammar) {\n            root.insertChild(1,action.getParent());\n          }\n        }\n      }\n    }\n    List<GrammarAST> modes=imp.ast.getNodesWithType(ANTLRParser.MODE);\n    if (modes != null) {\n      for (      GrammarAST m : modes) {\n        rootGrammar.tool.log(\"grammar\",\"imported mode: \" + m.toStringTree());\n        String name=m.getChild(0).getText();\n        boolean rootAlreadyHasMode=rootModeNames.contains(name);\n        GrammarAST destinationAST=null;\n        if (rootAlreadyHasMode) {\n          for (          GrammarAST m2 : rootModes) {\n            if (m2.getChild(0).getText().equals(name)) {\n              destinationAST=m2;\n              break;\n            }\n          }\n        }\n else {\n          destinationAST=m.dupNode();\n          destinationAST.addChild(m.getChild(0).dupNode());\n        }\n        int addedRules=0;\n        List<GrammarAST> modeRules=m.getAllChildrenWithType(ANTLRParser.RULE);\n        for (        GrammarAST r : modeRules) {\n          rootGrammar.tool.log(\"grammar\",\"imported rule: \" + r.toStringTree());\n          String ruleName=r.getChild(0).getText();\n          boolean rootAlreadyHasRule=rootRuleNames.contains(ruleName);\n          if (!rootAlreadyHasRule) {\n            destinationAST.addChild(r);\n            addedRules++;\n            rootRuleNames.add(ruleName);\n          }\n        }\n        if (!rootAlreadyHasMode && addedRules > 0) {\n          rootGrammar.ast.addChild(destinationAST);\n          rootModeNames.add(name);\n          rootModes.add(destinationAST);\n        }\n      }\n    }\n    List<GrammarAST> rules=imp.ast.getNodesWithType(ANTLRParser.RULE);\n    if (rules != null) {\n      for (      GrammarAST r : rules) {\n        rootGrammar.tool.log(\"grammar\",\"imported rule: \" + r.toStringTree());\n        String name=r.getChild(0).getText();\n        boolean rootAlreadyHasRule=rootRuleNames.contains(name);\n        if (!rootAlreadyHasRule) {\n          RULES.addChild(r);\n          rootRuleNames.add(name);\n        }\n      }\n    }\n    GrammarAST optionsRoot=(GrammarAST)imp.ast.getFirstChildWithType(ANTLRParser.OPTIONS);\n    if (optionsRoot != null) {\n      boolean hasNewOption=false;\n      for (      Map.Entry<String,GrammarAST> option : imp.ast.getOptions().entrySet()) {\n        String importOption=imp.ast.getOptionString(option.getKey());\n        if (importOption == null) {\n          continue;\n        }\n        String rootOption=rootGrammar.ast.getOptionString(option.getKey());\n        if (!importOption.equals(rootOption)) {\n          hasNewOption=true;\n          break;\n        }\n      }\n      if (hasNewOption) {\n        rootGrammar.tool.errMgr.grammarError(ErrorType.OPTIONS_IN_DELEGATE,optionsRoot.g.fileName,optionsRoot.token,imp.name);\n      }\n    }\n  }\n  rootGrammar.tool.log(\"grammar\",\"Grammar: \" + rootGrammar.ast.toStringTree());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1202,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 256,
        "startColumnNumber" : 7,
        "endLineNumber" : 256,
        "endColumnNumber" : 43
      },
      "nodeContext" : "s1=s1.substring(1,s1.length() - 1);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "s1",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 256,
      "startColumnNumber" : 28,
      "endLineNumber" : 256,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 256,
        "startColumnNumber" : 28,
        "endLineNumber" : 256,
        "endColumnNumber" : 39
      },
      "nodeContext" : "s1.length()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 256,
        "startColumnNumber" : 28,
        "endLineNumber" : 256,
        "endColumnNumber" : 41
      },
      "nodeContext" : "s1.length() - 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 256,
        "startColumnNumber" : 12,
        "endLineNumber" : 256,
        "endColumnNumber" : 42
      },
      "nodeContext" : "s1.substring(1,s1.length() - 1)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 256,
        "startColumnNumber" : 7,
        "endLineNumber" : 256,
        "endColumnNumber" : 42
      },
      "nodeContext" : "s1=s1.substring(1,s1.length() - 1)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 256,
        "startColumnNumber" : 7,
        "endLineNumber" : 256,
        "endColumnNumber" : 43
      },
      "nodeContext" : "s1=s1.substring(1,s1.length() - 1);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 285,
        "startLineNumber" : 254,
        "startColumnNumber" : 11,
        "endLineNumber" : 261,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  String s1=prevAction.getText();\n  s1=s1.substring(1,s1.length() - 1);\n  String s2=action.getText();\n  s2=s2.substring(1,s2.length() - 1);\n  String combinedAction=\"{\" + s1 + '\\n'+ s2+ \"}\";\n  prevAction.token.setText(combinedAction);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 59,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 469,
        "startLineNumber" : 250,
        "startColumnNumber" : 6,
        "endLineNumber" : 261,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (prevAction.g == at.g) {\n  rootGrammar.tool.errMgr.grammarError(ErrorType.ACTION_REDEFINITION,at.g.fileName,name.token,name.getText());\n}\n else {\n  String s1=prevAction.getText();\n  s1=s1.substring(1,s1.length() - 1);\n  String s2=action.getText();\n  s2=s2.substring(1,s2.length() - 1);\n  String combinedAction=\"{\" + s1 + '\\n'+ s2+ \"}\";\n  prevAction.token.setText(combinedAction);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 90,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 486,
        "startLineNumber" : 249,
        "startColumnNumber" : 10,
        "endLineNumber" : 262,
        "endColumnNumber" : 6
      },
      "nodeContext" : "{\n  if (prevAction.g == at.g) {\n    rootGrammar.tool.errMgr.grammarError(ErrorType.ACTION_REDEFINITION,at.g.fileName,name.token,name.getText());\n  }\n else {\n    String s1=prevAction.getText();\n    s1=s1.substring(1,s1.length() - 1);\n    String s2=action.getText();\n    s2=s2.substring(1,s2.length() - 1);\n    String combinedAction=\"{\" + s1 + '\\n'+ s2+ \"}\";\n    prevAction.token.setText(combinedAction);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 91,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 591,
        "startLineNumber" : 246,
        "startColumnNumber" : 5,
        "endLineNumber" : 262,
        "endColumnNumber" : 6
      },
      "nodeContext" : "if (prevAction == null) {\n  namedActions.put(scopeName,name.getText(),action);\n}\n else {\n  if (prevAction.g == at.g) {\n    rootGrammar.tool.errMgr.grammarError(ErrorType.ACTION_REDEFINITION,at.g.fileName,name.token,name.getText());\n  }\n else {\n    String s1=prevAction.getText();\n    s1=s1.substring(1,s1.length() - 1);\n    String s2=action.getText();\n    s2=s2.substring(1,s2.length() - 1);\n    String combinedAction=\"{\" + s1 + '\\n'+ s2+ \"}\";\n    prevAction.token.setText(combinedAction);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 105,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1118,
        "startLineNumber" : 232,
        "startColumnNumber" : 42,
        "endLineNumber" : 263,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String scopeName=rootGrammar.getDefaultActionScope();\n  GrammarAST scope, name, action;\n  if (at.getChildCount() > 2) {\n    scope=(GrammarAST)at.getChild(0);\n    scopeName=scope.getText();\n    name=(GrammarAST)at.getChild(1);\n    action=(GrammarAST)at.getChild(2);\n  }\n else {\n    name=(GrammarAST)at.getChild(0);\n    action=(GrammarAST)at.getChild(1);\n  }\n  GrammarAST prevAction=namedActions.get(scopeName,name.getText());\n  if (prevAction == null) {\n    namedActions.put(scopeName,name.getText(),action);\n  }\n else {\n    if (prevAction.g == at.g) {\n      rootGrammar.tool.errMgr.grammarError(ErrorType.ACTION_REDEFINITION,at.g.fileName,name.token,name.getText());\n    }\n else {\n      String s1=prevAction.getText();\n      s1=s1.substring(1,s1.length() - 1);\n      String s2=action.getText();\n      s2=s2.substring(1,s2.length() - 1);\n      String combinedAction=\"{\" + s1 + '\\n'+ s2+ \"}\";\n      prevAction.token.setText(combinedAction);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 199,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1156,
        "startLineNumber" : 232,
        "startColumnNumber" : 4,
        "endLineNumber" : 263,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (GrammarAST at : all_actionRoots) {\n  String scopeName=rootGrammar.getDefaultActionScope();\n  GrammarAST scope, name, action;\n  if (at.getChildCount() > 2) {\n    scope=(GrammarAST)at.getChild(0);\n    scopeName=scope.getText();\n    name=(GrammarAST)at.getChild(1);\n    action=(GrammarAST)at.getChild(2);\n  }\n else {\n    name=(GrammarAST)at.getChild(0);\n    action=(GrammarAST)at.getChild(1);\n  }\n  GrammarAST prevAction=namedActions.get(scopeName,name.getText());\n  if (prevAction == null) {\n    namedActions.put(scopeName,name.getText(),action);\n  }\n else {\n    if (prevAction.g == at.g) {\n      rootGrammar.tool.errMgr.grammarError(ErrorType.ACTION_REDEFINITION,at.g.fileName,name.token,name.getText());\n    }\n else {\n      String s1=prevAction.getText();\n      s1=s1.substring(1,s1.length() - 1);\n      String s2=action.getText();\n      s2=s2.substring(1,s2.length() - 1);\n      String combinedAction=\"{\" + s1 + '\\n'+ s2+ \"}\";\n      prevAction.token.setText(combinedAction);\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 205,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1940,
        "startLineNumber" : 227,
        "startColumnNumber" : 32,
        "endLineNumber" : 276,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  DoubleKeyMap<String,String,GrammarAST> namedActions=new DoubleKeyMap<String,String,GrammarAST>();\n  rootGrammar.tool.log(\"grammar\",\"imported actions: \" + imp_actionRoots);\n  for (  GrammarAST at : all_actionRoots) {\n    String scopeName=rootGrammar.getDefaultActionScope();\n    GrammarAST scope, name, action;\n    if (at.getChildCount() > 2) {\n      scope=(GrammarAST)at.getChild(0);\n      scopeName=scope.getText();\n      name=(GrammarAST)at.getChild(1);\n      action=(GrammarAST)at.getChild(2);\n    }\n else {\n      name=(GrammarAST)at.getChild(0);\n      action=(GrammarAST)at.getChild(1);\n    }\n    GrammarAST prevAction=namedActions.get(scopeName,name.getText());\n    if (prevAction == null) {\n      namedActions.put(scopeName,name.getText(),action);\n    }\n else {\n      if (prevAction.g == at.g) {\n        rootGrammar.tool.errMgr.grammarError(ErrorType.ACTION_REDEFINITION,at.g.fileName,name.token,name.getText());\n      }\n else {\n        String s1=prevAction.getText();\n        s1=s1.substring(1,s1.length() - 1);\n        String s2=action.getText();\n        s2=s2.substring(1,s2.length() - 1);\n        String combinedAction=\"{\" + s1 + '\\n'+ s2+ \"}\";\n        prevAction.token.setText(combinedAction);\n      }\n    }\n  }\n  for (  String scopeName : namedActions.keySet()) {\n    for (    String name : namedActions.keySet(scopeName)) {\n      GrammarAST action=namedActions.get(scopeName,name);\n      rootGrammar.tool.log(\"grammar\",action.g.name + \" \" + scopeName+ \":\"+ name+ \"=\"+ action.getText());\n      if (action.g != rootGrammar) {\n        root.insertChild(1,action.getParent());\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 303,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1969,
        "startLineNumber" : 227,
        "startColumnNumber" : 3,
        "endLineNumber" : 276,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (imp_actionRoots != null) {\n  DoubleKeyMap<String,String,GrammarAST> namedActions=new DoubleKeyMap<String,String,GrammarAST>();\n  rootGrammar.tool.log(\"grammar\",\"imported actions: \" + imp_actionRoots);\n  for (  GrammarAST at : all_actionRoots) {\n    String scopeName=rootGrammar.getDefaultActionScope();\n    GrammarAST scope, name, action;\n    if (at.getChildCount() > 2) {\n      scope=(GrammarAST)at.getChild(0);\n      scopeName=scope.getText();\n      name=(GrammarAST)at.getChild(1);\n      action=(GrammarAST)at.getChild(2);\n    }\n else {\n      name=(GrammarAST)at.getChild(0);\n      action=(GrammarAST)at.getChild(1);\n    }\n    GrammarAST prevAction=namedActions.get(scopeName,name.getText());\n    if (prevAction == null) {\n      namedActions.put(scopeName,name.getText(),action);\n    }\n else {\n      if (prevAction.g == at.g) {\n        rootGrammar.tool.errMgr.grammarError(ErrorType.ACTION_REDEFINITION,at.g.fileName,name.token,name.getText());\n      }\n else {\n        String s1=prevAction.getText();\n        s1=s1.substring(1,s1.length() - 1);\n        String s2=action.getText();\n        s2=s2.substring(1,s2.length() - 1);\n        String combinedAction=\"{\" + s1 + '\\n'+ s2+ \"}\";\n        prevAction.token.setText(combinedAction);\n      }\n    }\n  }\n  for (  String scopeName : namedActions.keySet()) {\n    for (    String name : namedActions.keySet(scopeName)) {\n      GrammarAST action=namedActions.get(scopeName,name);\n      rootGrammar.tool.log(\"grammar\",action.g.name + \" \" + scopeName+ \":\"+ name+ \"=\"+ action.getText());\n      if (action.g != rootGrammar) {\n        root.insertChild(1,action.getParent());\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 307,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 7114,
        "startLineNumber" : 182,
        "startColumnNumber" : 30,
        "endLineNumber" : 364,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  GrammarAST imp_channelRoot=(GrammarAST)imp.ast.getFirstChildWithType(ANTLRParser.CHANNELS);\n  if (imp_channelRoot != null) {\n    rootGrammar.tool.log(\"grammar\",\"imported channels: \" + imp_channelRoot.getChildren());\n    if (channelsRoot == null) {\n      channelsRoot=imp_channelRoot.dupTree();\n      channelsRoot.g=rootGrammar;\n      root.insertChild(1,channelsRoot);\n    }\n else {\n      for (int c=0; c < imp_channelRoot.getChildCount(); ++c) {\n        String channel=imp_channelRoot.getChild(c).getText();\n        boolean channelIsInRootGrammar=false;\n        for (int rc=0; rc < channelsRoot.getChildCount(); ++rc) {\n          String rootChannel=channelsRoot.getChild(rc).getText();\n          if (rootChannel.equals(channel)) {\n            channelIsInRootGrammar=true;\n            break;\n          }\n        }\n        if (!channelIsInRootGrammar) {\n          channelsRoot.addChild(imp_channelRoot.getChild(c).dupNode());\n        }\n      }\n    }\n  }\n  GrammarAST imp_tokensRoot=(GrammarAST)imp.ast.getFirstChildWithType(ANTLRParser.TOKENS_SPEC);\n  if (imp_tokensRoot != null) {\n    rootGrammar.tool.log(\"grammar\",\"imported tokens: \" + imp_tokensRoot.getChildren());\n    if (tokensRoot == null) {\n      tokensRoot=(GrammarAST)adaptor.create(ANTLRParser.TOKENS_SPEC,\"TOKENS\");\n      tokensRoot.g=rootGrammar;\n      root.insertChild(1,tokensRoot);\n    }\n    tokensRoot.addChildren(Arrays.asList(imp_tokensRoot.getChildren().toArray(new Tree[0])));\n  }\n  List<GrammarAST> all_actionRoots=new ArrayList<GrammarAST>();\n  List<GrammarAST> imp_actionRoots=imp.ast.getAllChildrenWithType(ANTLRParser.AT);\n  if (actionRoots != null)   all_actionRoots.addAll(actionRoots);\n  all_actionRoots.addAll(imp_actionRoots);\n  if (imp_actionRoots != null) {\n    DoubleKeyMap<String,String,GrammarAST> namedActions=new DoubleKeyMap<String,String,GrammarAST>();\n    rootGrammar.tool.log(\"grammar\",\"imported actions: \" + imp_actionRoots);\n    for (    GrammarAST at : all_actionRoots) {\n      String scopeName=rootGrammar.getDefaultActionScope();\n      GrammarAST scope, name, action;\n      if (at.getChildCount() > 2) {\n        scope=(GrammarAST)at.getChild(0);\n        scopeName=scope.getText();\n        name=(GrammarAST)at.getChild(1);\n        action=(GrammarAST)at.getChild(2);\n      }\n else {\n        name=(GrammarAST)at.getChild(0);\n        action=(GrammarAST)at.getChild(1);\n      }\n      GrammarAST prevAction=namedActions.get(scopeName,name.getText());\n      if (prevAction == null) {\n        namedActions.put(scopeName,name.getText(),action);\n      }\n else {\n        if (prevAction.g == at.g) {\n          rootGrammar.tool.errMgr.grammarError(ErrorType.ACTION_REDEFINITION,at.g.fileName,name.token,name.getText());\n        }\n else {\n          String s1=prevAction.getText();\n          s1=s1.substring(1,s1.length() - 1);\n          String s2=action.getText();\n          s2=s2.substring(1,s2.length() - 1);\n          String combinedAction=\"{\" + s1 + '\\n'+ s2+ \"}\";\n          prevAction.token.setText(combinedAction);\n        }\n      }\n    }\n    for (    String scopeName : namedActions.keySet()) {\n      for (      String name : namedActions.keySet(scopeName)) {\n        GrammarAST action=namedActions.get(scopeName,name);\n        rootGrammar.tool.log(\"grammar\",action.g.name + \" \" + scopeName+ \":\"+ name+ \"=\"+ action.getText());\n        if (action.g != rootGrammar) {\n          root.insertChild(1,action.getParent());\n        }\n      }\n    }\n  }\n  List<GrammarAST> modes=imp.ast.getNodesWithType(ANTLRParser.MODE);\n  if (modes != null) {\n    for (    GrammarAST m : modes) {\n      rootGrammar.tool.log(\"grammar\",\"imported mode: \" + m.toStringTree());\n      String name=m.getChild(0).getText();\n      boolean rootAlreadyHasMode=rootModeNames.contains(name);\n      GrammarAST destinationAST=null;\n      if (rootAlreadyHasMode) {\n        for (        GrammarAST m2 : rootModes) {\n          if (m2.getChild(0).getText().equals(name)) {\n            destinationAST=m2;\n            break;\n          }\n        }\n      }\n else {\n        destinationAST=m.dupNode();\n        destinationAST.addChild(m.getChild(0).dupNode());\n      }\n      int addedRules=0;\n      List<GrammarAST> modeRules=m.getAllChildrenWithType(ANTLRParser.RULE);\n      for (      GrammarAST r : modeRules) {\n        rootGrammar.tool.log(\"grammar\",\"imported rule: \" + r.toStringTree());\n        String ruleName=r.getChild(0).getText();\n        boolean rootAlreadyHasRule=rootRuleNames.contains(ruleName);\n        if (!rootAlreadyHasRule) {\n          destinationAST.addChild(r);\n          addedRules++;\n          rootRuleNames.add(ruleName);\n        }\n      }\n      if (!rootAlreadyHasMode && addedRules > 0) {\n        rootGrammar.ast.addChild(destinationAST);\n        rootModeNames.add(name);\n        rootModes.add(destinationAST);\n      }\n    }\n  }\n  List<GrammarAST> rules=imp.ast.getNodesWithType(ANTLRParser.RULE);\n  if (rules != null) {\n    for (    GrammarAST r : rules) {\n      rootGrammar.tool.log(\"grammar\",\"imported rule: \" + r.toStringTree());\n      String name=r.getChild(0).getText();\n      boolean rootAlreadyHasRule=rootRuleNames.contains(name);\n      if (!rootAlreadyHasRule) {\n        RULES.addChild(r);\n        rootRuleNames.add(name);\n      }\n    }\n  }\n  GrammarAST optionsRoot=(GrammarAST)imp.ast.getFirstChildWithType(ANTLRParser.OPTIONS);\n  if (optionsRoot != null) {\n    boolean hasNewOption=false;\n    for (    Map.Entry<String,GrammarAST> option : imp.ast.getOptions().entrySet()) {\n      String importOption=imp.ast.getOptionString(option.getKey());\n      if (importOption == null) {\n        continue;\n      }\n      String rootOption=rootGrammar.ast.getOptionString(option.getKey());\n      if (!importOption.equals(rootOption)) {\n        hasNewOption=true;\n        break;\n      }\n    }\n    if (hasNewOption) {\n      rootGrammar.tool.errMgr.grammarError(ErrorType.OPTIONS_IN_DELEGATE,optionsRoot.g.fileName,optionsRoot.token,imp.name);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 965,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7142,
        "startLineNumber" : 182,
        "startColumnNumber" : 2,
        "endLineNumber" : 364,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (Grammar imp : imports) {\n  GrammarAST imp_channelRoot=(GrammarAST)imp.ast.getFirstChildWithType(ANTLRParser.CHANNELS);\n  if (imp_channelRoot != null) {\n    rootGrammar.tool.log(\"grammar\",\"imported channels: \" + imp_channelRoot.getChildren());\n    if (channelsRoot == null) {\n      channelsRoot=imp_channelRoot.dupTree();\n      channelsRoot.g=rootGrammar;\n      root.insertChild(1,channelsRoot);\n    }\n else {\n      for (int c=0; c < imp_channelRoot.getChildCount(); ++c) {\n        String channel=imp_channelRoot.getChild(c).getText();\n        boolean channelIsInRootGrammar=false;\n        for (int rc=0; rc < channelsRoot.getChildCount(); ++rc) {\n          String rootChannel=channelsRoot.getChild(rc).getText();\n          if (rootChannel.equals(channel)) {\n            channelIsInRootGrammar=true;\n            break;\n          }\n        }\n        if (!channelIsInRootGrammar) {\n          channelsRoot.addChild(imp_channelRoot.getChild(c).dupNode());\n        }\n      }\n    }\n  }\n  GrammarAST imp_tokensRoot=(GrammarAST)imp.ast.getFirstChildWithType(ANTLRParser.TOKENS_SPEC);\n  if (imp_tokensRoot != null) {\n    rootGrammar.tool.log(\"grammar\",\"imported tokens: \" + imp_tokensRoot.getChildren());\n    if (tokensRoot == null) {\n      tokensRoot=(GrammarAST)adaptor.create(ANTLRParser.TOKENS_SPEC,\"TOKENS\");\n      tokensRoot.g=rootGrammar;\n      root.insertChild(1,tokensRoot);\n    }\n    tokensRoot.addChildren(Arrays.asList(imp_tokensRoot.getChildren().toArray(new Tree[0])));\n  }\n  List<GrammarAST> all_actionRoots=new ArrayList<GrammarAST>();\n  List<GrammarAST> imp_actionRoots=imp.ast.getAllChildrenWithType(ANTLRParser.AT);\n  if (actionRoots != null)   all_actionRoots.addAll(actionRoots);\n  all_actionRoots.addAll(imp_actionRoots);\n  if (imp_actionRoots != null) {\n    DoubleKeyMap<String,String,GrammarAST> namedActions=new DoubleKeyMap<String,String,GrammarAST>();\n    rootGrammar.tool.log(\"grammar\",\"imported actions: \" + imp_actionRoots);\n    for (    GrammarAST at : all_actionRoots) {\n      String scopeName=rootGrammar.getDefaultActionScope();\n      GrammarAST scope, name, action;\n      if (at.getChildCount() > 2) {\n        scope=(GrammarAST)at.getChild(0);\n        scopeName=scope.getText();\n        name=(GrammarAST)at.getChild(1);\n        action=(GrammarAST)at.getChild(2);\n      }\n else {\n        name=(GrammarAST)at.getChild(0);\n        action=(GrammarAST)at.getChild(1);\n      }\n      GrammarAST prevAction=namedActions.get(scopeName,name.getText());\n      if (prevAction == null) {\n        namedActions.put(scopeName,name.getText(),action);\n      }\n else {\n        if (prevAction.g == at.g) {\n          rootGrammar.tool.errMgr.grammarError(ErrorType.ACTION_REDEFINITION,at.g.fileName,name.token,name.getText());\n        }\n else {\n          String s1=prevAction.getText();\n          s1=s1.substring(1,s1.length() - 1);\n          String s2=action.getText();\n          s2=s2.substring(1,s2.length() - 1);\n          String combinedAction=\"{\" + s1 + '\\n'+ s2+ \"}\";\n          prevAction.token.setText(combinedAction);\n        }\n      }\n    }\n    for (    String scopeName : namedActions.keySet()) {\n      for (      String name : namedActions.keySet(scopeName)) {\n        GrammarAST action=namedActions.get(scopeName,name);\n        rootGrammar.tool.log(\"grammar\",action.g.name + \" \" + scopeName+ \":\"+ name+ \"=\"+ action.getText());\n        if (action.g != rootGrammar) {\n          root.insertChild(1,action.getParent());\n        }\n      }\n    }\n  }\n  List<GrammarAST> modes=imp.ast.getNodesWithType(ANTLRParser.MODE);\n  if (modes != null) {\n    for (    GrammarAST m : modes) {\n      rootGrammar.tool.log(\"grammar\",\"imported mode: \" + m.toStringTree());\n      String name=m.getChild(0).getText();\n      boolean rootAlreadyHasMode=rootModeNames.contains(name);\n      GrammarAST destinationAST=null;\n      if (rootAlreadyHasMode) {\n        for (        GrammarAST m2 : rootModes) {\n          if (m2.getChild(0).getText().equals(name)) {\n            destinationAST=m2;\n            break;\n          }\n        }\n      }\n else {\n        destinationAST=m.dupNode();\n        destinationAST.addChild(m.getChild(0).dupNode());\n      }\n      int addedRules=0;\n      List<GrammarAST> modeRules=m.getAllChildrenWithType(ANTLRParser.RULE);\n      for (      GrammarAST r : modeRules) {\n        rootGrammar.tool.log(\"grammar\",\"imported rule: \" + r.toStringTree());\n        String ruleName=r.getChild(0).getText();\n        boolean rootAlreadyHasRule=rootRuleNames.contains(ruleName);\n        if (!rootAlreadyHasRule) {\n          destinationAST.addChild(r);\n          addedRules++;\n          rootRuleNames.add(ruleName);\n        }\n      }\n      if (!rootAlreadyHasMode && addedRules > 0) {\n        rootGrammar.ast.addChild(destinationAST);\n        rootModeNames.add(name);\n        rootModes.add(destinationAST);\n      }\n    }\n  }\n  List<GrammarAST> rules=imp.ast.getNodesWithType(ANTLRParser.RULE);\n  if (rules != null) {\n    for (    GrammarAST r : rules) {\n      rootGrammar.tool.log(\"grammar\",\"imported rule: \" + r.toStringTree());\n      String name=r.getChild(0).getText();\n      boolean rootAlreadyHasRule=rootRuleNames.contains(name);\n      if (!rootAlreadyHasRule) {\n        RULES.addChild(r);\n        rootRuleNames.add(name);\n      }\n    }\n  }\n  GrammarAST optionsRoot=(GrammarAST)imp.ast.getFirstChildWithType(ANTLRParser.OPTIONS);\n  if (optionsRoot != null) {\n    boolean hasNewOption=false;\n    for (    Map.Entry<String,GrammarAST> option : imp.ast.getOptions().entrySet()) {\n      String importOption=imp.ast.getOptionString(option.getKey());\n      if (importOption == null) {\n        continue;\n      }\n      String rootOption=rootGrammar.ast.getOptionString(option.getKey());\n      if (!importOption.equals(rootOption)) {\n        hasNewOption=true;\n        break;\n      }\n    }\n    if (hasNewOption) {\n      rootGrammar.tool.errMgr.grammarError(ErrorType.OPTIONS_IN_DELEGATE,optionsRoot.g.fileName,optionsRoot.token,imp.name);\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 971,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8494,
        "startLineNumber" : 156,
        "startColumnNumber" : 60,
        "endLineNumber" : 366,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  List<Grammar> imports=rootGrammar.getAllImportedGrammars();\n  if (imports == null)   return;\n  GrammarAST root=rootGrammar.ast;\n  GrammarAST id=(GrammarAST)root.getChild(0);\n  GrammarASTAdaptor adaptor=new GrammarASTAdaptor(id.token.getInputStream());\n  GrammarAST channelsRoot=(GrammarAST)root.getFirstChildWithType(ANTLRParser.CHANNELS);\n  GrammarAST tokensRoot=(GrammarAST)root.getFirstChildWithType(ANTLRParser.TOKENS_SPEC);\n  List<GrammarAST> actionRoots=root.getNodesWithType(ANTLRParser.AT);\n  GrammarAST RULES=(GrammarAST)root.getFirstChildWithType(ANTLRParser.RULES);\n  Set<String> rootRuleNames=new HashSet<String>();\n  List<GrammarAST> rootRules=RULES.getNodesWithType(ANTLRParser.RULE);\n  for (  GrammarAST r : rootRules)   rootRuleNames.add(r.getChild(0).getText());\n  List<GrammarAST> rootModes=root.getNodesWithType(ANTLRParser.MODE);\n  Set<String> rootModeNames=new HashSet<String>();\n  for (  GrammarAST m : rootModes)   rootModeNames.add(m.getChild(0).getText());\n  List<GrammarAST> addedModes=new ArrayList<GrammarAST>();\n  for (  Grammar imp : imports) {\n    GrammarAST imp_channelRoot=(GrammarAST)imp.ast.getFirstChildWithType(ANTLRParser.CHANNELS);\n    if (imp_channelRoot != null) {\n      rootGrammar.tool.log(\"grammar\",\"imported channels: \" + imp_channelRoot.getChildren());\n      if (channelsRoot == null) {\n        channelsRoot=imp_channelRoot.dupTree();\n        channelsRoot.g=rootGrammar;\n        root.insertChild(1,channelsRoot);\n      }\n else {\n        for (int c=0; c < imp_channelRoot.getChildCount(); ++c) {\n          String channel=imp_channelRoot.getChild(c).getText();\n          boolean channelIsInRootGrammar=false;\n          for (int rc=0; rc < channelsRoot.getChildCount(); ++rc) {\n            String rootChannel=channelsRoot.getChild(rc).getText();\n            if (rootChannel.equals(channel)) {\n              channelIsInRootGrammar=true;\n              break;\n            }\n          }\n          if (!channelIsInRootGrammar) {\n            channelsRoot.addChild(imp_channelRoot.getChild(c).dupNode());\n          }\n        }\n      }\n    }\n    GrammarAST imp_tokensRoot=(GrammarAST)imp.ast.getFirstChildWithType(ANTLRParser.TOKENS_SPEC);\n    if (imp_tokensRoot != null) {\n      rootGrammar.tool.log(\"grammar\",\"imported tokens: \" + imp_tokensRoot.getChildren());\n      if (tokensRoot == null) {\n        tokensRoot=(GrammarAST)adaptor.create(ANTLRParser.TOKENS_SPEC,\"TOKENS\");\n        tokensRoot.g=rootGrammar;\n        root.insertChild(1,tokensRoot);\n      }\n      tokensRoot.addChildren(Arrays.asList(imp_tokensRoot.getChildren().toArray(new Tree[0])));\n    }\n    List<GrammarAST> all_actionRoots=new ArrayList<GrammarAST>();\n    List<GrammarAST> imp_actionRoots=imp.ast.getAllChildrenWithType(ANTLRParser.AT);\n    if (actionRoots != null)     all_actionRoots.addAll(actionRoots);\n    all_actionRoots.addAll(imp_actionRoots);\n    if (imp_actionRoots != null) {\n      DoubleKeyMap<String,String,GrammarAST> namedActions=new DoubleKeyMap<String,String,GrammarAST>();\n      rootGrammar.tool.log(\"grammar\",\"imported actions: \" + imp_actionRoots);\n      for (      GrammarAST at : all_actionRoots) {\n        String scopeName=rootGrammar.getDefaultActionScope();\n        GrammarAST scope, name, action;\n        if (at.getChildCount() > 2) {\n          scope=(GrammarAST)at.getChild(0);\n          scopeName=scope.getText();\n          name=(GrammarAST)at.getChild(1);\n          action=(GrammarAST)at.getChild(2);\n        }\n else {\n          name=(GrammarAST)at.getChild(0);\n          action=(GrammarAST)at.getChild(1);\n        }\n        GrammarAST prevAction=namedActions.get(scopeName,name.getText());\n        if (prevAction == null) {\n          namedActions.put(scopeName,name.getText(),action);\n        }\n else {\n          if (prevAction.g == at.g) {\n            rootGrammar.tool.errMgr.grammarError(ErrorType.ACTION_REDEFINITION,at.g.fileName,name.token,name.getText());\n          }\n else {\n            String s1=prevAction.getText();\n            s1=s1.substring(1,s1.length() - 1);\n            String s2=action.getText();\n            s2=s2.substring(1,s2.length() - 1);\n            String combinedAction=\"{\" + s1 + '\\n'+ s2+ \"}\";\n            prevAction.token.setText(combinedAction);\n          }\n        }\n      }\n      for (      String scopeName : namedActions.keySet()) {\n        for (        String name : namedActions.keySet(scopeName)) {\n          GrammarAST action=namedActions.get(scopeName,name);\n          rootGrammar.tool.log(\"grammar\",action.g.name + \" \" + scopeName+ \":\"+ name+ \"=\"+ action.getText());\n          if (action.g != rootGrammar) {\n            root.insertChild(1,action.getParent());\n          }\n        }\n      }\n    }\n    List<GrammarAST> modes=imp.ast.getNodesWithType(ANTLRParser.MODE);\n    if (modes != null) {\n      for (      GrammarAST m : modes) {\n        rootGrammar.tool.log(\"grammar\",\"imported mode: \" + m.toStringTree());\n        String name=m.getChild(0).getText();\n        boolean rootAlreadyHasMode=rootModeNames.contains(name);\n        GrammarAST destinationAST=null;\n        if (rootAlreadyHasMode) {\n          for (          GrammarAST m2 : rootModes) {\n            if (m2.getChild(0).getText().equals(name)) {\n              destinationAST=m2;\n              break;\n            }\n          }\n        }\n else {\n          destinationAST=m.dupNode();\n          destinationAST.addChild(m.getChild(0).dupNode());\n        }\n        int addedRules=0;\n        List<GrammarAST> modeRules=m.getAllChildrenWithType(ANTLRParser.RULE);\n        for (        GrammarAST r : modeRules) {\n          rootGrammar.tool.log(\"grammar\",\"imported rule: \" + r.toStringTree());\n          String ruleName=r.getChild(0).getText();\n          boolean rootAlreadyHasRule=rootRuleNames.contains(ruleName);\n          if (!rootAlreadyHasRule) {\n            destinationAST.addChild(r);\n            addedRules++;\n            rootRuleNames.add(ruleName);\n          }\n        }\n        if (!rootAlreadyHasMode && addedRules > 0) {\n          rootGrammar.ast.addChild(destinationAST);\n          rootModeNames.add(name);\n          rootModes.add(destinationAST);\n        }\n      }\n    }\n    List<GrammarAST> rules=imp.ast.getNodesWithType(ANTLRParser.RULE);\n    if (rules != null) {\n      for (      GrammarAST r : rules) {\n        rootGrammar.tool.log(\"grammar\",\"imported rule: \" + r.toStringTree());\n        String name=r.getChild(0).getText();\n        boolean rootAlreadyHasRule=rootRuleNames.contains(name);\n        if (!rootAlreadyHasRule) {\n          RULES.addChild(r);\n          rootRuleNames.add(name);\n        }\n      }\n    }\n    GrammarAST optionsRoot=(GrammarAST)imp.ast.getFirstChildWithType(ANTLRParser.OPTIONS);\n    if (optionsRoot != null) {\n      boolean hasNewOption=false;\n      for (      Map.Entry<String,GrammarAST> option : imp.ast.getOptions().entrySet()) {\n        String importOption=imp.ast.getOptionString(option.getKey());\n        if (importOption == null) {\n          continue;\n        }\n        String rootOption=rootGrammar.ast.getOptionString(option.getKey());\n        if (!importOption.equals(rootOption)) {\n          hasNewOption=true;\n          break;\n        }\n      }\n      if (hasNewOption) {\n        rootGrammar.tool.errMgr.grammarError(ErrorType.OPTIONS_IN_DELEGATE,optionsRoot.g.fileName,optionsRoot.token,imp.name);\n      }\n    }\n  }\n  rootGrammar.tool.log(\"grammar\",\"Grammar: \" + rootGrammar.ast.toStringTree());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1193,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 9067,
        "startLineNumber" : 142,
        "startColumnNumber" : 1,
        "endLineNumber" : 366,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Merge all the rules, token definitions, and named actions from imported grammars into the root grammar tree.  Perform: (tokens { X (= Y 'y')) + (tokens { Z )\t-&gt;\t(tokens { X (= Y 'y') Z) (@ members {foo}) + (@ members {bar})\t-&gt;\t(@ members {foobar}) (RULES (RULE x y)) + (RULES (RULE z))\t-&gt;\t(RULES (RULE x y z)) Rules in root prevent same rule from being appended to RULES node. The goal is a complete combined grammar so we can ignore subordinate grammars.\n */\npublic void integrateImportedGrammars(Grammar rootGrammar){\n  List<Grammar> imports=rootGrammar.getAllImportedGrammars();\n  if (imports == null)   return;\n  GrammarAST root=rootGrammar.ast;\n  GrammarAST id=(GrammarAST)root.getChild(0);\n  GrammarASTAdaptor adaptor=new GrammarASTAdaptor(id.token.getInputStream());\n  GrammarAST channelsRoot=(GrammarAST)root.getFirstChildWithType(ANTLRParser.CHANNELS);\n  GrammarAST tokensRoot=(GrammarAST)root.getFirstChildWithType(ANTLRParser.TOKENS_SPEC);\n  List<GrammarAST> actionRoots=root.getNodesWithType(ANTLRParser.AT);\n  GrammarAST RULES=(GrammarAST)root.getFirstChildWithType(ANTLRParser.RULES);\n  Set<String> rootRuleNames=new HashSet<String>();\n  List<GrammarAST> rootRules=RULES.getNodesWithType(ANTLRParser.RULE);\n  for (  GrammarAST r : rootRules)   rootRuleNames.add(r.getChild(0).getText());\n  List<GrammarAST> rootModes=root.getNodesWithType(ANTLRParser.MODE);\n  Set<String> rootModeNames=new HashSet<String>();\n  for (  GrammarAST m : rootModes)   rootModeNames.add(m.getChild(0).getText());\n  List<GrammarAST> addedModes=new ArrayList<GrammarAST>();\n  for (  Grammar imp : imports) {\n    GrammarAST imp_channelRoot=(GrammarAST)imp.ast.getFirstChildWithType(ANTLRParser.CHANNELS);\n    if (imp_channelRoot != null) {\n      rootGrammar.tool.log(\"grammar\",\"imported channels: \" + imp_channelRoot.getChildren());\n      if (channelsRoot == null) {\n        channelsRoot=imp_channelRoot.dupTree();\n        channelsRoot.g=rootGrammar;\n        root.insertChild(1,channelsRoot);\n      }\n else {\n        for (int c=0; c < imp_channelRoot.getChildCount(); ++c) {\n          String channel=imp_channelRoot.getChild(c).getText();\n          boolean channelIsInRootGrammar=false;\n          for (int rc=0; rc < channelsRoot.getChildCount(); ++rc) {\n            String rootChannel=channelsRoot.getChild(rc).getText();\n            if (rootChannel.equals(channel)) {\n              channelIsInRootGrammar=true;\n              break;\n            }\n          }\n          if (!channelIsInRootGrammar) {\n            channelsRoot.addChild(imp_channelRoot.getChild(c).dupNode());\n          }\n        }\n      }\n    }\n    GrammarAST imp_tokensRoot=(GrammarAST)imp.ast.getFirstChildWithType(ANTLRParser.TOKENS_SPEC);\n    if (imp_tokensRoot != null) {\n      rootGrammar.tool.log(\"grammar\",\"imported tokens: \" + imp_tokensRoot.getChildren());\n      if (tokensRoot == null) {\n        tokensRoot=(GrammarAST)adaptor.create(ANTLRParser.TOKENS_SPEC,\"TOKENS\");\n        tokensRoot.g=rootGrammar;\n        root.insertChild(1,tokensRoot);\n      }\n      tokensRoot.addChildren(Arrays.asList(imp_tokensRoot.getChildren().toArray(new Tree[0])));\n    }\n    List<GrammarAST> all_actionRoots=new ArrayList<GrammarAST>();\n    List<GrammarAST> imp_actionRoots=imp.ast.getAllChildrenWithType(ANTLRParser.AT);\n    if (actionRoots != null)     all_actionRoots.addAll(actionRoots);\n    all_actionRoots.addAll(imp_actionRoots);\n    if (imp_actionRoots != null) {\n      DoubleKeyMap<String,String,GrammarAST> namedActions=new DoubleKeyMap<String,String,GrammarAST>();\n      rootGrammar.tool.log(\"grammar\",\"imported actions: \" + imp_actionRoots);\n      for (      GrammarAST at : all_actionRoots) {\n        String scopeName=rootGrammar.getDefaultActionScope();\n        GrammarAST scope, name, action;\n        if (at.getChildCount() > 2) {\n          scope=(GrammarAST)at.getChild(0);\n          scopeName=scope.getText();\n          name=(GrammarAST)at.getChild(1);\n          action=(GrammarAST)at.getChild(2);\n        }\n else {\n          name=(GrammarAST)at.getChild(0);\n          action=(GrammarAST)at.getChild(1);\n        }\n        GrammarAST prevAction=namedActions.get(scopeName,name.getText());\n        if (prevAction == null) {\n          namedActions.put(scopeName,name.getText(),action);\n        }\n else {\n          if (prevAction.g == at.g) {\n            rootGrammar.tool.errMgr.grammarError(ErrorType.ACTION_REDEFINITION,at.g.fileName,name.token,name.getText());\n          }\n else {\n            String s1=prevAction.getText();\n            s1=s1.substring(1,s1.length() - 1);\n            String s2=action.getText();\n            s2=s2.substring(1,s2.length() - 1);\n            String combinedAction=\"{\" + s1 + '\\n'+ s2+ \"}\";\n            prevAction.token.setText(combinedAction);\n          }\n        }\n      }\n      for (      String scopeName : namedActions.keySet()) {\n        for (        String name : namedActions.keySet(scopeName)) {\n          GrammarAST action=namedActions.get(scopeName,name);\n          rootGrammar.tool.log(\"grammar\",action.g.name + \" \" + scopeName+ \":\"+ name+ \"=\"+ action.getText());\n          if (action.g != rootGrammar) {\n            root.insertChild(1,action.getParent());\n          }\n        }\n      }\n    }\n    List<GrammarAST> modes=imp.ast.getNodesWithType(ANTLRParser.MODE);\n    if (modes != null) {\n      for (      GrammarAST m : modes) {\n        rootGrammar.tool.log(\"grammar\",\"imported mode: \" + m.toStringTree());\n        String name=m.getChild(0).getText();\n        boolean rootAlreadyHasMode=rootModeNames.contains(name);\n        GrammarAST destinationAST=null;\n        if (rootAlreadyHasMode) {\n          for (          GrammarAST m2 : rootModes) {\n            if (m2.getChild(0).getText().equals(name)) {\n              destinationAST=m2;\n              break;\n            }\n          }\n        }\n else {\n          destinationAST=m.dupNode();\n          destinationAST.addChild(m.getChild(0).dupNode());\n        }\n        int addedRules=0;\n        List<GrammarAST> modeRules=m.getAllChildrenWithType(ANTLRParser.RULE);\n        for (        GrammarAST r : modeRules) {\n          rootGrammar.tool.log(\"grammar\",\"imported rule: \" + r.toStringTree());\n          String ruleName=r.getChild(0).getText();\n          boolean rootAlreadyHasRule=rootRuleNames.contains(ruleName);\n          if (!rootAlreadyHasRule) {\n            destinationAST.addChild(r);\n            addedRules++;\n            rootRuleNames.add(ruleName);\n          }\n        }\n        if (!rootAlreadyHasMode && addedRules > 0) {\n          rootGrammar.ast.addChild(destinationAST);\n          rootModeNames.add(name);\n          rootModes.add(destinationAST);\n        }\n      }\n    }\n    List<GrammarAST> rules=imp.ast.getNodesWithType(ANTLRParser.RULE);\n    if (rules != null) {\n      for (      GrammarAST r : rules) {\n        rootGrammar.tool.log(\"grammar\",\"imported rule: \" + r.toStringTree());\n        String name=r.getChild(0).getText();\n        boolean rootAlreadyHasRule=rootRuleNames.contains(name);\n        if (!rootAlreadyHasRule) {\n          RULES.addChild(r);\n          rootRuleNames.add(name);\n        }\n      }\n    }\n    GrammarAST optionsRoot=(GrammarAST)imp.ast.getFirstChildWithType(ANTLRParser.OPTIONS);\n    if (optionsRoot != null) {\n      boolean hasNewOption=false;\n      for (      Map.Entry<String,GrammarAST> option : imp.ast.getOptions().entrySet()) {\n        String importOption=imp.ast.getOptionString(option.getKey());\n        if (importOption == null) {\n          continue;\n        }\n        String rootOption=rootGrammar.ast.getOptionString(option.getKey());\n        if (!importOption.equals(rootOption)) {\n          hasNewOption=true;\n          break;\n        }\n      }\n      if (hasNewOption) {\n        rootGrammar.tool.errMgr.grammarError(ErrorType.OPTIONS_IN_DELEGATE,optionsRoot.g.fileName,optionsRoot.token,imp.name);\n      }\n    }\n  }\n  rootGrammar.tool.log(\"grammar\",\"Grammar: \" + rootGrammar.ast.toStringTree());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1202,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 256,
        "startColumnNumber" : 7,
        "endLineNumber" : 256,
        "endColumnNumber" : 43
      },
      "nodeContext" : "s1=s1.substring(1,s1.length() - 1);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "s1",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 259,
      "startColumnNumber" : 35,
      "endLineNumber" : 259,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 259,
        "startColumnNumber" : 31,
        "endLineNumber" : 259,
        "endColumnNumber" : 52
      },
      "nodeContext" : "\"{\" + s1 + '\\n'+ s2+ \"}\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 259,
        "startColumnNumber" : 14,
        "endLineNumber" : 259,
        "endColumnNumber" : 52
      },
      "nodeContext" : "combinedAction=\"{\" + s1 + '\\n'+ s2+ \"}\"",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 259,
        "startColumnNumber" : 7,
        "endLineNumber" : 259,
        "endColumnNumber" : 53
      },
      "nodeContext" : "String combinedAction=\"{\" + s1 + '\\n'+ s2+ \"}\";\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 285,
        "startLineNumber" : 254,
        "startColumnNumber" : 11,
        "endLineNumber" : 261,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  String s1=prevAction.getText();\n  s1=s1.substring(1,s1.length() - 1);\n  String s2=action.getText();\n  s2=s2.substring(1,s2.length() - 1);\n  String combinedAction=\"{\" + s1 + '\\n'+ s2+ \"}\";\n  prevAction.token.setText(combinedAction);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 59,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 469,
        "startLineNumber" : 250,
        "startColumnNumber" : 6,
        "endLineNumber" : 261,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (prevAction.g == at.g) {\n  rootGrammar.tool.errMgr.grammarError(ErrorType.ACTION_REDEFINITION,at.g.fileName,name.token,name.getText());\n}\n else {\n  String s1=prevAction.getText();\n  s1=s1.substring(1,s1.length() - 1);\n  String s2=action.getText();\n  s2=s2.substring(1,s2.length() - 1);\n  String combinedAction=\"{\" + s1 + '\\n'+ s2+ \"}\";\n  prevAction.token.setText(combinedAction);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 90,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 486,
        "startLineNumber" : 249,
        "startColumnNumber" : 10,
        "endLineNumber" : 262,
        "endColumnNumber" : 6
      },
      "nodeContext" : "{\n  if (prevAction.g == at.g) {\n    rootGrammar.tool.errMgr.grammarError(ErrorType.ACTION_REDEFINITION,at.g.fileName,name.token,name.getText());\n  }\n else {\n    String s1=prevAction.getText();\n    s1=s1.substring(1,s1.length() - 1);\n    String s2=action.getText();\n    s2=s2.substring(1,s2.length() - 1);\n    String combinedAction=\"{\" + s1 + '\\n'+ s2+ \"}\";\n    prevAction.token.setText(combinedAction);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 91,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 591,
        "startLineNumber" : 246,
        "startColumnNumber" : 5,
        "endLineNumber" : 262,
        "endColumnNumber" : 6
      },
      "nodeContext" : "if (prevAction == null) {\n  namedActions.put(scopeName,name.getText(),action);\n}\n else {\n  if (prevAction.g == at.g) {\n    rootGrammar.tool.errMgr.grammarError(ErrorType.ACTION_REDEFINITION,at.g.fileName,name.token,name.getText());\n  }\n else {\n    String s1=prevAction.getText();\n    s1=s1.substring(1,s1.length() - 1);\n    String s2=action.getText();\n    s2=s2.substring(1,s2.length() - 1);\n    String combinedAction=\"{\" + s1 + '\\n'+ s2+ \"}\";\n    prevAction.token.setText(combinedAction);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 105,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1118,
        "startLineNumber" : 232,
        "startColumnNumber" : 42,
        "endLineNumber" : 263,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String scopeName=rootGrammar.getDefaultActionScope();\n  GrammarAST scope, name, action;\n  if (at.getChildCount() > 2) {\n    scope=(GrammarAST)at.getChild(0);\n    scopeName=scope.getText();\n    name=(GrammarAST)at.getChild(1);\n    action=(GrammarAST)at.getChild(2);\n  }\n else {\n    name=(GrammarAST)at.getChild(0);\n    action=(GrammarAST)at.getChild(1);\n  }\n  GrammarAST prevAction=namedActions.get(scopeName,name.getText());\n  if (prevAction == null) {\n    namedActions.put(scopeName,name.getText(),action);\n  }\n else {\n    if (prevAction.g == at.g) {\n      rootGrammar.tool.errMgr.grammarError(ErrorType.ACTION_REDEFINITION,at.g.fileName,name.token,name.getText());\n    }\n else {\n      String s1=prevAction.getText();\n      s1=s1.substring(1,s1.length() - 1);\n      String s2=action.getText();\n      s2=s2.substring(1,s2.length() - 1);\n      String combinedAction=\"{\" + s1 + '\\n'+ s2+ \"}\";\n      prevAction.token.setText(combinedAction);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 199,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1156,
        "startLineNumber" : 232,
        "startColumnNumber" : 4,
        "endLineNumber" : 263,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (GrammarAST at : all_actionRoots) {\n  String scopeName=rootGrammar.getDefaultActionScope();\n  GrammarAST scope, name, action;\n  if (at.getChildCount() > 2) {\n    scope=(GrammarAST)at.getChild(0);\n    scopeName=scope.getText();\n    name=(GrammarAST)at.getChild(1);\n    action=(GrammarAST)at.getChild(2);\n  }\n else {\n    name=(GrammarAST)at.getChild(0);\n    action=(GrammarAST)at.getChild(1);\n  }\n  GrammarAST prevAction=namedActions.get(scopeName,name.getText());\n  if (prevAction == null) {\n    namedActions.put(scopeName,name.getText(),action);\n  }\n else {\n    if (prevAction.g == at.g) {\n      rootGrammar.tool.errMgr.grammarError(ErrorType.ACTION_REDEFINITION,at.g.fileName,name.token,name.getText());\n    }\n else {\n      String s1=prevAction.getText();\n      s1=s1.substring(1,s1.length() - 1);\n      String s2=action.getText();\n      s2=s2.substring(1,s2.length() - 1);\n      String combinedAction=\"{\" + s1 + '\\n'+ s2+ \"}\";\n      prevAction.token.setText(combinedAction);\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 205,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1940,
        "startLineNumber" : 227,
        "startColumnNumber" : 32,
        "endLineNumber" : 276,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  DoubleKeyMap<String,String,GrammarAST> namedActions=new DoubleKeyMap<String,String,GrammarAST>();\n  rootGrammar.tool.log(\"grammar\",\"imported actions: \" + imp_actionRoots);\n  for (  GrammarAST at : all_actionRoots) {\n    String scopeName=rootGrammar.getDefaultActionScope();\n    GrammarAST scope, name, action;\n    if (at.getChildCount() > 2) {\n      scope=(GrammarAST)at.getChild(0);\n      scopeName=scope.getText();\n      name=(GrammarAST)at.getChild(1);\n      action=(GrammarAST)at.getChild(2);\n    }\n else {\n      name=(GrammarAST)at.getChild(0);\n      action=(GrammarAST)at.getChild(1);\n    }\n    GrammarAST prevAction=namedActions.get(scopeName,name.getText());\n    if (prevAction == null) {\n      namedActions.put(scopeName,name.getText(),action);\n    }\n else {\n      if (prevAction.g == at.g) {\n        rootGrammar.tool.errMgr.grammarError(ErrorType.ACTION_REDEFINITION,at.g.fileName,name.token,name.getText());\n      }\n else {\n        String s1=prevAction.getText();\n        s1=s1.substring(1,s1.length() - 1);\n        String s2=action.getText();\n        s2=s2.substring(1,s2.length() - 1);\n        String combinedAction=\"{\" + s1 + '\\n'+ s2+ \"}\";\n        prevAction.token.setText(combinedAction);\n      }\n    }\n  }\n  for (  String scopeName : namedActions.keySet()) {\n    for (    String name : namedActions.keySet(scopeName)) {\n      GrammarAST action=namedActions.get(scopeName,name);\n      rootGrammar.tool.log(\"grammar\",action.g.name + \" \" + scopeName+ \":\"+ name+ \"=\"+ action.getText());\n      if (action.g != rootGrammar) {\n        root.insertChild(1,action.getParent());\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 303,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1969,
        "startLineNumber" : 227,
        "startColumnNumber" : 3,
        "endLineNumber" : 276,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (imp_actionRoots != null) {\n  DoubleKeyMap<String,String,GrammarAST> namedActions=new DoubleKeyMap<String,String,GrammarAST>();\n  rootGrammar.tool.log(\"grammar\",\"imported actions: \" + imp_actionRoots);\n  for (  GrammarAST at : all_actionRoots) {\n    String scopeName=rootGrammar.getDefaultActionScope();\n    GrammarAST scope, name, action;\n    if (at.getChildCount() > 2) {\n      scope=(GrammarAST)at.getChild(0);\n      scopeName=scope.getText();\n      name=(GrammarAST)at.getChild(1);\n      action=(GrammarAST)at.getChild(2);\n    }\n else {\n      name=(GrammarAST)at.getChild(0);\n      action=(GrammarAST)at.getChild(1);\n    }\n    GrammarAST prevAction=namedActions.get(scopeName,name.getText());\n    if (prevAction == null) {\n      namedActions.put(scopeName,name.getText(),action);\n    }\n else {\n      if (prevAction.g == at.g) {\n        rootGrammar.tool.errMgr.grammarError(ErrorType.ACTION_REDEFINITION,at.g.fileName,name.token,name.getText());\n      }\n else {\n        String s1=prevAction.getText();\n        s1=s1.substring(1,s1.length() - 1);\n        String s2=action.getText();\n        s2=s2.substring(1,s2.length() - 1);\n        String combinedAction=\"{\" + s1 + '\\n'+ s2+ \"}\";\n        prevAction.token.setText(combinedAction);\n      }\n    }\n  }\n  for (  String scopeName : namedActions.keySet()) {\n    for (    String name : namedActions.keySet(scopeName)) {\n      GrammarAST action=namedActions.get(scopeName,name);\n      rootGrammar.tool.log(\"grammar\",action.g.name + \" \" + scopeName+ \":\"+ name+ \"=\"+ action.getText());\n      if (action.g != rootGrammar) {\n        root.insertChild(1,action.getParent());\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 307,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 7114,
        "startLineNumber" : 182,
        "startColumnNumber" : 30,
        "endLineNumber" : 364,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  GrammarAST imp_channelRoot=(GrammarAST)imp.ast.getFirstChildWithType(ANTLRParser.CHANNELS);\n  if (imp_channelRoot != null) {\n    rootGrammar.tool.log(\"grammar\",\"imported channels: \" + imp_channelRoot.getChildren());\n    if (channelsRoot == null) {\n      channelsRoot=imp_channelRoot.dupTree();\n      channelsRoot.g=rootGrammar;\n      root.insertChild(1,channelsRoot);\n    }\n else {\n      for (int c=0; c < imp_channelRoot.getChildCount(); ++c) {\n        String channel=imp_channelRoot.getChild(c).getText();\n        boolean channelIsInRootGrammar=false;\n        for (int rc=0; rc < channelsRoot.getChildCount(); ++rc) {\n          String rootChannel=channelsRoot.getChild(rc).getText();\n          if (rootChannel.equals(channel)) {\n            channelIsInRootGrammar=true;\n            break;\n          }\n        }\n        if (!channelIsInRootGrammar) {\n          channelsRoot.addChild(imp_channelRoot.getChild(c).dupNode());\n        }\n      }\n    }\n  }\n  GrammarAST imp_tokensRoot=(GrammarAST)imp.ast.getFirstChildWithType(ANTLRParser.TOKENS_SPEC);\n  if (imp_tokensRoot != null) {\n    rootGrammar.tool.log(\"grammar\",\"imported tokens: \" + imp_tokensRoot.getChildren());\n    if (tokensRoot == null) {\n      tokensRoot=(GrammarAST)adaptor.create(ANTLRParser.TOKENS_SPEC,\"TOKENS\");\n      tokensRoot.g=rootGrammar;\n      root.insertChild(1,tokensRoot);\n    }\n    tokensRoot.addChildren(Arrays.asList(imp_tokensRoot.getChildren().toArray(new Tree[0])));\n  }\n  List<GrammarAST> all_actionRoots=new ArrayList<GrammarAST>();\n  List<GrammarAST> imp_actionRoots=imp.ast.getAllChildrenWithType(ANTLRParser.AT);\n  if (actionRoots != null)   all_actionRoots.addAll(actionRoots);\n  all_actionRoots.addAll(imp_actionRoots);\n  if (imp_actionRoots != null) {\n    DoubleKeyMap<String,String,GrammarAST> namedActions=new DoubleKeyMap<String,String,GrammarAST>();\n    rootGrammar.tool.log(\"grammar\",\"imported actions: \" + imp_actionRoots);\n    for (    GrammarAST at : all_actionRoots) {\n      String scopeName=rootGrammar.getDefaultActionScope();\n      GrammarAST scope, name, action;\n      if (at.getChildCount() > 2) {\n        scope=(GrammarAST)at.getChild(0);\n        scopeName=scope.getText();\n        name=(GrammarAST)at.getChild(1);\n        action=(GrammarAST)at.getChild(2);\n      }\n else {\n        name=(GrammarAST)at.getChild(0);\n        action=(GrammarAST)at.getChild(1);\n      }\n      GrammarAST prevAction=namedActions.get(scopeName,name.getText());\n      if (prevAction == null) {\n        namedActions.put(scopeName,name.getText(),action);\n      }\n else {\n        if (prevAction.g == at.g) {\n          rootGrammar.tool.errMgr.grammarError(ErrorType.ACTION_REDEFINITION,at.g.fileName,name.token,name.getText());\n        }\n else {\n          String s1=prevAction.getText();\n          s1=s1.substring(1,s1.length() - 1);\n          String s2=action.getText();\n          s2=s2.substring(1,s2.length() - 1);\n          String combinedAction=\"{\" + s1 + '\\n'+ s2+ \"}\";\n          prevAction.token.setText(combinedAction);\n        }\n      }\n    }\n    for (    String scopeName : namedActions.keySet()) {\n      for (      String name : namedActions.keySet(scopeName)) {\n        GrammarAST action=namedActions.get(scopeName,name);\n        rootGrammar.tool.log(\"grammar\",action.g.name + \" \" + scopeName+ \":\"+ name+ \"=\"+ action.getText());\n        if (action.g != rootGrammar) {\n          root.insertChild(1,action.getParent());\n        }\n      }\n    }\n  }\n  List<GrammarAST> modes=imp.ast.getNodesWithType(ANTLRParser.MODE);\n  if (modes != null) {\n    for (    GrammarAST m : modes) {\n      rootGrammar.tool.log(\"grammar\",\"imported mode: \" + m.toStringTree());\n      String name=m.getChild(0).getText();\n      boolean rootAlreadyHasMode=rootModeNames.contains(name);\n      GrammarAST destinationAST=null;\n      if (rootAlreadyHasMode) {\n        for (        GrammarAST m2 : rootModes) {\n          if (m2.getChild(0).getText().equals(name)) {\n            destinationAST=m2;\n            break;\n          }\n        }\n      }\n else {\n        destinationAST=m.dupNode();\n        destinationAST.addChild(m.getChild(0).dupNode());\n      }\n      int addedRules=0;\n      List<GrammarAST> modeRules=m.getAllChildrenWithType(ANTLRParser.RULE);\n      for (      GrammarAST r : modeRules) {\n        rootGrammar.tool.log(\"grammar\",\"imported rule: \" + r.toStringTree());\n        String ruleName=r.getChild(0).getText();\n        boolean rootAlreadyHasRule=rootRuleNames.contains(ruleName);\n        if (!rootAlreadyHasRule) {\n          destinationAST.addChild(r);\n          addedRules++;\n          rootRuleNames.add(ruleName);\n        }\n      }\n      if (!rootAlreadyHasMode && addedRules > 0) {\n        rootGrammar.ast.addChild(destinationAST);\n        rootModeNames.add(name);\n        rootModes.add(destinationAST);\n      }\n    }\n  }\n  List<GrammarAST> rules=imp.ast.getNodesWithType(ANTLRParser.RULE);\n  if (rules != null) {\n    for (    GrammarAST r : rules) {\n      rootGrammar.tool.log(\"grammar\",\"imported rule: \" + r.toStringTree());\n      String name=r.getChild(0).getText();\n      boolean rootAlreadyHasRule=rootRuleNames.contains(name);\n      if (!rootAlreadyHasRule) {\n        RULES.addChild(r);\n        rootRuleNames.add(name);\n      }\n    }\n  }\n  GrammarAST optionsRoot=(GrammarAST)imp.ast.getFirstChildWithType(ANTLRParser.OPTIONS);\n  if (optionsRoot != null) {\n    boolean hasNewOption=false;\n    for (    Map.Entry<String,GrammarAST> option : imp.ast.getOptions().entrySet()) {\n      String importOption=imp.ast.getOptionString(option.getKey());\n      if (importOption == null) {\n        continue;\n      }\n      String rootOption=rootGrammar.ast.getOptionString(option.getKey());\n      if (!importOption.equals(rootOption)) {\n        hasNewOption=true;\n        break;\n      }\n    }\n    if (hasNewOption) {\n      rootGrammar.tool.errMgr.grammarError(ErrorType.OPTIONS_IN_DELEGATE,optionsRoot.g.fileName,optionsRoot.token,imp.name);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 965,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7142,
        "startLineNumber" : 182,
        "startColumnNumber" : 2,
        "endLineNumber" : 364,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (Grammar imp : imports) {\n  GrammarAST imp_channelRoot=(GrammarAST)imp.ast.getFirstChildWithType(ANTLRParser.CHANNELS);\n  if (imp_channelRoot != null) {\n    rootGrammar.tool.log(\"grammar\",\"imported channels: \" + imp_channelRoot.getChildren());\n    if (channelsRoot == null) {\n      channelsRoot=imp_channelRoot.dupTree();\n      channelsRoot.g=rootGrammar;\n      root.insertChild(1,channelsRoot);\n    }\n else {\n      for (int c=0; c < imp_channelRoot.getChildCount(); ++c) {\n        String channel=imp_channelRoot.getChild(c).getText();\n        boolean channelIsInRootGrammar=false;\n        for (int rc=0; rc < channelsRoot.getChildCount(); ++rc) {\n          String rootChannel=channelsRoot.getChild(rc).getText();\n          if (rootChannel.equals(channel)) {\n            channelIsInRootGrammar=true;\n            break;\n          }\n        }\n        if (!channelIsInRootGrammar) {\n          channelsRoot.addChild(imp_channelRoot.getChild(c).dupNode());\n        }\n      }\n    }\n  }\n  GrammarAST imp_tokensRoot=(GrammarAST)imp.ast.getFirstChildWithType(ANTLRParser.TOKENS_SPEC);\n  if (imp_tokensRoot != null) {\n    rootGrammar.tool.log(\"grammar\",\"imported tokens: \" + imp_tokensRoot.getChildren());\n    if (tokensRoot == null) {\n      tokensRoot=(GrammarAST)adaptor.create(ANTLRParser.TOKENS_SPEC,\"TOKENS\");\n      tokensRoot.g=rootGrammar;\n      root.insertChild(1,tokensRoot);\n    }\n    tokensRoot.addChildren(Arrays.asList(imp_tokensRoot.getChildren().toArray(new Tree[0])));\n  }\n  List<GrammarAST> all_actionRoots=new ArrayList<GrammarAST>();\n  List<GrammarAST> imp_actionRoots=imp.ast.getAllChildrenWithType(ANTLRParser.AT);\n  if (actionRoots != null)   all_actionRoots.addAll(actionRoots);\n  all_actionRoots.addAll(imp_actionRoots);\n  if (imp_actionRoots != null) {\n    DoubleKeyMap<String,String,GrammarAST> namedActions=new DoubleKeyMap<String,String,GrammarAST>();\n    rootGrammar.tool.log(\"grammar\",\"imported actions: \" + imp_actionRoots);\n    for (    GrammarAST at : all_actionRoots) {\n      String scopeName=rootGrammar.getDefaultActionScope();\n      GrammarAST scope, name, action;\n      if (at.getChildCount() > 2) {\n        scope=(GrammarAST)at.getChild(0);\n        scopeName=scope.getText();\n        name=(GrammarAST)at.getChild(1);\n        action=(GrammarAST)at.getChild(2);\n      }\n else {\n        name=(GrammarAST)at.getChild(0);\n        action=(GrammarAST)at.getChild(1);\n      }\n      GrammarAST prevAction=namedActions.get(scopeName,name.getText());\n      if (prevAction == null) {\n        namedActions.put(scopeName,name.getText(),action);\n      }\n else {\n        if (prevAction.g == at.g) {\n          rootGrammar.tool.errMgr.grammarError(ErrorType.ACTION_REDEFINITION,at.g.fileName,name.token,name.getText());\n        }\n else {\n          String s1=prevAction.getText();\n          s1=s1.substring(1,s1.length() - 1);\n          String s2=action.getText();\n          s2=s2.substring(1,s2.length() - 1);\n          String combinedAction=\"{\" + s1 + '\\n'+ s2+ \"}\";\n          prevAction.token.setText(combinedAction);\n        }\n      }\n    }\n    for (    String scopeName : namedActions.keySet()) {\n      for (      String name : namedActions.keySet(scopeName)) {\n        GrammarAST action=namedActions.get(scopeName,name);\n        rootGrammar.tool.log(\"grammar\",action.g.name + \" \" + scopeName+ \":\"+ name+ \"=\"+ action.getText());\n        if (action.g != rootGrammar) {\n          root.insertChild(1,action.getParent());\n        }\n      }\n    }\n  }\n  List<GrammarAST> modes=imp.ast.getNodesWithType(ANTLRParser.MODE);\n  if (modes != null) {\n    for (    GrammarAST m : modes) {\n      rootGrammar.tool.log(\"grammar\",\"imported mode: \" + m.toStringTree());\n      String name=m.getChild(0).getText();\n      boolean rootAlreadyHasMode=rootModeNames.contains(name);\n      GrammarAST destinationAST=null;\n      if (rootAlreadyHasMode) {\n        for (        GrammarAST m2 : rootModes) {\n          if (m2.getChild(0).getText().equals(name)) {\n            destinationAST=m2;\n            break;\n          }\n        }\n      }\n else {\n        destinationAST=m.dupNode();\n        destinationAST.addChild(m.getChild(0).dupNode());\n      }\n      int addedRules=0;\n      List<GrammarAST> modeRules=m.getAllChildrenWithType(ANTLRParser.RULE);\n      for (      GrammarAST r : modeRules) {\n        rootGrammar.tool.log(\"grammar\",\"imported rule: \" + r.toStringTree());\n        String ruleName=r.getChild(0).getText();\n        boolean rootAlreadyHasRule=rootRuleNames.contains(ruleName);\n        if (!rootAlreadyHasRule) {\n          destinationAST.addChild(r);\n          addedRules++;\n          rootRuleNames.add(ruleName);\n        }\n      }\n      if (!rootAlreadyHasMode && addedRules > 0) {\n        rootGrammar.ast.addChild(destinationAST);\n        rootModeNames.add(name);\n        rootModes.add(destinationAST);\n      }\n    }\n  }\n  List<GrammarAST> rules=imp.ast.getNodesWithType(ANTLRParser.RULE);\n  if (rules != null) {\n    for (    GrammarAST r : rules) {\n      rootGrammar.tool.log(\"grammar\",\"imported rule: \" + r.toStringTree());\n      String name=r.getChild(0).getText();\n      boolean rootAlreadyHasRule=rootRuleNames.contains(name);\n      if (!rootAlreadyHasRule) {\n        RULES.addChild(r);\n        rootRuleNames.add(name);\n      }\n    }\n  }\n  GrammarAST optionsRoot=(GrammarAST)imp.ast.getFirstChildWithType(ANTLRParser.OPTIONS);\n  if (optionsRoot != null) {\n    boolean hasNewOption=false;\n    for (    Map.Entry<String,GrammarAST> option : imp.ast.getOptions().entrySet()) {\n      String importOption=imp.ast.getOptionString(option.getKey());\n      if (importOption == null) {\n        continue;\n      }\n      String rootOption=rootGrammar.ast.getOptionString(option.getKey());\n      if (!importOption.equals(rootOption)) {\n        hasNewOption=true;\n        break;\n      }\n    }\n    if (hasNewOption) {\n      rootGrammar.tool.errMgr.grammarError(ErrorType.OPTIONS_IN_DELEGATE,optionsRoot.g.fileName,optionsRoot.token,imp.name);\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 971,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8494,
        "startLineNumber" : 156,
        "startColumnNumber" : 60,
        "endLineNumber" : 366,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  List<Grammar> imports=rootGrammar.getAllImportedGrammars();\n  if (imports == null)   return;\n  GrammarAST root=rootGrammar.ast;\n  GrammarAST id=(GrammarAST)root.getChild(0);\n  GrammarASTAdaptor adaptor=new GrammarASTAdaptor(id.token.getInputStream());\n  GrammarAST channelsRoot=(GrammarAST)root.getFirstChildWithType(ANTLRParser.CHANNELS);\n  GrammarAST tokensRoot=(GrammarAST)root.getFirstChildWithType(ANTLRParser.TOKENS_SPEC);\n  List<GrammarAST> actionRoots=root.getNodesWithType(ANTLRParser.AT);\n  GrammarAST RULES=(GrammarAST)root.getFirstChildWithType(ANTLRParser.RULES);\n  Set<String> rootRuleNames=new HashSet<String>();\n  List<GrammarAST> rootRules=RULES.getNodesWithType(ANTLRParser.RULE);\n  for (  GrammarAST r : rootRules)   rootRuleNames.add(r.getChild(0).getText());\n  List<GrammarAST> rootModes=root.getNodesWithType(ANTLRParser.MODE);\n  Set<String> rootModeNames=new HashSet<String>();\n  for (  GrammarAST m : rootModes)   rootModeNames.add(m.getChild(0).getText());\n  List<GrammarAST> addedModes=new ArrayList<GrammarAST>();\n  for (  Grammar imp : imports) {\n    GrammarAST imp_channelRoot=(GrammarAST)imp.ast.getFirstChildWithType(ANTLRParser.CHANNELS);\n    if (imp_channelRoot != null) {\n      rootGrammar.tool.log(\"grammar\",\"imported channels: \" + imp_channelRoot.getChildren());\n      if (channelsRoot == null) {\n        channelsRoot=imp_channelRoot.dupTree();\n        channelsRoot.g=rootGrammar;\n        root.insertChild(1,channelsRoot);\n      }\n else {\n        for (int c=0; c < imp_channelRoot.getChildCount(); ++c) {\n          String channel=imp_channelRoot.getChild(c).getText();\n          boolean channelIsInRootGrammar=false;\n          for (int rc=0; rc < channelsRoot.getChildCount(); ++rc) {\n            String rootChannel=channelsRoot.getChild(rc).getText();\n            if (rootChannel.equals(channel)) {\n              channelIsInRootGrammar=true;\n              break;\n            }\n          }\n          if (!channelIsInRootGrammar) {\n            channelsRoot.addChild(imp_channelRoot.getChild(c).dupNode());\n          }\n        }\n      }\n    }\n    GrammarAST imp_tokensRoot=(GrammarAST)imp.ast.getFirstChildWithType(ANTLRParser.TOKENS_SPEC);\n    if (imp_tokensRoot != null) {\n      rootGrammar.tool.log(\"grammar\",\"imported tokens: \" + imp_tokensRoot.getChildren());\n      if (tokensRoot == null) {\n        tokensRoot=(GrammarAST)adaptor.create(ANTLRParser.TOKENS_SPEC,\"TOKENS\");\n        tokensRoot.g=rootGrammar;\n        root.insertChild(1,tokensRoot);\n      }\n      tokensRoot.addChildren(Arrays.asList(imp_tokensRoot.getChildren().toArray(new Tree[0])));\n    }\n    List<GrammarAST> all_actionRoots=new ArrayList<GrammarAST>();\n    List<GrammarAST> imp_actionRoots=imp.ast.getAllChildrenWithType(ANTLRParser.AT);\n    if (actionRoots != null)     all_actionRoots.addAll(actionRoots);\n    all_actionRoots.addAll(imp_actionRoots);\n    if (imp_actionRoots != null) {\n      DoubleKeyMap<String,String,GrammarAST> namedActions=new DoubleKeyMap<String,String,GrammarAST>();\n      rootGrammar.tool.log(\"grammar\",\"imported actions: \" + imp_actionRoots);\n      for (      GrammarAST at : all_actionRoots) {\n        String scopeName=rootGrammar.getDefaultActionScope();\n        GrammarAST scope, name, action;\n        if (at.getChildCount() > 2) {\n          scope=(GrammarAST)at.getChild(0);\n          scopeName=scope.getText();\n          name=(GrammarAST)at.getChild(1);\n          action=(GrammarAST)at.getChild(2);\n        }\n else {\n          name=(GrammarAST)at.getChild(0);\n          action=(GrammarAST)at.getChild(1);\n        }\n        GrammarAST prevAction=namedActions.get(scopeName,name.getText());\n        if (prevAction == null) {\n          namedActions.put(scopeName,name.getText(),action);\n        }\n else {\n          if (prevAction.g == at.g) {\n            rootGrammar.tool.errMgr.grammarError(ErrorType.ACTION_REDEFINITION,at.g.fileName,name.token,name.getText());\n          }\n else {\n            String s1=prevAction.getText();\n            s1=s1.substring(1,s1.length() - 1);\n            String s2=action.getText();\n            s2=s2.substring(1,s2.length() - 1);\n            String combinedAction=\"{\" + s1 + '\\n'+ s2+ \"}\";\n            prevAction.token.setText(combinedAction);\n          }\n        }\n      }\n      for (      String scopeName : namedActions.keySet()) {\n        for (        String name : namedActions.keySet(scopeName)) {\n          GrammarAST action=namedActions.get(scopeName,name);\n          rootGrammar.tool.log(\"grammar\",action.g.name + \" \" + scopeName+ \":\"+ name+ \"=\"+ action.getText());\n          if (action.g != rootGrammar) {\n            root.insertChild(1,action.getParent());\n          }\n        }\n      }\n    }\n    List<GrammarAST> modes=imp.ast.getNodesWithType(ANTLRParser.MODE);\n    if (modes != null) {\n      for (      GrammarAST m : modes) {\n        rootGrammar.tool.log(\"grammar\",\"imported mode: \" + m.toStringTree());\n        String name=m.getChild(0).getText();\n        boolean rootAlreadyHasMode=rootModeNames.contains(name);\n        GrammarAST destinationAST=null;\n        if (rootAlreadyHasMode) {\n          for (          GrammarAST m2 : rootModes) {\n            if (m2.getChild(0).getText().equals(name)) {\n              destinationAST=m2;\n              break;\n            }\n          }\n        }\n else {\n          destinationAST=m.dupNode();\n          destinationAST.addChild(m.getChild(0).dupNode());\n        }\n        int addedRules=0;\n        List<GrammarAST> modeRules=m.getAllChildrenWithType(ANTLRParser.RULE);\n        for (        GrammarAST r : modeRules) {\n          rootGrammar.tool.log(\"grammar\",\"imported rule: \" + r.toStringTree());\n          String ruleName=r.getChild(0).getText();\n          boolean rootAlreadyHasRule=rootRuleNames.contains(ruleName);\n          if (!rootAlreadyHasRule) {\n            destinationAST.addChild(r);\n            addedRules++;\n            rootRuleNames.add(ruleName);\n          }\n        }\n        if (!rootAlreadyHasMode && addedRules > 0) {\n          rootGrammar.ast.addChild(destinationAST);\n          rootModeNames.add(name);\n          rootModes.add(destinationAST);\n        }\n      }\n    }\n    List<GrammarAST> rules=imp.ast.getNodesWithType(ANTLRParser.RULE);\n    if (rules != null) {\n      for (      GrammarAST r : rules) {\n        rootGrammar.tool.log(\"grammar\",\"imported rule: \" + r.toStringTree());\n        String name=r.getChild(0).getText();\n        boolean rootAlreadyHasRule=rootRuleNames.contains(name);\n        if (!rootAlreadyHasRule) {\n          RULES.addChild(r);\n          rootRuleNames.add(name);\n        }\n      }\n    }\n    GrammarAST optionsRoot=(GrammarAST)imp.ast.getFirstChildWithType(ANTLRParser.OPTIONS);\n    if (optionsRoot != null) {\n      boolean hasNewOption=false;\n      for (      Map.Entry<String,GrammarAST> option : imp.ast.getOptions().entrySet()) {\n        String importOption=imp.ast.getOptionString(option.getKey());\n        if (importOption == null) {\n          continue;\n        }\n        String rootOption=rootGrammar.ast.getOptionString(option.getKey());\n        if (!importOption.equals(rootOption)) {\n          hasNewOption=true;\n          break;\n        }\n      }\n      if (hasNewOption) {\n        rootGrammar.tool.errMgr.grammarError(ErrorType.OPTIONS_IN_DELEGATE,optionsRoot.g.fileName,optionsRoot.token,imp.name);\n      }\n    }\n  }\n  rootGrammar.tool.log(\"grammar\",\"Grammar: \" + rootGrammar.ast.toStringTree());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1193,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 9067,
        "startLineNumber" : 142,
        "startColumnNumber" : 1,
        "endLineNumber" : 366,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Merge all the rules, token definitions, and named actions from imported grammars into the root grammar tree.  Perform: (tokens { X (= Y 'y')) + (tokens { Z )\t-&gt;\t(tokens { X (= Y 'y') Z) (@ members {foo}) + (@ members {bar})\t-&gt;\t(@ members {foobar}) (RULES (RULE x y)) + (RULES (RULE z))\t-&gt;\t(RULES (RULE x y z)) Rules in root prevent same rule from being appended to RULES node. The goal is a complete combined grammar so we can ignore subordinate grammars.\n */\npublic void integrateImportedGrammars(Grammar rootGrammar){\n  List<Grammar> imports=rootGrammar.getAllImportedGrammars();\n  if (imports == null)   return;\n  GrammarAST root=rootGrammar.ast;\n  GrammarAST id=(GrammarAST)root.getChild(0);\n  GrammarASTAdaptor adaptor=new GrammarASTAdaptor(id.token.getInputStream());\n  GrammarAST channelsRoot=(GrammarAST)root.getFirstChildWithType(ANTLRParser.CHANNELS);\n  GrammarAST tokensRoot=(GrammarAST)root.getFirstChildWithType(ANTLRParser.TOKENS_SPEC);\n  List<GrammarAST> actionRoots=root.getNodesWithType(ANTLRParser.AT);\n  GrammarAST RULES=(GrammarAST)root.getFirstChildWithType(ANTLRParser.RULES);\n  Set<String> rootRuleNames=new HashSet<String>();\n  List<GrammarAST> rootRules=RULES.getNodesWithType(ANTLRParser.RULE);\n  for (  GrammarAST r : rootRules)   rootRuleNames.add(r.getChild(0).getText());\n  List<GrammarAST> rootModes=root.getNodesWithType(ANTLRParser.MODE);\n  Set<String> rootModeNames=new HashSet<String>();\n  for (  GrammarAST m : rootModes)   rootModeNames.add(m.getChild(0).getText());\n  List<GrammarAST> addedModes=new ArrayList<GrammarAST>();\n  for (  Grammar imp : imports) {\n    GrammarAST imp_channelRoot=(GrammarAST)imp.ast.getFirstChildWithType(ANTLRParser.CHANNELS);\n    if (imp_channelRoot != null) {\n      rootGrammar.tool.log(\"grammar\",\"imported channels: \" + imp_channelRoot.getChildren());\n      if (channelsRoot == null) {\n        channelsRoot=imp_channelRoot.dupTree();\n        channelsRoot.g=rootGrammar;\n        root.insertChild(1,channelsRoot);\n      }\n else {\n        for (int c=0; c < imp_channelRoot.getChildCount(); ++c) {\n          String channel=imp_channelRoot.getChild(c).getText();\n          boolean channelIsInRootGrammar=false;\n          for (int rc=0; rc < channelsRoot.getChildCount(); ++rc) {\n            String rootChannel=channelsRoot.getChild(rc).getText();\n            if (rootChannel.equals(channel)) {\n              channelIsInRootGrammar=true;\n              break;\n            }\n          }\n          if (!channelIsInRootGrammar) {\n            channelsRoot.addChild(imp_channelRoot.getChild(c).dupNode());\n          }\n        }\n      }\n    }\n    GrammarAST imp_tokensRoot=(GrammarAST)imp.ast.getFirstChildWithType(ANTLRParser.TOKENS_SPEC);\n    if (imp_tokensRoot != null) {\n      rootGrammar.tool.log(\"grammar\",\"imported tokens: \" + imp_tokensRoot.getChildren());\n      if (tokensRoot == null) {\n        tokensRoot=(GrammarAST)adaptor.create(ANTLRParser.TOKENS_SPEC,\"TOKENS\");\n        tokensRoot.g=rootGrammar;\n        root.insertChild(1,tokensRoot);\n      }\n      tokensRoot.addChildren(Arrays.asList(imp_tokensRoot.getChildren().toArray(new Tree[0])));\n    }\n    List<GrammarAST> all_actionRoots=new ArrayList<GrammarAST>();\n    List<GrammarAST> imp_actionRoots=imp.ast.getAllChildrenWithType(ANTLRParser.AT);\n    if (actionRoots != null)     all_actionRoots.addAll(actionRoots);\n    all_actionRoots.addAll(imp_actionRoots);\n    if (imp_actionRoots != null) {\n      DoubleKeyMap<String,String,GrammarAST> namedActions=new DoubleKeyMap<String,String,GrammarAST>();\n      rootGrammar.tool.log(\"grammar\",\"imported actions: \" + imp_actionRoots);\n      for (      GrammarAST at : all_actionRoots) {\n        String scopeName=rootGrammar.getDefaultActionScope();\n        GrammarAST scope, name, action;\n        if (at.getChildCount() > 2) {\n          scope=(GrammarAST)at.getChild(0);\n          scopeName=scope.getText();\n          name=(GrammarAST)at.getChild(1);\n          action=(GrammarAST)at.getChild(2);\n        }\n else {\n          name=(GrammarAST)at.getChild(0);\n          action=(GrammarAST)at.getChild(1);\n        }\n        GrammarAST prevAction=namedActions.get(scopeName,name.getText());\n        if (prevAction == null) {\n          namedActions.put(scopeName,name.getText(),action);\n        }\n else {\n          if (prevAction.g == at.g) {\n            rootGrammar.tool.errMgr.grammarError(ErrorType.ACTION_REDEFINITION,at.g.fileName,name.token,name.getText());\n          }\n else {\n            String s1=prevAction.getText();\n            s1=s1.substring(1,s1.length() - 1);\n            String s2=action.getText();\n            s2=s2.substring(1,s2.length() - 1);\n            String combinedAction=\"{\" + s1 + '\\n'+ s2+ \"}\";\n            prevAction.token.setText(combinedAction);\n          }\n        }\n      }\n      for (      String scopeName : namedActions.keySet()) {\n        for (        String name : namedActions.keySet(scopeName)) {\n          GrammarAST action=namedActions.get(scopeName,name);\n          rootGrammar.tool.log(\"grammar\",action.g.name + \" \" + scopeName+ \":\"+ name+ \"=\"+ action.getText());\n          if (action.g != rootGrammar) {\n            root.insertChild(1,action.getParent());\n          }\n        }\n      }\n    }\n    List<GrammarAST> modes=imp.ast.getNodesWithType(ANTLRParser.MODE);\n    if (modes != null) {\n      for (      GrammarAST m : modes) {\n        rootGrammar.tool.log(\"grammar\",\"imported mode: \" + m.toStringTree());\n        String name=m.getChild(0).getText();\n        boolean rootAlreadyHasMode=rootModeNames.contains(name);\n        GrammarAST destinationAST=null;\n        if (rootAlreadyHasMode) {\n          for (          GrammarAST m2 : rootModes) {\n            if (m2.getChild(0).getText().equals(name)) {\n              destinationAST=m2;\n              break;\n            }\n          }\n        }\n else {\n          destinationAST=m.dupNode();\n          destinationAST.addChild(m.getChild(0).dupNode());\n        }\n        int addedRules=0;\n        List<GrammarAST> modeRules=m.getAllChildrenWithType(ANTLRParser.RULE);\n        for (        GrammarAST r : modeRules) {\n          rootGrammar.tool.log(\"grammar\",\"imported rule: \" + r.toStringTree());\n          String ruleName=r.getChild(0).getText();\n          boolean rootAlreadyHasRule=rootRuleNames.contains(ruleName);\n          if (!rootAlreadyHasRule) {\n            destinationAST.addChild(r);\n            addedRules++;\n            rootRuleNames.add(ruleName);\n          }\n        }\n        if (!rootAlreadyHasMode && addedRules > 0) {\n          rootGrammar.ast.addChild(destinationAST);\n          rootModeNames.add(name);\n          rootModes.add(destinationAST);\n        }\n      }\n    }\n    List<GrammarAST> rules=imp.ast.getNodesWithType(ANTLRParser.RULE);\n    if (rules != null) {\n      for (      GrammarAST r : rules) {\n        rootGrammar.tool.log(\"grammar\",\"imported rule: \" + r.toStringTree());\n        String name=r.getChild(0).getText();\n        boolean rootAlreadyHasRule=rootRuleNames.contains(name);\n        if (!rootAlreadyHasRule) {\n          RULES.addChild(r);\n          rootRuleNames.add(name);\n        }\n      }\n    }\n    GrammarAST optionsRoot=(GrammarAST)imp.ast.getFirstChildWithType(ANTLRParser.OPTIONS);\n    if (optionsRoot != null) {\n      boolean hasNewOption=false;\n      for (      Map.Entry<String,GrammarAST> option : imp.ast.getOptions().entrySet()) {\n        String importOption=imp.ast.getOptionString(option.getKey());\n        if (importOption == null) {\n          continue;\n        }\n        String rootOption=rootGrammar.ast.getOptionString(option.getKey());\n        if (!importOption.equals(rootOption)) {\n          hasNewOption=true;\n          break;\n        }\n      }\n      if (hasNewOption) {\n        rootGrammar.tool.errMgr.grammarError(ErrorType.OPTIONS_IN_DELEGATE,optionsRoot.g.fileName,optionsRoot.token,imp.name);\n      }\n    }\n  }\n  rootGrammar.tool.log(\"grammar\",\"Grammar: \" + rootGrammar.ast.toStringTree());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1202,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 259,
        "startColumnNumber" : 7,
        "endLineNumber" : 259,
        "endColumnNumber" : 53
      },
      "nodeContext" : "String combinedAction=\"{\" + s1 + '\\n'+ s2+ \"}\";\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 2,
    "startLineNumber" : 256,
    "startColumnNumber" : 12,
    "endLineNumber" : 256,
    "endColumnNumber" : 14
  }, {
    "charLength" : 2,
    "startLineNumber" : 256,
    "startColumnNumber" : 28,
    "endLineNumber" : 256,
    "endColumnNumber" : 30
  }, {
    "charLength" : 2,
    "startLineNumber" : 259,
    "startColumnNumber" : 35,
    "endLineNumber" : 259,
    "endColumnNumber" : 37
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 0
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  } ]
}