{
  "id" : 86,
  "expression" : "MOVE_PATTERN.matcher(styleOverride)",
  "projectName" : "google@ExoPlayer",
  "commitID" : "4803ab3bd12b71fc32150e96475c0e16aaf6ddc5",
  "filePath" : "/library/extractor/src/main/java/com/google/android/exoplayer2/text/ssa/SsaStyle.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "MOVE_PATTERN.matcher(styleOverride)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 35,
      "startLineNumber" : 424,
      "startColumnNumber" : 28,
      "endLineNumber" : 424,
      "endColumnNumber" : 63
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 424,
        "startColumnNumber" : 14,
        "endLineNumber" : 424,
        "endColumnNumber" : 63
      },
      "nodeContext" : "moveMatcher=MOVE_PATTERN.matcher(styleOverride)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 424,
        "startColumnNumber" : 6,
        "endLineNumber" : 424,
        "endColumnNumber" : 64
      },
      "nodeContext" : "Matcher moveMatcher=MOVE_PATTERN.matcher(styleOverride);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 897,
        "startLineNumber" : 422,
        "startColumnNumber" : 62,
        "endLineNumber" : 449,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Matcher positionMatcher=POSITION_PATTERN.matcher(styleOverride);\n  Matcher moveMatcher=MOVE_PATTERN.matcher(styleOverride);\n  boolean hasPosition=positionMatcher.find();\n  boolean hasMove=moveMatcher.find();\n  String x;\n  String y;\n  if (hasPosition) {\n    if (hasMove) {\n      Log.i(TAG,\"Override has both \\\\pos(x,y) and \\\\move(x1,y1,x2,y2); using \\\\pos values. override='\" + styleOverride + \"'\");\n    }\n    x=positionMatcher.group(1);\n    y=positionMatcher.group(2);\n  }\n else   if (hasMove) {\n    x=moveMatcher.group(1);\n    y=moveMatcher.group(2);\n  }\n else {\n    return null;\n  }\n  return new PointF(Float.parseFloat(Assertions.checkNotNull(x).trim()),Float.parseFloat(Assertions.checkNotNull(y).trim()));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 114,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1476,
        "startLineNumber" : 411,
        "startColumnNumber" : 4,
        "endLineNumber" : 449,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Parses the position from a style override, returns null if no position is found. <p>The attribute is expected to be in the form  {@code \\pos(x,y)} or {@code \\move(x1,y1,x2,y2,startTime,endTime)} (startTime and endTime are optional). In the case of{@code \\move()}, this returns  {@code (x2, y2)} (i.e. the end position of the move).\n * @param styleOverride The string to parse.\n * @return The parsed position, or null if no position is found.\n */\n@Nullable private static PointF parsePosition(String styleOverride){\n  Matcher positionMatcher=POSITION_PATTERN.matcher(styleOverride);\n  Matcher moveMatcher=MOVE_PATTERN.matcher(styleOverride);\n  boolean hasPosition=positionMatcher.find();\n  boolean hasMove=moveMatcher.find();\n  String x;\n  String y;\n  if (hasPosition) {\n    if (hasMove) {\n      Log.i(TAG,\"Override has both \\\\pos(x,y) and \\\\move(x1,y1,x2,y2); using \\\\pos values. override='\" + styleOverride + \"'\");\n    }\n    x=positionMatcher.group(1);\n    y=positionMatcher.group(2);\n  }\n else   if (hasMove) {\n    x=moveMatcher.group(1);\n    y=moveMatcher.group(2);\n  }\n else {\n    return null;\n  }\n  return new PointF(Float.parseFloat(Assertions.checkNotNull(x).trim()),Float.parseFloat(Assertions.checkNotNull(y).trim()));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 127,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 424,
        "startColumnNumber" : 6,
        "endLineNumber" : 424,
        "endColumnNumber" : 64
      },
      "nodeContext" : "Matcher moveMatcher=MOVE_PATTERN.matcher(styleOverride);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 4,
    "type" : "java.util.regex.Matcher"
  } ],
  "positionList" : [ {
    "charLength" : 35,
    "startLineNumber" : 424,
    "startColumnNumber" : 28,
    "endLineNumber" : 424,
    "endColumnNumber" : 63
  } ],
  "layoutRelationDataList" : [ ]
}