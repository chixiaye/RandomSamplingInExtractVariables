{
  "id" : 436,
  "expression" : "j >= 0",
  "projectName" : "DrKLO@Telegram",
  "commitID" : "11fbfb1329df700b203e1852a71c4c11b5ab12f4",
  "filePath" : "/TMessagesProj/src/main/java/org/telegram/ui/Components/SideMenultItemAnimator.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "j >= 0",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 428,
      "startColumnNumber" : 43,
      "endLineNumber" : 428,
      "endColumnNumber" : 49
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 487,
        "startLineNumber" : 428,
        "startColumnNumber" : 12,
        "endLineNumber" : 440,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int j=moves.size() - 1; j >= 0; j--) {\n  MoveInfo moveInfo=moves.get(j);\n  if (moveInfo.holder == item) {\n    view.setTranslationY(0);\n    view.setTranslationX(0);\n    dispatchMoveFinished(item);\n    moves.remove(j);\n    if (moves.isEmpty()) {\n      mMovesList.remove(i);\n    }\n    break;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 62,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 570,
        "startLineNumber" : 426,
        "startColumnNumber" : 57,
        "endLineNumber" : 441,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ArrayList<MoveInfo> moves=mMovesList.get(i);\n  for (int j=moves.size() - 1; j >= 0; j--) {\n    MoveInfo moveInfo=moves.get(j);\n    if (moveInfo.holder == item) {\n      view.setTranslationY(0);\n      view.setTranslationX(0);\n      dispatchMoveFinished(item);\n      moves.remove(j);\n      if (moves.isEmpty()) {\n        mMovesList.remove(i);\n      }\n      break;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 75,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 619,
        "startLineNumber" : 426,
        "startColumnNumber" : 8,
        "endLineNumber" : 441,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=mMovesList.size() - 1; i >= 0; i--) {\n  ArrayList<MoveInfo> moves=mMovesList.get(i);\n  for (int j=moves.size() - 1; j >= 0; j--) {\n    MoveInfo moveInfo=moves.get(j);\n    if (moveInfo.holder == item) {\n      view.setTranslationY(0);\n      view.setTranslationX(0);\n      dispatchMoveFinished(item);\n      moves.remove(j);\n      if (moves.isEmpty()) {\n        mMovesList.remove(i);\n      }\n      break;\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 90,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2098,
        "startLineNumber" : 397,
        "startColumnNumber" : 59,
        "endLineNumber" : 453,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final View view=item.itemView;\n  view.animate().cancel();\n  for (int i=mPendingMoves.size() - 1; i >= 0; i--) {\n    MoveInfo moveInfo=mPendingMoves.get(i);\n    if (moveInfo.holder == item) {\n      view.setTranslationY(0);\n      view.setTranslationX(0);\n      dispatchMoveFinished(item);\n      mPendingMoves.remove(i);\n    }\n  }\n  endChangeAnimation(mPendingChanges,item);\n  if (mPendingRemovals.remove(item)) {\n    view.setTranslationY(0.0f);\n    dispatchRemoveFinished(item);\n  }\n  if (mPendingAdditions.remove(item)) {\n    view.setTranslationY(0.0f);\n    dispatchAddFinished(item);\n  }\n  for (int i=mChangesList.size() - 1; i >= 0; i--) {\n    ArrayList<ChangeInfo> changes=mChangesList.get(i);\n    endChangeAnimation(changes,item);\n    if (changes.isEmpty()) {\n      mChangesList.remove(i);\n    }\n  }\n  for (int i=mMovesList.size() - 1; i >= 0; i--) {\n    ArrayList<MoveInfo> moves=mMovesList.get(i);\n    for (int j=moves.size() - 1; j >= 0; j--) {\n      MoveInfo moveInfo=moves.get(j);\n      if (moveInfo.holder == item) {\n        view.setTranslationY(0);\n        view.setTranslationX(0);\n        dispatchMoveFinished(item);\n        moves.remove(j);\n        if (moves.isEmpty()) {\n          mMovesList.remove(i);\n        }\n        break;\n      }\n    }\n  }\n  for (int i=mAdditionsList.size() - 1; i >= 0; i--) {\n    ArrayList<RecyclerView.ViewHolder> additions=mAdditionsList.get(i);\n    if (additions.remove(item)) {\n      view.setTranslationY(0.0f);\n      dispatchAddFinished(item);\n      if (additions.isEmpty()) {\n        mAdditionsList.remove(i);\n      }\n    }\n  }\n  dispatchFinishedWhenDone();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 293,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2167,
        "startLineNumber" : 396,
        "startColumnNumber" : 4,
        "endLineNumber" : 453,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void endAnimation(RecyclerView.ViewHolder item){\n  final View view=item.itemView;\n  view.animate().cancel();\n  for (int i=mPendingMoves.size() - 1; i >= 0; i--) {\n    MoveInfo moveInfo=mPendingMoves.get(i);\n    if (moveInfo.holder == item) {\n      view.setTranslationY(0);\n      view.setTranslationX(0);\n      dispatchMoveFinished(item);\n      mPendingMoves.remove(i);\n    }\n  }\n  endChangeAnimation(mPendingChanges,item);\n  if (mPendingRemovals.remove(item)) {\n    view.setTranslationY(0.0f);\n    dispatchRemoveFinished(item);\n  }\n  if (mPendingAdditions.remove(item)) {\n    view.setTranslationY(0.0f);\n    dispatchAddFinished(item);\n  }\n  for (int i=mChangesList.size() - 1; i >= 0; i--) {\n    ArrayList<ChangeInfo> changes=mChangesList.get(i);\n    endChangeAnimation(changes,item);\n    if (changes.isEmpty()) {\n      mChangesList.remove(i);\n    }\n  }\n  for (int i=mMovesList.size() - 1; i >= 0; i--) {\n    ArrayList<MoveInfo> moves=mMovesList.get(i);\n    for (int j=moves.size() - 1; j >= 0; j--) {\n      MoveInfo moveInfo=moves.get(j);\n      if (moveInfo.holder == item) {\n        view.setTranslationY(0);\n        view.setTranslationX(0);\n        dispatchMoveFinished(item);\n        moves.remove(j);\n        if (moves.isEmpty()) {\n          mMovesList.remove(i);\n        }\n        break;\n      }\n    }\n  }\n  for (int i=mAdditionsList.size() - 1; i >= 0; i--) {\n    ArrayList<RecyclerView.ViewHolder> additions=mAdditionsList.get(i);\n    if (additions.remove(item)) {\n      view.setTranslationY(0.0f);\n      dispatchAddFinished(item);\n      if (additions.isEmpty()) {\n        mAdditionsList.remove(i);\n      }\n    }\n  }\n  dispatchFinishedWhenDone();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 305,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 487,
        "startLineNumber" : 428,
        "startColumnNumber" : 12,
        "endLineNumber" : 440,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int j=moves.size() - 1; j >= 0; j--) {\n  MoveInfo moveInfo=moves.get(j);\n  if (moveInfo.holder == item) {\n    view.setTranslationY(0);\n    view.setTranslationX(0);\n    dispatchMoveFinished(item);\n    moves.remove(j);\n    if (moves.isEmpty()) {\n      mMovesList.remove(i);\n    }\n    break;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 62,
      "astHeight" : 9
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 6,
    "startLineNumber" : 428,
    "startColumnNumber" : 43,
    "endLineNumber" : 428,
    "endColumnNumber" : 49
  } ],
  "layoutRelationDataList" : [ ]
}