{
  "id" : 73,
  "expression" : "castToLong(1234).intValue()",
  "projectName" : "alibaba@fastjson",
  "commitID" : "d3797da65a3d9f804c9e275c25395c59e31f097d",
  "filePath" : "/src/test/java/com/alibaba/json/bvt/parser/DefaultExtJSONParserTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "castToLong(1234).intValue()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 27,
      "startLineNumber" : 115,
      "startColumnNumber" : 34,
      "endLineNumber" : 115,
      "endColumnNumber" : 61
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 115,
        "startColumnNumber" : 8,
        "endLineNumber" : 115,
        "endColumnNumber" : 62
      },
      "nodeContext" : "Assert.assertEquals(1234,castToLong(1234).intValue())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 115,
        "startColumnNumber" : 8,
        "endLineNumber" : 115,
        "endColumnNumber" : 63
      },
      "nodeContext" : "Assert.assertEquals(1234,castToLong(1234).intValue());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2714,
        "startLineNumber" : 87,
        "startColumnNumber" : 44,
        "endLineNumber" : 140,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  new TypeUtils();\n  DefaultJSONParser parser=new DefaultJSONParser(\"\");\n  Assert.assertNull(castToByte(null));\n  Assert.assertNull(castToShort(null));\n  Assert.assertNull(castToInt(null));\n  Assert.assertNull(castToLong(null));\n  Assert.assertNull(castToBigInteger(null));\n  Assert.assertNull(castToBigDecimal(null));\n  Assert.assertNull(castToFloat(null));\n  Assert.assertNull(castToDouble(null));\n  Assert.assertNull(castToBoolean(null));\n  Assert.assertNull(castToDate(null));\n  Assert.assertNull(castToString(null));\n  Assert.assertEquals(12,castToByte(\"12\").intValue());\n  Assert.assertEquals(1234,castToShort(\"1234\").intValue());\n  Assert.assertEquals(1234,castToInt(\"1234\").intValue());\n  Assert.assertEquals(1234,castToLong(\"1234\").intValue());\n  Assert.assertEquals(1234,castToBigInteger(\"1234\").intValue());\n  Assert.assertEquals(1234,castToBigDecimal(\"1234\").intValue());\n  Assert.assertEquals(1234,castToFloat(\"1234\").intValue());\n  Assert.assertEquals(1234,castToDouble(\"1234\").intValue());\n  Assert.assertEquals(12,castToByte(12).intValue());\n  Assert.assertEquals(1234,castToShort(1234).intValue());\n  Assert.assertEquals(1234,castToInt(1234).intValue());\n  Assert.assertEquals(1234,castToLong(1234).intValue());\n  Assert.assertEquals(1234,castToBigInteger(1234).intValue());\n  Assert.assertEquals(1234,castToBigDecimal(1234).intValue());\n  Assert.assertEquals(1234,castToFloat(1234).intValue());\n  Assert.assertEquals(1234,castToDouble(1234).intValue());\n  Assert.assertEquals(Boolean.TRUE,castToBoolean(true));\n  Assert.assertEquals(Boolean.FALSE,castToBoolean(false));\n  Assert.assertEquals(Boolean.TRUE,castToBoolean(1));\n  Assert.assertEquals(Boolean.FALSE,castToBoolean(0));\n  Assert.assertEquals(Boolean.TRUE,castToBoolean(\"true\"));\n  Assert.assertEquals(Boolean.FALSE,castToBoolean(\"false\"));\n  long time=System.currentTimeMillis();\n  Assert.assertEquals(time,castToDate(new Date(time)).getTime());\n  Assert.assertEquals(time,castToDate(time).getTime());\n  Assert.assertEquals(time,castToDate(Long.toString(time)).getTime());\n  Assert.assertEquals(\"true\",castToString(\"true\"));\n  Assert.assertEquals(\"true\",castToString(true));\n  Assert.assertEquals(\"123\",castToString(123));\n  Assert.assertEquals(new BigDecimal(\"2\"),castToBigDecimal(\"2\"));\n  Assert.assertEquals(new BigDecimal(\"2\"),castToBigDecimal(new BigInteger(\"2\")));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 403,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2754,
        "startLineNumber" : 87,
        "startColumnNumber" : 4,
        "endLineNumber" : 140,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void testCast() throws Exception {\n  new TypeUtils();\n  DefaultJSONParser parser=new DefaultJSONParser(\"\");\n  Assert.assertNull(castToByte(null));\n  Assert.assertNull(castToShort(null));\n  Assert.assertNull(castToInt(null));\n  Assert.assertNull(castToLong(null));\n  Assert.assertNull(castToBigInteger(null));\n  Assert.assertNull(castToBigDecimal(null));\n  Assert.assertNull(castToFloat(null));\n  Assert.assertNull(castToDouble(null));\n  Assert.assertNull(castToBoolean(null));\n  Assert.assertNull(castToDate(null));\n  Assert.assertNull(castToString(null));\n  Assert.assertEquals(12,castToByte(\"12\").intValue());\n  Assert.assertEquals(1234,castToShort(\"1234\").intValue());\n  Assert.assertEquals(1234,castToInt(\"1234\").intValue());\n  Assert.assertEquals(1234,castToLong(\"1234\").intValue());\n  Assert.assertEquals(1234,castToBigInteger(\"1234\").intValue());\n  Assert.assertEquals(1234,castToBigDecimal(\"1234\").intValue());\n  Assert.assertEquals(1234,castToFloat(\"1234\").intValue());\n  Assert.assertEquals(1234,castToDouble(\"1234\").intValue());\n  Assert.assertEquals(12,castToByte(12).intValue());\n  Assert.assertEquals(1234,castToShort(1234).intValue());\n  Assert.assertEquals(1234,castToInt(1234).intValue());\n  Assert.assertEquals(1234,castToLong(1234).intValue());\n  Assert.assertEquals(1234,castToBigInteger(1234).intValue());\n  Assert.assertEquals(1234,castToBigDecimal(1234).intValue());\n  Assert.assertEquals(1234,castToFloat(1234).intValue());\n  Assert.assertEquals(1234,castToDouble(1234).intValue());\n  Assert.assertEquals(Boolean.TRUE,castToBoolean(true));\n  Assert.assertEquals(Boolean.FALSE,castToBoolean(false));\n  Assert.assertEquals(Boolean.TRUE,castToBoolean(1));\n  Assert.assertEquals(Boolean.FALSE,castToBoolean(0));\n  Assert.assertEquals(Boolean.TRUE,castToBoolean(\"true\"));\n  Assert.assertEquals(Boolean.FALSE,castToBoolean(\"false\"));\n  long time=System.currentTimeMillis();\n  Assert.assertEquals(time,castToDate(new Date(time)).getTime());\n  Assert.assertEquals(time,castToDate(time).getTime());\n  Assert.assertEquals(time,castToDate(Long.toString(time)).getTime());\n  Assert.assertEquals(\"true\",castToString(\"true\"));\n  Assert.assertEquals(\"true\",castToString(true));\n  Assert.assertEquals(\"123\",castToString(123));\n  Assert.assertEquals(new BigDecimal(\"2\"),castToBigDecimal(\"2\"));\n  Assert.assertEquals(new BigDecimal(\"2\"),castToBigDecimal(new BigInteger(\"2\")));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 409,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 115,
        "startColumnNumber" : 8,
        "endLineNumber" : 115,
        "endColumnNumber" : 63
      },
      "nodeContext" : "Assert.assertEquals(1234,castToLong(1234).intValue());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 3,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 27,
    "startLineNumber" : 115,
    "startColumnNumber" : 34,
    "endLineNumber" : 115,
    "endColumnNumber" : 61
  } ],
  "layoutRelationDataList" : [ ]
}