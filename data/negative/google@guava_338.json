{
  "id" : 338,
  "expression" : "79",
  "projectName" : "google@guava",
  "commitID" : "68500b2c09fa6985eab2e41577e2992685b57f2b",
  "filePath" : "/android/guava-tests/test/com/google/common/cache/CacheBuilderGwtTest.java",
  "occurrences" : 6,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "79",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 217,
      "startColumnNumber" : 21,
      "endLineNumber" : 217,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 217,
        "startColumnNumber" : 4,
        "endLineNumber" : 217,
        "endColumnNumber" : 24
      },
      "nodeContext" : "asMap.replace(2,79)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 217,
        "startColumnNumber" : 4,
        "endLineNumber" : 217,
        "endColumnNumber" : 25
      },
      "nodeContext" : "asMap.replace(2,79);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1325,
        "startLineNumber" : 209,
        "startColumnNumber" : 31,
        "endLineNumber" : 249,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Cache<Integer,Integer> cache=CacheBuilder.newBuilder().build();\n  ConcurrentMap<Integer,Integer> asMap=cache.asMap();\n  cache.put(10,100);\n  cache.put(2,52);\n  asMap.replace(2,79);\n  asMap.replace(3,60);\n  assertEquals(null,cache.getIfPresent(3));\n  assertEquals(null,asMap.get(3));\n  assertEquals(Integer.valueOf(79),cache.getIfPresent(2));\n  assertEquals(Integer.valueOf(79),asMap.get(2));\n  asMap.replace(10,100,50);\n  asMap.replace(2,52,99);\n  assertEquals(Integer.valueOf(50),cache.getIfPresent(10));\n  assertEquals(Integer.valueOf(50),asMap.get(10));\n  assertEquals(Integer.valueOf(79),cache.getIfPresent(2));\n  assertEquals(Integer.valueOf(79),asMap.get(2));\n  asMap.remove(10,100);\n  asMap.remove(2,79);\n  assertEquals(Integer.valueOf(50),cache.getIfPresent(10));\n  assertEquals(Integer.valueOf(50),asMap.get(10));\n  assertEquals(null,cache.getIfPresent(2));\n  assertEquals(null,asMap.get(2));\n  asMap.putIfAbsent(2,20);\n  asMap.putIfAbsent(10,20);\n  assertEquals(Integer.valueOf(20),cache.getIfPresent(2));\n  assertEquals(Integer.valueOf(20),asMap.get(2));\n  assertEquals(Integer.valueOf(50),cache.getIfPresent(10));\n  assertEquals(Integer.valueOf(50),asMap.get(10));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 255,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1354,
        "startLineNumber" : 209,
        "startColumnNumber" : 2,
        "endLineNumber" : 249,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public void testMapMethods(){\n  Cache<Integer,Integer> cache=CacheBuilder.newBuilder().build();\n  ConcurrentMap<Integer,Integer> asMap=cache.asMap();\n  cache.put(10,100);\n  cache.put(2,52);\n  asMap.replace(2,79);\n  asMap.replace(3,60);\n  assertEquals(null,cache.getIfPresent(3));\n  assertEquals(null,asMap.get(3));\n  assertEquals(Integer.valueOf(79),cache.getIfPresent(2));\n  assertEquals(Integer.valueOf(79),asMap.get(2));\n  asMap.replace(10,100,50);\n  asMap.replace(2,52,99);\n  assertEquals(Integer.valueOf(50),cache.getIfPresent(10));\n  assertEquals(Integer.valueOf(50),asMap.get(10));\n  assertEquals(Integer.valueOf(79),cache.getIfPresent(2));\n  assertEquals(Integer.valueOf(79),asMap.get(2));\n  asMap.remove(10,100);\n  asMap.remove(2,79);\n  assertEquals(Integer.valueOf(50),cache.getIfPresent(10));\n  assertEquals(Integer.valueOf(50),asMap.get(10));\n  assertEquals(null,cache.getIfPresent(2));\n  assertEquals(null,asMap.get(2));\n  asMap.putIfAbsent(2,20);\n  asMap.putIfAbsent(10,20);\n  assertEquals(Integer.valueOf(20),cache.getIfPresent(2));\n  assertEquals(Integer.valueOf(20),asMap.get(2));\n  assertEquals(Integer.valueOf(50),cache.getIfPresent(10));\n  assertEquals(Integer.valueOf(50),asMap.get(10));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 259,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 217,
        "startColumnNumber" : 4,
        "endLineNumber" : 217,
        "endColumnNumber" : 25
      },
      "nodeContext" : "asMap.replace(2,79);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "79",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 223,
      "startColumnNumber" : 33,
      "endLineNumber" : 223,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 223,
        "startColumnNumber" : 17,
        "endLineNumber" : 223,
        "endColumnNumber" : 36
      },
      "nodeContext" : "Integer.valueOf(79)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 223,
        "startColumnNumber" : 4,
        "endLineNumber" : 223,
        "endColumnNumber" : 60
      },
      "nodeContext" : "assertEquals(Integer.valueOf(79),cache.getIfPresent(2))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 223,
        "startColumnNumber" : 4,
        "endLineNumber" : 223,
        "endColumnNumber" : 61
      },
      "nodeContext" : "assertEquals(Integer.valueOf(79),cache.getIfPresent(2));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1325,
        "startLineNumber" : 209,
        "startColumnNumber" : 31,
        "endLineNumber" : 249,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Cache<Integer,Integer> cache=CacheBuilder.newBuilder().build();\n  ConcurrentMap<Integer,Integer> asMap=cache.asMap();\n  cache.put(10,100);\n  cache.put(2,52);\n  asMap.replace(2,79);\n  asMap.replace(3,60);\n  assertEquals(null,cache.getIfPresent(3));\n  assertEquals(null,asMap.get(3));\n  assertEquals(Integer.valueOf(79),cache.getIfPresent(2));\n  assertEquals(Integer.valueOf(79),asMap.get(2));\n  asMap.replace(10,100,50);\n  asMap.replace(2,52,99);\n  assertEquals(Integer.valueOf(50),cache.getIfPresent(10));\n  assertEquals(Integer.valueOf(50),asMap.get(10));\n  assertEquals(Integer.valueOf(79),cache.getIfPresent(2));\n  assertEquals(Integer.valueOf(79),asMap.get(2));\n  asMap.remove(10,100);\n  asMap.remove(2,79);\n  assertEquals(Integer.valueOf(50),cache.getIfPresent(10));\n  assertEquals(Integer.valueOf(50),asMap.get(10));\n  assertEquals(null,cache.getIfPresent(2));\n  assertEquals(null,asMap.get(2));\n  asMap.putIfAbsent(2,20);\n  asMap.putIfAbsent(10,20);\n  assertEquals(Integer.valueOf(20),cache.getIfPresent(2));\n  assertEquals(Integer.valueOf(20),asMap.get(2));\n  assertEquals(Integer.valueOf(50),cache.getIfPresent(10));\n  assertEquals(Integer.valueOf(50),asMap.get(10));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 255,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1354,
        "startLineNumber" : 209,
        "startColumnNumber" : 2,
        "endLineNumber" : 249,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public void testMapMethods(){\n  Cache<Integer,Integer> cache=CacheBuilder.newBuilder().build();\n  ConcurrentMap<Integer,Integer> asMap=cache.asMap();\n  cache.put(10,100);\n  cache.put(2,52);\n  asMap.replace(2,79);\n  asMap.replace(3,60);\n  assertEquals(null,cache.getIfPresent(3));\n  assertEquals(null,asMap.get(3));\n  assertEquals(Integer.valueOf(79),cache.getIfPresent(2));\n  assertEquals(Integer.valueOf(79),asMap.get(2));\n  asMap.replace(10,100,50);\n  asMap.replace(2,52,99);\n  assertEquals(Integer.valueOf(50),cache.getIfPresent(10));\n  assertEquals(Integer.valueOf(50),asMap.get(10));\n  assertEquals(Integer.valueOf(79),cache.getIfPresent(2));\n  assertEquals(Integer.valueOf(79),asMap.get(2));\n  asMap.remove(10,100);\n  asMap.remove(2,79);\n  assertEquals(Integer.valueOf(50),cache.getIfPresent(10));\n  assertEquals(Integer.valueOf(50),asMap.get(10));\n  assertEquals(null,cache.getIfPresent(2));\n  assertEquals(null,asMap.get(2));\n  asMap.putIfAbsent(2,20);\n  asMap.putIfAbsent(10,20);\n  assertEquals(Integer.valueOf(20),cache.getIfPresent(2));\n  assertEquals(Integer.valueOf(20),asMap.get(2));\n  assertEquals(Integer.valueOf(50),cache.getIfPresent(10));\n  assertEquals(Integer.valueOf(50),asMap.get(10));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 259,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 223,
        "startColumnNumber" : 4,
        "endLineNumber" : 223,
        "endColumnNumber" : 61
      },
      "nodeContext" : "assertEquals(Integer.valueOf(79),cache.getIfPresent(2));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "79",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 224,
      "startColumnNumber" : 33,
      "endLineNumber" : 224,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 224,
        "startColumnNumber" : 17,
        "endLineNumber" : 224,
        "endColumnNumber" : 36
      },
      "nodeContext" : "Integer.valueOf(79)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 224,
        "startColumnNumber" : 4,
        "endLineNumber" : 224,
        "endColumnNumber" : 51
      },
      "nodeContext" : "assertEquals(Integer.valueOf(79),asMap.get(2))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 224,
        "startColumnNumber" : 4,
        "endLineNumber" : 224,
        "endColumnNumber" : 52
      },
      "nodeContext" : "assertEquals(Integer.valueOf(79),asMap.get(2));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1325,
        "startLineNumber" : 209,
        "startColumnNumber" : 31,
        "endLineNumber" : 249,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Cache<Integer,Integer> cache=CacheBuilder.newBuilder().build();\n  ConcurrentMap<Integer,Integer> asMap=cache.asMap();\n  cache.put(10,100);\n  cache.put(2,52);\n  asMap.replace(2,79);\n  asMap.replace(3,60);\n  assertEquals(null,cache.getIfPresent(3));\n  assertEquals(null,asMap.get(3));\n  assertEquals(Integer.valueOf(79),cache.getIfPresent(2));\n  assertEquals(Integer.valueOf(79),asMap.get(2));\n  asMap.replace(10,100,50);\n  asMap.replace(2,52,99);\n  assertEquals(Integer.valueOf(50),cache.getIfPresent(10));\n  assertEquals(Integer.valueOf(50),asMap.get(10));\n  assertEquals(Integer.valueOf(79),cache.getIfPresent(2));\n  assertEquals(Integer.valueOf(79),asMap.get(2));\n  asMap.remove(10,100);\n  asMap.remove(2,79);\n  assertEquals(Integer.valueOf(50),cache.getIfPresent(10));\n  assertEquals(Integer.valueOf(50),asMap.get(10));\n  assertEquals(null,cache.getIfPresent(2));\n  assertEquals(null,asMap.get(2));\n  asMap.putIfAbsent(2,20);\n  asMap.putIfAbsent(10,20);\n  assertEquals(Integer.valueOf(20),cache.getIfPresent(2));\n  assertEquals(Integer.valueOf(20),asMap.get(2));\n  assertEquals(Integer.valueOf(50),cache.getIfPresent(10));\n  assertEquals(Integer.valueOf(50),asMap.get(10));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 255,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1354,
        "startLineNumber" : 209,
        "startColumnNumber" : 2,
        "endLineNumber" : 249,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public void testMapMethods(){\n  Cache<Integer,Integer> cache=CacheBuilder.newBuilder().build();\n  ConcurrentMap<Integer,Integer> asMap=cache.asMap();\n  cache.put(10,100);\n  cache.put(2,52);\n  asMap.replace(2,79);\n  asMap.replace(3,60);\n  assertEquals(null,cache.getIfPresent(3));\n  assertEquals(null,asMap.get(3));\n  assertEquals(Integer.valueOf(79),cache.getIfPresent(2));\n  assertEquals(Integer.valueOf(79),asMap.get(2));\n  asMap.replace(10,100,50);\n  asMap.replace(2,52,99);\n  assertEquals(Integer.valueOf(50),cache.getIfPresent(10));\n  assertEquals(Integer.valueOf(50),asMap.get(10));\n  assertEquals(Integer.valueOf(79),cache.getIfPresent(2));\n  assertEquals(Integer.valueOf(79),asMap.get(2));\n  asMap.remove(10,100);\n  asMap.remove(2,79);\n  assertEquals(Integer.valueOf(50),cache.getIfPresent(10));\n  assertEquals(Integer.valueOf(50),asMap.get(10));\n  assertEquals(null,cache.getIfPresent(2));\n  assertEquals(null,asMap.get(2));\n  asMap.putIfAbsent(2,20);\n  asMap.putIfAbsent(10,20);\n  assertEquals(Integer.valueOf(20),cache.getIfPresent(2));\n  assertEquals(Integer.valueOf(20),asMap.get(2));\n  assertEquals(Integer.valueOf(50),cache.getIfPresent(10));\n  assertEquals(Integer.valueOf(50),asMap.get(10));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 259,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 224,
        "startColumnNumber" : 4,
        "endLineNumber" : 224,
        "endColumnNumber" : 52
      },
      "nodeContext" : "assertEquals(Integer.valueOf(79),asMap.get(2));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "79",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 231,
      "startColumnNumber" : 33,
      "endLineNumber" : 231,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 231,
        "startColumnNumber" : 17,
        "endLineNumber" : 231,
        "endColumnNumber" : 36
      },
      "nodeContext" : "Integer.valueOf(79)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 231,
        "startColumnNumber" : 4,
        "endLineNumber" : 231,
        "endColumnNumber" : 60
      },
      "nodeContext" : "assertEquals(Integer.valueOf(79),cache.getIfPresent(2))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 231,
        "startColumnNumber" : 4,
        "endLineNumber" : 231,
        "endColumnNumber" : 61
      },
      "nodeContext" : "assertEquals(Integer.valueOf(79),cache.getIfPresent(2));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1325,
        "startLineNumber" : 209,
        "startColumnNumber" : 31,
        "endLineNumber" : 249,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Cache<Integer,Integer> cache=CacheBuilder.newBuilder().build();\n  ConcurrentMap<Integer,Integer> asMap=cache.asMap();\n  cache.put(10,100);\n  cache.put(2,52);\n  asMap.replace(2,79);\n  asMap.replace(3,60);\n  assertEquals(null,cache.getIfPresent(3));\n  assertEquals(null,asMap.get(3));\n  assertEquals(Integer.valueOf(79),cache.getIfPresent(2));\n  assertEquals(Integer.valueOf(79),asMap.get(2));\n  asMap.replace(10,100,50);\n  asMap.replace(2,52,99);\n  assertEquals(Integer.valueOf(50),cache.getIfPresent(10));\n  assertEquals(Integer.valueOf(50),asMap.get(10));\n  assertEquals(Integer.valueOf(79),cache.getIfPresent(2));\n  assertEquals(Integer.valueOf(79),asMap.get(2));\n  asMap.remove(10,100);\n  asMap.remove(2,79);\n  assertEquals(Integer.valueOf(50),cache.getIfPresent(10));\n  assertEquals(Integer.valueOf(50),asMap.get(10));\n  assertEquals(null,cache.getIfPresent(2));\n  assertEquals(null,asMap.get(2));\n  asMap.putIfAbsent(2,20);\n  asMap.putIfAbsent(10,20);\n  assertEquals(Integer.valueOf(20),cache.getIfPresent(2));\n  assertEquals(Integer.valueOf(20),asMap.get(2));\n  assertEquals(Integer.valueOf(50),cache.getIfPresent(10));\n  assertEquals(Integer.valueOf(50),asMap.get(10));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 255,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1354,
        "startLineNumber" : 209,
        "startColumnNumber" : 2,
        "endLineNumber" : 249,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public void testMapMethods(){\n  Cache<Integer,Integer> cache=CacheBuilder.newBuilder().build();\n  ConcurrentMap<Integer,Integer> asMap=cache.asMap();\n  cache.put(10,100);\n  cache.put(2,52);\n  asMap.replace(2,79);\n  asMap.replace(3,60);\n  assertEquals(null,cache.getIfPresent(3));\n  assertEquals(null,asMap.get(3));\n  assertEquals(Integer.valueOf(79),cache.getIfPresent(2));\n  assertEquals(Integer.valueOf(79),asMap.get(2));\n  asMap.replace(10,100,50);\n  asMap.replace(2,52,99);\n  assertEquals(Integer.valueOf(50),cache.getIfPresent(10));\n  assertEquals(Integer.valueOf(50),asMap.get(10));\n  assertEquals(Integer.valueOf(79),cache.getIfPresent(2));\n  assertEquals(Integer.valueOf(79),asMap.get(2));\n  asMap.remove(10,100);\n  asMap.remove(2,79);\n  assertEquals(Integer.valueOf(50),cache.getIfPresent(10));\n  assertEquals(Integer.valueOf(50),asMap.get(10));\n  assertEquals(null,cache.getIfPresent(2));\n  assertEquals(null,asMap.get(2));\n  asMap.putIfAbsent(2,20);\n  asMap.putIfAbsent(10,20);\n  assertEquals(Integer.valueOf(20),cache.getIfPresent(2));\n  assertEquals(Integer.valueOf(20),asMap.get(2));\n  assertEquals(Integer.valueOf(50),cache.getIfPresent(10));\n  assertEquals(Integer.valueOf(50),asMap.get(10));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 259,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 231,
        "startColumnNumber" : 4,
        "endLineNumber" : 231,
        "endColumnNumber" : 61
      },
      "nodeContext" : "assertEquals(Integer.valueOf(79),cache.getIfPresent(2));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "79",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 232,
      "startColumnNumber" : 33,
      "endLineNumber" : 232,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 232,
        "startColumnNumber" : 17,
        "endLineNumber" : 232,
        "endColumnNumber" : 36
      },
      "nodeContext" : "Integer.valueOf(79)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 232,
        "startColumnNumber" : 4,
        "endLineNumber" : 232,
        "endColumnNumber" : 51
      },
      "nodeContext" : "assertEquals(Integer.valueOf(79),asMap.get(2))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 232,
        "startColumnNumber" : 4,
        "endLineNumber" : 232,
        "endColumnNumber" : 52
      },
      "nodeContext" : "assertEquals(Integer.valueOf(79),asMap.get(2));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1325,
        "startLineNumber" : 209,
        "startColumnNumber" : 31,
        "endLineNumber" : 249,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Cache<Integer,Integer> cache=CacheBuilder.newBuilder().build();\n  ConcurrentMap<Integer,Integer> asMap=cache.asMap();\n  cache.put(10,100);\n  cache.put(2,52);\n  asMap.replace(2,79);\n  asMap.replace(3,60);\n  assertEquals(null,cache.getIfPresent(3));\n  assertEquals(null,asMap.get(3));\n  assertEquals(Integer.valueOf(79),cache.getIfPresent(2));\n  assertEquals(Integer.valueOf(79),asMap.get(2));\n  asMap.replace(10,100,50);\n  asMap.replace(2,52,99);\n  assertEquals(Integer.valueOf(50),cache.getIfPresent(10));\n  assertEquals(Integer.valueOf(50),asMap.get(10));\n  assertEquals(Integer.valueOf(79),cache.getIfPresent(2));\n  assertEquals(Integer.valueOf(79),asMap.get(2));\n  asMap.remove(10,100);\n  asMap.remove(2,79);\n  assertEquals(Integer.valueOf(50),cache.getIfPresent(10));\n  assertEquals(Integer.valueOf(50),asMap.get(10));\n  assertEquals(null,cache.getIfPresent(2));\n  assertEquals(null,asMap.get(2));\n  asMap.putIfAbsent(2,20);\n  asMap.putIfAbsent(10,20);\n  assertEquals(Integer.valueOf(20),cache.getIfPresent(2));\n  assertEquals(Integer.valueOf(20),asMap.get(2));\n  assertEquals(Integer.valueOf(50),cache.getIfPresent(10));\n  assertEquals(Integer.valueOf(50),asMap.get(10));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 255,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1354,
        "startLineNumber" : 209,
        "startColumnNumber" : 2,
        "endLineNumber" : 249,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public void testMapMethods(){\n  Cache<Integer,Integer> cache=CacheBuilder.newBuilder().build();\n  ConcurrentMap<Integer,Integer> asMap=cache.asMap();\n  cache.put(10,100);\n  cache.put(2,52);\n  asMap.replace(2,79);\n  asMap.replace(3,60);\n  assertEquals(null,cache.getIfPresent(3));\n  assertEquals(null,asMap.get(3));\n  assertEquals(Integer.valueOf(79),cache.getIfPresent(2));\n  assertEquals(Integer.valueOf(79),asMap.get(2));\n  asMap.replace(10,100,50);\n  asMap.replace(2,52,99);\n  assertEquals(Integer.valueOf(50),cache.getIfPresent(10));\n  assertEquals(Integer.valueOf(50),asMap.get(10));\n  assertEquals(Integer.valueOf(79),cache.getIfPresent(2));\n  assertEquals(Integer.valueOf(79),asMap.get(2));\n  asMap.remove(10,100);\n  asMap.remove(2,79);\n  assertEquals(Integer.valueOf(50),cache.getIfPresent(10));\n  assertEquals(Integer.valueOf(50),asMap.get(10));\n  assertEquals(null,cache.getIfPresent(2));\n  assertEquals(null,asMap.get(2));\n  asMap.putIfAbsent(2,20);\n  asMap.putIfAbsent(10,20);\n  assertEquals(Integer.valueOf(20),cache.getIfPresent(2));\n  assertEquals(Integer.valueOf(20),asMap.get(2));\n  assertEquals(Integer.valueOf(50),cache.getIfPresent(10));\n  assertEquals(Integer.valueOf(50),asMap.get(10));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 259,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 232,
        "startColumnNumber" : 4,
        "endLineNumber" : 232,
        "endColumnNumber" : 52
      },
      "nodeContext" : "assertEquals(Integer.valueOf(79),asMap.get(2));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "79",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 235,
      "startColumnNumber" : 20,
      "endLineNumber" : 235,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 235,
        "startColumnNumber" : 4,
        "endLineNumber" : 235,
        "endColumnNumber" : 23
      },
      "nodeContext" : "asMap.remove(2,79)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 235,
        "startColumnNumber" : 4,
        "endLineNumber" : 235,
        "endColumnNumber" : 24
      },
      "nodeContext" : "asMap.remove(2,79);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1325,
        "startLineNumber" : 209,
        "startColumnNumber" : 31,
        "endLineNumber" : 249,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Cache<Integer,Integer> cache=CacheBuilder.newBuilder().build();\n  ConcurrentMap<Integer,Integer> asMap=cache.asMap();\n  cache.put(10,100);\n  cache.put(2,52);\n  asMap.replace(2,79);\n  asMap.replace(3,60);\n  assertEquals(null,cache.getIfPresent(3));\n  assertEquals(null,asMap.get(3));\n  assertEquals(Integer.valueOf(79),cache.getIfPresent(2));\n  assertEquals(Integer.valueOf(79),asMap.get(2));\n  asMap.replace(10,100,50);\n  asMap.replace(2,52,99);\n  assertEquals(Integer.valueOf(50),cache.getIfPresent(10));\n  assertEquals(Integer.valueOf(50),asMap.get(10));\n  assertEquals(Integer.valueOf(79),cache.getIfPresent(2));\n  assertEquals(Integer.valueOf(79),asMap.get(2));\n  asMap.remove(10,100);\n  asMap.remove(2,79);\n  assertEquals(Integer.valueOf(50),cache.getIfPresent(10));\n  assertEquals(Integer.valueOf(50),asMap.get(10));\n  assertEquals(null,cache.getIfPresent(2));\n  assertEquals(null,asMap.get(2));\n  asMap.putIfAbsent(2,20);\n  asMap.putIfAbsent(10,20);\n  assertEquals(Integer.valueOf(20),cache.getIfPresent(2));\n  assertEquals(Integer.valueOf(20),asMap.get(2));\n  assertEquals(Integer.valueOf(50),cache.getIfPresent(10));\n  assertEquals(Integer.valueOf(50),asMap.get(10));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 255,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1354,
        "startLineNumber" : 209,
        "startColumnNumber" : 2,
        "endLineNumber" : 249,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public void testMapMethods(){\n  Cache<Integer,Integer> cache=CacheBuilder.newBuilder().build();\n  ConcurrentMap<Integer,Integer> asMap=cache.asMap();\n  cache.put(10,100);\n  cache.put(2,52);\n  asMap.replace(2,79);\n  asMap.replace(3,60);\n  assertEquals(null,cache.getIfPresent(3));\n  assertEquals(null,asMap.get(3));\n  assertEquals(Integer.valueOf(79),cache.getIfPresent(2));\n  assertEquals(Integer.valueOf(79),asMap.get(2));\n  asMap.replace(10,100,50);\n  asMap.replace(2,52,99);\n  assertEquals(Integer.valueOf(50),cache.getIfPresent(10));\n  assertEquals(Integer.valueOf(50),asMap.get(10));\n  assertEquals(Integer.valueOf(79),cache.getIfPresent(2));\n  assertEquals(Integer.valueOf(79),asMap.get(2));\n  asMap.remove(10,100);\n  asMap.remove(2,79);\n  assertEquals(Integer.valueOf(50),cache.getIfPresent(10));\n  assertEquals(Integer.valueOf(50),asMap.get(10));\n  assertEquals(null,cache.getIfPresent(2));\n  assertEquals(null,asMap.get(2));\n  asMap.putIfAbsent(2,20);\n  asMap.putIfAbsent(10,20);\n  assertEquals(Integer.valueOf(20),cache.getIfPresent(2));\n  assertEquals(Integer.valueOf(20),asMap.get(2));\n  assertEquals(Integer.valueOf(50),cache.getIfPresent(10));\n  assertEquals(Integer.valueOf(50),asMap.get(10));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 259,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 235,
        "startColumnNumber" : 4,
        "endLineNumber" : 235,
        "endColumnNumber" : 24
      },
      "nodeContext" : "asMap.remove(2,79);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 2,
    "startLineNumber" : 217,
    "startColumnNumber" : 21,
    "endLineNumber" : 217,
    "endColumnNumber" : 23
  }, {
    "charLength" : 2,
    "startLineNumber" : 223,
    "startColumnNumber" : 33,
    "endLineNumber" : 223,
    "endColumnNumber" : 35
  }, {
    "charLength" : 2,
    "startLineNumber" : 224,
    "startColumnNumber" : 33,
    "endLineNumber" : 224,
    "endColumnNumber" : 35
  }, {
    "charLength" : 2,
    "startLineNumber" : 231,
    "startColumnNumber" : 33,
    "endLineNumber" : 231,
    "endColumnNumber" : 35
  }, {
    "charLength" : 2,
    "startLineNumber" : 232,
    "startColumnNumber" : 33,
    "endLineNumber" : 232,
    "endColumnNumber" : 35
  }, {
    "charLength" : 2,
    "startLineNumber" : 235,
    "startColumnNumber" : 20,
    "endLineNumber" : 235,
    "endColumnNumber" : 22
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 2
  } ]
}