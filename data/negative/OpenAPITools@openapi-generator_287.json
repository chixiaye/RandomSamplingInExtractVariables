{
  "id" : 287,
  "expression" : "config.apiDocFilename(templateName,tag)",
  "projectName" : "OpenAPITools@openapi-generator",
  "commitID" : "9e1972bb1d3a4f1e3f47c87613f4050feada0146",
  "filePath" : "/modules/openapi-generator/src/main/java/org/openapitools/codegen/DefaultGenerator.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "config.apiDocFilename(templateName,tag)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 40,
      "startLineNumber" : 654,
      "startColumnNumber" : 38,
      "endLineNumber" : 654,
      "endColumnNumber" : 78
    },
    "astNodeNumber" : 5,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 654,
        "startColumnNumber" : 27,
        "endLineNumber" : 654,
        "endColumnNumber" : 78
      },
      "nodeContext" : "filename=config.apiDocFilename(templateName,tag)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 654,
        "startColumnNumber" : 20,
        "endLineNumber" : 654,
        "endColumnNumber" : 79
      },
      "nodeContext" : "String filename=config.apiDocFilename(templateName,tag);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 527,
        "startLineNumber" : 653,
        "startColumnNumber" : 82,
        "endLineNumber" : 662,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  String filename=config.apiDocFilename(templateName,tag);\n  File written=processTemplateToFile(operation,templateName,filename,generateApiDocumentation,CodegenConstants.API_DOCS);\n  if (written != null) {\n    files.add(written);\n    if (config.isEnablePostProcessFile() && !dryRun) {\n      config.postProcessFile(written,\"api-doc\");\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 49,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 593,
        "startLineNumber" : 653,
        "startColumnNumber" : 16,
        "endLineNumber" : 662,
        "endColumnNumber" : 17
      },
      "nodeContext" : "for (String templateName : config.apiDocTemplateFiles().keySet()) {\n  String filename=config.apiDocFilename(templateName,tag);\n  File written=processTemplateToFile(operation,templateName,filename,generateApiDocumentation,CodegenConstants.API_DOCS);\n  if (written != null) {\n    files.add(written);\n    if (config.isEnablePostProcessFile() && !dryRun) {\n      config.postProcessFile(written,\"api-doc\");\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 59,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5673,
        "startLineNumber" : 565,
        "startColumnNumber" : 16,
        "endLineNumber" : 664,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  List<CodegenOperation> ops=paths.get(tag);\n  ops.sort((one,another) -> ObjectUtils.compare(one.operationId,another.operationId));\n  Map<String,Object> operation=processOperations(config,tag,ops,allModels);\n  URL url=URLPathUtils.getServerURL(openAPI,config.serverVariableOverrides());\n  operation.put(\"basePath\",basePath);\n  operation.put(\"basePathWithoutHost\",removeTrailingSlash(config.encodePath(url.getPath())));\n  operation.put(\"contextPath\",contextPath);\n  operation.put(\"baseName\",tag);\n  operation.put(\"apiPackage\",config.apiPackage());\n  operation.put(\"modelPackage\",config.modelPackage());\n  operation.putAll(config.additionalProperties());\n  operation.put(\"classname\",config.toApiName(tag));\n  operation.put(\"classVarName\",config.toApiVarName(tag));\n  operation.put(\"importPath\",config.toApiImport(tag));\n  operation.put(\"classFilename\",config.toApiFilename(tag));\n  operation.put(\"strictSpecBehavior\",config.isStrictSpecBehavior());\n  if (allModels == null || allModels.isEmpty()) {\n    operation.put(\"hasModel\",false);\n  }\n else {\n    operation.put(\"hasModel\",true);\n  }\n  if (!config.vendorExtensions().isEmpty()) {\n    operation.put(\"vendorExtensions\",config.vendorExtensions());\n  }\n  if (config.vendorExtensions().containsKey(\"x-group-parameters\")) {\n    boolean isGroupParameters=Boolean.parseBoolean(config.vendorExtensions().get(\"x-group-parameters\").toString());\n    Map<String,Object> objectMap=(Map<String,Object>)operation.get(\"operations\");\n    @SuppressWarnings(\"unchecked\") List<CodegenOperation> operations=(List<CodegenOperation>)objectMap.get(\"operation\");\n    for (    CodegenOperation op : operations) {\n      if (isGroupParameters && !op.vendorExtensions.containsKey(\"x-group-parameters\")) {\n        op.vendorExtensions.put(\"x-group-parameters\",Boolean.TRUE);\n      }\n    }\n  }\n  boolean sortParamsByRequiredFlag=true;\n  if (this.config.additionalProperties().containsKey(CodegenConstants.SORT_PARAMS_BY_REQUIRED_FLAG)) {\n    sortParamsByRequiredFlag=Boolean.parseBoolean(this.config.additionalProperties().get(CodegenConstants.SORT_PARAMS_BY_REQUIRED_FLAG).toString());\n  }\n  operation.put(\"sortParamsByRequiredFlag\",sortParamsByRequiredFlag);\n  allOperations.add(new HashMap<>(operation));\n  addAuthenticationSwitches(operation);\n  for (  String templateName : config.apiTemplateFiles().keySet()) {\n    String filename=config.apiFilename(templateName,tag);\n    File written=processTemplateToFile(operation,templateName,filename,generateApis,CodegenConstants.APIS);\n    if (written != null) {\n      files.add(written);\n      if (config.isEnablePostProcessFile() && !dryRun) {\n        config.postProcessFile(written,\"api\");\n      }\n    }\n  }\n  for (  String templateName : config.apiTestTemplateFiles().keySet()) {\n    String filename=config.apiTestFilename(templateName,tag);\n    File apiTestFile=new File(filename);\n    if (apiTestFile.exists()) {\n      this.templateProcessor.skip(apiTestFile.toPath(),\"Test files never overwrite an existing file of the same name.\");\n    }\n else {\n      File written=processTemplateToFile(operation,templateName,filename,generateApiTests,CodegenConstants.API_TESTS,config.apiTestFileFolder());\n      if (written != null) {\n        files.add(written);\n        if (config.isEnablePostProcessFile() && !dryRun) {\n          config.postProcessFile(written,\"api-test\");\n        }\n      }\n    }\n  }\n  for (  String templateName : config.apiDocTemplateFiles().keySet()) {\n    String filename=config.apiDocFilename(templateName,tag);\n    File written=processTemplateToFile(operation,templateName,filename,generateApiDocumentation,CodegenConstants.API_DOCS);\n    if (written != null) {\n      files.add(written);\n      if (config.isEnablePostProcessFile() && !dryRun) {\n        config.postProcessFile(written,\"api-doc\");\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 548,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5809,
        "startLineNumber" : 565,
        "startColumnNumber" : 12,
        "endLineNumber" : 666,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  List<CodegenOperation> ops=paths.get(tag);\n  ops.sort((one,another) -> ObjectUtils.compare(one.operationId,another.operationId));\n  Map<String,Object> operation=processOperations(config,tag,ops,allModels);\n  URL url=URLPathUtils.getServerURL(openAPI,config.serverVariableOverrides());\n  operation.put(\"basePath\",basePath);\n  operation.put(\"basePathWithoutHost\",removeTrailingSlash(config.encodePath(url.getPath())));\n  operation.put(\"contextPath\",contextPath);\n  operation.put(\"baseName\",tag);\n  operation.put(\"apiPackage\",config.apiPackage());\n  operation.put(\"modelPackage\",config.modelPackage());\n  operation.putAll(config.additionalProperties());\n  operation.put(\"classname\",config.toApiName(tag));\n  operation.put(\"classVarName\",config.toApiVarName(tag));\n  operation.put(\"importPath\",config.toApiImport(tag));\n  operation.put(\"classFilename\",config.toApiFilename(tag));\n  operation.put(\"strictSpecBehavior\",config.isStrictSpecBehavior());\n  if (allModels == null || allModels.isEmpty()) {\n    operation.put(\"hasModel\",false);\n  }\n else {\n    operation.put(\"hasModel\",true);\n  }\n  if (!config.vendorExtensions().isEmpty()) {\n    operation.put(\"vendorExtensions\",config.vendorExtensions());\n  }\n  if (config.vendorExtensions().containsKey(\"x-group-parameters\")) {\n    boolean isGroupParameters=Boolean.parseBoolean(config.vendorExtensions().get(\"x-group-parameters\").toString());\n    Map<String,Object> objectMap=(Map<String,Object>)operation.get(\"operations\");\n    @SuppressWarnings(\"unchecked\") List<CodegenOperation> operations=(List<CodegenOperation>)objectMap.get(\"operation\");\n    for (    CodegenOperation op : operations) {\n      if (isGroupParameters && !op.vendorExtensions.containsKey(\"x-group-parameters\")) {\n        op.vendorExtensions.put(\"x-group-parameters\",Boolean.TRUE);\n      }\n    }\n  }\n  boolean sortParamsByRequiredFlag=true;\n  if (this.config.additionalProperties().containsKey(CodegenConstants.SORT_PARAMS_BY_REQUIRED_FLAG)) {\n    sortParamsByRequiredFlag=Boolean.parseBoolean(this.config.additionalProperties().get(CodegenConstants.SORT_PARAMS_BY_REQUIRED_FLAG).toString());\n  }\n  operation.put(\"sortParamsByRequiredFlag\",sortParamsByRequiredFlag);\n  allOperations.add(new HashMap<>(operation));\n  addAuthenticationSwitches(operation);\n  for (  String templateName : config.apiTemplateFiles().keySet()) {\n    String filename=config.apiFilename(templateName,tag);\n    File written=processTemplateToFile(operation,templateName,filename,generateApis,CodegenConstants.APIS);\n    if (written != null) {\n      files.add(written);\n      if (config.isEnablePostProcessFile() && !dryRun) {\n        config.postProcessFile(written,\"api\");\n      }\n    }\n  }\n  for (  String templateName : config.apiTestTemplateFiles().keySet()) {\n    String filename=config.apiTestFilename(templateName,tag);\n    File apiTestFile=new File(filename);\n    if (apiTestFile.exists()) {\n      this.templateProcessor.skip(apiTestFile.toPath(),\"Test files never overwrite an existing file of the same name.\");\n    }\n else {\n      File written=processTemplateToFile(operation,templateName,filename,generateApiTests,CodegenConstants.API_TESTS,config.apiTestFileFolder());\n      if (written != null) {\n        files.add(written);\n        if (config.isEnablePostProcessFile() && !dryRun) {\n          config.postProcessFile(written,\"api-test\");\n        }\n      }\n    }\n  }\n  for (  String templateName : config.apiDocTemplateFiles().keySet()) {\n    String filename=config.apiDocFilename(templateName,tag);\n    File written=processTemplateToFile(operation,templateName,filename,generateApiDocumentation,CodegenConstants.API_DOCS);\n    if (written != null) {\n      files.add(written);\n      if (config.isEnablePostProcessFile() && !dryRun) {\n        config.postProcessFile(written,\"api-doc\");\n      }\n    }\n  }\n}\n catch (Exception e) {\n  throw new RuntimeException(\"Could not generate api file for '\" + tag + \"'\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 564,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 5833,
        "startLineNumber" : 564,
        "startColumnNumber" : 42,
        "endLineNumber" : 667,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    List<CodegenOperation> ops=paths.get(tag);\n    ops.sort((one,another) -> ObjectUtils.compare(one.operationId,another.operationId));\n    Map<String,Object> operation=processOperations(config,tag,ops,allModels);\n    URL url=URLPathUtils.getServerURL(openAPI,config.serverVariableOverrides());\n    operation.put(\"basePath\",basePath);\n    operation.put(\"basePathWithoutHost\",removeTrailingSlash(config.encodePath(url.getPath())));\n    operation.put(\"contextPath\",contextPath);\n    operation.put(\"baseName\",tag);\n    operation.put(\"apiPackage\",config.apiPackage());\n    operation.put(\"modelPackage\",config.modelPackage());\n    operation.putAll(config.additionalProperties());\n    operation.put(\"classname\",config.toApiName(tag));\n    operation.put(\"classVarName\",config.toApiVarName(tag));\n    operation.put(\"importPath\",config.toApiImport(tag));\n    operation.put(\"classFilename\",config.toApiFilename(tag));\n    operation.put(\"strictSpecBehavior\",config.isStrictSpecBehavior());\n    if (allModels == null || allModels.isEmpty()) {\n      operation.put(\"hasModel\",false);\n    }\n else {\n      operation.put(\"hasModel\",true);\n    }\n    if (!config.vendorExtensions().isEmpty()) {\n      operation.put(\"vendorExtensions\",config.vendorExtensions());\n    }\n    if (config.vendorExtensions().containsKey(\"x-group-parameters\")) {\n      boolean isGroupParameters=Boolean.parseBoolean(config.vendorExtensions().get(\"x-group-parameters\").toString());\n      Map<String,Object> objectMap=(Map<String,Object>)operation.get(\"operations\");\n      @SuppressWarnings(\"unchecked\") List<CodegenOperation> operations=(List<CodegenOperation>)objectMap.get(\"operation\");\n      for (      CodegenOperation op : operations) {\n        if (isGroupParameters && !op.vendorExtensions.containsKey(\"x-group-parameters\")) {\n          op.vendorExtensions.put(\"x-group-parameters\",Boolean.TRUE);\n        }\n      }\n    }\n    boolean sortParamsByRequiredFlag=true;\n    if (this.config.additionalProperties().containsKey(CodegenConstants.SORT_PARAMS_BY_REQUIRED_FLAG)) {\n      sortParamsByRequiredFlag=Boolean.parseBoolean(this.config.additionalProperties().get(CodegenConstants.SORT_PARAMS_BY_REQUIRED_FLAG).toString());\n    }\n    operation.put(\"sortParamsByRequiredFlag\",sortParamsByRequiredFlag);\n    allOperations.add(new HashMap<>(operation));\n    addAuthenticationSwitches(operation);\n    for (    String templateName : config.apiTemplateFiles().keySet()) {\n      String filename=config.apiFilename(templateName,tag);\n      File written=processTemplateToFile(operation,templateName,filename,generateApis,CodegenConstants.APIS);\n      if (written != null) {\n        files.add(written);\n        if (config.isEnablePostProcessFile() && !dryRun) {\n          config.postProcessFile(written,\"api\");\n        }\n      }\n    }\n    for (    String templateName : config.apiTestTemplateFiles().keySet()) {\n      String filename=config.apiTestFilename(templateName,tag);\n      File apiTestFile=new File(filename);\n      if (apiTestFile.exists()) {\n        this.templateProcessor.skip(apiTestFile.toPath(),\"Test files never overwrite an existing file of the same name.\");\n      }\n else {\n        File written=processTemplateToFile(operation,templateName,filename,generateApiTests,CodegenConstants.API_TESTS,config.apiTestFileFolder());\n        if (written != null) {\n          files.add(written);\n          if (config.isEnablePostProcessFile() && !dryRun) {\n            config.postProcessFile(written,\"api-test\");\n          }\n        }\n      }\n    }\n    for (    String templateName : config.apiDocTemplateFiles().keySet()) {\n      String filename=config.apiDocFilename(templateName,tag);\n      File written=processTemplateToFile(operation,templateName,filename,generateApiDocumentation,CodegenConstants.API_DOCS);\n      if (written != null) {\n        files.add(written);\n        if (config.isEnablePostProcessFile() && !dryRun) {\n          config.postProcessFile(written,\"api-doc\");\n        }\n      }\n    }\n  }\n catch (  Exception e) {\n    throw new RuntimeException(\"Could not generate api file for '\" + tag + \"'\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 565,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5867,
        "startLineNumber" : 564,
        "startColumnNumber" : 8,
        "endLineNumber" : 667,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (String tag : paths.keySet()) {\n  try {\n    List<CodegenOperation> ops=paths.get(tag);\n    ops.sort((one,another) -> ObjectUtils.compare(one.operationId,another.operationId));\n    Map<String,Object> operation=processOperations(config,tag,ops,allModels);\n    URL url=URLPathUtils.getServerURL(openAPI,config.serverVariableOverrides());\n    operation.put(\"basePath\",basePath);\n    operation.put(\"basePathWithoutHost\",removeTrailingSlash(config.encodePath(url.getPath())));\n    operation.put(\"contextPath\",contextPath);\n    operation.put(\"baseName\",tag);\n    operation.put(\"apiPackage\",config.apiPackage());\n    operation.put(\"modelPackage\",config.modelPackage());\n    operation.putAll(config.additionalProperties());\n    operation.put(\"classname\",config.toApiName(tag));\n    operation.put(\"classVarName\",config.toApiVarName(tag));\n    operation.put(\"importPath\",config.toApiImport(tag));\n    operation.put(\"classFilename\",config.toApiFilename(tag));\n    operation.put(\"strictSpecBehavior\",config.isStrictSpecBehavior());\n    if (allModels == null || allModels.isEmpty()) {\n      operation.put(\"hasModel\",false);\n    }\n else {\n      operation.put(\"hasModel\",true);\n    }\n    if (!config.vendorExtensions().isEmpty()) {\n      operation.put(\"vendorExtensions\",config.vendorExtensions());\n    }\n    if (config.vendorExtensions().containsKey(\"x-group-parameters\")) {\n      boolean isGroupParameters=Boolean.parseBoolean(config.vendorExtensions().get(\"x-group-parameters\").toString());\n      Map<String,Object> objectMap=(Map<String,Object>)operation.get(\"operations\");\n      @SuppressWarnings(\"unchecked\") List<CodegenOperation> operations=(List<CodegenOperation>)objectMap.get(\"operation\");\n      for (      CodegenOperation op : operations) {\n        if (isGroupParameters && !op.vendorExtensions.containsKey(\"x-group-parameters\")) {\n          op.vendorExtensions.put(\"x-group-parameters\",Boolean.TRUE);\n        }\n      }\n    }\n    boolean sortParamsByRequiredFlag=true;\n    if (this.config.additionalProperties().containsKey(CodegenConstants.SORT_PARAMS_BY_REQUIRED_FLAG)) {\n      sortParamsByRequiredFlag=Boolean.parseBoolean(this.config.additionalProperties().get(CodegenConstants.SORT_PARAMS_BY_REQUIRED_FLAG).toString());\n    }\n    operation.put(\"sortParamsByRequiredFlag\",sortParamsByRequiredFlag);\n    allOperations.add(new HashMap<>(operation));\n    addAuthenticationSwitches(operation);\n    for (    String templateName : config.apiTemplateFiles().keySet()) {\n      String filename=config.apiFilename(templateName,tag);\n      File written=processTemplateToFile(operation,templateName,filename,generateApis,CodegenConstants.APIS);\n      if (written != null) {\n        files.add(written);\n        if (config.isEnablePostProcessFile() && !dryRun) {\n          config.postProcessFile(written,\"api\");\n        }\n      }\n    }\n    for (    String templateName : config.apiTestTemplateFiles().keySet()) {\n      String filename=config.apiTestFilename(templateName,tag);\n      File apiTestFile=new File(filename);\n      if (apiTestFile.exists()) {\n        this.templateProcessor.skip(apiTestFile.toPath(),\"Test files never overwrite an existing file of the same name.\");\n      }\n else {\n        File written=processTemplateToFile(operation,templateName,filename,generateApiTests,CodegenConstants.API_TESTS,config.apiTestFileFolder());\n        if (written != null) {\n          files.add(written);\n          if (config.isEnablePostProcessFile() && !dryRun) {\n            config.postProcessFile(written,\"api-test\");\n          }\n        }\n      }\n    }\n    for (    String templateName : config.apiDocTemplateFiles().keySet()) {\n      String filename=config.apiDocFilename(templateName,tag);\n      File written=processTemplateToFile(operation,templateName,filename,generateApiDocumentation,CodegenConstants.API_DOCS);\n      if (written != null) {\n        files.add(written);\n        if (config.isEnablePostProcessFile() && !dryRun) {\n          config.postProcessFile(written,\"api-doc\");\n        }\n      }\n    }\n  }\n catch (  Exception e) {\n    throw new RuntimeException(\"Could not generate api file for '\" + tag + \"'\",e);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 573,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6979,
        "startLineNumber" : 543,
        "startColumnNumber" : 92,
        "endLineNumber" : 673,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (!generateApis) {\n    LOGGER.info(\"Skipping generation of APIs.\");\n    return;\n  }\n  Map<String,List<CodegenOperation>> paths=processPaths(this.openAPI.getPaths());\n  Set<String> apisToGenerate=null;\n  String apiNames=GlobalSettings.getProperty(\"apis\");\n  if (apiNames != null && !apiNames.isEmpty()) {\n    apisToGenerate=new HashSet<>(Arrays.asList(apiNames.split(\",\")));\n  }\n  if (apisToGenerate != null && !apisToGenerate.isEmpty()) {\n    Map<String,List<CodegenOperation>> updatedPaths=new TreeMap<>();\n    for (    String m : paths.keySet()) {\n      if (apisToGenerate.contains(m)) {\n        updatedPaths.put(m,paths.get(m));\n      }\n    }\n    paths=updatedPaths;\n  }\n  for (  String tag : paths.keySet()) {\n    try {\n      List<CodegenOperation> ops=paths.get(tag);\n      ops.sort((one,another) -> ObjectUtils.compare(one.operationId,another.operationId));\n      Map<String,Object> operation=processOperations(config,tag,ops,allModels);\n      URL url=URLPathUtils.getServerURL(openAPI,config.serverVariableOverrides());\n      operation.put(\"basePath\",basePath);\n      operation.put(\"basePathWithoutHost\",removeTrailingSlash(config.encodePath(url.getPath())));\n      operation.put(\"contextPath\",contextPath);\n      operation.put(\"baseName\",tag);\n      operation.put(\"apiPackage\",config.apiPackage());\n      operation.put(\"modelPackage\",config.modelPackage());\n      operation.putAll(config.additionalProperties());\n      operation.put(\"classname\",config.toApiName(tag));\n      operation.put(\"classVarName\",config.toApiVarName(tag));\n      operation.put(\"importPath\",config.toApiImport(tag));\n      operation.put(\"classFilename\",config.toApiFilename(tag));\n      operation.put(\"strictSpecBehavior\",config.isStrictSpecBehavior());\n      if (allModels == null || allModels.isEmpty()) {\n        operation.put(\"hasModel\",false);\n      }\n else {\n        operation.put(\"hasModel\",true);\n      }\n      if (!config.vendorExtensions().isEmpty()) {\n        operation.put(\"vendorExtensions\",config.vendorExtensions());\n      }\n      if (config.vendorExtensions().containsKey(\"x-group-parameters\")) {\n        boolean isGroupParameters=Boolean.parseBoolean(config.vendorExtensions().get(\"x-group-parameters\").toString());\n        Map<String,Object> objectMap=(Map<String,Object>)operation.get(\"operations\");\n        @SuppressWarnings(\"unchecked\") List<CodegenOperation> operations=(List<CodegenOperation>)objectMap.get(\"operation\");\n        for (        CodegenOperation op : operations) {\n          if (isGroupParameters && !op.vendorExtensions.containsKey(\"x-group-parameters\")) {\n            op.vendorExtensions.put(\"x-group-parameters\",Boolean.TRUE);\n          }\n        }\n      }\n      boolean sortParamsByRequiredFlag=true;\n      if (this.config.additionalProperties().containsKey(CodegenConstants.SORT_PARAMS_BY_REQUIRED_FLAG)) {\n        sortParamsByRequiredFlag=Boolean.parseBoolean(this.config.additionalProperties().get(CodegenConstants.SORT_PARAMS_BY_REQUIRED_FLAG).toString());\n      }\n      operation.put(\"sortParamsByRequiredFlag\",sortParamsByRequiredFlag);\n      allOperations.add(new HashMap<>(operation));\n      addAuthenticationSwitches(operation);\n      for (      String templateName : config.apiTemplateFiles().keySet()) {\n        String filename=config.apiFilename(templateName,tag);\n        File written=processTemplateToFile(operation,templateName,filename,generateApis,CodegenConstants.APIS);\n        if (written != null) {\n          files.add(written);\n          if (config.isEnablePostProcessFile() && !dryRun) {\n            config.postProcessFile(written,\"api\");\n          }\n        }\n      }\n      for (      String templateName : config.apiTestTemplateFiles().keySet()) {\n        String filename=config.apiTestFilename(templateName,tag);\n        File apiTestFile=new File(filename);\n        if (apiTestFile.exists()) {\n          this.templateProcessor.skip(apiTestFile.toPath(),\"Test files never overwrite an existing file of the same name.\");\n        }\n else {\n          File written=processTemplateToFile(operation,templateName,filename,generateApiTests,CodegenConstants.API_TESTS,config.apiTestFileFolder());\n          if (written != null) {\n            files.add(written);\n            if (config.isEnablePostProcessFile() && !dryRun) {\n              config.postProcessFile(written,\"api-test\");\n            }\n          }\n        }\n      }\n      for (      String templateName : config.apiDocTemplateFiles().keySet()) {\n        String filename=config.apiDocFilename(templateName,tag);\n        File written=processTemplateToFile(operation,templateName,filename,generateApiDocumentation,CodegenConstants.API_DOCS);\n        if (written != null) {\n          files.add(written);\n          if (config.isEnablePostProcessFile() && !dryRun) {\n            config.postProcessFile(written,\"api-doc\");\n          }\n        }\n      }\n    }\n catch (    Exception e) {\n      throw new RuntimeException(\"Could not generate api file for '\" + tag + \"'\",e);\n    }\n  }\n  if (GlobalSettings.getProperty(\"debugOperations\") != null) {\n    LOGGER.info(\"############ Operation info ############\");\n    Json.prettyPrint(allOperations);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 719,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7102,
        "startLineNumber" : 542,
        "startColumnNumber" : 4,
        "endLineNumber" : 673,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@SuppressWarnings(\"unchecked\") void generateApis(List<File> files,List<Object> allOperations,List<Object> allModels){\n  if (!generateApis) {\n    LOGGER.info(\"Skipping generation of APIs.\");\n    return;\n  }\n  Map<String,List<CodegenOperation>> paths=processPaths(this.openAPI.getPaths());\n  Set<String> apisToGenerate=null;\n  String apiNames=GlobalSettings.getProperty(\"apis\");\n  if (apiNames != null && !apiNames.isEmpty()) {\n    apisToGenerate=new HashSet<>(Arrays.asList(apiNames.split(\",\")));\n  }\n  if (apisToGenerate != null && !apisToGenerate.isEmpty()) {\n    Map<String,List<CodegenOperation>> updatedPaths=new TreeMap<>();\n    for (    String m : paths.keySet()) {\n      if (apisToGenerate.contains(m)) {\n        updatedPaths.put(m,paths.get(m));\n      }\n    }\n    paths=updatedPaths;\n  }\n  for (  String tag : paths.keySet()) {\n    try {\n      List<CodegenOperation> ops=paths.get(tag);\n      ops.sort((one,another) -> ObjectUtils.compare(one.operationId,another.operationId));\n      Map<String,Object> operation=processOperations(config,tag,ops,allModels);\n      URL url=URLPathUtils.getServerURL(openAPI,config.serverVariableOverrides());\n      operation.put(\"basePath\",basePath);\n      operation.put(\"basePathWithoutHost\",removeTrailingSlash(config.encodePath(url.getPath())));\n      operation.put(\"contextPath\",contextPath);\n      operation.put(\"baseName\",tag);\n      operation.put(\"apiPackage\",config.apiPackage());\n      operation.put(\"modelPackage\",config.modelPackage());\n      operation.putAll(config.additionalProperties());\n      operation.put(\"classname\",config.toApiName(tag));\n      operation.put(\"classVarName\",config.toApiVarName(tag));\n      operation.put(\"importPath\",config.toApiImport(tag));\n      operation.put(\"classFilename\",config.toApiFilename(tag));\n      operation.put(\"strictSpecBehavior\",config.isStrictSpecBehavior());\n      if (allModels == null || allModels.isEmpty()) {\n        operation.put(\"hasModel\",false);\n      }\n else {\n        operation.put(\"hasModel\",true);\n      }\n      if (!config.vendorExtensions().isEmpty()) {\n        operation.put(\"vendorExtensions\",config.vendorExtensions());\n      }\n      if (config.vendorExtensions().containsKey(\"x-group-parameters\")) {\n        boolean isGroupParameters=Boolean.parseBoolean(config.vendorExtensions().get(\"x-group-parameters\").toString());\n        Map<String,Object> objectMap=(Map<String,Object>)operation.get(\"operations\");\n        @SuppressWarnings(\"unchecked\") List<CodegenOperation> operations=(List<CodegenOperation>)objectMap.get(\"operation\");\n        for (        CodegenOperation op : operations) {\n          if (isGroupParameters && !op.vendorExtensions.containsKey(\"x-group-parameters\")) {\n            op.vendorExtensions.put(\"x-group-parameters\",Boolean.TRUE);\n          }\n        }\n      }\n      boolean sortParamsByRequiredFlag=true;\n      if (this.config.additionalProperties().containsKey(CodegenConstants.SORT_PARAMS_BY_REQUIRED_FLAG)) {\n        sortParamsByRequiredFlag=Boolean.parseBoolean(this.config.additionalProperties().get(CodegenConstants.SORT_PARAMS_BY_REQUIRED_FLAG).toString());\n      }\n      operation.put(\"sortParamsByRequiredFlag\",sortParamsByRequiredFlag);\n      allOperations.add(new HashMap<>(operation));\n      addAuthenticationSwitches(operation);\n      for (      String templateName : config.apiTemplateFiles().keySet()) {\n        String filename=config.apiFilename(templateName,tag);\n        File written=processTemplateToFile(operation,templateName,filename,generateApis,CodegenConstants.APIS);\n        if (written != null) {\n          files.add(written);\n          if (config.isEnablePostProcessFile() && !dryRun) {\n            config.postProcessFile(written,\"api\");\n          }\n        }\n      }\n      for (      String templateName : config.apiTestTemplateFiles().keySet()) {\n        String filename=config.apiTestFilename(templateName,tag);\n        File apiTestFile=new File(filename);\n        if (apiTestFile.exists()) {\n          this.templateProcessor.skip(apiTestFile.toPath(),\"Test files never overwrite an existing file of the same name.\");\n        }\n else {\n          File written=processTemplateToFile(operation,templateName,filename,generateApiTests,CodegenConstants.API_TESTS,config.apiTestFileFolder());\n          if (written != null) {\n            files.add(written);\n            if (config.isEnablePostProcessFile() && !dryRun) {\n              config.postProcessFile(written,\"api-test\");\n            }\n          }\n        }\n      }\n      for (      String templateName : config.apiDocTemplateFiles().keySet()) {\n        String filename=config.apiDocFilename(templateName,tag);\n        File written=processTemplateToFile(operation,templateName,filename,generateApiDocumentation,CodegenConstants.API_DOCS);\n        if (written != null) {\n          files.add(written);\n          if (config.isEnablePostProcessFile() && !dryRun) {\n            config.postProcessFile(written,\"api-doc\");\n          }\n        }\n      }\n    }\n catch (    Exception e) {\n      throw new RuntimeException(\"Could not generate api file for '\" + tag + \"'\",e);\n    }\n  }\n  if (GlobalSettings.getProperty(\"debugOperations\") != null) {\n    LOGGER.info(\"############ Operation info ############\");\n    Json.prettyPrint(allOperations);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 746,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 654,
        "startColumnNumber" : 20,
        "endLineNumber" : 654,
        "endColumnNumber" : 79
      },
      "nodeContext" : "String filename=config.apiDocFilename(templateName,tag);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 4,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 40,
    "startLineNumber" : 654,
    "startColumnNumber" : 38,
    "endLineNumber" : 654,
    "endColumnNumber" : 78
  } ],
  "layoutRelationDataList" : [ ]
}