{
  "id" : 539,
  "expression" : "elementType",
  "projectName" : "JakeWharton@butterknife",
  "commitID" : "244a9e7f73df20c80faefd0bb78d81e9c6ed642f",
  "filePath" : "butterknife/src/main/java/butterknife/internal/ButterKnifeProcessor.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "elementType",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 200,
      "startColumnNumber" : 8,
      "endLineNumber" : 200,
      "endColumnNumber" : 19
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 200,
        "startColumnNumber" : 8,
        "endLineNumber" : 200,
        "endColumnNumber" : 43
      },
      "nodeContext" : "elementType instanceof TypeVariable",
      "nodeType" : "InstanceofExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 160,
        "startLineNumber" : 200,
        "startColumnNumber" : 4,
        "endLineNumber" : 203,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (elementType instanceof TypeVariable) {\n  TypeVariable typeVariable=(TypeVariable)elementType;\n  elementType=typeVariable.getUpperBound();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 21,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1677,
        "startLineNumber" : 194,
        "startColumnNumber" : 37,
        "endLineNumber" : 236,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  boolean hasError=false;\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  TypeMirror elementType=element.asType();\n  if (elementType instanceof TypeVariable) {\n    TypeVariable typeVariable=(TypeVariable)elementType;\n    elementType=typeVariable.getUpperBound();\n  }\n  if (!isSubtypeOfType(elementType,VIEW_TYPE)) {\n    error(element,\"@InjectView fields must extend from View. (%s.%s)\",enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  hasError|=isValidForGeneratedCode(InjectView.class,\"fields\",element);\n  if (element.getAnnotation(InjectViews.class) != null) {\n    error(element,\"Only one of @InjectView and @InjectViews is allowed. (%s.%s)\",enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (hasError) {\n    return;\n  }\n  String name=element.getSimpleName().toString();\n  int id=element.getAnnotation(InjectView.class).value();\n  String type=elementType.toString();\n  boolean required=element.getAnnotation(Optional.class) == null;\n  ViewInjector viewInjector=getOrCreateTargetClass(targetClassMap,enclosingElement);\n  ViewBinding binding=new ViewBinding(name,type,required);\n  viewInjector.addView(id,binding);\n  erasedTargetNames.add(enclosingElement.toString());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 182,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1807,
        "startLineNumber" : 193,
        "startColumnNumber" : 2,
        "endLineNumber" : 236,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private void parseInjectView(Element element,Map<TypeElement,ViewInjector> targetClassMap,Set<String> erasedTargetNames){\n  boolean hasError=false;\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  TypeMirror elementType=element.asType();\n  if (elementType instanceof TypeVariable) {\n    TypeVariable typeVariable=(TypeVariable)elementType;\n    elementType=typeVariable.getUpperBound();\n  }\n  if (!isSubtypeOfType(elementType,VIEW_TYPE)) {\n    error(element,\"@InjectView fields must extend from View. (%s.%s)\",enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  hasError|=isValidForGeneratedCode(InjectView.class,\"fields\",element);\n  if (element.getAnnotation(InjectViews.class) != null) {\n    error(element,\"Only one of @InjectView and @InjectViews is allowed. (%s.%s)\",enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (hasError) {\n    return;\n  }\n  String name=element.getSimpleName().toString();\n  int id=element.getAnnotation(InjectView.class).value();\n  String type=elementType.toString();\n  boolean required=element.getAnnotation(Optional.class) == null;\n  ViewInjector viewInjector=getOrCreateTargetClass(targetClassMap,enclosingElement);\n  ViewBinding binding=new ViewBinding(name,type,required);\n  viewInjector.addView(id,binding);\n  erasedTargetNames.add(enclosingElement.toString());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 206,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 200,
        "startColumnNumber" : 8,
        "endLineNumber" : 200,
        "endColumnNumber" : 43
      },
      "nodeContext" : "elementType instanceof TypeVariable",
      "nodeType" : "InstanceofExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "javax.lang.model.type.TypeMirror"
  }, {
    "nodeContext" : "elementType",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 201,
      "startColumnNumber" : 49,
      "endLineNumber" : 201,
      "endColumnNumber" : 60
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 201,
        "startColumnNumber" : 34,
        "endLineNumber" : 201,
        "endColumnNumber" : 60
      },
      "nodeContext" : "(TypeVariable)elementType",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 201,
        "startColumnNumber" : 19,
        "endLineNumber" : 201,
        "endColumnNumber" : 60
      },
      "nodeContext" : "typeVariable=(TypeVariable)elementType",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 201,
        "startColumnNumber" : 6,
        "endLineNumber" : 201,
        "endColumnNumber" : 61
      },
      "nodeContext" : "TypeVariable typeVariable=(TypeVariable)elementType;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 119,
        "startLineNumber" : 200,
        "startColumnNumber" : 45,
        "endLineNumber" : 203,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  TypeVariable typeVariable=(TypeVariable)elementType;\n  elementType=typeVariable.getUpperBound();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 160,
        "startLineNumber" : 200,
        "startColumnNumber" : 4,
        "endLineNumber" : 203,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (elementType instanceof TypeVariable) {\n  TypeVariable typeVariable=(TypeVariable)elementType;\n  elementType=typeVariable.getUpperBound();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 21,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1677,
        "startLineNumber" : 194,
        "startColumnNumber" : 37,
        "endLineNumber" : 236,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  boolean hasError=false;\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  TypeMirror elementType=element.asType();\n  if (elementType instanceof TypeVariable) {\n    TypeVariable typeVariable=(TypeVariable)elementType;\n    elementType=typeVariable.getUpperBound();\n  }\n  if (!isSubtypeOfType(elementType,VIEW_TYPE)) {\n    error(element,\"@InjectView fields must extend from View. (%s.%s)\",enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  hasError|=isValidForGeneratedCode(InjectView.class,\"fields\",element);\n  if (element.getAnnotation(InjectViews.class) != null) {\n    error(element,\"Only one of @InjectView and @InjectViews is allowed. (%s.%s)\",enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (hasError) {\n    return;\n  }\n  String name=element.getSimpleName().toString();\n  int id=element.getAnnotation(InjectView.class).value();\n  String type=elementType.toString();\n  boolean required=element.getAnnotation(Optional.class) == null;\n  ViewInjector viewInjector=getOrCreateTargetClass(targetClassMap,enclosingElement);\n  ViewBinding binding=new ViewBinding(name,type,required);\n  viewInjector.addView(id,binding);\n  erasedTargetNames.add(enclosingElement.toString());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 182,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1807,
        "startLineNumber" : 193,
        "startColumnNumber" : 2,
        "endLineNumber" : 236,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private void parseInjectView(Element element,Map<TypeElement,ViewInjector> targetClassMap,Set<String> erasedTargetNames){\n  boolean hasError=false;\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  TypeMirror elementType=element.asType();\n  if (elementType instanceof TypeVariable) {\n    TypeVariable typeVariable=(TypeVariable)elementType;\n    elementType=typeVariable.getUpperBound();\n  }\n  if (!isSubtypeOfType(elementType,VIEW_TYPE)) {\n    error(element,\"@InjectView fields must extend from View. (%s.%s)\",enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  hasError|=isValidForGeneratedCode(InjectView.class,\"fields\",element);\n  if (element.getAnnotation(InjectViews.class) != null) {\n    error(element,\"Only one of @InjectView and @InjectViews is allowed. (%s.%s)\",enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (hasError) {\n    return;\n  }\n  String name=element.getSimpleName().toString();\n  int id=element.getAnnotation(InjectView.class).value();\n  String type=elementType.toString();\n  boolean required=element.getAnnotation(Optional.class) == null;\n  ViewInjector viewInjector=getOrCreateTargetClass(targetClassMap,enclosingElement);\n  ViewBinding binding=new ViewBinding(name,type,required);\n  viewInjector.addView(id,binding);\n  erasedTargetNames.add(enclosingElement.toString());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 206,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 201,
        "startColumnNumber" : 6,
        "endLineNumber" : 201,
        "endColumnNumber" : 61
      },
      "nodeContext" : "TypeVariable typeVariable=(TypeVariable)elementType;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "javax.lang.model.type.TypeMirror"
  }, {
    "nodeContext" : "elementType",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 204,
      "startColumnNumber" : 25,
      "endLineNumber" : 204,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 204,
        "startColumnNumber" : 9,
        "endLineNumber" : 204,
        "endColumnNumber" : 48
      },
      "nodeContext" : "isSubtypeOfType(elementType,VIEW_TYPE)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 204,
        "startColumnNumber" : 8,
        "endLineNumber" : 204,
        "endColumnNumber" : 48
      },
      "nodeContext" : "!isSubtypeOfType(elementType,VIEW_TYPE)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 223,
        "startLineNumber" : 204,
        "startColumnNumber" : 4,
        "endLineNumber" : 208,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (!isSubtypeOfType(elementType,VIEW_TYPE)) {\n  error(element,\"@InjectView fields must extend from View. (%s.%s)\",enclosingElement.getQualifiedName(),element.getSimpleName());\n  hasError=true;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1677,
        "startLineNumber" : 194,
        "startColumnNumber" : 37,
        "endLineNumber" : 236,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  boolean hasError=false;\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  TypeMirror elementType=element.asType();\n  if (elementType instanceof TypeVariable) {\n    TypeVariable typeVariable=(TypeVariable)elementType;\n    elementType=typeVariable.getUpperBound();\n  }\n  if (!isSubtypeOfType(elementType,VIEW_TYPE)) {\n    error(element,\"@InjectView fields must extend from View. (%s.%s)\",enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  hasError|=isValidForGeneratedCode(InjectView.class,\"fields\",element);\n  if (element.getAnnotation(InjectViews.class) != null) {\n    error(element,\"Only one of @InjectView and @InjectViews is allowed. (%s.%s)\",enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (hasError) {\n    return;\n  }\n  String name=element.getSimpleName().toString();\n  int id=element.getAnnotation(InjectView.class).value();\n  String type=elementType.toString();\n  boolean required=element.getAnnotation(Optional.class) == null;\n  ViewInjector viewInjector=getOrCreateTargetClass(targetClassMap,enclosingElement);\n  ViewBinding binding=new ViewBinding(name,type,required);\n  viewInjector.addView(id,binding);\n  erasedTargetNames.add(enclosingElement.toString());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 182,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1807,
        "startLineNumber" : 193,
        "startColumnNumber" : 2,
        "endLineNumber" : 236,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private void parseInjectView(Element element,Map<TypeElement,ViewInjector> targetClassMap,Set<String> erasedTargetNames){\n  boolean hasError=false;\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  TypeMirror elementType=element.asType();\n  if (elementType instanceof TypeVariable) {\n    TypeVariable typeVariable=(TypeVariable)elementType;\n    elementType=typeVariable.getUpperBound();\n  }\n  if (!isSubtypeOfType(elementType,VIEW_TYPE)) {\n    error(element,\"@InjectView fields must extend from View. (%s.%s)\",enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  hasError|=isValidForGeneratedCode(InjectView.class,\"fields\",element);\n  if (element.getAnnotation(InjectViews.class) != null) {\n    error(element,\"Only one of @InjectView and @InjectViews is allowed. (%s.%s)\",enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (hasError) {\n    return;\n  }\n  String name=element.getSimpleName().toString();\n  int id=element.getAnnotation(InjectView.class).value();\n  String type=elementType.toString();\n  boolean required=element.getAnnotation(Optional.class) == null;\n  ViewInjector viewInjector=getOrCreateTargetClass(targetClassMap,enclosingElement);\n  ViewBinding binding=new ViewBinding(name,type,required);\n  viewInjector.addView(id,binding);\n  erasedTargetNames.add(enclosingElement.toString());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 206,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 204,
        "startColumnNumber" : 8,
        "endLineNumber" : 204,
        "endColumnNumber" : 48
      },
      "nodeContext" : "!isSubtypeOfType(elementType,VIEW_TYPE)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "javax.lang.model.type.TypeMirror"
  }, {
    "nodeContext" : "elementType",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 227,
      "startColumnNumber" : 18,
      "endLineNumber" : 227,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 227,
        "startColumnNumber" : 18,
        "endLineNumber" : 227,
        "endColumnNumber" : 40
      },
      "nodeContext" : "elementType.toString()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 227,
        "startColumnNumber" : 11,
        "endLineNumber" : 227,
        "endColumnNumber" : 40
      },
      "nodeContext" : "type=elementType.toString()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 227,
        "startColumnNumber" : 4,
        "endLineNumber" : 227,
        "endColumnNumber" : 41
      },
      "nodeContext" : "String type=elementType.toString();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1677,
        "startLineNumber" : 194,
        "startColumnNumber" : 37,
        "endLineNumber" : 236,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  boolean hasError=false;\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  TypeMirror elementType=element.asType();\n  if (elementType instanceof TypeVariable) {\n    TypeVariable typeVariable=(TypeVariable)elementType;\n    elementType=typeVariable.getUpperBound();\n  }\n  if (!isSubtypeOfType(elementType,VIEW_TYPE)) {\n    error(element,\"@InjectView fields must extend from View. (%s.%s)\",enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  hasError|=isValidForGeneratedCode(InjectView.class,\"fields\",element);\n  if (element.getAnnotation(InjectViews.class) != null) {\n    error(element,\"Only one of @InjectView and @InjectViews is allowed. (%s.%s)\",enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (hasError) {\n    return;\n  }\n  String name=element.getSimpleName().toString();\n  int id=element.getAnnotation(InjectView.class).value();\n  String type=elementType.toString();\n  boolean required=element.getAnnotation(Optional.class) == null;\n  ViewInjector viewInjector=getOrCreateTargetClass(targetClassMap,enclosingElement);\n  ViewBinding binding=new ViewBinding(name,type,required);\n  viewInjector.addView(id,binding);\n  erasedTargetNames.add(enclosingElement.toString());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 182,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1807,
        "startLineNumber" : 193,
        "startColumnNumber" : 2,
        "endLineNumber" : 236,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private void parseInjectView(Element element,Map<TypeElement,ViewInjector> targetClassMap,Set<String> erasedTargetNames){\n  boolean hasError=false;\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  TypeMirror elementType=element.asType();\n  if (elementType instanceof TypeVariable) {\n    TypeVariable typeVariable=(TypeVariable)elementType;\n    elementType=typeVariable.getUpperBound();\n  }\n  if (!isSubtypeOfType(elementType,VIEW_TYPE)) {\n    error(element,\"@InjectView fields must extend from View. (%s.%s)\",enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  hasError|=isValidForGeneratedCode(InjectView.class,\"fields\",element);\n  if (element.getAnnotation(InjectViews.class) != null) {\n    error(element,\"Only one of @InjectView and @InjectViews is allowed. (%s.%s)\",enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (hasError) {\n    return;\n  }\n  String name=element.getSimpleName().toString();\n  int id=element.getAnnotation(InjectView.class).value();\n  String type=elementType.toString();\n  boolean required=element.getAnnotation(Optional.class) == null;\n  ViewInjector viewInjector=getOrCreateTargetClass(targetClassMap,enclosingElement);\n  ViewBinding binding=new ViewBinding(name,type,required);\n  viewInjector.addView(id,binding);\n  erasedTargetNames.add(enclosingElement.toString());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 206,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 227,
        "startColumnNumber" : 4,
        "endLineNumber" : 227,
        "endColumnNumber" : 41
      },
      "nodeContext" : "String type=elementType.toString();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "javax.lang.model.type.TypeMirror"
  } ],
  "positionList" : [ {
    "charLength" : 11,
    "startLineNumber" : 200,
    "startColumnNumber" : 8,
    "endLineNumber" : 200,
    "endColumnNumber" : 19
  }, {
    "charLength" : 11,
    "startLineNumber" : 201,
    "startColumnNumber" : 49,
    "endLineNumber" : 201,
    "endColumnNumber" : 60
  }, {
    "charLength" : 11,
    "startLineNumber" : 204,
    "startColumnNumber" : 25,
    "endLineNumber" : 204,
    "endColumnNumber" : 36
  }, {
    "charLength" : 11,
    "startLineNumber" : 227,
    "startColumnNumber" : 18,
    "endLineNumber" : 227,
    "endColumnNumber" : 29
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 3
  } ]
}