{
  "id" : 574,
  "expression" : "code",
  "projectName" : "skylot@jadx",
  "commitID" : "eb2a1734d3e02c19814f628e10bf80de5fb19772",
  "filePath" : "jadx-core/src/main/java/jadx/core/codegen/InsnGen.java",
  "occurrences" : 100,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 237,
      "startColumnNumber" : 4,
      "endLineNumber" : 237,
      "endColumnNumber" : 8
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 237,
        "startColumnNumber" : 4,
        "endLineNumber" : 237,
        "endColumnNumber" : 67
      },
      "nodeContext" : "code.add(mth.dex().root().getStringUtils().unescapeString(str))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 237,
        "startColumnNumber" : 4,
        "endLineNumber" : 237,
        "endColumnNumber" : 68
      },
      "nodeContext" : "code.add(mth.dex().root().getStringUtils().unescapeString(str));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 237,
        "startColumnNumber" : 4,
        "endLineNumber" : 237,
        "endColumnNumber" : 68
      },
      "nodeContext" : "code.add(mth.dex().root().getStringUtils().unescapeString(str));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 242,
      "startColumnNumber" : 12,
      "endLineNumber" : 242,
      "endColumnNumber" : 16
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 242,
        "startColumnNumber" : 4,
        "endLineNumber" : 242,
        "endColumnNumber" : 26
      },
      "nodeContext" : "useType(code,clsType)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 242,
        "startColumnNumber" : 4,
        "endLineNumber" : 242,
        "endColumnNumber" : 27
      },
      "nodeContext" : "useType(code,clsType);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 242,
        "startColumnNumber" : 4,
        "endLineNumber" : 242,
        "endColumnNumber" : 27
      },
      "nodeContext" : "useType(code,clsType);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 243,
      "startColumnNumber" : 4,
      "endLineNumber" : 243,
      "endColumnNumber" : 8
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 243,
        "startColumnNumber" : 4,
        "endLineNumber" : 243,
        "endColumnNumber" : 22
      },
      "nodeContext" : "code.add(\".class\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 243,
        "startColumnNumber" : 4,
        "endLineNumber" : 243,
        "endColumnNumber" : 23
      },
      "nodeContext" : "code.add(\".class\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 243,
        "startColumnNumber" : 4,
        "endLineNumber" : 243,
        "endColumnNumber" : 23
      },
      "nodeContext" : "code.add(\".class\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 248,
      "startColumnNumber" : 4,
      "endLineNumber" : 248,
      "endColumnNumber" : 8
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 248,
        "startColumnNumber" : 4,
        "endLineNumber" : 248,
        "endColumnNumber" : 22
      },
      "nodeContext" : "code.add(lit(arg))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 248,
        "startColumnNumber" : 4,
        "endLineNumber" : 248,
        "endColumnNumber" : 23
      },
      "nodeContext" : "code.add(lit(arg));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 248,
        "startColumnNumber" : 4,
        "endLineNumber" : 248,
        "endColumnNumber" : 23
      },
      "nodeContext" : "code.add(lit(arg));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 252,
      "startColumnNumber" : 11,
      "endLineNumber" : 252,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 252,
        "startColumnNumber" : 4,
        "endLineNumber" : 252,
        "endColumnNumber" : 39
      },
      "nodeContext" : "addArg(code,insn.getArg(0),false)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 252,
        "startColumnNumber" : 4,
        "endLineNumber" : 252,
        "endColumnNumber" : 40
      },
      "nodeContext" : "addArg(code,insn.getArg(0),false);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 252,
        "startColumnNumber" : 4,
        "endLineNumber" : 252,
        "endColumnNumber" : 40
      },
      "nodeContext" : "addArg(code,insn.getArg(0),false);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 259,
      "startColumnNumber" : 5,
      "endLineNumber" : 259,
      "endColumnNumber" : 9
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 259,
        "startColumnNumber" : 5,
        "endLineNumber" : 259,
        "endColumnNumber" : 18
      },
      "nodeContext" : "code.add('(')",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 259,
        "startColumnNumber" : 5,
        "endLineNumber" : 259,
        "endColumnNumber" : 19
      },
      "nodeContext" : "code.add('(');\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 258,
        "startColumnNumber" : 14,
        "endLineNumber" : 260,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  code.add('(');\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 258,
        "startColumnNumber" : 4,
        "endLineNumber" : 260,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (wrap) {\n  code.add('(');\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 296,
        "startLineNumber" : 256,
        "startColumnNumber" : 14,
        "endLineNumber" : 269,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  boolean wrap=state.contains(Flags.BODY_ONLY);\n  if (wrap) {\n    code.add('(');\n  }\n  code.add('(');\n  useType(code,(ArgType)((IndexInsnNode)insn).getIndex());\n  code.add(\") \");\n  addArg(code,insn.getArg(0),true);\n  if (wrap) {\n    code.add(')');\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 61,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 259,
        "startColumnNumber" : 5,
        "endLineNumber" : 259,
        "endColumnNumber" : 19
      },
      "nodeContext" : "code.add('(');\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 261,
      "startColumnNumber" : 4,
      "endLineNumber" : 261,
      "endColumnNumber" : 8
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 261,
        "startColumnNumber" : 4,
        "endLineNumber" : 261,
        "endColumnNumber" : 17
      },
      "nodeContext" : "code.add('(')",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 261,
        "startColumnNumber" : 4,
        "endLineNumber" : 261,
        "endColumnNumber" : 18
      },
      "nodeContext" : "code.add('(');\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 296,
        "startLineNumber" : 256,
        "startColumnNumber" : 14,
        "endLineNumber" : 269,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  boolean wrap=state.contains(Flags.BODY_ONLY);\n  if (wrap) {\n    code.add('(');\n  }\n  code.add('(');\n  useType(code,(ArgType)((IndexInsnNode)insn).getIndex());\n  code.add(\") \");\n  addArg(code,insn.getArg(0),true);\n  if (wrap) {\n    code.add(')');\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 61,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 261,
        "startColumnNumber" : 4,
        "endLineNumber" : 261,
        "endColumnNumber" : 18
      },
      "nodeContext" : "code.add('(');\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 262,
      "startColumnNumber" : 12,
      "endLineNumber" : 262,
      "endColumnNumber" : 16
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 262,
        "startColumnNumber" : 4,
        "endLineNumber" : 262,
        "endColumnNumber" : 62
      },
      "nodeContext" : "useType(code,(ArgType)((IndexInsnNode)insn).getIndex())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 262,
        "startColumnNumber" : 4,
        "endLineNumber" : 262,
        "endColumnNumber" : 63
      },
      "nodeContext" : "useType(code,(ArgType)((IndexInsnNode)insn).getIndex());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 296,
        "startLineNumber" : 256,
        "startColumnNumber" : 14,
        "endLineNumber" : 269,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  boolean wrap=state.contains(Flags.BODY_ONLY);\n  if (wrap) {\n    code.add('(');\n  }\n  code.add('(');\n  useType(code,(ArgType)((IndexInsnNode)insn).getIndex());\n  code.add(\") \");\n  addArg(code,insn.getArg(0),true);\n  if (wrap) {\n    code.add(')');\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 61,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 262,
        "startColumnNumber" : 4,
        "endLineNumber" : 262,
        "endColumnNumber" : 63
      },
      "nodeContext" : "useType(code,(ArgType)((IndexInsnNode)insn).getIndex());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 8
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 263,
      "startColumnNumber" : 4,
      "endLineNumber" : 263,
      "endColumnNumber" : 8
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 263,
        "startColumnNumber" : 4,
        "endLineNumber" : 263,
        "endColumnNumber" : 18
      },
      "nodeContext" : "code.add(\") \")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 263,
        "startColumnNumber" : 4,
        "endLineNumber" : 263,
        "endColumnNumber" : 19
      },
      "nodeContext" : "code.add(\") \");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 296,
        "startLineNumber" : 256,
        "startColumnNumber" : 14,
        "endLineNumber" : 269,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  boolean wrap=state.contains(Flags.BODY_ONLY);\n  if (wrap) {\n    code.add('(');\n  }\n  code.add('(');\n  useType(code,(ArgType)((IndexInsnNode)insn).getIndex());\n  code.add(\") \");\n  addArg(code,insn.getArg(0),true);\n  if (wrap) {\n    code.add(')');\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 61,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 263,
        "startColumnNumber" : 4,
        "endLineNumber" : 263,
        "endColumnNumber" : 19
      },
      "nodeContext" : "code.add(\") \");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 264,
      "startColumnNumber" : 11,
      "endLineNumber" : 264,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 264,
        "startColumnNumber" : 4,
        "endLineNumber" : 264,
        "endColumnNumber" : 38
      },
      "nodeContext" : "addArg(code,insn.getArg(0),true)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 264,
        "startColumnNumber" : 4,
        "endLineNumber" : 264,
        "endColumnNumber" : 39
      },
      "nodeContext" : "addArg(code,insn.getArg(0),true);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 296,
        "startLineNumber" : 256,
        "startColumnNumber" : 14,
        "endLineNumber" : 269,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  boolean wrap=state.contains(Flags.BODY_ONLY);\n  if (wrap) {\n    code.add('(');\n  }\n  code.add('(');\n  useType(code,(ArgType)((IndexInsnNode)insn).getIndex());\n  code.add(\") \");\n  addArg(code,insn.getArg(0),true);\n  if (wrap) {\n    code.add(')');\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 61,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 264,
        "startColumnNumber" : 4,
        "endLineNumber" : 264,
        "endColumnNumber" : 39
      },
      "nodeContext" : "addArg(code,insn.getArg(0),true);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 266,
      "startColumnNumber" : 5,
      "endLineNumber" : 266,
      "endColumnNumber" : 9
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 266,
        "startColumnNumber" : 5,
        "endLineNumber" : 266,
        "endColumnNumber" : 18
      },
      "nodeContext" : "code.add(')')",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 266,
        "startColumnNumber" : 5,
        "endLineNumber" : 266,
        "endColumnNumber" : 19
      },
      "nodeContext" : "code.add(')');\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 265,
        "startColumnNumber" : 14,
        "endLineNumber" : 267,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  code.add(')');\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 265,
        "startColumnNumber" : 4,
        "endLineNumber" : 267,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (wrap) {\n  code.add(')');\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 296,
        "startLineNumber" : 256,
        "startColumnNumber" : 14,
        "endLineNumber" : 269,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  boolean wrap=state.contains(Flags.BODY_ONLY);\n  if (wrap) {\n    code.add('(');\n  }\n  code.add('(');\n  useType(code,(ArgType)((IndexInsnNode)insn).getIndex());\n  code.add(\") \");\n  addArg(code,insn.getArg(0),true);\n  if (wrap) {\n    code.add(')');\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 61,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 266,
        "startColumnNumber" : 5,
        "endLineNumber" : 266,
        "endColumnNumber" : 19
      },
      "nodeContext" : "code.add(')');\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 272,
      "startColumnNumber" : 32,
      "endLineNumber" : 272,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 272,
        "startColumnNumber" : 4,
        "endLineNumber" : 272,
        "endColumnNumber" : 44
      },
      "nodeContext" : "makeArith((ArithNode)insn,code,state)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 272,
        "startColumnNumber" : 4,
        "endLineNumber" : 272,
        "endColumnNumber" : 45
      },
      "nodeContext" : "makeArith((ArithNode)insn,code,state);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 272,
        "startColumnNumber" : 4,
        "endLineNumber" : 272,
        "endColumnNumber" : 45
      },
      "nodeContext" : "makeArith((ArithNode)insn,code,state);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 276,
      "startColumnNumber" : 15,
      "endLineNumber" : 276,
      "endColumnNumber" : 19
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 276,
        "startColumnNumber" : 4,
        "endLineNumber" : 276,
        "endColumnNumber" : 38
      },
      "nodeContext" : "oneArgInsn(code,insn,state,'-')",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 276,
        "startColumnNumber" : 4,
        "endLineNumber" : 276,
        "endColumnNumber" : 39
      },
      "nodeContext" : "oneArgInsn(code,insn,state,'-');\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 276,
        "startColumnNumber" : 4,
        "endLineNumber" : 276,
        "endColumnNumber" : 39
      },
      "nodeContext" : "oneArgInsn(code,insn,state,'-');\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 281,
      "startColumnNumber" : 15,
      "endLineNumber" : 281,
      "endColumnNumber" : 19
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 281,
        "startColumnNumber" : 4,
        "endLineNumber" : 281,
        "endColumnNumber" : 37
      },
      "nodeContext" : "oneArgInsn(code,insn,state,op)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 281,
        "startColumnNumber" : 4,
        "endLineNumber" : 281,
        "endColumnNumber" : 38
      },
      "nodeContext" : "oneArgInsn(code,insn,state,op);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 281,
        "startColumnNumber" : 4,
        "endLineNumber" : 281,
        "endColumnNumber" : 38
      },
      "nodeContext" : "oneArgInsn(code,insn,state,op);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 286,
      "startColumnNumber" : 5,
      "endLineNumber" : 286,
      "endColumnNumber" : 9
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 286,
        "startColumnNumber" : 5,
        "endLineNumber" : 286,
        "endColumnNumber" : 24
      },
      "nodeContext" : "code.add(\"return \")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 286,
        "startColumnNumber" : 5,
        "endLineNumber" : 286,
        "endColumnNumber" : 25
      },
      "nodeContext" : "code.add(\"return \");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 285,
        "startColumnNumber" : 34,
        "endLineNumber" : 288,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  code.add(\"return \");\n  addArg(code,insn.getArg(0),false);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 143,
        "startLineNumber" : 285,
        "startColumnNumber" : 4,
        "endLineNumber" : 290,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (insn.getArgsCount() != 0) {\n  code.add(\"return \");\n  addArg(code,insn.getArg(0),false);\n}\n else {\n  code.add(\"return\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 27,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 286,
        "startColumnNumber" : 5,
        "endLineNumber" : 286,
        "endColumnNumber" : 25
      },
      "nodeContext" : "code.add(\"return \");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 287,
      "startColumnNumber" : 12,
      "endLineNumber" : 287,
      "endColumnNumber" : 16
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 287,
        "startColumnNumber" : 5,
        "endLineNumber" : 287,
        "endColumnNumber" : 40
      },
      "nodeContext" : "addArg(code,insn.getArg(0),false)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 287,
        "startColumnNumber" : 5,
        "endLineNumber" : 287,
        "endColumnNumber" : 41
      },
      "nodeContext" : "addArg(code,insn.getArg(0),false);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 285,
        "startColumnNumber" : 34,
        "endLineNumber" : 288,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  code.add(\"return \");\n  addArg(code,insn.getArg(0),false);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 143,
        "startLineNumber" : 285,
        "startColumnNumber" : 4,
        "endLineNumber" : 290,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (insn.getArgsCount() != 0) {\n  code.add(\"return \");\n  addArg(code,insn.getArg(0),false);\n}\n else {\n  code.add(\"return\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 27,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 287,
        "startColumnNumber" : 5,
        "endLineNumber" : 287,
        "endColumnNumber" : 41
      },
      "nodeContext" : "addArg(code,insn.getArg(0),false);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 289,
      "startColumnNumber" : 5,
      "endLineNumber" : 289,
      "endColumnNumber" : 9
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 289,
        "startColumnNumber" : 5,
        "endLineNumber" : 289,
        "endColumnNumber" : 23
      },
      "nodeContext" : "code.add(\"return\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 289,
        "startColumnNumber" : 5,
        "endLineNumber" : 289,
        "endColumnNumber" : 24
      },
      "nodeContext" : "code.add(\"return\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 288,
        "startColumnNumber" : 11,
        "endLineNumber" : 290,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  code.add(\"return\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 143,
        "startLineNumber" : 285,
        "startColumnNumber" : 4,
        "endLineNumber" : 290,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (insn.getArgsCount() != 0) {\n  code.add(\"return \");\n  addArg(code,insn.getArg(0),false);\n}\n else {\n  code.add(\"return\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 27,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 289,
        "startColumnNumber" : 5,
        "endLineNumber" : 289,
        "endColumnNumber" : 24
      },
      "nodeContext" : "code.add(\"return\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 294,
      "startColumnNumber" : 4,
      "endLineNumber" : 294,
      "endColumnNumber" : 8
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 294,
        "startColumnNumber" : 4,
        "endLineNumber" : 294,
        "endColumnNumber" : 21
      },
      "nodeContext" : "code.add(\"break\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 294,
        "startColumnNumber" : 4,
        "endLineNumber" : 294,
        "endColumnNumber" : 22
      },
      "nodeContext" : "code.add(\"break\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 294,
        "startColumnNumber" : 4,
        "endLineNumber" : 294,
        "endColumnNumber" : 22
      },
      "nodeContext" : "code.add(\"break\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 297,
      "startColumnNumber" : 5,
      "endLineNumber" : 297,
      "endColumnNumber" : 9
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 297,
        "startColumnNumber" : 5,
        "endLineNumber" : 297,
        "endColumnNumber" : 18
      },
      "nodeContext" : "code.add(' ')",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 297,
        "startColumnNumber" : 5,
        "endLineNumber" : 297,
        "endColumnNumber" : 65
      },
      "nodeContext" : "code.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 297,
        "startColumnNumber" : 5,
        "endLineNumber" : 297,
        "endColumnNumber" : 66
      },
      "nodeContext" : "code.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 296,
        "startColumnNumber" : 27,
        "endLineNumber" : 298,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  code.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 97,
        "startLineNumber" : 296,
        "startColumnNumber" : 4,
        "endLineNumber" : 298,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (labelAttr != null) {\n  code.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 18,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 297,
        "startColumnNumber" : 5,
        "endLineNumber" : 297,
        "endColumnNumber" : 66
      },
      "nodeContext" : "code.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 302,
      "startColumnNumber" : 4,
      "endLineNumber" : 302,
      "endColumnNumber" : 8
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 302,
        "startColumnNumber" : 4,
        "endLineNumber" : 302,
        "endColumnNumber" : 24
      },
      "nodeContext" : "code.add(\"continue\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 302,
        "startColumnNumber" : 4,
        "endLineNumber" : 302,
        "endColumnNumber" : 25
      },
      "nodeContext" : "code.add(\"continue\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 302,
        "startColumnNumber" : 4,
        "endLineNumber" : 302,
        "endColumnNumber" : 25
      },
      "nodeContext" : "code.add(\"continue\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 306,
      "startColumnNumber" : 4,
      "endLineNumber" : 306,
      "endColumnNumber" : 8
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 306,
        "startColumnNumber" : 4,
        "endLineNumber" : 306,
        "endColumnNumber" : 22
      },
      "nodeContext" : "code.add(\"throw \")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 306,
        "startColumnNumber" : 4,
        "endLineNumber" : 306,
        "endColumnNumber" : 23
      },
      "nodeContext" : "code.add(\"throw \");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 306,
        "startColumnNumber" : 4,
        "endLineNumber" : 306,
        "endColumnNumber" : 23
      },
      "nodeContext" : "code.add(\"throw \");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 307,
      "startColumnNumber" : 11,
      "endLineNumber" : 307,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 307,
        "startColumnNumber" : 4,
        "endLineNumber" : 307,
        "endColumnNumber" : 38
      },
      "nodeContext" : "addArg(code,insn.getArg(0),true)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 307,
        "startColumnNumber" : 4,
        "endLineNumber" : 307,
        "endColumnNumber" : 39
      },
      "nodeContext" : "addArg(code,insn.getArg(0),true);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 307,
        "startColumnNumber" : 4,
        "endLineNumber" : 307,
        "endColumnNumber" : 39
      },
      "nodeContext" : "addArg(code,insn.getArg(0),true);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 312,
      "startColumnNumber" : 4,
      "endLineNumber" : 312,
      "endColumnNumber" : 8
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 312,
        "startColumnNumber" : 4,
        "endLineNumber" : 312,
        "endColumnNumber" : 17
      },
      "nodeContext" : "code.add('(')",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 312,
        "startColumnNumber" : 4,
        "endLineNumber" : 312,
        "endColumnNumber" : 18
      },
      "nodeContext" : "code.add('(');\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 312,
        "startColumnNumber" : 4,
        "endLineNumber" : 312,
        "endColumnNumber" : 18
      },
      "nodeContext" : "code.add('(');\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 313,
      "startColumnNumber" : 11,
      "endLineNumber" : 313,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 313,
        "startColumnNumber" : 4,
        "endLineNumber" : 313,
        "endColumnNumber" : 32
      },
      "nodeContext" : "addArg(code,insn.getArg(0))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 313,
        "startColumnNumber" : 4,
        "endLineNumber" : 313,
        "endColumnNumber" : 33
      },
      "nodeContext" : "addArg(code,insn.getArg(0));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 313,
        "startColumnNumber" : 4,
        "endLineNumber" : 313,
        "endColumnNumber" : 33
      },
      "nodeContext" : "addArg(code,insn.getArg(0));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 314,
      "startColumnNumber" : 4,
      "endLineNumber" : 314,
      "endColumnNumber" : 8
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 314,
        "startColumnNumber" : 4,
        "endLineNumber" : 314,
        "endColumnNumber" : 19
      },
      "nodeContext" : "code.add(\" > \")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 314,
        "startColumnNumber" : 4,
        "endLineNumber" : 314,
        "endColumnNumber" : 20
      },
      "nodeContext" : "code.add(\" > \");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 314,
        "startColumnNumber" : 4,
        "endLineNumber" : 314,
        "endColumnNumber" : 20
      },
      "nodeContext" : "code.add(\" > \");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 315,
      "startColumnNumber" : 11,
      "endLineNumber" : 315,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 315,
        "startColumnNumber" : 4,
        "endLineNumber" : 315,
        "endColumnNumber" : 32
      },
      "nodeContext" : "addArg(code,insn.getArg(1))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 315,
        "startColumnNumber" : 4,
        "endLineNumber" : 315,
        "endColumnNumber" : 33
      },
      "nodeContext" : "addArg(code,insn.getArg(1));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 315,
        "startColumnNumber" : 4,
        "endLineNumber" : 315,
        "endColumnNumber" : 33
      },
      "nodeContext" : "addArg(code,insn.getArg(1));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 316,
      "startColumnNumber" : 4,
      "endLineNumber" : 316,
      "endColumnNumber" : 8
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 316,
        "startColumnNumber" : 4,
        "endLineNumber" : 316,
        "endColumnNumber" : 24
      },
      "nodeContext" : "code.add(\" ? 1 : (\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 316,
        "startColumnNumber" : 4,
        "endLineNumber" : 316,
        "endColumnNumber" : 25
      },
      "nodeContext" : "code.add(\" ? 1 : (\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 316,
        "startColumnNumber" : 4,
        "endLineNumber" : 316,
        "endColumnNumber" : 25
      },
      "nodeContext" : "code.add(\" ? 1 : (\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 317,
      "startColumnNumber" : 11,
      "endLineNumber" : 317,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 317,
        "startColumnNumber" : 4,
        "endLineNumber" : 317,
        "endColumnNumber" : 32
      },
      "nodeContext" : "addArg(code,insn.getArg(0))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 317,
        "startColumnNumber" : 4,
        "endLineNumber" : 317,
        "endColumnNumber" : 33
      },
      "nodeContext" : "addArg(code,insn.getArg(0));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 317,
        "startColumnNumber" : 4,
        "endLineNumber" : 317,
        "endColumnNumber" : 33
      },
      "nodeContext" : "addArg(code,insn.getArg(0));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 318,
      "startColumnNumber" : 4,
      "endLineNumber" : 318,
      "endColumnNumber" : 8
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 318,
        "startColumnNumber" : 4,
        "endLineNumber" : 318,
        "endColumnNumber" : 20
      },
      "nodeContext" : "code.add(\" == \")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 318,
        "startColumnNumber" : 4,
        "endLineNumber" : 318,
        "endColumnNumber" : 21
      },
      "nodeContext" : "code.add(\" == \");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 318,
        "startColumnNumber" : 4,
        "endLineNumber" : 318,
        "endColumnNumber" : 21
      },
      "nodeContext" : "code.add(\" == \");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 319,
      "startColumnNumber" : 11,
      "endLineNumber" : 319,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 319,
        "startColumnNumber" : 4,
        "endLineNumber" : 319,
        "endColumnNumber" : 32
      },
      "nodeContext" : "addArg(code,insn.getArg(1))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 319,
        "startColumnNumber" : 4,
        "endLineNumber" : 319,
        "endColumnNumber" : 33
      },
      "nodeContext" : "addArg(code,insn.getArg(1));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 319,
        "startColumnNumber" : 4,
        "endLineNumber" : 319,
        "endColumnNumber" : 33
      },
      "nodeContext" : "addArg(code,insn.getArg(1));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 320,
      "startColumnNumber" : 4,
      "endLineNumber" : 320,
      "endColumnNumber" : 8
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 320,
        "startColumnNumber" : 4,
        "endLineNumber" : 320,
        "endColumnNumber" : 27
      },
      "nodeContext" : "code.add(\" ? 0 : -1))\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 320,
        "startColumnNumber" : 4,
        "endLineNumber" : 320,
        "endColumnNumber" : 28
      },
      "nodeContext" : "code.add(\" ? 0 : -1))\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 320,
        "startColumnNumber" : 4,
        "endLineNumber" : 320,
        "endColumnNumber" : 28
      },
      "nodeContext" : "code.add(\" ? 0 : -1))\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 326,
      "startColumnNumber" : 5,
      "endLineNumber" : 326,
      "endColumnNumber" : 9
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 326,
        "startColumnNumber" : 5,
        "endLineNumber" : 326,
        "endColumnNumber" : 18
      },
      "nodeContext" : "code.add('(')",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 326,
        "startColumnNumber" : 5,
        "endLineNumber" : 326,
        "endColumnNumber" : 19
      },
      "nodeContext" : "code.add('(');\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 325,
        "startColumnNumber" : 14,
        "endLineNumber" : 327,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  code.add('(');\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 325,
        "startColumnNumber" : 4,
        "endLineNumber" : 327,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (wrap) {\n  code.add('(');\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 281,
        "startLineNumber" : 323,
        "startColumnNumber" : 21,
        "endLineNumber" : 335,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  boolean wrap=state.contains(Flags.BODY_ONLY);\n  if (wrap) {\n    code.add('(');\n  }\n  addArg(code,insn.getArg(0));\n  code.add(\" instanceof \");\n  useType(code,(ArgType)((IndexInsnNode)insn).getIndex());\n  if (wrap) {\n    code.add(')');\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 55,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 326,
        "startColumnNumber" : 5,
        "endLineNumber" : 326,
        "endColumnNumber" : 19
      },
      "nodeContext" : "code.add('(');\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 328,
      "startColumnNumber" : 11,
      "endLineNumber" : 328,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 328,
        "startColumnNumber" : 4,
        "endLineNumber" : 328,
        "endColumnNumber" : 32
      },
      "nodeContext" : "addArg(code,insn.getArg(0))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 328,
        "startColumnNumber" : 4,
        "endLineNumber" : 328,
        "endColumnNumber" : 33
      },
      "nodeContext" : "addArg(code,insn.getArg(0));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 281,
        "startLineNumber" : 323,
        "startColumnNumber" : 21,
        "endLineNumber" : 335,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  boolean wrap=state.contains(Flags.BODY_ONLY);\n  if (wrap) {\n    code.add('(');\n  }\n  addArg(code,insn.getArg(0));\n  code.add(\" instanceof \");\n  useType(code,(ArgType)((IndexInsnNode)insn).getIndex());\n  if (wrap) {\n    code.add(')');\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 55,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 328,
        "startColumnNumber" : 4,
        "endLineNumber" : 328,
        "endColumnNumber" : 33
      },
      "nodeContext" : "addArg(code,insn.getArg(0));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 329,
      "startColumnNumber" : 4,
      "endLineNumber" : 329,
      "endColumnNumber" : 8
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 329,
        "startColumnNumber" : 4,
        "endLineNumber" : 329,
        "endColumnNumber" : 28
      },
      "nodeContext" : "code.add(\" instanceof \")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 329,
        "startColumnNumber" : 4,
        "endLineNumber" : 329,
        "endColumnNumber" : 29
      },
      "nodeContext" : "code.add(\" instanceof \");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 281,
        "startLineNumber" : 323,
        "startColumnNumber" : 21,
        "endLineNumber" : 335,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  boolean wrap=state.contains(Flags.BODY_ONLY);\n  if (wrap) {\n    code.add('(');\n  }\n  addArg(code,insn.getArg(0));\n  code.add(\" instanceof \");\n  useType(code,(ArgType)((IndexInsnNode)insn).getIndex());\n  if (wrap) {\n    code.add(')');\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 55,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 329,
        "startColumnNumber" : 4,
        "endLineNumber" : 329,
        "endColumnNumber" : 29
      },
      "nodeContext" : "code.add(\" instanceof \");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 330,
      "startColumnNumber" : 12,
      "endLineNumber" : 330,
      "endColumnNumber" : 16
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 330,
        "startColumnNumber" : 4,
        "endLineNumber" : 330,
        "endColumnNumber" : 62
      },
      "nodeContext" : "useType(code,(ArgType)((IndexInsnNode)insn).getIndex())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 330,
        "startColumnNumber" : 4,
        "endLineNumber" : 330,
        "endColumnNumber" : 63
      },
      "nodeContext" : "useType(code,(ArgType)((IndexInsnNode)insn).getIndex());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 281,
        "startLineNumber" : 323,
        "startColumnNumber" : 21,
        "endLineNumber" : 335,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  boolean wrap=state.contains(Flags.BODY_ONLY);\n  if (wrap) {\n    code.add('(');\n  }\n  addArg(code,insn.getArg(0));\n  code.add(\" instanceof \");\n  useType(code,(ArgType)((IndexInsnNode)insn).getIndex());\n  if (wrap) {\n    code.add(')');\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 55,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 330,
        "startColumnNumber" : 4,
        "endLineNumber" : 330,
        "endColumnNumber" : 63
      },
      "nodeContext" : "useType(code,(ArgType)((IndexInsnNode)insn).getIndex());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 8
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 332,
      "startColumnNumber" : 5,
      "endLineNumber" : 332,
      "endColumnNumber" : 9
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 332,
        "startColumnNumber" : 5,
        "endLineNumber" : 332,
        "endColumnNumber" : 18
      },
      "nodeContext" : "code.add(')')",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 332,
        "startColumnNumber" : 5,
        "endLineNumber" : 332,
        "endColumnNumber" : 19
      },
      "nodeContext" : "code.add(')');\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 331,
        "startColumnNumber" : 14,
        "endLineNumber" : 333,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  code.add(')');\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 331,
        "startColumnNumber" : 4,
        "endLineNumber" : 333,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (wrap) {\n  code.add(')');\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 281,
        "startLineNumber" : 323,
        "startColumnNumber" : 21,
        "endLineNumber" : 335,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  boolean wrap=state.contains(Flags.BODY_ONLY);\n  if (wrap) {\n    code.add('(');\n  }\n  addArg(code,insn.getArg(0));\n  code.add(\" instanceof \");\n  useType(code,(ArgType)((IndexInsnNode)insn).getIndex());\n  if (wrap) {\n    code.add(')');\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 55,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 332,
        "startColumnNumber" : 5,
        "endLineNumber" : 332,
        "endColumnNumber" : 19
      },
      "nodeContext" : "code.add(')');\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 337,
      "startColumnNumber" : 44,
      "endLineNumber" : 337,
      "endColumnNumber" : 48
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 337,
        "startColumnNumber" : 4,
        "endLineNumber" : 337,
        "endColumnNumber" : 49
      },
      "nodeContext" : "makeConstructor((ConstructorInsn)insn,code)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 337,
        "startColumnNumber" : 4,
        "endLineNumber" : 337,
        "endColumnNumber" : 50
      },
      "nodeContext" : "makeConstructor((ConstructorInsn)insn,code);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 337,
        "startColumnNumber" : 4,
        "endLineNumber" : 337,
        "endColumnNumber" : 50
      },
      "nodeContext" : "makeConstructor((ConstructorInsn)insn,code);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 341,
      "startColumnNumber" : 34,
      "endLineNumber" : 341,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 341,
        "startColumnNumber" : 4,
        "endLineNumber" : 341,
        "endColumnNumber" : 39
      },
      "nodeContext" : "makeInvoke((InvokeNode)insn,code)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 341,
        "startColumnNumber" : 4,
        "endLineNumber" : 341,
        "endColumnNumber" : 40
      },
      "nodeContext" : "makeInvoke((InvokeNode)insn,code);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 341,
        "startColumnNumber" : 4,
        "endLineNumber" : 341,
        "endColumnNumber" : 40
      },
      "nodeContext" : "makeInvoke((InvokeNode)insn,code);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 346,
      "startColumnNumber" : 4,
      "endLineNumber" : 346,
      "endColumnNumber" : 8
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 346,
        "startColumnNumber" : 4,
        "endLineNumber" : 346,
        "endColumnNumber" : 20
      },
      "nodeContext" : "code.add(\"new \")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 346,
        "startColumnNumber" : 4,
        "endLineNumber" : 346,
        "endColumnNumber" : 21
      },
      "nodeContext" : "code.add(\"new \");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 337,
        "startLineNumber" : 344,
        "startColumnNumber" : 19,
        "endLineNumber" : 356,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  ArgType arrayType=((NewArrayNode)insn).getArrayType();\n  code.add(\"new \");\n  useType(code,arrayType.getArrayRootElement());\n  code.add('[');\n  addArg(code,insn.getArg(0));\n  code.add(']');\n  int dim=arrayType.getArrayDimension();\n  for (int i=0; i < dim - 1; i++) {\n    code.add(\"[]\");\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 70,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 346,
        "startColumnNumber" : 4,
        "endLineNumber" : 346,
        "endColumnNumber" : 21
      },
      "nodeContext" : "code.add(\"new \");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 347,
      "startColumnNumber" : 12,
      "endLineNumber" : 347,
      "endColumnNumber" : 16
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 347,
        "startColumnNumber" : 4,
        "endLineNumber" : 347,
        "endColumnNumber" : 50
      },
      "nodeContext" : "useType(code,arrayType.getArrayRootElement())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 347,
        "startColumnNumber" : 4,
        "endLineNumber" : 347,
        "endColumnNumber" : 51
      },
      "nodeContext" : "useType(code,arrayType.getArrayRootElement());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 337,
        "startLineNumber" : 344,
        "startColumnNumber" : 19,
        "endLineNumber" : 356,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  ArgType arrayType=((NewArrayNode)insn).getArrayType();\n  code.add(\"new \");\n  useType(code,arrayType.getArrayRootElement());\n  code.add('[');\n  addArg(code,insn.getArg(0));\n  code.add(']');\n  int dim=arrayType.getArrayDimension();\n  for (int i=0; i < dim - 1; i++) {\n    code.add(\"[]\");\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 70,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 347,
        "startColumnNumber" : 4,
        "endLineNumber" : 347,
        "endColumnNumber" : 51
      },
      "nodeContext" : "useType(code,arrayType.getArrayRootElement());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 348,
      "startColumnNumber" : 4,
      "endLineNumber" : 348,
      "endColumnNumber" : 8
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 348,
        "startColumnNumber" : 4,
        "endLineNumber" : 348,
        "endColumnNumber" : 17
      },
      "nodeContext" : "code.add('[')",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 348,
        "startColumnNumber" : 4,
        "endLineNumber" : 348,
        "endColumnNumber" : 18
      },
      "nodeContext" : "code.add('[');\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 337,
        "startLineNumber" : 344,
        "startColumnNumber" : 19,
        "endLineNumber" : 356,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  ArgType arrayType=((NewArrayNode)insn).getArrayType();\n  code.add(\"new \");\n  useType(code,arrayType.getArrayRootElement());\n  code.add('[');\n  addArg(code,insn.getArg(0));\n  code.add(']');\n  int dim=arrayType.getArrayDimension();\n  for (int i=0; i < dim - 1; i++) {\n    code.add(\"[]\");\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 70,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 348,
        "startColumnNumber" : 4,
        "endLineNumber" : 348,
        "endColumnNumber" : 18
      },
      "nodeContext" : "code.add('[');\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 349,
      "startColumnNumber" : 11,
      "endLineNumber" : 349,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 349,
        "startColumnNumber" : 4,
        "endLineNumber" : 349,
        "endColumnNumber" : 32
      },
      "nodeContext" : "addArg(code,insn.getArg(0))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 349,
        "startColumnNumber" : 4,
        "endLineNumber" : 349,
        "endColumnNumber" : 33
      },
      "nodeContext" : "addArg(code,insn.getArg(0));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 337,
        "startLineNumber" : 344,
        "startColumnNumber" : 19,
        "endLineNumber" : 356,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  ArgType arrayType=((NewArrayNode)insn).getArrayType();\n  code.add(\"new \");\n  useType(code,arrayType.getArrayRootElement());\n  code.add('[');\n  addArg(code,insn.getArg(0));\n  code.add(']');\n  int dim=arrayType.getArrayDimension();\n  for (int i=0; i < dim - 1; i++) {\n    code.add(\"[]\");\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 70,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 349,
        "startColumnNumber" : 4,
        "endLineNumber" : 349,
        "endColumnNumber" : 33
      },
      "nodeContext" : "addArg(code,insn.getArg(0));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 350,
      "startColumnNumber" : 4,
      "endLineNumber" : 350,
      "endColumnNumber" : 8
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 350,
        "startColumnNumber" : 4,
        "endLineNumber" : 350,
        "endColumnNumber" : 17
      },
      "nodeContext" : "code.add(']')",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 350,
        "startColumnNumber" : 4,
        "endLineNumber" : 350,
        "endColumnNumber" : 18
      },
      "nodeContext" : "code.add(']');\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 337,
        "startLineNumber" : 344,
        "startColumnNumber" : 19,
        "endLineNumber" : 356,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  ArgType arrayType=((NewArrayNode)insn).getArrayType();\n  code.add(\"new \");\n  useType(code,arrayType.getArrayRootElement());\n  code.add('[');\n  addArg(code,insn.getArg(0));\n  code.add(']');\n  int dim=arrayType.getArrayDimension();\n  for (int i=0; i < dim - 1; i++) {\n    code.add(\"[]\");\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 70,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 350,
        "startColumnNumber" : 4,
        "endLineNumber" : 350,
        "endColumnNumber" : 18
      },
      "nodeContext" : "code.add(']');\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 353,
      "startColumnNumber" : 5,
      "endLineNumber" : 353,
      "endColumnNumber" : 9
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 353,
        "startColumnNumber" : 5,
        "endLineNumber" : 353,
        "endColumnNumber" : 19
      },
      "nodeContext" : "code.add(\"[]\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 353,
        "startColumnNumber" : 5,
        "endLineNumber" : 353,
        "endColumnNumber" : 20
      },
      "nodeContext" : "code.add(\"[]\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 352,
        "startColumnNumber" : 38,
        "endLineNumber" : 354,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  code.add(\"[]\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 352,
        "startColumnNumber" : 4,
        "endLineNumber" : 354,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < dim - 1; i++) {\n  code.add(\"[]\");\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 19,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 337,
        "startLineNumber" : 344,
        "startColumnNumber" : 19,
        "endLineNumber" : 356,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  ArgType arrayType=((NewArrayNode)insn).getArrayType();\n  code.add(\"new \");\n  useType(code,arrayType.getArrayRootElement());\n  code.add('[');\n  addArg(code,insn.getArg(0));\n  code.add(']');\n  int dim=arrayType.getArrayDimension();\n  for (int i=0; i < dim - 1; i++) {\n    code.add(\"[]\");\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 70,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 353,
        "startColumnNumber" : 5,
        "endLineNumber" : 353,
        "endColumnNumber" : 20
      },
      "nodeContext" : "code.add(\"[]\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 359,
      "startColumnNumber" : 11,
      "endLineNumber" : 359,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 359,
        "startColumnNumber" : 4,
        "endLineNumber" : 359,
        "endColumnNumber" : 32
      },
      "nodeContext" : "addArg(code,insn.getArg(0))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 359,
        "startColumnNumber" : 4,
        "endLineNumber" : 359,
        "endColumnNumber" : 33
      },
      "nodeContext" : "addArg(code,insn.getArg(0));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 359,
        "startColumnNumber" : 4,
        "endLineNumber" : 359,
        "endColumnNumber" : 33
      },
      "nodeContext" : "addArg(code,insn.getArg(0));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 360,
      "startColumnNumber" : 4,
      "endLineNumber" : 360,
      "endColumnNumber" : 8
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 360,
        "startColumnNumber" : 4,
        "endLineNumber" : 360,
        "endColumnNumber" : 23
      },
      "nodeContext" : "code.add(\".length\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 360,
        "startColumnNumber" : 4,
        "endLineNumber" : 360,
        "endColumnNumber" : 24
      },
      "nodeContext" : "code.add(\".length\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 360,
        "startColumnNumber" : 4,
        "endLineNumber" : 360,
        "endColumnNumber" : 24
      },
      "nodeContext" : "code.add(\".length\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 364,
      "startColumnNumber" : 46,
      "endLineNumber" : 364,
      "endColumnNumber" : 50
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 364,
        "startColumnNumber" : 4,
        "endLineNumber" : 364,
        "endColumnNumber" : 51
      },
      "nodeContext" : "filledNewArray((FilledNewArrayNode)insn,code)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 364,
        "startColumnNumber" : 4,
        "endLineNumber" : 364,
        "endColumnNumber" : 52
      },
      "nodeContext" : "filledNewArray((FilledNewArrayNode)insn,code);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 364,
        "startColumnNumber" : 4,
        "endLineNumber" : 364,
        "endColumnNumber" : 52
      },
      "nodeContext" : "filledNewArray((FilledNewArrayNode)insn,code);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 368,
      "startColumnNumber" : 11,
      "endLineNumber" : 368,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 368,
        "startColumnNumber" : 4,
        "endLineNumber" : 368,
        "endColumnNumber" : 32
      },
      "nodeContext" : "addArg(code,insn.getArg(0))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 368,
        "startColumnNumber" : 4,
        "endLineNumber" : 368,
        "endColumnNumber" : 33
      },
      "nodeContext" : "addArg(code,insn.getArg(0));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 368,
        "startColumnNumber" : 4,
        "endLineNumber" : 368,
        "endColumnNumber" : 33
      },
      "nodeContext" : "addArg(code,insn.getArg(0));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 369,
      "startColumnNumber" : 4,
      "endLineNumber" : 369,
      "endColumnNumber" : 8
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 369,
        "startColumnNumber" : 4,
        "endLineNumber" : 369,
        "endColumnNumber" : 17
      },
      "nodeContext" : "code.add('[')",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 369,
        "startColumnNumber" : 4,
        "endLineNumber" : 369,
        "endColumnNumber" : 18
      },
      "nodeContext" : "code.add('[');\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 369,
        "startColumnNumber" : 4,
        "endLineNumber" : 369,
        "endColumnNumber" : 18
      },
      "nodeContext" : "code.add('[');\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 370,
      "startColumnNumber" : 11,
      "endLineNumber" : 370,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 370,
        "startColumnNumber" : 4,
        "endLineNumber" : 370,
        "endColumnNumber" : 39
      },
      "nodeContext" : "addArg(code,insn.getArg(1),false)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 370,
        "startColumnNumber" : 4,
        "endLineNumber" : 370,
        "endColumnNumber" : 40
      },
      "nodeContext" : "addArg(code,insn.getArg(1),false);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 370,
        "startColumnNumber" : 4,
        "endLineNumber" : 370,
        "endColumnNumber" : 40
      },
      "nodeContext" : "addArg(code,insn.getArg(1),false);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 371,
      "startColumnNumber" : 4,
      "endLineNumber" : 371,
      "endColumnNumber" : 8
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 371,
        "startColumnNumber" : 4,
        "endLineNumber" : 371,
        "endColumnNumber" : 17
      },
      "nodeContext" : "code.add(']')",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 371,
        "startColumnNumber" : 4,
        "endLineNumber" : 371,
        "endColumnNumber" : 18
      },
      "nodeContext" : "code.add(']');\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 371,
        "startColumnNumber" : 4,
        "endLineNumber" : 371,
        "endColumnNumber" : 18
      },
      "nodeContext" : "code.add(']');\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 375,
      "startColumnNumber" : 11,
      "endLineNumber" : 375,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 375,
        "startColumnNumber" : 4,
        "endLineNumber" : 375,
        "endColumnNumber" : 32
      },
      "nodeContext" : "addArg(code,insn.getArg(0))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 375,
        "startColumnNumber" : 4,
        "endLineNumber" : 375,
        "endColumnNumber" : 33
      },
      "nodeContext" : "addArg(code,insn.getArg(0));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 375,
        "startColumnNumber" : 4,
        "endLineNumber" : 375,
        "endColumnNumber" : 33
      },
      "nodeContext" : "addArg(code,insn.getArg(0));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 376,
      "startColumnNumber" : 4,
      "endLineNumber" : 376,
      "endColumnNumber" : 8
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 376,
        "startColumnNumber" : 4,
        "endLineNumber" : 376,
        "endColumnNumber" : 17
      },
      "nodeContext" : "code.add('[')",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 376,
        "startColumnNumber" : 4,
        "endLineNumber" : 376,
        "endColumnNumber" : 18
      },
      "nodeContext" : "code.add('[');\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 376,
        "startColumnNumber" : 4,
        "endLineNumber" : 376,
        "endColumnNumber" : 18
      },
      "nodeContext" : "code.add('[');\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 377,
      "startColumnNumber" : 11,
      "endLineNumber" : 377,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 377,
        "startColumnNumber" : 4,
        "endLineNumber" : 377,
        "endColumnNumber" : 39
      },
      "nodeContext" : "addArg(code,insn.getArg(1),false)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 377,
        "startColumnNumber" : 4,
        "endLineNumber" : 377,
        "endColumnNumber" : 40
      },
      "nodeContext" : "addArg(code,insn.getArg(1),false);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 377,
        "startColumnNumber" : 4,
        "endLineNumber" : 377,
        "endColumnNumber" : 40
      },
      "nodeContext" : "addArg(code,insn.getArg(1),false);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 378,
      "startColumnNumber" : 4,
      "endLineNumber" : 378,
      "endColumnNumber" : 8
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 378,
        "startColumnNumber" : 4,
        "endLineNumber" : 378,
        "endColumnNumber" : 20
      },
      "nodeContext" : "code.add(\"] = \")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 378,
        "startColumnNumber" : 4,
        "endLineNumber" : 378,
        "endColumnNumber" : 21
      },
      "nodeContext" : "code.add(\"] = \");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 378,
        "startColumnNumber" : 4,
        "endLineNumber" : 378,
        "endColumnNumber" : 21
      },
      "nodeContext" : "code.add(\"] = \");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 379,
      "startColumnNumber" : 11,
      "endLineNumber" : 379,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 379,
        "startColumnNumber" : 4,
        "endLineNumber" : 379,
        "endColumnNumber" : 39
      },
      "nodeContext" : "addArg(code,insn.getArg(2),false)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 379,
        "startColumnNumber" : 4,
        "endLineNumber" : 379,
        "endColumnNumber" : 40
      },
      "nodeContext" : "addArg(code,insn.getArg(2),false);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 379,
        "startColumnNumber" : 4,
        "endLineNumber" : 379,
        "endColumnNumber" : 40
      },
      "nodeContext" : "addArg(code,insn.getArg(2),false);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 384,
      "startColumnNumber" : 18,
      "endLineNumber" : 384,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 384,
        "startColumnNumber" : 4,
        "endLineNumber" : 384,
        "endColumnNumber" : 50
      },
      "nodeContext" : "instanceField(code,fieldInfo,insn.getArg(0))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 384,
        "startColumnNumber" : 4,
        "endLineNumber" : 384,
        "endColumnNumber" : 51
      },
      "nodeContext" : "instanceField(code,fieldInfo,insn.getArg(0));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 142,
        "startLineNumber" : 382,
        "startColumnNumber" : 14,
        "endLineNumber" : 386,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  FieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\n  instanceField(code,fieldInfo,insn.getArg(0));\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 26,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 384,
        "startColumnNumber" : 4,
        "endLineNumber" : 384,
        "endColumnNumber" : 51
      },
      "nodeContext" : "instanceField(code,fieldInfo,insn.getArg(0));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 389,
      "startColumnNumber" : 18,
      "endLineNumber" : 389,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 389,
        "startColumnNumber" : 4,
        "endLineNumber" : 389,
        "endColumnNumber" : 50
      },
      "nodeContext" : "instanceField(code,fieldInfo,insn.getArg(1))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 389,
        "startColumnNumber" : 4,
        "endLineNumber" : 389,
        "endColumnNumber" : 51
      },
      "nodeContext" : "instanceField(code,fieldInfo,insn.getArg(1));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 204,
        "startLineNumber" : 387,
        "startColumnNumber" : 14,
        "endLineNumber" : 393,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  FieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\n  instanceField(code,fieldInfo,insn.getArg(1));\n  code.add(\" = \");\n  addArg(code,insn.getArg(0),false);\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 40,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 389,
        "startColumnNumber" : 4,
        "endLineNumber" : 389,
        "endColumnNumber" : 51
      },
      "nodeContext" : "instanceField(code,fieldInfo,insn.getArg(1));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 390,
      "startColumnNumber" : 4,
      "endLineNumber" : 390,
      "endColumnNumber" : 8
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 390,
        "startColumnNumber" : 4,
        "endLineNumber" : 390,
        "endColumnNumber" : 19
      },
      "nodeContext" : "code.add(\" = \")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 390,
        "startColumnNumber" : 4,
        "endLineNumber" : 390,
        "endColumnNumber" : 20
      },
      "nodeContext" : "code.add(\" = \");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 204,
        "startLineNumber" : 387,
        "startColumnNumber" : 14,
        "endLineNumber" : 393,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  FieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\n  instanceField(code,fieldInfo,insn.getArg(1));\n  code.add(\" = \");\n  addArg(code,insn.getArg(0),false);\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 40,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 390,
        "startColumnNumber" : 4,
        "endLineNumber" : 390,
        "endColumnNumber" : 20
      },
      "nodeContext" : "code.add(\" = \");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 391,
      "startColumnNumber" : 11,
      "endLineNumber" : 391,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 391,
        "startColumnNumber" : 4,
        "endLineNumber" : 391,
        "endColumnNumber" : 39
      },
      "nodeContext" : "addArg(code,insn.getArg(0),false)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 391,
        "startColumnNumber" : 4,
        "endLineNumber" : 391,
        "endColumnNumber" : 40
      },
      "nodeContext" : "addArg(code,insn.getArg(0),false);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 204,
        "startLineNumber" : 387,
        "startColumnNumber" : 14,
        "endLineNumber" : 393,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  FieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\n  instanceField(code,fieldInfo,insn.getArg(1));\n  code.add(\" = \");\n  addArg(code,insn.getArg(0),false);\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 40,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 391,
        "startColumnNumber" : 4,
        "endLineNumber" : 391,
        "endColumnNumber" : 40
      },
      "nodeContext" : "addArg(code,insn.getArg(0),false);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 396,
      "startColumnNumber" : 16,
      "endLineNumber" : 396,
      "endColumnNumber" : 20
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 396,
        "startColumnNumber" : 4,
        "endLineNumber" : 396,
        "endColumnNumber" : 68
      },
      "nodeContext" : "staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 396,
        "startColumnNumber" : 4,
        "endLineNumber" : 396,
        "endColumnNumber" : 69
      },
      "nodeContext" : "staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 396,
        "startColumnNumber" : 4,
        "endLineNumber" : 396,
        "endColumnNumber" : 69
      },
      "nodeContext" : "staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 8
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 400,
      "startColumnNumber" : 16,
      "endLineNumber" : 400,
      "endColumnNumber" : 20
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 400,
        "startColumnNumber" : 4,
        "endLineNumber" : 400,
        "endColumnNumber" : 28
      },
      "nodeContext" : "staticField(code,field)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 400,
        "startColumnNumber" : 4,
        "endLineNumber" : 400,
        "endColumnNumber" : 29
      },
      "nodeContext" : "staticField(code,field);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 400,
        "startColumnNumber" : 4,
        "endLineNumber" : 400,
        "endColumnNumber" : 29
      },
      "nodeContext" : "staticField(code,field);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 401,
      "startColumnNumber" : 4,
      "endLineNumber" : 401,
      "endColumnNumber" : 8
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 401,
        "startColumnNumber" : 4,
        "endLineNumber" : 401,
        "endColumnNumber" : 19
      },
      "nodeContext" : "code.add(\" = \")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 401,
        "startColumnNumber" : 4,
        "endLineNumber" : 401,
        "endColumnNumber" : 20
      },
      "nodeContext" : "code.add(\" = \");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 401,
        "startColumnNumber" : 4,
        "endLineNumber" : 401,
        "endColumnNumber" : 20
      },
      "nodeContext" : "code.add(\" = \");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 402,
      "startColumnNumber" : 11,
      "endLineNumber" : 402,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 402,
        "startColumnNumber" : 4,
        "endLineNumber" : 402,
        "endColumnNumber" : 39
      },
      "nodeContext" : "addArg(code,insn.getArg(0),false)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 402,
        "startColumnNumber" : 4,
        "endLineNumber" : 402,
        "endColumnNumber" : 40
      },
      "nodeContext" : "addArg(code,insn.getArg(0),false);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 402,
        "startColumnNumber" : 4,
        "endLineNumber" : 402,
        "endColumnNumber" : 40
      },
      "nodeContext" : "addArg(code,insn.getArg(0),false);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 408,
      "startColumnNumber" : 5,
      "endLineNumber" : 408,
      "endColumnNumber" : 9
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 408,
        "startColumnNumber" : 5,
        "endLineNumber" : 408,
        "endColumnNumber" : 18
      },
      "nodeContext" : "code.add('(')",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 408,
        "startColumnNumber" : 5,
        "endLineNumber" : 408,
        "endColumnNumber" : 19
      },
      "nodeContext" : "code.add('(');\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 407,
        "startColumnNumber" : 14,
        "endLineNumber" : 409,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  code.add('(');\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 407,
        "startColumnNumber" : 4,
        "endLineNumber" : 409,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (wrap) {\n  code.add('(');\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 408,
        "startColumnNumber" : 5,
        "endLineNumber" : 408,
        "endColumnNumber" : 19
      },
      "nodeContext" : "code.add('(');\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 411,
      "startColumnNumber" : 12,
      "endLineNumber" : 411,
      "endColumnNumber" : 16
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 411,
        "startColumnNumber" : 5,
        "endLineNumber" : 411,
        "endColumnNumber" : 28
      },
      "nodeContext" : "addArg(code,it.next())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 411,
        "startColumnNumber" : 5,
        "endLineNumber" : 411,
        "endColumnNumber" : 29
      },
      "nodeContext" : "addArg(code,it.next());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 92,
        "startLineNumber" : 410,
        "startColumnNumber" : 80,
        "endLineNumber" : 415,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  addArg(code,it.next());\n  if (it.hasNext()) {\n    code.add(\" + \");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 168,
        "startLineNumber" : 410,
        "startColumnNumber" : 4,
        "endLineNumber" : 415,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\n  addArg(code,it.next());\n  if (it.hasNext()) {\n    code.add(\" + \");\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 35,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 411,
        "startColumnNumber" : 5,
        "endLineNumber" : 411,
        "endColumnNumber" : 29
      },
      "nodeContext" : "addArg(code,it.next());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 413,
      "startColumnNumber" : 6,
      "endLineNumber" : 413,
      "endColumnNumber" : 10
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 413,
        "startColumnNumber" : 6,
        "endLineNumber" : 413,
        "endColumnNumber" : 21
      },
      "nodeContext" : "code.add(\" + \")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 413,
        "startColumnNumber" : 6,
        "endLineNumber" : 413,
        "endColumnNumber" : 22
      },
      "nodeContext" : "code.add(\" + \");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 412,
        "startColumnNumber" : 23,
        "endLineNumber" : 414,
        "endColumnNumber" : 6
      },
      "nodeContext" : "{\n  code.add(\" + \");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 412,
        "startColumnNumber" : 5,
        "endLineNumber" : 414,
        "endColumnNumber" : 6
      },
      "nodeContext" : "if (it.hasNext()) {\n  code.add(\" + \");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 92,
        "startLineNumber" : 410,
        "startColumnNumber" : 80,
        "endLineNumber" : 415,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  addArg(code,it.next());\n  if (it.hasNext()) {\n    code.add(\" + \");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 168,
        "startLineNumber" : 410,
        "startColumnNumber" : 4,
        "endLineNumber" : 415,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\n  addArg(code,it.next());\n  if (it.hasNext()) {\n    code.add(\" + \");\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 35,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 413,
        "startColumnNumber" : 6,
        "endLineNumber" : 413,
        "endColumnNumber" : 22
      },
      "nodeContext" : "code.add(\" + \");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 417,
      "startColumnNumber" : 5,
      "endLineNumber" : 417,
      "endColumnNumber" : 9
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 417,
        "startColumnNumber" : 5,
        "endLineNumber" : 417,
        "endColumnNumber" : 18
      },
      "nodeContext" : "code.add(')')",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 417,
        "startColumnNumber" : 5,
        "endLineNumber" : 417,
        "endColumnNumber" : 19
      },
      "nodeContext" : "code.add(')');\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 416,
        "startColumnNumber" : 14,
        "endLineNumber" : 418,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  code.add(')');\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 416,
        "startColumnNumber" : 4,
        "endLineNumber" : 418,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (wrap) {\n  code.add(')');\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 417,
        "startColumnNumber" : 5,
        "endLineNumber" : 417,
        "endColumnNumber" : 19
      },
      "nodeContext" : "code.add(')');\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 423,
      "startColumnNumber" : 5,
      "endLineNumber" : 423,
      "endColumnNumber" : 9
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 423,
        "startColumnNumber" : 5,
        "endLineNumber" : 423,
        "endColumnNumber" : 31
      },
      "nodeContext" : "code.add(\"monitor-enter(\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 423,
        "startColumnNumber" : 5,
        "endLineNumber" : 423,
        "endColumnNumber" : 32
      },
      "nodeContext" : "code.add(\"monitor-enter(\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 422,
        "startColumnNumber" : 22,
        "endLineNumber" : 426,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  code.add(\"monitor-enter(\");\n  addArg(code,insn.getArg(0));\n  code.add(')');\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 19,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 113,
        "startLineNumber" : 422,
        "startColumnNumber" : 4,
        "endLineNumber" : 426,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (isFallback()) {\n  code.add(\"monitor-enter(\");\n  addArg(code,insn.getArg(0));\n  code.add(')');\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 423,
        "startColumnNumber" : 5,
        "endLineNumber" : 423,
        "endColumnNumber" : 32
      },
      "nodeContext" : "code.add(\"monitor-enter(\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 424,
      "startColumnNumber" : 12,
      "endLineNumber" : 424,
      "endColumnNumber" : 16
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 424,
        "startColumnNumber" : 5,
        "endLineNumber" : 424,
        "endColumnNumber" : 33
      },
      "nodeContext" : "addArg(code,insn.getArg(0))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 424,
        "startColumnNumber" : 5,
        "endLineNumber" : 424,
        "endColumnNumber" : 34
      },
      "nodeContext" : "addArg(code,insn.getArg(0));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 422,
        "startColumnNumber" : 22,
        "endLineNumber" : 426,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  code.add(\"monitor-enter(\");\n  addArg(code,insn.getArg(0));\n  code.add(')');\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 19,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 113,
        "startLineNumber" : 422,
        "startColumnNumber" : 4,
        "endLineNumber" : 426,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (isFallback()) {\n  code.add(\"monitor-enter(\");\n  addArg(code,insn.getArg(0));\n  code.add(')');\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 424,
        "startColumnNumber" : 5,
        "endLineNumber" : 424,
        "endColumnNumber" : 34
      },
      "nodeContext" : "addArg(code,insn.getArg(0));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 425,
      "startColumnNumber" : 5,
      "endLineNumber" : 425,
      "endColumnNumber" : 9
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 425,
        "startColumnNumber" : 5,
        "endLineNumber" : 425,
        "endColumnNumber" : 18
      },
      "nodeContext" : "code.add(')')",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 425,
        "startColumnNumber" : 5,
        "endLineNumber" : 425,
        "endColumnNumber" : 19
      },
      "nodeContext" : "code.add(')');\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 422,
        "startColumnNumber" : 22,
        "endLineNumber" : 426,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  code.add(\"monitor-enter(\");\n  addArg(code,insn.getArg(0));\n  code.add(')');\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 19,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 113,
        "startLineNumber" : 422,
        "startColumnNumber" : 4,
        "endLineNumber" : 426,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (isFallback()) {\n  code.add(\"monitor-enter(\");\n  addArg(code,insn.getArg(0));\n  code.add(')');\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 425,
        "startColumnNumber" : 5,
        "endLineNumber" : 425,
        "endColumnNumber" : 19
      },
      "nodeContext" : "code.add(')');\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 431,
      "startColumnNumber" : 5,
      "endLineNumber" : 431,
      "endColumnNumber" : 9
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 431,
        "startColumnNumber" : 5,
        "endLineNumber" : 431,
        "endColumnNumber" : 30
      },
      "nodeContext" : "code.add(\"monitor-exit(\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 431,
        "startColumnNumber" : 5,
        "endLineNumber" : 431,
        "endColumnNumber" : 31
      },
      "nodeContext" : "code.add(\"monitor-exit(\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 94,
        "startLineNumber" : 430,
        "startColumnNumber" : 22,
        "endLineNumber" : 434,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  code.add(\"monitor-exit(\");\n  addArg(code,insn.getArg(0));\n  code.add(')');\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 19,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 112,
        "startLineNumber" : 430,
        "startColumnNumber" : 4,
        "endLineNumber" : 434,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (isFallback()) {\n  code.add(\"monitor-exit(\");\n  addArg(code,insn.getArg(0));\n  code.add(')');\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 431,
        "startColumnNumber" : 5,
        "endLineNumber" : 431,
        "endColumnNumber" : 31
      },
      "nodeContext" : "code.add(\"monitor-exit(\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 432,
      "startColumnNumber" : 12,
      "endLineNumber" : 432,
      "endColumnNumber" : 16
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 432,
        "startColumnNumber" : 5,
        "endLineNumber" : 432,
        "endColumnNumber" : 33
      },
      "nodeContext" : "addArg(code,insn.getArg(0))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 432,
        "startColumnNumber" : 5,
        "endLineNumber" : 432,
        "endColumnNumber" : 34
      },
      "nodeContext" : "addArg(code,insn.getArg(0));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 94,
        "startLineNumber" : 430,
        "startColumnNumber" : 22,
        "endLineNumber" : 434,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  code.add(\"monitor-exit(\");\n  addArg(code,insn.getArg(0));\n  code.add(')');\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 19,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 112,
        "startLineNumber" : 430,
        "startColumnNumber" : 4,
        "endLineNumber" : 434,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (isFallback()) {\n  code.add(\"monitor-exit(\");\n  addArg(code,insn.getArg(0));\n  code.add(')');\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 432,
        "startColumnNumber" : 5,
        "endLineNumber" : 432,
        "endColumnNumber" : 34
      },
      "nodeContext" : "addArg(code,insn.getArg(0));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 433,
      "startColumnNumber" : 5,
      "endLineNumber" : 433,
      "endColumnNumber" : 9
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 433,
        "startColumnNumber" : 5,
        "endLineNumber" : 433,
        "endColumnNumber" : 18
      },
      "nodeContext" : "code.add(')')",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 433,
        "startColumnNumber" : 5,
        "endLineNumber" : 433,
        "endColumnNumber" : 19
      },
      "nodeContext" : "code.add(')');\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 94,
        "startLineNumber" : 430,
        "startColumnNumber" : 22,
        "endLineNumber" : 434,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  code.add(\"monitor-exit(\");\n  addArg(code,insn.getArg(0));\n  code.add(')');\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 19,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 112,
        "startLineNumber" : 430,
        "startColumnNumber" : 4,
        "endLineNumber" : 434,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (isFallback()) {\n  code.add(\"monitor-exit(\");\n  addArg(code,insn.getArg(0));\n  code.add(')');\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 433,
        "startColumnNumber" : 5,
        "endLineNumber" : 433,
        "endColumnNumber" : 19
      },
      "nodeContext" : "code.add(')');\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 438,
      "startColumnNumber" : 36,
      "endLineNumber" : 438,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 438,
        "startColumnNumber" : 4,
        "endLineNumber" : 438,
        "endColumnNumber" : 48
      },
      "nodeContext" : "makeTernary((TernaryInsn)insn,code,state)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 438,
        "startColumnNumber" : 4,
        "endLineNumber" : 438,
        "endColumnNumber" : 49
      },
      "nodeContext" : "makeTernary((TernaryInsn)insn,code,state);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 438,
        "startColumnNumber" : 4,
        "endLineNumber" : 438,
        "endColumnNumber" : 49
      },
      "nodeContext" : "makeTernary((TernaryInsn)insn,code,state);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 442,
      "startColumnNumber" : 11,
      "endLineNumber" : 442,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 442,
        "startColumnNumber" : 4,
        "endLineNumber" : 442,
        "endColumnNumber" : 32
      },
      "nodeContext" : "addArg(code,insn.getArg(0))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 442,
        "startColumnNumber" : 4,
        "endLineNumber" : 442,
        "endColumnNumber" : 33
      },
      "nodeContext" : "addArg(code,insn.getArg(0));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 442,
        "startColumnNumber" : 4,
        "endLineNumber" : 442,
        "endColumnNumber" : 33
      },
      "nodeContext" : "addArg(code,insn.getArg(0));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 449,
      "startColumnNumber" : 4,
      "endLineNumber" : 449,
      "endColumnNumber" : 8
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 449,
        "startColumnNumber" : 4,
        "endLineNumber" : 449,
        "endColumnNumber" : 20
      },
      "nodeContext" : "code.add(\"if (\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 449,
        "startColumnNumber" : 4,
        "endLineNumber" : 449,
        "endColumnNumber" : 21
      },
      "nodeContext" : "code.add(\"if (\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 449,
        "startColumnNumber" : 4,
        "endLineNumber" : 449,
        "endColumnNumber" : 21
      },
      "nodeContext" : "code.add(\"if (\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 450,
      "startColumnNumber" : 11,
      "endLineNumber" : 450,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 450,
        "startColumnNumber" : 4,
        "endLineNumber" : 450,
        "endColumnNumber" : 32
      },
      "nodeContext" : "addArg(code,insn.getArg(0))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 450,
        "startColumnNumber" : 4,
        "endLineNumber" : 450,
        "endColumnNumber" : 33
      },
      "nodeContext" : "addArg(code,insn.getArg(0));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 450,
        "startColumnNumber" : 4,
        "endLineNumber" : 450,
        "endColumnNumber" : 33
      },
      "nodeContext" : "addArg(code,insn.getArg(0));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 451,
      "startColumnNumber" : 4,
      "endLineNumber" : 451,
      "endColumnNumber" : 8
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 451,
        "startColumnNumber" : 4,
        "endLineNumber" : 451,
        "endColumnNumber" : 17
      },
      "nodeContext" : "code.add(' ')",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 451,
        "startColumnNumber" : 4,
        "endLineNumber" : 451,
        "endColumnNumber" : 18
      },
      "nodeContext" : "code.add(' ');\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 451,
        "startColumnNumber" : 4,
        "endLineNumber" : 451,
        "endColumnNumber" : 18
      },
      "nodeContext" : "code.add(' ');\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 452,
      "startColumnNumber" : 4,
      "endLineNumber" : 452,
      "endColumnNumber" : 8
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 452,
        "startColumnNumber" : 4,
        "endLineNumber" : 452,
        "endColumnNumber" : 40
      },
      "nodeContext" : "code.add(ifInsn.getOp().getSymbol())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 452,
        "startColumnNumber" : 4,
        "endLineNumber" : 452,
        "endColumnNumber" : 49
      },
      "nodeContext" : "code.add(ifInsn.getOp().getSymbol()).add(' ')",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 452,
        "startColumnNumber" : 4,
        "endLineNumber" : 452,
        "endColumnNumber" : 50
      },
      "nodeContext" : "code.add(ifInsn.getOp().getSymbol()).add(' ');\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 452,
        "startColumnNumber" : 4,
        "endLineNumber" : 452,
        "endColumnNumber" : 50
      },
      "nodeContext" : "code.add(ifInsn.getOp().getSymbol()).add(' ');\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 453,
      "startColumnNumber" : 11,
      "endLineNumber" : 453,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 453,
        "startColumnNumber" : 4,
        "endLineNumber" : 453,
        "endColumnNumber" : 32
      },
      "nodeContext" : "addArg(code,insn.getArg(1))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 453,
        "startColumnNumber" : 4,
        "endLineNumber" : 453,
        "endColumnNumber" : 33
      },
      "nodeContext" : "addArg(code,insn.getArg(1));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 453,
        "startColumnNumber" : 4,
        "endLineNumber" : 453,
        "endColumnNumber" : 33
      },
      "nodeContext" : "addArg(code,insn.getArg(1));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 454,
      "startColumnNumber" : 4,
      "endLineNumber" : 454,
      "endColumnNumber" : 8
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 454,
        "startColumnNumber" : 4,
        "endLineNumber" : 454,
        "endColumnNumber" : 23
      },
      "nodeContext" : "code.add(\") goto \")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 454,
        "startColumnNumber" : 4,
        "endLineNumber" : 454,
        "endColumnNumber" : 71
      },
      "nodeContext" : "code.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 454,
        "startColumnNumber" : 4,
        "endLineNumber" : 454,
        "endColumnNumber" : 72
      },
      "nodeContext" : "code.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 454,
        "startColumnNumber" : 4,
        "endLineNumber" : 454,
        "endColumnNumber" : 72
      },
      "nodeContext" : "code.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 459,
      "startColumnNumber" : 4,
      "endLineNumber" : 459,
      "endColumnNumber" : 8
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 459,
        "startColumnNumber" : 4,
        "endLineNumber" : 459,
        "endColumnNumber" : 21
      },
      "nodeContext" : "code.add(\"goto \")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 459,
        "startColumnNumber" : 4,
        "endLineNumber" : 459,
        "endColumnNumber" : 80
      },
      "nodeContext" : "code.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 459,
        "startColumnNumber" : 4,
        "endLineNumber" : 459,
        "endColumnNumber" : 81
      },
      "nodeContext" : "code.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 17,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 459,
        "startColumnNumber" : 4,
        "endLineNumber" : 459,
        "endColumnNumber" : 81
      },
      "nodeContext" : "code.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 17,
      "astHeight" : 8
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 464,
      "startColumnNumber" : 4,
      "endLineNumber" : 464,
      "endColumnNumber" : 8
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 464,
        "startColumnNumber" : 4,
        "endLineNumber" : 464,
        "endColumnNumber" : 30
      },
      "nodeContext" : "code.add(\"move-exception\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 464,
        "startColumnNumber" : 4,
        "endLineNumber" : 464,
        "endColumnNumber" : 31
      },
      "nodeContext" : "code.add(\"move-exception\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 464,
        "startColumnNumber" : 4,
        "endLineNumber" : 464,
        "endColumnNumber" : 31
      },
      "nodeContext" : "code.add(\"move-exception\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 470,
      "startColumnNumber" : 4,
      "endLineNumber" : 470,
      "endColumnNumber" : 8
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 470,
        "startColumnNumber" : 4,
        "endLineNumber" : 470,
        "endColumnNumber" : 23
      },
      "nodeContext" : "code.add(\"switch(\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 470,
        "startColumnNumber" : 4,
        "endLineNumber" : 470,
        "endColumnNumber" : 24
      },
      "nodeContext" : "code.add(\"switch(\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 470,
        "startColumnNumber" : 4,
        "endLineNumber" : 470,
        "endColumnNumber" : 24
      },
      "nodeContext" : "code.add(\"switch(\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 471,
      "startColumnNumber" : 11,
      "endLineNumber" : 471,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 471,
        "startColumnNumber" : 4,
        "endLineNumber" : 471,
        "endColumnNumber" : 32
      },
      "nodeContext" : "addArg(code,insn.getArg(0))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 471,
        "startColumnNumber" : 4,
        "endLineNumber" : 471,
        "endColumnNumber" : 33
      },
      "nodeContext" : "addArg(code,insn.getArg(0));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 471,
        "startColumnNumber" : 4,
        "endLineNumber" : 471,
        "endColumnNumber" : 33
      },
      "nodeContext" : "addArg(code,insn.getArg(0));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 472,
      "startColumnNumber" : 4,
      "endLineNumber" : 472,
      "endColumnNumber" : 8
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 472,
        "startColumnNumber" : 4,
        "endLineNumber" : 472,
        "endColumnNumber" : 19
      },
      "nodeContext" : "code.add(\") {\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 472,
        "startColumnNumber" : 4,
        "endLineNumber" : 472,
        "endColumnNumber" : 20
      },
      "nodeContext" : "code.add(\") {\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 472,
        "startColumnNumber" : 4,
        "endLineNumber" : 472,
        "endColumnNumber" : 20
      },
      "nodeContext" : "code.add(\") {\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 473,
      "startColumnNumber" : 4,
      "endLineNumber" : 473,
      "endColumnNumber" : 8
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 473,
        "startColumnNumber" : 4,
        "endLineNumber" : 473,
        "endColumnNumber" : 20
      },
      "nodeContext" : "code.incIndent()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 473,
        "startColumnNumber" : 4,
        "endLineNumber" : 473,
        "endColumnNumber" : 21
      },
      "nodeContext" : "code.incIndent();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 473,
        "startColumnNumber" : 4,
        "endLineNumber" : 473,
        "endColumnNumber" : 21
      },
      "nodeContext" : "code.incIndent();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 476,
      "startColumnNumber" : 5,
      "endLineNumber" : 476,
      "endColumnNumber" : 9
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 476,
        "startColumnNumber" : 5,
        "endLineNumber" : 476,
        "endColumnNumber" : 28
      },
      "nodeContext" : "code.startLine(\"case \")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 476,
        "startColumnNumber" : 5,
        "endLineNumber" : 476,
        "endColumnNumber" : 37
      },
      "nodeContext" : "code.startLine(\"case \").add(key)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 476,
        "startColumnNumber" : 5,
        "endLineNumber" : 476,
        "endColumnNumber" : 52
      },
      "nodeContext" : "code.startLine(\"case \").add(key).add(\": goto \")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 476,
        "startColumnNumber" : 5,
        "endLineNumber" : 476,
        "endColumnNumber" : 53
      },
      "nodeContext" : "code.startLine(\"case \").add(key).add(\": goto \");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 175,
        "startLineNumber" : 474,
        "startColumnNumber" : 49,
        "endLineNumber" : 478,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String key=sw.getKeys()[i].toString();\n  code.startLine(\"case \").add(key).add(\": goto \");\n  code.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 39,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 220,
        "startLineNumber" : 474,
        "startColumnNumber" : 4,
        "endLineNumber" : 478,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < sw.getCasesCount(); i++) {\n  String key=sw.getKeys()[i].toString();\n  code.startLine(\"case \").add(key).add(\": goto \");\n  code.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 52,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 476,
        "startColumnNumber" : 5,
        "endLineNumber" : 476,
        "endColumnNumber" : 53
      },
      "nodeContext" : "code.startLine(\"case \").add(key).add(\": goto \");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 477,
      "startColumnNumber" : 5,
      "endLineNumber" : 477,
      "endColumnNumber" : 9
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 477,
        "startColumnNumber" : 5,
        "endLineNumber" : 477,
        "endColumnNumber" : 57
      },
      "nodeContext" : "code.add(MethodGen.getLabelName(sw.getTargets()[i]))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 477,
        "startColumnNumber" : 5,
        "endLineNumber" : 477,
        "endColumnNumber" : 66
      },
      "nodeContext" : "code.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';')",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 477,
        "startColumnNumber" : 5,
        "endLineNumber" : 477,
        "endColumnNumber" : 67
      },
      "nodeContext" : "code.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 175,
        "startLineNumber" : 474,
        "startColumnNumber" : 49,
        "endLineNumber" : 478,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String key=sw.getKeys()[i].toString();\n  code.startLine(\"case \").add(key).add(\": goto \");\n  code.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 39,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 220,
        "startLineNumber" : 474,
        "startColumnNumber" : 4,
        "endLineNumber" : 478,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < sw.getCasesCount(); i++) {\n  String key=sw.getKeys()[i].toString();\n  code.startLine(\"case \").add(key).add(\": goto \");\n  code.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 52,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 477,
        "startColumnNumber" : 5,
        "endLineNumber" : 477,
        "endColumnNumber" : 67
      },
      "nodeContext" : "code.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 479,
      "startColumnNumber" : 4,
      "endLineNumber" : 479,
      "endColumnNumber" : 8
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 479,
        "startColumnNumber" : 4,
        "endLineNumber" : 479,
        "endColumnNumber" : 36
      },
      "nodeContext" : "code.startLine(\"default: goto \")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 479,
        "startColumnNumber" : 4,
        "endLineNumber" : 479,
        "endColumnNumber" : 37
      },
      "nodeContext" : "code.startLine(\"default: goto \");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 479,
        "startColumnNumber" : 4,
        "endLineNumber" : 479,
        "endColumnNumber" : 37
      },
      "nodeContext" : "code.startLine(\"default: goto \");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 480,
      "startColumnNumber" : 4,
      "endLineNumber" : 480,
      "endColumnNumber" : 8
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 480,
        "startColumnNumber" : 4,
        "endLineNumber" : 480,
        "endColumnNumber" : 63
      },
      "nodeContext" : "code.add(MethodGen.getLabelName(sw.getDefaultCaseOffset()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 480,
        "startColumnNumber" : 4,
        "endLineNumber" : 480,
        "endColumnNumber" : 72
      },
      "nodeContext" : "code.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';')",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 480,
        "startColumnNumber" : 4,
        "endLineNumber" : 480,
        "endColumnNumber" : 73
      },
      "nodeContext" : "code.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 480,
        "startColumnNumber" : 4,
        "endLineNumber" : 480,
        "endColumnNumber" : 73
      },
      "nodeContext" : "code.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 481,
      "startColumnNumber" : 4,
      "endLineNumber" : 481,
      "endColumnNumber" : 8
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 481,
        "startColumnNumber" : 4,
        "endLineNumber" : 481,
        "endColumnNumber" : 20
      },
      "nodeContext" : "code.decIndent()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 481,
        "startColumnNumber" : 4,
        "endLineNumber" : 481,
        "endColumnNumber" : 21
      },
      "nodeContext" : "code.decIndent();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 481,
        "startColumnNumber" : 4,
        "endLineNumber" : 481,
        "endColumnNumber" : 21
      },
      "nodeContext" : "code.decIndent();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 482,
      "startColumnNumber" : 4,
      "endLineNumber" : 482,
      "endColumnNumber" : 8
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 482,
        "startColumnNumber" : 4,
        "endLineNumber" : 482,
        "endColumnNumber" : 23
      },
      "nodeContext" : "code.startLine('}')",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 482,
        "startColumnNumber" : 4,
        "endLineNumber" : 482,
        "endColumnNumber" : 24
      },
      "nodeContext" : "code.startLine('}');\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 482,
        "startColumnNumber" : 4,
        "endLineNumber" : 482,
        "endColumnNumber" : 24
      },
      "nodeContext" : "code.startLine('}');\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 501,
      "startColumnNumber" : 4,
      "endLineNumber" : 501,
      "endColumnNumber" : 8
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 501,
        "startColumnNumber" : 4,
        "endLineNumber" : 501,
        "endColumnNumber" : 17
      },
      "nodeContext" : "code.add('{')",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 501,
        "startColumnNumber" : 4,
        "endLineNumber" : 501,
        "endColumnNumber" : 63
      },
      "nodeContext" : "code.add('{').add(arrStr.substring(1,arrStr.length() - 1))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 501,
        "startColumnNumber" : 4,
        "endLineNumber" : 501,
        "endColumnNumber" : 72
      },
      "nodeContext" : "code.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}')",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 501,
        "startColumnNumber" : 4,
        "endLineNumber" : 501,
        "endColumnNumber" : 73
      },
      "nodeContext" : "code.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 19,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 501,
        "startColumnNumber" : 4,
        "endLineNumber" : 501,
        "endColumnNumber" : 73
      },
      "nodeContext" : "code.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 19,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 507,
      "startColumnNumber" : 4,
      "endLineNumber" : 507,
      "endColumnNumber" : 8
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 507,
        "startColumnNumber" : 4,
        "endLineNumber" : 507,
        "endColumnNumber" : 20
      },
      "nodeContext" : "code.add(\"new \")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 507,
        "startColumnNumber" : 4,
        "endLineNumber" : 507,
        "endColumnNumber" : 63
      },
      "nodeContext" : "code.add(\"new \").add(insn.getResult().getType().toString())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 507,
        "startColumnNumber" : 4,
        "endLineNumber" : 507,
        "endColumnNumber" : 64
      },
      "nodeContext" : "code.add(\"new \").add(insn.getResult().getType().toString());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 507,
        "startColumnNumber" : 4,
        "endLineNumber" : 507,
        "endColumnNumber" : 64
      },
      "nodeContext" : "code.add(\"new \").add(insn.getResult().getType().toString());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 513,
      "startColumnNumber" : 4,
      "endLineNumber" : 513,
      "endColumnNumber" : 8
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 513,
        "startColumnNumber" : 4,
        "endLineNumber" : 513,
        "endColumnNumber" : 39
      },
      "nodeContext" : "code.add(insn.getType().toString())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 513,
        "startColumnNumber" : 4,
        "endLineNumber" : 513,
        "endColumnNumber" : 48
      },
      "nodeContext" : "code.add(insn.getType().toString()).add('(')",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 513,
        "startColumnNumber" : 4,
        "endLineNumber" : 513,
        "endColumnNumber" : 49
      },
      "nodeContext" : "code.add(insn.getType().toString()).add('(');\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 513,
        "startColumnNumber" : 4,
        "endLineNumber" : 513,
        "endColumnNumber" : 49
      },
      "nodeContext" : "code.add(insn.getType().toString()).add('(');\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 515,
      "startColumnNumber" : 12,
      "endLineNumber" : 515,
      "endColumnNumber" : 16
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 515,
        "startColumnNumber" : 5,
        "endLineNumber" : 515,
        "endColumnNumber" : 26
      },
      "nodeContext" : "addArg(code,insnArg)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 515,
        "startColumnNumber" : 5,
        "endLineNumber" : 515,
        "endColumnNumber" : 27
      },
      "nodeContext" : "addArg(code,insnArg);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 514,
        "startColumnNumber" : 48,
        "endLineNumber" : 517,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  addArg(code,insnArg);\n  code.add(' ');\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 514,
        "startColumnNumber" : 4,
        "endLineNumber" : 517,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (InsnArg insnArg : insn.getArguments()) {\n  addArg(code,insnArg);\n  code.add(' ');\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 19,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 515,
        "startColumnNumber" : 5,
        "endLineNumber" : 515,
        "endColumnNumber" : 27
      },
      "nodeContext" : "addArg(code,insnArg);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 516,
      "startColumnNumber" : 5,
      "endLineNumber" : 516,
      "endColumnNumber" : 9
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 516,
        "startColumnNumber" : 5,
        "endLineNumber" : 516,
        "endColumnNumber" : 18
      },
      "nodeContext" : "code.add(' ')",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 516,
        "startColumnNumber" : 5,
        "endLineNumber" : 516,
        "endColumnNumber" : 19
      },
      "nodeContext" : "code.add(' ');\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 514,
        "startColumnNumber" : 48,
        "endLineNumber" : 517,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  addArg(code,insnArg);\n  code.add(' ');\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 514,
        "startColumnNumber" : 4,
        "endLineNumber" : 517,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (InsnArg insnArg : insn.getArguments()) {\n  addArg(code,insnArg);\n  code.add(' ');\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 19,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 516,
        "startColumnNumber" : 5,
        "endLineNumber" : 516,
        "endColumnNumber" : 19
      },
      "nodeContext" : "code.add(' ');\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  }, {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 518,
      "startColumnNumber" : 4,
      "endLineNumber" : 518,
      "endColumnNumber" : 8
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 518,
        "startColumnNumber" : 4,
        "endLineNumber" : 518,
        "endColumnNumber" : 17
      },
      "nodeContext" : "code.add(')')",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 518,
        "startColumnNumber" : 4,
        "endLineNumber" : 518,
        "endColumnNumber" : 18
      },
      "nodeContext" : "code.add(')');\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7010,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 523,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST_STR:  String str=((ConstStringNode)insn).getString();\ncode.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1290,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7017,
        "startLineNumber" : 233,
        "startColumnNumber" : 101,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1291,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7117,
        "startLineNumber" : 233,
        "startColumnNumber" : 1,
        "endLineNumber" : 524,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void makeInsnBody(CodeWriter code,InsnNode insn,Set<Flags> state) throws CodegenException {\nswitch (insn.getType()) {\ncase CONST_STR:    String str=((ConstStringNode)insn).getString();\n  code.add(mth.dex().root().getStringUtils().unescapeString(str));\nbreak;\ncase CONST_CLASS:ArgType clsType=((ConstClassNode)insn).getClsType();\nuseType(code,clsType);\ncode.add(\".class\");\nbreak;\ncase CONST:LiteralArg arg=(LiteralArg)insn.getArg(0);\ncode.add(lit(arg));\nbreak;\ncase MOVE:addArg(code,insn.getArg(0),false);\nbreak;\ncase CHECK_CAST:case CAST:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\ncode.add('(');\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\ncode.add(\") \");\naddArg(code,insn.getArg(0),true);\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase ARITH:makeArith((ArithNode)insn,code,state);\nbreak;\ncase NEG:oneArgInsn(code,insn,state,'-');\nbreak;\ncase NOT:char op=insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';\noneArgInsn(code,insn,state,op);\nbreak;\ncase RETURN:if (insn.getArgsCount() != 0) {\ncode.add(\"return \");\naddArg(code,insn.getArg(0),false);\n}\n else {\ncode.add(\"return\");\n}\nbreak;\ncase BREAK:code.add(\"break\");\nLoopLabelAttr labelAttr=insn.get(AType.LOOP_LABEL);\nif (labelAttr != null) {\ncode.add(' ').add(mgen.getNameGen().getLoopLabel(labelAttr));\n}\nbreak;\ncase CONTINUE:code.add(\"continue\");\nbreak;\ncase THROW:code.add(\"throw \");\naddArg(code,insn.getArg(0),true);\nbreak;\ncase CMP_L:case CMP_G:code.add('(');\naddArg(code,insn.getArg(0));\ncode.add(\" > \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 1 : (\");\naddArg(code,insn.getArg(0));\ncode.add(\" == \");\naddArg(code,insn.getArg(1));\ncode.add(\" ? 0 : -1))\");\nbreak;\ncase INSTANCE_OF:{\nboolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\naddArg(code,insn.getArg(0));\ncode.add(\" instanceof \");\nuseType(code,(ArgType)((IndexInsnNode)insn).getIndex());\nif (wrap) {\ncode.add(')');\n}\nbreak;\n}\ncase CONSTRUCTOR:makeConstructor((ConstructorInsn)insn,code);\nbreak;\ncase INVOKE:makeInvoke((InvokeNode)insn,code);\nbreak;\ncase NEW_ARRAY:{\nArgType arrayType=((NewArrayNode)insn).getArrayType();\ncode.add(\"new \");\nuseType(code,arrayType.getArrayRootElement());\ncode.add('[');\naddArg(code,insn.getArg(0));\ncode.add(']');\nint dim=arrayType.getArrayDimension();\nfor (int i=0; i < dim - 1; i++) {\ncode.add(\"[]\");\n}\nbreak;\n}\ncase ARRAY_LENGTH:addArg(code,insn.getArg(0));\ncode.add(\".length\");\nbreak;\ncase FILLED_NEW_ARRAY:filledNewArray((FilledNewArrayNode)insn,code);\nbreak;\ncase AGET:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(']');\nbreak;\ncase APUT:addArg(code,insn.getArg(0));\ncode.add('[');\naddArg(code,insn.getArg(1),false);\ncode.add(\"] = \");\naddArg(code,insn.getArg(2),false);\nbreak;\ncase IGET:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(0));\nbreak;\n}\ncase IPUT:{\nFieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)insn).getIndex();\ninstanceField(code,fieldInfo,insn.getArg(1));\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\n}\ncase SGET:staticField(code,(FieldInfo)((IndexInsnNode)insn).getIndex());\nbreak;\ncase SPUT:FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();\nstaticField(code,field);\ncode.add(\" = \");\naddArg(code,insn.getArg(0),false);\nbreak;\ncase STR_CONCAT:boolean wrap=state.contains(Flags.BODY_ONLY);\nif (wrap) {\ncode.add('(');\n}\nfor (Iterator<InsnArg> it=insn.getArguments().iterator(); it.hasNext(); ) {\naddArg(code,it.next());\nif (it.hasNext()) {\ncode.add(\" + \");\n}\n}\nif (wrap) {\ncode.add(')');\n}\nbreak;\ncase MONITOR_ENTER:if (isFallback()) {\ncode.add(\"monitor-enter(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase MONITOR_EXIT:if (isFallback()) {\ncode.add(\"monitor-exit(\");\naddArg(code,insn.getArg(0));\ncode.add(')');\n}\nbreak;\ncase TERNARY:makeTernary((TernaryInsn)insn,code,state);\nbreak;\ncase ONE_ARG:addArg(code,insn.getArg(0));\nbreak;\ncase IF:fallbackOnlyInsn(insn);\nIfNode ifInsn=(IfNode)insn;\ncode.add(\"if (\");\naddArg(code,insn.getArg(0));\ncode.add(' ');\ncode.add(ifInsn.getOp().getSymbol()).add(' ');\naddArg(code,insn.getArg(1));\ncode.add(\") goto \").add(MethodGen.getLabelName(ifInsn.getTarget()));\nbreak;\ncase GOTO:fallbackOnlyInsn(insn);\ncode.add(\"goto \").add(MethodGen.getLabelName(((GotoNode)insn).getTarget()));\nbreak;\ncase MOVE_EXCEPTION:fallbackOnlyInsn(insn);\ncode.add(\"move-exception\");\nbreak;\ncase SWITCH:fallbackOnlyInsn(insn);\nSwitchNode sw=(SwitchNode)insn;\ncode.add(\"switch(\");\naddArg(code,insn.getArg(0));\ncode.add(\") {\");\ncode.incIndent();\nfor (int i=0; i < sw.getCasesCount(); i++) {\nString key=sw.getKeys()[i].toString();\ncode.startLine(\"case \").add(key).add(\": goto \");\ncode.add(MethodGen.getLabelName(sw.getTargets()[i])).add(';');\n}\ncode.startLine(\"default: goto \");\ncode.add(MethodGen.getLabelName(sw.getDefaultCaseOffset())).add(';');\ncode.decIndent();\ncode.startLine('}');\nbreak;\ncase FILL_ARRAY:fallbackOnlyInsn(insn);\nFillArrayNode arrayNode=(FillArrayNode)insn;\nObject data=arrayNode.getData();\nString arrStr;\nif (data instanceof int[]) {\narrStr=Arrays.toString((int[])data);\n}\n else if (data instanceof short[]) {\narrStr=Arrays.toString((short[])data);\n}\n else if (data instanceof byte[]) {\narrStr=Arrays.toString((byte[])data);\n}\n else if (data instanceof long[]) {\narrStr=Arrays.toString((long[])data);\n}\n else {\narrStr=\"?\";\n}\ncode.add('{').add(arrStr.substring(1,arrStr.length() - 1)).add('}');\nbreak;\ncase NEW_INSTANCE:fallbackOnlyInsn(insn);\ncode.add(\"new \").add(insn.getResult().getType().toString());\nbreak;\ncase PHI:case MERGE:fallbackOnlyInsn(insn);\ncode.add(insn.getType().toString()).add('(');\nfor (InsnArg insnArg : insn.getArguments()) {\naddArg(code,insnArg);\ncode.add(' ');\n}\ncode.add(')');\nbreak;\ndefault:throw new CodegenException(mth,\"Unknown instruction: \" + insn.getType());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1312,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 518,
        "startColumnNumber" : 4,
        "endLineNumber" : 518,
        "endColumnNumber" : 18
      },
      "nodeContext" : "code.add(')');\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "jadx.core.codegen.CodeWriter"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 237,
    "startColumnNumber" : 4,
    "endLineNumber" : 237,
    "endColumnNumber" : 8
  }, {
    "charLength" : 4,
    "startLineNumber" : 242,
    "startColumnNumber" : 12,
    "endLineNumber" : 242,
    "endColumnNumber" : 16
  }, {
    "charLength" : 4,
    "startLineNumber" : 243,
    "startColumnNumber" : 4,
    "endLineNumber" : 243,
    "endColumnNumber" : 8
  }, {
    "charLength" : 4,
    "startLineNumber" : 248,
    "startColumnNumber" : 4,
    "endLineNumber" : 248,
    "endColumnNumber" : 8
  }, {
    "charLength" : 4,
    "startLineNumber" : 252,
    "startColumnNumber" : 11,
    "endLineNumber" : 252,
    "endColumnNumber" : 15
  }, {
    "charLength" : 4,
    "startLineNumber" : 259,
    "startColumnNumber" : 5,
    "endLineNumber" : 259,
    "endColumnNumber" : 9
  }, {
    "charLength" : 4,
    "startLineNumber" : 261,
    "startColumnNumber" : 4,
    "endLineNumber" : 261,
    "endColumnNumber" : 8
  }, {
    "charLength" : 4,
    "startLineNumber" : 262,
    "startColumnNumber" : 12,
    "endLineNumber" : 262,
    "endColumnNumber" : 16
  }, {
    "charLength" : 4,
    "startLineNumber" : 263,
    "startColumnNumber" : 4,
    "endLineNumber" : 263,
    "endColumnNumber" : 8
  }, {
    "charLength" : 4,
    "startLineNumber" : 264,
    "startColumnNumber" : 11,
    "endLineNumber" : 264,
    "endColumnNumber" : 15
  }, {
    "charLength" : 4,
    "startLineNumber" : 266,
    "startColumnNumber" : 5,
    "endLineNumber" : 266,
    "endColumnNumber" : 9
  }, {
    "charLength" : 4,
    "startLineNumber" : 272,
    "startColumnNumber" : 32,
    "endLineNumber" : 272,
    "endColumnNumber" : 36
  }, {
    "charLength" : 4,
    "startLineNumber" : 276,
    "startColumnNumber" : 15,
    "endLineNumber" : 276,
    "endColumnNumber" : 19
  }, {
    "charLength" : 4,
    "startLineNumber" : 281,
    "startColumnNumber" : 15,
    "endLineNumber" : 281,
    "endColumnNumber" : 19
  }, {
    "charLength" : 4,
    "startLineNumber" : 286,
    "startColumnNumber" : 5,
    "endLineNumber" : 286,
    "endColumnNumber" : 9
  }, {
    "charLength" : 4,
    "startLineNumber" : 287,
    "startColumnNumber" : 12,
    "endLineNumber" : 287,
    "endColumnNumber" : 16
  }, {
    "charLength" : 4,
    "startLineNumber" : 289,
    "startColumnNumber" : 5,
    "endLineNumber" : 289,
    "endColumnNumber" : 9
  }, {
    "charLength" : 4,
    "startLineNumber" : 294,
    "startColumnNumber" : 4,
    "endLineNumber" : 294,
    "endColumnNumber" : 8
  }, {
    "charLength" : 4,
    "startLineNumber" : 297,
    "startColumnNumber" : 5,
    "endLineNumber" : 297,
    "endColumnNumber" : 9
  }, {
    "charLength" : 4,
    "startLineNumber" : 302,
    "startColumnNumber" : 4,
    "endLineNumber" : 302,
    "endColumnNumber" : 8
  }, {
    "charLength" : 4,
    "startLineNumber" : 306,
    "startColumnNumber" : 4,
    "endLineNumber" : 306,
    "endColumnNumber" : 8
  }, {
    "charLength" : 4,
    "startLineNumber" : 307,
    "startColumnNumber" : 11,
    "endLineNumber" : 307,
    "endColumnNumber" : 15
  }, {
    "charLength" : 4,
    "startLineNumber" : 312,
    "startColumnNumber" : 4,
    "endLineNumber" : 312,
    "endColumnNumber" : 8
  }, {
    "charLength" : 4,
    "startLineNumber" : 313,
    "startColumnNumber" : 11,
    "endLineNumber" : 313,
    "endColumnNumber" : 15
  }, {
    "charLength" : 4,
    "startLineNumber" : 314,
    "startColumnNumber" : 4,
    "endLineNumber" : 314,
    "endColumnNumber" : 8
  }, {
    "charLength" : 4,
    "startLineNumber" : 315,
    "startColumnNumber" : 11,
    "endLineNumber" : 315,
    "endColumnNumber" : 15
  }, {
    "charLength" : 4,
    "startLineNumber" : 316,
    "startColumnNumber" : 4,
    "endLineNumber" : 316,
    "endColumnNumber" : 8
  }, {
    "charLength" : 4,
    "startLineNumber" : 317,
    "startColumnNumber" : 11,
    "endLineNumber" : 317,
    "endColumnNumber" : 15
  }, {
    "charLength" : 4,
    "startLineNumber" : 318,
    "startColumnNumber" : 4,
    "endLineNumber" : 318,
    "endColumnNumber" : 8
  }, {
    "charLength" : 4,
    "startLineNumber" : 319,
    "startColumnNumber" : 11,
    "endLineNumber" : 319,
    "endColumnNumber" : 15
  }, {
    "charLength" : 4,
    "startLineNumber" : 320,
    "startColumnNumber" : 4,
    "endLineNumber" : 320,
    "endColumnNumber" : 8
  }, {
    "charLength" : 4,
    "startLineNumber" : 326,
    "startColumnNumber" : 5,
    "endLineNumber" : 326,
    "endColumnNumber" : 9
  }, {
    "charLength" : 4,
    "startLineNumber" : 328,
    "startColumnNumber" : 11,
    "endLineNumber" : 328,
    "endColumnNumber" : 15
  }, {
    "charLength" : 4,
    "startLineNumber" : 329,
    "startColumnNumber" : 4,
    "endLineNumber" : 329,
    "endColumnNumber" : 8
  }, {
    "charLength" : 4,
    "startLineNumber" : 330,
    "startColumnNumber" : 12,
    "endLineNumber" : 330,
    "endColumnNumber" : 16
  }, {
    "charLength" : 4,
    "startLineNumber" : 332,
    "startColumnNumber" : 5,
    "endLineNumber" : 332,
    "endColumnNumber" : 9
  }, {
    "charLength" : 4,
    "startLineNumber" : 337,
    "startColumnNumber" : 44,
    "endLineNumber" : 337,
    "endColumnNumber" : 48
  }, {
    "charLength" : 4,
    "startLineNumber" : 341,
    "startColumnNumber" : 34,
    "endLineNumber" : 341,
    "endColumnNumber" : 38
  }, {
    "charLength" : 4,
    "startLineNumber" : 346,
    "startColumnNumber" : 4,
    "endLineNumber" : 346,
    "endColumnNumber" : 8
  }, {
    "charLength" : 4,
    "startLineNumber" : 347,
    "startColumnNumber" : 12,
    "endLineNumber" : 347,
    "endColumnNumber" : 16
  }, {
    "charLength" : 4,
    "startLineNumber" : 348,
    "startColumnNumber" : 4,
    "endLineNumber" : 348,
    "endColumnNumber" : 8
  }, {
    "charLength" : 4,
    "startLineNumber" : 349,
    "startColumnNumber" : 11,
    "endLineNumber" : 349,
    "endColumnNumber" : 15
  }, {
    "charLength" : 4,
    "startLineNumber" : 350,
    "startColumnNumber" : 4,
    "endLineNumber" : 350,
    "endColumnNumber" : 8
  }, {
    "charLength" : 4,
    "startLineNumber" : 353,
    "startColumnNumber" : 5,
    "endLineNumber" : 353,
    "endColumnNumber" : 9
  }, {
    "charLength" : 4,
    "startLineNumber" : 359,
    "startColumnNumber" : 11,
    "endLineNumber" : 359,
    "endColumnNumber" : 15
  }, {
    "charLength" : 4,
    "startLineNumber" : 360,
    "startColumnNumber" : 4,
    "endLineNumber" : 360,
    "endColumnNumber" : 8
  }, {
    "charLength" : 4,
    "startLineNumber" : 364,
    "startColumnNumber" : 46,
    "endLineNumber" : 364,
    "endColumnNumber" : 50
  }, {
    "charLength" : 4,
    "startLineNumber" : 368,
    "startColumnNumber" : 11,
    "endLineNumber" : 368,
    "endColumnNumber" : 15
  }, {
    "charLength" : 4,
    "startLineNumber" : 369,
    "startColumnNumber" : 4,
    "endLineNumber" : 369,
    "endColumnNumber" : 8
  }, {
    "charLength" : 4,
    "startLineNumber" : 370,
    "startColumnNumber" : 11,
    "endLineNumber" : 370,
    "endColumnNumber" : 15
  }, {
    "charLength" : 4,
    "startLineNumber" : 371,
    "startColumnNumber" : 4,
    "endLineNumber" : 371,
    "endColumnNumber" : 8
  }, {
    "charLength" : 4,
    "startLineNumber" : 375,
    "startColumnNumber" : 11,
    "endLineNumber" : 375,
    "endColumnNumber" : 15
  }, {
    "charLength" : 4,
    "startLineNumber" : 376,
    "startColumnNumber" : 4,
    "endLineNumber" : 376,
    "endColumnNumber" : 8
  }, {
    "charLength" : 4,
    "startLineNumber" : 377,
    "startColumnNumber" : 11,
    "endLineNumber" : 377,
    "endColumnNumber" : 15
  }, {
    "charLength" : 4,
    "startLineNumber" : 378,
    "startColumnNumber" : 4,
    "endLineNumber" : 378,
    "endColumnNumber" : 8
  }, {
    "charLength" : 4,
    "startLineNumber" : 379,
    "startColumnNumber" : 11,
    "endLineNumber" : 379,
    "endColumnNumber" : 15
  }, {
    "charLength" : 4,
    "startLineNumber" : 384,
    "startColumnNumber" : 18,
    "endLineNumber" : 384,
    "endColumnNumber" : 22
  }, {
    "charLength" : 4,
    "startLineNumber" : 389,
    "startColumnNumber" : 18,
    "endLineNumber" : 389,
    "endColumnNumber" : 22
  }, {
    "charLength" : 4,
    "startLineNumber" : 390,
    "startColumnNumber" : 4,
    "endLineNumber" : 390,
    "endColumnNumber" : 8
  }, {
    "charLength" : 4,
    "startLineNumber" : 391,
    "startColumnNumber" : 11,
    "endLineNumber" : 391,
    "endColumnNumber" : 15
  }, {
    "charLength" : 4,
    "startLineNumber" : 396,
    "startColumnNumber" : 16,
    "endLineNumber" : 396,
    "endColumnNumber" : 20
  }, {
    "charLength" : 4,
    "startLineNumber" : 400,
    "startColumnNumber" : 16,
    "endLineNumber" : 400,
    "endColumnNumber" : 20
  }, {
    "charLength" : 4,
    "startLineNumber" : 401,
    "startColumnNumber" : 4,
    "endLineNumber" : 401,
    "endColumnNumber" : 8
  }, {
    "charLength" : 4,
    "startLineNumber" : 402,
    "startColumnNumber" : 11,
    "endLineNumber" : 402,
    "endColumnNumber" : 15
  }, {
    "charLength" : 4,
    "startLineNumber" : 408,
    "startColumnNumber" : 5,
    "endLineNumber" : 408,
    "endColumnNumber" : 9
  }, {
    "charLength" : 4,
    "startLineNumber" : 411,
    "startColumnNumber" : 12,
    "endLineNumber" : 411,
    "endColumnNumber" : 16
  }, {
    "charLength" : 4,
    "startLineNumber" : 413,
    "startColumnNumber" : 6,
    "endLineNumber" : 413,
    "endColumnNumber" : 10
  }, {
    "charLength" : 4,
    "startLineNumber" : 417,
    "startColumnNumber" : 5,
    "endLineNumber" : 417,
    "endColumnNumber" : 9
  }, {
    "charLength" : 4,
    "startLineNumber" : 423,
    "startColumnNumber" : 5,
    "endLineNumber" : 423,
    "endColumnNumber" : 9
  }, {
    "charLength" : 4,
    "startLineNumber" : 424,
    "startColumnNumber" : 12,
    "endLineNumber" : 424,
    "endColumnNumber" : 16
  }, {
    "charLength" : 4,
    "startLineNumber" : 425,
    "startColumnNumber" : 5,
    "endLineNumber" : 425,
    "endColumnNumber" : 9
  }, {
    "charLength" : 4,
    "startLineNumber" : 431,
    "startColumnNumber" : 5,
    "endLineNumber" : 431,
    "endColumnNumber" : 9
  }, {
    "charLength" : 4,
    "startLineNumber" : 432,
    "startColumnNumber" : 12,
    "endLineNumber" : 432,
    "endColumnNumber" : 16
  }, {
    "charLength" : 4,
    "startLineNumber" : 433,
    "startColumnNumber" : 5,
    "endLineNumber" : 433,
    "endColumnNumber" : 9
  }, {
    "charLength" : 4,
    "startLineNumber" : 438,
    "startColumnNumber" : 36,
    "endLineNumber" : 438,
    "endColumnNumber" : 40
  }, {
    "charLength" : 4,
    "startLineNumber" : 442,
    "startColumnNumber" : 11,
    "endLineNumber" : 442,
    "endColumnNumber" : 15
  }, {
    "charLength" : 4,
    "startLineNumber" : 449,
    "startColumnNumber" : 4,
    "endLineNumber" : 449,
    "endColumnNumber" : 8
  }, {
    "charLength" : 4,
    "startLineNumber" : 450,
    "startColumnNumber" : 11,
    "endLineNumber" : 450,
    "endColumnNumber" : 15
  }, {
    "charLength" : 4,
    "startLineNumber" : 451,
    "startColumnNumber" : 4,
    "endLineNumber" : 451,
    "endColumnNumber" : 8
  }, {
    "charLength" : 4,
    "startLineNumber" : 452,
    "startColumnNumber" : 4,
    "endLineNumber" : 452,
    "endColumnNumber" : 8
  }, {
    "charLength" : 4,
    "startLineNumber" : 453,
    "startColumnNumber" : 11,
    "endLineNumber" : 453,
    "endColumnNumber" : 15
  }, {
    "charLength" : 4,
    "startLineNumber" : 454,
    "startColumnNumber" : 4,
    "endLineNumber" : 454,
    "endColumnNumber" : 8
  }, {
    "charLength" : 4,
    "startLineNumber" : 459,
    "startColumnNumber" : 4,
    "endLineNumber" : 459,
    "endColumnNumber" : 8
  }, {
    "charLength" : 4,
    "startLineNumber" : 464,
    "startColumnNumber" : 4,
    "endLineNumber" : 464,
    "endColumnNumber" : 8
  }, {
    "charLength" : 4,
    "startLineNumber" : 470,
    "startColumnNumber" : 4,
    "endLineNumber" : 470,
    "endColumnNumber" : 8
  }, {
    "charLength" : 4,
    "startLineNumber" : 471,
    "startColumnNumber" : 11,
    "endLineNumber" : 471,
    "endColumnNumber" : 15
  }, {
    "charLength" : 4,
    "startLineNumber" : 472,
    "startColumnNumber" : 4,
    "endLineNumber" : 472,
    "endColumnNumber" : 8
  }, {
    "charLength" : 4,
    "startLineNumber" : 473,
    "startColumnNumber" : 4,
    "endLineNumber" : 473,
    "endColumnNumber" : 8
  }, {
    "charLength" : 4,
    "startLineNumber" : 476,
    "startColumnNumber" : 5,
    "endLineNumber" : 476,
    "endColumnNumber" : 9
  }, {
    "charLength" : 4,
    "startLineNumber" : 477,
    "startColumnNumber" : 5,
    "endLineNumber" : 477,
    "endColumnNumber" : 9
  }, {
    "charLength" : 4,
    "startLineNumber" : 479,
    "startColumnNumber" : 4,
    "endLineNumber" : 479,
    "endColumnNumber" : 8
  }, {
    "charLength" : 4,
    "startLineNumber" : 480,
    "startColumnNumber" : 4,
    "endLineNumber" : 480,
    "endColumnNumber" : 8
  }, {
    "charLength" : 4,
    "startLineNumber" : 481,
    "startColumnNumber" : 4,
    "endLineNumber" : 481,
    "endColumnNumber" : 8
  }, {
    "charLength" : 4,
    "startLineNumber" : 482,
    "startColumnNumber" : 4,
    "endLineNumber" : 482,
    "endColumnNumber" : 8
  }, {
    "charLength" : 4,
    "startLineNumber" : 501,
    "startColumnNumber" : 4,
    "endLineNumber" : 501,
    "endColumnNumber" : 8
  }, {
    "charLength" : 4,
    "startLineNumber" : 507,
    "startColumnNumber" : 4,
    "endLineNumber" : 507,
    "endColumnNumber" : 8
  }, {
    "charLength" : 4,
    "startLineNumber" : 513,
    "startColumnNumber" : 4,
    "endLineNumber" : 513,
    "endColumnNumber" : 8
  }, {
    "charLength" : 4,
    "startLineNumber" : 515,
    "startColumnNumber" : 12,
    "endLineNumber" : 515,
    "endColumnNumber" : 16
  }, {
    "charLength" : 4,
    "startLineNumber" : 516,
    "startColumnNumber" : 5,
    "endLineNumber" : 516,
    "endColumnNumber" : 9
  }, {
    "charLength" : 4,
    "startLineNumber" : 518,
    "startColumnNumber" : 4,
    "endLineNumber" : 518,
    "endColumnNumber" : 8
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 31,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 32,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 33,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 34,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 35,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 36,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 37,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 38,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 39,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 40,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 41,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 42,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 43,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 44,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 45,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 46,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 47,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 48,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 49,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 50,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 51,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 52,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 53,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 54,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 55,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 56,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 57,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 58,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 59,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 60,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 61,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 62,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 63,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 64,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 65,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 66,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 67,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 68,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 69,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 70,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 71,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 72,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 73,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 74,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 75,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 76,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 77,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 78,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 79,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 80,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 81,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 82,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 83,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 84,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 85,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 86,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 87,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 88,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 89,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 90,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 91,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 92,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 93,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 94,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 95,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 96,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 97,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 98,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 99,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 31,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 32,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 33,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 34,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 35,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 36,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 37,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 38,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 39,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 40,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 41,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 42,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 43,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 44,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 45,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 46,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 47,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 48,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 49,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 50,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 51,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 52,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 53,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 54,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 55,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 56,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 57,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 58,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 59,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 60,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 61,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 62,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 63,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 64,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 65,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 66,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 67,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 68,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 69,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 70,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 71,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 72,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 73,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 74,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 75,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 76,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 77,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 78,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 79,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 80,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 81,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 82,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 83,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 84,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 85,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 86,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 87,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 88,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 89,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 90,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 91,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 92,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 93,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 94,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 95,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 96,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 97,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 98,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 99,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 31,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 32,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 33,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 34,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 35,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 36,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 37,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 38,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 39,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 40,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 41,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 42,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 43,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 44,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 45,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 46,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 47,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 48,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 49,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 50,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 51,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 52,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 53,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 54,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 55,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 56,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 57,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 58,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 59,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 60,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 61,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 62,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 63,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 64,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 65,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 66,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 67,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 68,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 69,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 70,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 71,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 72,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 73,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 74,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 75,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 76,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 77,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 78,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 79,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 80,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 81,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 82,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 83,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 84,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 85,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 86,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 87,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 88,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 89,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 90,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 91,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 92,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 93,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 94,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 95,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 96,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 97,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 98,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 99,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 31,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 32,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 33,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 34,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 35,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 36,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 37,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 38,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 39,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 40,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 41,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 42,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 43,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 44,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 45,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 46,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 47,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 48,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 49,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 50,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 51,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 52,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 53,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 54,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 55,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 56,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 57,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 58,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 59,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 60,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 61,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 62,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 63,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 64,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 65,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 66,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 67,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 68,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 69,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 70,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 71,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 72,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 73,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 74,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 75,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 76,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 77,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 78,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 79,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 80,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 81,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 82,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 83,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 84,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 85,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 86,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 87,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 88,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 89,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 90,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 91,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 92,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 93,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 94,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 95,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 96,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 97,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 98,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 99,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 31,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 32,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 33,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 34,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 35,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 36,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 37,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 38,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 39,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 40,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 41,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 42,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 43,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 44,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 45,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 46,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 47,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 48,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 49,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 50,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 51,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 52,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 53,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 54,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 55,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 56,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 57,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 58,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 59,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 60,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 61,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 62,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 63,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 64,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 65,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 66,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 67,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 68,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 69,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 70,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 71,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 72,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 73,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 74,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 75,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 76,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 77,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 78,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 79,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 80,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 81,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 82,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 83,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 84,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 85,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 86,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 87,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 88,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 89,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 90,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 91,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 92,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 93,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 94,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 95,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 96,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 97,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 98,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 99,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 17,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 18,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 19,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 20,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 21,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 22,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 23,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 24,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 25,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 26,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 27,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 28,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 29,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 30,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 31,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 32,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 33,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 34,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 35,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 36,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 37,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 38,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 39,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 40,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 41,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 42,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 43,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 44,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 45,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 46,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 47,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 48,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 49,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 50,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 51,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 52,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 53,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 54,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 55,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 56,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 57,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 58,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 59,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 60,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 61,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 62,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 63,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 64,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 65,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 66,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 67,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 68,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 69,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 70,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 71,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 72,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 73,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 74,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 75,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 76,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 77,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 78,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 79,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 80,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 81,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 82,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 83,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 84,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 85,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 86,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 87,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 88,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 89,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 90,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 91,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 92,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 93,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 94,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 95,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 96,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 97,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 98,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 99,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 23,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 24,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 25,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 26,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 27,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 28,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 29,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 30,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 31,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 32,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 33,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 34,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 35,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 36,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 37,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 38,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 39,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 40,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 41,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 42,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 43,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 44,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 45,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 46,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 47,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 48,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 49,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 50,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 51,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 52,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 53,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 54,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 55,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 56,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 57,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 58,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 59,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 60,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 61,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 62,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 63,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 64,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 65,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 66,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 67,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 68,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 69,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 70,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 71,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 72,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 73,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 74,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 75,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 76,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 77,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 78,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 79,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 80,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 81,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 82,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 83,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 84,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 85,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 86,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 87,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 88,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 89,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 90,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 91,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 92,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 93,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 94,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 95,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 96,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 97,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 98,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 99,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 23,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 24,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 25,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 26,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 27,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 28,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 29,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 30,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 31,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 32,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 33,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 34,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 35,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 36,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 37,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 38,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 39,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 40,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 41,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 42,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 43,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 44,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 45,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 46,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 47,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 48,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 49,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 50,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 51,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 52,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 53,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 54,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 55,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 56,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 57,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 58,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 59,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 60,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 61,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 62,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 63,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 64,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 65,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 66,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 67,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 68,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 69,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 70,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 71,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 72,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 73,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 74,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 75,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 76,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 77,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 78,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 79,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 80,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 81,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 82,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 83,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 84,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 85,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 86,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 87,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 88,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 89,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 90,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 91,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 92,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 93,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 94,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 95,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 96,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 97,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 98,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 99,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 23,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 24,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 25,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 26,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 27,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 28,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 29,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 30,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 31,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 32,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 33,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 34,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 35,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 36,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 37,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 38,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 39,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 40,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 41,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 42,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 43,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 44,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 45,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 46,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 47,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 48,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 49,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 50,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 51,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 52,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 53,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 54,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 55,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 56,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 57,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 58,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 59,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 60,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 61,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 62,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 63,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 64,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 65,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 66,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 67,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 68,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 69,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 70,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 71,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 72,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 73,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 74,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 75,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 76,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 77,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 78,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 79,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 80,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 81,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 82,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 83,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 84,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 85,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 86,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 87,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 88,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 89,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 90,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 91,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 92,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 93,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 94,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 95,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 96,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 97,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 98,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 99,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 23,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 24,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 25,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 26,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 27,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 28,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 29,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 30,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 31,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 32,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 33,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 34,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 35,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 36,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 37,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 38,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 39,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 40,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 41,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 42,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 43,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 44,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 45,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 46,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 47,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 48,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 49,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 50,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 51,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 52,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 53,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 54,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 55,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 56,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 57,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 58,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 59,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 60,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 61,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 62,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 63,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 64,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 65,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 66,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 67,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 68,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 69,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 70,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 71,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 72,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 73,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 74,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 75,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 76,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 77,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 78,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 79,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 80,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 81,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 82,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 83,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 84,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 85,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 86,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 87,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 88,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 89,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 90,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 91,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 92,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 93,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 94,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 95,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 96,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 97,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 98,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 99,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 17,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 18,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 19,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 20,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 21,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 22,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 23,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 24,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 25,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 26,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 27,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 28,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 29,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 30,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 31,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 32,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 33,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 34,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 35,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 36,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 37,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 38,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 39,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 40,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 41,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 42,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 43,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 44,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 45,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 46,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 47,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 48,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 49,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 50,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 51,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 52,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 53,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 54,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 55,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 56,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 57,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 58,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 59,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 60,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 61,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 62,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 63,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 64,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 65,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 66,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 67,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 68,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 69,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 70,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 71,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 72,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 73,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 74,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 75,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 76,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 77,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 78,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 79,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 80,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 81,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 82,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 83,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 84,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 85,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 86,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 87,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 88,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 89,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 90,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 91,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 92,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 93,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 94,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 95,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 96,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 97,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 98,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 99,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 31,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 32,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 33,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 34,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 35,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 36,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 37,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 38,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 39,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 40,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 41,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 42,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 43,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 44,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 45,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 46,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 47,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 48,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 49,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 50,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 51,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 52,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 53,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 54,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 55,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 56,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 57,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 58,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 59,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 60,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 61,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 62,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 63,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 64,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 65,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 66,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 67,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 68,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 69,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 70,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 71,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 72,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 73,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 74,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 75,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 76,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 77,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 78,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 79,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 80,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 81,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 82,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 83,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 84,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 85,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 86,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 87,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 88,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 89,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 90,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 91,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 92,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 93,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 94,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 95,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 96,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 97,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 98,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 99,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 31,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 32,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 33,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 34,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 35,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 36,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 37,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 38,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 39,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 40,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 41,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 42,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 43,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 44,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 45,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 46,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 47,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 48,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 49,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 50,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 51,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 52,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 53,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 54,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 55,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 56,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 57,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 58,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 59,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 60,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 61,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 62,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 63,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 64,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 65,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 66,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 67,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 68,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 69,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 70,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 71,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 72,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 73,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 74,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 75,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 76,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 77,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 78,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 79,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 80,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 81,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 82,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 83,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 84,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 85,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 86,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 87,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 88,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 89,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 90,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 91,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 92,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 93,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 94,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 95,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 96,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 97,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 98,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 99,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 31,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 32,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 33,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 34,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 35,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 36,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 37,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 38,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 39,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 40,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 41,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 42,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 43,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 44,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 45,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 46,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 47,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 48,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 49,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 50,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 51,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 52,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 53,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 54,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 55,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 56,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 57,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 58,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 59,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 60,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 61,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 62,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 63,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 64,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 65,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 66,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 67,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 68,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 69,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 70,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 71,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 72,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 73,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 74,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 75,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 76,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 77,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 78,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 79,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 80,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 81,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 82,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 83,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 84,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 85,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 86,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 87,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 88,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 89,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 90,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 91,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 92,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 93,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 94,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 95,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 96,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 97,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 98,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 99,
    "layout" : 2
  }, {
    "firstKey" : 14,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 14,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 30,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 31,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 32,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 33,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 34,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 35,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 36,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 37,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 38,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 39,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 40,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 41,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 42,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 43,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 44,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 45,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 46,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 47,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 48,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 49,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 50,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 51,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 52,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 53,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 54,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 55,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 56,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 57,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 58,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 59,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 60,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 61,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 62,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 63,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 64,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 65,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 66,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 67,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 68,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 69,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 70,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 71,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 72,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 73,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 74,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 75,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 76,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 77,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 78,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 79,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 80,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 81,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 82,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 83,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 84,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 85,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 86,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 87,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 88,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 89,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 90,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 91,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 92,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 93,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 94,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 95,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 96,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 97,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 98,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 99,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 30,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 31,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 32,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 33,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 34,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 35,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 36,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 37,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 38,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 39,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 40,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 41,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 42,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 43,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 44,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 45,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 46,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 47,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 48,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 49,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 50,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 51,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 52,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 53,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 54,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 55,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 56,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 57,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 58,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 59,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 60,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 61,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 62,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 63,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 64,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 65,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 66,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 67,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 68,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 69,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 70,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 71,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 72,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 73,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 74,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 75,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 76,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 77,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 78,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 79,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 80,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 81,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 82,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 83,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 84,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 85,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 86,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 87,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 88,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 89,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 90,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 91,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 92,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 93,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 94,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 95,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 96,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 97,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 98,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 99,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 30,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 31,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 32,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 33,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 34,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 35,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 36,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 37,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 38,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 39,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 40,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 41,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 42,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 43,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 44,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 45,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 46,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 47,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 48,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 49,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 50,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 51,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 52,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 53,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 54,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 55,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 56,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 57,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 58,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 59,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 60,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 61,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 62,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 63,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 64,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 65,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 66,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 67,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 68,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 69,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 70,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 71,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 72,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 73,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 74,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 75,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 76,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 77,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 78,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 79,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 80,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 81,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 82,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 83,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 84,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 85,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 86,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 87,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 88,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 89,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 90,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 91,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 92,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 93,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 94,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 95,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 96,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 97,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 98,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 99,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 31,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 32,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 33,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 34,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 35,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 36,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 37,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 38,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 39,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 40,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 41,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 42,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 43,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 44,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 45,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 46,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 47,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 48,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 49,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 50,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 51,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 52,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 53,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 54,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 55,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 56,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 57,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 58,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 59,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 60,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 61,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 62,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 63,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 64,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 65,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 66,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 67,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 68,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 69,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 70,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 71,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 72,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 73,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 74,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 75,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 76,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 77,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 78,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 79,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 80,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 81,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 82,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 83,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 84,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 85,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 86,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 87,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 88,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 89,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 90,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 91,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 92,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 93,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 94,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 95,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 96,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 97,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 98,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 99,
    "layout" : 2
  }, {
    "firstKey" : 18,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 17,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 19,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 20,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 21,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 22,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 23,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 24,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 25,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 26,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 27,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 28,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 29,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 30,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 31,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 32,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 33,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 34,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 35,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 36,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 37,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 38,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 39,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 40,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 41,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 42,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 43,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 44,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 45,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 46,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 47,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 48,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 49,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 50,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 51,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 52,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 53,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 54,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 55,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 56,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 57,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 58,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 59,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 60,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 61,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 62,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 63,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 64,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 65,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 66,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 67,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 68,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 69,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 70,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 71,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 72,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 73,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 74,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 75,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 76,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 77,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 78,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 79,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 80,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 81,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 82,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 83,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 84,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 85,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 86,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 87,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 88,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 89,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 90,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 91,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 92,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 93,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 94,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 95,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 96,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 97,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 98,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 99,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 31,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 32,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 33,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 34,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 35,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 36,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 37,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 38,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 39,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 40,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 41,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 42,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 43,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 44,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 45,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 46,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 47,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 48,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 49,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 50,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 51,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 52,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 53,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 54,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 55,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 56,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 57,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 58,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 59,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 60,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 61,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 62,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 63,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 64,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 65,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 66,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 67,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 68,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 69,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 70,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 71,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 72,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 73,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 74,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 75,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 76,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 77,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 78,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 79,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 80,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 81,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 82,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 83,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 84,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 85,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 86,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 87,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 88,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 89,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 90,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 91,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 92,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 93,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 94,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 95,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 96,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 97,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 98,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 99,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 31,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 32,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 33,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 34,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 35,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 36,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 37,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 38,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 39,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 40,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 41,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 42,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 43,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 44,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 45,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 46,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 47,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 48,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 49,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 50,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 51,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 52,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 53,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 54,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 55,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 56,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 57,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 58,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 59,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 60,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 61,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 62,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 63,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 64,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 65,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 66,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 67,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 68,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 69,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 70,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 71,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 72,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 73,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 74,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 75,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 76,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 77,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 78,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 79,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 80,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 81,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 82,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 83,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 84,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 85,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 86,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 87,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 88,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 89,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 90,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 91,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 92,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 93,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 94,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 95,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 96,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 97,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 98,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 99,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 31,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 32,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 33,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 34,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 35,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 36,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 37,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 38,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 39,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 40,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 41,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 42,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 43,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 44,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 45,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 46,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 47,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 48,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 49,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 50,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 51,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 52,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 53,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 54,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 55,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 56,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 57,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 58,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 59,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 60,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 61,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 62,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 63,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 64,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 65,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 66,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 67,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 68,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 69,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 70,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 71,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 72,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 73,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 74,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 75,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 76,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 77,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 78,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 79,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 80,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 81,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 82,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 83,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 84,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 85,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 86,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 87,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 88,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 89,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 90,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 91,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 92,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 93,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 94,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 95,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 96,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 97,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 98,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 99,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 31,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 32,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 33,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 34,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 35,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 36,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 37,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 38,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 39,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 40,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 41,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 42,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 43,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 44,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 45,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 46,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 47,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 48,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 49,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 50,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 51,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 52,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 53,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 54,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 55,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 56,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 57,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 58,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 59,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 60,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 61,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 62,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 63,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 64,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 65,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 66,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 67,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 68,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 69,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 70,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 71,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 72,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 73,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 74,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 75,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 76,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 77,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 78,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 79,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 80,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 81,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 82,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 83,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 84,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 85,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 86,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 87,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 88,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 89,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 90,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 91,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 92,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 93,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 94,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 95,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 96,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 97,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 98,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 99,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 31,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 32,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 33,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 34,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 35,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 36,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 37,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 38,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 39,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 40,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 41,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 42,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 43,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 44,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 45,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 46,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 47,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 48,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 49,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 50,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 51,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 52,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 53,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 54,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 55,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 56,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 57,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 58,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 59,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 60,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 61,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 62,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 63,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 64,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 65,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 66,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 67,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 68,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 69,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 70,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 71,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 72,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 73,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 74,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 75,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 76,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 77,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 78,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 79,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 80,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 81,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 82,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 83,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 84,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 85,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 86,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 87,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 88,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 89,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 90,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 91,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 92,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 93,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 94,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 95,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 96,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 97,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 98,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 99,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 31,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 32,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 33,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 34,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 35,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 36,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 37,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 38,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 39,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 40,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 41,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 42,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 43,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 44,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 45,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 46,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 47,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 48,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 49,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 50,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 51,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 52,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 53,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 54,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 55,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 56,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 57,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 58,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 59,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 60,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 61,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 62,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 63,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 64,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 65,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 66,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 67,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 68,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 69,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 70,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 71,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 72,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 73,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 74,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 75,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 76,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 77,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 78,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 79,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 80,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 81,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 82,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 83,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 84,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 85,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 86,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 87,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 88,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 89,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 90,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 91,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 92,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 93,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 94,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 95,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 96,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 97,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 98,
    "layout" : 2
  }, {
    "firstKey" : 24,
    "secondKey" : 99,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 31,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 32,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 33,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 34,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 35,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 36,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 37,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 38,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 39,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 40,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 41,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 42,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 43,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 44,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 45,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 46,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 47,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 48,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 49,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 50,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 51,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 52,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 53,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 54,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 55,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 56,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 57,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 58,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 59,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 60,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 61,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 62,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 63,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 64,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 65,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 66,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 67,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 68,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 69,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 70,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 71,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 72,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 73,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 74,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 75,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 76,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 77,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 78,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 79,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 80,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 81,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 82,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 83,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 84,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 85,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 86,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 87,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 88,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 89,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 90,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 91,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 92,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 93,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 94,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 95,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 96,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 97,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 98,
    "layout" : 2
  }, {
    "firstKey" : 25,
    "secondKey" : 99,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 31,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 32,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 33,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 34,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 35,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 36,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 37,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 38,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 39,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 40,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 41,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 42,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 43,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 44,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 45,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 46,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 47,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 48,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 49,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 50,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 51,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 52,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 53,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 54,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 55,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 56,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 57,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 58,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 59,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 60,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 61,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 62,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 63,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 64,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 65,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 66,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 67,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 68,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 69,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 70,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 71,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 72,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 73,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 74,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 75,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 76,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 77,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 78,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 79,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 80,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 81,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 82,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 83,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 84,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 85,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 86,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 87,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 88,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 89,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 90,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 91,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 92,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 93,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 94,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 95,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 96,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 97,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 98,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 99,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 31,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 32,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 33,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 34,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 35,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 36,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 37,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 38,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 39,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 40,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 41,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 42,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 43,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 44,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 45,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 46,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 47,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 48,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 49,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 50,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 51,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 52,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 53,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 54,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 55,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 56,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 57,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 58,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 59,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 60,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 61,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 62,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 63,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 64,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 65,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 66,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 67,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 68,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 69,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 70,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 71,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 72,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 73,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 74,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 75,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 76,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 77,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 78,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 79,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 80,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 81,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 82,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 83,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 84,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 85,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 86,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 87,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 88,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 89,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 90,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 91,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 92,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 93,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 94,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 95,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 96,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 97,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 98,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 99,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 31,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 32,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 33,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 34,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 35,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 36,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 37,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 38,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 39,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 40,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 41,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 42,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 43,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 44,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 45,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 46,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 47,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 48,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 49,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 50,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 51,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 52,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 53,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 54,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 55,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 56,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 57,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 58,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 59,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 60,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 61,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 62,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 63,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 64,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 65,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 66,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 67,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 68,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 69,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 70,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 71,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 72,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 73,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 74,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 75,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 76,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 77,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 78,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 79,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 80,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 81,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 82,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 83,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 84,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 85,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 86,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 87,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 88,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 89,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 90,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 91,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 92,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 93,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 94,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 95,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 96,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 97,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 98,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 99,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 31,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 32,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 33,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 34,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 35,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 36,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 37,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 38,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 39,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 40,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 41,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 42,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 43,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 44,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 45,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 46,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 47,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 48,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 49,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 50,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 51,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 52,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 53,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 54,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 55,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 56,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 57,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 58,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 59,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 60,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 61,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 62,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 63,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 64,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 65,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 66,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 67,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 68,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 69,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 70,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 71,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 72,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 73,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 74,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 75,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 76,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 77,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 78,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 79,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 80,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 81,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 82,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 83,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 84,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 85,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 86,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 87,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 88,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 89,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 90,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 91,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 92,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 93,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 94,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 95,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 96,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 97,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 98,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 99,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 31,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 32,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 33,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 34,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 35,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 36,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 37,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 38,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 39,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 40,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 41,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 42,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 43,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 44,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 45,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 46,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 47,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 48,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 49,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 50,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 51,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 52,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 53,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 54,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 55,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 56,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 57,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 58,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 59,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 60,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 61,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 62,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 63,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 64,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 65,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 66,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 67,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 68,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 69,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 70,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 71,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 72,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 73,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 74,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 75,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 76,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 77,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 78,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 79,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 80,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 81,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 82,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 83,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 84,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 85,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 86,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 87,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 88,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 89,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 90,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 91,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 92,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 93,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 94,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 95,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 96,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 97,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 98,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 99,
    "layout" : 2
  }, {
    "firstKey" : 31,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 17,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 18,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 19,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 20,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 21,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 22,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 23,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 24,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 25,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 26,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 27,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 28,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 29,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 30,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 32,
    "layout" : 4
  }, {
    "firstKey" : 31,
    "secondKey" : 33,
    "layout" : 4
  }, {
    "firstKey" : 31,
    "secondKey" : 34,
    "layout" : 4
  }, {
    "firstKey" : 31,
    "secondKey" : 35,
    "layout" : 4
  }, {
    "firstKey" : 31,
    "secondKey" : 36,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 37,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 38,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 39,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 40,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 41,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 42,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 43,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 44,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 45,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 46,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 47,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 48,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 49,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 50,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 51,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 52,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 53,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 54,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 55,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 56,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 57,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 58,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 59,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 60,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 61,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 62,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 63,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 64,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 65,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 66,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 67,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 68,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 69,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 70,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 71,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 72,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 73,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 74,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 75,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 76,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 77,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 78,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 79,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 80,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 81,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 82,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 83,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 84,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 85,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 86,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 87,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 88,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 89,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 90,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 91,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 92,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 93,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 94,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 95,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 96,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 97,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 98,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 99,
    "layout" : 5
  }, {
    "firstKey" : 32,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 23,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 24,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 25,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 26,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 27,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 28,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 29,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 30,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 31,
    "layout" : 2
  }, {
    "firstKey" : 32,
    "secondKey" : 33,
    "layout" : 2
  }, {
    "firstKey" : 32,
    "secondKey" : 34,
    "layout" : 2
  }, {
    "firstKey" : 32,
    "secondKey" : 35,
    "layout" : 2
  }, {
    "firstKey" : 32,
    "secondKey" : 36,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 37,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 38,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 39,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 40,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 41,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 42,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 43,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 44,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 45,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 46,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 47,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 48,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 49,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 50,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 51,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 52,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 53,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 54,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 55,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 56,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 57,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 58,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 59,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 60,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 61,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 62,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 63,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 64,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 65,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 66,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 67,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 68,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 69,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 70,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 71,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 72,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 73,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 74,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 75,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 76,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 77,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 78,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 79,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 80,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 81,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 82,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 83,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 84,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 85,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 86,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 87,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 88,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 89,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 90,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 91,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 92,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 93,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 94,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 95,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 96,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 97,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 98,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 99,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 23,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 24,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 25,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 26,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 27,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 28,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 29,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 30,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 31,
    "layout" : 2
  }, {
    "firstKey" : 33,
    "secondKey" : 32,
    "layout" : 2
  }, {
    "firstKey" : 33,
    "secondKey" : 34,
    "layout" : 2
  }, {
    "firstKey" : 33,
    "secondKey" : 35,
    "layout" : 2
  }, {
    "firstKey" : 33,
    "secondKey" : 36,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 37,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 38,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 39,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 40,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 41,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 42,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 43,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 44,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 45,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 46,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 47,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 48,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 49,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 50,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 51,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 52,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 53,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 54,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 55,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 56,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 57,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 58,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 59,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 60,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 61,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 62,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 63,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 64,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 65,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 66,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 67,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 68,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 69,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 70,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 71,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 72,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 73,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 74,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 75,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 76,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 77,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 78,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 79,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 80,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 81,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 82,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 83,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 84,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 85,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 86,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 87,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 88,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 89,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 90,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 91,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 92,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 93,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 94,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 95,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 96,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 97,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 98,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 99,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 23,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 24,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 25,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 26,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 27,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 28,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 29,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 30,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 31,
    "layout" : 2
  }, {
    "firstKey" : 34,
    "secondKey" : 32,
    "layout" : 2
  }, {
    "firstKey" : 34,
    "secondKey" : 33,
    "layout" : 2
  }, {
    "firstKey" : 34,
    "secondKey" : 35,
    "layout" : 2
  }, {
    "firstKey" : 34,
    "secondKey" : 36,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 37,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 38,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 39,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 40,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 41,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 42,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 43,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 44,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 45,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 46,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 47,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 48,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 49,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 50,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 51,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 52,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 53,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 54,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 55,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 56,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 57,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 58,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 59,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 60,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 61,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 62,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 63,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 64,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 65,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 66,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 67,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 68,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 69,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 70,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 71,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 72,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 73,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 74,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 75,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 76,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 77,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 78,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 79,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 80,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 81,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 82,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 83,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 84,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 85,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 86,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 87,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 88,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 89,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 90,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 91,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 92,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 93,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 94,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 95,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 96,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 97,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 98,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 99,
    "layout" : 3
  }, {
    "firstKey" : 35,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 17,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 18,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 19,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 20,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 21,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 22,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 23,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 24,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 25,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 26,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 27,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 28,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 29,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 30,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 31,
    "layout" : 4
  }, {
    "firstKey" : 35,
    "secondKey" : 32,
    "layout" : 4
  }, {
    "firstKey" : 35,
    "secondKey" : 33,
    "layout" : 4
  }, {
    "firstKey" : 35,
    "secondKey" : 34,
    "layout" : 4
  }, {
    "firstKey" : 35,
    "secondKey" : 36,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 37,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 38,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 39,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 40,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 41,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 42,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 43,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 44,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 45,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 46,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 47,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 48,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 49,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 50,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 51,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 52,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 53,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 54,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 55,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 56,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 57,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 58,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 59,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 60,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 61,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 62,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 63,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 64,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 65,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 66,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 67,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 68,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 69,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 70,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 71,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 72,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 73,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 74,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 75,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 76,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 77,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 78,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 79,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 80,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 81,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 82,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 83,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 84,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 85,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 86,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 87,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 88,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 89,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 90,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 91,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 92,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 93,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 94,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 95,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 96,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 97,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 98,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 99,
    "layout" : 5
  }, {
    "firstKey" : 36,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 31,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 32,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 33,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 34,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 35,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 37,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 38,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 39,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 40,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 41,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 42,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 43,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 44,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 45,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 46,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 47,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 48,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 49,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 50,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 51,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 52,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 53,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 54,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 55,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 56,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 57,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 58,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 59,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 60,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 61,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 62,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 63,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 64,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 65,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 66,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 67,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 68,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 69,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 70,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 71,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 72,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 73,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 74,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 75,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 76,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 77,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 78,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 79,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 80,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 81,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 82,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 83,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 84,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 85,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 86,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 87,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 88,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 89,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 90,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 91,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 92,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 93,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 94,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 95,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 96,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 97,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 98,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 99,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 31,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 32,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 33,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 34,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 35,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 36,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 38,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 39,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 40,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 41,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 42,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 43,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 44,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 45,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 46,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 47,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 48,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 49,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 50,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 51,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 52,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 53,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 54,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 55,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 56,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 57,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 58,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 59,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 60,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 61,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 62,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 63,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 64,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 65,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 66,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 67,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 68,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 69,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 70,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 71,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 72,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 73,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 74,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 75,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 76,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 77,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 78,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 79,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 80,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 81,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 82,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 83,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 84,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 85,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 86,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 87,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 88,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 89,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 90,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 91,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 92,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 93,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 94,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 95,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 96,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 97,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 98,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 99,
    "layout" : 2
  }, {
    "firstKey" : 38,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 38,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 38,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 38,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 38,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 38,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 38,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 38,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 38,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 38,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 38,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 38,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 38,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 38,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 38,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 38,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 38,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 38,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 38,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 38,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 38,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 38,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 38,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 38,
    "secondKey" : 23,
    "layout" : 3
  }, {
    "firstKey" : 38,
    "secondKey" : 24,
    "layout" : 3
  }, {
    "firstKey" : 38,
    "secondKey" : 25,
    "layout" : 3
  }, {
    "firstKey" : 38,
    "secondKey" : 26,
    "layout" : 3
  }, {
    "firstKey" : 38,
    "secondKey" : 27,
    "layout" : 3
  }, {
    "firstKey" : 38,
    "secondKey" : 28,
    "layout" : 3
  }, {
    "firstKey" : 38,
    "secondKey" : 29,
    "layout" : 3
  }, {
    "firstKey" : 38,
    "secondKey" : 30,
    "layout" : 3
  }, {
    "firstKey" : 38,
    "secondKey" : 31,
    "layout" : 3
  }, {
    "firstKey" : 38,
    "secondKey" : 32,
    "layout" : 3
  }, {
    "firstKey" : 38,
    "secondKey" : 33,
    "layout" : 3
  }, {
    "firstKey" : 38,
    "secondKey" : 34,
    "layout" : 3
  }, {
    "firstKey" : 38,
    "secondKey" : 35,
    "layout" : 3
  }, {
    "firstKey" : 38,
    "secondKey" : 36,
    "layout" : 3
  }, {
    "firstKey" : 38,
    "secondKey" : 37,
    "layout" : 3
  }, {
    "firstKey" : 38,
    "secondKey" : 39,
    "layout" : 2
  }, {
    "firstKey" : 38,
    "secondKey" : 40,
    "layout" : 2
  }, {
    "firstKey" : 38,
    "secondKey" : 41,
    "layout" : 2
  }, {
    "firstKey" : 38,
    "secondKey" : 42,
    "layout" : 2
  }, {
    "firstKey" : 38,
    "secondKey" : 43,
    "layout" : 2
  }, {
    "firstKey" : 38,
    "secondKey" : 44,
    "layout" : 3
  }, {
    "firstKey" : 38,
    "secondKey" : 45,
    "layout" : 3
  }, {
    "firstKey" : 38,
    "secondKey" : 46,
    "layout" : 3
  }, {
    "firstKey" : 38,
    "secondKey" : 47,
    "layout" : 3
  }, {
    "firstKey" : 38,
    "secondKey" : 48,
    "layout" : 3
  }, {
    "firstKey" : 38,
    "secondKey" : 49,
    "layout" : 3
  }, {
    "firstKey" : 38,
    "secondKey" : 50,
    "layout" : 3
  }, {
    "firstKey" : 38,
    "secondKey" : 51,
    "layout" : 3
  }, {
    "firstKey" : 38,
    "secondKey" : 52,
    "layout" : 3
  }, {
    "firstKey" : 38,
    "secondKey" : 53,
    "layout" : 3
  }, {
    "firstKey" : 38,
    "secondKey" : 54,
    "layout" : 3
  }, {
    "firstKey" : 38,
    "secondKey" : 55,
    "layout" : 3
  }, {
    "firstKey" : 38,
    "secondKey" : 56,
    "layout" : 3
  }, {
    "firstKey" : 38,
    "secondKey" : 57,
    "layout" : 3
  }, {
    "firstKey" : 38,
    "secondKey" : 58,
    "layout" : 3
  }, {
    "firstKey" : 38,
    "secondKey" : 59,
    "layout" : 3
  }, {
    "firstKey" : 38,
    "secondKey" : 60,
    "layout" : 3
  }, {
    "firstKey" : 38,
    "secondKey" : 61,
    "layout" : 3
  }, {
    "firstKey" : 38,
    "secondKey" : 62,
    "layout" : 3
  }, {
    "firstKey" : 38,
    "secondKey" : 63,
    "layout" : 3
  }, {
    "firstKey" : 38,
    "secondKey" : 64,
    "layout" : 3
  }, {
    "firstKey" : 38,
    "secondKey" : 65,
    "layout" : 3
  }, {
    "firstKey" : 38,
    "secondKey" : 66,
    "layout" : 3
  }, {
    "firstKey" : 38,
    "secondKey" : 67,
    "layout" : 3
  }, {
    "firstKey" : 38,
    "secondKey" : 68,
    "layout" : 3
  }, {
    "firstKey" : 38,
    "secondKey" : 69,
    "layout" : 3
  }, {
    "firstKey" : 38,
    "secondKey" : 70,
    "layout" : 3
  }, {
    "firstKey" : 38,
    "secondKey" : 71,
    "layout" : 3
  }, {
    "firstKey" : 38,
    "secondKey" : 72,
    "layout" : 3
  }, {
    "firstKey" : 38,
    "secondKey" : 73,
    "layout" : 3
  }, {
    "firstKey" : 38,
    "secondKey" : 74,
    "layout" : 3
  }, {
    "firstKey" : 38,
    "secondKey" : 75,
    "layout" : 3
  }, {
    "firstKey" : 38,
    "secondKey" : 76,
    "layout" : 3
  }, {
    "firstKey" : 38,
    "secondKey" : 77,
    "layout" : 3
  }, {
    "firstKey" : 38,
    "secondKey" : 78,
    "layout" : 3
  }, {
    "firstKey" : 38,
    "secondKey" : 79,
    "layout" : 3
  }, {
    "firstKey" : 38,
    "secondKey" : 80,
    "layout" : 3
  }, {
    "firstKey" : 38,
    "secondKey" : 81,
    "layout" : 3
  }, {
    "firstKey" : 38,
    "secondKey" : 82,
    "layout" : 3
  }, {
    "firstKey" : 38,
    "secondKey" : 83,
    "layout" : 3
  }, {
    "firstKey" : 38,
    "secondKey" : 84,
    "layout" : 3
  }, {
    "firstKey" : 38,
    "secondKey" : 85,
    "layout" : 3
  }, {
    "firstKey" : 38,
    "secondKey" : 86,
    "layout" : 3
  }, {
    "firstKey" : 38,
    "secondKey" : 87,
    "layout" : 3
  }, {
    "firstKey" : 38,
    "secondKey" : 88,
    "layout" : 3
  }, {
    "firstKey" : 38,
    "secondKey" : 89,
    "layout" : 3
  }, {
    "firstKey" : 38,
    "secondKey" : 90,
    "layout" : 3
  }, {
    "firstKey" : 38,
    "secondKey" : 91,
    "layout" : 3
  }, {
    "firstKey" : 38,
    "secondKey" : 92,
    "layout" : 3
  }, {
    "firstKey" : 38,
    "secondKey" : 93,
    "layout" : 3
  }, {
    "firstKey" : 38,
    "secondKey" : 94,
    "layout" : 3
  }, {
    "firstKey" : 38,
    "secondKey" : 95,
    "layout" : 3
  }, {
    "firstKey" : 38,
    "secondKey" : 96,
    "layout" : 3
  }, {
    "firstKey" : 38,
    "secondKey" : 97,
    "layout" : 3
  }, {
    "firstKey" : 38,
    "secondKey" : 98,
    "layout" : 3
  }, {
    "firstKey" : 38,
    "secondKey" : 99,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 23,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 24,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 25,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 26,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 27,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 28,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 29,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 30,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 31,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 32,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 33,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 34,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 35,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 36,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 37,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 38,
    "layout" : 2
  }, {
    "firstKey" : 39,
    "secondKey" : 40,
    "layout" : 2
  }, {
    "firstKey" : 39,
    "secondKey" : 41,
    "layout" : 2
  }, {
    "firstKey" : 39,
    "secondKey" : 42,
    "layout" : 2
  }, {
    "firstKey" : 39,
    "secondKey" : 43,
    "layout" : 2
  }, {
    "firstKey" : 39,
    "secondKey" : 44,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 45,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 46,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 47,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 48,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 49,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 50,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 51,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 52,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 53,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 54,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 55,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 56,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 57,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 58,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 59,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 60,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 61,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 62,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 63,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 64,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 65,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 66,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 67,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 68,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 69,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 70,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 71,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 72,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 73,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 74,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 75,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 76,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 77,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 78,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 79,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 80,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 81,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 82,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 83,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 84,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 85,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 86,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 87,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 88,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 89,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 90,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 91,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 92,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 93,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 94,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 95,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 96,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 97,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 98,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 99,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 23,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 24,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 25,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 26,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 27,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 28,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 29,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 30,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 31,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 32,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 33,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 34,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 35,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 36,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 37,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 38,
    "layout" : 2
  }, {
    "firstKey" : 40,
    "secondKey" : 39,
    "layout" : 2
  }, {
    "firstKey" : 40,
    "secondKey" : 41,
    "layout" : 2
  }, {
    "firstKey" : 40,
    "secondKey" : 42,
    "layout" : 2
  }, {
    "firstKey" : 40,
    "secondKey" : 43,
    "layout" : 2
  }, {
    "firstKey" : 40,
    "secondKey" : 44,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 45,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 46,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 47,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 48,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 49,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 50,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 51,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 52,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 53,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 54,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 55,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 56,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 57,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 58,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 59,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 60,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 61,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 62,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 63,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 64,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 65,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 66,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 67,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 68,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 69,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 70,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 71,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 72,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 73,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 74,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 75,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 76,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 77,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 78,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 79,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 80,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 81,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 82,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 83,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 84,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 85,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 86,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 87,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 88,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 89,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 90,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 91,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 92,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 93,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 94,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 95,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 96,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 97,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 98,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 99,
    "layout" : 3
  }, {
    "firstKey" : 41,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 41,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 41,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 41,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 41,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 41,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 41,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 41,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 41,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 41,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 41,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 41,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 41,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 41,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 41,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 41,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 41,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 41,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 41,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 41,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 41,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 41,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 41,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 41,
    "secondKey" : 23,
    "layout" : 3
  }, {
    "firstKey" : 41,
    "secondKey" : 24,
    "layout" : 3
  }, {
    "firstKey" : 41,
    "secondKey" : 25,
    "layout" : 3
  }, {
    "firstKey" : 41,
    "secondKey" : 26,
    "layout" : 3
  }, {
    "firstKey" : 41,
    "secondKey" : 27,
    "layout" : 3
  }, {
    "firstKey" : 41,
    "secondKey" : 28,
    "layout" : 3
  }, {
    "firstKey" : 41,
    "secondKey" : 29,
    "layout" : 3
  }, {
    "firstKey" : 41,
    "secondKey" : 30,
    "layout" : 3
  }, {
    "firstKey" : 41,
    "secondKey" : 31,
    "layout" : 3
  }, {
    "firstKey" : 41,
    "secondKey" : 32,
    "layout" : 3
  }, {
    "firstKey" : 41,
    "secondKey" : 33,
    "layout" : 3
  }, {
    "firstKey" : 41,
    "secondKey" : 34,
    "layout" : 3
  }, {
    "firstKey" : 41,
    "secondKey" : 35,
    "layout" : 3
  }, {
    "firstKey" : 41,
    "secondKey" : 36,
    "layout" : 3
  }, {
    "firstKey" : 41,
    "secondKey" : 37,
    "layout" : 3
  }, {
    "firstKey" : 41,
    "secondKey" : 38,
    "layout" : 2
  }, {
    "firstKey" : 41,
    "secondKey" : 39,
    "layout" : 2
  }, {
    "firstKey" : 41,
    "secondKey" : 40,
    "layout" : 2
  }, {
    "firstKey" : 41,
    "secondKey" : 42,
    "layout" : 2
  }, {
    "firstKey" : 41,
    "secondKey" : 43,
    "layout" : 2
  }, {
    "firstKey" : 41,
    "secondKey" : 44,
    "layout" : 3
  }, {
    "firstKey" : 41,
    "secondKey" : 45,
    "layout" : 3
  }, {
    "firstKey" : 41,
    "secondKey" : 46,
    "layout" : 3
  }, {
    "firstKey" : 41,
    "secondKey" : 47,
    "layout" : 3
  }, {
    "firstKey" : 41,
    "secondKey" : 48,
    "layout" : 3
  }, {
    "firstKey" : 41,
    "secondKey" : 49,
    "layout" : 3
  }, {
    "firstKey" : 41,
    "secondKey" : 50,
    "layout" : 3
  }, {
    "firstKey" : 41,
    "secondKey" : 51,
    "layout" : 3
  }, {
    "firstKey" : 41,
    "secondKey" : 52,
    "layout" : 3
  }, {
    "firstKey" : 41,
    "secondKey" : 53,
    "layout" : 3
  }, {
    "firstKey" : 41,
    "secondKey" : 54,
    "layout" : 3
  }, {
    "firstKey" : 41,
    "secondKey" : 55,
    "layout" : 3
  }, {
    "firstKey" : 41,
    "secondKey" : 56,
    "layout" : 3
  }, {
    "firstKey" : 41,
    "secondKey" : 57,
    "layout" : 3
  }, {
    "firstKey" : 41,
    "secondKey" : 58,
    "layout" : 3
  }, {
    "firstKey" : 41,
    "secondKey" : 59,
    "layout" : 3
  }, {
    "firstKey" : 41,
    "secondKey" : 60,
    "layout" : 3
  }, {
    "firstKey" : 41,
    "secondKey" : 61,
    "layout" : 3
  }, {
    "firstKey" : 41,
    "secondKey" : 62,
    "layout" : 3
  }, {
    "firstKey" : 41,
    "secondKey" : 63,
    "layout" : 3
  }, {
    "firstKey" : 41,
    "secondKey" : 64,
    "layout" : 3
  }, {
    "firstKey" : 41,
    "secondKey" : 65,
    "layout" : 3
  }, {
    "firstKey" : 41,
    "secondKey" : 66,
    "layout" : 3
  }, {
    "firstKey" : 41,
    "secondKey" : 67,
    "layout" : 3
  }, {
    "firstKey" : 41,
    "secondKey" : 68,
    "layout" : 3
  }, {
    "firstKey" : 41,
    "secondKey" : 69,
    "layout" : 3
  }, {
    "firstKey" : 41,
    "secondKey" : 70,
    "layout" : 3
  }, {
    "firstKey" : 41,
    "secondKey" : 71,
    "layout" : 3
  }, {
    "firstKey" : 41,
    "secondKey" : 72,
    "layout" : 3
  }, {
    "firstKey" : 41,
    "secondKey" : 73,
    "layout" : 3
  }, {
    "firstKey" : 41,
    "secondKey" : 74,
    "layout" : 3
  }, {
    "firstKey" : 41,
    "secondKey" : 75,
    "layout" : 3
  }, {
    "firstKey" : 41,
    "secondKey" : 76,
    "layout" : 3
  }, {
    "firstKey" : 41,
    "secondKey" : 77,
    "layout" : 3
  }, {
    "firstKey" : 41,
    "secondKey" : 78,
    "layout" : 3
  }, {
    "firstKey" : 41,
    "secondKey" : 79,
    "layout" : 3
  }, {
    "firstKey" : 41,
    "secondKey" : 80,
    "layout" : 3
  }, {
    "firstKey" : 41,
    "secondKey" : 81,
    "layout" : 3
  }, {
    "firstKey" : 41,
    "secondKey" : 82,
    "layout" : 3
  }, {
    "firstKey" : 41,
    "secondKey" : 83,
    "layout" : 3
  }, {
    "firstKey" : 41,
    "secondKey" : 84,
    "layout" : 3
  }, {
    "firstKey" : 41,
    "secondKey" : 85,
    "layout" : 3
  }, {
    "firstKey" : 41,
    "secondKey" : 86,
    "layout" : 3
  }, {
    "firstKey" : 41,
    "secondKey" : 87,
    "layout" : 3
  }, {
    "firstKey" : 41,
    "secondKey" : 88,
    "layout" : 3
  }, {
    "firstKey" : 41,
    "secondKey" : 89,
    "layout" : 3
  }, {
    "firstKey" : 41,
    "secondKey" : 90,
    "layout" : 3
  }, {
    "firstKey" : 41,
    "secondKey" : 91,
    "layout" : 3
  }, {
    "firstKey" : 41,
    "secondKey" : 92,
    "layout" : 3
  }, {
    "firstKey" : 41,
    "secondKey" : 93,
    "layout" : 3
  }, {
    "firstKey" : 41,
    "secondKey" : 94,
    "layout" : 3
  }, {
    "firstKey" : 41,
    "secondKey" : 95,
    "layout" : 3
  }, {
    "firstKey" : 41,
    "secondKey" : 96,
    "layout" : 3
  }, {
    "firstKey" : 41,
    "secondKey" : 97,
    "layout" : 3
  }, {
    "firstKey" : 41,
    "secondKey" : 98,
    "layout" : 3
  }, {
    "firstKey" : 41,
    "secondKey" : 99,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 23,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 24,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 25,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 26,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 27,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 28,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 29,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 30,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 31,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 32,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 33,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 34,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 35,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 36,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 37,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 38,
    "layout" : 2
  }, {
    "firstKey" : 42,
    "secondKey" : 39,
    "layout" : 2
  }, {
    "firstKey" : 42,
    "secondKey" : 40,
    "layout" : 2
  }, {
    "firstKey" : 42,
    "secondKey" : 41,
    "layout" : 2
  }, {
    "firstKey" : 42,
    "secondKey" : 43,
    "layout" : 2
  }, {
    "firstKey" : 42,
    "secondKey" : 44,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 45,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 46,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 47,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 48,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 49,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 50,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 51,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 52,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 53,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 54,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 55,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 56,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 57,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 58,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 59,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 60,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 61,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 62,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 63,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 64,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 65,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 66,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 67,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 68,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 69,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 70,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 71,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 72,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 73,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 74,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 75,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 76,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 77,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 78,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 79,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 80,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 81,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 82,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 83,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 84,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 85,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 86,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 87,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 88,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 89,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 90,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 91,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 92,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 93,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 94,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 95,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 96,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 97,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 98,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 99,
    "layout" : 3
  }, {
    "firstKey" : 43,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 17,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 18,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 19,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 20,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 21,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 22,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 23,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 24,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 25,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 26,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 27,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 28,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 29,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 30,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 31,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 32,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 33,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 34,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 35,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 36,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 37,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 38,
    "layout" : 4
  }, {
    "firstKey" : 43,
    "secondKey" : 39,
    "layout" : 4
  }, {
    "firstKey" : 43,
    "secondKey" : 40,
    "layout" : 4
  }, {
    "firstKey" : 43,
    "secondKey" : 41,
    "layout" : 4
  }, {
    "firstKey" : 43,
    "secondKey" : 42,
    "layout" : 4
  }, {
    "firstKey" : 43,
    "secondKey" : 44,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 45,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 46,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 47,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 48,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 49,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 50,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 51,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 52,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 53,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 54,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 55,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 56,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 57,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 58,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 59,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 60,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 61,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 62,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 63,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 64,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 65,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 66,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 67,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 68,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 69,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 70,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 71,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 72,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 73,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 74,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 75,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 76,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 77,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 78,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 79,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 80,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 81,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 82,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 83,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 84,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 85,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 86,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 87,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 88,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 89,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 90,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 91,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 92,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 93,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 94,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 95,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 96,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 97,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 98,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 99,
    "layout" : 5
  }, {
    "firstKey" : 44,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 31,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 32,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 33,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 34,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 35,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 36,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 37,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 38,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 39,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 40,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 41,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 42,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 43,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 45,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 46,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 47,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 48,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 49,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 50,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 51,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 52,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 53,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 54,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 55,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 56,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 57,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 58,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 59,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 60,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 61,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 62,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 63,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 64,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 65,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 66,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 67,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 68,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 69,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 70,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 71,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 72,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 73,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 74,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 75,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 76,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 77,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 78,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 79,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 80,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 81,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 82,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 83,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 84,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 85,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 86,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 87,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 88,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 89,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 90,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 91,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 92,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 93,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 94,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 95,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 96,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 97,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 98,
    "layout" : 2
  }, {
    "firstKey" : 44,
    "secondKey" : 99,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 31,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 32,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 33,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 34,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 35,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 36,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 37,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 38,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 39,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 40,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 41,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 42,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 43,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 44,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 46,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 47,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 48,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 49,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 50,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 51,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 52,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 53,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 54,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 55,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 56,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 57,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 58,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 59,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 60,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 61,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 62,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 63,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 64,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 65,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 66,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 67,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 68,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 69,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 70,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 71,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 72,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 73,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 74,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 75,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 76,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 77,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 78,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 79,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 80,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 81,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 82,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 83,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 84,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 85,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 86,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 87,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 88,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 89,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 90,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 91,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 92,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 93,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 94,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 95,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 96,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 97,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 98,
    "layout" : 2
  }, {
    "firstKey" : 45,
    "secondKey" : 99,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 31,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 32,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 33,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 34,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 35,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 36,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 37,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 38,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 39,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 40,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 41,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 42,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 43,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 44,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 45,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 47,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 48,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 49,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 50,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 51,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 52,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 53,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 54,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 55,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 56,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 57,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 58,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 59,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 60,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 61,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 62,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 63,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 64,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 65,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 66,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 67,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 68,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 69,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 70,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 71,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 72,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 73,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 74,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 75,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 76,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 77,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 78,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 79,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 80,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 81,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 82,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 83,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 84,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 85,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 86,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 87,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 88,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 89,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 90,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 91,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 92,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 93,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 94,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 95,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 96,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 97,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 98,
    "layout" : 2
  }, {
    "firstKey" : 46,
    "secondKey" : 99,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 31,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 32,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 33,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 34,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 35,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 36,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 37,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 38,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 39,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 40,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 41,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 42,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 43,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 44,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 45,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 46,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 48,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 49,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 50,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 51,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 52,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 53,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 54,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 55,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 56,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 57,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 58,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 59,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 60,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 61,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 62,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 63,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 64,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 65,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 66,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 67,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 68,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 69,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 70,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 71,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 72,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 73,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 74,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 75,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 76,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 77,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 78,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 79,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 80,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 81,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 82,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 83,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 84,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 85,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 86,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 87,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 88,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 89,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 90,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 91,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 92,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 93,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 94,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 95,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 96,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 97,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 98,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 99,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 31,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 32,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 33,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 34,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 35,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 36,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 37,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 38,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 39,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 40,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 41,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 42,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 43,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 44,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 45,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 46,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 47,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 49,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 50,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 51,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 52,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 53,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 54,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 55,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 56,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 57,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 58,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 59,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 60,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 61,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 62,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 63,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 64,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 65,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 66,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 67,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 68,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 69,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 70,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 71,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 72,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 73,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 74,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 75,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 76,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 77,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 78,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 79,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 80,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 81,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 82,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 83,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 84,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 85,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 86,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 87,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 88,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 89,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 90,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 91,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 92,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 93,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 94,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 95,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 96,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 97,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 98,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 99,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 31,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 32,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 33,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 34,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 35,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 36,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 37,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 38,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 39,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 40,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 41,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 42,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 43,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 44,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 45,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 46,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 47,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 48,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 50,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 51,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 52,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 53,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 54,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 55,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 56,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 57,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 58,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 59,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 60,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 61,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 62,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 63,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 64,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 65,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 66,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 67,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 68,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 69,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 70,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 71,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 72,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 73,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 74,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 75,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 76,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 77,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 78,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 79,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 80,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 81,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 82,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 83,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 84,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 85,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 86,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 87,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 88,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 89,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 90,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 91,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 92,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 93,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 94,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 95,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 96,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 97,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 98,
    "layout" : 2
  }, {
    "firstKey" : 49,
    "secondKey" : 99,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 31,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 32,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 33,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 34,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 35,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 36,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 37,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 38,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 39,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 40,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 41,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 42,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 43,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 44,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 45,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 46,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 47,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 48,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 49,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 51,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 52,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 53,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 54,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 55,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 56,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 57,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 58,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 59,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 60,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 61,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 62,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 63,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 64,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 65,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 66,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 67,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 68,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 69,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 70,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 71,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 72,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 73,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 74,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 75,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 76,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 77,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 78,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 79,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 80,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 81,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 82,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 83,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 84,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 85,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 86,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 87,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 88,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 89,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 90,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 91,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 92,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 93,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 94,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 95,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 96,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 97,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 98,
    "layout" : 2
  }, {
    "firstKey" : 50,
    "secondKey" : 99,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 31,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 32,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 33,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 34,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 35,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 36,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 37,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 38,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 39,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 40,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 41,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 42,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 43,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 44,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 45,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 46,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 47,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 48,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 49,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 50,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 52,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 53,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 54,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 55,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 56,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 57,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 58,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 59,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 60,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 61,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 62,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 63,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 64,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 65,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 66,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 67,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 68,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 69,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 70,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 71,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 72,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 73,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 74,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 75,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 76,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 77,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 78,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 79,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 80,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 81,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 82,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 83,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 84,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 85,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 86,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 87,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 88,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 89,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 90,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 91,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 92,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 93,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 94,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 95,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 96,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 97,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 98,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 99,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 31,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 32,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 33,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 34,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 35,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 36,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 37,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 38,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 39,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 40,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 41,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 42,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 43,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 44,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 45,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 46,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 47,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 48,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 49,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 50,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 51,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 53,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 54,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 55,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 56,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 57,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 58,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 59,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 60,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 61,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 62,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 63,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 64,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 65,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 66,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 67,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 68,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 69,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 70,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 71,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 72,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 73,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 74,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 75,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 76,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 77,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 78,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 79,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 80,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 81,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 82,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 83,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 84,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 85,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 86,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 87,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 88,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 89,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 90,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 91,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 92,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 93,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 94,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 95,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 96,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 97,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 98,
    "layout" : 2
  }, {
    "firstKey" : 52,
    "secondKey" : 99,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 31,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 32,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 33,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 34,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 35,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 36,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 37,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 38,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 39,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 40,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 41,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 42,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 43,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 44,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 45,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 46,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 47,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 48,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 49,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 50,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 51,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 52,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 54,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 55,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 56,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 57,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 58,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 59,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 60,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 61,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 62,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 63,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 64,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 65,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 66,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 67,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 68,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 69,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 70,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 71,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 72,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 73,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 74,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 75,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 76,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 77,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 78,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 79,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 80,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 81,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 82,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 83,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 84,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 85,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 86,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 87,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 88,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 89,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 90,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 91,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 92,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 93,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 94,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 95,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 96,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 97,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 98,
    "layout" : 2
  }, {
    "firstKey" : 53,
    "secondKey" : 99,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 31,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 32,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 33,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 34,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 35,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 36,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 37,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 38,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 39,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 40,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 41,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 42,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 43,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 44,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 45,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 46,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 47,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 48,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 49,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 50,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 51,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 52,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 53,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 55,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 56,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 57,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 58,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 59,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 60,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 61,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 62,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 63,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 64,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 65,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 66,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 67,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 68,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 69,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 70,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 71,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 72,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 73,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 74,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 75,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 76,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 77,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 78,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 79,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 80,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 81,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 82,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 83,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 84,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 85,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 86,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 87,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 88,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 89,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 90,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 91,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 92,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 93,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 94,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 95,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 96,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 97,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 98,
    "layout" : 2
  }, {
    "firstKey" : 54,
    "secondKey" : 99,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 31,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 32,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 33,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 34,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 35,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 36,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 37,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 38,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 39,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 40,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 41,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 42,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 43,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 44,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 45,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 46,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 47,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 48,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 49,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 50,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 51,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 52,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 53,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 54,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 56,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 57,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 58,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 59,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 60,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 61,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 62,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 63,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 64,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 65,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 66,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 67,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 68,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 69,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 70,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 71,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 72,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 73,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 74,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 75,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 76,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 77,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 78,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 79,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 80,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 81,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 82,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 83,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 84,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 85,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 86,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 87,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 88,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 89,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 90,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 91,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 92,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 93,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 94,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 95,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 96,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 97,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 98,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 99,
    "layout" : 2
  }, {
    "firstKey" : 56,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 23,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 24,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 25,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 26,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 27,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 28,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 29,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 30,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 31,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 32,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 33,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 34,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 35,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 36,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 37,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 38,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 39,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 40,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 41,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 42,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 43,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 44,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 45,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 46,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 47,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 48,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 49,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 50,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 51,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 52,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 53,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 54,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 55,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 57,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 58,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 59,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 60,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 61,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 62,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 63,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 64,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 65,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 66,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 67,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 68,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 69,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 70,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 71,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 72,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 73,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 74,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 75,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 76,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 77,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 78,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 79,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 80,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 81,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 82,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 83,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 84,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 85,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 86,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 87,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 88,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 89,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 90,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 91,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 92,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 93,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 94,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 95,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 96,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 97,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 98,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 99,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 23,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 24,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 25,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 26,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 27,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 28,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 29,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 30,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 31,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 32,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 33,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 34,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 35,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 36,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 37,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 38,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 39,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 40,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 41,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 42,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 43,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 44,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 45,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 46,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 47,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 48,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 49,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 50,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 51,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 52,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 53,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 54,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 55,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 56,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 58,
    "layout" : 2
  }, {
    "firstKey" : 57,
    "secondKey" : 59,
    "layout" : 2
  }, {
    "firstKey" : 57,
    "secondKey" : 60,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 61,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 62,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 63,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 64,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 65,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 66,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 67,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 68,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 69,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 70,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 71,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 72,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 73,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 74,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 75,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 76,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 77,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 78,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 79,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 80,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 81,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 82,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 83,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 84,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 85,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 86,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 87,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 88,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 89,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 90,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 91,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 92,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 93,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 94,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 95,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 96,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 97,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 98,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 99,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 23,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 24,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 25,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 26,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 27,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 28,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 29,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 30,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 31,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 32,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 33,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 34,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 35,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 36,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 37,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 38,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 39,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 40,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 41,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 42,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 43,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 44,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 45,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 46,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 47,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 48,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 49,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 50,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 51,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 52,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 53,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 54,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 55,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 56,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 57,
    "layout" : 2
  }, {
    "firstKey" : 58,
    "secondKey" : 59,
    "layout" : 2
  }, {
    "firstKey" : 58,
    "secondKey" : 60,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 61,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 62,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 63,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 64,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 65,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 66,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 67,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 68,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 69,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 70,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 71,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 72,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 73,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 74,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 75,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 76,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 77,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 78,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 79,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 80,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 81,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 82,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 83,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 84,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 85,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 86,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 87,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 88,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 89,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 90,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 91,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 92,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 93,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 94,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 95,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 96,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 97,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 98,
    "layout" : 3
  }, {
    "firstKey" : 58,
    "secondKey" : 99,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 23,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 24,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 25,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 26,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 27,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 28,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 29,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 30,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 31,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 32,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 33,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 34,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 35,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 36,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 37,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 38,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 39,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 40,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 41,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 42,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 43,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 44,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 45,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 46,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 47,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 48,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 49,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 50,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 51,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 52,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 53,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 54,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 55,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 56,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 57,
    "layout" : 2
  }, {
    "firstKey" : 59,
    "secondKey" : 58,
    "layout" : 2
  }, {
    "firstKey" : 59,
    "secondKey" : 60,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 61,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 62,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 63,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 64,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 65,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 66,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 67,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 68,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 69,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 70,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 71,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 72,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 73,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 74,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 75,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 76,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 77,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 78,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 79,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 80,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 81,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 82,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 83,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 84,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 85,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 86,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 87,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 88,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 89,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 90,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 91,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 92,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 93,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 94,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 95,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 96,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 97,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 98,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 99,
    "layout" : 3
  }, {
    "firstKey" : 60,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 31,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 32,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 33,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 34,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 35,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 36,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 37,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 38,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 39,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 40,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 41,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 42,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 43,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 44,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 45,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 46,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 47,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 48,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 49,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 50,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 51,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 52,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 53,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 54,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 55,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 56,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 57,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 58,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 59,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 61,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 62,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 63,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 64,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 65,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 66,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 67,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 68,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 69,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 70,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 71,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 72,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 73,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 74,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 75,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 76,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 77,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 78,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 79,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 80,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 81,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 82,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 83,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 84,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 85,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 86,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 87,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 88,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 89,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 90,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 91,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 92,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 93,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 94,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 95,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 96,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 97,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 98,
    "layout" : 2
  }, {
    "firstKey" : 60,
    "secondKey" : 99,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 31,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 32,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 33,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 34,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 35,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 36,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 37,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 38,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 39,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 40,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 41,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 42,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 43,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 44,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 45,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 46,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 47,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 48,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 49,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 50,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 51,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 52,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 53,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 54,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 55,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 56,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 57,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 58,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 59,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 60,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 62,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 63,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 64,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 65,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 66,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 67,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 68,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 69,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 70,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 71,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 72,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 73,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 74,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 75,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 76,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 77,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 78,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 79,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 80,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 81,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 82,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 83,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 84,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 85,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 86,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 87,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 88,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 89,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 90,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 91,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 92,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 93,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 94,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 95,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 96,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 97,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 98,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 99,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 31,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 32,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 33,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 34,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 35,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 36,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 37,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 38,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 39,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 40,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 41,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 42,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 43,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 44,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 45,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 46,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 47,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 48,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 49,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 50,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 51,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 52,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 53,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 54,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 55,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 56,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 57,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 58,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 59,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 60,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 61,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 63,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 64,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 65,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 66,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 67,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 68,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 69,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 70,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 71,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 72,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 73,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 74,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 75,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 76,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 77,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 78,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 79,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 80,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 81,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 82,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 83,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 84,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 85,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 86,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 87,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 88,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 89,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 90,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 91,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 92,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 93,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 94,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 95,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 96,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 97,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 98,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 99,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 31,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 32,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 33,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 34,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 35,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 36,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 37,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 38,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 39,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 40,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 41,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 42,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 43,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 44,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 45,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 46,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 47,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 48,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 49,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 50,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 51,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 52,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 53,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 54,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 55,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 56,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 57,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 58,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 59,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 60,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 61,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 62,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 64,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 65,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 66,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 67,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 68,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 69,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 70,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 71,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 72,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 73,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 74,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 75,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 76,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 77,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 78,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 79,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 80,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 81,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 82,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 83,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 84,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 85,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 86,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 87,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 88,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 89,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 90,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 91,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 92,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 93,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 94,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 95,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 96,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 97,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 98,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 99,
    "layout" : 2
  }, {
    "firstKey" : 64,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 30,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 31,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 32,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 33,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 34,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 35,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 36,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 37,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 38,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 39,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 40,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 41,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 42,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 43,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 44,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 45,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 46,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 47,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 48,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 49,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 50,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 51,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 52,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 53,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 54,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 55,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 56,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 57,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 58,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 59,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 60,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 61,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 62,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 63,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 65,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 66,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 67,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 68,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 69,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 70,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 71,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 72,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 73,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 74,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 75,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 76,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 77,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 78,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 79,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 80,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 81,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 82,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 83,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 84,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 85,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 86,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 87,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 88,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 89,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 90,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 91,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 92,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 93,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 94,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 95,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 96,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 97,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 98,
    "layout" : 4
  }, {
    "firstKey" : 64,
    "secondKey" : 99,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 30,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 31,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 32,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 33,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 34,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 35,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 36,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 37,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 38,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 39,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 40,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 41,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 42,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 43,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 44,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 45,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 46,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 47,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 48,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 49,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 50,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 51,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 52,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 53,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 54,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 55,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 56,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 57,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 58,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 59,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 60,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 61,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 62,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 63,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 64,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 66,
    "layout" : 2
  }, {
    "firstKey" : 65,
    "secondKey" : 67,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 68,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 69,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 70,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 71,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 72,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 73,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 74,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 75,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 76,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 77,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 78,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 79,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 80,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 81,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 82,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 83,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 84,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 85,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 86,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 87,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 88,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 89,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 90,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 91,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 92,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 93,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 94,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 95,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 96,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 97,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 98,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 99,
    "layout" : 4
  }, {
    "firstKey" : 66,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 18,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 19,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 20,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 21,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 22,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 23,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 24,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 25,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 26,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 27,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 28,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 29,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 30,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 31,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 32,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 33,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 34,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 35,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 36,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 37,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 38,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 39,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 40,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 41,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 42,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 43,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 44,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 45,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 46,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 47,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 48,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 49,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 50,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 51,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 52,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 53,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 54,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 55,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 56,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 57,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 58,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 59,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 60,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 61,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 62,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 63,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 64,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 65,
    "layout" : 4
  }, {
    "firstKey" : 66,
    "secondKey" : 67,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 68,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 69,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 70,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 71,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 72,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 73,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 74,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 75,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 76,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 77,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 78,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 79,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 80,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 81,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 82,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 83,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 84,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 85,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 86,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 87,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 88,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 89,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 90,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 91,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 92,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 93,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 94,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 95,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 96,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 97,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 98,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 99,
    "layout" : 6
  }, {
    "firstKey" : 67,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 30,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 31,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 32,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 33,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 34,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 35,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 36,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 37,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 38,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 39,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 40,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 41,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 42,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 43,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 44,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 45,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 46,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 47,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 48,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 49,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 50,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 51,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 52,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 53,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 54,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 55,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 56,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 57,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 58,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 59,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 60,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 61,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 62,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 63,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 64,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 65,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 66,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 68,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 69,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 70,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 71,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 72,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 73,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 74,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 75,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 76,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 77,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 78,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 79,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 80,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 81,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 82,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 83,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 84,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 85,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 86,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 87,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 88,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 89,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 90,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 91,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 92,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 93,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 94,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 95,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 96,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 97,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 98,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 99,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 30,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 31,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 32,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 33,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 34,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 35,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 36,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 37,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 38,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 39,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 40,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 41,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 42,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 43,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 44,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 45,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 46,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 47,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 48,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 49,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 50,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 51,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 52,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 53,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 54,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 55,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 56,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 57,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 58,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 59,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 60,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 61,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 62,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 63,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 64,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 65,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 66,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 67,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 69,
    "layout" : 2
  }, {
    "firstKey" : 68,
    "secondKey" : 70,
    "layout" : 2
  }, {
    "firstKey" : 68,
    "secondKey" : 71,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 72,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 73,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 74,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 75,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 76,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 77,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 78,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 79,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 80,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 81,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 82,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 83,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 84,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 85,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 86,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 87,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 88,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 89,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 90,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 91,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 92,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 93,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 94,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 95,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 96,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 97,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 98,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 99,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 30,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 31,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 32,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 33,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 34,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 35,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 36,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 37,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 38,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 39,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 40,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 41,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 42,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 43,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 44,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 45,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 46,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 47,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 48,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 49,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 50,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 51,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 52,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 53,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 54,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 55,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 56,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 57,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 58,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 59,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 60,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 61,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 62,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 63,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 64,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 65,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 66,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 67,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 68,
    "layout" : 2
  }, {
    "firstKey" : 69,
    "secondKey" : 70,
    "layout" : 2
  }, {
    "firstKey" : 69,
    "secondKey" : 71,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 72,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 73,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 74,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 75,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 76,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 77,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 78,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 79,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 80,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 81,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 82,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 83,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 84,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 85,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 86,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 87,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 88,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 89,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 90,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 91,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 92,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 93,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 94,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 95,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 96,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 97,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 98,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 99,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 30,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 31,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 32,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 33,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 34,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 35,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 36,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 37,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 38,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 39,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 40,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 41,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 42,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 43,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 44,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 45,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 46,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 47,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 48,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 49,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 50,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 51,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 52,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 53,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 54,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 55,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 56,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 57,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 58,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 59,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 60,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 61,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 62,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 63,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 64,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 65,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 66,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 67,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 68,
    "layout" : 2
  }, {
    "firstKey" : 70,
    "secondKey" : 69,
    "layout" : 2
  }, {
    "firstKey" : 70,
    "secondKey" : 71,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 72,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 73,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 74,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 75,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 76,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 77,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 78,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 79,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 80,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 81,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 82,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 83,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 84,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 85,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 86,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 87,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 88,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 89,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 90,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 91,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 92,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 93,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 94,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 95,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 96,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 97,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 98,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 99,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 30,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 31,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 32,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 33,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 34,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 35,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 36,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 37,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 38,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 39,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 40,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 41,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 42,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 43,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 44,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 45,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 46,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 47,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 48,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 49,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 50,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 51,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 52,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 53,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 54,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 55,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 56,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 57,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 58,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 59,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 60,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 61,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 62,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 63,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 64,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 65,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 66,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 67,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 68,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 69,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 70,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 72,
    "layout" : 2
  }, {
    "firstKey" : 71,
    "secondKey" : 73,
    "layout" : 2
  }, {
    "firstKey" : 71,
    "secondKey" : 74,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 75,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 76,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 77,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 78,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 79,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 80,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 81,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 82,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 83,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 84,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 85,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 86,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 87,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 88,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 89,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 90,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 91,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 92,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 93,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 94,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 95,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 96,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 97,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 98,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 99,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 30,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 31,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 32,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 33,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 34,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 35,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 36,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 37,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 38,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 39,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 40,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 41,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 42,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 43,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 44,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 45,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 46,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 47,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 48,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 49,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 50,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 51,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 52,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 53,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 54,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 55,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 56,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 57,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 58,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 59,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 60,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 61,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 62,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 63,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 64,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 65,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 66,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 67,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 68,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 69,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 70,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 71,
    "layout" : 2
  }, {
    "firstKey" : 72,
    "secondKey" : 73,
    "layout" : 2
  }, {
    "firstKey" : 72,
    "secondKey" : 74,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 75,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 76,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 77,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 78,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 79,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 80,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 81,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 82,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 83,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 84,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 85,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 86,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 87,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 88,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 89,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 90,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 91,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 92,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 93,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 94,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 95,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 96,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 97,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 98,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 99,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 30,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 31,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 32,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 33,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 34,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 35,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 36,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 37,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 38,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 39,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 40,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 41,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 42,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 43,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 44,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 45,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 46,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 47,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 48,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 49,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 50,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 51,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 52,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 53,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 54,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 55,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 56,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 57,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 58,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 59,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 60,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 61,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 62,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 63,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 64,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 65,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 66,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 67,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 68,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 69,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 70,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 71,
    "layout" : 2
  }, {
    "firstKey" : 73,
    "secondKey" : 72,
    "layout" : 2
  }, {
    "firstKey" : 73,
    "secondKey" : 74,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 75,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 76,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 77,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 78,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 79,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 80,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 81,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 82,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 83,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 84,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 85,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 86,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 87,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 88,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 89,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 90,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 91,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 92,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 93,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 94,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 95,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 96,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 97,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 98,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 99,
    "layout" : 4
  }, {
    "firstKey" : 74,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 31,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 32,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 33,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 34,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 35,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 36,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 37,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 38,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 39,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 40,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 41,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 42,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 43,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 44,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 45,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 46,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 47,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 48,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 49,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 50,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 51,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 52,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 53,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 54,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 55,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 56,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 57,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 58,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 59,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 60,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 61,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 62,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 63,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 64,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 65,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 66,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 67,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 68,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 69,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 70,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 71,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 72,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 73,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 75,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 76,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 77,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 78,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 79,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 80,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 81,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 82,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 83,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 84,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 85,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 86,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 87,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 88,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 89,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 90,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 91,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 92,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 93,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 94,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 95,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 96,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 97,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 98,
    "layout" : 2
  }, {
    "firstKey" : 74,
    "secondKey" : 99,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 31,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 32,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 33,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 34,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 35,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 36,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 37,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 38,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 39,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 40,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 41,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 42,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 43,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 44,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 45,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 46,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 47,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 48,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 49,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 50,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 51,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 52,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 53,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 54,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 55,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 56,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 57,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 58,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 59,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 60,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 61,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 62,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 63,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 64,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 65,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 66,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 67,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 68,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 69,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 70,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 71,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 72,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 73,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 74,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 76,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 77,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 78,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 79,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 80,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 81,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 82,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 83,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 84,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 85,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 86,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 87,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 88,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 89,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 90,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 91,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 92,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 93,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 94,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 95,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 96,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 97,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 98,
    "layout" : 2
  }, {
    "firstKey" : 75,
    "secondKey" : 99,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 31,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 32,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 33,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 34,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 35,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 36,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 37,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 38,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 39,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 40,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 41,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 42,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 43,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 44,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 45,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 46,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 47,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 48,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 49,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 50,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 51,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 52,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 53,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 54,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 55,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 56,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 57,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 58,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 59,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 60,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 61,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 62,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 63,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 64,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 65,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 66,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 67,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 68,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 69,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 70,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 71,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 72,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 73,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 74,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 75,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 77,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 78,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 79,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 80,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 81,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 82,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 83,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 84,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 85,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 86,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 87,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 88,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 89,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 90,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 91,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 92,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 93,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 94,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 95,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 96,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 97,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 98,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 99,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 31,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 32,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 33,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 34,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 35,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 36,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 37,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 38,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 39,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 40,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 41,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 42,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 43,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 44,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 45,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 46,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 47,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 48,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 49,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 50,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 51,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 52,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 53,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 54,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 55,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 56,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 57,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 58,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 59,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 60,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 61,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 62,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 63,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 64,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 65,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 66,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 67,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 68,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 69,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 70,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 71,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 72,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 73,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 74,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 75,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 76,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 78,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 79,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 80,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 81,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 82,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 83,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 84,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 85,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 86,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 87,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 88,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 89,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 90,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 91,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 92,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 93,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 94,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 95,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 96,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 97,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 98,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 99,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 31,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 32,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 33,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 34,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 35,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 36,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 37,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 38,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 39,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 40,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 41,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 42,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 43,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 44,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 45,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 46,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 47,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 48,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 49,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 50,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 51,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 52,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 53,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 54,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 55,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 56,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 57,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 58,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 59,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 60,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 61,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 62,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 63,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 64,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 65,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 66,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 67,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 68,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 69,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 70,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 71,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 72,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 73,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 74,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 75,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 76,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 77,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 79,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 80,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 81,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 82,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 83,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 84,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 85,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 86,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 87,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 88,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 89,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 90,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 91,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 92,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 93,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 94,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 95,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 96,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 97,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 98,
    "layout" : 2
  }, {
    "firstKey" : 78,
    "secondKey" : 99,
    "layout" : 2
  }, {
    "firstKey" : 79,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 23,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 24,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 25,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 26,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 27,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 28,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 29,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 30,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 31,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 32,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 33,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 34,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 35,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 36,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 37,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 38,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 39,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 40,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 41,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 42,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 43,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 44,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 45,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 46,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 47,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 48,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 49,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 50,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 51,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 52,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 53,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 54,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 55,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 56,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 57,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 58,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 59,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 60,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 61,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 62,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 63,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 64,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 65,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 66,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 67,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 68,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 69,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 70,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 71,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 72,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 73,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 74,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 75,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 76,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 77,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 78,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 80,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 81,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 82,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 83,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 84,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 85,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 86,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 87,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 88,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 89,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 90,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 91,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 92,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 93,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 94,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 95,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 96,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 97,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 98,
    "layout" : 3
  }, {
    "firstKey" : 79,
    "secondKey" : 99,
    "layout" : 3
  }, {
    "firstKey" : 80,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 31,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 32,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 33,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 34,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 35,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 36,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 37,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 38,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 39,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 40,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 41,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 42,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 43,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 44,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 45,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 46,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 47,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 48,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 49,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 50,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 51,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 52,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 53,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 54,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 55,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 56,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 57,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 58,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 59,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 60,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 61,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 62,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 63,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 64,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 65,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 66,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 67,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 68,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 69,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 70,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 71,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 72,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 73,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 74,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 75,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 76,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 77,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 78,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 79,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 81,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 82,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 83,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 84,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 85,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 86,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 87,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 88,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 89,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 90,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 91,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 92,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 93,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 94,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 95,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 96,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 97,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 98,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 99,
    "layout" : 2
  }, {
    "firstKey" : 81,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 23,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 24,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 25,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 26,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 27,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 28,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 29,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 30,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 31,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 32,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 33,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 34,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 35,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 36,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 37,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 38,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 39,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 40,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 41,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 42,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 43,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 44,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 45,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 46,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 47,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 48,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 49,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 50,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 51,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 52,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 53,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 54,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 55,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 56,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 57,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 58,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 59,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 60,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 61,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 62,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 63,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 64,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 65,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 66,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 67,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 68,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 69,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 70,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 71,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 72,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 73,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 74,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 75,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 76,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 77,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 78,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 79,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 80,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 82,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 83,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 84,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 85,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 86,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 87,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 88,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 89,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 90,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 91,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 92,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 93,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 94,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 95,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 96,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 97,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 98,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 99,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 23,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 24,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 25,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 26,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 27,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 28,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 29,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 30,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 31,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 32,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 33,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 34,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 35,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 36,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 37,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 38,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 39,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 40,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 41,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 42,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 43,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 44,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 45,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 46,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 47,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 48,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 49,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 50,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 51,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 52,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 53,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 54,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 55,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 56,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 57,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 58,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 59,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 60,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 61,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 62,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 63,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 64,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 65,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 66,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 67,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 68,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 69,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 70,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 71,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 72,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 73,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 74,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 75,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 76,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 77,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 78,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 79,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 80,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 81,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 83,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 84,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 85,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 86,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 87,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 88,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 89,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 90,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 91,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 92,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 93,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 94,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 95,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 96,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 97,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 98,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 99,
    "layout" : 3
  }, {
    "firstKey" : 83,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 31,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 32,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 33,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 34,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 35,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 36,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 37,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 38,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 39,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 40,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 41,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 42,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 43,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 44,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 45,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 46,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 47,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 48,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 49,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 50,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 51,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 52,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 53,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 54,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 55,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 56,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 57,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 58,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 59,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 60,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 61,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 62,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 63,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 64,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 65,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 66,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 67,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 68,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 69,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 70,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 71,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 72,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 73,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 74,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 75,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 76,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 77,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 78,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 79,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 80,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 81,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 82,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 84,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 85,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 86,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 87,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 88,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 89,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 90,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 91,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 92,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 93,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 94,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 95,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 96,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 97,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 98,
    "layout" : 2
  }, {
    "firstKey" : 83,
    "secondKey" : 99,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 31,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 32,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 33,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 34,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 35,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 36,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 37,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 38,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 39,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 40,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 41,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 42,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 43,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 44,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 45,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 46,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 47,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 48,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 49,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 50,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 51,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 52,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 53,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 54,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 55,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 56,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 57,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 58,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 59,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 60,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 61,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 62,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 63,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 64,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 65,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 66,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 67,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 68,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 69,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 70,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 71,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 72,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 73,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 74,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 75,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 76,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 77,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 78,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 79,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 80,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 81,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 82,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 83,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 85,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 86,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 87,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 88,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 89,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 90,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 91,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 92,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 93,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 94,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 95,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 96,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 97,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 98,
    "layout" : 2
  }, {
    "firstKey" : 84,
    "secondKey" : 99,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 31,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 32,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 33,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 34,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 35,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 36,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 37,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 38,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 39,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 40,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 41,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 42,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 43,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 44,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 45,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 46,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 47,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 48,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 49,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 50,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 51,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 52,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 53,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 54,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 55,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 56,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 57,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 58,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 59,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 60,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 61,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 62,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 63,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 64,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 65,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 66,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 67,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 68,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 69,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 70,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 71,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 72,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 73,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 74,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 75,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 76,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 77,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 78,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 79,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 80,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 81,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 82,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 83,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 84,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 86,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 87,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 88,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 89,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 90,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 91,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 92,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 93,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 94,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 95,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 96,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 97,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 98,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 99,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 31,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 32,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 33,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 34,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 35,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 36,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 37,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 38,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 39,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 40,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 41,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 42,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 43,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 44,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 45,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 46,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 47,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 48,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 49,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 50,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 51,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 52,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 53,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 54,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 55,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 56,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 57,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 58,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 59,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 60,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 61,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 62,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 63,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 64,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 65,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 66,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 67,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 68,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 69,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 70,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 71,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 72,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 73,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 74,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 75,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 76,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 77,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 78,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 79,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 80,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 81,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 82,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 83,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 84,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 85,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 87,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 88,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 89,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 90,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 91,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 92,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 93,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 94,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 95,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 96,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 97,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 98,
    "layout" : 2
  }, {
    "firstKey" : 86,
    "secondKey" : 99,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 31,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 32,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 33,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 34,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 35,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 36,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 37,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 38,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 39,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 40,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 41,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 42,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 43,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 44,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 45,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 46,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 47,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 48,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 49,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 50,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 51,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 52,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 53,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 54,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 55,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 56,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 57,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 58,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 59,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 60,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 61,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 62,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 63,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 64,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 65,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 66,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 67,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 68,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 69,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 70,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 71,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 72,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 73,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 74,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 75,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 76,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 77,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 78,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 79,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 80,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 81,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 82,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 83,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 84,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 85,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 86,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 88,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 89,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 90,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 91,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 92,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 93,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 94,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 95,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 96,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 97,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 98,
    "layout" : 2
  }, {
    "firstKey" : 87,
    "secondKey" : 99,
    "layout" : 2
  }, {
    "firstKey" : 88,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 18,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 19,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 20,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 21,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 22,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 23,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 24,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 25,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 26,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 27,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 28,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 29,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 30,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 31,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 32,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 33,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 34,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 35,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 36,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 37,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 38,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 39,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 40,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 41,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 42,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 43,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 44,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 45,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 46,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 47,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 48,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 49,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 50,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 51,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 52,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 53,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 54,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 55,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 56,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 57,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 58,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 59,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 60,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 61,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 62,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 63,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 64,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 65,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 66,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 67,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 68,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 69,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 70,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 71,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 72,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 73,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 74,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 75,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 76,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 77,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 78,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 79,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 80,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 81,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 82,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 83,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 84,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 85,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 86,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 87,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 89,
    "layout" : 4
  }, {
    "firstKey" : 88,
    "secondKey" : 90,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 91,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 92,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 93,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 94,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 95,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 96,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 97,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 98,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 99,
    "layout" : 6
  }, {
    "firstKey" : 89,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 17,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 18,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 19,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 20,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 21,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 22,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 23,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 24,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 25,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 26,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 27,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 28,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 29,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 30,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 31,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 32,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 33,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 34,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 35,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 36,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 37,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 38,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 39,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 40,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 41,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 42,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 43,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 44,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 45,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 46,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 47,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 48,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 49,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 50,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 51,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 52,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 53,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 54,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 55,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 56,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 57,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 58,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 59,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 60,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 61,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 62,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 63,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 64,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 65,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 66,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 67,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 68,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 69,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 70,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 71,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 72,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 73,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 74,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 75,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 76,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 77,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 78,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 79,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 80,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 81,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 82,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 83,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 84,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 85,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 86,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 87,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 88,
    "layout" : 3
  }, {
    "firstKey" : 89,
    "secondKey" : 90,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 91,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 92,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 93,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 94,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 95,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 96,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 97,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 98,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 99,
    "layout" : 5
  }, {
    "firstKey" : 90,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 31,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 32,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 33,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 34,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 35,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 36,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 37,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 38,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 39,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 40,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 41,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 42,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 43,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 44,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 45,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 46,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 47,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 48,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 49,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 50,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 51,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 52,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 53,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 54,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 55,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 56,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 57,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 58,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 59,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 60,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 61,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 62,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 63,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 64,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 65,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 66,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 67,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 68,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 69,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 70,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 71,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 72,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 73,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 74,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 75,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 76,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 77,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 78,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 79,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 80,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 81,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 82,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 83,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 84,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 85,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 86,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 87,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 88,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 89,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 91,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 92,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 93,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 94,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 95,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 96,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 97,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 98,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 99,
    "layout" : 2
  }, {
    "firstKey" : 91,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 23,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 24,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 25,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 26,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 27,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 28,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 29,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 30,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 31,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 32,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 33,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 34,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 35,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 36,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 37,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 38,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 39,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 40,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 41,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 42,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 43,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 44,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 45,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 46,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 47,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 48,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 49,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 50,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 51,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 52,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 53,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 54,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 55,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 56,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 57,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 58,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 59,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 60,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 61,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 62,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 63,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 64,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 65,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 66,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 67,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 68,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 69,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 70,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 71,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 72,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 73,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 74,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 75,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 76,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 77,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 78,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 79,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 80,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 81,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 82,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 83,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 84,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 85,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 86,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 87,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 88,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 89,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 90,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 92,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 93,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 94,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 95,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 96,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 97,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 98,
    "layout" : 3
  }, {
    "firstKey" : 91,
    "secondKey" : 99,
    "layout" : 3
  }, {
    "firstKey" : 92,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 31,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 32,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 33,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 34,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 35,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 36,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 37,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 38,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 39,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 40,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 41,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 42,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 43,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 44,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 45,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 46,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 47,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 48,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 49,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 50,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 51,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 52,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 53,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 54,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 55,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 56,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 57,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 58,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 59,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 60,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 61,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 62,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 63,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 64,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 65,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 66,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 67,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 68,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 69,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 70,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 71,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 72,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 73,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 74,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 75,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 76,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 77,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 78,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 79,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 80,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 81,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 82,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 83,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 84,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 85,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 86,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 87,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 88,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 89,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 90,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 91,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 93,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 94,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 95,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 96,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 97,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 98,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 99,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 31,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 32,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 33,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 34,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 35,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 36,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 37,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 38,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 39,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 40,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 41,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 42,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 43,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 44,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 45,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 46,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 47,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 48,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 49,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 50,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 51,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 52,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 53,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 54,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 55,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 56,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 57,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 58,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 59,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 60,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 61,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 62,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 63,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 64,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 65,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 66,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 67,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 68,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 69,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 70,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 71,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 72,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 73,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 74,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 75,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 76,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 77,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 78,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 79,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 80,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 81,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 82,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 83,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 84,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 85,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 86,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 87,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 88,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 89,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 90,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 91,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 92,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 94,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 95,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 96,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 97,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 98,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 99,
    "layout" : 2
  }, {
    "firstKey" : 94,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 30,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 31,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 32,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 33,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 34,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 35,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 36,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 37,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 38,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 39,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 40,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 41,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 42,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 43,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 44,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 45,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 46,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 47,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 48,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 49,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 50,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 51,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 52,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 53,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 54,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 55,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 56,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 57,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 58,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 59,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 60,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 61,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 62,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 63,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 64,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 65,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 66,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 67,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 68,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 69,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 70,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 71,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 72,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 73,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 74,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 75,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 76,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 77,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 78,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 79,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 80,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 81,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 82,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 83,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 84,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 85,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 86,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 87,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 88,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 89,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 90,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 91,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 92,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 93,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 95,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 96,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 97,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 98,
    "layout" : 4
  }, {
    "firstKey" : 94,
    "secondKey" : 99,
    "layout" : 4
  }, {
    "firstKey" : 95,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 23,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 24,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 25,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 26,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 27,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 28,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 29,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 30,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 31,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 32,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 33,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 34,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 35,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 36,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 37,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 38,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 39,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 40,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 41,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 42,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 43,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 44,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 45,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 46,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 47,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 48,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 49,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 50,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 51,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 52,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 53,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 54,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 55,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 56,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 57,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 58,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 59,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 60,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 61,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 62,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 63,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 64,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 65,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 66,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 67,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 68,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 69,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 70,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 71,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 72,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 73,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 74,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 75,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 76,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 77,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 78,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 79,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 80,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 81,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 82,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 83,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 84,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 85,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 86,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 87,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 88,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 89,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 90,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 91,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 92,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 93,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 94,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 96,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 97,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 98,
    "layout" : 3
  }, {
    "firstKey" : 95,
    "secondKey" : 99,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 23,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 24,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 25,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 26,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 27,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 28,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 29,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 30,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 31,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 32,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 33,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 34,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 35,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 36,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 37,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 38,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 39,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 40,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 41,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 42,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 43,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 44,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 45,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 46,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 47,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 48,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 49,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 50,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 51,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 52,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 53,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 54,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 55,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 56,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 57,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 58,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 59,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 60,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 61,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 62,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 63,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 64,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 65,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 66,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 67,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 68,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 69,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 70,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 71,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 72,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 73,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 74,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 75,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 76,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 77,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 78,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 79,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 80,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 81,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 82,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 83,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 84,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 85,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 86,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 87,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 88,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 89,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 90,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 91,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 92,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 93,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 94,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 95,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 97,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 98,
    "layout" : 3
  }, {
    "firstKey" : 96,
    "secondKey" : 99,
    "layout" : 3
  }, {
    "firstKey" : 97,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 30,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 31,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 32,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 33,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 34,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 35,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 36,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 37,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 38,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 39,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 40,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 41,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 42,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 43,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 44,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 45,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 46,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 47,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 48,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 49,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 50,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 51,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 52,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 53,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 54,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 55,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 56,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 57,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 58,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 59,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 60,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 61,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 62,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 63,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 64,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 65,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 66,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 67,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 68,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 69,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 70,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 71,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 72,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 73,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 74,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 75,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 76,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 77,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 78,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 79,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 80,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 81,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 82,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 83,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 84,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 85,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 86,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 87,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 88,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 89,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 90,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 91,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 92,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 93,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 94,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 95,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 96,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 98,
    "layout" : 2
  }, {
    "firstKey" : 97,
    "secondKey" : 99,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 30,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 31,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 32,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 33,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 34,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 35,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 36,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 37,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 38,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 39,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 40,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 41,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 42,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 43,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 44,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 45,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 46,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 47,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 48,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 49,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 50,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 51,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 52,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 53,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 54,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 55,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 56,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 57,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 58,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 59,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 60,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 61,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 62,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 63,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 64,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 65,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 66,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 67,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 68,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 69,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 70,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 71,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 72,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 73,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 74,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 75,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 76,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 77,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 78,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 79,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 80,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 81,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 82,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 83,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 84,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 85,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 86,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 87,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 88,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 89,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 90,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 91,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 92,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 93,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 94,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 95,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 96,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 97,
    "layout" : 2
  }, {
    "firstKey" : 98,
    "secondKey" : 99,
    "layout" : 4
  }, {
    "firstKey" : 99,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 31,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 32,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 33,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 34,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 35,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 36,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 37,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 38,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 39,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 40,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 41,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 42,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 43,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 44,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 45,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 46,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 47,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 48,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 49,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 50,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 51,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 52,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 53,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 54,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 55,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 56,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 57,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 58,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 59,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 60,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 61,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 62,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 63,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 64,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 65,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 66,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 67,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 68,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 69,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 70,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 71,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 72,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 73,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 74,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 75,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 76,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 77,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 78,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 79,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 80,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 81,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 82,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 83,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 84,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 85,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 86,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 87,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 88,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 89,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 90,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 91,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 92,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 93,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 94,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 95,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 96,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 97,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 98,
    "layout" : 2
  } ]
}