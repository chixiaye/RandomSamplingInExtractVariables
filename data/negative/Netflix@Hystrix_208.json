{
  "id" : 208,
  "expression" : "new Subscriber<HystrixUtilization>(){\n  @Override public void onCompleted(){\n    System.out.println(System.currentTimeMillis() + \" : \" + Thread.currentThread().getName()+ \" OnCompleted\");\n    latch.countDown();\n  }\n  @Override public void onError(  Throwable e){\n    System.out.println(System.currentTimeMillis() + \" : \" + Thread.currentThread().getName()+ \" OnError : \"+ e);\n    latch.countDown();\n  }\n  @Override public void onNext(  HystrixUtilization utilization){\n    System.out.println(System.currentTimeMillis() + \" : \" + Thread.currentThread().getName()+ \" : Received data with : \"+ utilization.getCommandUtilizationMap().size()+ \" commands\");\n    if (utilization.getCommandUtilizationMap().containsKey(commandKey)) {\n      commandShowsUp.set(true);\n    }\n    if (!utilization.getThreadPoolUtilizationMap().isEmpty()) {\n      threadPoolShowsUp.set(true);\n    }\n  }\n}\n",
  "projectName" : "Netflix@Hystrix",
  "commitID" : "45d7875c3e51f6d6152b667db31e4fe435711917",
  "filePath" : "/hystrix-core/src/test/java/com/netflix/hystrix/metric/sample/HystrixUtilizationStreamTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new Subscriber<HystrixUtilization>(){\n  @Override public void onCompleted(){\n    System.out.println(System.currentTimeMillis() + \" : \" + Thread.currentThread().getName()+ \" OnCompleted\");\n    latch.countDown();\n  }\n  @Override public void onError(  Throwable e){\n    System.out.println(System.currentTimeMillis() + \" : \" + Thread.currentThread().getName()+ \" OnError : \"+ e);\n    latch.countDown();\n  }\n  @Override public void onNext(  HystrixUtilization utilization){\n    System.out.println(System.currentTimeMillis() + \" : \" + Thread.currentThread().getName()+ \" : Received data with : \"+ utilization.getCommandUtilizationMap().size()+ \" commands\");\n    if (utilization.getCommandUtilizationMap().containsKey(commandKey)) {\n      commandShowsUp.set(true);\n    }\n    if (!utilization.getThreadPoolUtilizationMap().isEmpty()) {\n      threadPoolShowsUp.set(true);\n    }\n  }\n}\n",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 1290,
      "startLineNumber" : 70,
      "startColumnNumber" : 16,
      "endLineNumber" : 93,
      "endColumnNumber" : 17
    },
    "astNodeNumber" : 128,
    "astHeight" : 10,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 1345,
        "startLineNumber" : 69,
        "startColumnNumber" : 8,
        "endLineNumber" : 93,
        "endColumnNumber" : 18
      },
      "nodeContext" : "stream.observe().take(NUM).subscribe(new Subscriber<HystrixUtilization>(){\n  @Override public void onCompleted(){\n    System.out.println(System.currentTimeMillis() + \" : \" + Thread.currentThread().getName()+ \" OnCompleted\");\n    latch.countDown();\n  }\n  @Override public void onError(  Throwable e){\n    System.out.println(System.currentTimeMillis() + \" : \" + Thread.currentThread().getName()+ \" OnError : \"+ e);\n    latch.countDown();\n  }\n  @Override public void onNext(  HystrixUtilization utilization){\n    System.out.println(System.currentTimeMillis() + \" : \" + Thread.currentThread().getName()+ \" : Received data with : \"+ utilization.getCommandUtilizationMap().size()+ \" commands\");\n    if (utilization.getCommandUtilizationMap().containsKey(commandKey)) {\n      commandShowsUp.set(true);\n    }\n    if (!utilization.getThreadPoolUtilizationMap().isEmpty()) {\n      threadPoolShowsUp.set(true);\n    }\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 136,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1346,
        "startLineNumber" : 69,
        "startColumnNumber" : 8,
        "endLineNumber" : 93,
        "endColumnNumber" : 19
      },
      "nodeContext" : "stream.observe().take(NUM).subscribe(new Subscriber<HystrixUtilization>(){\n  @Override public void onCompleted(){\n    System.out.println(System.currentTimeMillis() + \" : \" + Thread.currentThread().getName()+ \" OnCompleted\");\n    latch.countDown();\n  }\n  @Override public void onError(  Throwable e){\n    System.out.println(System.currentTimeMillis() + \" : \" + Thread.currentThread().getName()+ \" OnError : \"+ e);\n    latch.countDown();\n  }\n  @Override public void onNext(  HystrixUtilization utilization){\n    System.out.println(System.currentTimeMillis() + \" : \" + Thread.currentThread().getName()+ \" : Received data with : \"+ utilization.getCommandUtilizationMap().size()+ \" commands\");\n    if (utilization.getCommandUtilizationMap().containsKey(commandKey)) {\n      commandShowsUp.set(true);\n    }\n    if (!utilization.getThreadPoolUtilizationMap().isEmpty()) {\n      threadPoolShowsUp.set(true);\n    }\n  }\n}\n);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 137,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1931,
        "startLineNumber" : 58,
        "startColumnNumber" : 53,
        "endLineNumber" : 98,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final AtomicBoolean commandShowsUp=new AtomicBoolean(false);\n  final AtomicBoolean threadPoolShowsUp=new AtomicBoolean(false);\n  final CountDownLatch latch=new CountDownLatch(1);\n  final int NUM=10;\n  for (int i=0; i < 2; i++) {\n    HystrixCommand<Integer> cmd=Command.from(groupKey,commandKey,HystrixEventType.SUCCESS,50);\n    cmd.observe();\n  }\n  stream.observe().take(NUM).subscribe(new Subscriber<HystrixUtilization>(){\n    @Override public void onCompleted(){\n      System.out.println(System.currentTimeMillis() + \" : \" + Thread.currentThread().getName()+ \" OnCompleted\");\n      latch.countDown();\n    }\n    @Override public void onError(    Throwable e){\n      System.out.println(System.currentTimeMillis() + \" : \" + Thread.currentThread().getName()+ \" OnError : \"+ e);\n      latch.countDown();\n    }\n    @Override public void onNext(    HystrixUtilization utilization){\n      System.out.println(System.currentTimeMillis() + \" : \" + Thread.currentThread().getName()+ \" : Received data with : \"+ utilization.getCommandUtilizationMap().size()+ \" commands\");\n      if (utilization.getCommandUtilizationMap().containsKey(commandKey)) {\n        commandShowsUp.set(true);\n      }\n      if (!utilization.getThreadPoolUtilizationMap().isEmpty()) {\n        threadPoolShowsUp.set(true);\n      }\n    }\n  }\n);\n  assertTrue(latch.await(10000,TimeUnit.MILLISECONDS));\n  assertTrue(commandShowsUp.get());\n  assertTrue(threadPoolShowsUp.get());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 229,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1990,
        "startLineNumber" : 57,
        "startColumnNumber" : 4,
        "endLineNumber" : 98,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testStreamHasData() throws Exception {\n  final AtomicBoolean commandShowsUp=new AtomicBoolean(false);\n  final AtomicBoolean threadPoolShowsUp=new AtomicBoolean(false);\n  final CountDownLatch latch=new CountDownLatch(1);\n  final int NUM=10;\n  for (int i=0; i < 2; i++) {\n    HystrixCommand<Integer> cmd=Command.from(groupKey,commandKey,HystrixEventType.SUCCESS,50);\n    cmd.observe();\n  }\n  stream.observe().take(NUM).subscribe(new Subscriber<HystrixUtilization>(){\n    @Override public void onCompleted(){\n      System.out.println(System.currentTimeMillis() + \" : \" + Thread.currentThread().getName()+ \" OnCompleted\");\n      latch.countDown();\n    }\n    @Override public void onError(    Throwable e){\n      System.out.println(System.currentTimeMillis() + \" : \" + Thread.currentThread().getName()+ \" OnError : \"+ e);\n      latch.countDown();\n    }\n    @Override public void onNext(    HystrixUtilization utilization){\n      System.out.println(System.currentTimeMillis() + \" : \" + Thread.currentThread().getName()+ \" : Received data with : \"+ utilization.getCommandUtilizationMap().size()+ \" commands\");\n      if (utilization.getCommandUtilizationMap().containsKey(commandKey)) {\n        commandShowsUp.set(true);\n      }\n      if (!utilization.getThreadPoolUtilizationMap().isEmpty()) {\n        threadPoolShowsUp.set(true);\n      }\n    }\n  }\n);\n  assertTrue(latch.await(10000,TimeUnit.MILLISECONDS));\n  assertTrue(commandShowsUp.get());\n  assertTrue(threadPoolShowsUp.get());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 237,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 1345,
        "startLineNumber" : 69,
        "startColumnNumber" : 8,
        "endLineNumber" : 93,
        "endColumnNumber" : 18
      },
      "nodeContext" : "stream.observe().take(NUM).subscribe(new Subscriber<HystrixUtilization>(){\n  @Override public void onCompleted(){\n    System.out.println(System.currentTimeMillis() + \" : \" + Thread.currentThread().getName()+ \" OnCompleted\");\n    latch.countDown();\n  }\n  @Override public void onError(  Throwable e){\n    System.out.println(System.currentTimeMillis() + \" : \" + Thread.currentThread().getName()+ \" OnError : \"+ e);\n    latch.countDown();\n  }\n  @Override public void onNext(  HystrixUtilization utilization){\n    System.out.println(System.currentTimeMillis() + \" : \" + Thread.currentThread().getName()+ \" : Received data with : \"+ utilization.getCommandUtilizationMap().size()+ \" commands\");\n    if (utilization.getCommandUtilizationMap().containsKey(commandKey)) {\n      commandShowsUp.set(true);\n    }\n    if (!utilization.getThreadPoolUtilizationMap().isEmpty()) {\n      threadPoolShowsUp.set(true);\n    }\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 136,
      "astHeight" : 11
    },
    "tokenLength" : 74,
    "type" : ""
  } ],
  "positionList" : [ {
    "charLength" : 1290,
    "startLineNumber" : 70,
    "startColumnNumber" : 16,
    "endLineNumber" : 93,
    "endColumnNumber" : 17
  } ],
  "layoutRelationDataList" : [ ]
}