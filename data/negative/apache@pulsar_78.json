{
  "id" : 78,
  "expression" : "dataObjectLength",
  "projectName" : "apache@pulsar",
  "commitID" : "ded806fd52f6e2f182fa02052cbd82c2a6755098",
  "filePath" : "/tiered-storage/jcloud/src/test/java/org/apache/bookkeeper/mledger/offload/jcloud/impl/OffloadIndexTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "dataObjectLength",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 182,
      "startColumnNumber" : 21,
      "endLineNumber" : 182,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 182,
        "startColumnNumber" : 8,
        "endLineNumber" : 182,
        "endColumnNumber" : 41
      },
      "nodeContext" : "assertEquals(dataObjectLength,1)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 182,
        "startColumnNumber" : 8,
        "endLineNumber" : 182,
        "endColumnNumber" : 42
      },
      "nodeContext" : "assertEquals(dataObjectLength,1);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6644,
        "startLineNumber" : 115,
        "startColumnNumber" : 61,
        "endLineNumber" : 252,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  OffloadIndexBlockBuilder blockBuilder=OffloadIndexBlockBuilder.create();\n  LedgerMetadata metadata=createLedgerMetadata(1);\n  log.debug(\"created metadata: {}\",metadata.toString());\n  blockBuilder.withLedgerMetadata(metadata).withDataObjectLength(1).withDataBlockHeaderLength(23455);\n  blockBuilder.addBlock(0,2,64 * 1024 * 1024);\n  blockBuilder.addBlock(1000,3,64 * 1024 * 1024);\n  blockBuilder.addBlock(2000,4,64 * 1024 * 1024);\n  OffloadIndexBlock indexBlock=blockBuilder.build();\n  assertEquals(indexBlock.getEntryCount(),3);\n  assertEquals(indexBlock.getLedgerMetadata(),metadata);\n  OffloadIndexEntry entry1=indexBlock.getIndexEntryForEntry(0);\n  assertEquals(entry1.getEntryId(),0);\n  assertEquals(entry1.getPartId(),2);\n  assertEquals(entry1.getOffset(),0);\n  OffloadIndexEntry entry11=indexBlock.getIndexEntryForEntry(500);\n  assertEquals(entry11,entry1);\n  OffloadIndexEntry entry2=indexBlock.getIndexEntryForEntry(1000);\n  assertEquals(entry2.getEntryId(),1000);\n  assertEquals(entry2.getPartId(),3);\n  assertEquals(entry2.getOffset(),64 * 1024 * 1024);\n  OffloadIndexEntry entry22=indexBlock.getIndexEntryForEntry(1300);\n  assertEquals(entry22,entry2);\n  OffloadIndexEntry entry3=indexBlock.getIndexEntryForEntry(2000);\n  assertEquals(entry3.getEntryId(),2000);\n  assertEquals(entry3.getPartId(),4);\n  assertEquals(entry3.getOffset(),2 * 64 * 1024* 1024);\n  OffloadIndexEntry entry33=indexBlock.getIndexEntryForEntry(3000);\n  assertEquals(entry33,entry3);\n  try {\n    OffloadIndexEntry entry4=indexBlock.getIndexEntryForEntry(6000);\n    fail(\"Should throw IndexOutOfBoundsException.\");\n  }\n catch (  Exception e) {\n    assertTrue(e instanceof IndexOutOfBoundsException);\n    assertEquals(e.getMessage(),\"Entry index: 6000 beyond lastEntryId: 5000\");\n  }\n  InputStream out=indexBlock.toStream();\n  byte b[]=new byte[1024];\n  int readoutLen=out.read(b);\n  out.close();\n  ByteBuf wrapper=Unpooled.wrappedBuffer(b);\n  int magic=wrapper.readInt();\n  int indexBlockLength=wrapper.readInt();\n  long dataObjectLength=wrapper.readLong();\n  long dataHeaderLength=wrapper.readLong();\n  int indexEntryCount=wrapper.readInt();\n  int segmentMetadataLength=wrapper.readInt();\n  assertEquals(magic,OffloadIndexBlockImpl.getIndexMagicWord());\n  assertEquals(indexBlockLength,readoutLen);\n  assertEquals(indexEntryCount,3);\n  assertEquals(dataObjectLength,1);\n  assertEquals(dataHeaderLength,23455);\n  wrapper.readBytes(segmentMetadataLength);\n  log.debug(\"magic: {}, blockLength: {}, metadataLength: {}, indexCount: {}\",magic,indexBlockLength,segmentMetadataLength,indexEntryCount);\n  OffloadIndexEntry e1=OffloadIndexEntryImpl.of(wrapper.readLong(),wrapper.readInt(),wrapper.readLong(),dataHeaderLength);\n  OffloadIndexEntry e2=OffloadIndexEntryImpl.of(wrapper.readLong(),wrapper.readInt(),wrapper.readLong(),dataHeaderLength);\n  OffloadIndexEntry e3=OffloadIndexEntryImpl.of(wrapper.readLong(),wrapper.readInt(),wrapper.readLong(),dataHeaderLength);\n  assertEquals(e1.getEntryId(),entry1.getEntryId());\n  assertEquals(e1.getPartId(),entry1.getPartId());\n  assertEquals(e1.getOffset(),entry1.getOffset());\n  assertEquals(e1.getDataOffset(),entry1.getDataOffset());\n  assertEquals(e2.getEntryId(),entry2.getEntryId());\n  assertEquals(e2.getPartId(),entry2.getPartId());\n  assertEquals(e2.getOffset(),entry2.getOffset());\n  assertEquals(e2.getDataOffset(),entry2.getDataOffset());\n  assertEquals(e3.getEntryId(),entry3.getEntryId());\n  assertEquals(e3.getPartId(),entry3.getPartId());\n  assertEquals(e3.getOffset(),entry3.getOffset());\n  assertEquals(e3.getDataOffset(),entry3.getDataOffset());\n  wrapper.release();\n  InputStream out2=indexBlock.toStream();\n  int streamLength=out2.available();\n  out2.mark(0);\n  OffloadIndexBlock indexBlock2=(OffloadIndexBlock)blockBuilder.fromStream(out2);\n  LedgerMetadata metadata2=indexBlock2.getLedgerMetadata();\n  log.debug(\"built metadata: {}\",metadata2.toString());\n  assertEquals(metadata2.getAckQuorumSize(),metadata.getAckQuorumSize());\n  assertEquals(metadata2.getEnsembleSize(),metadata.getEnsembleSize());\n  assertEquals(metadata2.getDigestType(),metadata.getDigestType());\n  assertEquals(metadata2.getAllEnsembles().entrySet(),metadata.getAllEnsembles().entrySet());\n  assertEquals(indexBlock2.getEntryCount(),indexBlock.getEntryCount());\n  assertEquals(out2.read(),-1);\n  out2.reset();\n  byte streamContent[]=new byte[streamLength];\n  try (InputStream stream3=new ByteArrayInputStream(streamContent,0,streamLength)){\n    OffloadIndexBlock indexBlock3=(OffloadIndexBlock)blockBuilder.fromStream(stream3);\n    fail(\"Should throw IOException\");\n  }\n catch (  Exception e) {\n    assertTrue(e instanceof IOException);\n    assertTrue(e.getMessage().contains(\"Invalid MagicWord\"));\n  }\n  out2.read(streamContent);\n  try (InputStream stream4=new ByteArrayInputStream(streamContent,0,streamLength - 1)){\n    OffloadIndexBlock indexBlock4=(OffloadIndexBlock)blockBuilder.fromStream(stream4);\n    fail(\"Should throw EOFException\");\n  }\n catch (  Exception e) {\n    assertTrue(e instanceof java.io.EOFException);\n  }\n  out2.close();\n  indexBlock.close();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 781,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6711,
        "startLineNumber" : 114,
        "startColumnNumber" : 4,
        "endLineNumber" : 252,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void offloadIndexBlockImplTest() throws Exception {\n  OffloadIndexBlockBuilder blockBuilder=OffloadIndexBlockBuilder.create();\n  LedgerMetadata metadata=createLedgerMetadata(1);\n  log.debug(\"created metadata: {}\",metadata.toString());\n  blockBuilder.withLedgerMetadata(metadata).withDataObjectLength(1).withDataBlockHeaderLength(23455);\n  blockBuilder.addBlock(0,2,64 * 1024 * 1024);\n  blockBuilder.addBlock(1000,3,64 * 1024 * 1024);\n  blockBuilder.addBlock(2000,4,64 * 1024 * 1024);\n  OffloadIndexBlock indexBlock=blockBuilder.build();\n  assertEquals(indexBlock.getEntryCount(),3);\n  assertEquals(indexBlock.getLedgerMetadata(),metadata);\n  OffloadIndexEntry entry1=indexBlock.getIndexEntryForEntry(0);\n  assertEquals(entry1.getEntryId(),0);\n  assertEquals(entry1.getPartId(),2);\n  assertEquals(entry1.getOffset(),0);\n  OffloadIndexEntry entry11=indexBlock.getIndexEntryForEntry(500);\n  assertEquals(entry11,entry1);\n  OffloadIndexEntry entry2=indexBlock.getIndexEntryForEntry(1000);\n  assertEquals(entry2.getEntryId(),1000);\n  assertEquals(entry2.getPartId(),3);\n  assertEquals(entry2.getOffset(),64 * 1024 * 1024);\n  OffloadIndexEntry entry22=indexBlock.getIndexEntryForEntry(1300);\n  assertEquals(entry22,entry2);\n  OffloadIndexEntry entry3=indexBlock.getIndexEntryForEntry(2000);\n  assertEquals(entry3.getEntryId(),2000);\n  assertEquals(entry3.getPartId(),4);\n  assertEquals(entry3.getOffset(),2 * 64 * 1024* 1024);\n  OffloadIndexEntry entry33=indexBlock.getIndexEntryForEntry(3000);\n  assertEquals(entry33,entry3);\n  try {\n    OffloadIndexEntry entry4=indexBlock.getIndexEntryForEntry(6000);\n    fail(\"Should throw IndexOutOfBoundsException.\");\n  }\n catch (  Exception e) {\n    assertTrue(e instanceof IndexOutOfBoundsException);\n    assertEquals(e.getMessage(),\"Entry index: 6000 beyond lastEntryId: 5000\");\n  }\n  InputStream out=indexBlock.toStream();\n  byte b[]=new byte[1024];\n  int readoutLen=out.read(b);\n  out.close();\n  ByteBuf wrapper=Unpooled.wrappedBuffer(b);\n  int magic=wrapper.readInt();\n  int indexBlockLength=wrapper.readInt();\n  long dataObjectLength=wrapper.readLong();\n  long dataHeaderLength=wrapper.readLong();\n  int indexEntryCount=wrapper.readInt();\n  int segmentMetadataLength=wrapper.readInt();\n  assertEquals(magic,OffloadIndexBlockImpl.getIndexMagicWord());\n  assertEquals(indexBlockLength,readoutLen);\n  assertEquals(indexEntryCount,3);\n  assertEquals(dataObjectLength,1);\n  assertEquals(dataHeaderLength,23455);\n  wrapper.readBytes(segmentMetadataLength);\n  log.debug(\"magic: {}, blockLength: {}, metadataLength: {}, indexCount: {}\",magic,indexBlockLength,segmentMetadataLength,indexEntryCount);\n  OffloadIndexEntry e1=OffloadIndexEntryImpl.of(wrapper.readLong(),wrapper.readInt(),wrapper.readLong(),dataHeaderLength);\n  OffloadIndexEntry e2=OffloadIndexEntryImpl.of(wrapper.readLong(),wrapper.readInt(),wrapper.readLong(),dataHeaderLength);\n  OffloadIndexEntry e3=OffloadIndexEntryImpl.of(wrapper.readLong(),wrapper.readInt(),wrapper.readLong(),dataHeaderLength);\n  assertEquals(e1.getEntryId(),entry1.getEntryId());\n  assertEquals(e1.getPartId(),entry1.getPartId());\n  assertEquals(e1.getOffset(),entry1.getOffset());\n  assertEquals(e1.getDataOffset(),entry1.getDataOffset());\n  assertEquals(e2.getEntryId(),entry2.getEntryId());\n  assertEquals(e2.getPartId(),entry2.getPartId());\n  assertEquals(e2.getOffset(),entry2.getOffset());\n  assertEquals(e2.getDataOffset(),entry2.getDataOffset());\n  assertEquals(e3.getEntryId(),entry3.getEntryId());\n  assertEquals(e3.getPartId(),entry3.getPartId());\n  assertEquals(e3.getOffset(),entry3.getOffset());\n  assertEquals(e3.getDataOffset(),entry3.getDataOffset());\n  wrapper.release();\n  InputStream out2=indexBlock.toStream();\n  int streamLength=out2.available();\n  out2.mark(0);\n  OffloadIndexBlock indexBlock2=(OffloadIndexBlock)blockBuilder.fromStream(out2);\n  LedgerMetadata metadata2=indexBlock2.getLedgerMetadata();\n  log.debug(\"built metadata: {}\",metadata2.toString());\n  assertEquals(metadata2.getAckQuorumSize(),metadata.getAckQuorumSize());\n  assertEquals(metadata2.getEnsembleSize(),metadata.getEnsembleSize());\n  assertEquals(metadata2.getDigestType(),metadata.getDigestType());\n  assertEquals(metadata2.getAllEnsembles().entrySet(),metadata.getAllEnsembles().entrySet());\n  assertEquals(indexBlock2.getEntryCount(),indexBlock.getEntryCount());\n  assertEquals(out2.read(),-1);\n  out2.reset();\n  byte streamContent[]=new byte[streamLength];\n  try (InputStream stream3=new ByteArrayInputStream(streamContent,0,streamLength)){\n    OffloadIndexBlock indexBlock3=(OffloadIndexBlock)blockBuilder.fromStream(stream3);\n    fail(\"Should throw IOException\");\n  }\n catch (  Exception e) {\n    assertTrue(e instanceof IOException);\n    assertTrue(e.getMessage().contains(\"Invalid MagicWord\"));\n  }\n  out2.read(streamContent);\n  try (InputStream stream4=new ByteArrayInputStream(streamContent,0,streamLength - 1)){\n    OffloadIndexBlock indexBlock4=(OffloadIndexBlock)blockBuilder.fromStream(stream4);\n    fail(\"Should throw EOFException\");\n  }\n catch (  Exception e) {\n    assertTrue(e instanceof java.io.EOFException);\n  }\n  out2.close();\n  indexBlock.close();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 789,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 182,
        "startColumnNumber" : 8,
        "endLineNumber" : 182,
        "endColumnNumber" : 42
      },
      "nodeContext" : "assertEquals(dataObjectLength,1);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "long"
  } ],
  "positionList" : [ {
    "charLength" : 16,
    "startLineNumber" : 182,
    "startColumnNumber" : 21,
    "endLineNumber" : 182,
    "endColumnNumber" : 37
  } ],
  "layoutRelationDataList" : [ ]
}