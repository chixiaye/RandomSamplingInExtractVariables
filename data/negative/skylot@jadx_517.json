{
  "id" : 517,
  "expression" : "\"/* varargs */ \"",
  "projectName" : "skylot@jadx",
  "commitID" : "eb2a1734d3e02c19814f628e10bf80de5fb19772",
  "filePath" : "/jadx-core/src/main/java/jadx/core/dex/info/AccessInfo.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"/* varargs */ \"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 158,
      "startColumnNumber" : 17,
      "endLineNumber" : 158,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 158,
        "startColumnNumber" : 5,
        "endLineNumber" : 158,
        "endColumnNumber" : 34
      },
      "nodeContext" : "code.append(\"/* varargs */ \")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 158,
        "startColumnNumber" : 5,
        "endLineNumber" : 158,
        "endColumnNumber" : 35
      },
      "nodeContext" : "code.append(\"/* varargs */ \");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 157,
        "startColumnNumber" : 37,
        "endLineNumber" : 159,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  code.append(\"/* varargs */ \");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 157,
        "startColumnNumber" : 4,
        "endLineNumber" : 159,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (Consts.DEBUG && isVarArgs()) {\n  code.append(\"/* varargs */ \");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 740,
        "startLineNumber" : 149,
        "startColumnNumber" : 2,
        "endLineNumber" : 184,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (type) {\ncase METHOD:  if (isSynchronized()) {\n    code.append(\"synchronized \");\n  }\nif (isBridge()) {\n  code.append(\"/* bridge */ \");\n}\nif (Consts.DEBUG && isVarArgs()) {\ncode.append(\"/* varargs */ \");\n}\nbreak;\ncase FIELD:if (isVolatile()) {\ncode.append(\"volatile \");\n}\nif (isTransient()) {\ncode.append(\"transient \");\n}\nbreak;\ncase CLASS:if ((accFlags & AccessFlags.ACC_STRICT) != 0) {\ncode.append(\"strict \");\n}\nif (Consts.DEBUG) {\nif ((accFlags & AccessFlags.ACC_SUPER) != 0) {\ncode.append(\"/* super */ \");\n}\nif ((accFlags & AccessFlags.ACC_ENUM) != 0) {\ncode.append(\"/* enum */ \");\n}\n}\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 110,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1247,
        "startLineNumber" : 126,
        "startColumnNumber" : 28,
        "endLineNumber" : 189,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  StringBuilder code=new StringBuilder();\n  if (isPublic()) {\n    code.append(\"public \");\n  }\n  if (isPrivate()) {\n    code.append(\"private \");\n  }\n  if (isProtected()) {\n    code.append(\"protected \");\n  }\n  if (isStatic()) {\n    code.append(\"static \");\n  }\n  if (isFinal()) {\n    code.append(\"final \");\n  }\n  if (isAbstract()) {\n    code.append(\"abstract \");\n  }\n  if (isNative()) {\n    code.append(\"native \");\n  }\nswitch (type) {\ncase METHOD:    if (isSynchronized()) {\n      code.append(\"synchronized \");\n    }\n  if (isBridge()) {\n    code.append(\"/* bridge */ \");\n  }\nif (Consts.DEBUG && isVarArgs()) {\n  code.append(\"/* varargs */ \");\n}\nbreak;\ncase FIELD:if (isVolatile()) {\ncode.append(\"volatile \");\n}\nif (isTransient()) {\ncode.append(\"transient \");\n}\nbreak;\ncase CLASS:if ((accFlags & AccessFlags.ACC_STRICT) != 0) {\ncode.append(\"strict \");\n}\nif (Consts.DEBUG) {\nif ((accFlags & AccessFlags.ACC_SUPER) != 0) {\ncode.append(\"/* super */ \");\n}\nif ((accFlags & AccessFlags.ACC_ENUM) != 0) {\ncode.append(\"/* enum */ \");\n}\n}\nbreak;\n}\nif (isSynthetic()) {\ncode.append(\"/* synthetic */ \");\n}\nreturn code.toString();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 195,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1274,
        "startLineNumber" : 126,
        "startColumnNumber" : 1,
        "endLineNumber" : 189,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public String makeString(){\n  StringBuilder code=new StringBuilder();\n  if (isPublic()) {\n    code.append(\"public \");\n  }\n  if (isPrivate()) {\n    code.append(\"private \");\n  }\n  if (isProtected()) {\n    code.append(\"protected \");\n  }\n  if (isStatic()) {\n    code.append(\"static \");\n  }\n  if (isFinal()) {\n    code.append(\"final \");\n  }\n  if (isAbstract()) {\n    code.append(\"abstract \");\n  }\n  if (isNative()) {\n    code.append(\"native \");\n  }\nswitch (type) {\ncase METHOD:    if (isSynchronized()) {\n      code.append(\"synchronized \");\n    }\n  if (isBridge()) {\n    code.append(\"/* bridge */ \");\n  }\nif (Consts.DEBUG && isVarArgs()) {\n  code.append(\"/* varargs */ \");\n}\nbreak;\ncase FIELD:if (isVolatile()) {\ncode.append(\"volatile \");\n}\nif (isTransient()) {\ncode.append(\"transient \");\n}\nbreak;\ncase CLASS:if ((accFlags & AccessFlags.ACC_STRICT) != 0) {\ncode.append(\"strict \");\n}\nif (Consts.DEBUG) {\nif ((accFlags & AccessFlags.ACC_SUPER) != 0) {\ncode.append(\"/* super */ \");\n}\nif ((accFlags & AccessFlags.ACC_ENUM) != 0) {\ncode.append(\"/* enum */ \");\n}\n}\nbreak;\n}\nif (isSynthetic()) {\ncode.append(\"/* synthetic */ \");\n}\nreturn code.toString();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 200,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 158,
        "startColumnNumber" : 5,
        "endLineNumber" : 158,
        "endColumnNumber" : 35
      },
      "nodeContext" : "code.append(\"/* varargs */ \");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 3,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 16,
    "startLineNumber" : 158,
    "startColumnNumber" : 17,
    "endLineNumber" : 158,
    "endColumnNumber" : 33
  } ],
  "layoutRelationDataList" : [ ]
}