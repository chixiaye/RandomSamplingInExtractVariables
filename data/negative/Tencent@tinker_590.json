{
  "id" : 590,
  "expression" : "TAG",
  "projectName" : "Tencent@tinker",
  "commitID" : "8907f584e73ace1dd53a38521815112a9b390d56",
  "filePath" : "tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/TinkerLoader.java",
  "occurrences" : 23,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "TAG",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 68,
      "startColumnNumber" : 18,
      "endLineNumber" : 68,
      "endColumnNumber" : 21
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 68,
        "startColumnNumber" : 12,
        "endLineNumber" : 68,
        "endColumnNumber" : 75
      },
      "nodeContext" : "Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 68,
        "startColumnNumber" : 12,
        "endLineNumber" : 68,
        "endColumnNumber" : 76
      },
      "nodeContext" : "Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 206,
        "startLineNumber" : 67,
        "startColumnNumber" : 63,
        "endLineNumber" : 71,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 261,
        "startLineNumber" : 67,
        "startColumnNumber" : 8,
        "endLineNumber" : 71,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n  Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11732,
        "startLineNumber" : 64,
        "startColumnNumber" : 87,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 895,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11815,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void tryLoadPatchFilesInternal(TinkerApplication app,Intent resultIntent){\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 907,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 68,
        "startColumnNumber" : 12,
        "endLineNumber" : 68,
        "endColumnNumber" : 76
      },
      "nodeContext" : "Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "TAG",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 73,
      "startColumnNumber" : 18,
      "endLineNumber" : 73,
      "endColumnNumber" : 21
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 92,
        "startLineNumber" : 73,
        "startColumnNumber" : 12,
        "endLineNumber" : 73,
        "endColumnNumber" : 104
      },
      "nodeContext" : "Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 73,
        "startColumnNumber" : 12,
        "endLineNumber" : 73,
        "endColumnNumber" : 105
      },
      "nodeContext" : "Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 236,
        "startLineNumber" : 72,
        "startColumnNumber" : 56,
        "endLineNumber" : 77,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 284,
        "startLineNumber" : 72,
        "startColumnNumber" : 8,
        "endLineNumber" : 77,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (ShareTinkerInternals.isInPatchProcess(app)) {\n  Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11732,
        "startLineNumber" : 64,
        "startColumnNumber" : 87,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 895,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11815,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void tryLoadPatchFilesInternal(TinkerApplication app,Intent resultIntent){\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 907,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 73,
        "startColumnNumber" : 12,
        "endLineNumber" : 73,
        "endColumnNumber" : 105
      },
      "nodeContext" : "Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "TAG",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 81,
      "startColumnNumber" : 18,
      "endLineNumber" : 81,
      "endColumnNumber" : 21
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 81,
        "startColumnNumber" : 12,
        "endLineNumber" : 81,
        "endColumnNumber" : 69
      },
      "nodeContext" : "Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 81,
        "startColumnNumber" : 12,
        "endLineNumber" : 81,
        "endColumnNumber" : 70
      },
      "nodeContext" : "Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 251,
        "startLineNumber" : 80,
        "startColumnNumber" : 40,
        "endLineNumber" : 85,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 283,
        "startLineNumber" : 80,
        "startColumnNumber" : 8,
        "endLineNumber" : 85,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (patchDirectoryFile == null) {\n  Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11732,
        "startLineNumber" : 64,
        "startColumnNumber" : 87,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 895,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11815,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void tryLoadPatchFilesInternal(TinkerApplication app,Intent resultIntent){\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 907,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 81,
        "startColumnNumber" : 12,
        "endLineNumber" : 81,
        "endColumnNumber" : 70
      },
      "nodeContext" : "Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "TAG",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 90,
      "startColumnNumber" : 18,
      "endLineNumber" : 90,
      "endColumnNumber" : 21
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 90,
        "startColumnNumber" : 12,
        "endLineNumber" : 90,
        "endColumnNumber" : 85
      },
      "nodeContext" : "Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 90,
        "startColumnNumber" : 12,
        "endLineNumber" : 90,
        "endColumnNumber" : 86
      },
      "nodeContext" : "Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 234,
        "startLineNumber" : 89,
        "startColumnNumber" : 42,
        "endLineNumber" : 93,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 268,
        "startLineNumber" : 89,
        "startColumnNumber" : 8,
        "endLineNumber" : 93,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!patchDirectoryFile.exists()) {\n  Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 23,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11732,
        "startLineNumber" : 64,
        "startColumnNumber" : 87,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 895,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11815,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void tryLoadPatchFilesInternal(TinkerApplication app,Intent resultIntent){\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 907,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 90,
        "startColumnNumber" : 12,
        "endLineNumber" : 90,
        "endColumnNumber" : 86
      },
      "nodeContext" : "Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "TAG",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 100,
      "startColumnNumber" : 18,
      "endLineNumber" : 100,
      "endColumnNumber" : 21
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 100,
        "startColumnNumber" : 12,
        "endLineNumber" : 100,
        "endColumnNumber" : 99
      },
      "nodeContext" : "Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 100,
        "startColumnNumber" : 12,
        "endLineNumber" : 100,
        "endColumnNumber" : 100
      },
      "nodeContext" : "Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 243,
        "startLineNumber" : 99,
        "startColumnNumber" : 37,
        "endLineNumber" : 103,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 272,
        "startLineNumber" : 99,
        "startColumnNumber" : 8,
        "endLineNumber" : 103,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!patchInfoFile.exists()) {\n  Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 25,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11732,
        "startLineNumber" : 64,
        "startColumnNumber" : 87,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 895,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11815,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void tryLoadPatchFilesInternal(TinkerApplication app,Intent resultIntent){\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 907,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 100,
        "startColumnNumber" : 12,
        "endLineNumber" : 100,
        "endColumnNumber" : 100
      },
      "nodeContext" : "Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "TAG",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 120,
      "startColumnNumber" : 18,
      "endLineNumber" : 120,
      "endColumnNumber" : 21
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 120,
        "startColumnNumber" : 12,
        "endLineNumber" : 120,
        "endColumnNumber" : 64
      },
      "nodeContext" : "Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 120,
        "startColumnNumber" : 12,
        "endLineNumber" : 120,
        "endColumnNumber" : 65
      },
      "nodeContext" : "Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 248,
        "startLineNumber" : 118,
        "startColumnNumber" : 72,
        "endLineNumber" : 123,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 312,
        "startLineNumber" : 118,
        "startColumnNumber" : 8,
        "endLineNumber" : 123,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (oldVersion == null || newVersion == null || oatDex == null) {\n  Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 28,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11732,
        "startLineNumber" : 64,
        "startColumnNumber" : 87,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 895,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11815,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void tryLoadPatchFilesInternal(TinkerApplication app,Intent resultIntent){\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 907,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 120,
        "startColumnNumber" : 12,
        "endLineNumber" : 120,
        "endColumnNumber" : 65
      },
      "nodeContext" : "Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "TAG",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 140,
      "startColumnNumber" : 18,
      "endLineNumber" : 140,
      "endColumnNumber" : 21
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 140,
        "startColumnNumber" : 12,
        "endLineNumber" : 140,
        "endColumnNumber" : 90
      },
      "nodeContext" : "Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 79,
        "startLineNumber" : 140,
        "startColumnNumber" : 12,
        "endLineNumber" : 140,
        "endColumnNumber" : 91
      },
      "nodeContext" : "Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 230,
        "startLineNumber" : 139,
        "startColumnNumber" : 55,
        "endLineNumber" : 143,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 277,
        "startLineNumber" : 139,
        "startColumnNumber" : 8,
        "endLineNumber" : 143,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (ShareTinkerInternals.isNullOrNil(version)) {\n  Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11732,
        "startLineNumber" : 64,
        "startColumnNumber" : 87,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 895,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11815,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void tryLoadPatchFilesInternal(TinkerApplication app,Intent resultIntent){\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 907,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 79,
        "startLineNumber" : 140,
        "startColumnNumber" : 12,
        "endLineNumber" : 140,
        "endColumnNumber" : 91
      },
      "nodeContext" : "Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "TAG",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 148,
      "startColumnNumber" : 18,
      "endLineNumber" : 148,
      "endColumnNumber" : 21
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 148,
        "startColumnNumber" : 12,
        "endLineNumber" : 148,
        "endColumnNumber" : 61
      },
      "nodeContext" : "Log.w(TAG,\"tryLoadPatchFiles:patchName is null\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 148,
        "startColumnNumber" : 12,
        "endLineNumber" : 148,
        "endColumnNumber" : 62
      },
      "nodeContext" : "Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 262,
        "startLineNumber" : 147,
        "startColumnNumber" : 31,
        "endLineNumber" : 152,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 285,
        "startLineNumber" : 147,
        "startColumnNumber" : 8,
        "endLineNumber" : 152,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (patchName == null) {\n  Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11732,
        "startLineNumber" : 64,
        "startColumnNumber" : 87,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 895,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11815,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void tryLoadPatchFilesInternal(TinkerApplication app,Intent resultIntent){\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 907,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 148,
        "startColumnNumber" : 12,
        "endLineNumber" : 148,
        "endColumnNumber" : 62
      },
      "nodeContext" : "Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "TAG",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 159,
      "startColumnNumber" : 18,
      "endLineNumber" : 159,
      "endColumnNumber" : 21
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 159,
        "startColumnNumber" : 12,
        "endLineNumber" : 159,
        "endColumnNumber" : 75
      },
      "nodeContext" : "Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 159,
        "startColumnNumber" : 12,
        "endLineNumber" : 159,
        "endColumnNumber" : 76
      },
      "nodeContext" : "Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 276,
        "startLineNumber" : 158,
        "startColumnNumber" : 49,
        "endLineNumber" : 163,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 317,
        "startLineNumber" : 158,
        "startColumnNumber" : 8,
        "endLineNumber" : 163,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!patchVersionDirectoryFile.exists()) {\n  Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11732,
        "startLineNumber" : 64,
        "startColumnNumber" : 87,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 895,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11815,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void tryLoadPatchFilesInternal(TinkerApplication app,Intent resultIntent){\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 907,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 159,
        "startColumnNumber" : 12,
        "endLineNumber" : 159,
        "endColumnNumber" : 76
      },
      "nodeContext" : "Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "TAG",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 170,
      "startColumnNumber" : 18,
      "endLineNumber" : 170,
      "endColumnNumber" : 21
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 170,
        "startColumnNumber" : 12,
        "endLineNumber" : 170,
        "endColumnNumber" : 70
      },
      "nodeContext" : "Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 170,
        "startColumnNumber" : 12,
        "endLineNumber" : 170,
        "endColumnNumber" : 71
      },
      "nodeContext" : "Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 266,
        "startLineNumber" : 169,
        "startColumnNumber" : 63,
        "endLineNumber" : 174,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 321,
        "startLineNumber" : 169,
        "startColumnNumber" : 8,
        "endLineNumber" : 174,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n  Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11732,
        "startLineNumber" : 64,
        "startColumnNumber" : 87,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 895,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11815,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void tryLoadPatchFilesInternal(TinkerApplication app,Intent resultIntent){\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 907,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 170,
        "startColumnNumber" : 12,
        "endLineNumber" : 170,
        "endColumnNumber" : 71
      },
      "nodeContext" : "Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "TAG",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 180,
      "startColumnNumber" : 18,
      "endLineNumber" : 180,
      "endColumnNumber" : 21
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 180,
        "startColumnNumber" : 12,
        "endLineNumber" : 180,
        "endColumnNumber" : 62
      },
      "nodeContext" : "Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 180,
        "startColumnNumber" : 12,
        "endLineNumber" : 180,
        "endColumnNumber" : 63
      },
      "nodeContext" : "Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 307,
        "startLineNumber" : 179,
        "startColumnNumber" : 65,
        "endLineNumber" : 184,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 24,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 364,
        "startLineNumber" : 179,
        "startColumnNumber" : 8,
        "endLineNumber" : 184,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n  Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 30,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11732,
        "startLineNumber" : 64,
        "startColumnNumber" : 87,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 895,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11815,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void tryLoadPatchFilesInternal(TinkerApplication app,Intent resultIntent){\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 907,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 180,
        "startColumnNumber" : 12,
        "endLineNumber" : 180,
        "endColumnNumber" : 63
      },
      "nodeContext" : "Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "TAG",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 195,
      "startColumnNumber" : 22,
      "endLineNumber" : 195,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 195,
        "startColumnNumber" : 16,
        "endLineNumber" : 195,
        "endColumnNumber" : 62
      },
      "nodeContext" : "Log.w(TAG,\"tryLoadPatchFiles:dex check fail\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 195,
        "startColumnNumber" : 16,
        "endLineNumber" : 195,
        "endColumnNumber" : 63
      },
      "nodeContext" : "Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 155,
        "startLineNumber" : 193,
        "startColumnNumber" : 27,
        "endLineNumber" : 197,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 170,
        "startLineNumber" : 193,
        "startColumnNumber" : 12,
        "endLineNumber" : 197,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (!dexCheck) {\n  Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 367,
        "startLineNumber" : 190,
        "startColumnNumber" : 29,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n  if (!dexCheck) {\n    Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n    return;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 23,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 388,
        "startLineNumber" : 190,
        "startColumnNumber" : 8,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (isEnabledForDex) {\n  boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n  if (!dexCheck) {\n    Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n    return;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 25,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11732,
        "startLineNumber" : 64,
        "startColumnNumber" : 87,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 895,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11815,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void tryLoadPatchFilesInternal(TinkerApplication app,Intent resultIntent){\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 907,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 195,
        "startColumnNumber" : 16,
        "endLineNumber" : 195,
        "endColumnNumber" : 63
      },
      "nodeContext" : "Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "TAG",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 207,
      "startColumnNumber" : 22,
      "endLineNumber" : 207,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 207,
        "startColumnNumber" : 16,
        "endLineNumber" : 207,
        "endColumnNumber" : 69
      },
      "nodeContext" : "Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 207,
        "startColumnNumber" : 16,
        "endLineNumber" : 207,
        "endColumnNumber" : 70
      },
      "nodeContext" : "Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 162,
        "startLineNumber" : 205,
        "startColumnNumber" : 27,
        "endLineNumber" : 209,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 177,
        "startLineNumber" : 205,
        "startColumnNumber" : 12,
        "endLineNumber" : 209,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (!libCheck) {\n  Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 365,
        "startLineNumber" : 202,
        "startColumnNumber" : 35,
        "endLineNumber" : 210,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n  if (!libCheck) {\n    Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n    return;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 392,
        "startLineNumber" : 202,
        "startColumnNumber" : 8,
        "endLineNumber" : 210,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (isEnabledForNativeLib) {\n  boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n  if (!libCheck) {\n    Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n    return;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 24,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11732,
        "startLineNumber" : 64,
        "startColumnNumber" : 87,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 895,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11815,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void tryLoadPatchFilesInternal(TinkerApplication app,Intent resultIntent){\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 907,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 207,
        "startColumnNumber" : 16,
        "endLineNumber" : 207,
        "endColumnNumber" : 70
      },
      "nodeContext" : "Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "TAG",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 214,
      "startColumnNumber" : 14,
      "endLineNumber" : 214,
      "endColumnNumber" : 17
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 214,
        "startColumnNumber" : 8,
        "endLineNumber" : 214,
        "endColumnNumber" : 84
      },
      "nodeContext" : "Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 214,
        "startColumnNumber" : 8,
        "endLineNumber" : 214,
        "endColumnNumber" : 85
      },
      "nodeContext" : "Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11732,
        "startLineNumber" : 64,
        "startColumnNumber" : 87,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 895,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11815,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void tryLoadPatchFilesInternal(TinkerApplication app,Intent resultIntent){\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 907,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 214,
        "startColumnNumber" : 8,
        "endLineNumber" : 214,
        "endColumnNumber" : 85
      },
      "nodeContext" : "Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "TAG",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 219,
      "startColumnNumber" : 22,
      "endLineNumber" : 219,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 219,
        "startColumnNumber" : 16,
        "endLineNumber" : 219,
        "endColumnNumber" : 67
      },
      "nodeContext" : "Log.w(TAG,\"tryLoadPatchFiles:resource check fail\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 219,
        "startColumnNumber" : 16,
        "endLineNumber" : 219,
        "endColumnNumber" : 68
      },
      "nodeContext" : "Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 160,
        "startLineNumber" : 217,
        "startColumnNumber" : 32,
        "endLineNumber" : 221,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 180,
        "startLineNumber" : 217,
        "startColumnNumber" : 12,
        "endLineNumber" : 221,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (!resourceCheck) {\n  Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 333,
        "startLineNumber" : 215,
        "startColumnNumber" : 34,
        "endLineNumber" : 222,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n  if (!resourceCheck) {\n    Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n    return;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 23,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 359,
        "startLineNumber" : 215,
        "startColumnNumber" : 8,
        "endLineNumber" : 222,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (isEnabledForResource) {\n  boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n  if (!resourceCheck) {\n    Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n    return;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 25,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11732,
        "startLineNumber" : 64,
        "startColumnNumber" : 87,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 895,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11815,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void tryLoadPatchFilesInternal(TinkerApplication app,Intent resultIntent){\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 907,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 219,
        "startColumnNumber" : 16,
        "endLineNumber" : 219,
        "endColumnNumber" : 68
      },
      "nodeContext" : "Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "TAG",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 240,
      "startColumnNumber" : 22,
      "endLineNumber" : 240,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 240,
        "startColumnNumber" : 16,
        "endLineNumber" : 240,
        "endColumnNumber" : 75
      },
      "nodeContext" : "Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 240,
        "startColumnNumber" : 16,
        "endLineNumber" : 240,
        "endColumnNumber" : 76
      },
      "nodeContext" : "Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 240,
        "startLineNumber" : 238,
        "startColumnNumber" : 107,
        "endLineNumber" : 242,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n  Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 335,
        "startLineNumber" : 238,
        "startColumnNumber" : 12,
        "endLineNumber" : 242,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n  Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 24,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 920,
        "startLineNumber" : 233,
        "startColumnNumber" : 32,
        "endLineNumber" : 249,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  patchInfo.oldVersion=version;\n  patchInfo.oatDir=oatDex;\n  if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n    Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n    return;\n  }\n  if (oatModeChanged) {\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n    SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 56,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 988,
        "startLineNumber" : 232,
        "startColumnNumber" : 8,
        "endLineNumber" : 249,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if ((mainProcess && versionChanged) || oatModeChanged) {\n  patchInfo.oldVersion=version;\n  patchInfo.oatDir=oatDex;\n  if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n    Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n    return;\n  }\n  if (oatModeChanged) {\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n    SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 63,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11732,
        "startLineNumber" : 64,
        "startColumnNumber" : 87,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 895,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11815,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void tryLoadPatchFilesInternal(TinkerApplication app,Intent resultIntent){\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 907,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 240,
        "startColumnNumber" : 16,
        "endLineNumber" : 240,
        "endColumnNumber" : 76
      },
      "nodeContext" : "Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "TAG",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 246,
      "startColumnNumber" : 22,
      "endLineNumber" : 246,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 246,
        "startColumnNumber" : 16,
        "endLineNumber" : 246,
        "endColumnNumber" : 102
      },
      "nodeContext" : "Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 246,
        "startColumnNumber" : 16,
        "endLineNumber" : 246,
        "endColumnNumber" : 103
      },
      "nodeContext" : "Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 404,
        "startLineNumber" : 243,
        "startColumnNumber" : 32,
        "endLineNumber" : 248,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n  SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 424,
        "startLineNumber" : 243,
        "startColumnNumber" : 12,
        "endLineNumber" : 248,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (oatModeChanged) {\n  Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n  SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 19,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 920,
        "startLineNumber" : 233,
        "startColumnNumber" : 32,
        "endLineNumber" : 249,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  patchInfo.oldVersion=version;\n  patchInfo.oatDir=oatDex;\n  if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n    Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n    return;\n  }\n  if (oatModeChanged) {\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n    SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 56,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 988,
        "startLineNumber" : 232,
        "startColumnNumber" : 8,
        "endLineNumber" : 249,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if ((mainProcess && versionChanged) || oatModeChanged) {\n  patchInfo.oldVersion=version;\n  patchInfo.oatDir=oatDex;\n  if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n    Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n    return;\n  }\n  if (oatModeChanged) {\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n    SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 63,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11732,
        "startLineNumber" : 64,
        "startColumnNumber" : 87,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 895,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11815,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void tryLoadPatchFilesInternal(TinkerApplication app,Intent resultIntent){\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 907,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 246,
        "startColumnNumber" : 16,
        "endLineNumber" : 246,
        "endColumnNumber" : 103
      },
      "nodeContext" : "Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "TAG",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 253,
      "startColumnNumber" : 18,
      "endLineNumber" : 253,
      "endColumnNumber" : 21
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 253,
        "startColumnNumber" : 12,
        "endLineNumber" : 253,
        "endColumnNumber" : 67
      },
      "nodeContext" : "Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 253,
        "startColumnNumber" : 12,
        "endLineNumber" : 253,
        "endColumnNumber" : 68
      },
      "nodeContext" : "Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 345,
        "startLineNumber" : 250,
        "startColumnNumber" : 38,
        "endLineNumber" : 255,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n  Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 27,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 375,
        "startLineNumber" : 250,
        "startColumnNumber" : 8,
        "endLineNumber" : 255,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!checkSafeModeCount(app)) {\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n  Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 32,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11732,
        "startLineNumber" : 64,
        "startColumnNumber" : 87,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 895,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11815,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void tryLoadPatchFilesInternal(TinkerApplication app,Intent resultIntent){\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 907,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 253,
        "startColumnNumber" : 12,
        "endLineNumber" : 253,
        "endColumnNumber" : 68
      },
      "nodeContext" : "Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "TAG",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 270,
      "startColumnNumber" : 26,
      "endLineNumber" : 270,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 270,
        "startColumnNumber" : 20,
        "endLineNumber" : 270,
        "endColumnNumber" : 79
      },
      "nodeContext" : "Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 270,
        "startColumnNumber" : 20,
        "endLineNumber" : 270,
        "endColumnNumber" : 80
      },
      "nodeContext" : "Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 256,
        "startLineNumber" : 268,
        "startColumnNumber" : 111,
        "endLineNumber" : 272,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n  Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 351,
        "startLineNumber" : 268,
        "startColumnNumber" : 16,
        "endLineNumber" : 272,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n  Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 24,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 842,
        "startLineNumber" : 261,
        "startColumnNumber" : 29,
        "endLineNumber" : 275,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  patchInfo.fingerPrint=Build.FINGERPRINT;\n  patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n  oatModeChanged=false;\n  if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n    Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 60,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 859,
        "startLineNumber" : 261,
        "startColumnNumber" : 12,
        "endLineNumber" : 275,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (isSystemOTA) {\n  patchInfo.fingerPrint=Build.FINGERPRINT;\n  patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n  oatModeChanged=false;\n  if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n    Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 62,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1159,
        "startLineNumber" : 258,
        "startColumnNumber" : 29,
        "endLineNumber" : 280,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n  if (isSystemOTA) {\n    patchInfo.fingerPrint=Build.FINGERPRINT;\n    patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n    oatModeChanged=false;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n  }\n  if (!loadTinkerJars) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n    return;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 86,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1180,
        "startLineNumber" : 258,
        "startColumnNumber" : 8,
        "endLineNumber" : 280,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (isEnabledForDex) {\n  boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n  if (isSystemOTA) {\n    patchInfo.fingerPrint=Build.FINGERPRINT;\n    patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n    oatModeChanged=false;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n  }\n  if (!loadTinkerJars) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n    return;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 88,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11732,
        "startLineNumber" : 64,
        "startColumnNumber" : 87,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 895,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11815,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void tryLoadPatchFilesInternal(TinkerApplication app,Intent resultIntent){\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 907,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 270,
        "startColumnNumber" : 20,
        "endLineNumber" : 270,
        "endColumnNumber" : 80
      },
      "nodeContext" : "Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "TAG",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 277,
      "startColumnNumber" : 22,
      "endLineNumber" : 277,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 277,
        "startColumnNumber" : 16,
        "endLineNumber" : 277,
        "endColumnNumber" : 68
      },
      "nodeContext" : "Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 277,
        "startColumnNumber" : 16,
        "endLineNumber" : 277,
        "endColumnNumber" : 69
      },
      "nodeContext" : "Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 109,
        "startLineNumber" : 276,
        "startColumnNumber" : 33,
        "endLineNumber" : 279,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 130,
        "startLineNumber" : 276,
        "startColumnNumber" : 12,
        "endLineNumber" : 279,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (!loadTinkerJars) {\n  Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1159,
        "startLineNumber" : 258,
        "startColumnNumber" : 29,
        "endLineNumber" : 280,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n  if (isSystemOTA) {\n    patchInfo.fingerPrint=Build.FINGERPRINT;\n    patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n    oatModeChanged=false;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n  }\n  if (!loadTinkerJars) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n    return;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 86,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1180,
        "startLineNumber" : 258,
        "startColumnNumber" : 8,
        "endLineNumber" : 280,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (isEnabledForDex) {\n  boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n  if (isSystemOTA) {\n    patchInfo.fingerPrint=Build.FINGERPRINT;\n    patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n    oatModeChanged=false;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n  }\n  if (!loadTinkerJars) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n    return;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 88,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11732,
        "startLineNumber" : 64,
        "startColumnNumber" : 87,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 895,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11815,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void tryLoadPatchFilesInternal(TinkerApplication app,Intent resultIntent){\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 907,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 277,
        "startColumnNumber" : 16,
        "endLineNumber" : 277,
        "endColumnNumber" : 69
      },
      "nodeContext" : "Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "TAG",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 286,
      "startColumnNumber" : 22,
      "endLineNumber" : 286,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 286,
        "startColumnNumber" : 16,
        "endLineNumber" : 286,
        "endColumnNumber" : 72
      },
      "nodeContext" : "Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 286,
        "startColumnNumber" : 16,
        "endLineNumber" : 286,
        "endColumnNumber" : 73
      },
      "nodeContext" : "Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 113,
        "startLineNumber" : 285,
        "startColumnNumber" : 38,
        "endLineNumber" : 288,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 139,
        "startLineNumber" : 285,
        "startColumnNumber" : 12,
        "endLineNumber" : 288,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (!loadTinkerResources) {\n  Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 289,
        "startLineNumber" : 283,
        "startColumnNumber" : 34,
        "endLineNumber" : 289,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n  if (!loadTinkerResources) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n    return;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 315,
        "startLineNumber" : 283,
        "startColumnNumber" : 8,
        "endLineNumber" : 289,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (isEnabledForResource) {\n  boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n  if (!loadTinkerResources) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n    return;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 24,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11732,
        "startLineNumber" : 64,
        "startColumnNumber" : 87,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 895,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11815,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void tryLoadPatchFilesInternal(TinkerApplication app,Intent resultIntent){\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 907,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 286,
        "startColumnNumber" : 16,
        "endLineNumber" : 286,
        "endColumnNumber" : 73
      },
      "nodeContext" : "Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "TAG",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 299,
      "startColumnNumber" : 18,
      "endLineNumber" : 299,
      "endColumnNumber" : 21
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 299,
        "startColumnNumber" : 12,
        "endLineNumber" : 299,
        "endColumnNumber" : 89
      },
      "nodeContext" : "Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 299,
        "startColumnNumber" : 12,
        "endLineNumber" : 299,
        "endColumnNumber" : 90
      },
      "nodeContext" : "Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 161,
        "startLineNumber" : 297,
        "startColumnNumber" : 28,
        "endLineNumber" : 300,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ShareTinkerInternals.killAllOtherProcess(app);\n  Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 181,
        "startLineNumber" : 297,
        "startColumnNumber" : 8,
        "endLineNumber" : 300,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (oatModeChanged) {\n  ShareTinkerInternals.killAllOtherProcess(app);\n  Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11732,
        "startLineNumber" : 64,
        "startColumnNumber" : 87,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 895,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11815,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void tryLoadPatchFilesInternal(TinkerApplication app,Intent resultIntent){\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 907,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 299,
        "startColumnNumber" : 12,
        "endLineNumber" : 299,
        "endColumnNumber" : 90
      },
      "nodeContext" : "Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "TAG",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 303,
      "startColumnNumber" : 14,
      "endLineNumber" : 303,
      "endColumnNumber" : 17
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 303,
        "startColumnNumber" : 8,
        "endLineNumber" : 303,
        "endColumnNumber" : 54
      },
      "nodeContext" : "Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 303,
        "startColumnNumber" : 8,
        "endLineNumber" : 303,
        "endColumnNumber" : 55
      },
      "nodeContext" : "Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11732,
        "startLineNumber" : 64,
        "startColumnNumber" : 87,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 895,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11815,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 305,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void tryLoadPatchFilesInternal(TinkerApplication app,Intent resultIntent){\n  final int tinkerFlag=app.getTinkerFlags();\n  if (!ShareTinkerInternals.isTinkerEnabled(tinkerFlag)) {\n    Log.w(TAG,\"tryLoadPatchFiles: tinker is disable, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  if (ShareTinkerInternals.isInPatchProcess(app)) {\n    Log.w(TAG,\"tryLoadPatchFiles: we don't load patch with :patch process itself, just return\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_DISABLE);\n    return;\n  }\n  File patchDirectoryFile=SharePatchFileUtil.getPatchDirectory(app);\n  if (patchDirectoryFile == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:getPatchDirectory == null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchDirectoryPath=patchDirectoryFile.getAbsolutePath();\n  if (!patchDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch dir not exist:\" + patchDirectoryPath);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n  if (!patchInfoFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST);\n    return;\n  }\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n  patchInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  if (patchInfo == null) {\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  String oldVersion=patchInfo.oldVersion;\n  String newVersion=patchInfo.newVersion;\n  String oatDex=patchInfo.oatDir;\n  if (oldVersion == null || newVersion == null || oatDex == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchInfoCorrupted\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OLD_VERSION,oldVersion);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_NEW_VERSION,newVersion);\n  boolean mainProcess=ShareTinkerInternals.isInMainProcess(app);\n  boolean versionChanged=!(oldVersion.equals(newVersion));\n  boolean oatModeChanged=oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n  oatDex=ShareTinkerInternals.getCurrentOatMode(app,oatDex);\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,oatDex);\n  String version=oldVersion;\n  if (versionChanged && mainProcess) {\n    version=newVersion;\n  }\n  if (ShareTinkerInternals.isNullOrNil(version)) {\n    Log.w(TAG,\"tryLoadPatchFiles:version is blank, wait main process to restart\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK);\n    return;\n  }\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(version);\n  if (patchName == null) {\n    Log.w(TAG,\"tryLoadPatchFiles:patchName is null\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  String patchVersionDirectory=patchDirectoryPath + \"/\" + patchName;\n  File patchVersionDirectoryFile=new File(patchVersionDirectory);\n  if (!patchVersionDirectoryFile.exists()) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionDirectoryNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST);\n    return;\n  }\n  final String patchVersionFileRelPath=SharePatchFileUtil.getPatchVersionFile(version);\n  File patchVersionFile=(patchVersionFileRelPath != null ? new File(patchVersionDirectoryFile.getAbsolutePath(),patchVersionFileRelPath) : null);\n  if (!SharePatchFileUtil.isLegalFile(patchVersionFile)) {\n    Log.w(TAG,\"tryLoadPatchFiles:onPatchVersionFileNotFound\");\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST);\n    return;\n  }\n  ShareSecurityCheck securityCheck=new ShareSecurityCheck(app);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(app,tinkerFlag,patchVersionFile,securityCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    Log.w(TAG,\"tryLoadPatchFiles:checkTinkerPackage\");\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,returnCode);\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n    return;\n  }\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_CONFIG,securityCheck.getPackagePropertiesIfPresent());\n  final boolean isEnabledForDex=ShareTinkerInternals.isTinkerEnabledForDex(tinkerFlag);\n  if (isEnabledForDex) {\n    boolean dexCheck=TinkerDexLoader.checkComplete(patchVersionDirectory,securityCheck,oatDex,resultIntent);\n    if (!dexCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:dex check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForNativeLib=ShareTinkerInternals.isTinkerEnabledForNativeLib(tinkerFlag);\n  if (isEnabledForNativeLib) {\n    boolean libCheck=TinkerSoLoader.checkComplete(patchVersionDirectory,securityCheck,resultIntent);\n    if (!libCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:native lib check fail\");\n      return;\n    }\n  }\n  final boolean isEnabledForResource=ShareTinkerInternals.isTinkerEnabledForResource(tinkerFlag);\n  Log.w(TAG,\"tryLoadPatchFiles:isEnabledForResource:\" + isEnabledForResource);\n  if (isEnabledForResource) {\n    boolean resourceCheck=TinkerResourceLoader.checkComplete(app,patchVersionDirectory,securityCheck,resultIntent);\n    if (!resourceCheck) {\n      Log.w(TAG,\"tryLoadPatchFiles:resource check fail\");\n      return;\n    }\n  }\n  boolean isSystemOTA=ShareTinkerInternals.isVmArt() && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint) && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();\n  resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,isSystemOTA);\n  if ((mainProcess && versionChanged) || oatModeChanged) {\n    patchInfo.oldVersion=version;\n    patchInfo.oatDir=oatDex;\n    if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n      ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n      Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n      return;\n    }\n    if (oatModeChanged) {\n      Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files\");\n      SharePatchFileUtil.deleteDir(patchVersionDirectory + \"/\" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    }\n  }\n  if (!checkSafeModeCount(app)) {\n    resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n    ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n    Log.w(TAG,\"tryLoadPatchFiles:checkSafeModeCount fail\");\n    return;\n  }\n  if (isEnabledForDex) {\n    boolean loadTinkerJars=TinkerDexLoader.loadTinkerJars(app,patchVersionDirectory,oatDex,resultIntent,isSystemOTA);\n    if (isSystemOTA) {\n      patchInfo.fingerPrint=Build.FINGERPRINT;\n      patchInfo.oatDir=loadTinkerJars ? ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH : ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n      oatModeChanged=false;\n      if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,patchInfo,patchInfoLockFile)) {\n        ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL);\n        Log.w(TAG,\"tryLoadPatchFiles:onReWritePatchInfoCorrupted\");\n        return;\n      }\n      resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR,patchInfo.oatDir);\n    }\n    if (!loadTinkerJars) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadDexesFail\");\n      return;\n    }\n  }\n  if (isEnabledForResource) {\n    boolean loadTinkerResources=TinkerResourceLoader.loadTinkerResources(app,patchVersionDirectory,resultIntent);\n    if (!loadTinkerResources) {\n      Log.w(TAG,\"tryLoadPatchFiles:onPatchLoadResourcesFail\");\n      return;\n    }\n  }\n  if (isEnabledForDex && isEnabledForResource) {\n    ComponentHotplug.install(app,securityCheck);\n  }\n  if (oatModeChanged) {\n    ShareTinkerInternals.killAllOtherProcess(app);\n    Log.i(TAG,\"tryLoadPatchFiles:oatModeChanged, try to kill all other process\");\n  }\n  ShareIntentUtil.setIntentReturnCode(resultIntent,ShareConstants.ERROR_LOAD_OK);\n  Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n  return;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 907,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 303,
        "startColumnNumber" : 8,
        "endLineNumber" : 303,
        "endColumnNumber" : 55
      },
      "nodeContext" : "Log.i(TAG,\"tryLoadPatchFiles: load end, ok!\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 3,
    "startLineNumber" : 68,
    "startColumnNumber" : 18,
    "endLineNumber" : 68,
    "endColumnNumber" : 21
  }, {
    "charLength" : 3,
    "startLineNumber" : 73,
    "startColumnNumber" : 18,
    "endLineNumber" : 73,
    "endColumnNumber" : 21
  }, {
    "charLength" : 3,
    "startLineNumber" : 81,
    "startColumnNumber" : 18,
    "endLineNumber" : 81,
    "endColumnNumber" : 21
  }, {
    "charLength" : 3,
    "startLineNumber" : 90,
    "startColumnNumber" : 18,
    "endLineNumber" : 90,
    "endColumnNumber" : 21
  }, {
    "charLength" : 3,
    "startLineNumber" : 100,
    "startColumnNumber" : 18,
    "endLineNumber" : 100,
    "endColumnNumber" : 21
  }, {
    "charLength" : 3,
    "startLineNumber" : 120,
    "startColumnNumber" : 18,
    "endLineNumber" : 120,
    "endColumnNumber" : 21
  }, {
    "charLength" : 3,
    "startLineNumber" : 140,
    "startColumnNumber" : 18,
    "endLineNumber" : 140,
    "endColumnNumber" : 21
  }, {
    "charLength" : 3,
    "startLineNumber" : 148,
    "startColumnNumber" : 18,
    "endLineNumber" : 148,
    "endColumnNumber" : 21
  }, {
    "charLength" : 3,
    "startLineNumber" : 159,
    "startColumnNumber" : 18,
    "endLineNumber" : 159,
    "endColumnNumber" : 21
  }, {
    "charLength" : 3,
    "startLineNumber" : 170,
    "startColumnNumber" : 18,
    "endLineNumber" : 170,
    "endColumnNumber" : 21
  }, {
    "charLength" : 3,
    "startLineNumber" : 180,
    "startColumnNumber" : 18,
    "endLineNumber" : 180,
    "endColumnNumber" : 21
  }, {
    "charLength" : 3,
    "startLineNumber" : 195,
    "startColumnNumber" : 22,
    "endLineNumber" : 195,
    "endColumnNumber" : 25
  }, {
    "charLength" : 3,
    "startLineNumber" : 207,
    "startColumnNumber" : 22,
    "endLineNumber" : 207,
    "endColumnNumber" : 25
  }, {
    "charLength" : 3,
    "startLineNumber" : 214,
    "startColumnNumber" : 14,
    "endLineNumber" : 214,
    "endColumnNumber" : 17
  }, {
    "charLength" : 3,
    "startLineNumber" : 219,
    "startColumnNumber" : 22,
    "endLineNumber" : 219,
    "endColumnNumber" : 25
  }, {
    "charLength" : 3,
    "startLineNumber" : 240,
    "startColumnNumber" : 22,
    "endLineNumber" : 240,
    "endColumnNumber" : 25
  }, {
    "charLength" : 3,
    "startLineNumber" : 246,
    "startColumnNumber" : 22,
    "endLineNumber" : 246,
    "endColumnNumber" : 25
  }, {
    "charLength" : 3,
    "startLineNumber" : 253,
    "startColumnNumber" : 18,
    "endLineNumber" : 253,
    "endColumnNumber" : 21
  }, {
    "charLength" : 3,
    "startLineNumber" : 270,
    "startColumnNumber" : 26,
    "endLineNumber" : 270,
    "endColumnNumber" : 29
  }, {
    "charLength" : 3,
    "startLineNumber" : 277,
    "startColumnNumber" : 22,
    "endLineNumber" : 277,
    "endColumnNumber" : 25
  }, {
    "charLength" : 3,
    "startLineNumber" : 286,
    "startColumnNumber" : 22,
    "endLineNumber" : 286,
    "endColumnNumber" : 25
  }, {
    "charLength" : 3,
    "startLineNumber" : 299,
    "startColumnNumber" : 18,
    "endLineNumber" : 299,
    "endColumnNumber" : 21
  }, {
    "charLength" : 3,
    "startLineNumber" : 303,
    "startColumnNumber" : 14,
    "endLineNumber" : 303,
    "endColumnNumber" : 17
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 18,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 19,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 20,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 21,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 22,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 18,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 19,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 20,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 21,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 22,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 14,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 18,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 19,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 20,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 21,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 22,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 18,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 19,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 20,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 21,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 22,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 18,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 19,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 20,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 21,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 22,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 18,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 18,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 18,
    "secondKey" : 3,
    "layout" : 8
  }, {
    "firstKey" : 18,
    "secondKey" : 4,
    "layout" : 8
  }, {
    "firstKey" : 18,
    "secondKey" : 5,
    "layout" : 8
  }, {
    "firstKey" : 18,
    "secondKey" : 6,
    "layout" : 8
  }, {
    "firstKey" : 18,
    "secondKey" : 7,
    "layout" : 8
  }, {
    "firstKey" : 18,
    "secondKey" : 8,
    "layout" : 8
  }, {
    "firstKey" : 18,
    "secondKey" : 9,
    "layout" : 8
  }, {
    "firstKey" : 18,
    "secondKey" : 10,
    "layout" : 8
  }, {
    "firstKey" : 18,
    "secondKey" : 11,
    "layout" : 8
  }, {
    "firstKey" : 18,
    "secondKey" : 12,
    "layout" : 8
  }, {
    "firstKey" : 18,
    "secondKey" : 13,
    "layout" : 8
  }, {
    "firstKey" : 18,
    "secondKey" : 14,
    "layout" : 8
  }, {
    "firstKey" : 18,
    "secondKey" : 15,
    "layout" : 8
  }, {
    "firstKey" : 18,
    "secondKey" : 16,
    "layout" : 8
  }, {
    "firstKey" : 18,
    "secondKey" : 17,
    "layout" : 8
  }, {
    "firstKey" : 18,
    "secondKey" : 19,
    "layout" : 6
  }, {
    "firstKey" : 18,
    "secondKey" : 20,
    "layout" : 8
  }, {
    "firstKey" : 18,
    "secondKey" : 21,
    "layout" : 8
  }, {
    "firstKey" : 18,
    "secondKey" : 22,
    "layout" : 8
  }, {
    "firstKey" : 19,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 19,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 19,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 19,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 19,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 19,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 19,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 19,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 19,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 19,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 19,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 19,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 19,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 19,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 19,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 19,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 19,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 19,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 19,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 20,
    "layout" : 6
  }, {
    "firstKey" : 19,
    "secondKey" : 21,
    "layout" : 6
  }, {
    "firstKey" : 19,
    "secondKey" : 22,
    "layout" : 6
  }, {
    "firstKey" : 20,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 20,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 20,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 20,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 20,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 20,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 20,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 20,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 20,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 20,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 20,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 20,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 20,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 20,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 20,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 20,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 20,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 20,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 20,
    "secondKey" : 18,
    "layout" : 6
  }, {
    "firstKey" : 20,
    "secondKey" : 19,
    "layout" : 6
  }, {
    "firstKey" : 20,
    "secondKey" : 21,
    "layout" : 6
  }, {
    "firstKey" : 20,
    "secondKey" : 22,
    "layout" : 6
  }, {
    "firstKey" : 21,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 21,
    "layout" : 2
  } ]
}