{
  "id" : 221,
  "expression" : "usageMap.entrySet()",
  "projectName" : "skylot@jadx",
  "commitID" : "eb2a1734d3e02c19814f628e10bf80de5fb19772",
  "filePath" : "/jadx-core/src/main/java/jadx/core/dex/visitors/regions/ProcessVariables.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "usageMap.entrySet()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 190,
      "startColumnNumber" : 42,
      "endLineNumber" : 190,
      "endColumnNumber" : 61
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 190,
        "startColumnNumber" : 42,
        "endLineNumber" : 190,
        "endColumnNumber" : 72
      },
      "nodeContext" : "usageMap.entrySet().iterator()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 190,
        "startColumnNumber" : 35,
        "endLineNumber" : 190,
        "endColumnNumber" : 72
      },
      "nodeContext" : "umIt=usageMap.entrySet().iterator()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 190,
        "startColumnNumber" : 2,
        "endLineNumber" : 190,
        "endColumnNumber" : 73
      },
      "nodeContext" : "Iterator<Entry<Variable,Usage>> umIt=usageMap.entrySet().iterator();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2476,
        "startLineNumber" : 170,
        "startColumnNumber" : 56,
        "endLineNumber" : 264,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (mth.isNoCode()) {\n    return;\n  }\n  List<RegisterArg> mthArguments=mth.getArguments(true);\n  Map<Variable,Usage> usageMap=new LinkedHashMap<>();\n  for (  RegisterArg arg : mthArguments) {\n    addToUsageMap(arg,usageMap);\n  }\n  IRegionVisitor collect=new CollectUsageRegionVisitor(usageMap);\n  DepthRegionTraversal.traverse(mth,collect);\n  for (  RegisterArg arg : mthArguments) {\n    usageMap.remove(new Variable(arg));\n  }\n  Iterator<Entry<Variable,Usage>> umIt=usageMap.entrySet().iterator();\n  while (umIt.hasNext()) {\n    Entry<Variable,Usage> entry=umIt.next();\n    Usage u=entry.getValue();\n    if (u.getAssigns().isEmpty()) {\n      umIt.remove();\n      continue;\n    }\n    InsnNode parentInsn=u.getArg().getParentInsn();\n    if (parentInsn == null || parentInsn.getType() == InsnType.MOVE_EXCEPTION) {\n      umIt.remove();\n    }\n  }\n  if (usageMap.isEmpty()) {\n    return;\n  }\n  for (Iterator<Entry<Variable,Usage>> it=usageMap.entrySet().iterator(); it.hasNext(); ) {\n    Entry<Variable,Usage> entry=it.next();\n    Usage u=entry.getValue();\n    for (    IRegion assignRegion : u.getAssigns()) {\n      if (u.getArgRegion() == assignRegion && canDeclareInRegion(u,assignRegion) && declareAtAssign(u)) {\n        it.remove();\n        break;\n      }\n    }\n  }\n  if (usageMap.isEmpty()) {\n    return;\n  }\n  for (  Entry<Variable,Usage> entry : usageMap.entrySet()) {\n    Usage u=entry.getValue();\n    Set<IRegion> set=u.getUseRegions();\n    for (Iterator<IRegion> it=set.iterator(); it.hasNext(); ) {\n      IRegion r=it.next();\n      IRegion parent=r.getParent();\n      if (parent != null && set.contains(parent)) {\n        it.remove();\n      }\n    }\n    IRegion region=null;\n    if (!set.isEmpty()) {\n      region=set.iterator().next();\n    }\n else     if (!u.getAssigns().isEmpty()) {\n      region=u.getAssigns().iterator().next();\n    }\n    if (region == null) {\n      continue;\n    }\n    IRegion parent=region;\n    boolean declared=false;\n    while (parent != null) {\n      if (canDeclareInRegion(u,region)) {\n        declareVar(region,u.getArg());\n        declared=true;\n        break;\n      }\n      region=parent;\n      parent=region.getParent();\n    }\n    if (!declared) {\n      declareVar(mth.getRegion(),u.getArg());\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 424,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2542,
        "startLineNumber" : 169,
        "startColumnNumber" : 1,
        "endLineNumber" : 264,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override public void visit(MethodNode mth) throws JadxException {\n  if (mth.isNoCode()) {\n    return;\n  }\n  List<RegisterArg> mthArguments=mth.getArguments(true);\n  Map<Variable,Usage> usageMap=new LinkedHashMap<>();\n  for (  RegisterArg arg : mthArguments) {\n    addToUsageMap(arg,usageMap);\n  }\n  IRegionVisitor collect=new CollectUsageRegionVisitor(usageMap);\n  DepthRegionTraversal.traverse(mth,collect);\n  for (  RegisterArg arg : mthArguments) {\n    usageMap.remove(new Variable(arg));\n  }\n  Iterator<Entry<Variable,Usage>> umIt=usageMap.entrySet().iterator();\n  while (umIt.hasNext()) {\n    Entry<Variable,Usage> entry=umIt.next();\n    Usage u=entry.getValue();\n    if (u.getAssigns().isEmpty()) {\n      umIt.remove();\n      continue;\n    }\n    InsnNode parentInsn=u.getArg().getParentInsn();\n    if (parentInsn == null || parentInsn.getType() == InsnType.MOVE_EXCEPTION) {\n      umIt.remove();\n    }\n  }\n  if (usageMap.isEmpty()) {\n    return;\n  }\n  for (Iterator<Entry<Variable,Usage>> it=usageMap.entrySet().iterator(); it.hasNext(); ) {\n    Entry<Variable,Usage> entry=it.next();\n    Usage u=entry.getValue();\n    for (    IRegion assignRegion : u.getAssigns()) {\n      if (u.getArgRegion() == assignRegion && canDeclareInRegion(u,assignRegion) && declareAtAssign(u)) {\n        it.remove();\n        break;\n      }\n    }\n  }\n  if (usageMap.isEmpty()) {\n    return;\n  }\n  for (  Entry<Variable,Usage> entry : usageMap.entrySet()) {\n    Usage u=entry.getValue();\n    Set<IRegion> set=u.getUseRegions();\n    for (Iterator<IRegion> it=set.iterator(); it.hasNext(); ) {\n      IRegion r=it.next();\n      IRegion parent=r.getParent();\n      if (parent != null && set.contains(parent)) {\n        it.remove();\n      }\n    }\n    IRegion region=null;\n    if (!set.isEmpty()) {\n      region=set.iterator().next();\n    }\n else     if (!u.getAssigns().isEmpty()) {\n      region=u.getAssigns().iterator().next();\n    }\n    if (region == null) {\n      continue;\n    }\n    IRegion parent=region;\n    boolean declared=false;\n    while (parent != null) {\n      if (canDeclareInRegion(u,region)) {\n        declareVar(region,u.getArg());\n        declared=true;\n        break;\n      }\n      region=parent;\n      parent=region.getParent();\n    }\n    if (!declared) {\n      declareVar(mth.getRegion(),u.getArg());\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 436,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 190,
        "startColumnNumber" : 2,
        "endLineNumber" : 190,
        "endColumnNumber" : 73
      },
      "nodeContext" : "Iterator<Entry<Variable,Usage>> umIt=usageMap.entrySet().iterator();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 18,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "java.util.Set<java.util.Map.Entry<jadx.core.dex.visitors.regions.ProcessVariables.Variable,jadx.core.dex.visitors.regions.ProcessVariables.Usage>>"
  }, {
    "nodeContext" : "usageMap.entrySet()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 210,
      "startColumnNumber" : 45,
      "endLineNumber" : 210,
      "endColumnNumber" : 64
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 210,
        "startColumnNumber" : 45,
        "endLineNumber" : 210,
        "endColumnNumber" : 75
      },
      "nodeContext" : "usageMap.entrySet().iterator()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationExpression,fragments]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 210,
        "startColumnNumber" : 40,
        "endLineNumber" : 210,
        "endColumnNumber" : 75
      },
      "nodeContext" : "it=usageMap.entrySet().iterator()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ForStatement,initializers]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 210,
        "startColumnNumber" : 7,
        "endLineNumber" : 210,
        "endColumnNumber" : 75
      },
      "nodeContext" : "Iterator<Entry<Variable,Usage>> it=usageMap.entrySet().iterator()",
      "nodeType" : "VariableDeclarationExpression",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 438,
        "startLineNumber" : 210,
        "startColumnNumber" : 2,
        "endLineNumber" : 222,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (Iterator<Entry<Variable,Usage>> it=usageMap.entrySet().iterator(); it.hasNext(); ) {\n  Entry<Variable,Usage> entry=it.next();\n  Usage u=entry.getValue();\n  for (  IRegion assignRegion : u.getAssigns()) {\n    if (u.getArgRegion() == assignRegion && canDeclareInRegion(u,assignRegion) && declareAtAssign(u)) {\n      it.remove();\n      break;\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 74,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2476,
        "startLineNumber" : 170,
        "startColumnNumber" : 56,
        "endLineNumber" : 264,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (mth.isNoCode()) {\n    return;\n  }\n  List<RegisterArg> mthArguments=mth.getArguments(true);\n  Map<Variable,Usage> usageMap=new LinkedHashMap<>();\n  for (  RegisterArg arg : mthArguments) {\n    addToUsageMap(arg,usageMap);\n  }\n  IRegionVisitor collect=new CollectUsageRegionVisitor(usageMap);\n  DepthRegionTraversal.traverse(mth,collect);\n  for (  RegisterArg arg : mthArguments) {\n    usageMap.remove(new Variable(arg));\n  }\n  Iterator<Entry<Variable,Usage>> umIt=usageMap.entrySet().iterator();\n  while (umIt.hasNext()) {\n    Entry<Variable,Usage> entry=umIt.next();\n    Usage u=entry.getValue();\n    if (u.getAssigns().isEmpty()) {\n      umIt.remove();\n      continue;\n    }\n    InsnNode parentInsn=u.getArg().getParentInsn();\n    if (parentInsn == null || parentInsn.getType() == InsnType.MOVE_EXCEPTION) {\n      umIt.remove();\n    }\n  }\n  if (usageMap.isEmpty()) {\n    return;\n  }\n  for (Iterator<Entry<Variable,Usage>> it=usageMap.entrySet().iterator(); it.hasNext(); ) {\n    Entry<Variable,Usage> entry=it.next();\n    Usage u=entry.getValue();\n    for (    IRegion assignRegion : u.getAssigns()) {\n      if (u.getArgRegion() == assignRegion && canDeclareInRegion(u,assignRegion) && declareAtAssign(u)) {\n        it.remove();\n        break;\n      }\n    }\n  }\n  if (usageMap.isEmpty()) {\n    return;\n  }\n  for (  Entry<Variable,Usage> entry : usageMap.entrySet()) {\n    Usage u=entry.getValue();\n    Set<IRegion> set=u.getUseRegions();\n    for (Iterator<IRegion> it=set.iterator(); it.hasNext(); ) {\n      IRegion r=it.next();\n      IRegion parent=r.getParent();\n      if (parent != null && set.contains(parent)) {\n        it.remove();\n      }\n    }\n    IRegion region=null;\n    if (!set.isEmpty()) {\n      region=set.iterator().next();\n    }\n else     if (!u.getAssigns().isEmpty()) {\n      region=u.getAssigns().iterator().next();\n    }\n    if (region == null) {\n      continue;\n    }\n    IRegion parent=region;\n    boolean declared=false;\n    while (parent != null) {\n      if (canDeclareInRegion(u,region)) {\n        declareVar(region,u.getArg());\n        declared=true;\n        break;\n      }\n      region=parent;\n      parent=region.getParent();\n    }\n    if (!declared) {\n      declareVar(mth.getRegion(),u.getArg());\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 424,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2542,
        "startLineNumber" : 169,
        "startColumnNumber" : 1,
        "endLineNumber" : 264,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override public void visit(MethodNode mth) throws JadxException {\n  if (mth.isNoCode()) {\n    return;\n  }\n  List<RegisterArg> mthArguments=mth.getArguments(true);\n  Map<Variable,Usage> usageMap=new LinkedHashMap<>();\n  for (  RegisterArg arg : mthArguments) {\n    addToUsageMap(arg,usageMap);\n  }\n  IRegionVisitor collect=new CollectUsageRegionVisitor(usageMap);\n  DepthRegionTraversal.traverse(mth,collect);\n  for (  RegisterArg arg : mthArguments) {\n    usageMap.remove(new Variable(arg));\n  }\n  Iterator<Entry<Variable,Usage>> umIt=usageMap.entrySet().iterator();\n  while (umIt.hasNext()) {\n    Entry<Variable,Usage> entry=umIt.next();\n    Usage u=entry.getValue();\n    if (u.getAssigns().isEmpty()) {\n      umIt.remove();\n      continue;\n    }\n    InsnNode parentInsn=u.getArg().getParentInsn();\n    if (parentInsn == null || parentInsn.getType() == InsnType.MOVE_EXCEPTION) {\n      umIt.remove();\n    }\n  }\n  if (usageMap.isEmpty()) {\n    return;\n  }\n  for (Iterator<Entry<Variable,Usage>> it=usageMap.entrySet().iterator(); it.hasNext(); ) {\n    Entry<Variable,Usage> entry=it.next();\n    Usage u=entry.getValue();\n    for (    IRegion assignRegion : u.getAssigns()) {\n      if (u.getArgRegion() == assignRegion && canDeclareInRegion(u,assignRegion) && declareAtAssign(u)) {\n        it.remove();\n        break;\n      }\n    }\n  }\n  if (usageMap.isEmpty()) {\n    return;\n  }\n  for (  Entry<Variable,Usage> entry : usageMap.entrySet()) {\n    Usage u=entry.getValue();\n    Set<IRegion> set=u.getUseRegions();\n    for (Iterator<IRegion> it=set.iterator(); it.hasNext(); ) {\n      IRegion r=it.next();\n      IRegion parent=r.getParent();\n      if (parent != null && set.contains(parent)) {\n        it.remove();\n      }\n    }\n    IRegion region=null;\n    if (!set.isEmpty()) {\n      region=set.iterator().next();\n    }\n else     if (!u.getAssigns().isEmpty()) {\n      region=u.getAssigns().iterator().next();\n    }\n    if (region == null) {\n      continue;\n    }\n    IRegion parent=region;\n    boolean declared=false;\n    while (parent != null) {\n      if (canDeclareInRegion(u,region)) {\n        declareVar(region,u.getArg());\n        declared=true;\n        break;\n      }\n      region=parent;\n      parent=region.getParent();\n    }\n    if (!declared) {\n      declareVar(mth.getRegion(),u.getArg());\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 436,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ForStatement,initializers]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 210,
        "startColumnNumber" : 7,
        "endLineNumber" : 210,
        "endColumnNumber" : 75
      },
      "nodeContext" : "Iterator<Entry<Variable,Usage>> it=usageMap.entrySet().iterator()",
      "nodeType" : "VariableDeclarationExpression",
      "astNodeNumber" : 18,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "java.util.Set<java.util.Map.Entry<jadx.core.dex.visitors.regions.ProcessVariables.Variable,jadx.core.dex.visitors.regions.ProcessVariables.Usage>>"
  } ],
  "positionList" : [ {
    "charLength" : 19,
    "startLineNumber" : 190,
    "startColumnNumber" : 42,
    "endLineNumber" : 190,
    "endColumnNumber" : 61
  }, {
    "charLength" : 19,
    "startLineNumber" : 210,
    "startColumnNumber" : 45,
    "endLineNumber" : 210,
    "endColumnNumber" : 64
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  } ]
}