{
  "id" : 83,
  "expression" : "new AtomicInteger(0)",
  "projectName" : "alibaba@nacos",
  "commitID" : "6027d36222bb3cb89f0fb5fde147f916055427f5",
  "filePath" : "core/src/main/java/com/alibaba/nacos/core/remote/ConnectionManager.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new AtomicInteger(0)",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 20,
      "startLineNumber" : 131,
      "startColumnNumber" : 56,
      "endLineNumber" : 131,
      "endColumnNumber" : 76
    },
    "astNodeNumber" : 4,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 131,
        "startColumnNumber" : 12,
        "endLineNumber" : 131,
        "endColumnNumber" : 77
      },
      "nodeContext" : "connectionForClientIp.putIfAbsent(clientIp,new AtomicInteger(0))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 131,
        "startColumnNumber" : 12,
        "endLineNumber" : 131,
        "endColumnNumber" : 78
      },
      "nodeContext" : "connectionForClientIp.putIfAbsent(clientIp,new AtomicInteger(0));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 130,
        "startColumnNumber" : 58,
        "endLineNumber" : 132,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  connectionForClientIp.putIfAbsent(clientIp,new AtomicInteger(0));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 140,
        "startLineNumber" : 130,
        "startColumnNumber" : 8,
        "endLineNumber" : 132,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!connectionForClientIp.containsKey(clientIp)) {\n  connectionForClientIp.putIfAbsent(clientIp,new AtomicInteger(0));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 16,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1707,
        "startLineNumber" : 123,
        "startColumnNumber" : 54,
        "endLineNumber" : 161,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (isOverLimit()) {\n    return false;\n  }\n  String clientIp=connection.getMetaInfo().clientIp;\n  if (!connectionForClientIp.containsKey(clientIp)) {\n    connectionForClientIp.putIfAbsent(clientIp,new AtomicInteger(0));\n  }\n  AtomicInteger currentCount=connectionForClientIp.get(clientIp);\n  if (connectionLimitRule != null) {\n    if (connectionLimitRule.getCountLimitPerClientIp().containsKey(clientIp)) {\n      Integer integer=connectionLimitRule.getCountLimitPerClientIp().get(clientIp);\n      if (integer != null && integer.intValue() >= 0) {\n        return currentCount.get() < integer.intValue();\n      }\n    }\n    String appName=connection.getMetaInfo().getAppName();\n    if (StringUtils.isNotBlank(appName) && connectionLimitRule.getCountLimitPerClientApp().containsKey(appName)) {\n      Integer integerApp=connectionLimitRule.getCountLimitPerClientApp().get(appName);\n      if (integerApp != null && integerApp.intValue() >= 0) {\n        return currentCount.get() < integerApp.intValue();\n      }\n    }\n    int countLimitPerClientIpDefault=connectionLimitRule.getCountLimitPerClientIpDefault();\n    return countLimitPerClientIpDefault <= 0 || currentCount.get() < countLimitPerClientIpDefault;\n  }\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 157,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1757,
        "startLineNumber" : 123,
        "startColumnNumber" : 4,
        "endLineNumber" : 161,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private boolean checkLimit(Connection connection){\n  if (isOverLimit()) {\n    return false;\n  }\n  String clientIp=connection.getMetaInfo().clientIp;\n  if (!connectionForClientIp.containsKey(clientIp)) {\n    connectionForClientIp.putIfAbsent(clientIp,new AtomicInteger(0));\n  }\n  AtomicInteger currentCount=connectionForClientIp.get(clientIp);\n  if (connectionLimitRule != null) {\n    if (connectionLimitRule.getCountLimitPerClientIp().containsKey(clientIp)) {\n      Integer integer=connectionLimitRule.getCountLimitPerClientIp().get(clientIp);\n      if (integer != null && integer.intValue() >= 0) {\n        return currentCount.get() < integer.intValue();\n      }\n    }\n    String appName=connection.getMetaInfo().getAppName();\n    if (StringUtils.isNotBlank(appName) && connectionLimitRule.getCountLimitPerClientApp().containsKey(appName)) {\n      Integer integerApp=connectionLimitRule.getCountLimitPerClientApp().get(appName);\n      if (integerApp != null && integerApp.intValue() >= 0) {\n        return currentCount.get() < integerApp.intValue();\n      }\n    }\n    int countLimitPerClientIpDefault=connectionLimitRule.getCountLimitPerClientIpDefault();\n    return countLimitPerClientIpDefault <= 0 || currentCount.get() < countLimitPerClientIpDefault;\n  }\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 165,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 131,
        "startColumnNumber" : 12,
        "endLineNumber" : 131,
        "endColumnNumber" : 78
      },
      "nodeContext" : "connectionForClientIp.putIfAbsent(clientIp,new AtomicInteger(0));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "java.util.concurrent.atomic.AtomicInteger"
  } ],
  "positionList" : [ {
    "charLength" : 20,
    "startLineNumber" : 131,
    "startColumnNumber" : 56,
    "endLineNumber" : 131,
    "endColumnNumber" : 76
  } ],
  "layoutRelationDataList" : [ ]
}