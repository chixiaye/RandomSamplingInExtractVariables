{
  "id" : 289,
  "expression" : "'('",
  "projectName" : "DrKLO@Telegram",
  "commitID" : "11fbfb1329df700b203e1852a71c4c11b5ab12f4",
  "filePath" : "/TMessagesProj/src/main/java/org/telegram/PhoneFormat/PhoneRule.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "'('",
    "nodeType" : "CharacterLiteral",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 69,
      "startColumnNumber" : 21,
      "endLineNumber" : 69,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 69,
        "startColumnNumber" : 16,
        "endLineNumber" : 69,
        "endColumnNumber" : 25
      },
      "nodeContext" : "case '(':",
      "nodeType" : "SwitchCase",
      "astNodeNumber" : 2,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1395,
        "startLineNumber" : 48,
        "startColumnNumber" : 12,
        "endLineNumber" : 83,
        "endColumnNumber" : 13
      },
      "nodeContext" : "switch (ch) {\ncase 'c':  hadC=true;\nif (intlPrefix != null) {\n  res.append(intlPrefix);\n}\nbreak;\ncase 'n':hadN=true;\nif (trunkPrefix != null) {\nres.append(trunkPrefix);\n}\nbreak;\ncase '#':if (spot < str.length()) {\nres.append(str.substring(spot,spot + 1));\nspot++;\n}\n else if (hasOpen) {\nres.append(\" \");\n}\nbreak;\ncase '(':if (spot < str.length()) {\nhasOpen=true;\n}\ndefault:if (!(ch == ' ' && i > 0 && ((format.charAt(i - 1) == 'n' && trunkPrefix == null) || (format.charAt(i - 1) == 'c' && intlPrefix == null)))) {\nif (spot < str.length() || (hasOpen && ch == ')')) {\nres.append(format.substring(i,i + 1));\nif (ch == ')') {\nhasOpen=false;\n}\n}\n}\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 157,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1459,
        "startLineNumber" : 46,
        "startColumnNumber" : 50,
        "endLineNumber" : 84,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  char ch=format.charAt(i);\nswitch (ch) {\ncase 'c':    hadC=true;\n  if (intlPrefix != null) {\n    res.append(intlPrefix);\n  }\nbreak;\ncase 'n':hadN=true;\nif (trunkPrefix != null) {\nres.append(trunkPrefix);\n}\nbreak;\ncase '#':if (spot < str.length()) {\nres.append(str.substring(spot,spot + 1));\nspot++;\n}\n else if (hasOpen) {\nres.append(\" \");\n}\nbreak;\ncase '(':if (spot < str.length()) {\nhasOpen=true;\n}\ndefault:if (!(ch == ' ' && i > 0 && ((format.charAt(i - 1) == 'n' && trunkPrefix == null) || (format.charAt(i - 1) == 'c' && intlPrefix == null)))) {\nif (spot < str.length() || (hasOpen && ch == ')')) {\nres.append(format.substring(i,i + 1));\nif (ch == ')') {\nhasOpen=false;\n}\n}\n}\nbreak;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 166,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1501,
        "startLineNumber" : 46,
        "startColumnNumber" : 8,
        "endLineNumber" : 84,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < format.length(); i++) {\n  char ch=format.charAt(i);\nswitch (ch) {\ncase 'c':    hadC=true;\n  if (intlPrefix != null) {\n    res.append(intlPrefix);\n  }\nbreak;\ncase 'n':hadN=true;\nif (trunkPrefix != null) {\nres.append(trunkPrefix);\n}\nbreak;\ncase '#':if (spot < str.length()) {\nres.append(str.substring(spot,spot + 1));\nspot++;\n}\n else if (hasOpen) {\nres.append(\" \");\n}\nbreak;\ncase '(':if (spot < str.length()) {\nhasOpen=true;\n}\ndefault:if (!(ch == ' ' && i > 0 && ((format.charAt(i - 1) == 'n' && trunkPrefix == null) || (format.charAt(i - 1) == 'c' && intlPrefix == null)))) {\nif (spot < str.length() || (hasOpen && ch == ')')) {\nres.append(format.substring(i,i + 1));\nif (ch == ')') {\nhasOpen=false;\n}\n}\n}\nbreak;\n}\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 179,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1920,
        "startLineNumber" : 40,
        "startColumnNumber" : 69,
        "endLineNumber" : 92,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  boolean hadC=false;\n  boolean hadN=false;\n  boolean hasOpen=false;\n  int spot=0;\n  StringBuilder res=new StringBuilder(20);\n  for (int i=0; i < format.length(); i++) {\n    char ch=format.charAt(i);\nswitch (ch) {\ncase 'c':      hadC=true;\n    if (intlPrefix != null) {\n      res.append(intlPrefix);\n    }\n  break;\ncase 'n':hadN=true;\nif (trunkPrefix != null) {\nres.append(trunkPrefix);\n}\nbreak;\ncase '#':if (spot < str.length()) {\nres.append(str.substring(spot,spot + 1));\nspot++;\n}\n else if (hasOpen) {\nres.append(\" \");\n}\nbreak;\ncase '(':if (spot < str.length()) {\nhasOpen=true;\n}\ndefault:if (!(ch == ' ' && i > 0 && ((format.charAt(i - 1) == 'n' && trunkPrefix == null) || (format.charAt(i - 1) == 'c' && intlPrefix == null)))) {\nif (spot < str.length() || (hasOpen && ch == ')')) {\nres.append(format.substring(i,i + 1));\nif (ch == ')') {\nhasOpen=false;\n}\n}\n}\nbreak;\n}\n}\nif (intlPrefix != null && !hadC) {\nres.insert(0,String.format(\"%s \",intlPrefix));\n}\n else if (trunkPrefix != null && !hadN) {\nres.insert(0,trunkPrefix);\n}\nreturn res.toString();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 245,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1985,
        "startLineNumber" : 40,
        "startColumnNumber" : 4,
        "endLineNumber" : 92,
        "endColumnNumber" : 5
      },
      "nodeContext" : "String format(String str,String intlPrefix,String trunkPrefix){\n  boolean hadC=false;\n  boolean hadN=false;\n  boolean hasOpen=false;\n  int spot=0;\n  StringBuilder res=new StringBuilder(20);\n  for (int i=0; i < format.length(); i++) {\n    char ch=format.charAt(i);\nswitch (ch) {\ncase 'c':      hadC=true;\n    if (intlPrefix != null) {\n      res.append(intlPrefix);\n    }\n  break;\ncase 'n':hadN=true;\nif (trunkPrefix != null) {\nres.append(trunkPrefix);\n}\nbreak;\ncase '#':if (spot < str.length()) {\nres.append(str.substring(spot,spot + 1));\nspot++;\n}\n else if (hasOpen) {\nres.append(\" \");\n}\nbreak;\ncase '(':if (spot < str.length()) {\nhasOpen=true;\n}\ndefault:if (!(ch == ' ' && i > 0 && ((format.charAt(i - 1) == 'n' && trunkPrefix == null) || (format.charAt(i - 1) == 'c' && intlPrefix == null)))) {\nif (spot < str.length() || (hasOpen && ch == ')')) {\nres.append(format.substring(i,i + 1));\nif (ch == ')') {\nhasOpen=false;\n}\n}\n}\nbreak;\n}\n}\nif (intlPrefix != null && !hadC) {\nres.insert(0,String.format(\"%s \",intlPrefix));\n}\n else if (trunkPrefix != null && !hadN) {\nres.insert(0,trunkPrefix);\n}\nreturn res.toString();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 261,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 69,
        "startColumnNumber" : 16,
        "endLineNumber" : 69,
        "endColumnNumber" : 25
      },
      "nodeContext" : "case '(':",
      "nodeType" : "SwitchCase",
      "astNodeNumber" : 2,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "char"
  } ],
  "positionList" : [ {
    "charLength" : 3,
    "startLineNumber" : 69,
    "startColumnNumber" : 21,
    "endLineNumber" : 69,
    "endColumnNumber" : 24
  } ],
  "layoutRelationDataList" : [ ]
}