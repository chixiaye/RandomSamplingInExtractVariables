{
  "id" : 192,
  "expression" : "serializer",
  "projectName" : "alibaba@fastjson",
  "commitID" : "9831423c25fe1de6abdc4501c8b669ca92a4705c",
  "filePath" : "src/main/java/com/alibaba/fastjson/serializer/JavaBeanSerializer.java",
  "occurrences" : 25,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "serializer",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 90,
      "startColumnNumber" : 30,
      "endLineNumber" : 90,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 90,
        "startColumnNumber" : 30,
        "endLineNumber" : 90,
        "endColumnNumber" : 52
      },
      "nodeContext" : "serializer.getWriter()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 90,
        "startColumnNumber" : 24,
        "endLineNumber" : 90,
        "endColumnNumber" : 52
      },
      "nodeContext" : "out=serializer.getWriter()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 90,
        "startColumnNumber" : 8,
        "endLineNumber" : 90,
        "endColumnNumber" : 53
      },
      "nodeContext" : "SerializeWriter out=serializer.getWriter();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4762,
        "startLineNumber" : 89,
        "startColumnNumber" : 117,
        "endLineNumber" : 219,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SerializeWriter out=serializer.getWriter();\n  if (object == null) {\n    out.writeNull();\n    return;\n  }\n  if (serializer.containsReference(object)) {\n    writeReference(serializer,object);\n    return;\n  }\n  final FieldSerializer[] getters;\n  if (out.isEnabled(SerializerFeature.SortField)) {\n    getters=this.sortedGetters;\n  }\n else {\n    getters=this.getters;\n  }\n  SerialContext parent=serializer.getContext();\n  serializer.setContext(parent,object,fieldName);\n  boolean writeAsArray;\n  if (out.isEnabled(SerializerFeature.WriteJavaBeanAsArray)) {\n    writeAsArray=true;\n  }\n else {\n    writeAsArray=false;\n  }\n  try {\n    final char startSeperator=writeAsArray ? '[' : '{';\n    final char endSeperator=writeAsArray ? ']' : '}';\n    out.append(startSeperator);\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.incrementIndent();\n      serializer.println();\n    }\n    boolean commaFlag=false;\n    if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n      Class<?> objClass=object.getClass();\n      if (objClass != fieldType) {\n        out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n        serializer.write(object.getClass());\n        commaFlag=true;\n      }\n    }\n    char seperator=commaFlag ? ',' : '\\0';\n    char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n    commaFlag=newSeperator == ',';\n    for (int i=0; i < getters.length; ++i) {\n      FieldSerializer fieldSerializer=getters[i];\n      if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n        Field field=fieldSerializer.getField();\n        if (field != null) {\n          if (Modifier.isTransient(field.getModifiers())) {\n            continue;\n          }\n        }\n      }\n      if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n        continue;\n      }\n      Object propertyValue=fieldSerializer.getPropertyValue(object);\n      if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n        continue;\n      }\n      String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n      Object originalValue=propertyValue;\n      propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n      if (propertyValue == null && !writeAsArray) {\n        if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n          continue;\n        }\n      }\n      if (commaFlag) {\n        out.append(',');\n        if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n          serializer.println();\n        }\n      }\n      if (key != fieldSerializer.getName()) {\n        if (!writeAsArray) {\n          out.writeFieldName(key);\n        }\n        serializer.write(propertyValue);\n      }\n else       if (originalValue != propertyValue) {\n        if (!writeAsArray) {\n          fieldSerializer.writePrefix(serializer);\n        }\n        serializer.write(propertyValue);\n      }\n else {\n        if (!writeAsArray) {\n          fieldSerializer.writeProperty(serializer,propertyValue);\n        }\n else {\n          fieldSerializer.writeValue(serializer,propertyValue);\n        }\n      }\n      commaFlag=true;\n    }\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.decrementIdent();\n      serializer.println();\n    }\n    out.append(endSeperator);\n  }\n catch (  Exception e) {\n    throw new JSONException(\"write javaBean error\",e);\n  }\n finally {\n    serializer.setContext(parent);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 483,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4875,
        "startLineNumber" : 89,
        "startColumnNumber" : 4,
        "endLineNumber" : 219,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void write(JSONSerializer serializer,Object object,Object fieldName,Type fieldType) throws IOException {\n  SerializeWriter out=serializer.getWriter();\n  if (object == null) {\n    out.writeNull();\n    return;\n  }\n  if (serializer.containsReference(object)) {\n    writeReference(serializer,object);\n    return;\n  }\n  final FieldSerializer[] getters;\n  if (out.isEnabled(SerializerFeature.SortField)) {\n    getters=this.sortedGetters;\n  }\n else {\n    getters=this.getters;\n  }\n  SerialContext parent=serializer.getContext();\n  serializer.setContext(parent,object,fieldName);\n  boolean writeAsArray;\n  if (out.isEnabled(SerializerFeature.WriteJavaBeanAsArray)) {\n    writeAsArray=true;\n  }\n else {\n    writeAsArray=false;\n  }\n  try {\n    final char startSeperator=writeAsArray ? '[' : '{';\n    final char endSeperator=writeAsArray ? ']' : '}';\n    out.append(startSeperator);\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.incrementIndent();\n      serializer.println();\n    }\n    boolean commaFlag=false;\n    if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n      Class<?> objClass=object.getClass();\n      if (objClass != fieldType) {\n        out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n        serializer.write(object.getClass());\n        commaFlag=true;\n      }\n    }\n    char seperator=commaFlag ? ',' : '\\0';\n    char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n    commaFlag=newSeperator == ',';\n    for (int i=0; i < getters.length; ++i) {\n      FieldSerializer fieldSerializer=getters[i];\n      if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n        Field field=fieldSerializer.getField();\n        if (field != null) {\n          if (Modifier.isTransient(field.getModifiers())) {\n            continue;\n          }\n        }\n      }\n      if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n        continue;\n      }\n      Object propertyValue=fieldSerializer.getPropertyValue(object);\n      if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n        continue;\n      }\n      String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n      Object originalValue=propertyValue;\n      propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n      if (propertyValue == null && !writeAsArray) {\n        if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n          continue;\n        }\n      }\n      if (commaFlag) {\n        out.append(',');\n        if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n          serializer.println();\n        }\n      }\n      if (key != fieldSerializer.getName()) {\n        if (!writeAsArray) {\n          out.writeFieldName(key);\n        }\n        serializer.write(propertyValue);\n      }\n else       if (originalValue != propertyValue) {\n        if (!writeAsArray) {\n          fieldSerializer.writePrefix(serializer);\n        }\n        serializer.write(propertyValue);\n      }\n else {\n        if (!writeAsArray) {\n          fieldSerializer.writeProperty(serializer,propertyValue);\n        }\n else {\n          fieldSerializer.writeValue(serializer,propertyValue);\n        }\n      }\n      commaFlag=true;\n    }\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.decrementIdent();\n      serializer.println();\n    }\n    out.append(endSeperator);\n  }\n catch (  Exception e) {\n    throw new JSONException(\"write javaBean error\",e);\n  }\n finally {\n    serializer.setContext(parent);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 505,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 90,
        "startColumnNumber" : 8,
        "endLineNumber" : 90,
        "endColumnNumber" : 53
      },
      "nodeContext" : "SerializeWriter out=serializer.getWriter();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.alibaba.fastjson.serializer.JSONSerializer"
  }, {
    "nodeContext" : "serializer",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 97,
      "startColumnNumber" : 12,
      "endLineNumber" : 97,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 97,
        "startColumnNumber" : 12,
        "endLineNumber" : 97,
        "endColumnNumber" : 48
      },
      "nodeContext" : "serializer.containsReference(object)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 124,
        "startLineNumber" : 97,
        "startColumnNumber" : 8,
        "endLineNumber" : 100,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (serializer.containsReference(object)) {\n  writeReference(serializer,object);\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4762,
        "startLineNumber" : 89,
        "startColumnNumber" : 117,
        "endLineNumber" : 219,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SerializeWriter out=serializer.getWriter();\n  if (object == null) {\n    out.writeNull();\n    return;\n  }\n  if (serializer.containsReference(object)) {\n    writeReference(serializer,object);\n    return;\n  }\n  final FieldSerializer[] getters;\n  if (out.isEnabled(SerializerFeature.SortField)) {\n    getters=this.sortedGetters;\n  }\n else {\n    getters=this.getters;\n  }\n  SerialContext parent=serializer.getContext();\n  serializer.setContext(parent,object,fieldName);\n  boolean writeAsArray;\n  if (out.isEnabled(SerializerFeature.WriteJavaBeanAsArray)) {\n    writeAsArray=true;\n  }\n else {\n    writeAsArray=false;\n  }\n  try {\n    final char startSeperator=writeAsArray ? '[' : '{';\n    final char endSeperator=writeAsArray ? ']' : '}';\n    out.append(startSeperator);\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.incrementIndent();\n      serializer.println();\n    }\n    boolean commaFlag=false;\n    if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n      Class<?> objClass=object.getClass();\n      if (objClass != fieldType) {\n        out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n        serializer.write(object.getClass());\n        commaFlag=true;\n      }\n    }\n    char seperator=commaFlag ? ',' : '\\0';\n    char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n    commaFlag=newSeperator == ',';\n    for (int i=0; i < getters.length; ++i) {\n      FieldSerializer fieldSerializer=getters[i];\n      if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n        Field field=fieldSerializer.getField();\n        if (field != null) {\n          if (Modifier.isTransient(field.getModifiers())) {\n            continue;\n          }\n        }\n      }\n      if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n        continue;\n      }\n      Object propertyValue=fieldSerializer.getPropertyValue(object);\n      if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n        continue;\n      }\n      String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n      Object originalValue=propertyValue;\n      propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n      if (propertyValue == null && !writeAsArray) {\n        if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n          continue;\n        }\n      }\n      if (commaFlag) {\n        out.append(',');\n        if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n          serializer.println();\n        }\n      }\n      if (key != fieldSerializer.getName()) {\n        if (!writeAsArray) {\n          out.writeFieldName(key);\n        }\n        serializer.write(propertyValue);\n      }\n else       if (originalValue != propertyValue) {\n        if (!writeAsArray) {\n          fieldSerializer.writePrefix(serializer);\n        }\n        serializer.write(propertyValue);\n      }\n else {\n        if (!writeAsArray) {\n          fieldSerializer.writeProperty(serializer,propertyValue);\n        }\n else {\n          fieldSerializer.writeValue(serializer,propertyValue);\n        }\n      }\n      commaFlag=true;\n    }\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.decrementIdent();\n      serializer.println();\n    }\n    out.append(endSeperator);\n  }\n catch (  Exception e) {\n    throw new JSONException(\"write javaBean error\",e);\n  }\n finally {\n    serializer.setContext(parent);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 483,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4875,
        "startLineNumber" : 89,
        "startColumnNumber" : 4,
        "endLineNumber" : 219,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void write(JSONSerializer serializer,Object object,Object fieldName,Type fieldType) throws IOException {\n  SerializeWriter out=serializer.getWriter();\n  if (object == null) {\n    out.writeNull();\n    return;\n  }\n  if (serializer.containsReference(object)) {\n    writeReference(serializer,object);\n    return;\n  }\n  final FieldSerializer[] getters;\n  if (out.isEnabled(SerializerFeature.SortField)) {\n    getters=this.sortedGetters;\n  }\n else {\n    getters=this.getters;\n  }\n  SerialContext parent=serializer.getContext();\n  serializer.setContext(parent,object,fieldName);\n  boolean writeAsArray;\n  if (out.isEnabled(SerializerFeature.WriteJavaBeanAsArray)) {\n    writeAsArray=true;\n  }\n else {\n    writeAsArray=false;\n  }\n  try {\n    final char startSeperator=writeAsArray ? '[' : '{';\n    final char endSeperator=writeAsArray ? ']' : '}';\n    out.append(startSeperator);\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.incrementIndent();\n      serializer.println();\n    }\n    boolean commaFlag=false;\n    if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n      Class<?> objClass=object.getClass();\n      if (objClass != fieldType) {\n        out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n        serializer.write(object.getClass());\n        commaFlag=true;\n      }\n    }\n    char seperator=commaFlag ? ',' : '\\0';\n    char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n    commaFlag=newSeperator == ',';\n    for (int i=0; i < getters.length; ++i) {\n      FieldSerializer fieldSerializer=getters[i];\n      if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n        Field field=fieldSerializer.getField();\n        if (field != null) {\n          if (Modifier.isTransient(field.getModifiers())) {\n            continue;\n          }\n        }\n      }\n      if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n        continue;\n      }\n      Object propertyValue=fieldSerializer.getPropertyValue(object);\n      if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n        continue;\n      }\n      String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n      Object originalValue=propertyValue;\n      propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n      if (propertyValue == null && !writeAsArray) {\n        if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n          continue;\n        }\n      }\n      if (commaFlag) {\n        out.append(',');\n        if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n          serializer.println();\n        }\n      }\n      if (key != fieldSerializer.getName()) {\n        if (!writeAsArray) {\n          out.writeFieldName(key);\n        }\n        serializer.write(propertyValue);\n      }\n else       if (originalValue != propertyValue) {\n        if (!writeAsArray) {\n          fieldSerializer.writePrefix(serializer);\n        }\n        serializer.write(propertyValue);\n      }\n else {\n        if (!writeAsArray) {\n          fieldSerializer.writeProperty(serializer,propertyValue);\n        }\n else {\n          fieldSerializer.writeValue(serializer,propertyValue);\n        }\n      }\n      commaFlag=true;\n    }\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.decrementIdent();\n      serializer.println();\n    }\n    out.append(endSeperator);\n  }\n catch (  Exception e) {\n    throw new JSONException(\"write javaBean error\",e);\n  }\n finally {\n    serializer.setContext(parent);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 505,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 97,
        "startColumnNumber" : 12,
        "endLineNumber" : 97,
        "endColumnNumber" : 48
      },
      "nodeContext" : "serializer.containsReference(object)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.alibaba.fastjson.serializer.JSONSerializer"
  }, {
    "nodeContext" : "serializer",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 98,
      "startColumnNumber" : 27,
      "endLineNumber" : 98,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 98,
        "startColumnNumber" : 12,
        "endLineNumber" : 98,
        "endColumnNumber" : 46
      },
      "nodeContext" : "writeReference(serializer,object)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 98,
        "startColumnNumber" : 12,
        "endLineNumber" : 98,
        "endColumnNumber" : 47
      },
      "nodeContext" : "writeReference(serializer,object);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 97,
        "startColumnNumber" : 50,
        "endLineNumber" : 100,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  writeReference(serializer,object);\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 124,
        "startLineNumber" : 97,
        "startColumnNumber" : 8,
        "endLineNumber" : 100,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (serializer.containsReference(object)) {\n  writeReference(serializer,object);\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4762,
        "startLineNumber" : 89,
        "startColumnNumber" : 117,
        "endLineNumber" : 219,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SerializeWriter out=serializer.getWriter();\n  if (object == null) {\n    out.writeNull();\n    return;\n  }\n  if (serializer.containsReference(object)) {\n    writeReference(serializer,object);\n    return;\n  }\n  final FieldSerializer[] getters;\n  if (out.isEnabled(SerializerFeature.SortField)) {\n    getters=this.sortedGetters;\n  }\n else {\n    getters=this.getters;\n  }\n  SerialContext parent=serializer.getContext();\n  serializer.setContext(parent,object,fieldName);\n  boolean writeAsArray;\n  if (out.isEnabled(SerializerFeature.WriteJavaBeanAsArray)) {\n    writeAsArray=true;\n  }\n else {\n    writeAsArray=false;\n  }\n  try {\n    final char startSeperator=writeAsArray ? '[' : '{';\n    final char endSeperator=writeAsArray ? ']' : '}';\n    out.append(startSeperator);\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.incrementIndent();\n      serializer.println();\n    }\n    boolean commaFlag=false;\n    if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n      Class<?> objClass=object.getClass();\n      if (objClass != fieldType) {\n        out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n        serializer.write(object.getClass());\n        commaFlag=true;\n      }\n    }\n    char seperator=commaFlag ? ',' : '\\0';\n    char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n    commaFlag=newSeperator == ',';\n    for (int i=0; i < getters.length; ++i) {\n      FieldSerializer fieldSerializer=getters[i];\n      if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n        Field field=fieldSerializer.getField();\n        if (field != null) {\n          if (Modifier.isTransient(field.getModifiers())) {\n            continue;\n          }\n        }\n      }\n      if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n        continue;\n      }\n      Object propertyValue=fieldSerializer.getPropertyValue(object);\n      if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n        continue;\n      }\n      String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n      Object originalValue=propertyValue;\n      propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n      if (propertyValue == null && !writeAsArray) {\n        if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n          continue;\n        }\n      }\n      if (commaFlag) {\n        out.append(',');\n        if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n          serializer.println();\n        }\n      }\n      if (key != fieldSerializer.getName()) {\n        if (!writeAsArray) {\n          out.writeFieldName(key);\n        }\n        serializer.write(propertyValue);\n      }\n else       if (originalValue != propertyValue) {\n        if (!writeAsArray) {\n          fieldSerializer.writePrefix(serializer);\n        }\n        serializer.write(propertyValue);\n      }\n else {\n        if (!writeAsArray) {\n          fieldSerializer.writeProperty(serializer,propertyValue);\n        }\n else {\n          fieldSerializer.writeValue(serializer,propertyValue);\n        }\n      }\n      commaFlag=true;\n    }\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.decrementIdent();\n      serializer.println();\n    }\n    out.append(endSeperator);\n  }\n catch (  Exception e) {\n    throw new JSONException(\"write javaBean error\",e);\n  }\n finally {\n    serializer.setContext(parent);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 483,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4875,
        "startLineNumber" : 89,
        "startColumnNumber" : 4,
        "endLineNumber" : 219,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void write(JSONSerializer serializer,Object object,Object fieldName,Type fieldType) throws IOException {\n  SerializeWriter out=serializer.getWriter();\n  if (object == null) {\n    out.writeNull();\n    return;\n  }\n  if (serializer.containsReference(object)) {\n    writeReference(serializer,object);\n    return;\n  }\n  final FieldSerializer[] getters;\n  if (out.isEnabled(SerializerFeature.SortField)) {\n    getters=this.sortedGetters;\n  }\n else {\n    getters=this.getters;\n  }\n  SerialContext parent=serializer.getContext();\n  serializer.setContext(parent,object,fieldName);\n  boolean writeAsArray;\n  if (out.isEnabled(SerializerFeature.WriteJavaBeanAsArray)) {\n    writeAsArray=true;\n  }\n else {\n    writeAsArray=false;\n  }\n  try {\n    final char startSeperator=writeAsArray ? '[' : '{';\n    final char endSeperator=writeAsArray ? ']' : '}';\n    out.append(startSeperator);\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.incrementIndent();\n      serializer.println();\n    }\n    boolean commaFlag=false;\n    if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n      Class<?> objClass=object.getClass();\n      if (objClass != fieldType) {\n        out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n        serializer.write(object.getClass());\n        commaFlag=true;\n      }\n    }\n    char seperator=commaFlag ? ',' : '\\0';\n    char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n    commaFlag=newSeperator == ',';\n    for (int i=0; i < getters.length; ++i) {\n      FieldSerializer fieldSerializer=getters[i];\n      if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n        Field field=fieldSerializer.getField();\n        if (field != null) {\n          if (Modifier.isTransient(field.getModifiers())) {\n            continue;\n          }\n        }\n      }\n      if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n        continue;\n      }\n      Object propertyValue=fieldSerializer.getPropertyValue(object);\n      if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n        continue;\n      }\n      String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n      Object originalValue=propertyValue;\n      propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n      if (propertyValue == null && !writeAsArray) {\n        if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n          continue;\n        }\n      }\n      if (commaFlag) {\n        out.append(',');\n        if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n          serializer.println();\n        }\n      }\n      if (key != fieldSerializer.getName()) {\n        if (!writeAsArray) {\n          out.writeFieldName(key);\n        }\n        serializer.write(propertyValue);\n      }\n else       if (originalValue != propertyValue) {\n        if (!writeAsArray) {\n          fieldSerializer.writePrefix(serializer);\n        }\n        serializer.write(propertyValue);\n      }\n else {\n        if (!writeAsArray) {\n          fieldSerializer.writeProperty(serializer,propertyValue);\n        }\n else {\n          fieldSerializer.writeValue(serializer,propertyValue);\n        }\n      }\n      commaFlag=true;\n    }\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.decrementIdent();\n      serializer.println();\n    }\n    out.append(endSeperator);\n  }\n catch (  Exception e) {\n    throw new JSONException(\"write javaBean error\",e);\n  }\n finally {\n    serializer.setContext(parent);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 505,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 98,
        "startColumnNumber" : 12,
        "endLineNumber" : 98,
        "endColumnNumber" : 47
      },
      "nodeContext" : "writeReference(serializer,object);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.alibaba.fastjson.serializer.JSONSerializer"
  }, {
    "nodeContext" : "serializer",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 110,
      "startColumnNumber" : 31,
      "endLineNumber" : 110,
      "endColumnNumber" : 41
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 110,
        "startColumnNumber" : 31,
        "endLineNumber" : 110,
        "endColumnNumber" : 54
      },
      "nodeContext" : "serializer.getContext()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 110,
        "startColumnNumber" : 22,
        "endLineNumber" : 110,
        "endColumnNumber" : 54
      },
      "nodeContext" : "parent=serializer.getContext()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 110,
        "startColumnNumber" : 8,
        "endLineNumber" : 110,
        "endColumnNumber" : 55
      },
      "nodeContext" : "SerialContext parent=serializer.getContext();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4762,
        "startLineNumber" : 89,
        "startColumnNumber" : 117,
        "endLineNumber" : 219,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SerializeWriter out=serializer.getWriter();\n  if (object == null) {\n    out.writeNull();\n    return;\n  }\n  if (serializer.containsReference(object)) {\n    writeReference(serializer,object);\n    return;\n  }\n  final FieldSerializer[] getters;\n  if (out.isEnabled(SerializerFeature.SortField)) {\n    getters=this.sortedGetters;\n  }\n else {\n    getters=this.getters;\n  }\n  SerialContext parent=serializer.getContext();\n  serializer.setContext(parent,object,fieldName);\n  boolean writeAsArray;\n  if (out.isEnabled(SerializerFeature.WriteJavaBeanAsArray)) {\n    writeAsArray=true;\n  }\n else {\n    writeAsArray=false;\n  }\n  try {\n    final char startSeperator=writeAsArray ? '[' : '{';\n    final char endSeperator=writeAsArray ? ']' : '}';\n    out.append(startSeperator);\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.incrementIndent();\n      serializer.println();\n    }\n    boolean commaFlag=false;\n    if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n      Class<?> objClass=object.getClass();\n      if (objClass != fieldType) {\n        out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n        serializer.write(object.getClass());\n        commaFlag=true;\n      }\n    }\n    char seperator=commaFlag ? ',' : '\\0';\n    char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n    commaFlag=newSeperator == ',';\n    for (int i=0; i < getters.length; ++i) {\n      FieldSerializer fieldSerializer=getters[i];\n      if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n        Field field=fieldSerializer.getField();\n        if (field != null) {\n          if (Modifier.isTransient(field.getModifiers())) {\n            continue;\n          }\n        }\n      }\n      if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n        continue;\n      }\n      Object propertyValue=fieldSerializer.getPropertyValue(object);\n      if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n        continue;\n      }\n      String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n      Object originalValue=propertyValue;\n      propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n      if (propertyValue == null && !writeAsArray) {\n        if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n          continue;\n        }\n      }\n      if (commaFlag) {\n        out.append(',');\n        if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n          serializer.println();\n        }\n      }\n      if (key != fieldSerializer.getName()) {\n        if (!writeAsArray) {\n          out.writeFieldName(key);\n        }\n        serializer.write(propertyValue);\n      }\n else       if (originalValue != propertyValue) {\n        if (!writeAsArray) {\n          fieldSerializer.writePrefix(serializer);\n        }\n        serializer.write(propertyValue);\n      }\n else {\n        if (!writeAsArray) {\n          fieldSerializer.writeProperty(serializer,propertyValue);\n        }\n else {\n          fieldSerializer.writeValue(serializer,propertyValue);\n        }\n      }\n      commaFlag=true;\n    }\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.decrementIdent();\n      serializer.println();\n    }\n    out.append(endSeperator);\n  }\n catch (  Exception e) {\n    throw new JSONException(\"write javaBean error\",e);\n  }\n finally {\n    serializer.setContext(parent);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 483,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4875,
        "startLineNumber" : 89,
        "startColumnNumber" : 4,
        "endLineNumber" : 219,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void write(JSONSerializer serializer,Object object,Object fieldName,Type fieldType) throws IOException {\n  SerializeWriter out=serializer.getWriter();\n  if (object == null) {\n    out.writeNull();\n    return;\n  }\n  if (serializer.containsReference(object)) {\n    writeReference(serializer,object);\n    return;\n  }\n  final FieldSerializer[] getters;\n  if (out.isEnabled(SerializerFeature.SortField)) {\n    getters=this.sortedGetters;\n  }\n else {\n    getters=this.getters;\n  }\n  SerialContext parent=serializer.getContext();\n  serializer.setContext(parent,object,fieldName);\n  boolean writeAsArray;\n  if (out.isEnabled(SerializerFeature.WriteJavaBeanAsArray)) {\n    writeAsArray=true;\n  }\n else {\n    writeAsArray=false;\n  }\n  try {\n    final char startSeperator=writeAsArray ? '[' : '{';\n    final char endSeperator=writeAsArray ? ']' : '}';\n    out.append(startSeperator);\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.incrementIndent();\n      serializer.println();\n    }\n    boolean commaFlag=false;\n    if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n      Class<?> objClass=object.getClass();\n      if (objClass != fieldType) {\n        out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n        serializer.write(object.getClass());\n        commaFlag=true;\n      }\n    }\n    char seperator=commaFlag ? ',' : '\\0';\n    char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n    commaFlag=newSeperator == ',';\n    for (int i=0; i < getters.length; ++i) {\n      FieldSerializer fieldSerializer=getters[i];\n      if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n        Field field=fieldSerializer.getField();\n        if (field != null) {\n          if (Modifier.isTransient(field.getModifiers())) {\n            continue;\n          }\n        }\n      }\n      if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n        continue;\n      }\n      Object propertyValue=fieldSerializer.getPropertyValue(object);\n      if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n        continue;\n      }\n      String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n      Object originalValue=propertyValue;\n      propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n      if (propertyValue == null && !writeAsArray) {\n        if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n          continue;\n        }\n      }\n      if (commaFlag) {\n        out.append(',');\n        if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n          serializer.println();\n        }\n      }\n      if (key != fieldSerializer.getName()) {\n        if (!writeAsArray) {\n          out.writeFieldName(key);\n        }\n        serializer.write(propertyValue);\n      }\n else       if (originalValue != propertyValue) {\n        if (!writeAsArray) {\n          fieldSerializer.writePrefix(serializer);\n        }\n        serializer.write(propertyValue);\n      }\n else {\n        if (!writeAsArray) {\n          fieldSerializer.writeProperty(serializer,propertyValue);\n        }\n else {\n          fieldSerializer.writeValue(serializer,propertyValue);\n        }\n      }\n      commaFlag=true;\n    }\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.decrementIdent();\n      serializer.println();\n    }\n    out.append(endSeperator);\n  }\n catch (  Exception e) {\n    throw new JSONException(\"write javaBean error\",e);\n  }\n finally {\n    serializer.setContext(parent);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 505,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 110,
        "startColumnNumber" : 8,
        "endLineNumber" : 110,
        "endColumnNumber" : 55
      },
      "nodeContext" : "SerialContext parent=serializer.getContext();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.alibaba.fastjson.serializer.JSONSerializer"
  }, {
    "nodeContext" : "serializer",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 111,
      "startColumnNumber" : 8,
      "endLineNumber" : 111,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 111,
        "startColumnNumber" : 8,
        "endLineNumber" : 111,
        "endColumnNumber" : 56
      },
      "nodeContext" : "serializer.setContext(parent,object,fieldName)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 111,
        "startColumnNumber" : 8,
        "endLineNumber" : 111,
        "endColumnNumber" : 57
      },
      "nodeContext" : "serializer.setContext(parent,object,fieldName);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4762,
        "startLineNumber" : 89,
        "startColumnNumber" : 117,
        "endLineNumber" : 219,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SerializeWriter out=serializer.getWriter();\n  if (object == null) {\n    out.writeNull();\n    return;\n  }\n  if (serializer.containsReference(object)) {\n    writeReference(serializer,object);\n    return;\n  }\n  final FieldSerializer[] getters;\n  if (out.isEnabled(SerializerFeature.SortField)) {\n    getters=this.sortedGetters;\n  }\n else {\n    getters=this.getters;\n  }\n  SerialContext parent=serializer.getContext();\n  serializer.setContext(parent,object,fieldName);\n  boolean writeAsArray;\n  if (out.isEnabled(SerializerFeature.WriteJavaBeanAsArray)) {\n    writeAsArray=true;\n  }\n else {\n    writeAsArray=false;\n  }\n  try {\n    final char startSeperator=writeAsArray ? '[' : '{';\n    final char endSeperator=writeAsArray ? ']' : '}';\n    out.append(startSeperator);\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.incrementIndent();\n      serializer.println();\n    }\n    boolean commaFlag=false;\n    if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n      Class<?> objClass=object.getClass();\n      if (objClass != fieldType) {\n        out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n        serializer.write(object.getClass());\n        commaFlag=true;\n      }\n    }\n    char seperator=commaFlag ? ',' : '\\0';\n    char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n    commaFlag=newSeperator == ',';\n    for (int i=0; i < getters.length; ++i) {\n      FieldSerializer fieldSerializer=getters[i];\n      if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n        Field field=fieldSerializer.getField();\n        if (field != null) {\n          if (Modifier.isTransient(field.getModifiers())) {\n            continue;\n          }\n        }\n      }\n      if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n        continue;\n      }\n      Object propertyValue=fieldSerializer.getPropertyValue(object);\n      if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n        continue;\n      }\n      String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n      Object originalValue=propertyValue;\n      propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n      if (propertyValue == null && !writeAsArray) {\n        if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n          continue;\n        }\n      }\n      if (commaFlag) {\n        out.append(',');\n        if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n          serializer.println();\n        }\n      }\n      if (key != fieldSerializer.getName()) {\n        if (!writeAsArray) {\n          out.writeFieldName(key);\n        }\n        serializer.write(propertyValue);\n      }\n else       if (originalValue != propertyValue) {\n        if (!writeAsArray) {\n          fieldSerializer.writePrefix(serializer);\n        }\n        serializer.write(propertyValue);\n      }\n else {\n        if (!writeAsArray) {\n          fieldSerializer.writeProperty(serializer,propertyValue);\n        }\n else {\n          fieldSerializer.writeValue(serializer,propertyValue);\n        }\n      }\n      commaFlag=true;\n    }\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.decrementIdent();\n      serializer.println();\n    }\n    out.append(endSeperator);\n  }\n catch (  Exception e) {\n    throw new JSONException(\"write javaBean error\",e);\n  }\n finally {\n    serializer.setContext(parent);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 483,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4875,
        "startLineNumber" : 89,
        "startColumnNumber" : 4,
        "endLineNumber" : 219,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void write(JSONSerializer serializer,Object object,Object fieldName,Type fieldType) throws IOException {\n  SerializeWriter out=serializer.getWriter();\n  if (object == null) {\n    out.writeNull();\n    return;\n  }\n  if (serializer.containsReference(object)) {\n    writeReference(serializer,object);\n    return;\n  }\n  final FieldSerializer[] getters;\n  if (out.isEnabled(SerializerFeature.SortField)) {\n    getters=this.sortedGetters;\n  }\n else {\n    getters=this.getters;\n  }\n  SerialContext parent=serializer.getContext();\n  serializer.setContext(parent,object,fieldName);\n  boolean writeAsArray;\n  if (out.isEnabled(SerializerFeature.WriteJavaBeanAsArray)) {\n    writeAsArray=true;\n  }\n else {\n    writeAsArray=false;\n  }\n  try {\n    final char startSeperator=writeAsArray ? '[' : '{';\n    final char endSeperator=writeAsArray ? ']' : '}';\n    out.append(startSeperator);\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.incrementIndent();\n      serializer.println();\n    }\n    boolean commaFlag=false;\n    if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n      Class<?> objClass=object.getClass();\n      if (objClass != fieldType) {\n        out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n        serializer.write(object.getClass());\n        commaFlag=true;\n      }\n    }\n    char seperator=commaFlag ? ',' : '\\0';\n    char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n    commaFlag=newSeperator == ',';\n    for (int i=0; i < getters.length; ++i) {\n      FieldSerializer fieldSerializer=getters[i];\n      if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n        Field field=fieldSerializer.getField();\n        if (field != null) {\n          if (Modifier.isTransient(field.getModifiers())) {\n            continue;\n          }\n        }\n      }\n      if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n        continue;\n      }\n      Object propertyValue=fieldSerializer.getPropertyValue(object);\n      if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n        continue;\n      }\n      String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n      Object originalValue=propertyValue;\n      propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n      if (propertyValue == null && !writeAsArray) {\n        if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n          continue;\n        }\n      }\n      if (commaFlag) {\n        out.append(',');\n        if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n          serializer.println();\n        }\n      }\n      if (key != fieldSerializer.getName()) {\n        if (!writeAsArray) {\n          out.writeFieldName(key);\n        }\n        serializer.write(propertyValue);\n      }\n else       if (originalValue != propertyValue) {\n        if (!writeAsArray) {\n          fieldSerializer.writePrefix(serializer);\n        }\n        serializer.write(propertyValue);\n      }\n else {\n        if (!writeAsArray) {\n          fieldSerializer.writeProperty(serializer,propertyValue);\n        }\n else {\n          fieldSerializer.writeValue(serializer,propertyValue);\n        }\n      }\n      commaFlag=true;\n    }\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.decrementIdent();\n      serializer.println();\n    }\n    out.append(endSeperator);\n  }\n catch (  Exception e) {\n    throw new JSONException(\"write javaBean error\",e);\n  }\n finally {\n    serializer.setContext(parent);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 505,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 111,
        "startColumnNumber" : 8,
        "endLineNumber" : 111,
        "endColumnNumber" : 57
      },
      "nodeContext" : "serializer.setContext(parent,object,fieldName);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.alibaba.fastjson.serializer.JSONSerializer"
  }, {
    "nodeContext" : "serializer",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 126,
      "startColumnNumber" : 16,
      "endLineNumber" : 126,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 126,
        "startColumnNumber" : 16,
        "endLineNumber" : 126,
        "endColumnNumber" : 44
      },
      "nodeContext" : "serializer.incrementIndent()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 126,
        "startColumnNumber" : 16,
        "endLineNumber" : 126,
        "endColumnNumber" : 45
      },
      "nodeContext" : "serializer.incrementIndent();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 125,
        "startColumnNumber" : 85,
        "endLineNumber" : 128,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  serializer.incrementIndent();\n  serializer.println();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 175,
        "startLineNumber" : 125,
        "startColumnNumber" : 12,
        "endLineNumber" : 128,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n  serializer.incrementIndent();\n  serializer.println();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 22,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3756,
        "startLineNumber" : 120,
        "startColumnNumber" : 12,
        "endLineNumber" : 214,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final char startSeperator=writeAsArray ? '[' : '{';\n  final char endSeperator=writeAsArray ? ']' : '}';\n  out.append(startSeperator);\n  if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n    serializer.incrementIndent();\n    serializer.println();\n  }\n  boolean commaFlag=false;\n  if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n    Class<?> objClass=object.getClass();\n    if (objClass != fieldType) {\n      out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n      serializer.write(object.getClass());\n      commaFlag=true;\n    }\n  }\n  char seperator=commaFlag ? ',' : '\\0';\n  char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n  commaFlag=newSeperator == ',';\n  for (int i=0; i < getters.length; ++i) {\n    FieldSerializer fieldSerializer=getters[i];\n    if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n      Field field=fieldSerializer.getField();\n      if (field != null) {\n        if (Modifier.isTransient(field.getModifiers())) {\n          continue;\n        }\n      }\n    }\n    if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n      continue;\n    }\n    Object propertyValue=fieldSerializer.getPropertyValue(object);\n    if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n      continue;\n    }\n    String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n    Object originalValue=propertyValue;\n    propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n    if (propertyValue == null && !writeAsArray) {\n      if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n        continue;\n      }\n    }\n    if (commaFlag) {\n      out.append(',');\n      if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n        serializer.println();\n      }\n    }\n    if (key != fieldSerializer.getName()) {\n      if (!writeAsArray) {\n        out.writeFieldName(key);\n      }\n      serializer.write(propertyValue);\n    }\n else     if (originalValue != propertyValue) {\n      if (!writeAsArray) {\n        fieldSerializer.writePrefix(serializer);\n      }\n      serializer.write(propertyValue);\n    }\n else {\n      if (!writeAsArray) {\n        fieldSerializer.writeProperty(serializer,propertyValue);\n      }\n else {\n        fieldSerializer.writeValue(serializer,propertyValue);\n      }\n    }\n    commaFlag=true;\n  }\n  if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n    serializer.decrementIdent();\n    serializer.println();\n  }\n  out.append(endSeperator);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 368,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3923,
        "startLineNumber" : 120,
        "startColumnNumber" : 8,
        "endLineNumber" : 218,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  final char startSeperator=writeAsArray ? '[' : '{';\n  final char endSeperator=writeAsArray ? ']' : '}';\n  out.append(startSeperator);\n  if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n    serializer.incrementIndent();\n    serializer.println();\n  }\n  boolean commaFlag=false;\n  if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n    Class<?> objClass=object.getClass();\n    if (objClass != fieldType) {\n      out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n      serializer.write(object.getClass());\n      commaFlag=true;\n    }\n  }\n  char seperator=commaFlag ? ',' : '\\0';\n  char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n  commaFlag=newSeperator == ',';\n  for (int i=0; i < getters.length; ++i) {\n    FieldSerializer fieldSerializer=getters[i];\n    if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n      Field field=fieldSerializer.getField();\n      if (field != null) {\n        if (Modifier.isTransient(field.getModifiers())) {\n          continue;\n        }\n      }\n    }\n    if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n      continue;\n    }\n    Object propertyValue=fieldSerializer.getPropertyValue(object);\n    if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n      continue;\n    }\n    String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n    Object originalValue=propertyValue;\n    propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n    if (propertyValue == null && !writeAsArray) {\n      if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n        continue;\n      }\n    }\n    if (commaFlag) {\n      out.append(',');\n      if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n        serializer.println();\n      }\n    }\n    if (key != fieldSerializer.getName()) {\n      if (!writeAsArray) {\n        out.writeFieldName(key);\n      }\n      serializer.write(propertyValue);\n    }\n else     if (originalValue != propertyValue) {\n      if (!writeAsArray) {\n        fieldSerializer.writePrefix(serializer);\n      }\n      serializer.write(propertyValue);\n    }\n else {\n      if (!writeAsArray) {\n        fieldSerializer.writeProperty(serializer,propertyValue);\n      }\n else {\n        fieldSerializer.writeValue(serializer,propertyValue);\n      }\n    }\n    commaFlag=true;\n  }\n  if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n    serializer.decrementIdent();\n    serializer.println();\n  }\n  out.append(endSeperator);\n}\n catch (Exception e) {\n  throw new JSONException(\"write javaBean error\",e);\n}\n finally {\n  serializer.setContext(parent);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 387,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4762,
        "startLineNumber" : 89,
        "startColumnNumber" : 117,
        "endLineNumber" : 219,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SerializeWriter out=serializer.getWriter();\n  if (object == null) {\n    out.writeNull();\n    return;\n  }\n  if (serializer.containsReference(object)) {\n    writeReference(serializer,object);\n    return;\n  }\n  final FieldSerializer[] getters;\n  if (out.isEnabled(SerializerFeature.SortField)) {\n    getters=this.sortedGetters;\n  }\n else {\n    getters=this.getters;\n  }\n  SerialContext parent=serializer.getContext();\n  serializer.setContext(parent,object,fieldName);\n  boolean writeAsArray;\n  if (out.isEnabled(SerializerFeature.WriteJavaBeanAsArray)) {\n    writeAsArray=true;\n  }\n else {\n    writeAsArray=false;\n  }\n  try {\n    final char startSeperator=writeAsArray ? '[' : '{';\n    final char endSeperator=writeAsArray ? ']' : '}';\n    out.append(startSeperator);\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.incrementIndent();\n      serializer.println();\n    }\n    boolean commaFlag=false;\n    if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n      Class<?> objClass=object.getClass();\n      if (objClass != fieldType) {\n        out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n        serializer.write(object.getClass());\n        commaFlag=true;\n      }\n    }\n    char seperator=commaFlag ? ',' : '\\0';\n    char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n    commaFlag=newSeperator == ',';\n    for (int i=0; i < getters.length; ++i) {\n      FieldSerializer fieldSerializer=getters[i];\n      if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n        Field field=fieldSerializer.getField();\n        if (field != null) {\n          if (Modifier.isTransient(field.getModifiers())) {\n            continue;\n          }\n        }\n      }\n      if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n        continue;\n      }\n      Object propertyValue=fieldSerializer.getPropertyValue(object);\n      if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n        continue;\n      }\n      String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n      Object originalValue=propertyValue;\n      propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n      if (propertyValue == null && !writeAsArray) {\n        if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n          continue;\n        }\n      }\n      if (commaFlag) {\n        out.append(',');\n        if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n          serializer.println();\n        }\n      }\n      if (key != fieldSerializer.getName()) {\n        if (!writeAsArray) {\n          out.writeFieldName(key);\n        }\n        serializer.write(propertyValue);\n      }\n else       if (originalValue != propertyValue) {\n        if (!writeAsArray) {\n          fieldSerializer.writePrefix(serializer);\n        }\n        serializer.write(propertyValue);\n      }\n else {\n        if (!writeAsArray) {\n          fieldSerializer.writeProperty(serializer,propertyValue);\n        }\n else {\n          fieldSerializer.writeValue(serializer,propertyValue);\n        }\n      }\n      commaFlag=true;\n    }\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.decrementIdent();\n      serializer.println();\n    }\n    out.append(endSeperator);\n  }\n catch (  Exception e) {\n    throw new JSONException(\"write javaBean error\",e);\n  }\n finally {\n    serializer.setContext(parent);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 483,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4875,
        "startLineNumber" : 89,
        "startColumnNumber" : 4,
        "endLineNumber" : 219,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void write(JSONSerializer serializer,Object object,Object fieldName,Type fieldType) throws IOException {\n  SerializeWriter out=serializer.getWriter();\n  if (object == null) {\n    out.writeNull();\n    return;\n  }\n  if (serializer.containsReference(object)) {\n    writeReference(serializer,object);\n    return;\n  }\n  final FieldSerializer[] getters;\n  if (out.isEnabled(SerializerFeature.SortField)) {\n    getters=this.sortedGetters;\n  }\n else {\n    getters=this.getters;\n  }\n  SerialContext parent=serializer.getContext();\n  serializer.setContext(parent,object,fieldName);\n  boolean writeAsArray;\n  if (out.isEnabled(SerializerFeature.WriteJavaBeanAsArray)) {\n    writeAsArray=true;\n  }\n else {\n    writeAsArray=false;\n  }\n  try {\n    final char startSeperator=writeAsArray ? '[' : '{';\n    final char endSeperator=writeAsArray ? ']' : '}';\n    out.append(startSeperator);\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.incrementIndent();\n      serializer.println();\n    }\n    boolean commaFlag=false;\n    if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n      Class<?> objClass=object.getClass();\n      if (objClass != fieldType) {\n        out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n        serializer.write(object.getClass());\n        commaFlag=true;\n      }\n    }\n    char seperator=commaFlag ? ',' : '\\0';\n    char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n    commaFlag=newSeperator == ',';\n    for (int i=0; i < getters.length; ++i) {\n      FieldSerializer fieldSerializer=getters[i];\n      if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n        Field field=fieldSerializer.getField();\n        if (field != null) {\n          if (Modifier.isTransient(field.getModifiers())) {\n            continue;\n          }\n        }\n      }\n      if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n        continue;\n      }\n      Object propertyValue=fieldSerializer.getPropertyValue(object);\n      if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n        continue;\n      }\n      String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n      Object originalValue=propertyValue;\n      propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n      if (propertyValue == null && !writeAsArray) {\n        if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n          continue;\n        }\n      }\n      if (commaFlag) {\n        out.append(',');\n        if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n          serializer.println();\n        }\n      }\n      if (key != fieldSerializer.getName()) {\n        if (!writeAsArray) {\n          out.writeFieldName(key);\n        }\n        serializer.write(propertyValue);\n      }\n else       if (originalValue != propertyValue) {\n        if (!writeAsArray) {\n          fieldSerializer.writePrefix(serializer);\n        }\n        serializer.write(propertyValue);\n      }\n else {\n        if (!writeAsArray) {\n          fieldSerializer.writeProperty(serializer,propertyValue);\n        }\n else {\n          fieldSerializer.writeValue(serializer,propertyValue);\n        }\n      }\n      commaFlag=true;\n    }\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.decrementIdent();\n      serializer.println();\n    }\n    out.append(endSeperator);\n  }\n catch (  Exception e) {\n    throw new JSONException(\"write javaBean error\",e);\n  }\n finally {\n    serializer.setContext(parent);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 505,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 126,
        "startColumnNumber" : 16,
        "endLineNumber" : 126,
        "endColumnNumber" : 45
      },
      "nodeContext" : "serializer.incrementIndent();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.alibaba.fastjson.serializer.JSONSerializer"
  }, {
    "nodeContext" : "serializer",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 127,
      "startColumnNumber" : 16,
      "endLineNumber" : 127,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 127,
        "startColumnNumber" : 16,
        "endLineNumber" : 127,
        "endColumnNumber" : 36
      },
      "nodeContext" : "serializer.println()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 127,
        "startColumnNumber" : 16,
        "endLineNumber" : 127,
        "endColumnNumber" : 37
      },
      "nodeContext" : "serializer.println();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 125,
        "startColumnNumber" : 85,
        "endLineNumber" : 128,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  serializer.incrementIndent();\n  serializer.println();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 175,
        "startLineNumber" : 125,
        "startColumnNumber" : 12,
        "endLineNumber" : 128,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n  serializer.incrementIndent();\n  serializer.println();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 22,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3756,
        "startLineNumber" : 120,
        "startColumnNumber" : 12,
        "endLineNumber" : 214,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final char startSeperator=writeAsArray ? '[' : '{';\n  final char endSeperator=writeAsArray ? ']' : '}';\n  out.append(startSeperator);\n  if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n    serializer.incrementIndent();\n    serializer.println();\n  }\n  boolean commaFlag=false;\n  if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n    Class<?> objClass=object.getClass();\n    if (objClass != fieldType) {\n      out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n      serializer.write(object.getClass());\n      commaFlag=true;\n    }\n  }\n  char seperator=commaFlag ? ',' : '\\0';\n  char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n  commaFlag=newSeperator == ',';\n  for (int i=0; i < getters.length; ++i) {\n    FieldSerializer fieldSerializer=getters[i];\n    if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n      Field field=fieldSerializer.getField();\n      if (field != null) {\n        if (Modifier.isTransient(field.getModifiers())) {\n          continue;\n        }\n      }\n    }\n    if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n      continue;\n    }\n    Object propertyValue=fieldSerializer.getPropertyValue(object);\n    if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n      continue;\n    }\n    String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n    Object originalValue=propertyValue;\n    propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n    if (propertyValue == null && !writeAsArray) {\n      if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n        continue;\n      }\n    }\n    if (commaFlag) {\n      out.append(',');\n      if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n        serializer.println();\n      }\n    }\n    if (key != fieldSerializer.getName()) {\n      if (!writeAsArray) {\n        out.writeFieldName(key);\n      }\n      serializer.write(propertyValue);\n    }\n else     if (originalValue != propertyValue) {\n      if (!writeAsArray) {\n        fieldSerializer.writePrefix(serializer);\n      }\n      serializer.write(propertyValue);\n    }\n else {\n      if (!writeAsArray) {\n        fieldSerializer.writeProperty(serializer,propertyValue);\n      }\n else {\n        fieldSerializer.writeValue(serializer,propertyValue);\n      }\n    }\n    commaFlag=true;\n  }\n  if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n    serializer.decrementIdent();\n    serializer.println();\n  }\n  out.append(endSeperator);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 368,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3923,
        "startLineNumber" : 120,
        "startColumnNumber" : 8,
        "endLineNumber" : 218,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  final char startSeperator=writeAsArray ? '[' : '{';\n  final char endSeperator=writeAsArray ? ']' : '}';\n  out.append(startSeperator);\n  if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n    serializer.incrementIndent();\n    serializer.println();\n  }\n  boolean commaFlag=false;\n  if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n    Class<?> objClass=object.getClass();\n    if (objClass != fieldType) {\n      out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n      serializer.write(object.getClass());\n      commaFlag=true;\n    }\n  }\n  char seperator=commaFlag ? ',' : '\\0';\n  char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n  commaFlag=newSeperator == ',';\n  for (int i=0; i < getters.length; ++i) {\n    FieldSerializer fieldSerializer=getters[i];\n    if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n      Field field=fieldSerializer.getField();\n      if (field != null) {\n        if (Modifier.isTransient(field.getModifiers())) {\n          continue;\n        }\n      }\n    }\n    if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n      continue;\n    }\n    Object propertyValue=fieldSerializer.getPropertyValue(object);\n    if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n      continue;\n    }\n    String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n    Object originalValue=propertyValue;\n    propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n    if (propertyValue == null && !writeAsArray) {\n      if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n        continue;\n      }\n    }\n    if (commaFlag) {\n      out.append(',');\n      if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n        serializer.println();\n      }\n    }\n    if (key != fieldSerializer.getName()) {\n      if (!writeAsArray) {\n        out.writeFieldName(key);\n      }\n      serializer.write(propertyValue);\n    }\n else     if (originalValue != propertyValue) {\n      if (!writeAsArray) {\n        fieldSerializer.writePrefix(serializer);\n      }\n      serializer.write(propertyValue);\n    }\n else {\n      if (!writeAsArray) {\n        fieldSerializer.writeProperty(serializer,propertyValue);\n      }\n else {\n        fieldSerializer.writeValue(serializer,propertyValue);\n      }\n    }\n    commaFlag=true;\n  }\n  if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n    serializer.decrementIdent();\n    serializer.println();\n  }\n  out.append(endSeperator);\n}\n catch (Exception e) {\n  throw new JSONException(\"write javaBean error\",e);\n}\n finally {\n  serializer.setContext(parent);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 387,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4762,
        "startLineNumber" : 89,
        "startColumnNumber" : 117,
        "endLineNumber" : 219,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SerializeWriter out=serializer.getWriter();\n  if (object == null) {\n    out.writeNull();\n    return;\n  }\n  if (serializer.containsReference(object)) {\n    writeReference(serializer,object);\n    return;\n  }\n  final FieldSerializer[] getters;\n  if (out.isEnabled(SerializerFeature.SortField)) {\n    getters=this.sortedGetters;\n  }\n else {\n    getters=this.getters;\n  }\n  SerialContext parent=serializer.getContext();\n  serializer.setContext(parent,object,fieldName);\n  boolean writeAsArray;\n  if (out.isEnabled(SerializerFeature.WriteJavaBeanAsArray)) {\n    writeAsArray=true;\n  }\n else {\n    writeAsArray=false;\n  }\n  try {\n    final char startSeperator=writeAsArray ? '[' : '{';\n    final char endSeperator=writeAsArray ? ']' : '}';\n    out.append(startSeperator);\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.incrementIndent();\n      serializer.println();\n    }\n    boolean commaFlag=false;\n    if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n      Class<?> objClass=object.getClass();\n      if (objClass != fieldType) {\n        out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n        serializer.write(object.getClass());\n        commaFlag=true;\n      }\n    }\n    char seperator=commaFlag ? ',' : '\\0';\n    char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n    commaFlag=newSeperator == ',';\n    for (int i=0; i < getters.length; ++i) {\n      FieldSerializer fieldSerializer=getters[i];\n      if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n        Field field=fieldSerializer.getField();\n        if (field != null) {\n          if (Modifier.isTransient(field.getModifiers())) {\n            continue;\n          }\n        }\n      }\n      if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n        continue;\n      }\n      Object propertyValue=fieldSerializer.getPropertyValue(object);\n      if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n        continue;\n      }\n      String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n      Object originalValue=propertyValue;\n      propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n      if (propertyValue == null && !writeAsArray) {\n        if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n          continue;\n        }\n      }\n      if (commaFlag) {\n        out.append(',');\n        if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n          serializer.println();\n        }\n      }\n      if (key != fieldSerializer.getName()) {\n        if (!writeAsArray) {\n          out.writeFieldName(key);\n        }\n        serializer.write(propertyValue);\n      }\n else       if (originalValue != propertyValue) {\n        if (!writeAsArray) {\n          fieldSerializer.writePrefix(serializer);\n        }\n        serializer.write(propertyValue);\n      }\n else {\n        if (!writeAsArray) {\n          fieldSerializer.writeProperty(serializer,propertyValue);\n        }\n else {\n          fieldSerializer.writeValue(serializer,propertyValue);\n        }\n      }\n      commaFlag=true;\n    }\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.decrementIdent();\n      serializer.println();\n    }\n    out.append(endSeperator);\n  }\n catch (  Exception e) {\n    throw new JSONException(\"write javaBean error\",e);\n  }\n finally {\n    serializer.setContext(parent);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 483,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4875,
        "startLineNumber" : 89,
        "startColumnNumber" : 4,
        "endLineNumber" : 219,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void write(JSONSerializer serializer,Object object,Object fieldName,Type fieldType) throws IOException {\n  SerializeWriter out=serializer.getWriter();\n  if (object == null) {\n    out.writeNull();\n    return;\n  }\n  if (serializer.containsReference(object)) {\n    writeReference(serializer,object);\n    return;\n  }\n  final FieldSerializer[] getters;\n  if (out.isEnabled(SerializerFeature.SortField)) {\n    getters=this.sortedGetters;\n  }\n else {\n    getters=this.getters;\n  }\n  SerialContext parent=serializer.getContext();\n  serializer.setContext(parent,object,fieldName);\n  boolean writeAsArray;\n  if (out.isEnabled(SerializerFeature.WriteJavaBeanAsArray)) {\n    writeAsArray=true;\n  }\n else {\n    writeAsArray=false;\n  }\n  try {\n    final char startSeperator=writeAsArray ? '[' : '{';\n    final char endSeperator=writeAsArray ? ']' : '}';\n    out.append(startSeperator);\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.incrementIndent();\n      serializer.println();\n    }\n    boolean commaFlag=false;\n    if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n      Class<?> objClass=object.getClass();\n      if (objClass != fieldType) {\n        out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n        serializer.write(object.getClass());\n        commaFlag=true;\n      }\n    }\n    char seperator=commaFlag ? ',' : '\\0';\n    char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n    commaFlag=newSeperator == ',';\n    for (int i=0; i < getters.length; ++i) {\n      FieldSerializer fieldSerializer=getters[i];\n      if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n        Field field=fieldSerializer.getField();\n        if (field != null) {\n          if (Modifier.isTransient(field.getModifiers())) {\n            continue;\n          }\n        }\n      }\n      if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n        continue;\n      }\n      Object propertyValue=fieldSerializer.getPropertyValue(object);\n      if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n        continue;\n      }\n      String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n      Object originalValue=propertyValue;\n      propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n      if (propertyValue == null && !writeAsArray) {\n        if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n          continue;\n        }\n      }\n      if (commaFlag) {\n        out.append(',');\n        if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n          serializer.println();\n        }\n      }\n      if (key != fieldSerializer.getName()) {\n        if (!writeAsArray) {\n          out.writeFieldName(key);\n        }\n        serializer.write(propertyValue);\n      }\n else       if (originalValue != propertyValue) {\n        if (!writeAsArray) {\n          fieldSerializer.writePrefix(serializer);\n        }\n        serializer.write(propertyValue);\n      }\n else {\n        if (!writeAsArray) {\n          fieldSerializer.writeProperty(serializer,propertyValue);\n        }\n else {\n          fieldSerializer.writeValue(serializer,propertyValue);\n        }\n      }\n      commaFlag=true;\n    }\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.decrementIdent();\n      serializer.println();\n    }\n    out.append(endSeperator);\n  }\n catch (  Exception e) {\n    throw new JSONException(\"write javaBean error\",e);\n  }\n finally {\n    serializer.setContext(parent);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 505,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 127,
        "startColumnNumber" : 16,
        "endLineNumber" : 127,
        "endColumnNumber" : 37
      },
      "nodeContext" : "serializer.println();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.alibaba.fastjson.serializer.JSONSerializer"
  }, {
    "nodeContext" : "serializer",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 132,
      "startColumnNumber" : 33,
      "endLineNumber" : 132,
      "endColumnNumber" : 43
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 132,
        "startColumnNumber" : 16,
        "endLineNumber" : 132,
        "endColumnNumber" : 74
      },
      "nodeContext" : "isWriteClassName(serializer,object,fieldType,fieldName)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 362,
        "startLineNumber" : 132,
        "startColumnNumber" : 12,
        "endLineNumber" : 139,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n  Class<?> objClass=object.getClass();\n  if (objClass != fieldType) {\n    out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n    serializer.write(object.getClass());\n    commaFlag=true;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 41,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3756,
        "startLineNumber" : 120,
        "startColumnNumber" : 12,
        "endLineNumber" : 214,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final char startSeperator=writeAsArray ? '[' : '{';\n  final char endSeperator=writeAsArray ? ']' : '}';\n  out.append(startSeperator);\n  if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n    serializer.incrementIndent();\n    serializer.println();\n  }\n  boolean commaFlag=false;\n  if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n    Class<?> objClass=object.getClass();\n    if (objClass != fieldType) {\n      out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n      serializer.write(object.getClass());\n      commaFlag=true;\n    }\n  }\n  char seperator=commaFlag ? ',' : '\\0';\n  char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n  commaFlag=newSeperator == ',';\n  for (int i=0; i < getters.length; ++i) {\n    FieldSerializer fieldSerializer=getters[i];\n    if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n      Field field=fieldSerializer.getField();\n      if (field != null) {\n        if (Modifier.isTransient(field.getModifiers())) {\n          continue;\n        }\n      }\n    }\n    if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n      continue;\n    }\n    Object propertyValue=fieldSerializer.getPropertyValue(object);\n    if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n      continue;\n    }\n    String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n    Object originalValue=propertyValue;\n    propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n    if (propertyValue == null && !writeAsArray) {\n      if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n        continue;\n      }\n    }\n    if (commaFlag) {\n      out.append(',');\n      if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n        serializer.println();\n      }\n    }\n    if (key != fieldSerializer.getName()) {\n      if (!writeAsArray) {\n        out.writeFieldName(key);\n      }\n      serializer.write(propertyValue);\n    }\n else     if (originalValue != propertyValue) {\n      if (!writeAsArray) {\n        fieldSerializer.writePrefix(serializer);\n      }\n      serializer.write(propertyValue);\n    }\n else {\n      if (!writeAsArray) {\n        fieldSerializer.writeProperty(serializer,propertyValue);\n      }\n else {\n        fieldSerializer.writeValue(serializer,propertyValue);\n      }\n    }\n    commaFlag=true;\n  }\n  if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n    serializer.decrementIdent();\n    serializer.println();\n  }\n  out.append(endSeperator);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 368,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3923,
        "startLineNumber" : 120,
        "startColumnNumber" : 8,
        "endLineNumber" : 218,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  final char startSeperator=writeAsArray ? '[' : '{';\n  final char endSeperator=writeAsArray ? ']' : '}';\n  out.append(startSeperator);\n  if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n    serializer.incrementIndent();\n    serializer.println();\n  }\n  boolean commaFlag=false;\n  if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n    Class<?> objClass=object.getClass();\n    if (objClass != fieldType) {\n      out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n      serializer.write(object.getClass());\n      commaFlag=true;\n    }\n  }\n  char seperator=commaFlag ? ',' : '\\0';\n  char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n  commaFlag=newSeperator == ',';\n  for (int i=0; i < getters.length; ++i) {\n    FieldSerializer fieldSerializer=getters[i];\n    if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n      Field field=fieldSerializer.getField();\n      if (field != null) {\n        if (Modifier.isTransient(field.getModifiers())) {\n          continue;\n        }\n      }\n    }\n    if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n      continue;\n    }\n    Object propertyValue=fieldSerializer.getPropertyValue(object);\n    if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n      continue;\n    }\n    String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n    Object originalValue=propertyValue;\n    propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n    if (propertyValue == null && !writeAsArray) {\n      if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n        continue;\n      }\n    }\n    if (commaFlag) {\n      out.append(',');\n      if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n        serializer.println();\n      }\n    }\n    if (key != fieldSerializer.getName()) {\n      if (!writeAsArray) {\n        out.writeFieldName(key);\n      }\n      serializer.write(propertyValue);\n    }\n else     if (originalValue != propertyValue) {\n      if (!writeAsArray) {\n        fieldSerializer.writePrefix(serializer);\n      }\n      serializer.write(propertyValue);\n    }\n else {\n      if (!writeAsArray) {\n        fieldSerializer.writeProperty(serializer,propertyValue);\n      }\n else {\n        fieldSerializer.writeValue(serializer,propertyValue);\n      }\n    }\n    commaFlag=true;\n  }\n  if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n    serializer.decrementIdent();\n    serializer.println();\n  }\n  out.append(endSeperator);\n}\n catch (Exception e) {\n  throw new JSONException(\"write javaBean error\",e);\n}\n finally {\n  serializer.setContext(parent);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 387,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4762,
        "startLineNumber" : 89,
        "startColumnNumber" : 117,
        "endLineNumber" : 219,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SerializeWriter out=serializer.getWriter();\n  if (object == null) {\n    out.writeNull();\n    return;\n  }\n  if (serializer.containsReference(object)) {\n    writeReference(serializer,object);\n    return;\n  }\n  final FieldSerializer[] getters;\n  if (out.isEnabled(SerializerFeature.SortField)) {\n    getters=this.sortedGetters;\n  }\n else {\n    getters=this.getters;\n  }\n  SerialContext parent=serializer.getContext();\n  serializer.setContext(parent,object,fieldName);\n  boolean writeAsArray;\n  if (out.isEnabled(SerializerFeature.WriteJavaBeanAsArray)) {\n    writeAsArray=true;\n  }\n else {\n    writeAsArray=false;\n  }\n  try {\n    final char startSeperator=writeAsArray ? '[' : '{';\n    final char endSeperator=writeAsArray ? ']' : '}';\n    out.append(startSeperator);\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.incrementIndent();\n      serializer.println();\n    }\n    boolean commaFlag=false;\n    if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n      Class<?> objClass=object.getClass();\n      if (objClass != fieldType) {\n        out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n        serializer.write(object.getClass());\n        commaFlag=true;\n      }\n    }\n    char seperator=commaFlag ? ',' : '\\0';\n    char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n    commaFlag=newSeperator == ',';\n    for (int i=0; i < getters.length; ++i) {\n      FieldSerializer fieldSerializer=getters[i];\n      if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n        Field field=fieldSerializer.getField();\n        if (field != null) {\n          if (Modifier.isTransient(field.getModifiers())) {\n            continue;\n          }\n        }\n      }\n      if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n        continue;\n      }\n      Object propertyValue=fieldSerializer.getPropertyValue(object);\n      if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n        continue;\n      }\n      String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n      Object originalValue=propertyValue;\n      propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n      if (propertyValue == null && !writeAsArray) {\n        if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n          continue;\n        }\n      }\n      if (commaFlag) {\n        out.append(',');\n        if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n          serializer.println();\n        }\n      }\n      if (key != fieldSerializer.getName()) {\n        if (!writeAsArray) {\n          out.writeFieldName(key);\n        }\n        serializer.write(propertyValue);\n      }\n else       if (originalValue != propertyValue) {\n        if (!writeAsArray) {\n          fieldSerializer.writePrefix(serializer);\n        }\n        serializer.write(propertyValue);\n      }\n else {\n        if (!writeAsArray) {\n          fieldSerializer.writeProperty(serializer,propertyValue);\n        }\n else {\n          fieldSerializer.writeValue(serializer,propertyValue);\n        }\n      }\n      commaFlag=true;\n    }\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.decrementIdent();\n      serializer.println();\n    }\n    out.append(endSeperator);\n  }\n catch (  Exception e) {\n    throw new JSONException(\"write javaBean error\",e);\n  }\n finally {\n    serializer.setContext(parent);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 483,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4875,
        "startLineNumber" : 89,
        "startColumnNumber" : 4,
        "endLineNumber" : 219,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void write(JSONSerializer serializer,Object object,Object fieldName,Type fieldType) throws IOException {\n  SerializeWriter out=serializer.getWriter();\n  if (object == null) {\n    out.writeNull();\n    return;\n  }\n  if (serializer.containsReference(object)) {\n    writeReference(serializer,object);\n    return;\n  }\n  final FieldSerializer[] getters;\n  if (out.isEnabled(SerializerFeature.SortField)) {\n    getters=this.sortedGetters;\n  }\n else {\n    getters=this.getters;\n  }\n  SerialContext parent=serializer.getContext();\n  serializer.setContext(parent,object,fieldName);\n  boolean writeAsArray;\n  if (out.isEnabled(SerializerFeature.WriteJavaBeanAsArray)) {\n    writeAsArray=true;\n  }\n else {\n    writeAsArray=false;\n  }\n  try {\n    final char startSeperator=writeAsArray ? '[' : '{';\n    final char endSeperator=writeAsArray ? ']' : '}';\n    out.append(startSeperator);\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.incrementIndent();\n      serializer.println();\n    }\n    boolean commaFlag=false;\n    if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n      Class<?> objClass=object.getClass();\n      if (objClass != fieldType) {\n        out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n        serializer.write(object.getClass());\n        commaFlag=true;\n      }\n    }\n    char seperator=commaFlag ? ',' : '\\0';\n    char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n    commaFlag=newSeperator == ',';\n    for (int i=0; i < getters.length; ++i) {\n      FieldSerializer fieldSerializer=getters[i];\n      if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n        Field field=fieldSerializer.getField();\n        if (field != null) {\n          if (Modifier.isTransient(field.getModifiers())) {\n            continue;\n          }\n        }\n      }\n      if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n        continue;\n      }\n      Object propertyValue=fieldSerializer.getPropertyValue(object);\n      if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n        continue;\n      }\n      String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n      Object originalValue=propertyValue;\n      propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n      if (propertyValue == null && !writeAsArray) {\n        if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n          continue;\n        }\n      }\n      if (commaFlag) {\n        out.append(',');\n        if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n          serializer.println();\n        }\n      }\n      if (key != fieldSerializer.getName()) {\n        if (!writeAsArray) {\n          out.writeFieldName(key);\n        }\n        serializer.write(propertyValue);\n      }\n else       if (originalValue != propertyValue) {\n        if (!writeAsArray) {\n          fieldSerializer.writePrefix(serializer);\n        }\n        serializer.write(propertyValue);\n      }\n else {\n        if (!writeAsArray) {\n          fieldSerializer.writeProperty(serializer,propertyValue);\n        }\n else {\n          fieldSerializer.writeValue(serializer,propertyValue);\n        }\n      }\n      commaFlag=true;\n    }\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.decrementIdent();\n      serializer.println();\n    }\n    out.append(endSeperator);\n  }\n catch (  Exception e) {\n    throw new JSONException(\"write javaBean error\",e);\n  }\n finally {\n    serializer.setContext(parent);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 505,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 132,
        "startColumnNumber" : 16,
        "endLineNumber" : 132,
        "endColumnNumber" : 74
      },
      "nodeContext" : "isWriteClassName(serializer,object,fieldType,fieldName)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.alibaba.fastjson.serializer.JSONSerializer"
  }, {
    "nodeContext" : "serializer",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 136,
      "startColumnNumber" : 20,
      "endLineNumber" : 136,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 136,
        "startColumnNumber" : 20,
        "endLineNumber" : 136,
        "endColumnNumber" : 55
      },
      "nodeContext" : "serializer.write(object.getClass())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 136,
        "startColumnNumber" : 20,
        "endLineNumber" : 136,
        "endColumnNumber" : 56
      },
      "nodeContext" : "serializer.write(object.getClass());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 181,
        "startLineNumber" : 134,
        "startColumnNumber" : 43,
        "endLineNumber" : 138,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n  serializer.write(object.getClass());\n  commaFlag=true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 19,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 208,
        "startLineNumber" : 134,
        "startColumnNumber" : 16,
        "endLineNumber" : 138,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (objClass != fieldType) {\n  out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n  serializer.write(object.getClass());\n  commaFlag=true;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 23,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 298,
        "startLineNumber" : 132,
        "startColumnNumber" : 76,
        "endLineNumber" : 139,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Class<?> objClass=object.getClass();\n  if (objClass != fieldType) {\n    out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n    serializer.write(object.getClass());\n    commaFlag=true;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 34,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 362,
        "startLineNumber" : 132,
        "startColumnNumber" : 12,
        "endLineNumber" : 139,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n  Class<?> objClass=object.getClass();\n  if (objClass != fieldType) {\n    out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n    serializer.write(object.getClass());\n    commaFlag=true;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 41,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3756,
        "startLineNumber" : 120,
        "startColumnNumber" : 12,
        "endLineNumber" : 214,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final char startSeperator=writeAsArray ? '[' : '{';\n  final char endSeperator=writeAsArray ? ']' : '}';\n  out.append(startSeperator);\n  if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n    serializer.incrementIndent();\n    serializer.println();\n  }\n  boolean commaFlag=false;\n  if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n    Class<?> objClass=object.getClass();\n    if (objClass != fieldType) {\n      out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n      serializer.write(object.getClass());\n      commaFlag=true;\n    }\n  }\n  char seperator=commaFlag ? ',' : '\\0';\n  char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n  commaFlag=newSeperator == ',';\n  for (int i=0; i < getters.length; ++i) {\n    FieldSerializer fieldSerializer=getters[i];\n    if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n      Field field=fieldSerializer.getField();\n      if (field != null) {\n        if (Modifier.isTransient(field.getModifiers())) {\n          continue;\n        }\n      }\n    }\n    if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n      continue;\n    }\n    Object propertyValue=fieldSerializer.getPropertyValue(object);\n    if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n      continue;\n    }\n    String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n    Object originalValue=propertyValue;\n    propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n    if (propertyValue == null && !writeAsArray) {\n      if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n        continue;\n      }\n    }\n    if (commaFlag) {\n      out.append(',');\n      if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n        serializer.println();\n      }\n    }\n    if (key != fieldSerializer.getName()) {\n      if (!writeAsArray) {\n        out.writeFieldName(key);\n      }\n      serializer.write(propertyValue);\n    }\n else     if (originalValue != propertyValue) {\n      if (!writeAsArray) {\n        fieldSerializer.writePrefix(serializer);\n      }\n      serializer.write(propertyValue);\n    }\n else {\n      if (!writeAsArray) {\n        fieldSerializer.writeProperty(serializer,propertyValue);\n      }\n else {\n        fieldSerializer.writeValue(serializer,propertyValue);\n      }\n    }\n    commaFlag=true;\n  }\n  if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n    serializer.decrementIdent();\n    serializer.println();\n  }\n  out.append(endSeperator);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 368,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3923,
        "startLineNumber" : 120,
        "startColumnNumber" : 8,
        "endLineNumber" : 218,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  final char startSeperator=writeAsArray ? '[' : '{';\n  final char endSeperator=writeAsArray ? ']' : '}';\n  out.append(startSeperator);\n  if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n    serializer.incrementIndent();\n    serializer.println();\n  }\n  boolean commaFlag=false;\n  if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n    Class<?> objClass=object.getClass();\n    if (objClass != fieldType) {\n      out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n      serializer.write(object.getClass());\n      commaFlag=true;\n    }\n  }\n  char seperator=commaFlag ? ',' : '\\0';\n  char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n  commaFlag=newSeperator == ',';\n  for (int i=0; i < getters.length; ++i) {\n    FieldSerializer fieldSerializer=getters[i];\n    if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n      Field field=fieldSerializer.getField();\n      if (field != null) {\n        if (Modifier.isTransient(field.getModifiers())) {\n          continue;\n        }\n      }\n    }\n    if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n      continue;\n    }\n    Object propertyValue=fieldSerializer.getPropertyValue(object);\n    if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n      continue;\n    }\n    String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n    Object originalValue=propertyValue;\n    propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n    if (propertyValue == null && !writeAsArray) {\n      if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n        continue;\n      }\n    }\n    if (commaFlag) {\n      out.append(',');\n      if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n        serializer.println();\n      }\n    }\n    if (key != fieldSerializer.getName()) {\n      if (!writeAsArray) {\n        out.writeFieldName(key);\n      }\n      serializer.write(propertyValue);\n    }\n else     if (originalValue != propertyValue) {\n      if (!writeAsArray) {\n        fieldSerializer.writePrefix(serializer);\n      }\n      serializer.write(propertyValue);\n    }\n else {\n      if (!writeAsArray) {\n        fieldSerializer.writeProperty(serializer,propertyValue);\n      }\n else {\n        fieldSerializer.writeValue(serializer,propertyValue);\n      }\n    }\n    commaFlag=true;\n  }\n  if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n    serializer.decrementIdent();\n    serializer.println();\n  }\n  out.append(endSeperator);\n}\n catch (Exception e) {\n  throw new JSONException(\"write javaBean error\",e);\n}\n finally {\n  serializer.setContext(parent);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 387,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4762,
        "startLineNumber" : 89,
        "startColumnNumber" : 117,
        "endLineNumber" : 219,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SerializeWriter out=serializer.getWriter();\n  if (object == null) {\n    out.writeNull();\n    return;\n  }\n  if (serializer.containsReference(object)) {\n    writeReference(serializer,object);\n    return;\n  }\n  final FieldSerializer[] getters;\n  if (out.isEnabled(SerializerFeature.SortField)) {\n    getters=this.sortedGetters;\n  }\n else {\n    getters=this.getters;\n  }\n  SerialContext parent=serializer.getContext();\n  serializer.setContext(parent,object,fieldName);\n  boolean writeAsArray;\n  if (out.isEnabled(SerializerFeature.WriteJavaBeanAsArray)) {\n    writeAsArray=true;\n  }\n else {\n    writeAsArray=false;\n  }\n  try {\n    final char startSeperator=writeAsArray ? '[' : '{';\n    final char endSeperator=writeAsArray ? ']' : '}';\n    out.append(startSeperator);\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.incrementIndent();\n      serializer.println();\n    }\n    boolean commaFlag=false;\n    if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n      Class<?> objClass=object.getClass();\n      if (objClass != fieldType) {\n        out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n        serializer.write(object.getClass());\n        commaFlag=true;\n      }\n    }\n    char seperator=commaFlag ? ',' : '\\0';\n    char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n    commaFlag=newSeperator == ',';\n    for (int i=0; i < getters.length; ++i) {\n      FieldSerializer fieldSerializer=getters[i];\n      if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n        Field field=fieldSerializer.getField();\n        if (field != null) {\n          if (Modifier.isTransient(field.getModifiers())) {\n            continue;\n          }\n        }\n      }\n      if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n        continue;\n      }\n      Object propertyValue=fieldSerializer.getPropertyValue(object);\n      if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n        continue;\n      }\n      String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n      Object originalValue=propertyValue;\n      propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n      if (propertyValue == null && !writeAsArray) {\n        if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n          continue;\n        }\n      }\n      if (commaFlag) {\n        out.append(',');\n        if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n          serializer.println();\n        }\n      }\n      if (key != fieldSerializer.getName()) {\n        if (!writeAsArray) {\n          out.writeFieldName(key);\n        }\n        serializer.write(propertyValue);\n      }\n else       if (originalValue != propertyValue) {\n        if (!writeAsArray) {\n          fieldSerializer.writePrefix(serializer);\n        }\n        serializer.write(propertyValue);\n      }\n else {\n        if (!writeAsArray) {\n          fieldSerializer.writeProperty(serializer,propertyValue);\n        }\n else {\n          fieldSerializer.writeValue(serializer,propertyValue);\n        }\n      }\n      commaFlag=true;\n    }\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.decrementIdent();\n      serializer.println();\n    }\n    out.append(endSeperator);\n  }\n catch (  Exception e) {\n    throw new JSONException(\"write javaBean error\",e);\n  }\n finally {\n    serializer.setContext(parent);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 483,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4875,
        "startLineNumber" : 89,
        "startColumnNumber" : 4,
        "endLineNumber" : 219,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void write(JSONSerializer serializer,Object object,Object fieldName,Type fieldType) throws IOException {\n  SerializeWriter out=serializer.getWriter();\n  if (object == null) {\n    out.writeNull();\n    return;\n  }\n  if (serializer.containsReference(object)) {\n    writeReference(serializer,object);\n    return;\n  }\n  final FieldSerializer[] getters;\n  if (out.isEnabled(SerializerFeature.SortField)) {\n    getters=this.sortedGetters;\n  }\n else {\n    getters=this.getters;\n  }\n  SerialContext parent=serializer.getContext();\n  serializer.setContext(parent,object,fieldName);\n  boolean writeAsArray;\n  if (out.isEnabled(SerializerFeature.WriteJavaBeanAsArray)) {\n    writeAsArray=true;\n  }\n else {\n    writeAsArray=false;\n  }\n  try {\n    final char startSeperator=writeAsArray ? '[' : '{';\n    final char endSeperator=writeAsArray ? ']' : '}';\n    out.append(startSeperator);\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.incrementIndent();\n      serializer.println();\n    }\n    boolean commaFlag=false;\n    if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n      Class<?> objClass=object.getClass();\n      if (objClass != fieldType) {\n        out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n        serializer.write(object.getClass());\n        commaFlag=true;\n      }\n    }\n    char seperator=commaFlag ? ',' : '\\0';\n    char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n    commaFlag=newSeperator == ',';\n    for (int i=0; i < getters.length; ++i) {\n      FieldSerializer fieldSerializer=getters[i];\n      if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n        Field field=fieldSerializer.getField();\n        if (field != null) {\n          if (Modifier.isTransient(field.getModifiers())) {\n            continue;\n          }\n        }\n      }\n      if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n        continue;\n      }\n      Object propertyValue=fieldSerializer.getPropertyValue(object);\n      if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n        continue;\n      }\n      String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n      Object originalValue=propertyValue;\n      propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n      if (propertyValue == null && !writeAsArray) {\n        if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n          continue;\n        }\n      }\n      if (commaFlag) {\n        out.append(',');\n        if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n          serializer.println();\n        }\n      }\n      if (key != fieldSerializer.getName()) {\n        if (!writeAsArray) {\n          out.writeFieldName(key);\n        }\n        serializer.write(propertyValue);\n      }\n else       if (originalValue != propertyValue) {\n        if (!writeAsArray) {\n          fieldSerializer.writePrefix(serializer);\n        }\n        serializer.write(propertyValue);\n      }\n else {\n        if (!writeAsArray) {\n          fieldSerializer.writeProperty(serializer,propertyValue);\n        }\n else {\n          fieldSerializer.writeValue(serializer,propertyValue);\n        }\n      }\n      commaFlag=true;\n    }\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.decrementIdent();\n      serializer.println();\n    }\n    out.append(endSeperator);\n  }\n catch (  Exception e) {\n    throw new JSONException(\"write javaBean error\",e);\n  }\n finally {\n    serializer.setContext(parent);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 505,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 136,
        "startColumnNumber" : 20,
        "endLineNumber" : 136,
        "endColumnNumber" : 56
      },
      "nodeContext" : "serializer.write(object.getClass());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.alibaba.fastjson.serializer.JSONSerializer"
  }, {
    "nodeContext" : "serializer",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 143,
      "startColumnNumber" : 56,
      "endLineNumber" : 143,
      "endColumnNumber" : 66
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 143,
        "startColumnNumber" : 32,
        "endLineNumber" : 143,
        "endColumnNumber" : 86
      },
      "nodeContext" : "FilterUtils.writeBefore(serializer,object,seperator)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 143,
        "startColumnNumber" : 17,
        "endLineNumber" : 143,
        "endColumnNumber" : 86
      },
      "nodeContext" : "newSeperator=FilterUtils.writeBefore(serializer,object,seperator)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 143,
        "startColumnNumber" : 12,
        "endLineNumber" : 143,
        "endColumnNumber" : 87
      },
      "nodeContext" : "char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3756,
        "startLineNumber" : 120,
        "startColumnNumber" : 12,
        "endLineNumber" : 214,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final char startSeperator=writeAsArray ? '[' : '{';\n  final char endSeperator=writeAsArray ? ']' : '}';\n  out.append(startSeperator);\n  if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n    serializer.incrementIndent();\n    serializer.println();\n  }\n  boolean commaFlag=false;\n  if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n    Class<?> objClass=object.getClass();\n    if (objClass != fieldType) {\n      out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n      serializer.write(object.getClass());\n      commaFlag=true;\n    }\n  }\n  char seperator=commaFlag ? ',' : '\\0';\n  char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n  commaFlag=newSeperator == ',';\n  for (int i=0; i < getters.length; ++i) {\n    FieldSerializer fieldSerializer=getters[i];\n    if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n      Field field=fieldSerializer.getField();\n      if (field != null) {\n        if (Modifier.isTransient(field.getModifiers())) {\n          continue;\n        }\n      }\n    }\n    if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n      continue;\n    }\n    Object propertyValue=fieldSerializer.getPropertyValue(object);\n    if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n      continue;\n    }\n    String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n    Object originalValue=propertyValue;\n    propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n    if (propertyValue == null && !writeAsArray) {\n      if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n        continue;\n      }\n    }\n    if (commaFlag) {\n      out.append(',');\n      if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n        serializer.println();\n      }\n    }\n    if (key != fieldSerializer.getName()) {\n      if (!writeAsArray) {\n        out.writeFieldName(key);\n      }\n      serializer.write(propertyValue);\n    }\n else     if (originalValue != propertyValue) {\n      if (!writeAsArray) {\n        fieldSerializer.writePrefix(serializer);\n      }\n      serializer.write(propertyValue);\n    }\n else {\n      if (!writeAsArray) {\n        fieldSerializer.writeProperty(serializer,propertyValue);\n      }\n else {\n        fieldSerializer.writeValue(serializer,propertyValue);\n      }\n    }\n    commaFlag=true;\n  }\n  if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n    serializer.decrementIdent();\n    serializer.println();\n  }\n  out.append(endSeperator);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 368,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3923,
        "startLineNumber" : 120,
        "startColumnNumber" : 8,
        "endLineNumber" : 218,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  final char startSeperator=writeAsArray ? '[' : '{';\n  final char endSeperator=writeAsArray ? ']' : '}';\n  out.append(startSeperator);\n  if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n    serializer.incrementIndent();\n    serializer.println();\n  }\n  boolean commaFlag=false;\n  if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n    Class<?> objClass=object.getClass();\n    if (objClass != fieldType) {\n      out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n      serializer.write(object.getClass());\n      commaFlag=true;\n    }\n  }\n  char seperator=commaFlag ? ',' : '\\0';\n  char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n  commaFlag=newSeperator == ',';\n  for (int i=0; i < getters.length; ++i) {\n    FieldSerializer fieldSerializer=getters[i];\n    if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n      Field field=fieldSerializer.getField();\n      if (field != null) {\n        if (Modifier.isTransient(field.getModifiers())) {\n          continue;\n        }\n      }\n    }\n    if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n      continue;\n    }\n    Object propertyValue=fieldSerializer.getPropertyValue(object);\n    if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n      continue;\n    }\n    String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n    Object originalValue=propertyValue;\n    propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n    if (propertyValue == null && !writeAsArray) {\n      if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n        continue;\n      }\n    }\n    if (commaFlag) {\n      out.append(',');\n      if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n        serializer.println();\n      }\n    }\n    if (key != fieldSerializer.getName()) {\n      if (!writeAsArray) {\n        out.writeFieldName(key);\n      }\n      serializer.write(propertyValue);\n    }\n else     if (originalValue != propertyValue) {\n      if (!writeAsArray) {\n        fieldSerializer.writePrefix(serializer);\n      }\n      serializer.write(propertyValue);\n    }\n else {\n      if (!writeAsArray) {\n        fieldSerializer.writeProperty(serializer,propertyValue);\n      }\n else {\n        fieldSerializer.writeValue(serializer,propertyValue);\n      }\n    }\n    commaFlag=true;\n  }\n  if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n    serializer.decrementIdent();\n    serializer.println();\n  }\n  out.append(endSeperator);\n}\n catch (Exception e) {\n  throw new JSONException(\"write javaBean error\",e);\n}\n finally {\n  serializer.setContext(parent);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 387,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4762,
        "startLineNumber" : 89,
        "startColumnNumber" : 117,
        "endLineNumber" : 219,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SerializeWriter out=serializer.getWriter();\n  if (object == null) {\n    out.writeNull();\n    return;\n  }\n  if (serializer.containsReference(object)) {\n    writeReference(serializer,object);\n    return;\n  }\n  final FieldSerializer[] getters;\n  if (out.isEnabled(SerializerFeature.SortField)) {\n    getters=this.sortedGetters;\n  }\n else {\n    getters=this.getters;\n  }\n  SerialContext parent=serializer.getContext();\n  serializer.setContext(parent,object,fieldName);\n  boolean writeAsArray;\n  if (out.isEnabled(SerializerFeature.WriteJavaBeanAsArray)) {\n    writeAsArray=true;\n  }\n else {\n    writeAsArray=false;\n  }\n  try {\n    final char startSeperator=writeAsArray ? '[' : '{';\n    final char endSeperator=writeAsArray ? ']' : '}';\n    out.append(startSeperator);\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.incrementIndent();\n      serializer.println();\n    }\n    boolean commaFlag=false;\n    if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n      Class<?> objClass=object.getClass();\n      if (objClass != fieldType) {\n        out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n        serializer.write(object.getClass());\n        commaFlag=true;\n      }\n    }\n    char seperator=commaFlag ? ',' : '\\0';\n    char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n    commaFlag=newSeperator == ',';\n    for (int i=0; i < getters.length; ++i) {\n      FieldSerializer fieldSerializer=getters[i];\n      if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n        Field field=fieldSerializer.getField();\n        if (field != null) {\n          if (Modifier.isTransient(field.getModifiers())) {\n            continue;\n          }\n        }\n      }\n      if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n        continue;\n      }\n      Object propertyValue=fieldSerializer.getPropertyValue(object);\n      if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n        continue;\n      }\n      String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n      Object originalValue=propertyValue;\n      propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n      if (propertyValue == null && !writeAsArray) {\n        if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n          continue;\n        }\n      }\n      if (commaFlag) {\n        out.append(',');\n        if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n          serializer.println();\n        }\n      }\n      if (key != fieldSerializer.getName()) {\n        if (!writeAsArray) {\n          out.writeFieldName(key);\n        }\n        serializer.write(propertyValue);\n      }\n else       if (originalValue != propertyValue) {\n        if (!writeAsArray) {\n          fieldSerializer.writePrefix(serializer);\n        }\n        serializer.write(propertyValue);\n      }\n else {\n        if (!writeAsArray) {\n          fieldSerializer.writeProperty(serializer,propertyValue);\n        }\n else {\n          fieldSerializer.writeValue(serializer,propertyValue);\n        }\n      }\n      commaFlag=true;\n    }\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.decrementIdent();\n      serializer.println();\n    }\n    out.append(endSeperator);\n  }\n catch (  Exception e) {\n    throw new JSONException(\"write javaBean error\",e);\n  }\n finally {\n    serializer.setContext(parent);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 483,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4875,
        "startLineNumber" : 89,
        "startColumnNumber" : 4,
        "endLineNumber" : 219,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void write(JSONSerializer serializer,Object object,Object fieldName,Type fieldType) throws IOException {\n  SerializeWriter out=serializer.getWriter();\n  if (object == null) {\n    out.writeNull();\n    return;\n  }\n  if (serializer.containsReference(object)) {\n    writeReference(serializer,object);\n    return;\n  }\n  final FieldSerializer[] getters;\n  if (out.isEnabled(SerializerFeature.SortField)) {\n    getters=this.sortedGetters;\n  }\n else {\n    getters=this.getters;\n  }\n  SerialContext parent=serializer.getContext();\n  serializer.setContext(parent,object,fieldName);\n  boolean writeAsArray;\n  if (out.isEnabled(SerializerFeature.WriteJavaBeanAsArray)) {\n    writeAsArray=true;\n  }\n else {\n    writeAsArray=false;\n  }\n  try {\n    final char startSeperator=writeAsArray ? '[' : '{';\n    final char endSeperator=writeAsArray ? ']' : '}';\n    out.append(startSeperator);\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.incrementIndent();\n      serializer.println();\n    }\n    boolean commaFlag=false;\n    if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n      Class<?> objClass=object.getClass();\n      if (objClass != fieldType) {\n        out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n        serializer.write(object.getClass());\n        commaFlag=true;\n      }\n    }\n    char seperator=commaFlag ? ',' : '\\0';\n    char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n    commaFlag=newSeperator == ',';\n    for (int i=0; i < getters.length; ++i) {\n      FieldSerializer fieldSerializer=getters[i];\n      if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n        Field field=fieldSerializer.getField();\n        if (field != null) {\n          if (Modifier.isTransient(field.getModifiers())) {\n            continue;\n          }\n        }\n      }\n      if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n        continue;\n      }\n      Object propertyValue=fieldSerializer.getPropertyValue(object);\n      if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n        continue;\n      }\n      String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n      Object originalValue=propertyValue;\n      propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n      if (propertyValue == null && !writeAsArray) {\n        if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n          continue;\n        }\n      }\n      if (commaFlag) {\n        out.append(',');\n        if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n          serializer.println();\n        }\n      }\n      if (key != fieldSerializer.getName()) {\n        if (!writeAsArray) {\n          out.writeFieldName(key);\n        }\n        serializer.write(propertyValue);\n      }\n else       if (originalValue != propertyValue) {\n        if (!writeAsArray) {\n          fieldSerializer.writePrefix(serializer);\n        }\n        serializer.write(propertyValue);\n      }\n else {\n        if (!writeAsArray) {\n          fieldSerializer.writeProperty(serializer,propertyValue);\n        }\n else {\n          fieldSerializer.writeValue(serializer,propertyValue);\n        }\n      }\n      commaFlag=true;\n    }\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.decrementIdent();\n      serializer.println();\n    }\n    out.append(endSeperator);\n  }\n catch (  Exception e) {\n    throw new JSONException(\"write javaBean error\",e);\n  }\n finally {\n    serializer.setContext(parent);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 505,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 143,
        "startColumnNumber" : 12,
        "endLineNumber" : 143,
        "endColumnNumber" : 87
      },
      "nodeContext" : "char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.alibaba.fastjson.serializer.JSONSerializer"
  }, {
    "nodeContext" : "serializer",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 149,
      "startColumnNumber" : 20,
      "endLineNumber" : 149,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 149,
        "startColumnNumber" : 20,
        "endLineNumber" : 149,
        "endColumnNumber" : 78
      },
      "nodeContext" : "serializer.isEnabled(SerializerFeature.SkipTransientField)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 353,
        "startLineNumber" : 149,
        "startColumnNumber" : 16,
        "endLineNumber" : 156,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n  Field field=fieldSerializer.getField();\n  if (field != null) {\n    if (Modifier.isTransient(field.getModifiers())) {\n      continue;\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 30,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 2479,
        "startLineNumber" : 146,
        "startColumnNumber" : 53,
        "endLineNumber" : 206,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  FieldSerializer fieldSerializer=getters[i];\n  if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n    Field field=fieldSerializer.getField();\n    if (field != null) {\n      if (Modifier.isTransient(field.getModifiers())) {\n        continue;\n      }\n    }\n  }\n  if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n    continue;\n  }\n  Object propertyValue=fieldSerializer.getPropertyValue(object);\n  if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n    continue;\n  }\n  String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n  Object originalValue=propertyValue;\n  propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n  if (propertyValue == null && !writeAsArray) {\n    if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n      continue;\n    }\n  }\n  if (commaFlag) {\n    out.append(',');\n    if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.println();\n    }\n  }\n  if (key != fieldSerializer.getName()) {\n    if (!writeAsArray) {\n      out.writeFieldName(key);\n    }\n    serializer.write(propertyValue);\n  }\n else   if (originalValue != propertyValue) {\n    if (!writeAsArray) {\n      fieldSerializer.writePrefix(serializer);\n    }\n    serializer.write(propertyValue);\n  }\n else {\n    if (!writeAsArray) {\n      fieldSerializer.writeProperty(serializer,propertyValue);\n    }\n else {\n      fieldSerializer.writeValue(serializer,propertyValue);\n    }\n  }\n  commaFlag=true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 212,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2520,
        "startLineNumber" : 146,
        "startColumnNumber" : 12,
        "endLineNumber" : 206,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int i=0; i < getters.length; ++i) {\n  FieldSerializer fieldSerializer=getters[i];\n  if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n    Field field=fieldSerializer.getField();\n    if (field != null) {\n      if (Modifier.isTransient(field.getModifiers())) {\n        continue;\n      }\n    }\n  }\n  if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n    continue;\n  }\n  Object propertyValue=fieldSerializer.getPropertyValue(object);\n  if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n    continue;\n  }\n  String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n  Object originalValue=propertyValue;\n  propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n  if (propertyValue == null && !writeAsArray) {\n    if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n      continue;\n    }\n  }\n  if (commaFlag) {\n    out.append(',');\n    if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.println();\n    }\n  }\n  if (key != fieldSerializer.getName()) {\n    if (!writeAsArray) {\n      out.writeFieldName(key);\n    }\n    serializer.write(propertyValue);\n  }\n else   if (originalValue != propertyValue) {\n    if (!writeAsArray) {\n      fieldSerializer.writePrefix(serializer);\n    }\n    serializer.write(propertyValue);\n  }\n else {\n    if (!writeAsArray) {\n      fieldSerializer.writeProperty(serializer,propertyValue);\n    }\n else {\n      fieldSerializer.writeValue(serializer,propertyValue);\n    }\n  }\n  commaFlag=true;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 225,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3756,
        "startLineNumber" : 120,
        "startColumnNumber" : 12,
        "endLineNumber" : 214,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final char startSeperator=writeAsArray ? '[' : '{';\n  final char endSeperator=writeAsArray ? ']' : '}';\n  out.append(startSeperator);\n  if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n    serializer.incrementIndent();\n    serializer.println();\n  }\n  boolean commaFlag=false;\n  if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n    Class<?> objClass=object.getClass();\n    if (objClass != fieldType) {\n      out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n      serializer.write(object.getClass());\n      commaFlag=true;\n    }\n  }\n  char seperator=commaFlag ? ',' : '\\0';\n  char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n  commaFlag=newSeperator == ',';\n  for (int i=0; i < getters.length; ++i) {\n    FieldSerializer fieldSerializer=getters[i];\n    if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n      Field field=fieldSerializer.getField();\n      if (field != null) {\n        if (Modifier.isTransient(field.getModifiers())) {\n          continue;\n        }\n      }\n    }\n    if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n      continue;\n    }\n    Object propertyValue=fieldSerializer.getPropertyValue(object);\n    if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n      continue;\n    }\n    String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n    Object originalValue=propertyValue;\n    propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n    if (propertyValue == null && !writeAsArray) {\n      if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n        continue;\n      }\n    }\n    if (commaFlag) {\n      out.append(',');\n      if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n        serializer.println();\n      }\n    }\n    if (key != fieldSerializer.getName()) {\n      if (!writeAsArray) {\n        out.writeFieldName(key);\n      }\n      serializer.write(propertyValue);\n    }\n else     if (originalValue != propertyValue) {\n      if (!writeAsArray) {\n        fieldSerializer.writePrefix(serializer);\n      }\n      serializer.write(propertyValue);\n    }\n else {\n      if (!writeAsArray) {\n        fieldSerializer.writeProperty(serializer,propertyValue);\n      }\n else {\n        fieldSerializer.writeValue(serializer,propertyValue);\n      }\n    }\n    commaFlag=true;\n  }\n  if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n    serializer.decrementIdent();\n    serializer.println();\n  }\n  out.append(endSeperator);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 368,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3923,
        "startLineNumber" : 120,
        "startColumnNumber" : 8,
        "endLineNumber" : 218,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  final char startSeperator=writeAsArray ? '[' : '{';\n  final char endSeperator=writeAsArray ? ']' : '}';\n  out.append(startSeperator);\n  if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n    serializer.incrementIndent();\n    serializer.println();\n  }\n  boolean commaFlag=false;\n  if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n    Class<?> objClass=object.getClass();\n    if (objClass != fieldType) {\n      out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n      serializer.write(object.getClass());\n      commaFlag=true;\n    }\n  }\n  char seperator=commaFlag ? ',' : '\\0';\n  char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n  commaFlag=newSeperator == ',';\n  for (int i=0; i < getters.length; ++i) {\n    FieldSerializer fieldSerializer=getters[i];\n    if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n      Field field=fieldSerializer.getField();\n      if (field != null) {\n        if (Modifier.isTransient(field.getModifiers())) {\n          continue;\n        }\n      }\n    }\n    if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n      continue;\n    }\n    Object propertyValue=fieldSerializer.getPropertyValue(object);\n    if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n      continue;\n    }\n    String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n    Object originalValue=propertyValue;\n    propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n    if (propertyValue == null && !writeAsArray) {\n      if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n        continue;\n      }\n    }\n    if (commaFlag) {\n      out.append(',');\n      if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n        serializer.println();\n      }\n    }\n    if (key != fieldSerializer.getName()) {\n      if (!writeAsArray) {\n        out.writeFieldName(key);\n      }\n      serializer.write(propertyValue);\n    }\n else     if (originalValue != propertyValue) {\n      if (!writeAsArray) {\n        fieldSerializer.writePrefix(serializer);\n      }\n      serializer.write(propertyValue);\n    }\n else {\n      if (!writeAsArray) {\n        fieldSerializer.writeProperty(serializer,propertyValue);\n      }\n else {\n        fieldSerializer.writeValue(serializer,propertyValue);\n      }\n    }\n    commaFlag=true;\n  }\n  if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n    serializer.decrementIdent();\n    serializer.println();\n  }\n  out.append(endSeperator);\n}\n catch (Exception e) {\n  throw new JSONException(\"write javaBean error\",e);\n}\n finally {\n  serializer.setContext(parent);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 387,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4762,
        "startLineNumber" : 89,
        "startColumnNumber" : 117,
        "endLineNumber" : 219,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SerializeWriter out=serializer.getWriter();\n  if (object == null) {\n    out.writeNull();\n    return;\n  }\n  if (serializer.containsReference(object)) {\n    writeReference(serializer,object);\n    return;\n  }\n  final FieldSerializer[] getters;\n  if (out.isEnabled(SerializerFeature.SortField)) {\n    getters=this.sortedGetters;\n  }\n else {\n    getters=this.getters;\n  }\n  SerialContext parent=serializer.getContext();\n  serializer.setContext(parent,object,fieldName);\n  boolean writeAsArray;\n  if (out.isEnabled(SerializerFeature.WriteJavaBeanAsArray)) {\n    writeAsArray=true;\n  }\n else {\n    writeAsArray=false;\n  }\n  try {\n    final char startSeperator=writeAsArray ? '[' : '{';\n    final char endSeperator=writeAsArray ? ']' : '}';\n    out.append(startSeperator);\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.incrementIndent();\n      serializer.println();\n    }\n    boolean commaFlag=false;\n    if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n      Class<?> objClass=object.getClass();\n      if (objClass != fieldType) {\n        out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n        serializer.write(object.getClass());\n        commaFlag=true;\n      }\n    }\n    char seperator=commaFlag ? ',' : '\\0';\n    char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n    commaFlag=newSeperator == ',';\n    for (int i=0; i < getters.length; ++i) {\n      FieldSerializer fieldSerializer=getters[i];\n      if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n        Field field=fieldSerializer.getField();\n        if (field != null) {\n          if (Modifier.isTransient(field.getModifiers())) {\n            continue;\n          }\n        }\n      }\n      if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n        continue;\n      }\n      Object propertyValue=fieldSerializer.getPropertyValue(object);\n      if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n        continue;\n      }\n      String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n      Object originalValue=propertyValue;\n      propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n      if (propertyValue == null && !writeAsArray) {\n        if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n          continue;\n        }\n      }\n      if (commaFlag) {\n        out.append(',');\n        if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n          serializer.println();\n        }\n      }\n      if (key != fieldSerializer.getName()) {\n        if (!writeAsArray) {\n          out.writeFieldName(key);\n        }\n        serializer.write(propertyValue);\n      }\n else       if (originalValue != propertyValue) {\n        if (!writeAsArray) {\n          fieldSerializer.writePrefix(serializer);\n        }\n        serializer.write(propertyValue);\n      }\n else {\n        if (!writeAsArray) {\n          fieldSerializer.writeProperty(serializer,propertyValue);\n        }\n else {\n          fieldSerializer.writeValue(serializer,propertyValue);\n        }\n      }\n      commaFlag=true;\n    }\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.decrementIdent();\n      serializer.println();\n    }\n    out.append(endSeperator);\n  }\n catch (  Exception e) {\n    throw new JSONException(\"write javaBean error\",e);\n  }\n finally {\n    serializer.setContext(parent);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 483,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4875,
        "startLineNumber" : 89,
        "startColumnNumber" : 4,
        "endLineNumber" : 219,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void write(JSONSerializer serializer,Object object,Object fieldName,Type fieldType) throws IOException {\n  SerializeWriter out=serializer.getWriter();\n  if (object == null) {\n    out.writeNull();\n    return;\n  }\n  if (serializer.containsReference(object)) {\n    writeReference(serializer,object);\n    return;\n  }\n  final FieldSerializer[] getters;\n  if (out.isEnabled(SerializerFeature.SortField)) {\n    getters=this.sortedGetters;\n  }\n else {\n    getters=this.getters;\n  }\n  SerialContext parent=serializer.getContext();\n  serializer.setContext(parent,object,fieldName);\n  boolean writeAsArray;\n  if (out.isEnabled(SerializerFeature.WriteJavaBeanAsArray)) {\n    writeAsArray=true;\n  }\n else {\n    writeAsArray=false;\n  }\n  try {\n    final char startSeperator=writeAsArray ? '[' : '{';\n    final char endSeperator=writeAsArray ? ']' : '}';\n    out.append(startSeperator);\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.incrementIndent();\n      serializer.println();\n    }\n    boolean commaFlag=false;\n    if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n      Class<?> objClass=object.getClass();\n      if (objClass != fieldType) {\n        out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n        serializer.write(object.getClass());\n        commaFlag=true;\n      }\n    }\n    char seperator=commaFlag ? ',' : '\\0';\n    char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n    commaFlag=newSeperator == ',';\n    for (int i=0; i < getters.length; ++i) {\n      FieldSerializer fieldSerializer=getters[i];\n      if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n        Field field=fieldSerializer.getField();\n        if (field != null) {\n          if (Modifier.isTransient(field.getModifiers())) {\n            continue;\n          }\n        }\n      }\n      if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n        continue;\n      }\n      Object propertyValue=fieldSerializer.getPropertyValue(object);\n      if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n        continue;\n      }\n      String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n      Object originalValue=propertyValue;\n      propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n      if (propertyValue == null && !writeAsArray) {\n        if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n          continue;\n        }\n      }\n      if (commaFlag) {\n        out.append(',');\n        if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n          serializer.println();\n        }\n      }\n      if (key != fieldSerializer.getName()) {\n        if (!writeAsArray) {\n          out.writeFieldName(key);\n        }\n        serializer.write(propertyValue);\n      }\n else       if (originalValue != propertyValue) {\n        if (!writeAsArray) {\n          fieldSerializer.writePrefix(serializer);\n        }\n        serializer.write(propertyValue);\n      }\n else {\n        if (!writeAsArray) {\n          fieldSerializer.writeProperty(serializer,propertyValue);\n        }\n else {\n          fieldSerializer.writeValue(serializer,propertyValue);\n        }\n      }\n      commaFlag=true;\n    }\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.decrementIdent();\n      serializer.println();\n    }\n    out.append(endSeperator);\n  }\n catch (  Exception e) {\n    throw new JSONException(\"write javaBean error\",e);\n  }\n finally {\n    serializer.setContext(parent);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 505,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 149,
        "startColumnNumber" : 20,
        "endLineNumber" : 149,
        "endColumnNumber" : 78
      },
      "nodeContext" : "serializer.isEnabled(SerializerFeature.SkipTransientField)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.alibaba.fastjson.serializer.JSONSerializer"
  }, {
    "nodeContext" : "serializer",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 158,
      "startColumnNumber" : 43,
      "endLineNumber" : 158,
      "endColumnNumber" : 53
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 158,
        "startColumnNumber" : 21,
        "endLineNumber" : 158,
        "endColumnNumber" : 89
      },
      "nodeContext" : "FilterUtils.applyName(serializer,object,fieldSerializer.getName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 158,
        "startColumnNumber" : 20,
        "endLineNumber" : 158,
        "endColumnNumber" : 89
      },
      "nodeContext" : "!FilterUtils.applyName(serializer,object,fieldSerializer.getName())",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 126,
        "startLineNumber" : 158,
        "startColumnNumber" : 16,
        "endLineNumber" : 160,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n  continue;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 2479,
        "startLineNumber" : 146,
        "startColumnNumber" : 53,
        "endLineNumber" : 206,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  FieldSerializer fieldSerializer=getters[i];\n  if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n    Field field=fieldSerializer.getField();\n    if (field != null) {\n      if (Modifier.isTransient(field.getModifiers())) {\n        continue;\n      }\n    }\n  }\n  if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n    continue;\n  }\n  Object propertyValue=fieldSerializer.getPropertyValue(object);\n  if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n    continue;\n  }\n  String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n  Object originalValue=propertyValue;\n  propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n  if (propertyValue == null && !writeAsArray) {\n    if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n      continue;\n    }\n  }\n  if (commaFlag) {\n    out.append(',');\n    if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.println();\n    }\n  }\n  if (key != fieldSerializer.getName()) {\n    if (!writeAsArray) {\n      out.writeFieldName(key);\n    }\n    serializer.write(propertyValue);\n  }\n else   if (originalValue != propertyValue) {\n    if (!writeAsArray) {\n      fieldSerializer.writePrefix(serializer);\n    }\n    serializer.write(propertyValue);\n  }\n else {\n    if (!writeAsArray) {\n      fieldSerializer.writeProperty(serializer,propertyValue);\n    }\n else {\n      fieldSerializer.writeValue(serializer,propertyValue);\n    }\n  }\n  commaFlag=true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 212,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2520,
        "startLineNumber" : 146,
        "startColumnNumber" : 12,
        "endLineNumber" : 206,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int i=0; i < getters.length; ++i) {\n  FieldSerializer fieldSerializer=getters[i];\n  if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n    Field field=fieldSerializer.getField();\n    if (field != null) {\n      if (Modifier.isTransient(field.getModifiers())) {\n        continue;\n      }\n    }\n  }\n  if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n    continue;\n  }\n  Object propertyValue=fieldSerializer.getPropertyValue(object);\n  if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n    continue;\n  }\n  String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n  Object originalValue=propertyValue;\n  propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n  if (propertyValue == null && !writeAsArray) {\n    if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n      continue;\n    }\n  }\n  if (commaFlag) {\n    out.append(',');\n    if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.println();\n    }\n  }\n  if (key != fieldSerializer.getName()) {\n    if (!writeAsArray) {\n      out.writeFieldName(key);\n    }\n    serializer.write(propertyValue);\n  }\n else   if (originalValue != propertyValue) {\n    if (!writeAsArray) {\n      fieldSerializer.writePrefix(serializer);\n    }\n    serializer.write(propertyValue);\n  }\n else {\n    if (!writeAsArray) {\n      fieldSerializer.writeProperty(serializer,propertyValue);\n    }\n else {\n      fieldSerializer.writeValue(serializer,propertyValue);\n    }\n  }\n  commaFlag=true;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 225,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3756,
        "startLineNumber" : 120,
        "startColumnNumber" : 12,
        "endLineNumber" : 214,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final char startSeperator=writeAsArray ? '[' : '{';\n  final char endSeperator=writeAsArray ? ']' : '}';\n  out.append(startSeperator);\n  if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n    serializer.incrementIndent();\n    serializer.println();\n  }\n  boolean commaFlag=false;\n  if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n    Class<?> objClass=object.getClass();\n    if (objClass != fieldType) {\n      out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n      serializer.write(object.getClass());\n      commaFlag=true;\n    }\n  }\n  char seperator=commaFlag ? ',' : '\\0';\n  char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n  commaFlag=newSeperator == ',';\n  for (int i=0; i < getters.length; ++i) {\n    FieldSerializer fieldSerializer=getters[i];\n    if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n      Field field=fieldSerializer.getField();\n      if (field != null) {\n        if (Modifier.isTransient(field.getModifiers())) {\n          continue;\n        }\n      }\n    }\n    if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n      continue;\n    }\n    Object propertyValue=fieldSerializer.getPropertyValue(object);\n    if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n      continue;\n    }\n    String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n    Object originalValue=propertyValue;\n    propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n    if (propertyValue == null && !writeAsArray) {\n      if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n        continue;\n      }\n    }\n    if (commaFlag) {\n      out.append(',');\n      if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n        serializer.println();\n      }\n    }\n    if (key != fieldSerializer.getName()) {\n      if (!writeAsArray) {\n        out.writeFieldName(key);\n      }\n      serializer.write(propertyValue);\n    }\n else     if (originalValue != propertyValue) {\n      if (!writeAsArray) {\n        fieldSerializer.writePrefix(serializer);\n      }\n      serializer.write(propertyValue);\n    }\n else {\n      if (!writeAsArray) {\n        fieldSerializer.writeProperty(serializer,propertyValue);\n      }\n else {\n        fieldSerializer.writeValue(serializer,propertyValue);\n      }\n    }\n    commaFlag=true;\n  }\n  if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n    serializer.decrementIdent();\n    serializer.println();\n  }\n  out.append(endSeperator);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 368,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3923,
        "startLineNumber" : 120,
        "startColumnNumber" : 8,
        "endLineNumber" : 218,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  final char startSeperator=writeAsArray ? '[' : '{';\n  final char endSeperator=writeAsArray ? ']' : '}';\n  out.append(startSeperator);\n  if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n    serializer.incrementIndent();\n    serializer.println();\n  }\n  boolean commaFlag=false;\n  if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n    Class<?> objClass=object.getClass();\n    if (objClass != fieldType) {\n      out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n      serializer.write(object.getClass());\n      commaFlag=true;\n    }\n  }\n  char seperator=commaFlag ? ',' : '\\0';\n  char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n  commaFlag=newSeperator == ',';\n  for (int i=0; i < getters.length; ++i) {\n    FieldSerializer fieldSerializer=getters[i];\n    if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n      Field field=fieldSerializer.getField();\n      if (field != null) {\n        if (Modifier.isTransient(field.getModifiers())) {\n          continue;\n        }\n      }\n    }\n    if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n      continue;\n    }\n    Object propertyValue=fieldSerializer.getPropertyValue(object);\n    if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n      continue;\n    }\n    String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n    Object originalValue=propertyValue;\n    propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n    if (propertyValue == null && !writeAsArray) {\n      if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n        continue;\n      }\n    }\n    if (commaFlag) {\n      out.append(',');\n      if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n        serializer.println();\n      }\n    }\n    if (key != fieldSerializer.getName()) {\n      if (!writeAsArray) {\n        out.writeFieldName(key);\n      }\n      serializer.write(propertyValue);\n    }\n else     if (originalValue != propertyValue) {\n      if (!writeAsArray) {\n        fieldSerializer.writePrefix(serializer);\n      }\n      serializer.write(propertyValue);\n    }\n else {\n      if (!writeAsArray) {\n        fieldSerializer.writeProperty(serializer,propertyValue);\n      }\n else {\n        fieldSerializer.writeValue(serializer,propertyValue);\n      }\n    }\n    commaFlag=true;\n  }\n  if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n    serializer.decrementIdent();\n    serializer.println();\n  }\n  out.append(endSeperator);\n}\n catch (Exception e) {\n  throw new JSONException(\"write javaBean error\",e);\n}\n finally {\n  serializer.setContext(parent);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 387,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4762,
        "startLineNumber" : 89,
        "startColumnNumber" : 117,
        "endLineNumber" : 219,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SerializeWriter out=serializer.getWriter();\n  if (object == null) {\n    out.writeNull();\n    return;\n  }\n  if (serializer.containsReference(object)) {\n    writeReference(serializer,object);\n    return;\n  }\n  final FieldSerializer[] getters;\n  if (out.isEnabled(SerializerFeature.SortField)) {\n    getters=this.sortedGetters;\n  }\n else {\n    getters=this.getters;\n  }\n  SerialContext parent=serializer.getContext();\n  serializer.setContext(parent,object,fieldName);\n  boolean writeAsArray;\n  if (out.isEnabled(SerializerFeature.WriteJavaBeanAsArray)) {\n    writeAsArray=true;\n  }\n else {\n    writeAsArray=false;\n  }\n  try {\n    final char startSeperator=writeAsArray ? '[' : '{';\n    final char endSeperator=writeAsArray ? ']' : '}';\n    out.append(startSeperator);\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.incrementIndent();\n      serializer.println();\n    }\n    boolean commaFlag=false;\n    if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n      Class<?> objClass=object.getClass();\n      if (objClass != fieldType) {\n        out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n        serializer.write(object.getClass());\n        commaFlag=true;\n      }\n    }\n    char seperator=commaFlag ? ',' : '\\0';\n    char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n    commaFlag=newSeperator == ',';\n    for (int i=0; i < getters.length; ++i) {\n      FieldSerializer fieldSerializer=getters[i];\n      if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n        Field field=fieldSerializer.getField();\n        if (field != null) {\n          if (Modifier.isTransient(field.getModifiers())) {\n            continue;\n          }\n        }\n      }\n      if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n        continue;\n      }\n      Object propertyValue=fieldSerializer.getPropertyValue(object);\n      if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n        continue;\n      }\n      String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n      Object originalValue=propertyValue;\n      propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n      if (propertyValue == null && !writeAsArray) {\n        if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n          continue;\n        }\n      }\n      if (commaFlag) {\n        out.append(',');\n        if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n          serializer.println();\n        }\n      }\n      if (key != fieldSerializer.getName()) {\n        if (!writeAsArray) {\n          out.writeFieldName(key);\n        }\n        serializer.write(propertyValue);\n      }\n else       if (originalValue != propertyValue) {\n        if (!writeAsArray) {\n          fieldSerializer.writePrefix(serializer);\n        }\n        serializer.write(propertyValue);\n      }\n else {\n        if (!writeAsArray) {\n          fieldSerializer.writeProperty(serializer,propertyValue);\n        }\n else {\n          fieldSerializer.writeValue(serializer,propertyValue);\n        }\n      }\n      commaFlag=true;\n    }\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.decrementIdent();\n      serializer.println();\n    }\n    out.append(endSeperator);\n  }\n catch (  Exception e) {\n    throw new JSONException(\"write javaBean error\",e);\n  }\n finally {\n    serializer.setContext(parent);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 483,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4875,
        "startLineNumber" : 89,
        "startColumnNumber" : 4,
        "endLineNumber" : 219,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void write(JSONSerializer serializer,Object object,Object fieldName,Type fieldType) throws IOException {\n  SerializeWriter out=serializer.getWriter();\n  if (object == null) {\n    out.writeNull();\n    return;\n  }\n  if (serializer.containsReference(object)) {\n    writeReference(serializer,object);\n    return;\n  }\n  final FieldSerializer[] getters;\n  if (out.isEnabled(SerializerFeature.SortField)) {\n    getters=this.sortedGetters;\n  }\n else {\n    getters=this.getters;\n  }\n  SerialContext parent=serializer.getContext();\n  serializer.setContext(parent,object,fieldName);\n  boolean writeAsArray;\n  if (out.isEnabled(SerializerFeature.WriteJavaBeanAsArray)) {\n    writeAsArray=true;\n  }\n else {\n    writeAsArray=false;\n  }\n  try {\n    final char startSeperator=writeAsArray ? '[' : '{';\n    final char endSeperator=writeAsArray ? ']' : '}';\n    out.append(startSeperator);\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.incrementIndent();\n      serializer.println();\n    }\n    boolean commaFlag=false;\n    if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n      Class<?> objClass=object.getClass();\n      if (objClass != fieldType) {\n        out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n        serializer.write(object.getClass());\n        commaFlag=true;\n      }\n    }\n    char seperator=commaFlag ? ',' : '\\0';\n    char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n    commaFlag=newSeperator == ',';\n    for (int i=0; i < getters.length; ++i) {\n      FieldSerializer fieldSerializer=getters[i];\n      if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n        Field field=fieldSerializer.getField();\n        if (field != null) {\n          if (Modifier.isTransient(field.getModifiers())) {\n            continue;\n          }\n        }\n      }\n      if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n        continue;\n      }\n      Object propertyValue=fieldSerializer.getPropertyValue(object);\n      if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n        continue;\n      }\n      String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n      Object originalValue=propertyValue;\n      propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n      if (propertyValue == null && !writeAsArray) {\n        if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n          continue;\n        }\n      }\n      if (commaFlag) {\n        out.append(',');\n        if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n          serializer.println();\n        }\n      }\n      if (key != fieldSerializer.getName()) {\n        if (!writeAsArray) {\n          out.writeFieldName(key);\n        }\n        serializer.write(propertyValue);\n      }\n else       if (originalValue != propertyValue) {\n        if (!writeAsArray) {\n          fieldSerializer.writePrefix(serializer);\n        }\n        serializer.write(propertyValue);\n      }\n else {\n        if (!writeAsArray) {\n          fieldSerializer.writeProperty(serializer,propertyValue);\n        }\n else {\n          fieldSerializer.writeValue(serializer,propertyValue);\n        }\n      }\n      commaFlag=true;\n    }\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.decrementIdent();\n      serializer.println();\n    }\n    out.append(endSeperator);\n  }\n catch (  Exception e) {\n    throw new JSONException(\"write javaBean error\",e);\n  }\n finally {\n    serializer.setContext(parent);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 505,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 158,
        "startColumnNumber" : 20,
        "endLineNumber" : 158,
        "endColumnNumber" : 89
      },
      "nodeContext" : "!FilterUtils.applyName(serializer,object,fieldSerializer.getName())",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.alibaba.fastjson.serializer.JSONSerializer"
  }, {
    "nodeContext" : "serializer",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 164,
      "startColumnNumber" : 39,
      "endLineNumber" : 164,
      "endColumnNumber" : 49
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 79,
        "startLineNumber" : 164,
        "startColumnNumber" : 21,
        "endLineNumber" : 164,
        "endColumnNumber" : 100
      },
      "nodeContext" : "FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 164,
        "startColumnNumber" : 20,
        "endLineNumber" : 164,
        "endColumnNumber" : 100
      },
      "nodeContext" : "!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 137,
        "startLineNumber" : 164,
        "startColumnNumber" : 16,
        "endLineNumber" : 166,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n  continue;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 2479,
        "startLineNumber" : 146,
        "startColumnNumber" : 53,
        "endLineNumber" : 206,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  FieldSerializer fieldSerializer=getters[i];\n  if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n    Field field=fieldSerializer.getField();\n    if (field != null) {\n      if (Modifier.isTransient(field.getModifiers())) {\n        continue;\n      }\n    }\n  }\n  if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n    continue;\n  }\n  Object propertyValue=fieldSerializer.getPropertyValue(object);\n  if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n    continue;\n  }\n  String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n  Object originalValue=propertyValue;\n  propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n  if (propertyValue == null && !writeAsArray) {\n    if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n      continue;\n    }\n  }\n  if (commaFlag) {\n    out.append(',');\n    if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.println();\n    }\n  }\n  if (key != fieldSerializer.getName()) {\n    if (!writeAsArray) {\n      out.writeFieldName(key);\n    }\n    serializer.write(propertyValue);\n  }\n else   if (originalValue != propertyValue) {\n    if (!writeAsArray) {\n      fieldSerializer.writePrefix(serializer);\n    }\n    serializer.write(propertyValue);\n  }\n else {\n    if (!writeAsArray) {\n      fieldSerializer.writeProperty(serializer,propertyValue);\n    }\n else {\n      fieldSerializer.writeValue(serializer,propertyValue);\n    }\n  }\n  commaFlag=true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 212,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2520,
        "startLineNumber" : 146,
        "startColumnNumber" : 12,
        "endLineNumber" : 206,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int i=0; i < getters.length; ++i) {\n  FieldSerializer fieldSerializer=getters[i];\n  if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n    Field field=fieldSerializer.getField();\n    if (field != null) {\n      if (Modifier.isTransient(field.getModifiers())) {\n        continue;\n      }\n    }\n  }\n  if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n    continue;\n  }\n  Object propertyValue=fieldSerializer.getPropertyValue(object);\n  if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n    continue;\n  }\n  String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n  Object originalValue=propertyValue;\n  propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n  if (propertyValue == null && !writeAsArray) {\n    if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n      continue;\n    }\n  }\n  if (commaFlag) {\n    out.append(',');\n    if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.println();\n    }\n  }\n  if (key != fieldSerializer.getName()) {\n    if (!writeAsArray) {\n      out.writeFieldName(key);\n    }\n    serializer.write(propertyValue);\n  }\n else   if (originalValue != propertyValue) {\n    if (!writeAsArray) {\n      fieldSerializer.writePrefix(serializer);\n    }\n    serializer.write(propertyValue);\n  }\n else {\n    if (!writeAsArray) {\n      fieldSerializer.writeProperty(serializer,propertyValue);\n    }\n else {\n      fieldSerializer.writeValue(serializer,propertyValue);\n    }\n  }\n  commaFlag=true;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 225,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3756,
        "startLineNumber" : 120,
        "startColumnNumber" : 12,
        "endLineNumber" : 214,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final char startSeperator=writeAsArray ? '[' : '{';\n  final char endSeperator=writeAsArray ? ']' : '}';\n  out.append(startSeperator);\n  if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n    serializer.incrementIndent();\n    serializer.println();\n  }\n  boolean commaFlag=false;\n  if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n    Class<?> objClass=object.getClass();\n    if (objClass != fieldType) {\n      out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n      serializer.write(object.getClass());\n      commaFlag=true;\n    }\n  }\n  char seperator=commaFlag ? ',' : '\\0';\n  char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n  commaFlag=newSeperator == ',';\n  for (int i=0; i < getters.length; ++i) {\n    FieldSerializer fieldSerializer=getters[i];\n    if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n      Field field=fieldSerializer.getField();\n      if (field != null) {\n        if (Modifier.isTransient(field.getModifiers())) {\n          continue;\n        }\n      }\n    }\n    if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n      continue;\n    }\n    Object propertyValue=fieldSerializer.getPropertyValue(object);\n    if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n      continue;\n    }\n    String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n    Object originalValue=propertyValue;\n    propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n    if (propertyValue == null && !writeAsArray) {\n      if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n        continue;\n      }\n    }\n    if (commaFlag) {\n      out.append(',');\n      if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n        serializer.println();\n      }\n    }\n    if (key != fieldSerializer.getName()) {\n      if (!writeAsArray) {\n        out.writeFieldName(key);\n      }\n      serializer.write(propertyValue);\n    }\n else     if (originalValue != propertyValue) {\n      if (!writeAsArray) {\n        fieldSerializer.writePrefix(serializer);\n      }\n      serializer.write(propertyValue);\n    }\n else {\n      if (!writeAsArray) {\n        fieldSerializer.writeProperty(serializer,propertyValue);\n      }\n else {\n        fieldSerializer.writeValue(serializer,propertyValue);\n      }\n    }\n    commaFlag=true;\n  }\n  if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n    serializer.decrementIdent();\n    serializer.println();\n  }\n  out.append(endSeperator);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 368,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3923,
        "startLineNumber" : 120,
        "startColumnNumber" : 8,
        "endLineNumber" : 218,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  final char startSeperator=writeAsArray ? '[' : '{';\n  final char endSeperator=writeAsArray ? ']' : '}';\n  out.append(startSeperator);\n  if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n    serializer.incrementIndent();\n    serializer.println();\n  }\n  boolean commaFlag=false;\n  if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n    Class<?> objClass=object.getClass();\n    if (objClass != fieldType) {\n      out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n      serializer.write(object.getClass());\n      commaFlag=true;\n    }\n  }\n  char seperator=commaFlag ? ',' : '\\0';\n  char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n  commaFlag=newSeperator == ',';\n  for (int i=0; i < getters.length; ++i) {\n    FieldSerializer fieldSerializer=getters[i];\n    if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n      Field field=fieldSerializer.getField();\n      if (field != null) {\n        if (Modifier.isTransient(field.getModifiers())) {\n          continue;\n        }\n      }\n    }\n    if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n      continue;\n    }\n    Object propertyValue=fieldSerializer.getPropertyValue(object);\n    if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n      continue;\n    }\n    String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n    Object originalValue=propertyValue;\n    propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n    if (propertyValue == null && !writeAsArray) {\n      if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n        continue;\n      }\n    }\n    if (commaFlag) {\n      out.append(',');\n      if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n        serializer.println();\n      }\n    }\n    if (key != fieldSerializer.getName()) {\n      if (!writeAsArray) {\n        out.writeFieldName(key);\n      }\n      serializer.write(propertyValue);\n    }\n else     if (originalValue != propertyValue) {\n      if (!writeAsArray) {\n        fieldSerializer.writePrefix(serializer);\n      }\n      serializer.write(propertyValue);\n    }\n else {\n      if (!writeAsArray) {\n        fieldSerializer.writeProperty(serializer,propertyValue);\n      }\n else {\n        fieldSerializer.writeValue(serializer,propertyValue);\n      }\n    }\n    commaFlag=true;\n  }\n  if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n    serializer.decrementIdent();\n    serializer.println();\n  }\n  out.append(endSeperator);\n}\n catch (Exception e) {\n  throw new JSONException(\"write javaBean error\",e);\n}\n finally {\n  serializer.setContext(parent);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 387,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4762,
        "startLineNumber" : 89,
        "startColumnNumber" : 117,
        "endLineNumber" : 219,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SerializeWriter out=serializer.getWriter();\n  if (object == null) {\n    out.writeNull();\n    return;\n  }\n  if (serializer.containsReference(object)) {\n    writeReference(serializer,object);\n    return;\n  }\n  final FieldSerializer[] getters;\n  if (out.isEnabled(SerializerFeature.SortField)) {\n    getters=this.sortedGetters;\n  }\n else {\n    getters=this.getters;\n  }\n  SerialContext parent=serializer.getContext();\n  serializer.setContext(parent,object,fieldName);\n  boolean writeAsArray;\n  if (out.isEnabled(SerializerFeature.WriteJavaBeanAsArray)) {\n    writeAsArray=true;\n  }\n else {\n    writeAsArray=false;\n  }\n  try {\n    final char startSeperator=writeAsArray ? '[' : '{';\n    final char endSeperator=writeAsArray ? ']' : '}';\n    out.append(startSeperator);\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.incrementIndent();\n      serializer.println();\n    }\n    boolean commaFlag=false;\n    if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n      Class<?> objClass=object.getClass();\n      if (objClass != fieldType) {\n        out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n        serializer.write(object.getClass());\n        commaFlag=true;\n      }\n    }\n    char seperator=commaFlag ? ',' : '\\0';\n    char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n    commaFlag=newSeperator == ',';\n    for (int i=0; i < getters.length; ++i) {\n      FieldSerializer fieldSerializer=getters[i];\n      if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n        Field field=fieldSerializer.getField();\n        if (field != null) {\n          if (Modifier.isTransient(field.getModifiers())) {\n            continue;\n          }\n        }\n      }\n      if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n        continue;\n      }\n      Object propertyValue=fieldSerializer.getPropertyValue(object);\n      if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n        continue;\n      }\n      String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n      Object originalValue=propertyValue;\n      propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n      if (propertyValue == null && !writeAsArray) {\n        if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n          continue;\n        }\n      }\n      if (commaFlag) {\n        out.append(',');\n        if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n          serializer.println();\n        }\n      }\n      if (key != fieldSerializer.getName()) {\n        if (!writeAsArray) {\n          out.writeFieldName(key);\n        }\n        serializer.write(propertyValue);\n      }\n else       if (originalValue != propertyValue) {\n        if (!writeAsArray) {\n          fieldSerializer.writePrefix(serializer);\n        }\n        serializer.write(propertyValue);\n      }\n else {\n        if (!writeAsArray) {\n          fieldSerializer.writeProperty(serializer,propertyValue);\n        }\n else {\n          fieldSerializer.writeValue(serializer,propertyValue);\n        }\n      }\n      commaFlag=true;\n    }\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.decrementIdent();\n      serializer.println();\n    }\n    out.append(endSeperator);\n  }\n catch (  Exception e) {\n    throw new JSONException(\"write javaBean error\",e);\n  }\n finally {\n    serializer.setContext(parent);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 483,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4875,
        "startLineNumber" : 89,
        "startColumnNumber" : 4,
        "endLineNumber" : 219,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void write(JSONSerializer serializer,Object object,Object fieldName,Type fieldType) throws IOException {\n  SerializeWriter out=serializer.getWriter();\n  if (object == null) {\n    out.writeNull();\n    return;\n  }\n  if (serializer.containsReference(object)) {\n    writeReference(serializer,object);\n    return;\n  }\n  final FieldSerializer[] getters;\n  if (out.isEnabled(SerializerFeature.SortField)) {\n    getters=this.sortedGetters;\n  }\n else {\n    getters=this.getters;\n  }\n  SerialContext parent=serializer.getContext();\n  serializer.setContext(parent,object,fieldName);\n  boolean writeAsArray;\n  if (out.isEnabled(SerializerFeature.WriteJavaBeanAsArray)) {\n    writeAsArray=true;\n  }\n else {\n    writeAsArray=false;\n  }\n  try {\n    final char startSeperator=writeAsArray ? '[' : '{';\n    final char endSeperator=writeAsArray ? ']' : '}';\n    out.append(startSeperator);\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.incrementIndent();\n      serializer.println();\n    }\n    boolean commaFlag=false;\n    if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n      Class<?> objClass=object.getClass();\n      if (objClass != fieldType) {\n        out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n        serializer.write(object.getClass());\n        commaFlag=true;\n      }\n    }\n    char seperator=commaFlag ? ',' : '\\0';\n    char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n    commaFlag=newSeperator == ',';\n    for (int i=0; i < getters.length; ++i) {\n      FieldSerializer fieldSerializer=getters[i];\n      if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n        Field field=fieldSerializer.getField();\n        if (field != null) {\n          if (Modifier.isTransient(field.getModifiers())) {\n            continue;\n          }\n        }\n      }\n      if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n        continue;\n      }\n      Object propertyValue=fieldSerializer.getPropertyValue(object);\n      if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n        continue;\n      }\n      String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n      Object originalValue=propertyValue;\n      propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n      if (propertyValue == null && !writeAsArray) {\n        if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n          continue;\n        }\n      }\n      if (commaFlag) {\n        out.append(',');\n        if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n          serializer.println();\n        }\n      }\n      if (key != fieldSerializer.getName()) {\n        if (!writeAsArray) {\n          out.writeFieldName(key);\n        }\n        serializer.write(propertyValue);\n      }\n else       if (originalValue != propertyValue) {\n        if (!writeAsArray) {\n          fieldSerializer.writePrefix(serializer);\n        }\n        serializer.write(propertyValue);\n      }\n else {\n        if (!writeAsArray) {\n          fieldSerializer.writeProperty(serializer,propertyValue);\n        }\n else {\n          fieldSerializer.writeValue(serializer,propertyValue);\n        }\n      }\n      commaFlag=true;\n    }\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.decrementIdent();\n      serializer.println();\n    }\n    out.append(endSeperator);\n  }\n catch (  Exception e) {\n    throw new JSONException(\"write javaBean error\",e);\n  }\n finally {\n    serializer.setContext(parent);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 505,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 164,
        "startColumnNumber" : 20,
        "endLineNumber" : 164,
        "endColumnNumber" : 100
      },
      "nodeContext" : "!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.alibaba.fastjson.serializer.JSONSerializer"
  }, {
    "nodeContext" : "serializer",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 168,
      "startColumnNumber" : 52,
      "endLineNumber" : 168,
      "endColumnNumber" : 62
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 168,
        "startColumnNumber" : 29,
        "endLineNumber" : 168,
        "endColumnNumber" : 113
      },
      "nodeContext" : "FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 168,
        "startColumnNumber" : 23,
        "endLineNumber" : 168,
        "endColumnNumber" : 113
      },
      "nodeContext" : "key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 98,
        "startLineNumber" : 168,
        "startColumnNumber" : 16,
        "endLineNumber" : 168,
        "endColumnNumber" : 114
      },
      "nodeContext" : "String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 2479,
        "startLineNumber" : 146,
        "startColumnNumber" : 53,
        "endLineNumber" : 206,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  FieldSerializer fieldSerializer=getters[i];\n  if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n    Field field=fieldSerializer.getField();\n    if (field != null) {\n      if (Modifier.isTransient(field.getModifiers())) {\n        continue;\n      }\n    }\n  }\n  if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n    continue;\n  }\n  Object propertyValue=fieldSerializer.getPropertyValue(object);\n  if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n    continue;\n  }\n  String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n  Object originalValue=propertyValue;\n  propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n  if (propertyValue == null && !writeAsArray) {\n    if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n      continue;\n    }\n  }\n  if (commaFlag) {\n    out.append(',');\n    if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.println();\n    }\n  }\n  if (key != fieldSerializer.getName()) {\n    if (!writeAsArray) {\n      out.writeFieldName(key);\n    }\n    serializer.write(propertyValue);\n  }\n else   if (originalValue != propertyValue) {\n    if (!writeAsArray) {\n      fieldSerializer.writePrefix(serializer);\n    }\n    serializer.write(propertyValue);\n  }\n else {\n    if (!writeAsArray) {\n      fieldSerializer.writeProperty(serializer,propertyValue);\n    }\n else {\n      fieldSerializer.writeValue(serializer,propertyValue);\n    }\n  }\n  commaFlag=true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 212,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2520,
        "startLineNumber" : 146,
        "startColumnNumber" : 12,
        "endLineNumber" : 206,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int i=0; i < getters.length; ++i) {\n  FieldSerializer fieldSerializer=getters[i];\n  if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n    Field field=fieldSerializer.getField();\n    if (field != null) {\n      if (Modifier.isTransient(field.getModifiers())) {\n        continue;\n      }\n    }\n  }\n  if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n    continue;\n  }\n  Object propertyValue=fieldSerializer.getPropertyValue(object);\n  if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n    continue;\n  }\n  String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n  Object originalValue=propertyValue;\n  propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n  if (propertyValue == null && !writeAsArray) {\n    if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n      continue;\n    }\n  }\n  if (commaFlag) {\n    out.append(',');\n    if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.println();\n    }\n  }\n  if (key != fieldSerializer.getName()) {\n    if (!writeAsArray) {\n      out.writeFieldName(key);\n    }\n    serializer.write(propertyValue);\n  }\n else   if (originalValue != propertyValue) {\n    if (!writeAsArray) {\n      fieldSerializer.writePrefix(serializer);\n    }\n    serializer.write(propertyValue);\n  }\n else {\n    if (!writeAsArray) {\n      fieldSerializer.writeProperty(serializer,propertyValue);\n    }\n else {\n      fieldSerializer.writeValue(serializer,propertyValue);\n    }\n  }\n  commaFlag=true;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 225,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3756,
        "startLineNumber" : 120,
        "startColumnNumber" : 12,
        "endLineNumber" : 214,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final char startSeperator=writeAsArray ? '[' : '{';\n  final char endSeperator=writeAsArray ? ']' : '}';\n  out.append(startSeperator);\n  if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n    serializer.incrementIndent();\n    serializer.println();\n  }\n  boolean commaFlag=false;\n  if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n    Class<?> objClass=object.getClass();\n    if (objClass != fieldType) {\n      out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n      serializer.write(object.getClass());\n      commaFlag=true;\n    }\n  }\n  char seperator=commaFlag ? ',' : '\\0';\n  char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n  commaFlag=newSeperator == ',';\n  for (int i=0; i < getters.length; ++i) {\n    FieldSerializer fieldSerializer=getters[i];\n    if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n      Field field=fieldSerializer.getField();\n      if (field != null) {\n        if (Modifier.isTransient(field.getModifiers())) {\n          continue;\n        }\n      }\n    }\n    if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n      continue;\n    }\n    Object propertyValue=fieldSerializer.getPropertyValue(object);\n    if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n      continue;\n    }\n    String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n    Object originalValue=propertyValue;\n    propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n    if (propertyValue == null && !writeAsArray) {\n      if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n        continue;\n      }\n    }\n    if (commaFlag) {\n      out.append(',');\n      if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n        serializer.println();\n      }\n    }\n    if (key != fieldSerializer.getName()) {\n      if (!writeAsArray) {\n        out.writeFieldName(key);\n      }\n      serializer.write(propertyValue);\n    }\n else     if (originalValue != propertyValue) {\n      if (!writeAsArray) {\n        fieldSerializer.writePrefix(serializer);\n      }\n      serializer.write(propertyValue);\n    }\n else {\n      if (!writeAsArray) {\n        fieldSerializer.writeProperty(serializer,propertyValue);\n      }\n else {\n        fieldSerializer.writeValue(serializer,propertyValue);\n      }\n    }\n    commaFlag=true;\n  }\n  if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n    serializer.decrementIdent();\n    serializer.println();\n  }\n  out.append(endSeperator);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 368,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3923,
        "startLineNumber" : 120,
        "startColumnNumber" : 8,
        "endLineNumber" : 218,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  final char startSeperator=writeAsArray ? '[' : '{';\n  final char endSeperator=writeAsArray ? ']' : '}';\n  out.append(startSeperator);\n  if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n    serializer.incrementIndent();\n    serializer.println();\n  }\n  boolean commaFlag=false;\n  if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n    Class<?> objClass=object.getClass();\n    if (objClass != fieldType) {\n      out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n      serializer.write(object.getClass());\n      commaFlag=true;\n    }\n  }\n  char seperator=commaFlag ? ',' : '\\0';\n  char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n  commaFlag=newSeperator == ',';\n  for (int i=0; i < getters.length; ++i) {\n    FieldSerializer fieldSerializer=getters[i];\n    if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n      Field field=fieldSerializer.getField();\n      if (field != null) {\n        if (Modifier.isTransient(field.getModifiers())) {\n          continue;\n        }\n      }\n    }\n    if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n      continue;\n    }\n    Object propertyValue=fieldSerializer.getPropertyValue(object);\n    if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n      continue;\n    }\n    String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n    Object originalValue=propertyValue;\n    propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n    if (propertyValue == null && !writeAsArray) {\n      if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n        continue;\n      }\n    }\n    if (commaFlag) {\n      out.append(',');\n      if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n        serializer.println();\n      }\n    }\n    if (key != fieldSerializer.getName()) {\n      if (!writeAsArray) {\n        out.writeFieldName(key);\n      }\n      serializer.write(propertyValue);\n    }\n else     if (originalValue != propertyValue) {\n      if (!writeAsArray) {\n        fieldSerializer.writePrefix(serializer);\n      }\n      serializer.write(propertyValue);\n    }\n else {\n      if (!writeAsArray) {\n        fieldSerializer.writeProperty(serializer,propertyValue);\n      }\n else {\n        fieldSerializer.writeValue(serializer,propertyValue);\n      }\n    }\n    commaFlag=true;\n  }\n  if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n    serializer.decrementIdent();\n    serializer.println();\n  }\n  out.append(endSeperator);\n}\n catch (Exception e) {\n  throw new JSONException(\"write javaBean error\",e);\n}\n finally {\n  serializer.setContext(parent);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 387,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4762,
        "startLineNumber" : 89,
        "startColumnNumber" : 117,
        "endLineNumber" : 219,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SerializeWriter out=serializer.getWriter();\n  if (object == null) {\n    out.writeNull();\n    return;\n  }\n  if (serializer.containsReference(object)) {\n    writeReference(serializer,object);\n    return;\n  }\n  final FieldSerializer[] getters;\n  if (out.isEnabled(SerializerFeature.SortField)) {\n    getters=this.sortedGetters;\n  }\n else {\n    getters=this.getters;\n  }\n  SerialContext parent=serializer.getContext();\n  serializer.setContext(parent,object,fieldName);\n  boolean writeAsArray;\n  if (out.isEnabled(SerializerFeature.WriteJavaBeanAsArray)) {\n    writeAsArray=true;\n  }\n else {\n    writeAsArray=false;\n  }\n  try {\n    final char startSeperator=writeAsArray ? '[' : '{';\n    final char endSeperator=writeAsArray ? ']' : '}';\n    out.append(startSeperator);\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.incrementIndent();\n      serializer.println();\n    }\n    boolean commaFlag=false;\n    if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n      Class<?> objClass=object.getClass();\n      if (objClass != fieldType) {\n        out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n        serializer.write(object.getClass());\n        commaFlag=true;\n      }\n    }\n    char seperator=commaFlag ? ',' : '\\0';\n    char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n    commaFlag=newSeperator == ',';\n    for (int i=0; i < getters.length; ++i) {\n      FieldSerializer fieldSerializer=getters[i];\n      if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n        Field field=fieldSerializer.getField();\n        if (field != null) {\n          if (Modifier.isTransient(field.getModifiers())) {\n            continue;\n          }\n        }\n      }\n      if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n        continue;\n      }\n      Object propertyValue=fieldSerializer.getPropertyValue(object);\n      if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n        continue;\n      }\n      String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n      Object originalValue=propertyValue;\n      propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n      if (propertyValue == null && !writeAsArray) {\n        if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n          continue;\n        }\n      }\n      if (commaFlag) {\n        out.append(',');\n        if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n          serializer.println();\n        }\n      }\n      if (key != fieldSerializer.getName()) {\n        if (!writeAsArray) {\n          out.writeFieldName(key);\n        }\n        serializer.write(propertyValue);\n      }\n else       if (originalValue != propertyValue) {\n        if (!writeAsArray) {\n          fieldSerializer.writePrefix(serializer);\n        }\n        serializer.write(propertyValue);\n      }\n else {\n        if (!writeAsArray) {\n          fieldSerializer.writeProperty(serializer,propertyValue);\n        }\n else {\n          fieldSerializer.writeValue(serializer,propertyValue);\n        }\n      }\n      commaFlag=true;\n    }\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.decrementIdent();\n      serializer.println();\n    }\n    out.append(endSeperator);\n  }\n catch (  Exception e) {\n    throw new JSONException(\"write javaBean error\",e);\n  }\n finally {\n    serializer.setContext(parent);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 483,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4875,
        "startLineNumber" : 89,
        "startColumnNumber" : 4,
        "endLineNumber" : 219,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void write(JSONSerializer serializer,Object object,Object fieldName,Type fieldType) throws IOException {\n  SerializeWriter out=serializer.getWriter();\n  if (object == null) {\n    out.writeNull();\n    return;\n  }\n  if (serializer.containsReference(object)) {\n    writeReference(serializer,object);\n    return;\n  }\n  final FieldSerializer[] getters;\n  if (out.isEnabled(SerializerFeature.SortField)) {\n    getters=this.sortedGetters;\n  }\n else {\n    getters=this.getters;\n  }\n  SerialContext parent=serializer.getContext();\n  serializer.setContext(parent,object,fieldName);\n  boolean writeAsArray;\n  if (out.isEnabled(SerializerFeature.WriteJavaBeanAsArray)) {\n    writeAsArray=true;\n  }\n else {\n    writeAsArray=false;\n  }\n  try {\n    final char startSeperator=writeAsArray ? '[' : '{';\n    final char endSeperator=writeAsArray ? ']' : '}';\n    out.append(startSeperator);\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.incrementIndent();\n      serializer.println();\n    }\n    boolean commaFlag=false;\n    if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n      Class<?> objClass=object.getClass();\n      if (objClass != fieldType) {\n        out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n        serializer.write(object.getClass());\n        commaFlag=true;\n      }\n    }\n    char seperator=commaFlag ? ',' : '\\0';\n    char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n    commaFlag=newSeperator == ',';\n    for (int i=0; i < getters.length; ++i) {\n      FieldSerializer fieldSerializer=getters[i];\n      if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n        Field field=fieldSerializer.getField();\n        if (field != null) {\n          if (Modifier.isTransient(field.getModifiers())) {\n            continue;\n          }\n        }\n      }\n      if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n        continue;\n      }\n      Object propertyValue=fieldSerializer.getPropertyValue(object);\n      if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n        continue;\n      }\n      String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n      Object originalValue=propertyValue;\n      propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n      if (propertyValue == null && !writeAsArray) {\n        if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n          continue;\n        }\n      }\n      if (commaFlag) {\n        out.append(',');\n        if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n          serializer.println();\n        }\n      }\n      if (key != fieldSerializer.getName()) {\n        if (!writeAsArray) {\n          out.writeFieldName(key);\n        }\n        serializer.write(propertyValue);\n      }\n else       if (originalValue != propertyValue) {\n        if (!writeAsArray) {\n          fieldSerializer.writePrefix(serializer);\n        }\n        serializer.write(propertyValue);\n      }\n else {\n        if (!writeAsArray) {\n          fieldSerializer.writeProperty(serializer,propertyValue);\n        }\n else {\n          fieldSerializer.writeValue(serializer,propertyValue);\n        }\n      }\n      commaFlag=true;\n    }\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.decrementIdent();\n      serializer.println();\n    }\n    out.append(endSeperator);\n  }\n catch (  Exception e) {\n    throw new JSONException(\"write javaBean error\",e);\n  }\n finally {\n    serializer.setContext(parent);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 505,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 98,
        "startLineNumber" : 168,
        "startColumnNumber" : 16,
        "endLineNumber" : 168,
        "endColumnNumber" : 114
      },
      "nodeContext" : "String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.alibaba.fastjson.serializer.JSONSerializer"
  }, {
    "nodeContext" : "serializer",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 171,
      "startColumnNumber" : 57,
      "endLineNumber" : 171,
      "endColumnNumber" : 67
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 171,
        "startColumnNumber" : 32,
        "endLineNumber" : 171,
        "endColumnNumber" : 118
      },
      "nodeContext" : "FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 171,
        "startColumnNumber" : 16,
        "endLineNumber" : 171,
        "endColumnNumber" : 118
      },
      "nodeContext" : "propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 103,
        "startLineNumber" : 171,
        "startColumnNumber" : 16,
        "endLineNumber" : 171,
        "endColumnNumber" : 119
      },
      "nodeContext" : "propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 2479,
        "startLineNumber" : 146,
        "startColumnNumber" : 53,
        "endLineNumber" : 206,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  FieldSerializer fieldSerializer=getters[i];\n  if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n    Field field=fieldSerializer.getField();\n    if (field != null) {\n      if (Modifier.isTransient(field.getModifiers())) {\n        continue;\n      }\n    }\n  }\n  if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n    continue;\n  }\n  Object propertyValue=fieldSerializer.getPropertyValue(object);\n  if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n    continue;\n  }\n  String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n  Object originalValue=propertyValue;\n  propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n  if (propertyValue == null && !writeAsArray) {\n    if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n      continue;\n    }\n  }\n  if (commaFlag) {\n    out.append(',');\n    if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.println();\n    }\n  }\n  if (key != fieldSerializer.getName()) {\n    if (!writeAsArray) {\n      out.writeFieldName(key);\n    }\n    serializer.write(propertyValue);\n  }\n else   if (originalValue != propertyValue) {\n    if (!writeAsArray) {\n      fieldSerializer.writePrefix(serializer);\n    }\n    serializer.write(propertyValue);\n  }\n else {\n    if (!writeAsArray) {\n      fieldSerializer.writeProperty(serializer,propertyValue);\n    }\n else {\n      fieldSerializer.writeValue(serializer,propertyValue);\n    }\n  }\n  commaFlag=true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 212,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2520,
        "startLineNumber" : 146,
        "startColumnNumber" : 12,
        "endLineNumber" : 206,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int i=0; i < getters.length; ++i) {\n  FieldSerializer fieldSerializer=getters[i];\n  if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n    Field field=fieldSerializer.getField();\n    if (field != null) {\n      if (Modifier.isTransient(field.getModifiers())) {\n        continue;\n      }\n    }\n  }\n  if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n    continue;\n  }\n  Object propertyValue=fieldSerializer.getPropertyValue(object);\n  if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n    continue;\n  }\n  String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n  Object originalValue=propertyValue;\n  propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n  if (propertyValue == null && !writeAsArray) {\n    if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n      continue;\n    }\n  }\n  if (commaFlag) {\n    out.append(',');\n    if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.println();\n    }\n  }\n  if (key != fieldSerializer.getName()) {\n    if (!writeAsArray) {\n      out.writeFieldName(key);\n    }\n    serializer.write(propertyValue);\n  }\n else   if (originalValue != propertyValue) {\n    if (!writeAsArray) {\n      fieldSerializer.writePrefix(serializer);\n    }\n    serializer.write(propertyValue);\n  }\n else {\n    if (!writeAsArray) {\n      fieldSerializer.writeProperty(serializer,propertyValue);\n    }\n else {\n      fieldSerializer.writeValue(serializer,propertyValue);\n    }\n  }\n  commaFlag=true;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 225,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3756,
        "startLineNumber" : 120,
        "startColumnNumber" : 12,
        "endLineNumber" : 214,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final char startSeperator=writeAsArray ? '[' : '{';\n  final char endSeperator=writeAsArray ? ']' : '}';\n  out.append(startSeperator);\n  if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n    serializer.incrementIndent();\n    serializer.println();\n  }\n  boolean commaFlag=false;\n  if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n    Class<?> objClass=object.getClass();\n    if (objClass != fieldType) {\n      out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n      serializer.write(object.getClass());\n      commaFlag=true;\n    }\n  }\n  char seperator=commaFlag ? ',' : '\\0';\n  char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n  commaFlag=newSeperator == ',';\n  for (int i=0; i < getters.length; ++i) {\n    FieldSerializer fieldSerializer=getters[i];\n    if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n      Field field=fieldSerializer.getField();\n      if (field != null) {\n        if (Modifier.isTransient(field.getModifiers())) {\n          continue;\n        }\n      }\n    }\n    if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n      continue;\n    }\n    Object propertyValue=fieldSerializer.getPropertyValue(object);\n    if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n      continue;\n    }\n    String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n    Object originalValue=propertyValue;\n    propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n    if (propertyValue == null && !writeAsArray) {\n      if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n        continue;\n      }\n    }\n    if (commaFlag) {\n      out.append(',');\n      if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n        serializer.println();\n      }\n    }\n    if (key != fieldSerializer.getName()) {\n      if (!writeAsArray) {\n        out.writeFieldName(key);\n      }\n      serializer.write(propertyValue);\n    }\n else     if (originalValue != propertyValue) {\n      if (!writeAsArray) {\n        fieldSerializer.writePrefix(serializer);\n      }\n      serializer.write(propertyValue);\n    }\n else {\n      if (!writeAsArray) {\n        fieldSerializer.writeProperty(serializer,propertyValue);\n      }\n else {\n        fieldSerializer.writeValue(serializer,propertyValue);\n      }\n    }\n    commaFlag=true;\n  }\n  if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n    serializer.decrementIdent();\n    serializer.println();\n  }\n  out.append(endSeperator);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 368,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3923,
        "startLineNumber" : 120,
        "startColumnNumber" : 8,
        "endLineNumber" : 218,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  final char startSeperator=writeAsArray ? '[' : '{';\n  final char endSeperator=writeAsArray ? ']' : '}';\n  out.append(startSeperator);\n  if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n    serializer.incrementIndent();\n    serializer.println();\n  }\n  boolean commaFlag=false;\n  if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n    Class<?> objClass=object.getClass();\n    if (objClass != fieldType) {\n      out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n      serializer.write(object.getClass());\n      commaFlag=true;\n    }\n  }\n  char seperator=commaFlag ? ',' : '\\0';\n  char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n  commaFlag=newSeperator == ',';\n  for (int i=0; i < getters.length; ++i) {\n    FieldSerializer fieldSerializer=getters[i];\n    if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n      Field field=fieldSerializer.getField();\n      if (field != null) {\n        if (Modifier.isTransient(field.getModifiers())) {\n          continue;\n        }\n      }\n    }\n    if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n      continue;\n    }\n    Object propertyValue=fieldSerializer.getPropertyValue(object);\n    if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n      continue;\n    }\n    String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n    Object originalValue=propertyValue;\n    propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n    if (propertyValue == null && !writeAsArray) {\n      if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n        continue;\n      }\n    }\n    if (commaFlag) {\n      out.append(',');\n      if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n        serializer.println();\n      }\n    }\n    if (key != fieldSerializer.getName()) {\n      if (!writeAsArray) {\n        out.writeFieldName(key);\n      }\n      serializer.write(propertyValue);\n    }\n else     if (originalValue != propertyValue) {\n      if (!writeAsArray) {\n        fieldSerializer.writePrefix(serializer);\n      }\n      serializer.write(propertyValue);\n    }\n else {\n      if (!writeAsArray) {\n        fieldSerializer.writeProperty(serializer,propertyValue);\n      }\n else {\n        fieldSerializer.writeValue(serializer,propertyValue);\n      }\n    }\n    commaFlag=true;\n  }\n  if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n    serializer.decrementIdent();\n    serializer.println();\n  }\n  out.append(endSeperator);\n}\n catch (Exception e) {\n  throw new JSONException(\"write javaBean error\",e);\n}\n finally {\n  serializer.setContext(parent);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 387,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4762,
        "startLineNumber" : 89,
        "startColumnNumber" : 117,
        "endLineNumber" : 219,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SerializeWriter out=serializer.getWriter();\n  if (object == null) {\n    out.writeNull();\n    return;\n  }\n  if (serializer.containsReference(object)) {\n    writeReference(serializer,object);\n    return;\n  }\n  final FieldSerializer[] getters;\n  if (out.isEnabled(SerializerFeature.SortField)) {\n    getters=this.sortedGetters;\n  }\n else {\n    getters=this.getters;\n  }\n  SerialContext parent=serializer.getContext();\n  serializer.setContext(parent,object,fieldName);\n  boolean writeAsArray;\n  if (out.isEnabled(SerializerFeature.WriteJavaBeanAsArray)) {\n    writeAsArray=true;\n  }\n else {\n    writeAsArray=false;\n  }\n  try {\n    final char startSeperator=writeAsArray ? '[' : '{';\n    final char endSeperator=writeAsArray ? ']' : '}';\n    out.append(startSeperator);\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.incrementIndent();\n      serializer.println();\n    }\n    boolean commaFlag=false;\n    if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n      Class<?> objClass=object.getClass();\n      if (objClass != fieldType) {\n        out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n        serializer.write(object.getClass());\n        commaFlag=true;\n      }\n    }\n    char seperator=commaFlag ? ',' : '\\0';\n    char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n    commaFlag=newSeperator == ',';\n    for (int i=0; i < getters.length; ++i) {\n      FieldSerializer fieldSerializer=getters[i];\n      if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n        Field field=fieldSerializer.getField();\n        if (field != null) {\n          if (Modifier.isTransient(field.getModifiers())) {\n            continue;\n          }\n        }\n      }\n      if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n        continue;\n      }\n      Object propertyValue=fieldSerializer.getPropertyValue(object);\n      if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n        continue;\n      }\n      String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n      Object originalValue=propertyValue;\n      propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n      if (propertyValue == null && !writeAsArray) {\n        if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n          continue;\n        }\n      }\n      if (commaFlag) {\n        out.append(',');\n        if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n          serializer.println();\n        }\n      }\n      if (key != fieldSerializer.getName()) {\n        if (!writeAsArray) {\n          out.writeFieldName(key);\n        }\n        serializer.write(propertyValue);\n      }\n else       if (originalValue != propertyValue) {\n        if (!writeAsArray) {\n          fieldSerializer.writePrefix(serializer);\n        }\n        serializer.write(propertyValue);\n      }\n else {\n        if (!writeAsArray) {\n          fieldSerializer.writeProperty(serializer,propertyValue);\n        }\n else {\n          fieldSerializer.writeValue(serializer,propertyValue);\n        }\n      }\n      commaFlag=true;\n    }\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.decrementIdent();\n      serializer.println();\n    }\n    out.append(endSeperator);\n  }\n catch (  Exception e) {\n    throw new JSONException(\"write javaBean error\",e);\n  }\n finally {\n    serializer.setContext(parent);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 483,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4875,
        "startLineNumber" : 89,
        "startColumnNumber" : 4,
        "endLineNumber" : 219,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void write(JSONSerializer serializer,Object object,Object fieldName,Type fieldType) throws IOException {\n  SerializeWriter out=serializer.getWriter();\n  if (object == null) {\n    out.writeNull();\n    return;\n  }\n  if (serializer.containsReference(object)) {\n    writeReference(serializer,object);\n    return;\n  }\n  final FieldSerializer[] getters;\n  if (out.isEnabled(SerializerFeature.SortField)) {\n    getters=this.sortedGetters;\n  }\n else {\n    getters=this.getters;\n  }\n  SerialContext parent=serializer.getContext();\n  serializer.setContext(parent,object,fieldName);\n  boolean writeAsArray;\n  if (out.isEnabled(SerializerFeature.WriteJavaBeanAsArray)) {\n    writeAsArray=true;\n  }\n else {\n    writeAsArray=false;\n  }\n  try {\n    final char startSeperator=writeAsArray ? '[' : '{';\n    final char endSeperator=writeAsArray ? ']' : '}';\n    out.append(startSeperator);\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.incrementIndent();\n      serializer.println();\n    }\n    boolean commaFlag=false;\n    if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n      Class<?> objClass=object.getClass();\n      if (objClass != fieldType) {\n        out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n        serializer.write(object.getClass());\n        commaFlag=true;\n      }\n    }\n    char seperator=commaFlag ? ',' : '\\0';\n    char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n    commaFlag=newSeperator == ',';\n    for (int i=0; i < getters.length; ++i) {\n      FieldSerializer fieldSerializer=getters[i];\n      if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n        Field field=fieldSerializer.getField();\n        if (field != null) {\n          if (Modifier.isTransient(field.getModifiers())) {\n            continue;\n          }\n        }\n      }\n      if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n        continue;\n      }\n      Object propertyValue=fieldSerializer.getPropertyValue(object);\n      if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n        continue;\n      }\n      String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n      Object originalValue=propertyValue;\n      propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n      if (propertyValue == null && !writeAsArray) {\n        if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n          continue;\n        }\n      }\n      if (commaFlag) {\n        out.append(',');\n        if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n          serializer.println();\n        }\n      }\n      if (key != fieldSerializer.getName()) {\n        if (!writeAsArray) {\n          out.writeFieldName(key);\n        }\n        serializer.write(propertyValue);\n      }\n else       if (originalValue != propertyValue) {\n        if (!writeAsArray) {\n          fieldSerializer.writePrefix(serializer);\n        }\n        serializer.write(propertyValue);\n      }\n else {\n        if (!writeAsArray) {\n          fieldSerializer.writeProperty(serializer,propertyValue);\n        }\n else {\n          fieldSerializer.writeValue(serializer,propertyValue);\n        }\n      }\n      commaFlag=true;\n    }\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.decrementIdent();\n      serializer.println();\n    }\n    out.append(endSeperator);\n  }\n catch (  Exception e) {\n    throw new JSONException(\"write javaBean error\",e);\n  }\n finally {\n    serializer.setContext(parent);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 505,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 103,
        "startLineNumber" : 171,
        "startColumnNumber" : 16,
        "endLineNumber" : 171,
        "endColumnNumber" : 119
      },
      "nodeContext" : "propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.alibaba.fastjson.serializer.JSONSerializer"
  }, {
    "nodeContext" : "serializer",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 175,
      "startColumnNumber" : 29,
      "endLineNumber" : 175,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 175,
        "startColumnNumber" : 29,
        "endLineNumber" : 175,
        "endColumnNumber" : 86
      },
      "nodeContext" : "serializer.isEnabled(SerializerFeature.WriteMapNullValue)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 175,
        "startColumnNumber" : 28,
        "endLineNumber" : 175,
        "endColumnNumber" : 86
      },
      "nodeContext" : "!serializer.isEnabled(SerializerFeature.WriteMapNullValue)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 175,
        "startColumnNumber" : 27,
        "endLineNumber" : 175,
        "endColumnNumber" : 87
      },
      "nodeContext" : "(!serializer.isEnabled(SerializerFeature.WriteMapNullValue))",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 121,
        "startLineNumber" : 174,
        "startColumnNumber" : 24,
        "endLineNumber" : 175,
        "endColumnNumber" : 87
      },
      "nodeContext" : "(!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 186,
        "startLineNumber" : 174,
        "startColumnNumber" : 20,
        "endLineNumber" : 177,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n  continue;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 17,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 228,
        "startLineNumber" : 173,
        "startColumnNumber" : 60,
        "endLineNumber" : 178,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n    continue;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 18,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 272,
        "startLineNumber" : 173,
        "startColumnNumber" : 16,
        "endLineNumber" : 178,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (propertyValue == null && !writeAsArray) {\n  if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n    continue;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 25,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 2479,
        "startLineNumber" : 146,
        "startColumnNumber" : 53,
        "endLineNumber" : 206,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  FieldSerializer fieldSerializer=getters[i];\n  if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n    Field field=fieldSerializer.getField();\n    if (field != null) {\n      if (Modifier.isTransient(field.getModifiers())) {\n        continue;\n      }\n    }\n  }\n  if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n    continue;\n  }\n  Object propertyValue=fieldSerializer.getPropertyValue(object);\n  if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n    continue;\n  }\n  String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n  Object originalValue=propertyValue;\n  propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n  if (propertyValue == null && !writeAsArray) {\n    if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n      continue;\n    }\n  }\n  if (commaFlag) {\n    out.append(',');\n    if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.println();\n    }\n  }\n  if (key != fieldSerializer.getName()) {\n    if (!writeAsArray) {\n      out.writeFieldName(key);\n    }\n    serializer.write(propertyValue);\n  }\n else   if (originalValue != propertyValue) {\n    if (!writeAsArray) {\n      fieldSerializer.writePrefix(serializer);\n    }\n    serializer.write(propertyValue);\n  }\n else {\n    if (!writeAsArray) {\n      fieldSerializer.writeProperty(serializer,propertyValue);\n    }\n else {\n      fieldSerializer.writeValue(serializer,propertyValue);\n    }\n  }\n  commaFlag=true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 212,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2520,
        "startLineNumber" : 146,
        "startColumnNumber" : 12,
        "endLineNumber" : 206,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int i=0; i < getters.length; ++i) {\n  FieldSerializer fieldSerializer=getters[i];\n  if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n    Field field=fieldSerializer.getField();\n    if (field != null) {\n      if (Modifier.isTransient(field.getModifiers())) {\n        continue;\n      }\n    }\n  }\n  if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n    continue;\n  }\n  Object propertyValue=fieldSerializer.getPropertyValue(object);\n  if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n    continue;\n  }\n  String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n  Object originalValue=propertyValue;\n  propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n  if (propertyValue == null && !writeAsArray) {\n    if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n      continue;\n    }\n  }\n  if (commaFlag) {\n    out.append(',');\n    if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.println();\n    }\n  }\n  if (key != fieldSerializer.getName()) {\n    if (!writeAsArray) {\n      out.writeFieldName(key);\n    }\n    serializer.write(propertyValue);\n  }\n else   if (originalValue != propertyValue) {\n    if (!writeAsArray) {\n      fieldSerializer.writePrefix(serializer);\n    }\n    serializer.write(propertyValue);\n  }\n else {\n    if (!writeAsArray) {\n      fieldSerializer.writeProperty(serializer,propertyValue);\n    }\n else {\n      fieldSerializer.writeValue(serializer,propertyValue);\n    }\n  }\n  commaFlag=true;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 225,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3756,
        "startLineNumber" : 120,
        "startColumnNumber" : 12,
        "endLineNumber" : 214,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final char startSeperator=writeAsArray ? '[' : '{';\n  final char endSeperator=writeAsArray ? ']' : '}';\n  out.append(startSeperator);\n  if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n    serializer.incrementIndent();\n    serializer.println();\n  }\n  boolean commaFlag=false;\n  if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n    Class<?> objClass=object.getClass();\n    if (objClass != fieldType) {\n      out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n      serializer.write(object.getClass());\n      commaFlag=true;\n    }\n  }\n  char seperator=commaFlag ? ',' : '\\0';\n  char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n  commaFlag=newSeperator == ',';\n  for (int i=0; i < getters.length; ++i) {\n    FieldSerializer fieldSerializer=getters[i];\n    if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n      Field field=fieldSerializer.getField();\n      if (field != null) {\n        if (Modifier.isTransient(field.getModifiers())) {\n          continue;\n        }\n      }\n    }\n    if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n      continue;\n    }\n    Object propertyValue=fieldSerializer.getPropertyValue(object);\n    if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n      continue;\n    }\n    String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n    Object originalValue=propertyValue;\n    propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n    if (propertyValue == null && !writeAsArray) {\n      if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n        continue;\n      }\n    }\n    if (commaFlag) {\n      out.append(',');\n      if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n        serializer.println();\n      }\n    }\n    if (key != fieldSerializer.getName()) {\n      if (!writeAsArray) {\n        out.writeFieldName(key);\n      }\n      serializer.write(propertyValue);\n    }\n else     if (originalValue != propertyValue) {\n      if (!writeAsArray) {\n        fieldSerializer.writePrefix(serializer);\n      }\n      serializer.write(propertyValue);\n    }\n else {\n      if (!writeAsArray) {\n        fieldSerializer.writeProperty(serializer,propertyValue);\n      }\n else {\n        fieldSerializer.writeValue(serializer,propertyValue);\n      }\n    }\n    commaFlag=true;\n  }\n  if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n    serializer.decrementIdent();\n    serializer.println();\n  }\n  out.append(endSeperator);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 368,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3923,
        "startLineNumber" : 120,
        "startColumnNumber" : 8,
        "endLineNumber" : 218,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  final char startSeperator=writeAsArray ? '[' : '{';\n  final char endSeperator=writeAsArray ? ']' : '}';\n  out.append(startSeperator);\n  if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n    serializer.incrementIndent();\n    serializer.println();\n  }\n  boolean commaFlag=false;\n  if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n    Class<?> objClass=object.getClass();\n    if (objClass != fieldType) {\n      out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n      serializer.write(object.getClass());\n      commaFlag=true;\n    }\n  }\n  char seperator=commaFlag ? ',' : '\\0';\n  char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n  commaFlag=newSeperator == ',';\n  for (int i=0; i < getters.length; ++i) {\n    FieldSerializer fieldSerializer=getters[i];\n    if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n      Field field=fieldSerializer.getField();\n      if (field != null) {\n        if (Modifier.isTransient(field.getModifiers())) {\n          continue;\n        }\n      }\n    }\n    if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n      continue;\n    }\n    Object propertyValue=fieldSerializer.getPropertyValue(object);\n    if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n      continue;\n    }\n    String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n    Object originalValue=propertyValue;\n    propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n    if (propertyValue == null && !writeAsArray) {\n      if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n        continue;\n      }\n    }\n    if (commaFlag) {\n      out.append(',');\n      if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n        serializer.println();\n      }\n    }\n    if (key != fieldSerializer.getName()) {\n      if (!writeAsArray) {\n        out.writeFieldName(key);\n      }\n      serializer.write(propertyValue);\n    }\n else     if (originalValue != propertyValue) {\n      if (!writeAsArray) {\n        fieldSerializer.writePrefix(serializer);\n      }\n      serializer.write(propertyValue);\n    }\n else {\n      if (!writeAsArray) {\n        fieldSerializer.writeProperty(serializer,propertyValue);\n      }\n else {\n        fieldSerializer.writeValue(serializer,propertyValue);\n      }\n    }\n    commaFlag=true;\n  }\n  if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n    serializer.decrementIdent();\n    serializer.println();\n  }\n  out.append(endSeperator);\n}\n catch (Exception e) {\n  throw new JSONException(\"write javaBean error\",e);\n}\n finally {\n  serializer.setContext(parent);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 387,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4762,
        "startLineNumber" : 89,
        "startColumnNumber" : 117,
        "endLineNumber" : 219,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SerializeWriter out=serializer.getWriter();\n  if (object == null) {\n    out.writeNull();\n    return;\n  }\n  if (serializer.containsReference(object)) {\n    writeReference(serializer,object);\n    return;\n  }\n  final FieldSerializer[] getters;\n  if (out.isEnabled(SerializerFeature.SortField)) {\n    getters=this.sortedGetters;\n  }\n else {\n    getters=this.getters;\n  }\n  SerialContext parent=serializer.getContext();\n  serializer.setContext(parent,object,fieldName);\n  boolean writeAsArray;\n  if (out.isEnabled(SerializerFeature.WriteJavaBeanAsArray)) {\n    writeAsArray=true;\n  }\n else {\n    writeAsArray=false;\n  }\n  try {\n    final char startSeperator=writeAsArray ? '[' : '{';\n    final char endSeperator=writeAsArray ? ']' : '}';\n    out.append(startSeperator);\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.incrementIndent();\n      serializer.println();\n    }\n    boolean commaFlag=false;\n    if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n      Class<?> objClass=object.getClass();\n      if (objClass != fieldType) {\n        out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n        serializer.write(object.getClass());\n        commaFlag=true;\n      }\n    }\n    char seperator=commaFlag ? ',' : '\\0';\n    char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n    commaFlag=newSeperator == ',';\n    for (int i=0; i < getters.length; ++i) {\n      FieldSerializer fieldSerializer=getters[i];\n      if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n        Field field=fieldSerializer.getField();\n        if (field != null) {\n          if (Modifier.isTransient(field.getModifiers())) {\n            continue;\n          }\n        }\n      }\n      if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n        continue;\n      }\n      Object propertyValue=fieldSerializer.getPropertyValue(object);\n      if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n        continue;\n      }\n      String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n      Object originalValue=propertyValue;\n      propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n      if (propertyValue == null && !writeAsArray) {\n        if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n          continue;\n        }\n      }\n      if (commaFlag) {\n        out.append(',');\n        if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n          serializer.println();\n        }\n      }\n      if (key != fieldSerializer.getName()) {\n        if (!writeAsArray) {\n          out.writeFieldName(key);\n        }\n        serializer.write(propertyValue);\n      }\n else       if (originalValue != propertyValue) {\n        if (!writeAsArray) {\n          fieldSerializer.writePrefix(serializer);\n        }\n        serializer.write(propertyValue);\n      }\n else {\n        if (!writeAsArray) {\n          fieldSerializer.writeProperty(serializer,propertyValue);\n        }\n else {\n          fieldSerializer.writeValue(serializer,propertyValue);\n        }\n      }\n      commaFlag=true;\n    }\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.decrementIdent();\n      serializer.println();\n    }\n    out.append(endSeperator);\n  }\n catch (  Exception e) {\n    throw new JSONException(\"write javaBean error\",e);\n  }\n finally {\n    serializer.setContext(parent);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 483,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4875,
        "startLineNumber" : 89,
        "startColumnNumber" : 4,
        "endLineNumber" : 219,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void write(JSONSerializer serializer,Object object,Object fieldName,Type fieldType) throws IOException {\n  SerializeWriter out=serializer.getWriter();\n  if (object == null) {\n    out.writeNull();\n    return;\n  }\n  if (serializer.containsReference(object)) {\n    writeReference(serializer,object);\n    return;\n  }\n  final FieldSerializer[] getters;\n  if (out.isEnabled(SerializerFeature.SortField)) {\n    getters=this.sortedGetters;\n  }\n else {\n    getters=this.getters;\n  }\n  SerialContext parent=serializer.getContext();\n  serializer.setContext(parent,object,fieldName);\n  boolean writeAsArray;\n  if (out.isEnabled(SerializerFeature.WriteJavaBeanAsArray)) {\n    writeAsArray=true;\n  }\n else {\n    writeAsArray=false;\n  }\n  try {\n    final char startSeperator=writeAsArray ? '[' : '{';\n    final char endSeperator=writeAsArray ? ']' : '}';\n    out.append(startSeperator);\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.incrementIndent();\n      serializer.println();\n    }\n    boolean commaFlag=false;\n    if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n      Class<?> objClass=object.getClass();\n      if (objClass != fieldType) {\n        out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n        serializer.write(object.getClass());\n        commaFlag=true;\n      }\n    }\n    char seperator=commaFlag ? ',' : '\\0';\n    char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n    commaFlag=newSeperator == ',';\n    for (int i=0; i < getters.length; ++i) {\n      FieldSerializer fieldSerializer=getters[i];\n      if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n        Field field=fieldSerializer.getField();\n        if (field != null) {\n          if (Modifier.isTransient(field.getModifiers())) {\n            continue;\n          }\n        }\n      }\n      if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n        continue;\n      }\n      Object propertyValue=fieldSerializer.getPropertyValue(object);\n      if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n        continue;\n      }\n      String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n      Object originalValue=propertyValue;\n      propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n      if (propertyValue == null && !writeAsArray) {\n        if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n          continue;\n        }\n      }\n      if (commaFlag) {\n        out.append(',');\n        if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n          serializer.println();\n        }\n      }\n      if (key != fieldSerializer.getName()) {\n        if (!writeAsArray) {\n          out.writeFieldName(key);\n        }\n        serializer.write(propertyValue);\n      }\n else       if (originalValue != propertyValue) {\n        if (!writeAsArray) {\n          fieldSerializer.writePrefix(serializer);\n        }\n        serializer.write(propertyValue);\n      }\n else {\n        if (!writeAsArray) {\n          fieldSerializer.writeProperty(serializer,propertyValue);\n        }\n else {\n          fieldSerializer.writeValue(serializer,propertyValue);\n        }\n      }\n      commaFlag=true;\n    }\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.decrementIdent();\n      serializer.println();\n    }\n    out.append(endSeperator);\n  }\n catch (  Exception e) {\n    throw new JSONException(\"write javaBean error\",e);\n  }\n finally {\n    serializer.setContext(parent);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 505,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 175,
        "startColumnNumber" : 27,
        "endLineNumber" : 175,
        "endColumnNumber" : 87
      },
      "nodeContext" : "(!serializer.isEnabled(SerializerFeature.WriteMapNullValue))",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.alibaba.fastjson.serializer.JSONSerializer"
  }, {
    "nodeContext" : "serializer",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 183,
      "startColumnNumber" : 24,
      "endLineNumber" : 183,
      "endColumnNumber" : 34
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 183,
        "startColumnNumber" : 24,
        "endLineNumber" : 183,
        "endColumnNumber" : 44
      },
      "nodeContext" : "serializer.println()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 183,
        "startColumnNumber" : 24,
        "endLineNumber" : 183,
        "endColumnNumber" : 45
      },
      "nodeContext" : "serializer.println();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 182,
        "startColumnNumber" : 71,
        "endLineNumber" : 184,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  serializer.println();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 122,
        "startLineNumber" : 182,
        "startColumnNumber" : 20,
        "endLineNumber" : 184,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n  serializer.println();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 202,
        "startLineNumber" : 180,
        "startColumnNumber" : 31,
        "endLineNumber" : 185,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  out.append(',');\n  if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n    serializer.println();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 217,
        "startLineNumber" : 180,
        "startColumnNumber" : 16,
        "endLineNumber" : 185,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (commaFlag) {\n  out.append(',');\n  if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n    serializer.println();\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 20,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 2479,
        "startLineNumber" : 146,
        "startColumnNumber" : 53,
        "endLineNumber" : 206,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  FieldSerializer fieldSerializer=getters[i];\n  if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n    Field field=fieldSerializer.getField();\n    if (field != null) {\n      if (Modifier.isTransient(field.getModifiers())) {\n        continue;\n      }\n    }\n  }\n  if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n    continue;\n  }\n  Object propertyValue=fieldSerializer.getPropertyValue(object);\n  if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n    continue;\n  }\n  String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n  Object originalValue=propertyValue;\n  propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n  if (propertyValue == null && !writeAsArray) {\n    if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n      continue;\n    }\n  }\n  if (commaFlag) {\n    out.append(',');\n    if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.println();\n    }\n  }\n  if (key != fieldSerializer.getName()) {\n    if (!writeAsArray) {\n      out.writeFieldName(key);\n    }\n    serializer.write(propertyValue);\n  }\n else   if (originalValue != propertyValue) {\n    if (!writeAsArray) {\n      fieldSerializer.writePrefix(serializer);\n    }\n    serializer.write(propertyValue);\n  }\n else {\n    if (!writeAsArray) {\n      fieldSerializer.writeProperty(serializer,propertyValue);\n    }\n else {\n      fieldSerializer.writeValue(serializer,propertyValue);\n    }\n  }\n  commaFlag=true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 212,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2520,
        "startLineNumber" : 146,
        "startColumnNumber" : 12,
        "endLineNumber" : 206,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int i=0; i < getters.length; ++i) {\n  FieldSerializer fieldSerializer=getters[i];\n  if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n    Field field=fieldSerializer.getField();\n    if (field != null) {\n      if (Modifier.isTransient(field.getModifiers())) {\n        continue;\n      }\n    }\n  }\n  if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n    continue;\n  }\n  Object propertyValue=fieldSerializer.getPropertyValue(object);\n  if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n    continue;\n  }\n  String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n  Object originalValue=propertyValue;\n  propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n  if (propertyValue == null && !writeAsArray) {\n    if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n      continue;\n    }\n  }\n  if (commaFlag) {\n    out.append(',');\n    if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.println();\n    }\n  }\n  if (key != fieldSerializer.getName()) {\n    if (!writeAsArray) {\n      out.writeFieldName(key);\n    }\n    serializer.write(propertyValue);\n  }\n else   if (originalValue != propertyValue) {\n    if (!writeAsArray) {\n      fieldSerializer.writePrefix(serializer);\n    }\n    serializer.write(propertyValue);\n  }\n else {\n    if (!writeAsArray) {\n      fieldSerializer.writeProperty(serializer,propertyValue);\n    }\n else {\n      fieldSerializer.writeValue(serializer,propertyValue);\n    }\n  }\n  commaFlag=true;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 225,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3756,
        "startLineNumber" : 120,
        "startColumnNumber" : 12,
        "endLineNumber" : 214,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final char startSeperator=writeAsArray ? '[' : '{';\n  final char endSeperator=writeAsArray ? ']' : '}';\n  out.append(startSeperator);\n  if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n    serializer.incrementIndent();\n    serializer.println();\n  }\n  boolean commaFlag=false;\n  if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n    Class<?> objClass=object.getClass();\n    if (objClass != fieldType) {\n      out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n      serializer.write(object.getClass());\n      commaFlag=true;\n    }\n  }\n  char seperator=commaFlag ? ',' : '\\0';\n  char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n  commaFlag=newSeperator == ',';\n  for (int i=0; i < getters.length; ++i) {\n    FieldSerializer fieldSerializer=getters[i];\n    if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n      Field field=fieldSerializer.getField();\n      if (field != null) {\n        if (Modifier.isTransient(field.getModifiers())) {\n          continue;\n        }\n      }\n    }\n    if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n      continue;\n    }\n    Object propertyValue=fieldSerializer.getPropertyValue(object);\n    if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n      continue;\n    }\n    String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n    Object originalValue=propertyValue;\n    propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n    if (propertyValue == null && !writeAsArray) {\n      if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n        continue;\n      }\n    }\n    if (commaFlag) {\n      out.append(',');\n      if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n        serializer.println();\n      }\n    }\n    if (key != fieldSerializer.getName()) {\n      if (!writeAsArray) {\n        out.writeFieldName(key);\n      }\n      serializer.write(propertyValue);\n    }\n else     if (originalValue != propertyValue) {\n      if (!writeAsArray) {\n        fieldSerializer.writePrefix(serializer);\n      }\n      serializer.write(propertyValue);\n    }\n else {\n      if (!writeAsArray) {\n        fieldSerializer.writeProperty(serializer,propertyValue);\n      }\n else {\n        fieldSerializer.writeValue(serializer,propertyValue);\n      }\n    }\n    commaFlag=true;\n  }\n  if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n    serializer.decrementIdent();\n    serializer.println();\n  }\n  out.append(endSeperator);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 368,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3923,
        "startLineNumber" : 120,
        "startColumnNumber" : 8,
        "endLineNumber" : 218,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  final char startSeperator=writeAsArray ? '[' : '{';\n  final char endSeperator=writeAsArray ? ']' : '}';\n  out.append(startSeperator);\n  if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n    serializer.incrementIndent();\n    serializer.println();\n  }\n  boolean commaFlag=false;\n  if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n    Class<?> objClass=object.getClass();\n    if (objClass != fieldType) {\n      out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n      serializer.write(object.getClass());\n      commaFlag=true;\n    }\n  }\n  char seperator=commaFlag ? ',' : '\\0';\n  char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n  commaFlag=newSeperator == ',';\n  for (int i=0; i < getters.length; ++i) {\n    FieldSerializer fieldSerializer=getters[i];\n    if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n      Field field=fieldSerializer.getField();\n      if (field != null) {\n        if (Modifier.isTransient(field.getModifiers())) {\n          continue;\n        }\n      }\n    }\n    if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n      continue;\n    }\n    Object propertyValue=fieldSerializer.getPropertyValue(object);\n    if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n      continue;\n    }\n    String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n    Object originalValue=propertyValue;\n    propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n    if (propertyValue == null && !writeAsArray) {\n      if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n        continue;\n      }\n    }\n    if (commaFlag) {\n      out.append(',');\n      if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n        serializer.println();\n      }\n    }\n    if (key != fieldSerializer.getName()) {\n      if (!writeAsArray) {\n        out.writeFieldName(key);\n      }\n      serializer.write(propertyValue);\n    }\n else     if (originalValue != propertyValue) {\n      if (!writeAsArray) {\n        fieldSerializer.writePrefix(serializer);\n      }\n      serializer.write(propertyValue);\n    }\n else {\n      if (!writeAsArray) {\n        fieldSerializer.writeProperty(serializer,propertyValue);\n      }\n else {\n        fieldSerializer.writeValue(serializer,propertyValue);\n      }\n    }\n    commaFlag=true;\n  }\n  if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n    serializer.decrementIdent();\n    serializer.println();\n  }\n  out.append(endSeperator);\n}\n catch (Exception e) {\n  throw new JSONException(\"write javaBean error\",e);\n}\n finally {\n  serializer.setContext(parent);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 387,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4762,
        "startLineNumber" : 89,
        "startColumnNumber" : 117,
        "endLineNumber" : 219,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SerializeWriter out=serializer.getWriter();\n  if (object == null) {\n    out.writeNull();\n    return;\n  }\n  if (serializer.containsReference(object)) {\n    writeReference(serializer,object);\n    return;\n  }\n  final FieldSerializer[] getters;\n  if (out.isEnabled(SerializerFeature.SortField)) {\n    getters=this.sortedGetters;\n  }\n else {\n    getters=this.getters;\n  }\n  SerialContext parent=serializer.getContext();\n  serializer.setContext(parent,object,fieldName);\n  boolean writeAsArray;\n  if (out.isEnabled(SerializerFeature.WriteJavaBeanAsArray)) {\n    writeAsArray=true;\n  }\n else {\n    writeAsArray=false;\n  }\n  try {\n    final char startSeperator=writeAsArray ? '[' : '{';\n    final char endSeperator=writeAsArray ? ']' : '}';\n    out.append(startSeperator);\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.incrementIndent();\n      serializer.println();\n    }\n    boolean commaFlag=false;\n    if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n      Class<?> objClass=object.getClass();\n      if (objClass != fieldType) {\n        out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n        serializer.write(object.getClass());\n        commaFlag=true;\n      }\n    }\n    char seperator=commaFlag ? ',' : '\\0';\n    char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n    commaFlag=newSeperator == ',';\n    for (int i=0; i < getters.length; ++i) {\n      FieldSerializer fieldSerializer=getters[i];\n      if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n        Field field=fieldSerializer.getField();\n        if (field != null) {\n          if (Modifier.isTransient(field.getModifiers())) {\n            continue;\n          }\n        }\n      }\n      if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n        continue;\n      }\n      Object propertyValue=fieldSerializer.getPropertyValue(object);\n      if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n        continue;\n      }\n      String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n      Object originalValue=propertyValue;\n      propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n      if (propertyValue == null && !writeAsArray) {\n        if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n          continue;\n        }\n      }\n      if (commaFlag) {\n        out.append(',');\n        if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n          serializer.println();\n        }\n      }\n      if (key != fieldSerializer.getName()) {\n        if (!writeAsArray) {\n          out.writeFieldName(key);\n        }\n        serializer.write(propertyValue);\n      }\n else       if (originalValue != propertyValue) {\n        if (!writeAsArray) {\n          fieldSerializer.writePrefix(serializer);\n        }\n        serializer.write(propertyValue);\n      }\n else {\n        if (!writeAsArray) {\n          fieldSerializer.writeProperty(serializer,propertyValue);\n        }\n else {\n          fieldSerializer.writeValue(serializer,propertyValue);\n        }\n      }\n      commaFlag=true;\n    }\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.decrementIdent();\n      serializer.println();\n    }\n    out.append(endSeperator);\n  }\n catch (  Exception e) {\n    throw new JSONException(\"write javaBean error\",e);\n  }\n finally {\n    serializer.setContext(parent);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 483,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4875,
        "startLineNumber" : 89,
        "startColumnNumber" : 4,
        "endLineNumber" : 219,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void write(JSONSerializer serializer,Object object,Object fieldName,Type fieldType) throws IOException {\n  SerializeWriter out=serializer.getWriter();\n  if (object == null) {\n    out.writeNull();\n    return;\n  }\n  if (serializer.containsReference(object)) {\n    writeReference(serializer,object);\n    return;\n  }\n  final FieldSerializer[] getters;\n  if (out.isEnabled(SerializerFeature.SortField)) {\n    getters=this.sortedGetters;\n  }\n else {\n    getters=this.getters;\n  }\n  SerialContext parent=serializer.getContext();\n  serializer.setContext(parent,object,fieldName);\n  boolean writeAsArray;\n  if (out.isEnabled(SerializerFeature.WriteJavaBeanAsArray)) {\n    writeAsArray=true;\n  }\n else {\n    writeAsArray=false;\n  }\n  try {\n    final char startSeperator=writeAsArray ? '[' : '{';\n    final char endSeperator=writeAsArray ? ']' : '}';\n    out.append(startSeperator);\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.incrementIndent();\n      serializer.println();\n    }\n    boolean commaFlag=false;\n    if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n      Class<?> objClass=object.getClass();\n      if (objClass != fieldType) {\n        out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n        serializer.write(object.getClass());\n        commaFlag=true;\n      }\n    }\n    char seperator=commaFlag ? ',' : '\\0';\n    char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n    commaFlag=newSeperator == ',';\n    for (int i=0; i < getters.length; ++i) {\n      FieldSerializer fieldSerializer=getters[i];\n      if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n        Field field=fieldSerializer.getField();\n        if (field != null) {\n          if (Modifier.isTransient(field.getModifiers())) {\n            continue;\n          }\n        }\n      }\n      if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n        continue;\n      }\n      Object propertyValue=fieldSerializer.getPropertyValue(object);\n      if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n        continue;\n      }\n      String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n      Object originalValue=propertyValue;\n      propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n      if (propertyValue == null && !writeAsArray) {\n        if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n          continue;\n        }\n      }\n      if (commaFlag) {\n        out.append(',');\n        if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n          serializer.println();\n        }\n      }\n      if (key != fieldSerializer.getName()) {\n        if (!writeAsArray) {\n          out.writeFieldName(key);\n        }\n        serializer.write(propertyValue);\n      }\n else       if (originalValue != propertyValue) {\n        if (!writeAsArray) {\n          fieldSerializer.writePrefix(serializer);\n        }\n        serializer.write(propertyValue);\n      }\n else {\n        if (!writeAsArray) {\n          fieldSerializer.writeProperty(serializer,propertyValue);\n        }\n else {\n          fieldSerializer.writeValue(serializer,propertyValue);\n        }\n      }\n      commaFlag=true;\n    }\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.decrementIdent();\n      serializer.println();\n    }\n    out.append(endSeperator);\n  }\n catch (  Exception e) {\n    throw new JSONException(\"write javaBean error\",e);\n  }\n finally {\n    serializer.setContext(parent);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 505,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 183,
        "startColumnNumber" : 24,
        "endLineNumber" : 183,
        "endColumnNumber" : 45
      },
      "nodeContext" : "serializer.println();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.alibaba.fastjson.serializer.JSONSerializer"
  }, {
    "nodeContext" : "serializer",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 191,
      "startColumnNumber" : 20,
      "endLineNumber" : 191,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 191,
        "startColumnNumber" : 20,
        "endLineNumber" : 191,
        "endColumnNumber" : 51
      },
      "nodeContext" : "serializer.write(propertyValue)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 191,
        "startColumnNumber" : 20,
        "endLineNumber" : 191,
        "endColumnNumber" : 52
      },
      "nodeContext" : "serializer.write(propertyValue);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 189,
        "startLineNumber" : 187,
        "startColumnNumber" : 54,
        "endLineNumber" : 192,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  if (!writeAsArray) {\n    out.writeFieldName(key);\n  }\n  serializer.write(propertyValue);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 758,
        "startLineNumber" : 187,
        "startColumnNumber" : 16,
        "endLineNumber" : 203,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (key != fieldSerializer.getName()) {\n  if (!writeAsArray) {\n    out.writeFieldName(key);\n  }\n  serializer.write(propertyValue);\n}\n else if (originalValue != propertyValue) {\n  if (!writeAsArray) {\n    fieldSerializer.writePrefix(serializer);\n  }\n  serializer.write(propertyValue);\n}\n else {\n  if (!writeAsArray) {\n    fieldSerializer.writeProperty(serializer,propertyValue);\n  }\n else {\n    fieldSerializer.writeValue(serializer,propertyValue);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 58,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 2479,
        "startLineNumber" : 146,
        "startColumnNumber" : 53,
        "endLineNumber" : 206,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  FieldSerializer fieldSerializer=getters[i];\n  if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n    Field field=fieldSerializer.getField();\n    if (field != null) {\n      if (Modifier.isTransient(field.getModifiers())) {\n        continue;\n      }\n    }\n  }\n  if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n    continue;\n  }\n  Object propertyValue=fieldSerializer.getPropertyValue(object);\n  if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n    continue;\n  }\n  String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n  Object originalValue=propertyValue;\n  propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n  if (propertyValue == null && !writeAsArray) {\n    if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n      continue;\n    }\n  }\n  if (commaFlag) {\n    out.append(',');\n    if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.println();\n    }\n  }\n  if (key != fieldSerializer.getName()) {\n    if (!writeAsArray) {\n      out.writeFieldName(key);\n    }\n    serializer.write(propertyValue);\n  }\n else   if (originalValue != propertyValue) {\n    if (!writeAsArray) {\n      fieldSerializer.writePrefix(serializer);\n    }\n    serializer.write(propertyValue);\n  }\n else {\n    if (!writeAsArray) {\n      fieldSerializer.writeProperty(serializer,propertyValue);\n    }\n else {\n      fieldSerializer.writeValue(serializer,propertyValue);\n    }\n  }\n  commaFlag=true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 212,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2520,
        "startLineNumber" : 146,
        "startColumnNumber" : 12,
        "endLineNumber" : 206,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int i=0; i < getters.length; ++i) {\n  FieldSerializer fieldSerializer=getters[i];\n  if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n    Field field=fieldSerializer.getField();\n    if (field != null) {\n      if (Modifier.isTransient(field.getModifiers())) {\n        continue;\n      }\n    }\n  }\n  if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n    continue;\n  }\n  Object propertyValue=fieldSerializer.getPropertyValue(object);\n  if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n    continue;\n  }\n  String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n  Object originalValue=propertyValue;\n  propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n  if (propertyValue == null && !writeAsArray) {\n    if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n      continue;\n    }\n  }\n  if (commaFlag) {\n    out.append(',');\n    if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.println();\n    }\n  }\n  if (key != fieldSerializer.getName()) {\n    if (!writeAsArray) {\n      out.writeFieldName(key);\n    }\n    serializer.write(propertyValue);\n  }\n else   if (originalValue != propertyValue) {\n    if (!writeAsArray) {\n      fieldSerializer.writePrefix(serializer);\n    }\n    serializer.write(propertyValue);\n  }\n else {\n    if (!writeAsArray) {\n      fieldSerializer.writeProperty(serializer,propertyValue);\n    }\n else {\n      fieldSerializer.writeValue(serializer,propertyValue);\n    }\n  }\n  commaFlag=true;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 225,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3756,
        "startLineNumber" : 120,
        "startColumnNumber" : 12,
        "endLineNumber" : 214,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final char startSeperator=writeAsArray ? '[' : '{';\n  final char endSeperator=writeAsArray ? ']' : '}';\n  out.append(startSeperator);\n  if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n    serializer.incrementIndent();\n    serializer.println();\n  }\n  boolean commaFlag=false;\n  if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n    Class<?> objClass=object.getClass();\n    if (objClass != fieldType) {\n      out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n      serializer.write(object.getClass());\n      commaFlag=true;\n    }\n  }\n  char seperator=commaFlag ? ',' : '\\0';\n  char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n  commaFlag=newSeperator == ',';\n  for (int i=0; i < getters.length; ++i) {\n    FieldSerializer fieldSerializer=getters[i];\n    if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n      Field field=fieldSerializer.getField();\n      if (field != null) {\n        if (Modifier.isTransient(field.getModifiers())) {\n          continue;\n        }\n      }\n    }\n    if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n      continue;\n    }\n    Object propertyValue=fieldSerializer.getPropertyValue(object);\n    if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n      continue;\n    }\n    String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n    Object originalValue=propertyValue;\n    propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n    if (propertyValue == null && !writeAsArray) {\n      if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n        continue;\n      }\n    }\n    if (commaFlag) {\n      out.append(',');\n      if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n        serializer.println();\n      }\n    }\n    if (key != fieldSerializer.getName()) {\n      if (!writeAsArray) {\n        out.writeFieldName(key);\n      }\n      serializer.write(propertyValue);\n    }\n else     if (originalValue != propertyValue) {\n      if (!writeAsArray) {\n        fieldSerializer.writePrefix(serializer);\n      }\n      serializer.write(propertyValue);\n    }\n else {\n      if (!writeAsArray) {\n        fieldSerializer.writeProperty(serializer,propertyValue);\n      }\n else {\n        fieldSerializer.writeValue(serializer,propertyValue);\n      }\n    }\n    commaFlag=true;\n  }\n  if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n    serializer.decrementIdent();\n    serializer.println();\n  }\n  out.append(endSeperator);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 368,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3923,
        "startLineNumber" : 120,
        "startColumnNumber" : 8,
        "endLineNumber" : 218,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  final char startSeperator=writeAsArray ? '[' : '{';\n  final char endSeperator=writeAsArray ? ']' : '}';\n  out.append(startSeperator);\n  if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n    serializer.incrementIndent();\n    serializer.println();\n  }\n  boolean commaFlag=false;\n  if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n    Class<?> objClass=object.getClass();\n    if (objClass != fieldType) {\n      out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n      serializer.write(object.getClass());\n      commaFlag=true;\n    }\n  }\n  char seperator=commaFlag ? ',' : '\\0';\n  char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n  commaFlag=newSeperator == ',';\n  for (int i=0; i < getters.length; ++i) {\n    FieldSerializer fieldSerializer=getters[i];\n    if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n      Field field=fieldSerializer.getField();\n      if (field != null) {\n        if (Modifier.isTransient(field.getModifiers())) {\n          continue;\n        }\n      }\n    }\n    if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n      continue;\n    }\n    Object propertyValue=fieldSerializer.getPropertyValue(object);\n    if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n      continue;\n    }\n    String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n    Object originalValue=propertyValue;\n    propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n    if (propertyValue == null && !writeAsArray) {\n      if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n        continue;\n      }\n    }\n    if (commaFlag) {\n      out.append(',');\n      if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n        serializer.println();\n      }\n    }\n    if (key != fieldSerializer.getName()) {\n      if (!writeAsArray) {\n        out.writeFieldName(key);\n      }\n      serializer.write(propertyValue);\n    }\n else     if (originalValue != propertyValue) {\n      if (!writeAsArray) {\n        fieldSerializer.writePrefix(serializer);\n      }\n      serializer.write(propertyValue);\n    }\n else {\n      if (!writeAsArray) {\n        fieldSerializer.writeProperty(serializer,propertyValue);\n      }\n else {\n        fieldSerializer.writeValue(serializer,propertyValue);\n      }\n    }\n    commaFlag=true;\n  }\n  if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n    serializer.decrementIdent();\n    serializer.println();\n  }\n  out.append(endSeperator);\n}\n catch (Exception e) {\n  throw new JSONException(\"write javaBean error\",e);\n}\n finally {\n  serializer.setContext(parent);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 387,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4762,
        "startLineNumber" : 89,
        "startColumnNumber" : 117,
        "endLineNumber" : 219,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SerializeWriter out=serializer.getWriter();\n  if (object == null) {\n    out.writeNull();\n    return;\n  }\n  if (serializer.containsReference(object)) {\n    writeReference(serializer,object);\n    return;\n  }\n  final FieldSerializer[] getters;\n  if (out.isEnabled(SerializerFeature.SortField)) {\n    getters=this.sortedGetters;\n  }\n else {\n    getters=this.getters;\n  }\n  SerialContext parent=serializer.getContext();\n  serializer.setContext(parent,object,fieldName);\n  boolean writeAsArray;\n  if (out.isEnabled(SerializerFeature.WriteJavaBeanAsArray)) {\n    writeAsArray=true;\n  }\n else {\n    writeAsArray=false;\n  }\n  try {\n    final char startSeperator=writeAsArray ? '[' : '{';\n    final char endSeperator=writeAsArray ? ']' : '}';\n    out.append(startSeperator);\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.incrementIndent();\n      serializer.println();\n    }\n    boolean commaFlag=false;\n    if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n      Class<?> objClass=object.getClass();\n      if (objClass != fieldType) {\n        out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n        serializer.write(object.getClass());\n        commaFlag=true;\n      }\n    }\n    char seperator=commaFlag ? ',' : '\\0';\n    char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n    commaFlag=newSeperator == ',';\n    for (int i=0; i < getters.length; ++i) {\n      FieldSerializer fieldSerializer=getters[i];\n      if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n        Field field=fieldSerializer.getField();\n        if (field != null) {\n          if (Modifier.isTransient(field.getModifiers())) {\n            continue;\n          }\n        }\n      }\n      if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n        continue;\n      }\n      Object propertyValue=fieldSerializer.getPropertyValue(object);\n      if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n        continue;\n      }\n      String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n      Object originalValue=propertyValue;\n      propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n      if (propertyValue == null && !writeAsArray) {\n        if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n          continue;\n        }\n      }\n      if (commaFlag) {\n        out.append(',');\n        if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n          serializer.println();\n        }\n      }\n      if (key != fieldSerializer.getName()) {\n        if (!writeAsArray) {\n          out.writeFieldName(key);\n        }\n        serializer.write(propertyValue);\n      }\n else       if (originalValue != propertyValue) {\n        if (!writeAsArray) {\n          fieldSerializer.writePrefix(serializer);\n        }\n        serializer.write(propertyValue);\n      }\n else {\n        if (!writeAsArray) {\n          fieldSerializer.writeProperty(serializer,propertyValue);\n        }\n else {\n          fieldSerializer.writeValue(serializer,propertyValue);\n        }\n      }\n      commaFlag=true;\n    }\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.decrementIdent();\n      serializer.println();\n    }\n    out.append(endSeperator);\n  }\n catch (  Exception e) {\n    throw new JSONException(\"write javaBean error\",e);\n  }\n finally {\n    serializer.setContext(parent);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 483,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4875,
        "startLineNumber" : 89,
        "startColumnNumber" : 4,
        "endLineNumber" : 219,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void write(JSONSerializer serializer,Object object,Object fieldName,Type fieldType) throws IOException {\n  SerializeWriter out=serializer.getWriter();\n  if (object == null) {\n    out.writeNull();\n    return;\n  }\n  if (serializer.containsReference(object)) {\n    writeReference(serializer,object);\n    return;\n  }\n  final FieldSerializer[] getters;\n  if (out.isEnabled(SerializerFeature.SortField)) {\n    getters=this.sortedGetters;\n  }\n else {\n    getters=this.getters;\n  }\n  SerialContext parent=serializer.getContext();\n  serializer.setContext(parent,object,fieldName);\n  boolean writeAsArray;\n  if (out.isEnabled(SerializerFeature.WriteJavaBeanAsArray)) {\n    writeAsArray=true;\n  }\n else {\n    writeAsArray=false;\n  }\n  try {\n    final char startSeperator=writeAsArray ? '[' : '{';\n    final char endSeperator=writeAsArray ? ']' : '}';\n    out.append(startSeperator);\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.incrementIndent();\n      serializer.println();\n    }\n    boolean commaFlag=false;\n    if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n      Class<?> objClass=object.getClass();\n      if (objClass != fieldType) {\n        out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n        serializer.write(object.getClass());\n        commaFlag=true;\n      }\n    }\n    char seperator=commaFlag ? ',' : '\\0';\n    char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n    commaFlag=newSeperator == ',';\n    for (int i=0; i < getters.length; ++i) {\n      FieldSerializer fieldSerializer=getters[i];\n      if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n        Field field=fieldSerializer.getField();\n        if (field != null) {\n          if (Modifier.isTransient(field.getModifiers())) {\n            continue;\n          }\n        }\n      }\n      if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n        continue;\n      }\n      Object propertyValue=fieldSerializer.getPropertyValue(object);\n      if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n        continue;\n      }\n      String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n      Object originalValue=propertyValue;\n      propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n      if (propertyValue == null && !writeAsArray) {\n        if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n          continue;\n        }\n      }\n      if (commaFlag) {\n        out.append(',');\n        if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n          serializer.println();\n        }\n      }\n      if (key != fieldSerializer.getName()) {\n        if (!writeAsArray) {\n          out.writeFieldName(key);\n        }\n        serializer.write(propertyValue);\n      }\n else       if (originalValue != propertyValue) {\n        if (!writeAsArray) {\n          fieldSerializer.writePrefix(serializer);\n        }\n        serializer.write(propertyValue);\n      }\n else {\n        if (!writeAsArray) {\n          fieldSerializer.writeProperty(serializer,propertyValue);\n        }\n else {\n          fieldSerializer.writeValue(serializer,propertyValue);\n        }\n      }\n      commaFlag=true;\n    }\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.decrementIdent();\n      serializer.println();\n    }\n    out.append(endSeperator);\n  }\n catch (  Exception e) {\n    throw new JSONException(\"write javaBean error\",e);\n  }\n finally {\n    serializer.setContext(parent);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 505,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 191,
        "startColumnNumber" : 20,
        "endLineNumber" : 191,
        "endColumnNumber" : 52
      },
      "nodeContext" : "serializer.write(propertyValue);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.alibaba.fastjson.serializer.JSONSerializer"
  }, {
    "nodeContext" : "serializer",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 194,
      "startColumnNumber" : 52,
      "endLineNumber" : 194,
      "endColumnNumber" : 62
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 194,
        "startColumnNumber" : 24,
        "endLineNumber" : 194,
        "endColumnNumber" : 63
      },
      "nodeContext" : "fieldSerializer.writePrefix(serializer)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 194,
        "startColumnNumber" : 24,
        "endLineNumber" : 194,
        "endColumnNumber" : 64
      },
      "nodeContext" : "fieldSerializer.writePrefix(serializer);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 193,
        "startColumnNumber" : 39,
        "endLineNumber" : 195,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  fieldSerializer.writePrefix(serializer);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 109,
        "startLineNumber" : 193,
        "startColumnNumber" : 20,
        "endLineNumber" : 195,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (!writeAsArray) {\n  fieldSerializer.writePrefix(serializer);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 205,
        "startLineNumber" : 192,
        "startColumnNumber" : 59,
        "endLineNumber" : 197,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  if (!writeAsArray) {\n    fieldSerializer.writePrefix(serializer);\n  }\n  serializer.write(propertyValue);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 525,
        "startLineNumber" : 192,
        "startColumnNumber" : 23,
        "endLineNumber" : 203,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (originalValue != propertyValue) {\n  if (!writeAsArray) {\n    fieldSerializer.writePrefix(serializer);\n  }\n  serializer.write(propertyValue);\n}\n else {\n  if (!writeAsArray) {\n    fieldSerializer.writeProperty(serializer,propertyValue);\n  }\n else {\n    fieldSerializer.writeValue(serializer,propertyValue);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 37,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 758,
        "startLineNumber" : 187,
        "startColumnNumber" : 16,
        "endLineNumber" : 203,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (key != fieldSerializer.getName()) {\n  if (!writeAsArray) {\n    out.writeFieldName(key);\n  }\n  serializer.write(propertyValue);\n}\n else if (originalValue != propertyValue) {\n  if (!writeAsArray) {\n    fieldSerializer.writePrefix(serializer);\n  }\n  serializer.write(propertyValue);\n}\n else {\n  if (!writeAsArray) {\n    fieldSerializer.writeProperty(serializer,propertyValue);\n  }\n else {\n    fieldSerializer.writeValue(serializer,propertyValue);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 58,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 2479,
        "startLineNumber" : 146,
        "startColumnNumber" : 53,
        "endLineNumber" : 206,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  FieldSerializer fieldSerializer=getters[i];\n  if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n    Field field=fieldSerializer.getField();\n    if (field != null) {\n      if (Modifier.isTransient(field.getModifiers())) {\n        continue;\n      }\n    }\n  }\n  if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n    continue;\n  }\n  Object propertyValue=fieldSerializer.getPropertyValue(object);\n  if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n    continue;\n  }\n  String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n  Object originalValue=propertyValue;\n  propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n  if (propertyValue == null && !writeAsArray) {\n    if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n      continue;\n    }\n  }\n  if (commaFlag) {\n    out.append(',');\n    if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.println();\n    }\n  }\n  if (key != fieldSerializer.getName()) {\n    if (!writeAsArray) {\n      out.writeFieldName(key);\n    }\n    serializer.write(propertyValue);\n  }\n else   if (originalValue != propertyValue) {\n    if (!writeAsArray) {\n      fieldSerializer.writePrefix(serializer);\n    }\n    serializer.write(propertyValue);\n  }\n else {\n    if (!writeAsArray) {\n      fieldSerializer.writeProperty(serializer,propertyValue);\n    }\n else {\n      fieldSerializer.writeValue(serializer,propertyValue);\n    }\n  }\n  commaFlag=true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 212,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2520,
        "startLineNumber" : 146,
        "startColumnNumber" : 12,
        "endLineNumber" : 206,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int i=0; i < getters.length; ++i) {\n  FieldSerializer fieldSerializer=getters[i];\n  if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n    Field field=fieldSerializer.getField();\n    if (field != null) {\n      if (Modifier.isTransient(field.getModifiers())) {\n        continue;\n      }\n    }\n  }\n  if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n    continue;\n  }\n  Object propertyValue=fieldSerializer.getPropertyValue(object);\n  if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n    continue;\n  }\n  String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n  Object originalValue=propertyValue;\n  propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n  if (propertyValue == null && !writeAsArray) {\n    if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n      continue;\n    }\n  }\n  if (commaFlag) {\n    out.append(',');\n    if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.println();\n    }\n  }\n  if (key != fieldSerializer.getName()) {\n    if (!writeAsArray) {\n      out.writeFieldName(key);\n    }\n    serializer.write(propertyValue);\n  }\n else   if (originalValue != propertyValue) {\n    if (!writeAsArray) {\n      fieldSerializer.writePrefix(serializer);\n    }\n    serializer.write(propertyValue);\n  }\n else {\n    if (!writeAsArray) {\n      fieldSerializer.writeProperty(serializer,propertyValue);\n    }\n else {\n      fieldSerializer.writeValue(serializer,propertyValue);\n    }\n  }\n  commaFlag=true;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 225,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3756,
        "startLineNumber" : 120,
        "startColumnNumber" : 12,
        "endLineNumber" : 214,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final char startSeperator=writeAsArray ? '[' : '{';\n  final char endSeperator=writeAsArray ? ']' : '}';\n  out.append(startSeperator);\n  if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n    serializer.incrementIndent();\n    serializer.println();\n  }\n  boolean commaFlag=false;\n  if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n    Class<?> objClass=object.getClass();\n    if (objClass != fieldType) {\n      out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n      serializer.write(object.getClass());\n      commaFlag=true;\n    }\n  }\n  char seperator=commaFlag ? ',' : '\\0';\n  char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n  commaFlag=newSeperator == ',';\n  for (int i=0; i < getters.length; ++i) {\n    FieldSerializer fieldSerializer=getters[i];\n    if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n      Field field=fieldSerializer.getField();\n      if (field != null) {\n        if (Modifier.isTransient(field.getModifiers())) {\n          continue;\n        }\n      }\n    }\n    if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n      continue;\n    }\n    Object propertyValue=fieldSerializer.getPropertyValue(object);\n    if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n      continue;\n    }\n    String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n    Object originalValue=propertyValue;\n    propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n    if (propertyValue == null && !writeAsArray) {\n      if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n        continue;\n      }\n    }\n    if (commaFlag) {\n      out.append(',');\n      if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n        serializer.println();\n      }\n    }\n    if (key != fieldSerializer.getName()) {\n      if (!writeAsArray) {\n        out.writeFieldName(key);\n      }\n      serializer.write(propertyValue);\n    }\n else     if (originalValue != propertyValue) {\n      if (!writeAsArray) {\n        fieldSerializer.writePrefix(serializer);\n      }\n      serializer.write(propertyValue);\n    }\n else {\n      if (!writeAsArray) {\n        fieldSerializer.writeProperty(serializer,propertyValue);\n      }\n else {\n        fieldSerializer.writeValue(serializer,propertyValue);\n      }\n    }\n    commaFlag=true;\n  }\n  if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n    serializer.decrementIdent();\n    serializer.println();\n  }\n  out.append(endSeperator);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 368,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3923,
        "startLineNumber" : 120,
        "startColumnNumber" : 8,
        "endLineNumber" : 218,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  final char startSeperator=writeAsArray ? '[' : '{';\n  final char endSeperator=writeAsArray ? ']' : '}';\n  out.append(startSeperator);\n  if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n    serializer.incrementIndent();\n    serializer.println();\n  }\n  boolean commaFlag=false;\n  if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n    Class<?> objClass=object.getClass();\n    if (objClass != fieldType) {\n      out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n      serializer.write(object.getClass());\n      commaFlag=true;\n    }\n  }\n  char seperator=commaFlag ? ',' : '\\0';\n  char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n  commaFlag=newSeperator == ',';\n  for (int i=0; i < getters.length; ++i) {\n    FieldSerializer fieldSerializer=getters[i];\n    if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n      Field field=fieldSerializer.getField();\n      if (field != null) {\n        if (Modifier.isTransient(field.getModifiers())) {\n          continue;\n        }\n      }\n    }\n    if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n      continue;\n    }\n    Object propertyValue=fieldSerializer.getPropertyValue(object);\n    if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n      continue;\n    }\n    String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n    Object originalValue=propertyValue;\n    propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n    if (propertyValue == null && !writeAsArray) {\n      if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n        continue;\n      }\n    }\n    if (commaFlag) {\n      out.append(',');\n      if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n        serializer.println();\n      }\n    }\n    if (key != fieldSerializer.getName()) {\n      if (!writeAsArray) {\n        out.writeFieldName(key);\n      }\n      serializer.write(propertyValue);\n    }\n else     if (originalValue != propertyValue) {\n      if (!writeAsArray) {\n        fieldSerializer.writePrefix(serializer);\n      }\n      serializer.write(propertyValue);\n    }\n else {\n      if (!writeAsArray) {\n        fieldSerializer.writeProperty(serializer,propertyValue);\n      }\n else {\n        fieldSerializer.writeValue(serializer,propertyValue);\n      }\n    }\n    commaFlag=true;\n  }\n  if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n    serializer.decrementIdent();\n    serializer.println();\n  }\n  out.append(endSeperator);\n}\n catch (Exception e) {\n  throw new JSONException(\"write javaBean error\",e);\n}\n finally {\n  serializer.setContext(parent);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 387,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4762,
        "startLineNumber" : 89,
        "startColumnNumber" : 117,
        "endLineNumber" : 219,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SerializeWriter out=serializer.getWriter();\n  if (object == null) {\n    out.writeNull();\n    return;\n  }\n  if (serializer.containsReference(object)) {\n    writeReference(serializer,object);\n    return;\n  }\n  final FieldSerializer[] getters;\n  if (out.isEnabled(SerializerFeature.SortField)) {\n    getters=this.sortedGetters;\n  }\n else {\n    getters=this.getters;\n  }\n  SerialContext parent=serializer.getContext();\n  serializer.setContext(parent,object,fieldName);\n  boolean writeAsArray;\n  if (out.isEnabled(SerializerFeature.WriteJavaBeanAsArray)) {\n    writeAsArray=true;\n  }\n else {\n    writeAsArray=false;\n  }\n  try {\n    final char startSeperator=writeAsArray ? '[' : '{';\n    final char endSeperator=writeAsArray ? ']' : '}';\n    out.append(startSeperator);\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.incrementIndent();\n      serializer.println();\n    }\n    boolean commaFlag=false;\n    if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n      Class<?> objClass=object.getClass();\n      if (objClass != fieldType) {\n        out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n        serializer.write(object.getClass());\n        commaFlag=true;\n      }\n    }\n    char seperator=commaFlag ? ',' : '\\0';\n    char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n    commaFlag=newSeperator == ',';\n    for (int i=0; i < getters.length; ++i) {\n      FieldSerializer fieldSerializer=getters[i];\n      if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n        Field field=fieldSerializer.getField();\n        if (field != null) {\n          if (Modifier.isTransient(field.getModifiers())) {\n            continue;\n          }\n        }\n      }\n      if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n        continue;\n      }\n      Object propertyValue=fieldSerializer.getPropertyValue(object);\n      if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n        continue;\n      }\n      String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n      Object originalValue=propertyValue;\n      propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n      if (propertyValue == null && !writeAsArray) {\n        if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n          continue;\n        }\n      }\n      if (commaFlag) {\n        out.append(',');\n        if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n          serializer.println();\n        }\n      }\n      if (key != fieldSerializer.getName()) {\n        if (!writeAsArray) {\n          out.writeFieldName(key);\n        }\n        serializer.write(propertyValue);\n      }\n else       if (originalValue != propertyValue) {\n        if (!writeAsArray) {\n          fieldSerializer.writePrefix(serializer);\n        }\n        serializer.write(propertyValue);\n      }\n else {\n        if (!writeAsArray) {\n          fieldSerializer.writeProperty(serializer,propertyValue);\n        }\n else {\n          fieldSerializer.writeValue(serializer,propertyValue);\n        }\n      }\n      commaFlag=true;\n    }\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.decrementIdent();\n      serializer.println();\n    }\n    out.append(endSeperator);\n  }\n catch (  Exception e) {\n    throw new JSONException(\"write javaBean error\",e);\n  }\n finally {\n    serializer.setContext(parent);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 483,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4875,
        "startLineNumber" : 89,
        "startColumnNumber" : 4,
        "endLineNumber" : 219,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void write(JSONSerializer serializer,Object object,Object fieldName,Type fieldType) throws IOException {\n  SerializeWriter out=serializer.getWriter();\n  if (object == null) {\n    out.writeNull();\n    return;\n  }\n  if (serializer.containsReference(object)) {\n    writeReference(serializer,object);\n    return;\n  }\n  final FieldSerializer[] getters;\n  if (out.isEnabled(SerializerFeature.SortField)) {\n    getters=this.sortedGetters;\n  }\n else {\n    getters=this.getters;\n  }\n  SerialContext parent=serializer.getContext();\n  serializer.setContext(parent,object,fieldName);\n  boolean writeAsArray;\n  if (out.isEnabled(SerializerFeature.WriteJavaBeanAsArray)) {\n    writeAsArray=true;\n  }\n else {\n    writeAsArray=false;\n  }\n  try {\n    final char startSeperator=writeAsArray ? '[' : '{';\n    final char endSeperator=writeAsArray ? ']' : '}';\n    out.append(startSeperator);\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.incrementIndent();\n      serializer.println();\n    }\n    boolean commaFlag=false;\n    if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n      Class<?> objClass=object.getClass();\n      if (objClass != fieldType) {\n        out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n        serializer.write(object.getClass());\n        commaFlag=true;\n      }\n    }\n    char seperator=commaFlag ? ',' : '\\0';\n    char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n    commaFlag=newSeperator == ',';\n    for (int i=0; i < getters.length; ++i) {\n      FieldSerializer fieldSerializer=getters[i];\n      if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n        Field field=fieldSerializer.getField();\n        if (field != null) {\n          if (Modifier.isTransient(field.getModifiers())) {\n            continue;\n          }\n        }\n      }\n      if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n        continue;\n      }\n      Object propertyValue=fieldSerializer.getPropertyValue(object);\n      if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n        continue;\n      }\n      String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n      Object originalValue=propertyValue;\n      propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n      if (propertyValue == null && !writeAsArray) {\n        if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n          continue;\n        }\n      }\n      if (commaFlag) {\n        out.append(',');\n        if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n          serializer.println();\n        }\n      }\n      if (key != fieldSerializer.getName()) {\n        if (!writeAsArray) {\n          out.writeFieldName(key);\n        }\n        serializer.write(propertyValue);\n      }\n else       if (originalValue != propertyValue) {\n        if (!writeAsArray) {\n          fieldSerializer.writePrefix(serializer);\n        }\n        serializer.write(propertyValue);\n      }\n else {\n        if (!writeAsArray) {\n          fieldSerializer.writeProperty(serializer,propertyValue);\n        }\n else {\n          fieldSerializer.writeValue(serializer,propertyValue);\n        }\n      }\n      commaFlag=true;\n    }\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.decrementIdent();\n      serializer.println();\n    }\n    out.append(endSeperator);\n  }\n catch (  Exception e) {\n    throw new JSONException(\"write javaBean error\",e);\n  }\n finally {\n    serializer.setContext(parent);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 505,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 194,
        "startColumnNumber" : 24,
        "endLineNumber" : 194,
        "endColumnNumber" : 64
      },
      "nodeContext" : "fieldSerializer.writePrefix(serializer);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.alibaba.fastjson.serializer.JSONSerializer"
  }, {
    "nodeContext" : "serializer",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 196,
      "startColumnNumber" : 20,
      "endLineNumber" : 196,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 196,
        "startColumnNumber" : 20,
        "endLineNumber" : 196,
        "endColumnNumber" : 51
      },
      "nodeContext" : "serializer.write(propertyValue)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 196,
        "startColumnNumber" : 20,
        "endLineNumber" : 196,
        "endColumnNumber" : 52
      },
      "nodeContext" : "serializer.write(propertyValue);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 205,
        "startLineNumber" : 192,
        "startColumnNumber" : 59,
        "endLineNumber" : 197,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  if (!writeAsArray) {\n    fieldSerializer.writePrefix(serializer);\n  }\n  serializer.write(propertyValue);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 525,
        "startLineNumber" : 192,
        "startColumnNumber" : 23,
        "endLineNumber" : 203,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (originalValue != propertyValue) {\n  if (!writeAsArray) {\n    fieldSerializer.writePrefix(serializer);\n  }\n  serializer.write(propertyValue);\n}\n else {\n  if (!writeAsArray) {\n    fieldSerializer.writeProperty(serializer,propertyValue);\n  }\n else {\n    fieldSerializer.writeValue(serializer,propertyValue);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 37,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 758,
        "startLineNumber" : 187,
        "startColumnNumber" : 16,
        "endLineNumber" : 203,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (key != fieldSerializer.getName()) {\n  if (!writeAsArray) {\n    out.writeFieldName(key);\n  }\n  serializer.write(propertyValue);\n}\n else if (originalValue != propertyValue) {\n  if (!writeAsArray) {\n    fieldSerializer.writePrefix(serializer);\n  }\n  serializer.write(propertyValue);\n}\n else {\n  if (!writeAsArray) {\n    fieldSerializer.writeProperty(serializer,propertyValue);\n  }\n else {\n    fieldSerializer.writeValue(serializer,propertyValue);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 58,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 2479,
        "startLineNumber" : 146,
        "startColumnNumber" : 53,
        "endLineNumber" : 206,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  FieldSerializer fieldSerializer=getters[i];\n  if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n    Field field=fieldSerializer.getField();\n    if (field != null) {\n      if (Modifier.isTransient(field.getModifiers())) {\n        continue;\n      }\n    }\n  }\n  if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n    continue;\n  }\n  Object propertyValue=fieldSerializer.getPropertyValue(object);\n  if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n    continue;\n  }\n  String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n  Object originalValue=propertyValue;\n  propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n  if (propertyValue == null && !writeAsArray) {\n    if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n      continue;\n    }\n  }\n  if (commaFlag) {\n    out.append(',');\n    if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.println();\n    }\n  }\n  if (key != fieldSerializer.getName()) {\n    if (!writeAsArray) {\n      out.writeFieldName(key);\n    }\n    serializer.write(propertyValue);\n  }\n else   if (originalValue != propertyValue) {\n    if (!writeAsArray) {\n      fieldSerializer.writePrefix(serializer);\n    }\n    serializer.write(propertyValue);\n  }\n else {\n    if (!writeAsArray) {\n      fieldSerializer.writeProperty(serializer,propertyValue);\n    }\n else {\n      fieldSerializer.writeValue(serializer,propertyValue);\n    }\n  }\n  commaFlag=true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 212,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2520,
        "startLineNumber" : 146,
        "startColumnNumber" : 12,
        "endLineNumber" : 206,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int i=0; i < getters.length; ++i) {\n  FieldSerializer fieldSerializer=getters[i];\n  if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n    Field field=fieldSerializer.getField();\n    if (field != null) {\n      if (Modifier.isTransient(field.getModifiers())) {\n        continue;\n      }\n    }\n  }\n  if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n    continue;\n  }\n  Object propertyValue=fieldSerializer.getPropertyValue(object);\n  if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n    continue;\n  }\n  String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n  Object originalValue=propertyValue;\n  propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n  if (propertyValue == null && !writeAsArray) {\n    if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n      continue;\n    }\n  }\n  if (commaFlag) {\n    out.append(',');\n    if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.println();\n    }\n  }\n  if (key != fieldSerializer.getName()) {\n    if (!writeAsArray) {\n      out.writeFieldName(key);\n    }\n    serializer.write(propertyValue);\n  }\n else   if (originalValue != propertyValue) {\n    if (!writeAsArray) {\n      fieldSerializer.writePrefix(serializer);\n    }\n    serializer.write(propertyValue);\n  }\n else {\n    if (!writeAsArray) {\n      fieldSerializer.writeProperty(serializer,propertyValue);\n    }\n else {\n      fieldSerializer.writeValue(serializer,propertyValue);\n    }\n  }\n  commaFlag=true;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 225,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3756,
        "startLineNumber" : 120,
        "startColumnNumber" : 12,
        "endLineNumber" : 214,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final char startSeperator=writeAsArray ? '[' : '{';\n  final char endSeperator=writeAsArray ? ']' : '}';\n  out.append(startSeperator);\n  if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n    serializer.incrementIndent();\n    serializer.println();\n  }\n  boolean commaFlag=false;\n  if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n    Class<?> objClass=object.getClass();\n    if (objClass != fieldType) {\n      out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n      serializer.write(object.getClass());\n      commaFlag=true;\n    }\n  }\n  char seperator=commaFlag ? ',' : '\\0';\n  char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n  commaFlag=newSeperator == ',';\n  for (int i=0; i < getters.length; ++i) {\n    FieldSerializer fieldSerializer=getters[i];\n    if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n      Field field=fieldSerializer.getField();\n      if (field != null) {\n        if (Modifier.isTransient(field.getModifiers())) {\n          continue;\n        }\n      }\n    }\n    if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n      continue;\n    }\n    Object propertyValue=fieldSerializer.getPropertyValue(object);\n    if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n      continue;\n    }\n    String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n    Object originalValue=propertyValue;\n    propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n    if (propertyValue == null && !writeAsArray) {\n      if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n        continue;\n      }\n    }\n    if (commaFlag) {\n      out.append(',');\n      if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n        serializer.println();\n      }\n    }\n    if (key != fieldSerializer.getName()) {\n      if (!writeAsArray) {\n        out.writeFieldName(key);\n      }\n      serializer.write(propertyValue);\n    }\n else     if (originalValue != propertyValue) {\n      if (!writeAsArray) {\n        fieldSerializer.writePrefix(serializer);\n      }\n      serializer.write(propertyValue);\n    }\n else {\n      if (!writeAsArray) {\n        fieldSerializer.writeProperty(serializer,propertyValue);\n      }\n else {\n        fieldSerializer.writeValue(serializer,propertyValue);\n      }\n    }\n    commaFlag=true;\n  }\n  if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n    serializer.decrementIdent();\n    serializer.println();\n  }\n  out.append(endSeperator);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 368,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3923,
        "startLineNumber" : 120,
        "startColumnNumber" : 8,
        "endLineNumber" : 218,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  final char startSeperator=writeAsArray ? '[' : '{';\n  final char endSeperator=writeAsArray ? ']' : '}';\n  out.append(startSeperator);\n  if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n    serializer.incrementIndent();\n    serializer.println();\n  }\n  boolean commaFlag=false;\n  if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n    Class<?> objClass=object.getClass();\n    if (objClass != fieldType) {\n      out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n      serializer.write(object.getClass());\n      commaFlag=true;\n    }\n  }\n  char seperator=commaFlag ? ',' : '\\0';\n  char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n  commaFlag=newSeperator == ',';\n  for (int i=0; i < getters.length; ++i) {\n    FieldSerializer fieldSerializer=getters[i];\n    if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n      Field field=fieldSerializer.getField();\n      if (field != null) {\n        if (Modifier.isTransient(field.getModifiers())) {\n          continue;\n        }\n      }\n    }\n    if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n      continue;\n    }\n    Object propertyValue=fieldSerializer.getPropertyValue(object);\n    if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n      continue;\n    }\n    String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n    Object originalValue=propertyValue;\n    propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n    if (propertyValue == null && !writeAsArray) {\n      if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n        continue;\n      }\n    }\n    if (commaFlag) {\n      out.append(',');\n      if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n        serializer.println();\n      }\n    }\n    if (key != fieldSerializer.getName()) {\n      if (!writeAsArray) {\n        out.writeFieldName(key);\n      }\n      serializer.write(propertyValue);\n    }\n else     if (originalValue != propertyValue) {\n      if (!writeAsArray) {\n        fieldSerializer.writePrefix(serializer);\n      }\n      serializer.write(propertyValue);\n    }\n else {\n      if (!writeAsArray) {\n        fieldSerializer.writeProperty(serializer,propertyValue);\n      }\n else {\n        fieldSerializer.writeValue(serializer,propertyValue);\n      }\n    }\n    commaFlag=true;\n  }\n  if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n    serializer.decrementIdent();\n    serializer.println();\n  }\n  out.append(endSeperator);\n}\n catch (Exception e) {\n  throw new JSONException(\"write javaBean error\",e);\n}\n finally {\n  serializer.setContext(parent);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 387,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4762,
        "startLineNumber" : 89,
        "startColumnNumber" : 117,
        "endLineNumber" : 219,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SerializeWriter out=serializer.getWriter();\n  if (object == null) {\n    out.writeNull();\n    return;\n  }\n  if (serializer.containsReference(object)) {\n    writeReference(serializer,object);\n    return;\n  }\n  final FieldSerializer[] getters;\n  if (out.isEnabled(SerializerFeature.SortField)) {\n    getters=this.sortedGetters;\n  }\n else {\n    getters=this.getters;\n  }\n  SerialContext parent=serializer.getContext();\n  serializer.setContext(parent,object,fieldName);\n  boolean writeAsArray;\n  if (out.isEnabled(SerializerFeature.WriteJavaBeanAsArray)) {\n    writeAsArray=true;\n  }\n else {\n    writeAsArray=false;\n  }\n  try {\n    final char startSeperator=writeAsArray ? '[' : '{';\n    final char endSeperator=writeAsArray ? ']' : '}';\n    out.append(startSeperator);\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.incrementIndent();\n      serializer.println();\n    }\n    boolean commaFlag=false;\n    if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n      Class<?> objClass=object.getClass();\n      if (objClass != fieldType) {\n        out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n        serializer.write(object.getClass());\n        commaFlag=true;\n      }\n    }\n    char seperator=commaFlag ? ',' : '\\0';\n    char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n    commaFlag=newSeperator == ',';\n    for (int i=0; i < getters.length; ++i) {\n      FieldSerializer fieldSerializer=getters[i];\n      if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n        Field field=fieldSerializer.getField();\n        if (field != null) {\n          if (Modifier.isTransient(field.getModifiers())) {\n            continue;\n          }\n        }\n      }\n      if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n        continue;\n      }\n      Object propertyValue=fieldSerializer.getPropertyValue(object);\n      if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n        continue;\n      }\n      String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n      Object originalValue=propertyValue;\n      propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n      if (propertyValue == null && !writeAsArray) {\n        if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n          continue;\n        }\n      }\n      if (commaFlag) {\n        out.append(',');\n        if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n          serializer.println();\n        }\n      }\n      if (key != fieldSerializer.getName()) {\n        if (!writeAsArray) {\n          out.writeFieldName(key);\n        }\n        serializer.write(propertyValue);\n      }\n else       if (originalValue != propertyValue) {\n        if (!writeAsArray) {\n          fieldSerializer.writePrefix(serializer);\n        }\n        serializer.write(propertyValue);\n      }\n else {\n        if (!writeAsArray) {\n          fieldSerializer.writeProperty(serializer,propertyValue);\n        }\n else {\n          fieldSerializer.writeValue(serializer,propertyValue);\n        }\n      }\n      commaFlag=true;\n    }\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.decrementIdent();\n      serializer.println();\n    }\n    out.append(endSeperator);\n  }\n catch (  Exception e) {\n    throw new JSONException(\"write javaBean error\",e);\n  }\n finally {\n    serializer.setContext(parent);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 483,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4875,
        "startLineNumber" : 89,
        "startColumnNumber" : 4,
        "endLineNumber" : 219,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void write(JSONSerializer serializer,Object object,Object fieldName,Type fieldType) throws IOException {\n  SerializeWriter out=serializer.getWriter();\n  if (object == null) {\n    out.writeNull();\n    return;\n  }\n  if (serializer.containsReference(object)) {\n    writeReference(serializer,object);\n    return;\n  }\n  final FieldSerializer[] getters;\n  if (out.isEnabled(SerializerFeature.SortField)) {\n    getters=this.sortedGetters;\n  }\n else {\n    getters=this.getters;\n  }\n  SerialContext parent=serializer.getContext();\n  serializer.setContext(parent,object,fieldName);\n  boolean writeAsArray;\n  if (out.isEnabled(SerializerFeature.WriteJavaBeanAsArray)) {\n    writeAsArray=true;\n  }\n else {\n    writeAsArray=false;\n  }\n  try {\n    final char startSeperator=writeAsArray ? '[' : '{';\n    final char endSeperator=writeAsArray ? ']' : '}';\n    out.append(startSeperator);\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.incrementIndent();\n      serializer.println();\n    }\n    boolean commaFlag=false;\n    if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n      Class<?> objClass=object.getClass();\n      if (objClass != fieldType) {\n        out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n        serializer.write(object.getClass());\n        commaFlag=true;\n      }\n    }\n    char seperator=commaFlag ? ',' : '\\0';\n    char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n    commaFlag=newSeperator == ',';\n    for (int i=0; i < getters.length; ++i) {\n      FieldSerializer fieldSerializer=getters[i];\n      if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n        Field field=fieldSerializer.getField();\n        if (field != null) {\n          if (Modifier.isTransient(field.getModifiers())) {\n            continue;\n          }\n        }\n      }\n      if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n        continue;\n      }\n      Object propertyValue=fieldSerializer.getPropertyValue(object);\n      if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n        continue;\n      }\n      String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n      Object originalValue=propertyValue;\n      propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n      if (propertyValue == null && !writeAsArray) {\n        if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n          continue;\n        }\n      }\n      if (commaFlag) {\n        out.append(',');\n        if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n          serializer.println();\n        }\n      }\n      if (key != fieldSerializer.getName()) {\n        if (!writeAsArray) {\n          out.writeFieldName(key);\n        }\n        serializer.write(propertyValue);\n      }\n else       if (originalValue != propertyValue) {\n        if (!writeAsArray) {\n          fieldSerializer.writePrefix(serializer);\n        }\n        serializer.write(propertyValue);\n      }\n else {\n        if (!writeAsArray) {\n          fieldSerializer.writeProperty(serializer,propertyValue);\n        }\n else {\n          fieldSerializer.writeValue(serializer,propertyValue);\n        }\n      }\n      commaFlag=true;\n    }\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.decrementIdent();\n      serializer.println();\n    }\n    out.append(endSeperator);\n  }\n catch (  Exception e) {\n    throw new JSONException(\"write javaBean error\",e);\n  }\n finally {\n    serializer.setContext(parent);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 505,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 196,
        "startColumnNumber" : 20,
        "endLineNumber" : 196,
        "endColumnNumber" : 52
      },
      "nodeContext" : "serializer.write(propertyValue);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.alibaba.fastjson.serializer.JSONSerializer"
  }, {
    "nodeContext" : "serializer",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 199,
      "startColumnNumber" : 54,
      "endLineNumber" : 199,
      "endColumnNumber" : 64
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 199,
        "startColumnNumber" : 24,
        "endLineNumber" : 199,
        "endColumnNumber" : 80
      },
      "nodeContext" : "fieldSerializer.writeProperty(serializer,propertyValue)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 199,
        "startColumnNumber" : 24,
        "endLineNumber" : 199,
        "endColumnNumber" : 81
      },
      "nodeContext" : "fieldSerializer.writeProperty(serializer,propertyValue);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 107,
        "startLineNumber" : 198,
        "startColumnNumber" : 39,
        "endLineNumber" : 200,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  fieldSerializer.writeProperty(serializer,propertyValue);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 236,
        "startLineNumber" : 198,
        "startColumnNumber" : 20,
        "endLineNumber" : 202,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (!writeAsArray) {\n  fieldSerializer.writeProperty(serializer,propertyValue);\n}\n else {\n  fieldSerializer.writeValue(serializer,propertyValue);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 278,
        "startLineNumber" : 197,
        "startColumnNumber" : 23,
        "endLineNumber" : 203,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  if (!writeAsArray) {\n    fieldSerializer.writeProperty(serializer,propertyValue);\n  }\n else {\n    fieldSerializer.writeValue(serializer,propertyValue);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 525,
        "startLineNumber" : 192,
        "startColumnNumber" : 23,
        "endLineNumber" : 203,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (originalValue != propertyValue) {\n  if (!writeAsArray) {\n    fieldSerializer.writePrefix(serializer);\n  }\n  serializer.write(propertyValue);\n}\n else {\n  if (!writeAsArray) {\n    fieldSerializer.writeProperty(serializer,propertyValue);\n  }\n else {\n    fieldSerializer.writeValue(serializer,propertyValue);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 37,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 758,
        "startLineNumber" : 187,
        "startColumnNumber" : 16,
        "endLineNumber" : 203,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (key != fieldSerializer.getName()) {\n  if (!writeAsArray) {\n    out.writeFieldName(key);\n  }\n  serializer.write(propertyValue);\n}\n else if (originalValue != propertyValue) {\n  if (!writeAsArray) {\n    fieldSerializer.writePrefix(serializer);\n  }\n  serializer.write(propertyValue);\n}\n else {\n  if (!writeAsArray) {\n    fieldSerializer.writeProperty(serializer,propertyValue);\n  }\n else {\n    fieldSerializer.writeValue(serializer,propertyValue);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 58,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 2479,
        "startLineNumber" : 146,
        "startColumnNumber" : 53,
        "endLineNumber" : 206,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  FieldSerializer fieldSerializer=getters[i];\n  if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n    Field field=fieldSerializer.getField();\n    if (field != null) {\n      if (Modifier.isTransient(field.getModifiers())) {\n        continue;\n      }\n    }\n  }\n  if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n    continue;\n  }\n  Object propertyValue=fieldSerializer.getPropertyValue(object);\n  if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n    continue;\n  }\n  String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n  Object originalValue=propertyValue;\n  propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n  if (propertyValue == null && !writeAsArray) {\n    if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n      continue;\n    }\n  }\n  if (commaFlag) {\n    out.append(',');\n    if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.println();\n    }\n  }\n  if (key != fieldSerializer.getName()) {\n    if (!writeAsArray) {\n      out.writeFieldName(key);\n    }\n    serializer.write(propertyValue);\n  }\n else   if (originalValue != propertyValue) {\n    if (!writeAsArray) {\n      fieldSerializer.writePrefix(serializer);\n    }\n    serializer.write(propertyValue);\n  }\n else {\n    if (!writeAsArray) {\n      fieldSerializer.writeProperty(serializer,propertyValue);\n    }\n else {\n      fieldSerializer.writeValue(serializer,propertyValue);\n    }\n  }\n  commaFlag=true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 212,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2520,
        "startLineNumber" : 146,
        "startColumnNumber" : 12,
        "endLineNumber" : 206,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int i=0; i < getters.length; ++i) {\n  FieldSerializer fieldSerializer=getters[i];\n  if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n    Field field=fieldSerializer.getField();\n    if (field != null) {\n      if (Modifier.isTransient(field.getModifiers())) {\n        continue;\n      }\n    }\n  }\n  if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n    continue;\n  }\n  Object propertyValue=fieldSerializer.getPropertyValue(object);\n  if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n    continue;\n  }\n  String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n  Object originalValue=propertyValue;\n  propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n  if (propertyValue == null && !writeAsArray) {\n    if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n      continue;\n    }\n  }\n  if (commaFlag) {\n    out.append(',');\n    if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.println();\n    }\n  }\n  if (key != fieldSerializer.getName()) {\n    if (!writeAsArray) {\n      out.writeFieldName(key);\n    }\n    serializer.write(propertyValue);\n  }\n else   if (originalValue != propertyValue) {\n    if (!writeAsArray) {\n      fieldSerializer.writePrefix(serializer);\n    }\n    serializer.write(propertyValue);\n  }\n else {\n    if (!writeAsArray) {\n      fieldSerializer.writeProperty(serializer,propertyValue);\n    }\n else {\n      fieldSerializer.writeValue(serializer,propertyValue);\n    }\n  }\n  commaFlag=true;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 225,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3756,
        "startLineNumber" : 120,
        "startColumnNumber" : 12,
        "endLineNumber" : 214,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final char startSeperator=writeAsArray ? '[' : '{';\n  final char endSeperator=writeAsArray ? ']' : '}';\n  out.append(startSeperator);\n  if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n    serializer.incrementIndent();\n    serializer.println();\n  }\n  boolean commaFlag=false;\n  if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n    Class<?> objClass=object.getClass();\n    if (objClass != fieldType) {\n      out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n      serializer.write(object.getClass());\n      commaFlag=true;\n    }\n  }\n  char seperator=commaFlag ? ',' : '\\0';\n  char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n  commaFlag=newSeperator == ',';\n  for (int i=0; i < getters.length; ++i) {\n    FieldSerializer fieldSerializer=getters[i];\n    if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n      Field field=fieldSerializer.getField();\n      if (field != null) {\n        if (Modifier.isTransient(field.getModifiers())) {\n          continue;\n        }\n      }\n    }\n    if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n      continue;\n    }\n    Object propertyValue=fieldSerializer.getPropertyValue(object);\n    if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n      continue;\n    }\n    String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n    Object originalValue=propertyValue;\n    propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n    if (propertyValue == null && !writeAsArray) {\n      if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n        continue;\n      }\n    }\n    if (commaFlag) {\n      out.append(',');\n      if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n        serializer.println();\n      }\n    }\n    if (key != fieldSerializer.getName()) {\n      if (!writeAsArray) {\n        out.writeFieldName(key);\n      }\n      serializer.write(propertyValue);\n    }\n else     if (originalValue != propertyValue) {\n      if (!writeAsArray) {\n        fieldSerializer.writePrefix(serializer);\n      }\n      serializer.write(propertyValue);\n    }\n else {\n      if (!writeAsArray) {\n        fieldSerializer.writeProperty(serializer,propertyValue);\n      }\n else {\n        fieldSerializer.writeValue(serializer,propertyValue);\n      }\n    }\n    commaFlag=true;\n  }\n  if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n    serializer.decrementIdent();\n    serializer.println();\n  }\n  out.append(endSeperator);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 368,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3923,
        "startLineNumber" : 120,
        "startColumnNumber" : 8,
        "endLineNumber" : 218,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  final char startSeperator=writeAsArray ? '[' : '{';\n  final char endSeperator=writeAsArray ? ']' : '}';\n  out.append(startSeperator);\n  if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n    serializer.incrementIndent();\n    serializer.println();\n  }\n  boolean commaFlag=false;\n  if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n    Class<?> objClass=object.getClass();\n    if (objClass != fieldType) {\n      out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n      serializer.write(object.getClass());\n      commaFlag=true;\n    }\n  }\n  char seperator=commaFlag ? ',' : '\\0';\n  char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n  commaFlag=newSeperator == ',';\n  for (int i=0; i < getters.length; ++i) {\n    FieldSerializer fieldSerializer=getters[i];\n    if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n      Field field=fieldSerializer.getField();\n      if (field != null) {\n        if (Modifier.isTransient(field.getModifiers())) {\n          continue;\n        }\n      }\n    }\n    if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n      continue;\n    }\n    Object propertyValue=fieldSerializer.getPropertyValue(object);\n    if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n      continue;\n    }\n    String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n    Object originalValue=propertyValue;\n    propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n    if (propertyValue == null && !writeAsArray) {\n      if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n        continue;\n      }\n    }\n    if (commaFlag) {\n      out.append(',');\n      if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n        serializer.println();\n      }\n    }\n    if (key != fieldSerializer.getName()) {\n      if (!writeAsArray) {\n        out.writeFieldName(key);\n      }\n      serializer.write(propertyValue);\n    }\n else     if (originalValue != propertyValue) {\n      if (!writeAsArray) {\n        fieldSerializer.writePrefix(serializer);\n      }\n      serializer.write(propertyValue);\n    }\n else {\n      if (!writeAsArray) {\n        fieldSerializer.writeProperty(serializer,propertyValue);\n      }\n else {\n        fieldSerializer.writeValue(serializer,propertyValue);\n      }\n    }\n    commaFlag=true;\n  }\n  if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n    serializer.decrementIdent();\n    serializer.println();\n  }\n  out.append(endSeperator);\n}\n catch (Exception e) {\n  throw new JSONException(\"write javaBean error\",e);\n}\n finally {\n  serializer.setContext(parent);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 387,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4762,
        "startLineNumber" : 89,
        "startColumnNumber" : 117,
        "endLineNumber" : 219,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SerializeWriter out=serializer.getWriter();\n  if (object == null) {\n    out.writeNull();\n    return;\n  }\n  if (serializer.containsReference(object)) {\n    writeReference(serializer,object);\n    return;\n  }\n  final FieldSerializer[] getters;\n  if (out.isEnabled(SerializerFeature.SortField)) {\n    getters=this.sortedGetters;\n  }\n else {\n    getters=this.getters;\n  }\n  SerialContext parent=serializer.getContext();\n  serializer.setContext(parent,object,fieldName);\n  boolean writeAsArray;\n  if (out.isEnabled(SerializerFeature.WriteJavaBeanAsArray)) {\n    writeAsArray=true;\n  }\n else {\n    writeAsArray=false;\n  }\n  try {\n    final char startSeperator=writeAsArray ? '[' : '{';\n    final char endSeperator=writeAsArray ? ']' : '}';\n    out.append(startSeperator);\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.incrementIndent();\n      serializer.println();\n    }\n    boolean commaFlag=false;\n    if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n      Class<?> objClass=object.getClass();\n      if (objClass != fieldType) {\n        out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n        serializer.write(object.getClass());\n        commaFlag=true;\n      }\n    }\n    char seperator=commaFlag ? ',' : '\\0';\n    char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n    commaFlag=newSeperator == ',';\n    for (int i=0; i < getters.length; ++i) {\n      FieldSerializer fieldSerializer=getters[i];\n      if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n        Field field=fieldSerializer.getField();\n        if (field != null) {\n          if (Modifier.isTransient(field.getModifiers())) {\n            continue;\n          }\n        }\n      }\n      if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n        continue;\n      }\n      Object propertyValue=fieldSerializer.getPropertyValue(object);\n      if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n        continue;\n      }\n      String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n      Object originalValue=propertyValue;\n      propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n      if (propertyValue == null && !writeAsArray) {\n        if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n          continue;\n        }\n      }\n      if (commaFlag) {\n        out.append(',');\n        if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n          serializer.println();\n        }\n      }\n      if (key != fieldSerializer.getName()) {\n        if (!writeAsArray) {\n          out.writeFieldName(key);\n        }\n        serializer.write(propertyValue);\n      }\n else       if (originalValue != propertyValue) {\n        if (!writeAsArray) {\n          fieldSerializer.writePrefix(serializer);\n        }\n        serializer.write(propertyValue);\n      }\n else {\n        if (!writeAsArray) {\n          fieldSerializer.writeProperty(serializer,propertyValue);\n        }\n else {\n          fieldSerializer.writeValue(serializer,propertyValue);\n        }\n      }\n      commaFlag=true;\n    }\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.decrementIdent();\n      serializer.println();\n    }\n    out.append(endSeperator);\n  }\n catch (  Exception e) {\n    throw new JSONException(\"write javaBean error\",e);\n  }\n finally {\n    serializer.setContext(parent);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 483,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4875,
        "startLineNumber" : 89,
        "startColumnNumber" : 4,
        "endLineNumber" : 219,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void write(JSONSerializer serializer,Object object,Object fieldName,Type fieldType) throws IOException {\n  SerializeWriter out=serializer.getWriter();\n  if (object == null) {\n    out.writeNull();\n    return;\n  }\n  if (serializer.containsReference(object)) {\n    writeReference(serializer,object);\n    return;\n  }\n  final FieldSerializer[] getters;\n  if (out.isEnabled(SerializerFeature.SortField)) {\n    getters=this.sortedGetters;\n  }\n else {\n    getters=this.getters;\n  }\n  SerialContext parent=serializer.getContext();\n  serializer.setContext(parent,object,fieldName);\n  boolean writeAsArray;\n  if (out.isEnabled(SerializerFeature.WriteJavaBeanAsArray)) {\n    writeAsArray=true;\n  }\n else {\n    writeAsArray=false;\n  }\n  try {\n    final char startSeperator=writeAsArray ? '[' : '{';\n    final char endSeperator=writeAsArray ? ']' : '}';\n    out.append(startSeperator);\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.incrementIndent();\n      serializer.println();\n    }\n    boolean commaFlag=false;\n    if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n      Class<?> objClass=object.getClass();\n      if (objClass != fieldType) {\n        out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n        serializer.write(object.getClass());\n        commaFlag=true;\n      }\n    }\n    char seperator=commaFlag ? ',' : '\\0';\n    char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n    commaFlag=newSeperator == ',';\n    for (int i=0; i < getters.length; ++i) {\n      FieldSerializer fieldSerializer=getters[i];\n      if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n        Field field=fieldSerializer.getField();\n        if (field != null) {\n          if (Modifier.isTransient(field.getModifiers())) {\n            continue;\n          }\n        }\n      }\n      if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n        continue;\n      }\n      Object propertyValue=fieldSerializer.getPropertyValue(object);\n      if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n        continue;\n      }\n      String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n      Object originalValue=propertyValue;\n      propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n      if (propertyValue == null && !writeAsArray) {\n        if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n          continue;\n        }\n      }\n      if (commaFlag) {\n        out.append(',');\n        if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n          serializer.println();\n        }\n      }\n      if (key != fieldSerializer.getName()) {\n        if (!writeAsArray) {\n          out.writeFieldName(key);\n        }\n        serializer.write(propertyValue);\n      }\n else       if (originalValue != propertyValue) {\n        if (!writeAsArray) {\n          fieldSerializer.writePrefix(serializer);\n        }\n        serializer.write(propertyValue);\n      }\n else {\n        if (!writeAsArray) {\n          fieldSerializer.writeProperty(serializer,propertyValue);\n        }\n else {\n          fieldSerializer.writeValue(serializer,propertyValue);\n        }\n      }\n      commaFlag=true;\n    }\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.decrementIdent();\n      serializer.println();\n    }\n    out.append(endSeperator);\n  }\n catch (  Exception e) {\n    throw new JSONException(\"write javaBean error\",e);\n  }\n finally {\n    serializer.setContext(parent);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 505,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 199,
        "startColumnNumber" : 24,
        "endLineNumber" : 199,
        "endColumnNumber" : 81
      },
      "nodeContext" : "fieldSerializer.writeProperty(serializer,propertyValue);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.alibaba.fastjson.serializer.JSONSerializer"
  }, {
    "nodeContext" : "serializer",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 201,
      "startColumnNumber" : 51,
      "endLineNumber" : 201,
      "endColumnNumber" : 61
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 201,
        "startColumnNumber" : 24,
        "endLineNumber" : 201,
        "endColumnNumber" : 77
      },
      "nodeContext" : "fieldSerializer.writeValue(serializer,propertyValue)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 201,
        "startColumnNumber" : 24,
        "endLineNumber" : 201,
        "endColumnNumber" : 78
      },
      "nodeContext" : "fieldSerializer.writeValue(serializer,propertyValue);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 104,
        "startLineNumber" : 200,
        "startColumnNumber" : 27,
        "endLineNumber" : 202,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  fieldSerializer.writeValue(serializer,propertyValue);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 236,
        "startLineNumber" : 198,
        "startColumnNumber" : 20,
        "endLineNumber" : 202,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (!writeAsArray) {\n  fieldSerializer.writeProperty(serializer,propertyValue);\n}\n else {\n  fieldSerializer.writeValue(serializer,propertyValue);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 278,
        "startLineNumber" : 197,
        "startColumnNumber" : 23,
        "endLineNumber" : 203,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  if (!writeAsArray) {\n    fieldSerializer.writeProperty(serializer,propertyValue);\n  }\n else {\n    fieldSerializer.writeValue(serializer,propertyValue);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 525,
        "startLineNumber" : 192,
        "startColumnNumber" : 23,
        "endLineNumber" : 203,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (originalValue != propertyValue) {\n  if (!writeAsArray) {\n    fieldSerializer.writePrefix(serializer);\n  }\n  serializer.write(propertyValue);\n}\n else {\n  if (!writeAsArray) {\n    fieldSerializer.writeProperty(serializer,propertyValue);\n  }\n else {\n    fieldSerializer.writeValue(serializer,propertyValue);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 37,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 758,
        "startLineNumber" : 187,
        "startColumnNumber" : 16,
        "endLineNumber" : 203,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (key != fieldSerializer.getName()) {\n  if (!writeAsArray) {\n    out.writeFieldName(key);\n  }\n  serializer.write(propertyValue);\n}\n else if (originalValue != propertyValue) {\n  if (!writeAsArray) {\n    fieldSerializer.writePrefix(serializer);\n  }\n  serializer.write(propertyValue);\n}\n else {\n  if (!writeAsArray) {\n    fieldSerializer.writeProperty(serializer,propertyValue);\n  }\n else {\n    fieldSerializer.writeValue(serializer,propertyValue);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 58,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 2479,
        "startLineNumber" : 146,
        "startColumnNumber" : 53,
        "endLineNumber" : 206,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  FieldSerializer fieldSerializer=getters[i];\n  if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n    Field field=fieldSerializer.getField();\n    if (field != null) {\n      if (Modifier.isTransient(field.getModifiers())) {\n        continue;\n      }\n    }\n  }\n  if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n    continue;\n  }\n  Object propertyValue=fieldSerializer.getPropertyValue(object);\n  if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n    continue;\n  }\n  String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n  Object originalValue=propertyValue;\n  propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n  if (propertyValue == null && !writeAsArray) {\n    if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n      continue;\n    }\n  }\n  if (commaFlag) {\n    out.append(',');\n    if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.println();\n    }\n  }\n  if (key != fieldSerializer.getName()) {\n    if (!writeAsArray) {\n      out.writeFieldName(key);\n    }\n    serializer.write(propertyValue);\n  }\n else   if (originalValue != propertyValue) {\n    if (!writeAsArray) {\n      fieldSerializer.writePrefix(serializer);\n    }\n    serializer.write(propertyValue);\n  }\n else {\n    if (!writeAsArray) {\n      fieldSerializer.writeProperty(serializer,propertyValue);\n    }\n else {\n      fieldSerializer.writeValue(serializer,propertyValue);\n    }\n  }\n  commaFlag=true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 212,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2520,
        "startLineNumber" : 146,
        "startColumnNumber" : 12,
        "endLineNumber" : 206,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int i=0; i < getters.length; ++i) {\n  FieldSerializer fieldSerializer=getters[i];\n  if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n    Field field=fieldSerializer.getField();\n    if (field != null) {\n      if (Modifier.isTransient(field.getModifiers())) {\n        continue;\n      }\n    }\n  }\n  if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n    continue;\n  }\n  Object propertyValue=fieldSerializer.getPropertyValue(object);\n  if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n    continue;\n  }\n  String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n  Object originalValue=propertyValue;\n  propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n  if (propertyValue == null && !writeAsArray) {\n    if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n      continue;\n    }\n  }\n  if (commaFlag) {\n    out.append(',');\n    if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.println();\n    }\n  }\n  if (key != fieldSerializer.getName()) {\n    if (!writeAsArray) {\n      out.writeFieldName(key);\n    }\n    serializer.write(propertyValue);\n  }\n else   if (originalValue != propertyValue) {\n    if (!writeAsArray) {\n      fieldSerializer.writePrefix(serializer);\n    }\n    serializer.write(propertyValue);\n  }\n else {\n    if (!writeAsArray) {\n      fieldSerializer.writeProperty(serializer,propertyValue);\n    }\n else {\n      fieldSerializer.writeValue(serializer,propertyValue);\n    }\n  }\n  commaFlag=true;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 225,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3756,
        "startLineNumber" : 120,
        "startColumnNumber" : 12,
        "endLineNumber" : 214,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final char startSeperator=writeAsArray ? '[' : '{';\n  final char endSeperator=writeAsArray ? ']' : '}';\n  out.append(startSeperator);\n  if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n    serializer.incrementIndent();\n    serializer.println();\n  }\n  boolean commaFlag=false;\n  if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n    Class<?> objClass=object.getClass();\n    if (objClass != fieldType) {\n      out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n      serializer.write(object.getClass());\n      commaFlag=true;\n    }\n  }\n  char seperator=commaFlag ? ',' : '\\0';\n  char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n  commaFlag=newSeperator == ',';\n  for (int i=0; i < getters.length; ++i) {\n    FieldSerializer fieldSerializer=getters[i];\n    if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n      Field field=fieldSerializer.getField();\n      if (field != null) {\n        if (Modifier.isTransient(field.getModifiers())) {\n          continue;\n        }\n      }\n    }\n    if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n      continue;\n    }\n    Object propertyValue=fieldSerializer.getPropertyValue(object);\n    if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n      continue;\n    }\n    String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n    Object originalValue=propertyValue;\n    propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n    if (propertyValue == null && !writeAsArray) {\n      if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n        continue;\n      }\n    }\n    if (commaFlag) {\n      out.append(',');\n      if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n        serializer.println();\n      }\n    }\n    if (key != fieldSerializer.getName()) {\n      if (!writeAsArray) {\n        out.writeFieldName(key);\n      }\n      serializer.write(propertyValue);\n    }\n else     if (originalValue != propertyValue) {\n      if (!writeAsArray) {\n        fieldSerializer.writePrefix(serializer);\n      }\n      serializer.write(propertyValue);\n    }\n else {\n      if (!writeAsArray) {\n        fieldSerializer.writeProperty(serializer,propertyValue);\n      }\n else {\n        fieldSerializer.writeValue(serializer,propertyValue);\n      }\n    }\n    commaFlag=true;\n  }\n  if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n    serializer.decrementIdent();\n    serializer.println();\n  }\n  out.append(endSeperator);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 368,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3923,
        "startLineNumber" : 120,
        "startColumnNumber" : 8,
        "endLineNumber" : 218,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  final char startSeperator=writeAsArray ? '[' : '{';\n  final char endSeperator=writeAsArray ? ']' : '}';\n  out.append(startSeperator);\n  if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n    serializer.incrementIndent();\n    serializer.println();\n  }\n  boolean commaFlag=false;\n  if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n    Class<?> objClass=object.getClass();\n    if (objClass != fieldType) {\n      out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n      serializer.write(object.getClass());\n      commaFlag=true;\n    }\n  }\n  char seperator=commaFlag ? ',' : '\\0';\n  char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n  commaFlag=newSeperator == ',';\n  for (int i=0; i < getters.length; ++i) {\n    FieldSerializer fieldSerializer=getters[i];\n    if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n      Field field=fieldSerializer.getField();\n      if (field != null) {\n        if (Modifier.isTransient(field.getModifiers())) {\n          continue;\n        }\n      }\n    }\n    if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n      continue;\n    }\n    Object propertyValue=fieldSerializer.getPropertyValue(object);\n    if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n      continue;\n    }\n    String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n    Object originalValue=propertyValue;\n    propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n    if (propertyValue == null && !writeAsArray) {\n      if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n        continue;\n      }\n    }\n    if (commaFlag) {\n      out.append(',');\n      if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n        serializer.println();\n      }\n    }\n    if (key != fieldSerializer.getName()) {\n      if (!writeAsArray) {\n        out.writeFieldName(key);\n      }\n      serializer.write(propertyValue);\n    }\n else     if (originalValue != propertyValue) {\n      if (!writeAsArray) {\n        fieldSerializer.writePrefix(serializer);\n      }\n      serializer.write(propertyValue);\n    }\n else {\n      if (!writeAsArray) {\n        fieldSerializer.writeProperty(serializer,propertyValue);\n      }\n else {\n        fieldSerializer.writeValue(serializer,propertyValue);\n      }\n    }\n    commaFlag=true;\n  }\n  if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n    serializer.decrementIdent();\n    serializer.println();\n  }\n  out.append(endSeperator);\n}\n catch (Exception e) {\n  throw new JSONException(\"write javaBean error\",e);\n}\n finally {\n  serializer.setContext(parent);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 387,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4762,
        "startLineNumber" : 89,
        "startColumnNumber" : 117,
        "endLineNumber" : 219,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SerializeWriter out=serializer.getWriter();\n  if (object == null) {\n    out.writeNull();\n    return;\n  }\n  if (serializer.containsReference(object)) {\n    writeReference(serializer,object);\n    return;\n  }\n  final FieldSerializer[] getters;\n  if (out.isEnabled(SerializerFeature.SortField)) {\n    getters=this.sortedGetters;\n  }\n else {\n    getters=this.getters;\n  }\n  SerialContext parent=serializer.getContext();\n  serializer.setContext(parent,object,fieldName);\n  boolean writeAsArray;\n  if (out.isEnabled(SerializerFeature.WriteJavaBeanAsArray)) {\n    writeAsArray=true;\n  }\n else {\n    writeAsArray=false;\n  }\n  try {\n    final char startSeperator=writeAsArray ? '[' : '{';\n    final char endSeperator=writeAsArray ? ']' : '}';\n    out.append(startSeperator);\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.incrementIndent();\n      serializer.println();\n    }\n    boolean commaFlag=false;\n    if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n      Class<?> objClass=object.getClass();\n      if (objClass != fieldType) {\n        out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n        serializer.write(object.getClass());\n        commaFlag=true;\n      }\n    }\n    char seperator=commaFlag ? ',' : '\\0';\n    char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n    commaFlag=newSeperator == ',';\n    for (int i=0; i < getters.length; ++i) {\n      FieldSerializer fieldSerializer=getters[i];\n      if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n        Field field=fieldSerializer.getField();\n        if (field != null) {\n          if (Modifier.isTransient(field.getModifiers())) {\n            continue;\n          }\n        }\n      }\n      if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n        continue;\n      }\n      Object propertyValue=fieldSerializer.getPropertyValue(object);\n      if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n        continue;\n      }\n      String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n      Object originalValue=propertyValue;\n      propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n      if (propertyValue == null && !writeAsArray) {\n        if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n          continue;\n        }\n      }\n      if (commaFlag) {\n        out.append(',');\n        if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n          serializer.println();\n        }\n      }\n      if (key != fieldSerializer.getName()) {\n        if (!writeAsArray) {\n          out.writeFieldName(key);\n        }\n        serializer.write(propertyValue);\n      }\n else       if (originalValue != propertyValue) {\n        if (!writeAsArray) {\n          fieldSerializer.writePrefix(serializer);\n        }\n        serializer.write(propertyValue);\n      }\n else {\n        if (!writeAsArray) {\n          fieldSerializer.writeProperty(serializer,propertyValue);\n        }\n else {\n          fieldSerializer.writeValue(serializer,propertyValue);\n        }\n      }\n      commaFlag=true;\n    }\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.decrementIdent();\n      serializer.println();\n    }\n    out.append(endSeperator);\n  }\n catch (  Exception e) {\n    throw new JSONException(\"write javaBean error\",e);\n  }\n finally {\n    serializer.setContext(parent);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 483,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4875,
        "startLineNumber" : 89,
        "startColumnNumber" : 4,
        "endLineNumber" : 219,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void write(JSONSerializer serializer,Object object,Object fieldName,Type fieldType) throws IOException {\n  SerializeWriter out=serializer.getWriter();\n  if (object == null) {\n    out.writeNull();\n    return;\n  }\n  if (serializer.containsReference(object)) {\n    writeReference(serializer,object);\n    return;\n  }\n  final FieldSerializer[] getters;\n  if (out.isEnabled(SerializerFeature.SortField)) {\n    getters=this.sortedGetters;\n  }\n else {\n    getters=this.getters;\n  }\n  SerialContext parent=serializer.getContext();\n  serializer.setContext(parent,object,fieldName);\n  boolean writeAsArray;\n  if (out.isEnabled(SerializerFeature.WriteJavaBeanAsArray)) {\n    writeAsArray=true;\n  }\n else {\n    writeAsArray=false;\n  }\n  try {\n    final char startSeperator=writeAsArray ? '[' : '{';\n    final char endSeperator=writeAsArray ? ']' : '}';\n    out.append(startSeperator);\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.incrementIndent();\n      serializer.println();\n    }\n    boolean commaFlag=false;\n    if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n      Class<?> objClass=object.getClass();\n      if (objClass != fieldType) {\n        out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n        serializer.write(object.getClass());\n        commaFlag=true;\n      }\n    }\n    char seperator=commaFlag ? ',' : '\\0';\n    char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n    commaFlag=newSeperator == ',';\n    for (int i=0; i < getters.length; ++i) {\n      FieldSerializer fieldSerializer=getters[i];\n      if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n        Field field=fieldSerializer.getField();\n        if (field != null) {\n          if (Modifier.isTransient(field.getModifiers())) {\n            continue;\n          }\n        }\n      }\n      if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n        continue;\n      }\n      Object propertyValue=fieldSerializer.getPropertyValue(object);\n      if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n        continue;\n      }\n      String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n      Object originalValue=propertyValue;\n      propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n      if (propertyValue == null && !writeAsArray) {\n        if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n          continue;\n        }\n      }\n      if (commaFlag) {\n        out.append(',');\n        if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n          serializer.println();\n        }\n      }\n      if (key != fieldSerializer.getName()) {\n        if (!writeAsArray) {\n          out.writeFieldName(key);\n        }\n        serializer.write(propertyValue);\n      }\n else       if (originalValue != propertyValue) {\n        if (!writeAsArray) {\n          fieldSerializer.writePrefix(serializer);\n        }\n        serializer.write(propertyValue);\n      }\n else {\n        if (!writeAsArray) {\n          fieldSerializer.writeProperty(serializer,propertyValue);\n        }\n else {\n          fieldSerializer.writeValue(serializer,propertyValue);\n        }\n      }\n      commaFlag=true;\n    }\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.decrementIdent();\n      serializer.println();\n    }\n    out.append(endSeperator);\n  }\n catch (  Exception e) {\n    throw new JSONException(\"write javaBean error\",e);\n  }\n finally {\n    serializer.setContext(parent);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 505,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 201,
        "startColumnNumber" : 24,
        "endLineNumber" : 201,
        "endColumnNumber" : 78
      },
      "nodeContext" : "fieldSerializer.writeValue(serializer,propertyValue);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.alibaba.fastjson.serializer.JSONSerializer"
  }, {
    "nodeContext" : "serializer",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 209,
      "startColumnNumber" : 16,
      "endLineNumber" : 209,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 209,
        "startColumnNumber" : 16,
        "endLineNumber" : 209,
        "endColumnNumber" : 43
      },
      "nodeContext" : "serializer.decrementIdent()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 209,
        "startColumnNumber" : 16,
        "endLineNumber" : 209,
        "endColumnNumber" : 44
      },
      "nodeContext" : "serializer.decrementIdent();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 101,
        "startLineNumber" : 208,
        "startColumnNumber" : 85,
        "endLineNumber" : 211,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  serializer.decrementIdent();\n  serializer.println();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 174,
        "startLineNumber" : 208,
        "startColumnNumber" : 12,
        "endLineNumber" : 211,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n  serializer.decrementIdent();\n  serializer.println();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 22,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3756,
        "startLineNumber" : 120,
        "startColumnNumber" : 12,
        "endLineNumber" : 214,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final char startSeperator=writeAsArray ? '[' : '{';\n  final char endSeperator=writeAsArray ? ']' : '}';\n  out.append(startSeperator);\n  if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n    serializer.incrementIndent();\n    serializer.println();\n  }\n  boolean commaFlag=false;\n  if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n    Class<?> objClass=object.getClass();\n    if (objClass != fieldType) {\n      out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n      serializer.write(object.getClass());\n      commaFlag=true;\n    }\n  }\n  char seperator=commaFlag ? ',' : '\\0';\n  char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n  commaFlag=newSeperator == ',';\n  for (int i=0; i < getters.length; ++i) {\n    FieldSerializer fieldSerializer=getters[i];\n    if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n      Field field=fieldSerializer.getField();\n      if (field != null) {\n        if (Modifier.isTransient(field.getModifiers())) {\n          continue;\n        }\n      }\n    }\n    if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n      continue;\n    }\n    Object propertyValue=fieldSerializer.getPropertyValue(object);\n    if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n      continue;\n    }\n    String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n    Object originalValue=propertyValue;\n    propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n    if (propertyValue == null && !writeAsArray) {\n      if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n        continue;\n      }\n    }\n    if (commaFlag) {\n      out.append(',');\n      if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n        serializer.println();\n      }\n    }\n    if (key != fieldSerializer.getName()) {\n      if (!writeAsArray) {\n        out.writeFieldName(key);\n      }\n      serializer.write(propertyValue);\n    }\n else     if (originalValue != propertyValue) {\n      if (!writeAsArray) {\n        fieldSerializer.writePrefix(serializer);\n      }\n      serializer.write(propertyValue);\n    }\n else {\n      if (!writeAsArray) {\n        fieldSerializer.writeProperty(serializer,propertyValue);\n      }\n else {\n        fieldSerializer.writeValue(serializer,propertyValue);\n      }\n    }\n    commaFlag=true;\n  }\n  if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n    serializer.decrementIdent();\n    serializer.println();\n  }\n  out.append(endSeperator);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 368,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3923,
        "startLineNumber" : 120,
        "startColumnNumber" : 8,
        "endLineNumber" : 218,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  final char startSeperator=writeAsArray ? '[' : '{';\n  final char endSeperator=writeAsArray ? ']' : '}';\n  out.append(startSeperator);\n  if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n    serializer.incrementIndent();\n    serializer.println();\n  }\n  boolean commaFlag=false;\n  if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n    Class<?> objClass=object.getClass();\n    if (objClass != fieldType) {\n      out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n      serializer.write(object.getClass());\n      commaFlag=true;\n    }\n  }\n  char seperator=commaFlag ? ',' : '\\0';\n  char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n  commaFlag=newSeperator == ',';\n  for (int i=0; i < getters.length; ++i) {\n    FieldSerializer fieldSerializer=getters[i];\n    if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n      Field field=fieldSerializer.getField();\n      if (field != null) {\n        if (Modifier.isTransient(field.getModifiers())) {\n          continue;\n        }\n      }\n    }\n    if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n      continue;\n    }\n    Object propertyValue=fieldSerializer.getPropertyValue(object);\n    if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n      continue;\n    }\n    String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n    Object originalValue=propertyValue;\n    propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n    if (propertyValue == null && !writeAsArray) {\n      if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n        continue;\n      }\n    }\n    if (commaFlag) {\n      out.append(',');\n      if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n        serializer.println();\n      }\n    }\n    if (key != fieldSerializer.getName()) {\n      if (!writeAsArray) {\n        out.writeFieldName(key);\n      }\n      serializer.write(propertyValue);\n    }\n else     if (originalValue != propertyValue) {\n      if (!writeAsArray) {\n        fieldSerializer.writePrefix(serializer);\n      }\n      serializer.write(propertyValue);\n    }\n else {\n      if (!writeAsArray) {\n        fieldSerializer.writeProperty(serializer,propertyValue);\n      }\n else {\n        fieldSerializer.writeValue(serializer,propertyValue);\n      }\n    }\n    commaFlag=true;\n  }\n  if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n    serializer.decrementIdent();\n    serializer.println();\n  }\n  out.append(endSeperator);\n}\n catch (Exception e) {\n  throw new JSONException(\"write javaBean error\",e);\n}\n finally {\n  serializer.setContext(parent);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 387,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4762,
        "startLineNumber" : 89,
        "startColumnNumber" : 117,
        "endLineNumber" : 219,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SerializeWriter out=serializer.getWriter();\n  if (object == null) {\n    out.writeNull();\n    return;\n  }\n  if (serializer.containsReference(object)) {\n    writeReference(serializer,object);\n    return;\n  }\n  final FieldSerializer[] getters;\n  if (out.isEnabled(SerializerFeature.SortField)) {\n    getters=this.sortedGetters;\n  }\n else {\n    getters=this.getters;\n  }\n  SerialContext parent=serializer.getContext();\n  serializer.setContext(parent,object,fieldName);\n  boolean writeAsArray;\n  if (out.isEnabled(SerializerFeature.WriteJavaBeanAsArray)) {\n    writeAsArray=true;\n  }\n else {\n    writeAsArray=false;\n  }\n  try {\n    final char startSeperator=writeAsArray ? '[' : '{';\n    final char endSeperator=writeAsArray ? ']' : '}';\n    out.append(startSeperator);\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.incrementIndent();\n      serializer.println();\n    }\n    boolean commaFlag=false;\n    if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n      Class<?> objClass=object.getClass();\n      if (objClass != fieldType) {\n        out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n        serializer.write(object.getClass());\n        commaFlag=true;\n      }\n    }\n    char seperator=commaFlag ? ',' : '\\0';\n    char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n    commaFlag=newSeperator == ',';\n    for (int i=0; i < getters.length; ++i) {\n      FieldSerializer fieldSerializer=getters[i];\n      if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n        Field field=fieldSerializer.getField();\n        if (field != null) {\n          if (Modifier.isTransient(field.getModifiers())) {\n            continue;\n          }\n        }\n      }\n      if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n        continue;\n      }\n      Object propertyValue=fieldSerializer.getPropertyValue(object);\n      if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n        continue;\n      }\n      String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n      Object originalValue=propertyValue;\n      propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n      if (propertyValue == null && !writeAsArray) {\n        if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n          continue;\n        }\n      }\n      if (commaFlag) {\n        out.append(',');\n        if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n          serializer.println();\n        }\n      }\n      if (key != fieldSerializer.getName()) {\n        if (!writeAsArray) {\n          out.writeFieldName(key);\n        }\n        serializer.write(propertyValue);\n      }\n else       if (originalValue != propertyValue) {\n        if (!writeAsArray) {\n          fieldSerializer.writePrefix(serializer);\n        }\n        serializer.write(propertyValue);\n      }\n else {\n        if (!writeAsArray) {\n          fieldSerializer.writeProperty(serializer,propertyValue);\n        }\n else {\n          fieldSerializer.writeValue(serializer,propertyValue);\n        }\n      }\n      commaFlag=true;\n    }\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.decrementIdent();\n      serializer.println();\n    }\n    out.append(endSeperator);\n  }\n catch (  Exception e) {\n    throw new JSONException(\"write javaBean error\",e);\n  }\n finally {\n    serializer.setContext(parent);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 483,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4875,
        "startLineNumber" : 89,
        "startColumnNumber" : 4,
        "endLineNumber" : 219,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void write(JSONSerializer serializer,Object object,Object fieldName,Type fieldType) throws IOException {\n  SerializeWriter out=serializer.getWriter();\n  if (object == null) {\n    out.writeNull();\n    return;\n  }\n  if (serializer.containsReference(object)) {\n    writeReference(serializer,object);\n    return;\n  }\n  final FieldSerializer[] getters;\n  if (out.isEnabled(SerializerFeature.SortField)) {\n    getters=this.sortedGetters;\n  }\n else {\n    getters=this.getters;\n  }\n  SerialContext parent=serializer.getContext();\n  serializer.setContext(parent,object,fieldName);\n  boolean writeAsArray;\n  if (out.isEnabled(SerializerFeature.WriteJavaBeanAsArray)) {\n    writeAsArray=true;\n  }\n else {\n    writeAsArray=false;\n  }\n  try {\n    final char startSeperator=writeAsArray ? '[' : '{';\n    final char endSeperator=writeAsArray ? ']' : '}';\n    out.append(startSeperator);\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.incrementIndent();\n      serializer.println();\n    }\n    boolean commaFlag=false;\n    if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n      Class<?> objClass=object.getClass();\n      if (objClass != fieldType) {\n        out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n        serializer.write(object.getClass());\n        commaFlag=true;\n      }\n    }\n    char seperator=commaFlag ? ',' : '\\0';\n    char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n    commaFlag=newSeperator == ',';\n    for (int i=0; i < getters.length; ++i) {\n      FieldSerializer fieldSerializer=getters[i];\n      if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n        Field field=fieldSerializer.getField();\n        if (field != null) {\n          if (Modifier.isTransient(field.getModifiers())) {\n            continue;\n          }\n        }\n      }\n      if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n        continue;\n      }\n      Object propertyValue=fieldSerializer.getPropertyValue(object);\n      if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n        continue;\n      }\n      String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n      Object originalValue=propertyValue;\n      propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n      if (propertyValue == null && !writeAsArray) {\n        if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n          continue;\n        }\n      }\n      if (commaFlag) {\n        out.append(',');\n        if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n          serializer.println();\n        }\n      }\n      if (key != fieldSerializer.getName()) {\n        if (!writeAsArray) {\n          out.writeFieldName(key);\n        }\n        serializer.write(propertyValue);\n      }\n else       if (originalValue != propertyValue) {\n        if (!writeAsArray) {\n          fieldSerializer.writePrefix(serializer);\n        }\n        serializer.write(propertyValue);\n      }\n else {\n        if (!writeAsArray) {\n          fieldSerializer.writeProperty(serializer,propertyValue);\n        }\n else {\n          fieldSerializer.writeValue(serializer,propertyValue);\n        }\n      }\n      commaFlag=true;\n    }\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.decrementIdent();\n      serializer.println();\n    }\n    out.append(endSeperator);\n  }\n catch (  Exception e) {\n    throw new JSONException(\"write javaBean error\",e);\n  }\n finally {\n    serializer.setContext(parent);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 505,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 209,
        "startColumnNumber" : 16,
        "endLineNumber" : 209,
        "endColumnNumber" : 44
      },
      "nodeContext" : "serializer.decrementIdent();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.alibaba.fastjson.serializer.JSONSerializer"
  }, {
    "nodeContext" : "serializer",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 210,
      "startColumnNumber" : 16,
      "endLineNumber" : 210,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 210,
        "startColumnNumber" : 16,
        "endLineNumber" : 210,
        "endColumnNumber" : 36
      },
      "nodeContext" : "serializer.println()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 210,
        "startColumnNumber" : 16,
        "endLineNumber" : 210,
        "endColumnNumber" : 37
      },
      "nodeContext" : "serializer.println();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 101,
        "startLineNumber" : 208,
        "startColumnNumber" : 85,
        "endLineNumber" : 211,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  serializer.decrementIdent();\n  serializer.println();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 174,
        "startLineNumber" : 208,
        "startColumnNumber" : 12,
        "endLineNumber" : 211,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n  serializer.decrementIdent();\n  serializer.println();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 22,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3756,
        "startLineNumber" : 120,
        "startColumnNumber" : 12,
        "endLineNumber" : 214,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final char startSeperator=writeAsArray ? '[' : '{';\n  final char endSeperator=writeAsArray ? ']' : '}';\n  out.append(startSeperator);\n  if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n    serializer.incrementIndent();\n    serializer.println();\n  }\n  boolean commaFlag=false;\n  if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n    Class<?> objClass=object.getClass();\n    if (objClass != fieldType) {\n      out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n      serializer.write(object.getClass());\n      commaFlag=true;\n    }\n  }\n  char seperator=commaFlag ? ',' : '\\0';\n  char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n  commaFlag=newSeperator == ',';\n  for (int i=0; i < getters.length; ++i) {\n    FieldSerializer fieldSerializer=getters[i];\n    if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n      Field field=fieldSerializer.getField();\n      if (field != null) {\n        if (Modifier.isTransient(field.getModifiers())) {\n          continue;\n        }\n      }\n    }\n    if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n      continue;\n    }\n    Object propertyValue=fieldSerializer.getPropertyValue(object);\n    if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n      continue;\n    }\n    String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n    Object originalValue=propertyValue;\n    propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n    if (propertyValue == null && !writeAsArray) {\n      if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n        continue;\n      }\n    }\n    if (commaFlag) {\n      out.append(',');\n      if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n        serializer.println();\n      }\n    }\n    if (key != fieldSerializer.getName()) {\n      if (!writeAsArray) {\n        out.writeFieldName(key);\n      }\n      serializer.write(propertyValue);\n    }\n else     if (originalValue != propertyValue) {\n      if (!writeAsArray) {\n        fieldSerializer.writePrefix(serializer);\n      }\n      serializer.write(propertyValue);\n    }\n else {\n      if (!writeAsArray) {\n        fieldSerializer.writeProperty(serializer,propertyValue);\n      }\n else {\n        fieldSerializer.writeValue(serializer,propertyValue);\n      }\n    }\n    commaFlag=true;\n  }\n  if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n    serializer.decrementIdent();\n    serializer.println();\n  }\n  out.append(endSeperator);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 368,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3923,
        "startLineNumber" : 120,
        "startColumnNumber" : 8,
        "endLineNumber" : 218,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  final char startSeperator=writeAsArray ? '[' : '{';\n  final char endSeperator=writeAsArray ? ']' : '}';\n  out.append(startSeperator);\n  if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n    serializer.incrementIndent();\n    serializer.println();\n  }\n  boolean commaFlag=false;\n  if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n    Class<?> objClass=object.getClass();\n    if (objClass != fieldType) {\n      out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n      serializer.write(object.getClass());\n      commaFlag=true;\n    }\n  }\n  char seperator=commaFlag ? ',' : '\\0';\n  char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n  commaFlag=newSeperator == ',';\n  for (int i=0; i < getters.length; ++i) {\n    FieldSerializer fieldSerializer=getters[i];\n    if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n      Field field=fieldSerializer.getField();\n      if (field != null) {\n        if (Modifier.isTransient(field.getModifiers())) {\n          continue;\n        }\n      }\n    }\n    if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n      continue;\n    }\n    Object propertyValue=fieldSerializer.getPropertyValue(object);\n    if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n      continue;\n    }\n    String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n    Object originalValue=propertyValue;\n    propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n    if (propertyValue == null && !writeAsArray) {\n      if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n        continue;\n      }\n    }\n    if (commaFlag) {\n      out.append(',');\n      if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n        serializer.println();\n      }\n    }\n    if (key != fieldSerializer.getName()) {\n      if (!writeAsArray) {\n        out.writeFieldName(key);\n      }\n      serializer.write(propertyValue);\n    }\n else     if (originalValue != propertyValue) {\n      if (!writeAsArray) {\n        fieldSerializer.writePrefix(serializer);\n      }\n      serializer.write(propertyValue);\n    }\n else {\n      if (!writeAsArray) {\n        fieldSerializer.writeProperty(serializer,propertyValue);\n      }\n else {\n        fieldSerializer.writeValue(serializer,propertyValue);\n      }\n    }\n    commaFlag=true;\n  }\n  if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n    serializer.decrementIdent();\n    serializer.println();\n  }\n  out.append(endSeperator);\n}\n catch (Exception e) {\n  throw new JSONException(\"write javaBean error\",e);\n}\n finally {\n  serializer.setContext(parent);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 387,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4762,
        "startLineNumber" : 89,
        "startColumnNumber" : 117,
        "endLineNumber" : 219,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SerializeWriter out=serializer.getWriter();\n  if (object == null) {\n    out.writeNull();\n    return;\n  }\n  if (serializer.containsReference(object)) {\n    writeReference(serializer,object);\n    return;\n  }\n  final FieldSerializer[] getters;\n  if (out.isEnabled(SerializerFeature.SortField)) {\n    getters=this.sortedGetters;\n  }\n else {\n    getters=this.getters;\n  }\n  SerialContext parent=serializer.getContext();\n  serializer.setContext(parent,object,fieldName);\n  boolean writeAsArray;\n  if (out.isEnabled(SerializerFeature.WriteJavaBeanAsArray)) {\n    writeAsArray=true;\n  }\n else {\n    writeAsArray=false;\n  }\n  try {\n    final char startSeperator=writeAsArray ? '[' : '{';\n    final char endSeperator=writeAsArray ? ']' : '}';\n    out.append(startSeperator);\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.incrementIndent();\n      serializer.println();\n    }\n    boolean commaFlag=false;\n    if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n      Class<?> objClass=object.getClass();\n      if (objClass != fieldType) {\n        out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n        serializer.write(object.getClass());\n        commaFlag=true;\n      }\n    }\n    char seperator=commaFlag ? ',' : '\\0';\n    char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n    commaFlag=newSeperator == ',';\n    for (int i=0; i < getters.length; ++i) {\n      FieldSerializer fieldSerializer=getters[i];\n      if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n        Field field=fieldSerializer.getField();\n        if (field != null) {\n          if (Modifier.isTransient(field.getModifiers())) {\n            continue;\n          }\n        }\n      }\n      if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n        continue;\n      }\n      Object propertyValue=fieldSerializer.getPropertyValue(object);\n      if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n        continue;\n      }\n      String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n      Object originalValue=propertyValue;\n      propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n      if (propertyValue == null && !writeAsArray) {\n        if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n          continue;\n        }\n      }\n      if (commaFlag) {\n        out.append(',');\n        if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n          serializer.println();\n        }\n      }\n      if (key != fieldSerializer.getName()) {\n        if (!writeAsArray) {\n          out.writeFieldName(key);\n        }\n        serializer.write(propertyValue);\n      }\n else       if (originalValue != propertyValue) {\n        if (!writeAsArray) {\n          fieldSerializer.writePrefix(serializer);\n        }\n        serializer.write(propertyValue);\n      }\n else {\n        if (!writeAsArray) {\n          fieldSerializer.writeProperty(serializer,propertyValue);\n        }\n else {\n          fieldSerializer.writeValue(serializer,propertyValue);\n        }\n      }\n      commaFlag=true;\n    }\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.decrementIdent();\n      serializer.println();\n    }\n    out.append(endSeperator);\n  }\n catch (  Exception e) {\n    throw new JSONException(\"write javaBean error\",e);\n  }\n finally {\n    serializer.setContext(parent);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 483,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4875,
        "startLineNumber" : 89,
        "startColumnNumber" : 4,
        "endLineNumber" : 219,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void write(JSONSerializer serializer,Object object,Object fieldName,Type fieldType) throws IOException {\n  SerializeWriter out=serializer.getWriter();\n  if (object == null) {\n    out.writeNull();\n    return;\n  }\n  if (serializer.containsReference(object)) {\n    writeReference(serializer,object);\n    return;\n  }\n  final FieldSerializer[] getters;\n  if (out.isEnabled(SerializerFeature.SortField)) {\n    getters=this.sortedGetters;\n  }\n else {\n    getters=this.getters;\n  }\n  SerialContext parent=serializer.getContext();\n  serializer.setContext(parent,object,fieldName);\n  boolean writeAsArray;\n  if (out.isEnabled(SerializerFeature.WriteJavaBeanAsArray)) {\n    writeAsArray=true;\n  }\n else {\n    writeAsArray=false;\n  }\n  try {\n    final char startSeperator=writeAsArray ? '[' : '{';\n    final char endSeperator=writeAsArray ? ']' : '}';\n    out.append(startSeperator);\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.incrementIndent();\n      serializer.println();\n    }\n    boolean commaFlag=false;\n    if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n      Class<?> objClass=object.getClass();\n      if (objClass != fieldType) {\n        out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n        serializer.write(object.getClass());\n        commaFlag=true;\n      }\n    }\n    char seperator=commaFlag ? ',' : '\\0';\n    char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n    commaFlag=newSeperator == ',';\n    for (int i=0; i < getters.length; ++i) {\n      FieldSerializer fieldSerializer=getters[i];\n      if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n        Field field=fieldSerializer.getField();\n        if (field != null) {\n          if (Modifier.isTransient(field.getModifiers())) {\n            continue;\n          }\n        }\n      }\n      if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n        continue;\n      }\n      Object propertyValue=fieldSerializer.getPropertyValue(object);\n      if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n        continue;\n      }\n      String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n      Object originalValue=propertyValue;\n      propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n      if (propertyValue == null && !writeAsArray) {\n        if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n          continue;\n        }\n      }\n      if (commaFlag) {\n        out.append(',');\n        if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n          serializer.println();\n        }\n      }\n      if (key != fieldSerializer.getName()) {\n        if (!writeAsArray) {\n          out.writeFieldName(key);\n        }\n        serializer.write(propertyValue);\n      }\n else       if (originalValue != propertyValue) {\n        if (!writeAsArray) {\n          fieldSerializer.writePrefix(serializer);\n        }\n        serializer.write(propertyValue);\n      }\n else {\n        if (!writeAsArray) {\n          fieldSerializer.writeProperty(serializer,propertyValue);\n        }\n else {\n          fieldSerializer.writeValue(serializer,propertyValue);\n        }\n      }\n      commaFlag=true;\n    }\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.decrementIdent();\n      serializer.println();\n    }\n    out.append(endSeperator);\n  }\n catch (  Exception e) {\n    throw new JSONException(\"write javaBean error\",e);\n  }\n finally {\n    serializer.setContext(parent);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 505,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 210,
        "startColumnNumber" : 16,
        "endLineNumber" : 210,
        "endColumnNumber" : 37
      },
      "nodeContext" : "serializer.println();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.alibaba.fastjson.serializer.JSONSerializer"
  }, {
    "nodeContext" : "serializer",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 217,
      "startColumnNumber" : 12,
      "endLineNumber" : 217,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 217,
        "startColumnNumber" : 12,
        "endLineNumber" : 217,
        "endColumnNumber" : 41
      },
      "nodeContext" : "serializer.setContext(parent)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 217,
        "startColumnNumber" : 12,
        "endLineNumber" : 217,
        "endColumnNumber" : 42
      },
      "nodeContext" : "serializer.setContext(parent);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,finally]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 216,
        "startColumnNumber" : 18,
        "endLineNumber" : 218,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  serializer.setContext(parent);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3923,
        "startLineNumber" : 120,
        "startColumnNumber" : 8,
        "endLineNumber" : 218,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  final char startSeperator=writeAsArray ? '[' : '{';\n  final char endSeperator=writeAsArray ? ']' : '}';\n  out.append(startSeperator);\n  if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n    serializer.incrementIndent();\n    serializer.println();\n  }\n  boolean commaFlag=false;\n  if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n    Class<?> objClass=object.getClass();\n    if (objClass != fieldType) {\n      out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n      serializer.write(object.getClass());\n      commaFlag=true;\n    }\n  }\n  char seperator=commaFlag ? ',' : '\\0';\n  char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n  commaFlag=newSeperator == ',';\n  for (int i=0; i < getters.length; ++i) {\n    FieldSerializer fieldSerializer=getters[i];\n    if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n      Field field=fieldSerializer.getField();\n      if (field != null) {\n        if (Modifier.isTransient(field.getModifiers())) {\n          continue;\n        }\n      }\n    }\n    if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n      continue;\n    }\n    Object propertyValue=fieldSerializer.getPropertyValue(object);\n    if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n      continue;\n    }\n    String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n    Object originalValue=propertyValue;\n    propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n    if (propertyValue == null && !writeAsArray) {\n      if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n        continue;\n      }\n    }\n    if (commaFlag) {\n      out.append(',');\n      if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n        serializer.println();\n      }\n    }\n    if (key != fieldSerializer.getName()) {\n      if (!writeAsArray) {\n        out.writeFieldName(key);\n      }\n      serializer.write(propertyValue);\n    }\n else     if (originalValue != propertyValue) {\n      if (!writeAsArray) {\n        fieldSerializer.writePrefix(serializer);\n      }\n      serializer.write(propertyValue);\n    }\n else {\n      if (!writeAsArray) {\n        fieldSerializer.writeProperty(serializer,propertyValue);\n      }\n else {\n        fieldSerializer.writeValue(serializer,propertyValue);\n      }\n    }\n    commaFlag=true;\n  }\n  if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n    serializer.decrementIdent();\n    serializer.println();\n  }\n  out.append(endSeperator);\n}\n catch (Exception e) {\n  throw new JSONException(\"write javaBean error\",e);\n}\n finally {\n  serializer.setContext(parent);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 387,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4762,
        "startLineNumber" : 89,
        "startColumnNumber" : 117,
        "endLineNumber" : 219,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SerializeWriter out=serializer.getWriter();\n  if (object == null) {\n    out.writeNull();\n    return;\n  }\n  if (serializer.containsReference(object)) {\n    writeReference(serializer,object);\n    return;\n  }\n  final FieldSerializer[] getters;\n  if (out.isEnabled(SerializerFeature.SortField)) {\n    getters=this.sortedGetters;\n  }\n else {\n    getters=this.getters;\n  }\n  SerialContext parent=serializer.getContext();\n  serializer.setContext(parent,object,fieldName);\n  boolean writeAsArray;\n  if (out.isEnabled(SerializerFeature.WriteJavaBeanAsArray)) {\n    writeAsArray=true;\n  }\n else {\n    writeAsArray=false;\n  }\n  try {\n    final char startSeperator=writeAsArray ? '[' : '{';\n    final char endSeperator=writeAsArray ? ']' : '}';\n    out.append(startSeperator);\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.incrementIndent();\n      serializer.println();\n    }\n    boolean commaFlag=false;\n    if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n      Class<?> objClass=object.getClass();\n      if (objClass != fieldType) {\n        out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n        serializer.write(object.getClass());\n        commaFlag=true;\n      }\n    }\n    char seperator=commaFlag ? ',' : '\\0';\n    char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n    commaFlag=newSeperator == ',';\n    for (int i=0; i < getters.length; ++i) {\n      FieldSerializer fieldSerializer=getters[i];\n      if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n        Field field=fieldSerializer.getField();\n        if (field != null) {\n          if (Modifier.isTransient(field.getModifiers())) {\n            continue;\n          }\n        }\n      }\n      if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n        continue;\n      }\n      Object propertyValue=fieldSerializer.getPropertyValue(object);\n      if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n        continue;\n      }\n      String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n      Object originalValue=propertyValue;\n      propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n      if (propertyValue == null && !writeAsArray) {\n        if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n          continue;\n        }\n      }\n      if (commaFlag) {\n        out.append(',');\n        if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n          serializer.println();\n        }\n      }\n      if (key != fieldSerializer.getName()) {\n        if (!writeAsArray) {\n          out.writeFieldName(key);\n        }\n        serializer.write(propertyValue);\n      }\n else       if (originalValue != propertyValue) {\n        if (!writeAsArray) {\n          fieldSerializer.writePrefix(serializer);\n        }\n        serializer.write(propertyValue);\n      }\n else {\n        if (!writeAsArray) {\n          fieldSerializer.writeProperty(serializer,propertyValue);\n        }\n else {\n          fieldSerializer.writeValue(serializer,propertyValue);\n        }\n      }\n      commaFlag=true;\n    }\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.decrementIdent();\n      serializer.println();\n    }\n    out.append(endSeperator);\n  }\n catch (  Exception e) {\n    throw new JSONException(\"write javaBean error\",e);\n  }\n finally {\n    serializer.setContext(parent);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 483,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4875,
        "startLineNumber" : 89,
        "startColumnNumber" : 4,
        "endLineNumber" : 219,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void write(JSONSerializer serializer,Object object,Object fieldName,Type fieldType) throws IOException {\n  SerializeWriter out=serializer.getWriter();\n  if (object == null) {\n    out.writeNull();\n    return;\n  }\n  if (serializer.containsReference(object)) {\n    writeReference(serializer,object);\n    return;\n  }\n  final FieldSerializer[] getters;\n  if (out.isEnabled(SerializerFeature.SortField)) {\n    getters=this.sortedGetters;\n  }\n else {\n    getters=this.getters;\n  }\n  SerialContext parent=serializer.getContext();\n  serializer.setContext(parent,object,fieldName);\n  boolean writeAsArray;\n  if (out.isEnabled(SerializerFeature.WriteJavaBeanAsArray)) {\n    writeAsArray=true;\n  }\n else {\n    writeAsArray=false;\n  }\n  try {\n    final char startSeperator=writeAsArray ? '[' : '{';\n    final char endSeperator=writeAsArray ? ']' : '}';\n    out.append(startSeperator);\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.incrementIndent();\n      serializer.println();\n    }\n    boolean commaFlag=false;\n    if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n      Class<?> objClass=object.getClass();\n      if (objClass != fieldType) {\n        out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n        serializer.write(object.getClass());\n        commaFlag=true;\n      }\n    }\n    char seperator=commaFlag ? ',' : '\\0';\n    char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n    commaFlag=newSeperator == ',';\n    for (int i=0; i < getters.length; ++i) {\n      FieldSerializer fieldSerializer=getters[i];\n      if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n        Field field=fieldSerializer.getField();\n        if (field != null) {\n          if (Modifier.isTransient(field.getModifiers())) {\n            continue;\n          }\n        }\n      }\n      if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n        continue;\n      }\n      Object propertyValue=fieldSerializer.getPropertyValue(object);\n      if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n        continue;\n      }\n      String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n      Object originalValue=propertyValue;\n      propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n      if (propertyValue == null && !writeAsArray) {\n        if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n          continue;\n        }\n      }\n      if (commaFlag) {\n        out.append(',');\n        if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n          serializer.println();\n        }\n      }\n      if (key != fieldSerializer.getName()) {\n        if (!writeAsArray) {\n          out.writeFieldName(key);\n        }\n        serializer.write(propertyValue);\n      }\n else       if (originalValue != propertyValue) {\n        if (!writeAsArray) {\n          fieldSerializer.writePrefix(serializer);\n        }\n        serializer.write(propertyValue);\n      }\n else {\n        if (!writeAsArray) {\n          fieldSerializer.writeProperty(serializer,propertyValue);\n        }\n else {\n          fieldSerializer.writeValue(serializer,propertyValue);\n        }\n      }\n      commaFlag=true;\n    }\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.decrementIdent();\n      serializer.println();\n    }\n    out.append(endSeperator);\n  }\n catch (  Exception e) {\n    throw new JSONException(\"write javaBean error\",e);\n  }\n finally {\n    serializer.setContext(parent);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 505,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 217,
        "startColumnNumber" : 12,
        "endLineNumber" : 217,
        "endColumnNumber" : 42
      },
      "nodeContext" : "serializer.setContext(parent);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.alibaba.fastjson.serializer.JSONSerializer"
  } ],
  "positionList" : [ {
    "charLength" : 10,
    "startLineNumber" : 90,
    "startColumnNumber" : 30,
    "endLineNumber" : 90,
    "endColumnNumber" : 40
  }, {
    "charLength" : 10,
    "startLineNumber" : 97,
    "startColumnNumber" : 12,
    "endLineNumber" : 97,
    "endColumnNumber" : 22
  }, {
    "charLength" : 10,
    "startLineNumber" : 98,
    "startColumnNumber" : 27,
    "endLineNumber" : 98,
    "endColumnNumber" : 37
  }, {
    "charLength" : 10,
    "startLineNumber" : 110,
    "startColumnNumber" : 31,
    "endLineNumber" : 110,
    "endColumnNumber" : 41
  }, {
    "charLength" : 10,
    "startLineNumber" : 111,
    "startColumnNumber" : 8,
    "endLineNumber" : 111,
    "endColumnNumber" : 18
  }, {
    "charLength" : 10,
    "startLineNumber" : 126,
    "startColumnNumber" : 16,
    "endLineNumber" : 126,
    "endColumnNumber" : 26
  }, {
    "charLength" : 10,
    "startLineNumber" : 127,
    "startColumnNumber" : 16,
    "endLineNumber" : 127,
    "endColumnNumber" : 26
  }, {
    "charLength" : 10,
    "startLineNumber" : 132,
    "startColumnNumber" : 33,
    "endLineNumber" : 132,
    "endColumnNumber" : 43
  }, {
    "charLength" : 10,
    "startLineNumber" : 136,
    "startColumnNumber" : 20,
    "endLineNumber" : 136,
    "endColumnNumber" : 30
  }, {
    "charLength" : 10,
    "startLineNumber" : 143,
    "startColumnNumber" : 56,
    "endLineNumber" : 143,
    "endColumnNumber" : 66
  }, {
    "charLength" : 10,
    "startLineNumber" : 149,
    "startColumnNumber" : 20,
    "endLineNumber" : 149,
    "endColumnNumber" : 30
  }, {
    "charLength" : 10,
    "startLineNumber" : 158,
    "startColumnNumber" : 43,
    "endLineNumber" : 158,
    "endColumnNumber" : 53
  }, {
    "charLength" : 10,
    "startLineNumber" : 164,
    "startColumnNumber" : 39,
    "endLineNumber" : 164,
    "endColumnNumber" : 49
  }, {
    "charLength" : 10,
    "startLineNumber" : 168,
    "startColumnNumber" : 52,
    "endLineNumber" : 168,
    "endColumnNumber" : 62
  }, {
    "charLength" : 10,
    "startLineNumber" : 171,
    "startColumnNumber" : 57,
    "endLineNumber" : 171,
    "endColumnNumber" : 67
  }, {
    "charLength" : 10,
    "startLineNumber" : 175,
    "startColumnNumber" : 29,
    "endLineNumber" : 175,
    "endColumnNumber" : 39
  }, {
    "charLength" : 10,
    "startLineNumber" : 183,
    "startColumnNumber" : 24,
    "endLineNumber" : 183,
    "endColumnNumber" : 34
  }, {
    "charLength" : 10,
    "startLineNumber" : 191,
    "startColumnNumber" : 20,
    "endLineNumber" : 191,
    "endColumnNumber" : 30
  }, {
    "charLength" : 10,
    "startLineNumber" : 194,
    "startColumnNumber" : 52,
    "endLineNumber" : 194,
    "endColumnNumber" : 62
  }, {
    "charLength" : 10,
    "startLineNumber" : 196,
    "startColumnNumber" : 20,
    "endLineNumber" : 196,
    "endColumnNumber" : 30
  }, {
    "charLength" : 10,
    "startLineNumber" : 199,
    "startColumnNumber" : 54,
    "endLineNumber" : 199,
    "endColumnNumber" : 64
  }, {
    "charLength" : 10,
    "startLineNumber" : 201,
    "startColumnNumber" : 51,
    "endLineNumber" : 201,
    "endColumnNumber" : 61
  }, {
    "charLength" : 10,
    "startLineNumber" : 209,
    "startColumnNumber" : 16,
    "endLineNumber" : 209,
    "endColumnNumber" : 26
  }, {
    "charLength" : 10,
    "startLineNumber" : 210,
    "startColumnNumber" : 16,
    "endLineNumber" : 210,
    "endColumnNumber" : 26
  }, {
    "charLength" : 10,
    "startLineNumber" : 217,
    "startColumnNumber" : 12,
    "endLineNumber" : 217,
    "endColumnNumber" : 22
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 23,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 24,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 23,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 24,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 24,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 24,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 1
  }, {
    "firstKey" : 7,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 24,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 8
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 8
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 18,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 19,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 20,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 21,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 22,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 23,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 24,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 23,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 10,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 10,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 10,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 10,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 10,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 24,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 11,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 11,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 11,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 11,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 11,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 22,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 23,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 24,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 12,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 12,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 12,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 12,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 12,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 22,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 23,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 24,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 13,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 13,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 13,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 13,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 13,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 22,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 23,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 24,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 14,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 14,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 14,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 14,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 14,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 22,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 23,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 24,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 0,
    "layout" : 11
  }, {
    "firstKey" : 15,
    "secondKey" : 1,
    "layout" : 11
  }, {
    "firstKey" : 15,
    "secondKey" : 2,
    "layout" : 11
  }, {
    "firstKey" : 15,
    "secondKey" : 3,
    "layout" : 11
  }, {
    "firstKey" : 15,
    "secondKey" : 4,
    "layout" : 11
  }, {
    "firstKey" : 15,
    "secondKey" : 5,
    "layout" : 9
  }, {
    "firstKey" : 15,
    "secondKey" : 6,
    "layout" : 9
  }, {
    "firstKey" : 15,
    "secondKey" : 7,
    "layout" : 9
  }, {
    "firstKey" : 15,
    "secondKey" : 8,
    "layout" : 9
  }, {
    "firstKey" : 15,
    "secondKey" : 9,
    "layout" : 9
  }, {
    "firstKey" : 15,
    "secondKey" : 10,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 11,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 12,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 13,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 14,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 16,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 17,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 18,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 19,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 20,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 21,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 22,
    "layout" : 9
  }, {
    "firstKey" : 15,
    "secondKey" : 23,
    "layout" : 9
  }, {
    "firstKey" : 15,
    "secondKey" : 24,
    "layout" : 10
  }, {
    "firstKey" : 16,
    "secondKey" : 0,
    "layout" : 10
  }, {
    "firstKey" : 16,
    "secondKey" : 1,
    "layout" : 10
  }, {
    "firstKey" : 16,
    "secondKey" : 2,
    "layout" : 10
  }, {
    "firstKey" : 16,
    "secondKey" : 3,
    "layout" : 10
  }, {
    "firstKey" : 16,
    "secondKey" : 4,
    "layout" : 10
  }, {
    "firstKey" : 16,
    "secondKey" : 5,
    "layout" : 8
  }, {
    "firstKey" : 16,
    "secondKey" : 6,
    "layout" : 8
  }, {
    "firstKey" : 16,
    "secondKey" : 7,
    "layout" : 8
  }, {
    "firstKey" : 16,
    "secondKey" : 8,
    "layout" : 8
  }, {
    "firstKey" : 16,
    "secondKey" : 9,
    "layout" : 8
  }, {
    "firstKey" : 16,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 18,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 19,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 20,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 21,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 22,
    "layout" : 8
  }, {
    "firstKey" : 16,
    "secondKey" : 23,
    "layout" : 8
  }, {
    "firstKey" : 16,
    "secondKey" : 24,
    "layout" : 9
  }, {
    "firstKey" : 17,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 17,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 17,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 17,
    "secondKey" : 3,
    "layout" : 8
  }, {
    "firstKey" : 17,
    "secondKey" : 4,
    "layout" : 8
  }, {
    "firstKey" : 17,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 17,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 17,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 17,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 17,
    "secondKey" : 22,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 23,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 24,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 0,
    "layout" : 11
  }, {
    "firstKey" : 18,
    "secondKey" : 1,
    "layout" : 11
  }, {
    "firstKey" : 18,
    "secondKey" : 2,
    "layout" : 11
  }, {
    "firstKey" : 18,
    "secondKey" : 3,
    "layout" : 11
  }, {
    "firstKey" : 18,
    "secondKey" : 4,
    "layout" : 11
  }, {
    "firstKey" : 18,
    "secondKey" : 5,
    "layout" : 9
  }, {
    "firstKey" : 18,
    "secondKey" : 6,
    "layout" : 9
  }, {
    "firstKey" : 18,
    "secondKey" : 7,
    "layout" : 9
  }, {
    "firstKey" : 18,
    "secondKey" : 8,
    "layout" : 9
  }, {
    "firstKey" : 18,
    "secondKey" : 9,
    "layout" : 9
  }, {
    "firstKey" : 18,
    "secondKey" : 10,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 11,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 12,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 13,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 14,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 15,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 16,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 18,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 20,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 21,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 22,
    "layout" : 9
  }, {
    "firstKey" : 18,
    "secondKey" : 23,
    "layout" : 9
  }, {
    "firstKey" : 18,
    "secondKey" : 24,
    "layout" : 10
  }, {
    "firstKey" : 19,
    "secondKey" : 0,
    "layout" : 9
  }, {
    "firstKey" : 19,
    "secondKey" : 1,
    "layout" : 9
  }, {
    "firstKey" : 19,
    "secondKey" : 2,
    "layout" : 9
  }, {
    "firstKey" : 19,
    "secondKey" : 3,
    "layout" : 9
  }, {
    "firstKey" : 19,
    "secondKey" : 4,
    "layout" : 9
  }, {
    "firstKey" : 19,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 6,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 7,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 8,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 9,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 22,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 23,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 24,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 0,
    "layout" : 11
  }, {
    "firstKey" : 20,
    "secondKey" : 1,
    "layout" : 11
  }, {
    "firstKey" : 20,
    "secondKey" : 2,
    "layout" : 11
  }, {
    "firstKey" : 20,
    "secondKey" : 3,
    "layout" : 11
  }, {
    "firstKey" : 20,
    "secondKey" : 4,
    "layout" : 11
  }, {
    "firstKey" : 20,
    "secondKey" : 5,
    "layout" : 9
  }, {
    "firstKey" : 20,
    "secondKey" : 6,
    "layout" : 9
  }, {
    "firstKey" : 20,
    "secondKey" : 7,
    "layout" : 9
  }, {
    "firstKey" : 20,
    "secondKey" : 8,
    "layout" : 9
  }, {
    "firstKey" : 20,
    "secondKey" : 9,
    "layout" : 9
  }, {
    "firstKey" : 20,
    "secondKey" : 10,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 11,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 12,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 13,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 14,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 15,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 16,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 20,
    "secondKey" : 18,
    "layout" : 5
  }, {
    "firstKey" : 20,
    "secondKey" : 19,
    "layout" : 5
  }, {
    "firstKey" : 20,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 20,
    "secondKey" : 22,
    "layout" : 9
  }, {
    "firstKey" : 20,
    "secondKey" : 23,
    "layout" : 9
  }, {
    "firstKey" : 20,
    "secondKey" : 24,
    "layout" : 10
  }, {
    "firstKey" : 21,
    "secondKey" : 0,
    "layout" : 11
  }, {
    "firstKey" : 21,
    "secondKey" : 1,
    "layout" : 11
  }, {
    "firstKey" : 21,
    "secondKey" : 2,
    "layout" : 11
  }, {
    "firstKey" : 21,
    "secondKey" : 3,
    "layout" : 11
  }, {
    "firstKey" : 21,
    "secondKey" : 4,
    "layout" : 11
  }, {
    "firstKey" : 21,
    "secondKey" : 5,
    "layout" : 9
  }, {
    "firstKey" : 21,
    "secondKey" : 6,
    "layout" : 9
  }, {
    "firstKey" : 21,
    "secondKey" : 7,
    "layout" : 9
  }, {
    "firstKey" : 21,
    "secondKey" : 8,
    "layout" : 9
  }, {
    "firstKey" : 21,
    "secondKey" : 9,
    "layout" : 9
  }, {
    "firstKey" : 21,
    "secondKey" : 10,
    "layout" : 7
  }, {
    "firstKey" : 21,
    "secondKey" : 11,
    "layout" : 7
  }, {
    "firstKey" : 21,
    "secondKey" : 12,
    "layout" : 7
  }, {
    "firstKey" : 21,
    "secondKey" : 13,
    "layout" : 7
  }, {
    "firstKey" : 21,
    "secondKey" : 14,
    "layout" : 7
  }, {
    "firstKey" : 21,
    "secondKey" : 15,
    "layout" : 7
  }, {
    "firstKey" : 21,
    "secondKey" : 16,
    "layout" : 7
  }, {
    "firstKey" : 21,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 21,
    "secondKey" : 18,
    "layout" : 5
  }, {
    "firstKey" : 21,
    "secondKey" : 19,
    "layout" : 5
  }, {
    "firstKey" : 21,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 22,
    "layout" : 9
  }, {
    "firstKey" : 21,
    "secondKey" : 23,
    "layout" : 9
  }, {
    "firstKey" : 21,
    "secondKey" : 24,
    "layout" : 10
  }, {
    "firstKey" : 22,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 22,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 22,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 22,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 22,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 22,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 24,
    "layout" : 5
  }, {
    "firstKey" : 23,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 23,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 23,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 23,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 23,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 23,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 23,
    "secondKey" : 24,
    "layout" : 5
  }, {
    "firstKey" : 24,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 24,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 24,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 24,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 24,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 24,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 24,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 24,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 24,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 24,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 24,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 24,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 24,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 24,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 24,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 24,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 24,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 24,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 24,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 24,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 24,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 24,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 24,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 24,
    "secondKey" : 23,
    "layout" : 3
  } ]
}