{
  "id" : 215,
  "expression" : "Optional",
  "projectName" : "apache@shardingsphere",
  "commitID" : "897bcea9f4b0f5e33eb545470f28a35d68fccf60",
  "filePath" : "/shardingsphere-infra/shardingsphere-infra-federation/shardingsphere-infra-federation-optimizer/src/main/java/org/apache/shardingsphere/infra/federation/optimizer/converter/segment/projection/impl/SubqueryProjectionConverter.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Optional",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 48,
      "startColumnNumber" : 19,
      "endLineNumber" : 48,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 48,
        "startColumnNumber" : 19,
        "endLineNumber" : 48,
        "endColumnNumber" : 35
      },
      "nodeContext" : "Optional.empty()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 48,
        "startColumnNumber" : 12,
        "endLineNumber" : 48,
        "endColumnNumber" : 36
      },
      "nodeContext" : "return Optional.empty();\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 47,
        "startColumnNumber" : 29,
        "endLineNumber" : 49,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  return Optional.empty();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 47,
        "startColumnNumber" : 8,
        "endLineNumber" : 49,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (null == segment) {\n  return Optional.empty();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 324,
        "startLineNumber" : 46,
        "startColumnNumber" : 87,
        "endLineNumber" : 52,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (null == segment) {\n    return Optional.empty();\n  }\n  SqlNode sqlNode=new SelectStatementConverter().convertToSQLNode(segment.getSubquery().getSelect());\n  return segment.getAlias().isPresent() ? convertToSQLStatement(sqlNode,segment.getAlias().get()) : Optional.of(sqlNode);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 44,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 421,
        "startLineNumber" : 45,
        "startColumnNumber" : 4,
        "endLineNumber" : 52,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public Optional<SqlNode> convertToSQLNode(final SubqueryProjectionSegment segment){\n  if (null == segment) {\n    return Optional.empty();\n  }\n  SqlNode sqlNode=new SelectStatementConverter().convertToSQLNode(segment.getSubquery().getSelect());\n  return segment.getAlias().isPresent() ? convertToSQLStatement(sqlNode,segment.getAlias().get()) : Optional.of(sqlNode);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 59,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 48,
        "startColumnNumber" : 12,
        "endLineNumber" : 48,
        "endColumnNumber" : 36
      },
      "nodeContext" : "return Optional.empty();\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.util.Optional"
  }, {
    "nodeContext" : "Optional",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 51,
      "startColumnNumber" : 107,
      "endLineNumber" : 51,
      "endColumnNumber" : 115
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,elseExpression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 51,
        "startColumnNumber" : 107,
        "endLineNumber" : 51,
        "endColumnNumber" : 127
      },
      "nodeContext" : "Optional.of(sqlNode)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 112,
        "startLineNumber" : 51,
        "startColumnNumber" : 15,
        "endLineNumber" : 51,
        "endColumnNumber" : 127
      },
      "nodeContext" : "segment.getAlias().isPresent() ? convertToSQLStatement(sqlNode,segment.getAlias().get()) : Optional.of(sqlNode)",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 120,
        "startLineNumber" : 51,
        "startColumnNumber" : 8,
        "endLineNumber" : 51,
        "endColumnNumber" : 128
      },
      "nodeContext" : "return segment.getAlias().isPresent() ? convertToSQLStatement(sqlNode,segment.getAlias().get()) : Optional.of(sqlNode);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 324,
        "startLineNumber" : 46,
        "startColumnNumber" : 87,
        "endLineNumber" : 52,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (null == segment) {\n    return Optional.empty();\n  }\n  SqlNode sqlNode=new SelectStatementConverter().convertToSQLNode(segment.getSubquery().getSelect());\n  return segment.getAlias().isPresent() ? convertToSQLStatement(sqlNode,segment.getAlias().get()) : Optional.of(sqlNode);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 44,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 421,
        "startLineNumber" : 45,
        "startColumnNumber" : 4,
        "endLineNumber" : 52,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public Optional<SqlNode> convertToSQLNode(final SubqueryProjectionSegment segment){\n  if (null == segment) {\n    return Optional.empty();\n  }\n  SqlNode sqlNode=new SelectStatementConverter().convertToSQLNode(segment.getSubquery().getSelect());\n  return segment.getAlias().isPresent() ? convertToSQLStatement(sqlNode,segment.getAlias().get()) : Optional.of(sqlNode);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 59,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 120,
        "startLineNumber" : 51,
        "startColumnNumber" : 8,
        "endLineNumber" : 51,
        "endColumnNumber" : 128
      },
      "nodeContext" : "return segment.getAlias().isPresent() ? convertToSQLStatement(sqlNode,segment.getAlias().get()) : Optional.of(sqlNode);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 19,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.util.Optional"
  } ],
  "positionList" : [ {
    "charLength" : 8,
    "startLineNumber" : 48,
    "startColumnNumber" : 19,
    "endLineNumber" : 48,
    "endColumnNumber" : 27
  }, {
    "charLength" : 8,
    "startLineNumber" : 51,
    "startColumnNumber" : 107,
    "endLineNumber" : 51,
    "endColumnNumber" : 115
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}