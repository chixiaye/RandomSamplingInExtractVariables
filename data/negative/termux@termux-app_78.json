{
  "id" : 78,
  "expression" : "Math.abs(measuredCodePointWidth / mFontWidth - codePointWcWidth)",
  "projectName" : "termux@termux-app",
  "commitID" : "6334470f81bdf003b8567af9e3531cec4dce560d",
  "filePath" : "/app/src/main/java/com/termux/view/TerminalRenderer.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Math.abs(measuredCodePointWidth / mFontWidth - codePointWcWidth)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 64,
      "startLineNumber" : 108,
      "startColumnNumber" : 50,
      "endLineNumber" : 108,
      "endColumnNumber" : 114
    },
    "astNodeNumber" : 8,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 108,
        "startColumnNumber" : 50,
        "endLineNumber" : 108,
        "endColumnNumber" : 121
      },
      "nodeContext" : "Math.abs(measuredCodePointWidth / mFontWidth - codePointWcWidth) > 0.01",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 108,
        "startColumnNumber" : 30,
        "endLineNumber" : 108,
        "endColumnNumber" : 121
      },
      "nodeContext" : "fontWidthMismatch=Math.abs(measuredCodePointWidth / mFontWidth - codePointWcWidth) > 0.01",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 106,
        "startLineNumber" : 108,
        "startColumnNumber" : 16,
        "endLineNumber" : 108,
        "endColumnNumber" : 122
      },
      "nodeContext" : "final boolean fontWidthMismatch=Math.abs(measuredCodePointWidth / mFontWidth - codePointWcWidth) > 0.01;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 15,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 3105,
        "startLineNumber" : 93,
        "startColumnNumber" : 53,
        "endLineNumber" : 134,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  final char charAtIndex=line[currentCharIndex];\n  final boolean charIsHighsurrogate=Character.isHighSurrogate(charAtIndex);\n  final int charsForCodePoint=charIsHighsurrogate ? 2 : 1;\n  final int codePoint=charIsHighsurrogate ? Character.toCodePoint(charAtIndex,line[currentCharIndex + 1]) : charAtIndex;\n  final int codePointWcWidth=WcWidth.width(codePoint);\n  final boolean insideCursor=(column >= selx1 && column <= selx2) || (cursorX == column || (codePointWcWidth == 2 && cursorX == column + 1));\n  final long style=lineObject.getStyle(column);\n  final float measuredCodePointWidth=(codePoint < asciiMeasures.length) ? asciiMeasures[codePoint] : mTextPaint.measureText(line,currentCharIndex,charsForCodePoint);\n  final boolean fontWidthMismatch=Math.abs(measuredCodePointWidth / mFontWidth - codePointWcWidth) > 0.01;\n  if (style != lastRunStyle || insideCursor != lastRunInsideCursor || fontWidthMismatch || lastRunFontWidthMismatch) {\n    if (column == 0) {\n    }\n else {\n      final int columnWidthSinceLastRun=column - lastRunStartColumn;\n      final int charsSinceLastRun=currentCharIndex - lastRunStartIndex;\n      drawTextRun(canvas,line,palette,heightOffset,lastRunStartColumn,columnWidthSinceLastRun,lastRunStartIndex,charsSinceLastRun,measuredWidthForRun,lastRunInsideCursor,lastRunStyle,reverseVideo);\n    }\n    measuredWidthForRun=0.f;\n    lastRunStyle=style;\n    lastRunInsideCursor=insideCursor;\n    lastRunStartColumn=column;\n    lastRunStartIndex=currentCharIndex;\n    lastRunFontWidthMismatch=fontWidthMismatch;\n  }\n  measuredWidthForRun+=measuredCodePointWidth;\n  column+=codePointWcWidth;\n  currentCharIndex+=charsForCodePoint;\n  while (currentCharIndex < charsUsedInLine && WcWidth.width(line,currentCharIndex) <= 0) {\n    currentCharIndex+=Character.isHighSurrogate(line[currentCharIndex]) ? 2 : 1;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 238,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3146,
        "startLineNumber" : 93,
        "startColumnNumber" : 12,
        "endLineNumber" : 134,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int column=0; column < columns; ) {\n  final char charAtIndex=line[currentCharIndex];\n  final boolean charIsHighsurrogate=Character.isHighSurrogate(charAtIndex);\n  final int charsForCodePoint=charIsHighsurrogate ? 2 : 1;\n  final int codePoint=charIsHighsurrogate ? Character.toCodePoint(charAtIndex,line[currentCharIndex + 1]) : charAtIndex;\n  final int codePointWcWidth=WcWidth.width(codePoint);\n  final boolean insideCursor=(column >= selx1 && column <= selx2) || (cursorX == column || (codePointWcWidth == 2 && cursorX == column + 1));\n  final long style=lineObject.getStyle(column);\n  final float measuredCodePointWidth=(codePoint < asciiMeasures.length) ? asciiMeasures[codePoint] : mTextPaint.measureText(line,currentCharIndex,charsForCodePoint);\n  final boolean fontWidthMismatch=Math.abs(measuredCodePointWidth / mFontWidth - codePointWcWidth) > 0.01;\n  if (style != lastRunStyle || insideCursor != lastRunInsideCursor || fontWidthMismatch || lastRunFontWidthMismatch) {\n    if (column == 0) {\n    }\n else {\n      final int columnWidthSinceLastRun=column - lastRunStartColumn;\n      final int charsSinceLastRun=currentCharIndex - lastRunStartIndex;\n      drawTextRun(canvas,line,palette,heightOffset,lastRunStartColumn,columnWidthSinceLastRun,lastRunStartIndex,charsSinceLastRun,measuredWidthForRun,lastRunInsideCursor,lastRunStyle,reverseVideo);\n    }\n    measuredWidthForRun=0.f;\n    lastRunStyle=style;\n    lastRunInsideCursor=insideCursor;\n    lastRunStartColumn=column;\n    lastRunStartIndex=currentCharIndex;\n    lastRunFontWidthMismatch=fontWidthMismatch;\n  }\n  measuredWidthForRun+=measuredCodePointWidth;\n  column+=codePointWcWidth;\n  currentCharIndex+=charsForCodePoint;\n  while (currentCharIndex < charsUsedInLine && WcWidth.width(line,currentCharIndex) <= 0) {\n    currentCharIndex+=Character.isHighSurrogate(line[currentCharIndex]) ? 2 : 1;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 247,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 4478,
        "startLineNumber" : 71,
        "startColumnNumber" : 52,
        "endLineNumber" : 140,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  heightOffset+=mFontLineSpacing;\n  final int cursorX=(row == cursorRow && cursorVisible) ? cursorCol : -1;\n  int selx1=-1, selx2=-1;\n  if (row >= selectionY1 && row <= selectionY2) {\n    if (row == selectionY1)     selx1=selectionX1;\n    selx2=(row == selectionY2) ? selectionX2 : mEmulator.mColumns;\n  }\n  TerminalRow lineObject=screen.allocateFullLineIfNecessary(screen.externalToInternalRow(row));\n  final char[] line=lineObject.mText;\n  final int charsUsedInLine=lineObject.getSpaceUsed();\n  long lastRunStyle=0;\n  boolean lastRunInsideCursor=false;\n  int lastRunStartColumn=-1;\n  int lastRunStartIndex=0;\n  boolean lastRunFontWidthMismatch=false;\n  int currentCharIndex=0;\n  float measuredWidthForRun=0.f;\n  for (int column=0; column < columns; ) {\n    final char charAtIndex=line[currentCharIndex];\n    final boolean charIsHighsurrogate=Character.isHighSurrogate(charAtIndex);\n    final int charsForCodePoint=charIsHighsurrogate ? 2 : 1;\n    final int codePoint=charIsHighsurrogate ? Character.toCodePoint(charAtIndex,line[currentCharIndex + 1]) : charAtIndex;\n    final int codePointWcWidth=WcWidth.width(codePoint);\n    final boolean insideCursor=(column >= selx1 && column <= selx2) || (cursorX == column || (codePointWcWidth == 2 && cursorX == column + 1));\n    final long style=lineObject.getStyle(column);\n    final float measuredCodePointWidth=(codePoint < asciiMeasures.length) ? asciiMeasures[codePoint] : mTextPaint.measureText(line,currentCharIndex,charsForCodePoint);\n    final boolean fontWidthMismatch=Math.abs(measuredCodePointWidth / mFontWidth - codePointWcWidth) > 0.01;\n    if (style != lastRunStyle || insideCursor != lastRunInsideCursor || fontWidthMismatch || lastRunFontWidthMismatch) {\n      if (column == 0) {\n      }\n else {\n        final int columnWidthSinceLastRun=column - lastRunStartColumn;\n        final int charsSinceLastRun=currentCharIndex - lastRunStartIndex;\n        drawTextRun(canvas,line,palette,heightOffset,lastRunStartColumn,columnWidthSinceLastRun,lastRunStartIndex,charsSinceLastRun,measuredWidthForRun,lastRunInsideCursor,lastRunStyle,reverseVideo);\n      }\n      measuredWidthForRun=0.f;\n      lastRunStyle=style;\n      lastRunInsideCursor=insideCursor;\n      lastRunStartColumn=column;\n      lastRunStartIndex=currentCharIndex;\n      lastRunFontWidthMismatch=fontWidthMismatch;\n    }\n    measuredWidthForRun+=measuredCodePointWidth;\n    column+=codePointWcWidth;\n    currentCharIndex+=charsForCodePoint;\n    while (currentCharIndex < charsUsedInLine && WcWidth.width(line,currentCharIndex) <= 0) {\n      currentCharIndex+=Character.isHighSurrogate(line[currentCharIndex]) ? 2 : 1;\n    }\n  }\n  final int columnWidthSinceLastRun=columns - lastRunStartColumn;\n  final int charsSinceLastRun=currentCharIndex - lastRunStartIndex;\n  drawTextRun(canvas,line,palette,heightOffset,lastRunStartColumn,columnWidthSinceLastRun,lastRunStartIndex,charsSinceLastRun,measuredWidthForRun,lastRunInsideCursor,lastRunStyle,reverseVideo);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 403,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4522,
        "startLineNumber" : 71,
        "startColumnNumber" : 8,
        "endLineNumber" : 140,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int row=topRow; row < endRow; row++) {\n  heightOffset+=mFontLineSpacing;\n  final int cursorX=(row == cursorRow && cursorVisible) ? cursorCol : -1;\n  int selx1=-1, selx2=-1;\n  if (row >= selectionY1 && row <= selectionY2) {\n    if (row == selectionY1)     selx1=selectionX1;\n    selx2=(row == selectionY2) ? selectionX2 : mEmulator.mColumns;\n  }\n  TerminalRow lineObject=screen.allocateFullLineIfNecessary(screen.externalToInternalRow(row));\n  final char[] line=lineObject.mText;\n  final int charsUsedInLine=lineObject.getSpaceUsed();\n  long lastRunStyle=0;\n  boolean lastRunInsideCursor=false;\n  int lastRunStartColumn=-1;\n  int lastRunStartIndex=0;\n  boolean lastRunFontWidthMismatch=false;\n  int currentCharIndex=0;\n  float measuredWidthForRun=0.f;\n  for (int column=0; column < columns; ) {\n    final char charAtIndex=line[currentCharIndex];\n    final boolean charIsHighsurrogate=Character.isHighSurrogate(charAtIndex);\n    final int charsForCodePoint=charIsHighsurrogate ? 2 : 1;\n    final int codePoint=charIsHighsurrogate ? Character.toCodePoint(charAtIndex,line[currentCharIndex + 1]) : charAtIndex;\n    final int codePointWcWidth=WcWidth.width(codePoint);\n    final boolean insideCursor=(column >= selx1 && column <= selx2) || (cursorX == column || (codePointWcWidth == 2 && cursorX == column + 1));\n    final long style=lineObject.getStyle(column);\n    final float measuredCodePointWidth=(codePoint < asciiMeasures.length) ? asciiMeasures[codePoint] : mTextPaint.measureText(line,currentCharIndex,charsForCodePoint);\n    final boolean fontWidthMismatch=Math.abs(measuredCodePointWidth / mFontWidth - codePointWcWidth) > 0.01;\n    if (style != lastRunStyle || insideCursor != lastRunInsideCursor || fontWidthMismatch || lastRunFontWidthMismatch) {\n      if (column == 0) {\n      }\n else {\n        final int columnWidthSinceLastRun=column - lastRunStartColumn;\n        final int charsSinceLastRun=currentCharIndex - lastRunStartIndex;\n        drawTextRun(canvas,line,palette,heightOffset,lastRunStartColumn,columnWidthSinceLastRun,lastRunStartIndex,charsSinceLastRun,measuredWidthForRun,lastRunInsideCursor,lastRunStyle,reverseVideo);\n      }\n      measuredWidthForRun=0.f;\n      lastRunStyle=style;\n      lastRunInsideCursor=insideCursor;\n      lastRunStartColumn=column;\n      lastRunStartIndex=currentCharIndex;\n      lastRunFontWidthMismatch=fontWidthMismatch;\n    }\n    measuredWidthForRun+=measuredCodePointWidth;\n    column+=codePointWcWidth;\n    currentCharIndex+=charsForCodePoint;\n    while (currentCharIndex < charsUsedInLine && WcWidth.width(line,currentCharIndex) <= 0) {\n      currentCharIndex+=Character.isHighSurrogate(line[currentCharIndex]) ? 2 : 1;\n    }\n  }\n  final int columnWidthSinceLastRun=columns - lastRunStartColumn;\n  final int charsSinceLastRun=currentCharIndex - lastRunStartIndex;\n  drawTextRun(canvas,line,palette,heightOffset,lastRunStartColumn,columnWidthSinceLastRun,lastRunStartIndex,charsSinceLastRun,measuredWidthForRun,lastRunInsideCursor,lastRunStyle,reverseVideo);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 414,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5186,
        "startLineNumber" : 57,
        "startColumnNumber" : 152,
        "endLineNumber" : 141,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final boolean reverseVideo=mEmulator.isReverseVideo();\n  final int endRow=topRow + mEmulator.mRows;\n  final int columns=mEmulator.mColumns;\n  final int cursorCol=mEmulator.getCursorCol();\n  final int cursorRow=mEmulator.getCursorRow();\n  final boolean cursorVisible=mEmulator.isShowingCursor();\n  final TerminalBuffer screen=mEmulator.getScreen();\n  final int[] palette=mEmulator.mColors.mCurrentColors;\n  if (reverseVideo)   canvas.drawColor(palette[TextStyle.COLOR_INDEX_FOREGROUND],PorterDuff.Mode.SRC);\n  float heightOffset=mFontLineSpacingAndAscent;\n  for (int row=topRow; row < endRow; row++) {\n    heightOffset+=mFontLineSpacing;\n    final int cursorX=(row == cursorRow && cursorVisible) ? cursorCol : -1;\n    int selx1=-1, selx2=-1;\n    if (row >= selectionY1 && row <= selectionY2) {\n      if (row == selectionY1)       selx1=selectionX1;\n      selx2=(row == selectionY2) ? selectionX2 : mEmulator.mColumns;\n    }\n    TerminalRow lineObject=screen.allocateFullLineIfNecessary(screen.externalToInternalRow(row));\n    final char[] line=lineObject.mText;\n    final int charsUsedInLine=lineObject.getSpaceUsed();\n    long lastRunStyle=0;\n    boolean lastRunInsideCursor=false;\n    int lastRunStartColumn=-1;\n    int lastRunStartIndex=0;\n    boolean lastRunFontWidthMismatch=false;\n    int currentCharIndex=0;\n    float measuredWidthForRun=0.f;\n    for (int column=0; column < columns; ) {\n      final char charAtIndex=line[currentCharIndex];\n      final boolean charIsHighsurrogate=Character.isHighSurrogate(charAtIndex);\n      final int charsForCodePoint=charIsHighsurrogate ? 2 : 1;\n      final int codePoint=charIsHighsurrogate ? Character.toCodePoint(charAtIndex,line[currentCharIndex + 1]) : charAtIndex;\n      final int codePointWcWidth=WcWidth.width(codePoint);\n      final boolean insideCursor=(column >= selx1 && column <= selx2) || (cursorX == column || (codePointWcWidth == 2 && cursorX == column + 1));\n      final long style=lineObject.getStyle(column);\n      final float measuredCodePointWidth=(codePoint < asciiMeasures.length) ? asciiMeasures[codePoint] : mTextPaint.measureText(line,currentCharIndex,charsForCodePoint);\n      final boolean fontWidthMismatch=Math.abs(measuredCodePointWidth / mFontWidth - codePointWcWidth) > 0.01;\n      if (style != lastRunStyle || insideCursor != lastRunInsideCursor || fontWidthMismatch || lastRunFontWidthMismatch) {\n        if (column == 0) {\n        }\n else {\n          final int columnWidthSinceLastRun=column - lastRunStartColumn;\n          final int charsSinceLastRun=currentCharIndex - lastRunStartIndex;\n          drawTextRun(canvas,line,palette,heightOffset,lastRunStartColumn,columnWidthSinceLastRun,lastRunStartIndex,charsSinceLastRun,measuredWidthForRun,lastRunInsideCursor,lastRunStyle,reverseVideo);\n        }\n        measuredWidthForRun=0.f;\n        lastRunStyle=style;\n        lastRunInsideCursor=insideCursor;\n        lastRunStartColumn=column;\n        lastRunStartIndex=currentCharIndex;\n        lastRunFontWidthMismatch=fontWidthMismatch;\n      }\n      measuredWidthForRun+=measuredCodePointWidth;\n      column+=codePointWcWidth;\n      currentCharIndex+=charsForCodePoint;\n      while (currentCharIndex < charsUsedInLine && WcWidth.width(line,currentCharIndex) <= 0) {\n        currentCharIndex+=Character.isHighSurrogate(line[currentCharIndex]) ? 2 : 1;\n      }\n    }\n    final int columnWidthSinceLastRun=columns - lastRunStartColumn;\n    final int charsSinceLastRun=currentCharIndex - lastRunStartIndex;\n    drawTextRun(canvas,line,palette,heightOffset,lastRunStartColumn,columnWidthSinceLastRun,lastRunStartIndex,charsSinceLastRun,measuredWidthForRun,lastRunInsideCursor,lastRunStyle,reverseVideo);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 507,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5448,
        "startLineNumber" : 56,
        "startColumnNumber" : 4,
        "endLineNumber" : 141,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Render the terminal to a canvas with at a specified row scroll, and an optional rectangular selection. \n */\npublic final void render(TerminalEmulator mEmulator,Canvas canvas,int topRow,int selectionY1,int selectionY2,int selectionX1,int selectionX2){\n  final boolean reverseVideo=mEmulator.isReverseVideo();\n  final int endRow=topRow + mEmulator.mRows;\n  final int columns=mEmulator.mColumns;\n  final int cursorCol=mEmulator.getCursorCol();\n  final int cursorRow=mEmulator.getCursorRow();\n  final boolean cursorVisible=mEmulator.isShowingCursor();\n  final TerminalBuffer screen=mEmulator.getScreen();\n  final int[] palette=mEmulator.mColors.mCurrentColors;\n  if (reverseVideo)   canvas.drawColor(palette[TextStyle.COLOR_INDEX_FOREGROUND],PorterDuff.Mode.SRC);\n  float heightOffset=mFontLineSpacingAndAscent;\n  for (int row=topRow; row < endRow; row++) {\n    heightOffset+=mFontLineSpacing;\n    final int cursorX=(row == cursorRow && cursorVisible) ? cursorCol : -1;\n    int selx1=-1, selx2=-1;\n    if (row >= selectionY1 && row <= selectionY2) {\n      if (row == selectionY1)       selx1=selectionX1;\n      selx2=(row == selectionY2) ? selectionX2 : mEmulator.mColumns;\n    }\n    TerminalRow lineObject=screen.allocateFullLineIfNecessary(screen.externalToInternalRow(row));\n    final char[] line=lineObject.mText;\n    final int charsUsedInLine=lineObject.getSpaceUsed();\n    long lastRunStyle=0;\n    boolean lastRunInsideCursor=false;\n    int lastRunStartColumn=-1;\n    int lastRunStartIndex=0;\n    boolean lastRunFontWidthMismatch=false;\n    int currentCharIndex=0;\n    float measuredWidthForRun=0.f;\n    for (int column=0; column < columns; ) {\n      final char charAtIndex=line[currentCharIndex];\n      final boolean charIsHighsurrogate=Character.isHighSurrogate(charAtIndex);\n      final int charsForCodePoint=charIsHighsurrogate ? 2 : 1;\n      final int codePoint=charIsHighsurrogate ? Character.toCodePoint(charAtIndex,line[currentCharIndex + 1]) : charAtIndex;\n      final int codePointWcWidth=WcWidth.width(codePoint);\n      final boolean insideCursor=(column >= selx1 && column <= selx2) || (cursorX == column || (codePointWcWidth == 2 && cursorX == column + 1));\n      final long style=lineObject.getStyle(column);\n      final float measuredCodePointWidth=(codePoint < asciiMeasures.length) ? asciiMeasures[codePoint] : mTextPaint.measureText(line,currentCharIndex,charsForCodePoint);\n      final boolean fontWidthMismatch=Math.abs(measuredCodePointWidth / mFontWidth - codePointWcWidth) > 0.01;\n      if (style != lastRunStyle || insideCursor != lastRunInsideCursor || fontWidthMismatch || lastRunFontWidthMismatch) {\n        if (column == 0) {\n        }\n else {\n          final int columnWidthSinceLastRun=column - lastRunStartColumn;\n          final int charsSinceLastRun=currentCharIndex - lastRunStartIndex;\n          drawTextRun(canvas,line,palette,heightOffset,lastRunStartColumn,columnWidthSinceLastRun,lastRunStartIndex,charsSinceLastRun,measuredWidthForRun,lastRunInsideCursor,lastRunStyle,reverseVideo);\n        }\n        measuredWidthForRun=0.f;\n        lastRunStyle=style;\n        lastRunInsideCursor=insideCursor;\n        lastRunStartColumn=column;\n        lastRunStartIndex=currentCharIndex;\n        lastRunFontWidthMismatch=fontWidthMismatch;\n      }\n      measuredWidthForRun+=measuredCodePointWidth;\n      column+=codePointWcWidth;\n      currentCharIndex+=charsForCodePoint;\n      while (currentCharIndex < charsUsedInLine && WcWidth.width(line,currentCharIndex) <= 0) {\n        currentCharIndex+=Character.isHighSurrogate(line[currentCharIndex]) ? 2 : 1;\n      }\n    }\n    final int columnWidthSinceLastRun=columns - lastRunStartColumn;\n    final int charsSinceLastRun=currentCharIndex - lastRunStartIndex;\n    drawTextRun(canvas,line,palette,heightOffset,lastRunStartColumn,columnWidthSinceLastRun,lastRunStartIndex,charsSinceLastRun,measuredWidthForRun,lastRunInsideCursor,lastRunStyle,reverseVideo);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 536,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 106,
        "startLineNumber" : 108,
        "startColumnNumber" : 16,
        "endLineNumber" : 108,
        "endColumnNumber" : 122
      },
      "nodeContext" : "final boolean fontWidthMismatch=Math.abs(measuredCodePointWidth / mFontWidth - codePointWcWidth) > 0.01;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 15,
      "astHeight" : 7
    },
    "tokenLength" : 7,
    "type" : "float"
  } ],
  "positionList" : [ {
    "charLength" : 64,
    "startLineNumber" : 108,
    "startColumnNumber" : 50,
    "endLineNumber" : 108,
    "endColumnNumber" : 114
  } ],
  "layoutRelationDataList" : [ ]
}