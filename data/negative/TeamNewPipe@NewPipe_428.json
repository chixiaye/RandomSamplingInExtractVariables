{
  "id" : 428,
  "expression" : "candidates",
  "projectName" : "TeamNewPipe@NewPipe",
  "commitID" : "d7574973e97fa7a3a21aa59967311f6091941830",
  "filePath" : "/app/src/main/java/org/schabi/newpipe/views/LargeTextMovementMethod.java",
  "occurrences" : 5,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "candidates",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 148,
      "startColumnNumber" : 12,
      "endLineNumber" : 148,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 148,
        "startColumnNumber" : 12,
        "endLineNumber" : 148,
        "endColumnNumber" : 29
      },
      "nodeContext" : "candidates.length",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 148,
        "startColumnNumber" : 12,
        "endLineNumber" : 148,
        "endColumnNumber" : 34
      },
      "nodeContext" : "candidates.length != 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 920,
        "startLineNumber" : 148,
        "startColumnNumber" : 8,
        "endLineNumber" : 174,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (candidates.length != 0) {\n  int a=Selection.getSelectionStart(buffer);\n  int b=Selection.getSelectionEnd(buffer);\n  int selStart=Math.min(a,b);\n  int selEnd=Math.max(a,b);\n  int bestStart=-1;\n  int bestEnd=-1;\n  for (int i=0; i < candidates.length; i++) {\n    int start=buffer.getSpanStart(candidates[i]);\n    int end=buffer.getSpanEnd(candidates[i]);\n    if ((end < selEnd || selStart == selEnd) && start >= visibleStart) {\n      if (end > bestEnd) {\n        bestStart=buffer.getSpanStart(candidates[i]);\n        bestEnd=end;\n      }\n    }\n  }\n  if (bestStart >= 0) {\n    Selection.setSelection(buffer,bestEnd,bestStart);\n    return true;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 133,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2164,
        "startLineNumber" : 120,
        "startColumnNumber" : 74,
        "endLineNumber" : 184,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Layout layout=view.getLayout();\n  if (layout == null) {\n    return false;\n  }\n  View root=findScrollableParent(view);\n  int rootHeight=root.getHeight();\n  if (visibleRect.top >= 0) {\n    return false;\n  }\n  int topExtra=-visibleRect.top;\n  int firstVisibleLineNumber=layout.getLineForVertical(topExtra);\n  int visibleStart=firstVisibleLineNumber == 0 ? 0 : layout.getLineStart(firstVisibleLineNumber - 1);\n  ClickableSpan[] candidates=buffer.getSpans(visibleStart,buffer.length(),ClickableSpan.class);\n  if (candidates.length != 0) {\n    int a=Selection.getSelectionStart(buffer);\n    int b=Selection.getSelectionEnd(buffer);\n    int selStart=Math.min(a,b);\n    int selEnd=Math.max(a,b);\n    int bestStart=-1;\n    int bestEnd=-1;\n    for (int i=0; i < candidates.length; i++) {\n      int start=buffer.getSpanStart(candidates[i]);\n      int end=buffer.getSpanEnd(candidates[i]);\n      if ((end < selEnd || selStart == selEnd) && start >= visibleStart) {\n        if (end > bestEnd) {\n          bestStart=buffer.getSpanStart(candidates[i]);\n          bestEnd=end;\n        }\n      }\n    }\n    if (bestStart >= 0) {\n      Selection.setSelection(buffer,bestEnd,bestStart);\n      return true;\n    }\n  }\n  float fourLines=view.getTextSize() * 4;\n  visibleRect.left=0;\n  visibleRect.right=view.getWidth();\n  visibleRect.top=Math.max(0,(int)(topExtra - fourLines));\n  visibleRect.bottom=visibleRect.top + rootHeight;\n  return view.requestRectangleOnScreen(visibleRect);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 274,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2234,
        "startLineNumber" : 120,
        "startColumnNumber" : 4,
        "endLineNumber" : 184,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private boolean gotoPrev(final TextView view,final Spannable buffer){\n  Layout layout=view.getLayout();\n  if (layout == null) {\n    return false;\n  }\n  View root=findScrollableParent(view);\n  int rootHeight=root.getHeight();\n  if (visibleRect.top >= 0) {\n    return false;\n  }\n  int topExtra=-visibleRect.top;\n  int firstVisibleLineNumber=layout.getLineForVertical(topExtra);\n  int visibleStart=firstVisibleLineNumber == 0 ? 0 : layout.getLineStart(firstVisibleLineNumber - 1);\n  ClickableSpan[] candidates=buffer.getSpans(visibleStart,buffer.length(),ClickableSpan.class);\n  if (candidates.length != 0) {\n    int a=Selection.getSelectionStart(buffer);\n    int b=Selection.getSelectionEnd(buffer);\n    int selStart=Math.min(a,b);\n    int selEnd=Math.max(a,b);\n    int bestStart=-1;\n    int bestEnd=-1;\n    for (int i=0; i < candidates.length; i++) {\n      int start=buffer.getSpanStart(candidates[i]);\n      int end=buffer.getSpanEnd(candidates[i]);\n      if ((end < selEnd || selStart == selEnd) && start >= visibleStart) {\n        if (end > bestEnd) {\n          bestStart=buffer.getSpanStart(candidates[i]);\n          bestEnd=end;\n        }\n      }\n    }\n    if (bestStart >= 0) {\n      Selection.setSelection(buffer,bestEnd,bestStart);\n      return true;\n    }\n  }\n  float fourLines=view.getTextSize() * 4;\n  visibleRect.left=0;\n  visibleRect.right=view.getWidth();\n  visibleRect.top=Math.max(0,(int)(topExtra - fourLines));\n  visibleRect.bottom=visibleRect.top + rootHeight;\n  return view.requestRectangleOnScreen(visibleRect);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 288,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 148,
        "startColumnNumber" : 12,
        "endLineNumber" : 148,
        "endColumnNumber" : 34
      },
      "nodeContext" : "candidates.length != 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "candidates",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 158,
      "startColumnNumber" : 32,
      "endLineNumber" : 158,
      "endColumnNumber" : 42
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 158,
        "startColumnNumber" : 32,
        "endLineNumber" : 158,
        "endColumnNumber" : 49
      },
      "nodeContext" : "candidates.length",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 158,
        "startColumnNumber" : 28,
        "endLineNumber" : 158,
        "endColumnNumber" : 49
      },
      "nodeContext" : "i < candidates.length",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 461,
        "startLineNumber" : 158,
        "startColumnNumber" : 12,
        "endLineNumber" : 168,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int i=0; i < candidates.length; i++) {\n  int start=buffer.getSpanStart(candidates[i]);\n  int end=buffer.getSpanEnd(candidates[i]);\n  if ((end < selEnd || selStart == selEnd) && start >= visibleStart) {\n    if (end > bestEnd) {\n      bestStart=buffer.getSpanStart(candidates[i]);\n      bestEnd=end;\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 66,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 892,
        "startLineNumber" : 148,
        "startColumnNumber" : 36,
        "endLineNumber" : 174,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  int a=Selection.getSelectionStart(buffer);\n  int b=Selection.getSelectionEnd(buffer);\n  int selStart=Math.min(a,b);\n  int selEnd=Math.max(a,b);\n  int bestStart=-1;\n  int bestEnd=-1;\n  for (int i=0; i < candidates.length; i++) {\n    int start=buffer.getSpanStart(candidates[i]);\n    int end=buffer.getSpanEnd(candidates[i]);\n    if ((end < selEnd || selStart == selEnd) && start >= visibleStart) {\n      if (end > bestEnd) {\n        bestStart=buffer.getSpanStart(candidates[i]);\n        bestEnd=end;\n      }\n    }\n  }\n  if (bestStart >= 0) {\n    Selection.setSelection(buffer,bestEnd,bestStart);\n    return true;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 127,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 920,
        "startLineNumber" : 148,
        "startColumnNumber" : 8,
        "endLineNumber" : 174,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (candidates.length != 0) {\n  int a=Selection.getSelectionStart(buffer);\n  int b=Selection.getSelectionEnd(buffer);\n  int selStart=Math.min(a,b);\n  int selEnd=Math.max(a,b);\n  int bestStart=-1;\n  int bestEnd=-1;\n  for (int i=0; i < candidates.length; i++) {\n    int start=buffer.getSpanStart(candidates[i]);\n    int end=buffer.getSpanEnd(candidates[i]);\n    if ((end < selEnd || selStart == selEnd) && start >= visibleStart) {\n      if (end > bestEnd) {\n        bestStart=buffer.getSpanStart(candidates[i]);\n        bestEnd=end;\n      }\n    }\n  }\n  if (bestStart >= 0) {\n    Selection.setSelection(buffer,bestEnd,bestStart);\n    return true;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 133,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2164,
        "startLineNumber" : 120,
        "startColumnNumber" : 74,
        "endLineNumber" : 184,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Layout layout=view.getLayout();\n  if (layout == null) {\n    return false;\n  }\n  View root=findScrollableParent(view);\n  int rootHeight=root.getHeight();\n  if (visibleRect.top >= 0) {\n    return false;\n  }\n  int topExtra=-visibleRect.top;\n  int firstVisibleLineNumber=layout.getLineForVertical(topExtra);\n  int visibleStart=firstVisibleLineNumber == 0 ? 0 : layout.getLineStart(firstVisibleLineNumber - 1);\n  ClickableSpan[] candidates=buffer.getSpans(visibleStart,buffer.length(),ClickableSpan.class);\n  if (candidates.length != 0) {\n    int a=Selection.getSelectionStart(buffer);\n    int b=Selection.getSelectionEnd(buffer);\n    int selStart=Math.min(a,b);\n    int selEnd=Math.max(a,b);\n    int bestStart=-1;\n    int bestEnd=-1;\n    for (int i=0; i < candidates.length; i++) {\n      int start=buffer.getSpanStart(candidates[i]);\n      int end=buffer.getSpanEnd(candidates[i]);\n      if ((end < selEnd || selStart == selEnd) && start >= visibleStart) {\n        if (end > bestEnd) {\n          bestStart=buffer.getSpanStart(candidates[i]);\n          bestEnd=end;\n        }\n      }\n    }\n    if (bestStart >= 0) {\n      Selection.setSelection(buffer,bestEnd,bestStart);\n      return true;\n    }\n  }\n  float fourLines=view.getTextSize() * 4;\n  visibleRect.left=0;\n  visibleRect.right=view.getWidth();\n  visibleRect.top=Math.max(0,(int)(topExtra - fourLines));\n  visibleRect.bottom=visibleRect.top + rootHeight;\n  return view.requestRectangleOnScreen(visibleRect);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 274,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2234,
        "startLineNumber" : 120,
        "startColumnNumber" : 4,
        "endLineNumber" : 184,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private boolean gotoPrev(final TextView view,final Spannable buffer){\n  Layout layout=view.getLayout();\n  if (layout == null) {\n    return false;\n  }\n  View root=findScrollableParent(view);\n  int rootHeight=root.getHeight();\n  if (visibleRect.top >= 0) {\n    return false;\n  }\n  int topExtra=-visibleRect.top;\n  int firstVisibleLineNumber=layout.getLineForVertical(topExtra);\n  int visibleStart=firstVisibleLineNumber == 0 ? 0 : layout.getLineStart(firstVisibleLineNumber - 1);\n  ClickableSpan[] candidates=buffer.getSpans(visibleStart,buffer.length(),ClickableSpan.class);\n  if (candidates.length != 0) {\n    int a=Selection.getSelectionStart(buffer);\n    int b=Selection.getSelectionEnd(buffer);\n    int selStart=Math.min(a,b);\n    int selEnd=Math.max(a,b);\n    int bestStart=-1;\n    int bestEnd=-1;\n    for (int i=0; i < candidates.length; i++) {\n      int start=buffer.getSpanStart(candidates[i]);\n      int end=buffer.getSpanEnd(candidates[i]);\n      if ((end < selEnd || selStart == selEnd) && start >= visibleStart) {\n        if (end > bestEnd) {\n          bestStart=buffer.getSpanStart(candidates[i]);\n          bestEnd=end;\n        }\n      }\n    }\n    if (bestStart >= 0) {\n      Selection.setSelection(buffer,bestEnd,bestStart);\n      return true;\n    }\n  }\n  float fourLines=view.getTextSize() * 4;\n  visibleRect.left=0;\n  visibleRect.right=view.getWidth();\n  visibleRect.top=Math.max(0,(int)(topExtra - fourLines));\n  visibleRect.bottom=visibleRect.top + rootHeight;\n  return view.requestRectangleOnScreen(visibleRect);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 288,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 158,
        "startColumnNumber" : 28,
        "endLineNumber" : 158,
        "endColumnNumber" : 49
      },
      "nodeContext" : "i < candidates.length",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "candidates",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 159,
      "startColumnNumber" : 48,
      "endLineNumber" : 159,
      "endColumnNumber" : 58
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 159,
        "startColumnNumber" : 48,
        "endLineNumber" : 159,
        "endColumnNumber" : 61
      },
      "nodeContext" : "candidates[i]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 159,
        "startColumnNumber" : 28,
        "endLineNumber" : 159,
        "endColumnNumber" : 62
      },
      "nodeContext" : "buffer.getSpanStart(candidates[i])",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 159,
        "startColumnNumber" : 20,
        "endLineNumber" : 159,
        "endColumnNumber" : 62
      },
      "nodeContext" : "start=buffer.getSpanStart(candidates[i])",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 159,
        "startColumnNumber" : 16,
        "endLineNumber" : 159,
        "endColumnNumber" : 63
      },
      "nodeContext" : "int start=buffer.getSpanStart(candidates[i]);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 417,
        "startLineNumber" : 158,
        "startColumnNumber" : 56,
        "endLineNumber" : 168,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  int start=buffer.getSpanStart(candidates[i]);\n  int end=buffer.getSpanEnd(candidates[i]);\n  if ((end < selEnd || selStart == selEnd) && start >= visibleStart) {\n    if (end > bestEnd) {\n      bestStart=buffer.getSpanStart(candidates[i]);\n      bestEnd=end;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 53,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 461,
        "startLineNumber" : 158,
        "startColumnNumber" : 12,
        "endLineNumber" : 168,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int i=0; i < candidates.length; i++) {\n  int start=buffer.getSpanStart(candidates[i]);\n  int end=buffer.getSpanEnd(candidates[i]);\n  if ((end < selEnd || selStart == selEnd) && start >= visibleStart) {\n    if (end > bestEnd) {\n      bestStart=buffer.getSpanStart(candidates[i]);\n      bestEnd=end;\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 66,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 892,
        "startLineNumber" : 148,
        "startColumnNumber" : 36,
        "endLineNumber" : 174,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  int a=Selection.getSelectionStart(buffer);\n  int b=Selection.getSelectionEnd(buffer);\n  int selStart=Math.min(a,b);\n  int selEnd=Math.max(a,b);\n  int bestStart=-1;\n  int bestEnd=-1;\n  for (int i=0; i < candidates.length; i++) {\n    int start=buffer.getSpanStart(candidates[i]);\n    int end=buffer.getSpanEnd(candidates[i]);\n    if ((end < selEnd || selStart == selEnd) && start >= visibleStart) {\n      if (end > bestEnd) {\n        bestStart=buffer.getSpanStart(candidates[i]);\n        bestEnd=end;\n      }\n    }\n  }\n  if (bestStart >= 0) {\n    Selection.setSelection(buffer,bestEnd,bestStart);\n    return true;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 127,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 920,
        "startLineNumber" : 148,
        "startColumnNumber" : 8,
        "endLineNumber" : 174,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (candidates.length != 0) {\n  int a=Selection.getSelectionStart(buffer);\n  int b=Selection.getSelectionEnd(buffer);\n  int selStart=Math.min(a,b);\n  int selEnd=Math.max(a,b);\n  int bestStart=-1;\n  int bestEnd=-1;\n  for (int i=0; i < candidates.length; i++) {\n    int start=buffer.getSpanStart(candidates[i]);\n    int end=buffer.getSpanEnd(candidates[i]);\n    if ((end < selEnd || selStart == selEnd) && start >= visibleStart) {\n      if (end > bestEnd) {\n        bestStart=buffer.getSpanStart(candidates[i]);\n        bestEnd=end;\n      }\n    }\n  }\n  if (bestStart >= 0) {\n    Selection.setSelection(buffer,bestEnd,bestStart);\n    return true;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 133,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2164,
        "startLineNumber" : 120,
        "startColumnNumber" : 74,
        "endLineNumber" : 184,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Layout layout=view.getLayout();\n  if (layout == null) {\n    return false;\n  }\n  View root=findScrollableParent(view);\n  int rootHeight=root.getHeight();\n  if (visibleRect.top >= 0) {\n    return false;\n  }\n  int topExtra=-visibleRect.top;\n  int firstVisibleLineNumber=layout.getLineForVertical(topExtra);\n  int visibleStart=firstVisibleLineNumber == 0 ? 0 : layout.getLineStart(firstVisibleLineNumber - 1);\n  ClickableSpan[] candidates=buffer.getSpans(visibleStart,buffer.length(),ClickableSpan.class);\n  if (candidates.length != 0) {\n    int a=Selection.getSelectionStart(buffer);\n    int b=Selection.getSelectionEnd(buffer);\n    int selStart=Math.min(a,b);\n    int selEnd=Math.max(a,b);\n    int bestStart=-1;\n    int bestEnd=-1;\n    for (int i=0; i < candidates.length; i++) {\n      int start=buffer.getSpanStart(candidates[i]);\n      int end=buffer.getSpanEnd(candidates[i]);\n      if ((end < selEnd || selStart == selEnd) && start >= visibleStart) {\n        if (end > bestEnd) {\n          bestStart=buffer.getSpanStart(candidates[i]);\n          bestEnd=end;\n        }\n      }\n    }\n    if (bestStart >= 0) {\n      Selection.setSelection(buffer,bestEnd,bestStart);\n      return true;\n    }\n  }\n  float fourLines=view.getTextSize() * 4;\n  visibleRect.left=0;\n  visibleRect.right=view.getWidth();\n  visibleRect.top=Math.max(0,(int)(topExtra - fourLines));\n  visibleRect.bottom=visibleRect.top + rootHeight;\n  return view.requestRectangleOnScreen(visibleRect);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 274,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2234,
        "startLineNumber" : 120,
        "startColumnNumber" : 4,
        "endLineNumber" : 184,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private boolean gotoPrev(final TextView view,final Spannable buffer){\n  Layout layout=view.getLayout();\n  if (layout == null) {\n    return false;\n  }\n  View root=findScrollableParent(view);\n  int rootHeight=root.getHeight();\n  if (visibleRect.top >= 0) {\n    return false;\n  }\n  int topExtra=-visibleRect.top;\n  int firstVisibleLineNumber=layout.getLineForVertical(topExtra);\n  int visibleStart=firstVisibleLineNumber == 0 ? 0 : layout.getLineStart(firstVisibleLineNumber - 1);\n  ClickableSpan[] candidates=buffer.getSpans(visibleStart,buffer.length(),ClickableSpan.class);\n  if (candidates.length != 0) {\n    int a=Selection.getSelectionStart(buffer);\n    int b=Selection.getSelectionEnd(buffer);\n    int selStart=Math.min(a,b);\n    int selEnd=Math.max(a,b);\n    int bestStart=-1;\n    int bestEnd=-1;\n    for (int i=0; i < candidates.length; i++) {\n      int start=buffer.getSpanStart(candidates[i]);\n      int end=buffer.getSpanEnd(candidates[i]);\n      if ((end < selEnd || selStart == selEnd) && start >= visibleStart) {\n        if (end > bestEnd) {\n          bestStart=buffer.getSpanStart(candidates[i]);\n          bestEnd=end;\n        }\n      }\n    }\n    if (bestStart >= 0) {\n      Selection.setSelection(buffer,bestEnd,bestStart);\n      return true;\n    }\n  }\n  float fourLines=view.getTextSize() * 4;\n  visibleRect.left=0;\n  visibleRect.right=view.getWidth();\n  visibleRect.top=Math.max(0,(int)(topExtra - fourLines));\n  visibleRect.bottom=visibleRect.top + rootHeight;\n  return view.requestRectangleOnScreen(visibleRect);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 288,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 159,
        "startColumnNumber" : 16,
        "endLineNumber" : 159,
        "endColumnNumber" : 63
      },
      "nodeContext" : "int start=buffer.getSpanStart(candidates[i]);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.schabi.newpipe.views.ClickableSpan[]"
  }, {
    "nodeContext" : "candidates",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 160,
      "startColumnNumber" : 44,
      "endLineNumber" : 160,
      "endColumnNumber" : 54
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 160,
        "startColumnNumber" : 44,
        "endLineNumber" : 160,
        "endColumnNumber" : 57
      },
      "nodeContext" : "candidates[i]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 160,
        "startColumnNumber" : 26,
        "endLineNumber" : 160,
        "endColumnNumber" : 58
      },
      "nodeContext" : "buffer.getSpanEnd(candidates[i])",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 160,
        "startColumnNumber" : 20,
        "endLineNumber" : 160,
        "endColumnNumber" : 58
      },
      "nodeContext" : "end=buffer.getSpanEnd(candidates[i])",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 160,
        "startColumnNumber" : 16,
        "endLineNumber" : 160,
        "endColumnNumber" : 59
      },
      "nodeContext" : "int end=buffer.getSpanEnd(candidates[i]);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 417,
        "startLineNumber" : 158,
        "startColumnNumber" : 56,
        "endLineNumber" : 168,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  int start=buffer.getSpanStart(candidates[i]);\n  int end=buffer.getSpanEnd(candidates[i]);\n  if ((end < selEnd || selStart == selEnd) && start >= visibleStart) {\n    if (end > bestEnd) {\n      bestStart=buffer.getSpanStart(candidates[i]);\n      bestEnd=end;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 53,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 461,
        "startLineNumber" : 158,
        "startColumnNumber" : 12,
        "endLineNumber" : 168,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int i=0; i < candidates.length; i++) {\n  int start=buffer.getSpanStart(candidates[i]);\n  int end=buffer.getSpanEnd(candidates[i]);\n  if ((end < selEnd || selStart == selEnd) && start >= visibleStart) {\n    if (end > bestEnd) {\n      bestStart=buffer.getSpanStart(candidates[i]);\n      bestEnd=end;\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 66,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 892,
        "startLineNumber" : 148,
        "startColumnNumber" : 36,
        "endLineNumber" : 174,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  int a=Selection.getSelectionStart(buffer);\n  int b=Selection.getSelectionEnd(buffer);\n  int selStart=Math.min(a,b);\n  int selEnd=Math.max(a,b);\n  int bestStart=-1;\n  int bestEnd=-1;\n  for (int i=0; i < candidates.length; i++) {\n    int start=buffer.getSpanStart(candidates[i]);\n    int end=buffer.getSpanEnd(candidates[i]);\n    if ((end < selEnd || selStart == selEnd) && start >= visibleStart) {\n      if (end > bestEnd) {\n        bestStart=buffer.getSpanStart(candidates[i]);\n        bestEnd=end;\n      }\n    }\n  }\n  if (bestStart >= 0) {\n    Selection.setSelection(buffer,bestEnd,bestStart);\n    return true;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 127,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 920,
        "startLineNumber" : 148,
        "startColumnNumber" : 8,
        "endLineNumber" : 174,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (candidates.length != 0) {\n  int a=Selection.getSelectionStart(buffer);\n  int b=Selection.getSelectionEnd(buffer);\n  int selStart=Math.min(a,b);\n  int selEnd=Math.max(a,b);\n  int bestStart=-1;\n  int bestEnd=-1;\n  for (int i=0; i < candidates.length; i++) {\n    int start=buffer.getSpanStart(candidates[i]);\n    int end=buffer.getSpanEnd(candidates[i]);\n    if ((end < selEnd || selStart == selEnd) && start >= visibleStart) {\n      if (end > bestEnd) {\n        bestStart=buffer.getSpanStart(candidates[i]);\n        bestEnd=end;\n      }\n    }\n  }\n  if (bestStart >= 0) {\n    Selection.setSelection(buffer,bestEnd,bestStart);\n    return true;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 133,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2164,
        "startLineNumber" : 120,
        "startColumnNumber" : 74,
        "endLineNumber" : 184,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Layout layout=view.getLayout();\n  if (layout == null) {\n    return false;\n  }\n  View root=findScrollableParent(view);\n  int rootHeight=root.getHeight();\n  if (visibleRect.top >= 0) {\n    return false;\n  }\n  int topExtra=-visibleRect.top;\n  int firstVisibleLineNumber=layout.getLineForVertical(topExtra);\n  int visibleStart=firstVisibleLineNumber == 0 ? 0 : layout.getLineStart(firstVisibleLineNumber - 1);\n  ClickableSpan[] candidates=buffer.getSpans(visibleStart,buffer.length(),ClickableSpan.class);\n  if (candidates.length != 0) {\n    int a=Selection.getSelectionStart(buffer);\n    int b=Selection.getSelectionEnd(buffer);\n    int selStart=Math.min(a,b);\n    int selEnd=Math.max(a,b);\n    int bestStart=-1;\n    int bestEnd=-1;\n    for (int i=0; i < candidates.length; i++) {\n      int start=buffer.getSpanStart(candidates[i]);\n      int end=buffer.getSpanEnd(candidates[i]);\n      if ((end < selEnd || selStart == selEnd) && start >= visibleStart) {\n        if (end > bestEnd) {\n          bestStart=buffer.getSpanStart(candidates[i]);\n          bestEnd=end;\n        }\n      }\n    }\n    if (bestStart >= 0) {\n      Selection.setSelection(buffer,bestEnd,bestStart);\n      return true;\n    }\n  }\n  float fourLines=view.getTextSize() * 4;\n  visibleRect.left=0;\n  visibleRect.right=view.getWidth();\n  visibleRect.top=Math.max(0,(int)(topExtra - fourLines));\n  visibleRect.bottom=visibleRect.top + rootHeight;\n  return view.requestRectangleOnScreen(visibleRect);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 274,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2234,
        "startLineNumber" : 120,
        "startColumnNumber" : 4,
        "endLineNumber" : 184,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private boolean gotoPrev(final TextView view,final Spannable buffer){\n  Layout layout=view.getLayout();\n  if (layout == null) {\n    return false;\n  }\n  View root=findScrollableParent(view);\n  int rootHeight=root.getHeight();\n  if (visibleRect.top >= 0) {\n    return false;\n  }\n  int topExtra=-visibleRect.top;\n  int firstVisibleLineNumber=layout.getLineForVertical(topExtra);\n  int visibleStart=firstVisibleLineNumber == 0 ? 0 : layout.getLineStart(firstVisibleLineNumber - 1);\n  ClickableSpan[] candidates=buffer.getSpans(visibleStart,buffer.length(),ClickableSpan.class);\n  if (candidates.length != 0) {\n    int a=Selection.getSelectionStart(buffer);\n    int b=Selection.getSelectionEnd(buffer);\n    int selStart=Math.min(a,b);\n    int selEnd=Math.max(a,b);\n    int bestStart=-1;\n    int bestEnd=-1;\n    for (int i=0; i < candidates.length; i++) {\n      int start=buffer.getSpanStart(candidates[i]);\n      int end=buffer.getSpanEnd(candidates[i]);\n      if ((end < selEnd || selStart == selEnd) && start >= visibleStart) {\n        if (end > bestEnd) {\n          bestStart=buffer.getSpanStart(candidates[i]);\n          bestEnd=end;\n        }\n      }\n    }\n    if (bestStart >= 0) {\n      Selection.setSelection(buffer,bestEnd,bestStart);\n      return true;\n    }\n  }\n  float fourLines=view.getTextSize() * 4;\n  visibleRect.left=0;\n  visibleRect.right=view.getWidth();\n  visibleRect.top=Math.max(0,(int)(topExtra - fourLines));\n  visibleRect.bottom=visibleRect.top + rootHeight;\n  return view.requestRectangleOnScreen(visibleRect);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 288,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 160,
        "startColumnNumber" : 16,
        "endLineNumber" : 160,
        "endColumnNumber" : 59
      },
      "nodeContext" : "int end=buffer.getSpanEnd(candidates[i]);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.schabi.newpipe.views.ClickableSpan[]"
  }, {
    "nodeContext" : "candidates",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 164,
      "startColumnNumber" : 56,
      "endLineNumber" : 164,
      "endColumnNumber" : 66
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 164,
        "startColumnNumber" : 56,
        "endLineNumber" : 164,
        "endColumnNumber" : 69
      },
      "nodeContext" : "candidates[i]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 164,
        "startColumnNumber" : 36,
        "endLineNumber" : 164,
        "endColumnNumber" : 70
      },
      "nodeContext" : "buffer.getSpanStart(candidates[i])",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 164,
        "startColumnNumber" : 24,
        "endLineNumber" : 164,
        "endColumnNumber" : 70
      },
      "nodeContext" : "bestStart=buffer.getSpanStart(candidates[i])",
      "nodeType" : "Assignment",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 164,
        "startColumnNumber" : 24,
        "endLineNumber" : 164,
        "endColumnNumber" : 71
      },
      "nodeContext" : "bestStart=buffer.getSpanStart(candidates[i]);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 134,
        "startLineNumber" : 163,
        "startColumnNumber" : 39,
        "endLineNumber" : 166,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  bestStart=buffer.getSpanStart(candidates[i]);\n  bestEnd=end;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 153,
        "startLineNumber" : 163,
        "startColumnNumber" : 20,
        "endLineNumber" : 166,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (end > bestEnd) {\n  bestStart=buffer.getSpanStart(candidates[i]);\n  bestEnd=end;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 18,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 193,
        "startLineNumber" : 162,
        "startColumnNumber" : 83,
        "endLineNumber" : 167,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  if (end > bestEnd) {\n    bestStart=buffer.getSpanStart(candidates[i]);\n    bestEnd=end;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 19,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 260,
        "startLineNumber" : 162,
        "startColumnNumber" : 16,
        "endLineNumber" : 167,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if ((end < selEnd || selStart == selEnd) && start >= visibleStart) {\n  if (end > bestEnd) {\n    bestStart=buffer.getSpanStart(candidates[i]);\n    bestEnd=end;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 32,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 417,
        "startLineNumber" : 158,
        "startColumnNumber" : 56,
        "endLineNumber" : 168,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  int start=buffer.getSpanStart(candidates[i]);\n  int end=buffer.getSpanEnd(candidates[i]);\n  if ((end < selEnd || selStart == selEnd) && start >= visibleStart) {\n    if (end > bestEnd) {\n      bestStart=buffer.getSpanStart(candidates[i]);\n      bestEnd=end;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 53,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 461,
        "startLineNumber" : 158,
        "startColumnNumber" : 12,
        "endLineNumber" : 168,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int i=0; i < candidates.length; i++) {\n  int start=buffer.getSpanStart(candidates[i]);\n  int end=buffer.getSpanEnd(candidates[i]);\n  if ((end < selEnd || selStart == selEnd) && start >= visibleStart) {\n    if (end > bestEnd) {\n      bestStart=buffer.getSpanStart(candidates[i]);\n      bestEnd=end;\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 66,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 892,
        "startLineNumber" : 148,
        "startColumnNumber" : 36,
        "endLineNumber" : 174,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  int a=Selection.getSelectionStart(buffer);\n  int b=Selection.getSelectionEnd(buffer);\n  int selStart=Math.min(a,b);\n  int selEnd=Math.max(a,b);\n  int bestStart=-1;\n  int bestEnd=-1;\n  for (int i=0; i < candidates.length; i++) {\n    int start=buffer.getSpanStart(candidates[i]);\n    int end=buffer.getSpanEnd(candidates[i]);\n    if ((end < selEnd || selStart == selEnd) && start >= visibleStart) {\n      if (end > bestEnd) {\n        bestStart=buffer.getSpanStart(candidates[i]);\n        bestEnd=end;\n      }\n    }\n  }\n  if (bestStart >= 0) {\n    Selection.setSelection(buffer,bestEnd,bestStart);\n    return true;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 127,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 920,
        "startLineNumber" : 148,
        "startColumnNumber" : 8,
        "endLineNumber" : 174,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (candidates.length != 0) {\n  int a=Selection.getSelectionStart(buffer);\n  int b=Selection.getSelectionEnd(buffer);\n  int selStart=Math.min(a,b);\n  int selEnd=Math.max(a,b);\n  int bestStart=-1;\n  int bestEnd=-1;\n  for (int i=0; i < candidates.length; i++) {\n    int start=buffer.getSpanStart(candidates[i]);\n    int end=buffer.getSpanEnd(candidates[i]);\n    if ((end < selEnd || selStart == selEnd) && start >= visibleStart) {\n      if (end > bestEnd) {\n        bestStart=buffer.getSpanStart(candidates[i]);\n        bestEnd=end;\n      }\n    }\n  }\n  if (bestStart >= 0) {\n    Selection.setSelection(buffer,bestEnd,bestStart);\n    return true;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 133,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2164,
        "startLineNumber" : 120,
        "startColumnNumber" : 74,
        "endLineNumber" : 184,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Layout layout=view.getLayout();\n  if (layout == null) {\n    return false;\n  }\n  View root=findScrollableParent(view);\n  int rootHeight=root.getHeight();\n  if (visibleRect.top >= 0) {\n    return false;\n  }\n  int topExtra=-visibleRect.top;\n  int firstVisibleLineNumber=layout.getLineForVertical(topExtra);\n  int visibleStart=firstVisibleLineNumber == 0 ? 0 : layout.getLineStart(firstVisibleLineNumber - 1);\n  ClickableSpan[] candidates=buffer.getSpans(visibleStart,buffer.length(),ClickableSpan.class);\n  if (candidates.length != 0) {\n    int a=Selection.getSelectionStart(buffer);\n    int b=Selection.getSelectionEnd(buffer);\n    int selStart=Math.min(a,b);\n    int selEnd=Math.max(a,b);\n    int bestStart=-1;\n    int bestEnd=-1;\n    for (int i=0; i < candidates.length; i++) {\n      int start=buffer.getSpanStart(candidates[i]);\n      int end=buffer.getSpanEnd(candidates[i]);\n      if ((end < selEnd || selStart == selEnd) && start >= visibleStart) {\n        if (end > bestEnd) {\n          bestStart=buffer.getSpanStart(candidates[i]);\n          bestEnd=end;\n        }\n      }\n    }\n    if (bestStart >= 0) {\n      Selection.setSelection(buffer,bestEnd,bestStart);\n      return true;\n    }\n  }\n  float fourLines=view.getTextSize() * 4;\n  visibleRect.left=0;\n  visibleRect.right=view.getWidth();\n  visibleRect.top=Math.max(0,(int)(topExtra - fourLines));\n  visibleRect.bottom=visibleRect.top + rootHeight;\n  return view.requestRectangleOnScreen(visibleRect);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 274,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2234,
        "startLineNumber" : 120,
        "startColumnNumber" : 4,
        "endLineNumber" : 184,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private boolean gotoPrev(final TextView view,final Spannable buffer){\n  Layout layout=view.getLayout();\n  if (layout == null) {\n    return false;\n  }\n  View root=findScrollableParent(view);\n  int rootHeight=root.getHeight();\n  if (visibleRect.top >= 0) {\n    return false;\n  }\n  int topExtra=-visibleRect.top;\n  int firstVisibleLineNumber=layout.getLineForVertical(topExtra);\n  int visibleStart=firstVisibleLineNumber == 0 ? 0 : layout.getLineStart(firstVisibleLineNumber - 1);\n  ClickableSpan[] candidates=buffer.getSpans(visibleStart,buffer.length(),ClickableSpan.class);\n  if (candidates.length != 0) {\n    int a=Selection.getSelectionStart(buffer);\n    int b=Selection.getSelectionEnd(buffer);\n    int selStart=Math.min(a,b);\n    int selEnd=Math.max(a,b);\n    int bestStart=-1;\n    int bestEnd=-1;\n    for (int i=0; i < candidates.length; i++) {\n      int start=buffer.getSpanStart(candidates[i]);\n      int end=buffer.getSpanEnd(candidates[i]);\n      if ((end < selEnd || selStart == selEnd) && start >= visibleStart) {\n        if (end > bestEnd) {\n          bestStart=buffer.getSpanStart(candidates[i]);\n          bestEnd=end;\n        }\n      }\n    }\n    if (bestStart >= 0) {\n      Selection.setSelection(buffer,bestEnd,bestStart);\n      return true;\n    }\n  }\n  float fourLines=view.getTextSize() * 4;\n  visibleRect.left=0;\n  visibleRect.right=view.getWidth();\n  visibleRect.top=Math.max(0,(int)(topExtra - fourLines));\n  visibleRect.bottom=visibleRect.top + rootHeight;\n  return view.requestRectangleOnScreen(visibleRect);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 288,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 164,
        "startColumnNumber" : 24,
        "endLineNumber" : 164,
        "endColumnNumber" : 71
      },
      "nodeContext" : "bestStart=buffer.getSpanStart(candidates[i]);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.schabi.newpipe.views.ClickableSpan[]"
  } ],
  "positionList" : [ {
    "charLength" : 10,
    "startLineNumber" : 148,
    "startColumnNumber" : 12,
    "endLineNumber" : 148,
    "endColumnNumber" : 22
  }, {
    "charLength" : 10,
    "startLineNumber" : 158,
    "startColumnNumber" : 32,
    "endLineNumber" : 158,
    "endColumnNumber" : 42
  }, {
    "charLength" : 10,
    "startLineNumber" : 159,
    "startColumnNumber" : 48,
    "endLineNumber" : 159,
    "endColumnNumber" : 58
  }, {
    "charLength" : 10,
    "startLineNumber" : 160,
    "startColumnNumber" : 44,
    "endLineNumber" : 160,
    "endColumnNumber" : 54
  }, {
    "charLength" : 10,
    "startLineNumber" : 164,
    "startColumnNumber" : 56,
    "endLineNumber" : 164,
    "endColumnNumber" : 66
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 11
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 9
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 8
  } ]
}