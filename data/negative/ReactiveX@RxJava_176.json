{
  "id" : 176,
  "expression" : "100",
  "projectName" : "ReactiveX@RxJava",
  "commitID" : "75c40b58fc3f56283ad88ce299c72419975f6b00",
  "filePath" : "/src/test/java/io/reactivex/internal/operators/flowable/FlowableToObservableFutureTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "100",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 133,
      "startColumnNumber" : 21,
      "endLineNumber" : 133,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 133,
        "startColumnNumber" : 8,
        "endLineNumber" : 133,
        "endColumnNumber" : 25
      },
      "nodeContext" : "Thread.sleep(100)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 133,
        "startColumnNumber" : 8,
        "endLineNumber" : 133,
        "endColumnNumber" : 26
      },
      "nodeContext" : "Thread.sleep(100);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1588,
        "startLineNumber" : 92,
        "startColumnNumber" : 67,
        "endLineNumber" : 140,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Future<Object> future=new Future<Object>(){\n    private AtomicBoolean isCancelled=new AtomicBoolean(false);\n    private AtomicBoolean isDone=new AtomicBoolean(false);\n    @Override public boolean cancel(    boolean mayInterruptIfRunning){\n      isCancelled.compareAndSet(false,true);\n      return true;\n    }\n    @Override public boolean isCancelled(){\n      return isCancelled.get();\n    }\n    @Override public boolean isDone(){\n      return isCancelled() || isDone.get();\n    }\n    @Override public Object get() throws InterruptedException, ExecutionException {\n      Thread.sleep(500);\n      isDone.compareAndSet(false,true);\n      return \"foo\";\n    }\n    @Override public Object get(    long timeout,    TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {\n      return get();\n    }\n  }\n;\n  Subscriber<Object> o=TestHelper.mockSubscriber();\n  TestSubscriber<Object> ts=new TestSubscriber<Object>(o);\n  Flowable<Object> futureObservable=Flowable.fromFuture(future);\n  futureObservable.subscribeOn(Schedulers.computation()).subscribe(ts);\n  Thread.sleep(100);\n  ts.dispose();\n  ts.assertNoErrors();\n  ts.assertNoValues();\n  ts.assertNotComplete();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 197,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1662,
        "startLineNumber" : 91,
        "startColumnNumber" : 4,
        "endLineNumber" : 140,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testCancellationDuringFutureGet() throws Exception {\n  Future<Object> future=new Future<Object>(){\n    private AtomicBoolean isCancelled=new AtomicBoolean(false);\n    private AtomicBoolean isDone=new AtomicBoolean(false);\n    @Override public boolean cancel(    boolean mayInterruptIfRunning){\n      isCancelled.compareAndSet(false,true);\n      return true;\n    }\n    @Override public boolean isCancelled(){\n      return isCancelled.get();\n    }\n    @Override public boolean isDone(){\n      return isCancelled() || isDone.get();\n    }\n    @Override public Object get() throws InterruptedException, ExecutionException {\n      Thread.sleep(500);\n      isDone.compareAndSet(false,true);\n      return \"foo\";\n    }\n    @Override public Object get(    long timeout,    TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {\n      return get();\n    }\n  }\n;\n  Subscriber<Object> o=TestHelper.mockSubscriber();\n  TestSubscriber<Object> ts=new TestSubscriber<Object>(o);\n  Flowable<Object> futureObservable=Flowable.fromFuture(future);\n  futureObservable.subscribeOn(Schedulers.computation()).subscribe(ts);\n  Thread.sleep(100);\n  ts.dispose();\n  ts.assertNoErrors();\n  ts.assertNoValues();\n  ts.assertNotComplete();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 205,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 133,
        "startColumnNumber" : 8,
        "endLineNumber" : 133,
        "endColumnNumber" : 26
      },
      "nodeContext" : "Thread.sleep(100);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 3,
    "startLineNumber" : 133,
    "startColumnNumber" : 21,
    "endLineNumber" : 133,
    "endColumnNumber" : 24
  } ],
  "layoutRelationDataList" : [ ]
}