{
  "id" : 350,
  "expression" : "entries",
  "projectName" : "java-decompiler@jd-gui",
  "commitID" : "fbc5b14d66b37b88bf1dc18386b530e874550240",
  "filePath" : "/app/src/main/java/org/jd/gui/view/OpenTypeView.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "entries",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 208,
      "startColumnNumber" : 49,
      "endLineNumber" : 208,
      "endColumnNumber" : 56
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 208,
        "startColumnNumber" : 49,
        "endLineNumber" : 208,
        "endColumnNumber" : 67
      },
      "nodeContext" : "entries.iterator()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 208,
        "startColumnNumber" : 49,
        "endLineNumber" : 208,
        "endColumnNumber" : 74
      },
      "nodeContext" : "entries.iterator().next()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 208,
        "startColumnNumber" : 36,
        "endLineNumber" : 208,
        "endColumnNumber" : 74
      },
      "nodeContext" : "firstEntry=entries.iterator().next()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 208,
        "startColumnNumber" : 20,
        "endLineNumber" : 208,
        "endColumnNumber" : 75
      },
      "nodeContext" : "Container.Entry firstEntry=entries.iterator().next();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 627,
        "startLineNumber" : 206,
        "startColumnNumber" : 44,
        "endLineNumber" : 216,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  Collection<Container.Entry> entries=map.get(typeName);\n  Container.Entry firstEntry=entries.iterator().next();\n  Type type=api.getTypeFactory(firstEntry).make(api,firstEntry,typeName);\n  if (type != null) {\n    model.addElement(new OpenTypeListCellBean(type.getDisplayTypeName(),type.getDisplayPackageName(),type.getIcon(),entries,typeName));\n  }\n else {\n    model.addElement(new OpenTypeListCellBean(typeName,entries,typeName));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 75,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 755,
        "startLineNumber" : 206,
        "startColumnNumber" : 16,
        "endLineNumber" : 218,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (index < MAX_LINE_COUNT) {\n  Collection<Container.Entry> entries=map.get(typeName);\n  Container.Entry firstEntry=entries.iterator().next();\n  Type type=api.getTypeFactory(firstEntry).make(api,firstEntry,typeName);\n  if (type != null) {\n    model.addElement(new OpenTypeListCellBean(type.getDisplayTypeName(),type.getDisplayPackageName(),type.getIcon(),entries,typeName));\n  }\n else {\n    model.addElement(new OpenTypeListCellBean(typeName,entries,typeName));\n  }\n}\n else if (index == MAX_LINE_COUNT) {\n  model.addElement(null);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 89,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 789,
        "startLineNumber" : 205,
        "startColumnNumber" : 46,
        "endLineNumber" : 219,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (index < MAX_LINE_COUNT) {\n    Collection<Container.Entry> entries=map.get(typeName);\n    Container.Entry firstEntry=entries.iterator().next();\n    Type type=api.getTypeFactory(firstEntry).make(api,firstEntry,typeName);\n    if (type != null) {\n      model.addElement(new OpenTypeListCellBean(type.getDisplayTypeName(),type.getDisplayPackageName(),type.getIcon(),entries,typeName));\n    }\n else {\n      model.addElement(new OpenTypeListCellBean(typeName,entries,typeName));\n    }\n  }\n else   if (index == MAX_LINE_COUNT) {\n    model.addElement(null);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 90,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 823,
        "startLineNumber" : 205,
        "startColumnNumber" : 12,
        "endLineNumber" : 219,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (String typeName : typeNames) {\n  if (index < MAX_LINE_COUNT) {\n    Collection<Container.Entry> entries=map.get(typeName);\n    Container.Entry firstEntry=entries.iterator().next();\n    Type type=api.getTypeFactory(firstEntry).make(api,firstEntry,typeName);\n    if (type != null) {\n      model.addElement(new OpenTypeListCellBean(type.getDisplayTypeName(),type.getDisplayPackageName(),type.getIcon(),entries,typeName));\n    }\n else {\n      model.addElement(new OpenTypeListCellBean(typeName,entries,typeName));\n    }\n  }\n else   if (index == MAX_LINE_COUNT) {\n    model.addElement(null);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 96,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LambdaExpression,body]",
      "nodePosition" : {
        "charLength" : 1567,
        "startLineNumber" : 196,
        "startColumnNumber" : 36,
        "endLineNumber" : 233,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  DefaultListModel model=(DefaultListModel)openTypeList.getModel();\n  ArrayList<String> typeNames=new ArrayList<>(map.keySet());\n  int index=0;\n  typeNames.sort(TYPE_NAME_COMPARATOR);\n  model.removeAllElements();\n  for (  String typeName : typeNames) {\n    if (index < MAX_LINE_COUNT) {\n      Collection<Container.Entry> entries=map.get(typeName);\n      Container.Entry firstEntry=entries.iterator().next();\n      Type type=api.getTypeFactory(firstEntry).make(api,firstEntry,typeName);\n      if (type != null) {\n        model.addElement(new OpenTypeListCellBean(type.getDisplayTypeName(),type.getDisplayPackageName(),type.getIcon(),entries,typeName));\n      }\n else {\n        model.addElement(new OpenTypeListCellBean(typeName,entries,typeName));\n      }\n    }\n else     if (index == MAX_LINE_COUNT) {\n      model.addElement(null);\n    }\n  }\n  int count=typeNames.size();\nswitch (count) {\ncase 0:    openTypeMatchLabel.setText(\"Matching types:\");\n  break;\ncase 1:openTypeMatchLabel.setText(\"1 matching type:\");\nbreak;\ndefault:openTypeMatchLabel.setText(count + \" matching types:\");\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 170,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 1573,
        "startLineNumber" : 196,
        "startColumnNumber" : 30,
        "endLineNumber" : 233,
        "endColumnNumber" : 9
      },
      "nodeContext" : "() -> {\n  DefaultListModel model=(DefaultListModel)openTypeList.getModel();\n  ArrayList<String> typeNames=new ArrayList<>(map.keySet());\n  int index=0;\n  typeNames.sort(TYPE_NAME_COMPARATOR);\n  model.removeAllElements();\n  for (  String typeName : typeNames) {\n    if (index < MAX_LINE_COUNT) {\n      Collection<Container.Entry> entries=map.get(typeName);\n      Container.Entry firstEntry=entries.iterator().next();\n      Type type=api.getTypeFactory(firstEntry).make(api,firstEntry,typeName);\n      if (type != null) {\n        model.addElement(new OpenTypeListCellBean(type.getDisplayTypeName(),type.getDisplayPackageName(),type.getIcon(),entries,typeName));\n      }\n else {\n        model.addElement(new OpenTypeListCellBean(typeName,entries,typeName));\n      }\n    }\n else     if (index == MAX_LINE_COUNT) {\n      model.addElement(null);\n    }\n  }\n  int count=typeNames.size();\nswitch (count) {\ncase 0:    openTypeMatchLabel.setText(\"Matching types:\");\n  break;\ncase 1:openTypeMatchLabel.setText(\"1 matching type:\");\nbreak;\ndefault:openTypeMatchLabel.setText(count + \" matching types:\");\n}\n}\n",
      "nodeType" : "LambdaExpression",
      "astNodeNumber" : 171,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 208,
        "startColumnNumber" : 20,
        "endLineNumber" : 208,
        "endColumnNumber" : 75
      },
      "nodeContext" : "Container.Entry firstEntry=entries.iterator().next();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.util.Collection<org.jd.gui.api.model.Container.Entry>"
  }, {
    "nodeContext" : "entries",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 212,
      "startColumnNumber" : 139,
      "endLineNumber" : 212,
      "endColumnNumber" : 146
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 116,
        "startLineNumber" : 212,
        "startColumnNumber" : 41,
        "endLineNumber" : 212,
        "endColumnNumber" : 157
      },
      "nodeContext" : "new OpenTypeListCellBean(type.getDisplayTypeName(),type.getDisplayPackageName(),type.getIcon(),entries,typeName)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 14,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 134,
        "startLineNumber" : 212,
        "startColumnNumber" : 24,
        "endLineNumber" : 212,
        "endColumnNumber" : 158
      },
      "nodeContext" : "model.addElement(new OpenTypeListCellBean(type.getDisplayTypeName(),type.getDisplayPackageName(),type.getIcon(),entries,typeName))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 17,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 135,
        "startLineNumber" : 212,
        "startColumnNumber" : 24,
        "endLineNumber" : 212,
        "endColumnNumber" : 159
      },
      "nodeContext" : "model.addElement(new OpenTypeListCellBean(type.getDisplayTypeName(),type.getDisplayPackageName(),type.getIcon(),entries,typeName));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 185,
        "startLineNumber" : 211,
        "startColumnNumber" : 38,
        "endLineNumber" : 213,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  model.addElement(new OpenTypeListCellBean(type.getDisplayTypeName(),type.getDisplayPackageName(),type.getIcon(),entries,typeName));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 331,
        "startLineNumber" : 211,
        "startColumnNumber" : 20,
        "endLineNumber" : 215,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (type != null) {\n  model.addElement(new OpenTypeListCellBean(type.getDisplayTypeName(),type.getDisplayPackageName(),type.getIcon(),entries,typeName));\n}\n else {\n  model.addElement(new OpenTypeListCellBean(typeName,entries,typeName));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 34,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 627,
        "startLineNumber" : 206,
        "startColumnNumber" : 44,
        "endLineNumber" : 216,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  Collection<Container.Entry> entries=map.get(typeName);\n  Container.Entry firstEntry=entries.iterator().next();\n  Type type=api.getTypeFactory(firstEntry).make(api,firstEntry,typeName);\n  if (type != null) {\n    model.addElement(new OpenTypeListCellBean(type.getDisplayTypeName(),type.getDisplayPackageName(),type.getIcon(),entries,typeName));\n  }\n else {\n    model.addElement(new OpenTypeListCellBean(typeName,entries,typeName));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 75,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 755,
        "startLineNumber" : 206,
        "startColumnNumber" : 16,
        "endLineNumber" : 218,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (index < MAX_LINE_COUNT) {\n  Collection<Container.Entry> entries=map.get(typeName);\n  Container.Entry firstEntry=entries.iterator().next();\n  Type type=api.getTypeFactory(firstEntry).make(api,firstEntry,typeName);\n  if (type != null) {\n    model.addElement(new OpenTypeListCellBean(type.getDisplayTypeName(),type.getDisplayPackageName(),type.getIcon(),entries,typeName));\n  }\n else {\n    model.addElement(new OpenTypeListCellBean(typeName,entries,typeName));\n  }\n}\n else if (index == MAX_LINE_COUNT) {\n  model.addElement(null);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 89,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 789,
        "startLineNumber" : 205,
        "startColumnNumber" : 46,
        "endLineNumber" : 219,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (index < MAX_LINE_COUNT) {\n    Collection<Container.Entry> entries=map.get(typeName);\n    Container.Entry firstEntry=entries.iterator().next();\n    Type type=api.getTypeFactory(firstEntry).make(api,firstEntry,typeName);\n    if (type != null) {\n      model.addElement(new OpenTypeListCellBean(type.getDisplayTypeName(),type.getDisplayPackageName(),type.getIcon(),entries,typeName));\n    }\n else {\n      model.addElement(new OpenTypeListCellBean(typeName,entries,typeName));\n    }\n  }\n else   if (index == MAX_LINE_COUNT) {\n    model.addElement(null);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 90,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 823,
        "startLineNumber" : 205,
        "startColumnNumber" : 12,
        "endLineNumber" : 219,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (String typeName : typeNames) {\n  if (index < MAX_LINE_COUNT) {\n    Collection<Container.Entry> entries=map.get(typeName);\n    Container.Entry firstEntry=entries.iterator().next();\n    Type type=api.getTypeFactory(firstEntry).make(api,firstEntry,typeName);\n    if (type != null) {\n      model.addElement(new OpenTypeListCellBean(type.getDisplayTypeName(),type.getDisplayPackageName(),type.getIcon(),entries,typeName));\n    }\n else {\n      model.addElement(new OpenTypeListCellBean(typeName,entries,typeName));\n    }\n  }\n else   if (index == MAX_LINE_COUNT) {\n    model.addElement(null);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 96,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LambdaExpression,body]",
      "nodePosition" : {
        "charLength" : 1567,
        "startLineNumber" : 196,
        "startColumnNumber" : 36,
        "endLineNumber" : 233,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  DefaultListModel model=(DefaultListModel)openTypeList.getModel();\n  ArrayList<String> typeNames=new ArrayList<>(map.keySet());\n  int index=0;\n  typeNames.sort(TYPE_NAME_COMPARATOR);\n  model.removeAllElements();\n  for (  String typeName : typeNames) {\n    if (index < MAX_LINE_COUNT) {\n      Collection<Container.Entry> entries=map.get(typeName);\n      Container.Entry firstEntry=entries.iterator().next();\n      Type type=api.getTypeFactory(firstEntry).make(api,firstEntry,typeName);\n      if (type != null) {\n        model.addElement(new OpenTypeListCellBean(type.getDisplayTypeName(),type.getDisplayPackageName(),type.getIcon(),entries,typeName));\n      }\n else {\n        model.addElement(new OpenTypeListCellBean(typeName,entries,typeName));\n      }\n    }\n else     if (index == MAX_LINE_COUNT) {\n      model.addElement(null);\n    }\n  }\n  int count=typeNames.size();\nswitch (count) {\ncase 0:    openTypeMatchLabel.setText(\"Matching types:\");\n  break;\ncase 1:openTypeMatchLabel.setText(\"1 matching type:\");\nbreak;\ndefault:openTypeMatchLabel.setText(count + \" matching types:\");\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 170,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 1573,
        "startLineNumber" : 196,
        "startColumnNumber" : 30,
        "endLineNumber" : 233,
        "endColumnNumber" : 9
      },
      "nodeContext" : "() -> {\n  DefaultListModel model=(DefaultListModel)openTypeList.getModel();\n  ArrayList<String> typeNames=new ArrayList<>(map.keySet());\n  int index=0;\n  typeNames.sort(TYPE_NAME_COMPARATOR);\n  model.removeAllElements();\n  for (  String typeName : typeNames) {\n    if (index < MAX_LINE_COUNT) {\n      Collection<Container.Entry> entries=map.get(typeName);\n      Container.Entry firstEntry=entries.iterator().next();\n      Type type=api.getTypeFactory(firstEntry).make(api,firstEntry,typeName);\n      if (type != null) {\n        model.addElement(new OpenTypeListCellBean(type.getDisplayTypeName(),type.getDisplayPackageName(),type.getIcon(),entries,typeName));\n      }\n else {\n        model.addElement(new OpenTypeListCellBean(typeName,entries,typeName));\n      }\n    }\n else     if (index == MAX_LINE_COUNT) {\n      model.addElement(null);\n    }\n  }\n  int count=typeNames.size();\nswitch (count) {\ncase 0:    openTypeMatchLabel.setText(\"Matching types:\");\n  break;\ncase 1:openTypeMatchLabel.setText(\"1 matching type:\");\nbreak;\ndefault:openTypeMatchLabel.setText(count + \" matching types:\");\n}\n}\n",
      "nodeType" : "LambdaExpression",
      "astNodeNumber" : 171,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 135,
        "startLineNumber" : 212,
        "startColumnNumber" : 24,
        "endLineNumber" : 212,
        "endColumnNumber" : 159
      },
      "nodeContext" : "model.addElement(new OpenTypeListCellBean(type.getDisplayTypeName(),type.getDisplayPackageName(),type.getIcon(),entries,typeName));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 18,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.util.Collection<org.jd.gui.api.model.Container.Entry>"
  }, {
    "nodeContext" : "entries",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 214,
      "startColumnNumber" : 76,
      "endLineNumber" : 214,
      "endColumnNumber" : 83
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 214,
        "startColumnNumber" : 41,
        "endLineNumber" : 214,
        "endColumnNumber" : 94
      },
      "nodeContext" : "new OpenTypeListCellBean(typeName,entries,typeName)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 214,
        "startColumnNumber" : 24,
        "endLineNumber" : 214,
        "endColumnNumber" : 95
      },
      "nodeContext" : "model.addElement(new OpenTypeListCellBean(typeName,entries,typeName))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 214,
        "startColumnNumber" : 24,
        "endLineNumber" : 214,
        "endColumnNumber" : 96
      },
      "nodeContext" : "model.addElement(new OpenTypeListCellBean(typeName,entries,typeName));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 122,
        "startLineNumber" : 213,
        "startColumnNumber" : 27,
        "endLineNumber" : 215,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  model.addElement(new OpenTypeListCellBean(typeName,entries,typeName));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 331,
        "startLineNumber" : 211,
        "startColumnNumber" : 20,
        "endLineNumber" : 215,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (type != null) {\n  model.addElement(new OpenTypeListCellBean(type.getDisplayTypeName(),type.getDisplayPackageName(),type.getIcon(),entries,typeName));\n}\n else {\n  model.addElement(new OpenTypeListCellBean(typeName,entries,typeName));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 34,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 627,
        "startLineNumber" : 206,
        "startColumnNumber" : 44,
        "endLineNumber" : 216,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  Collection<Container.Entry> entries=map.get(typeName);\n  Container.Entry firstEntry=entries.iterator().next();\n  Type type=api.getTypeFactory(firstEntry).make(api,firstEntry,typeName);\n  if (type != null) {\n    model.addElement(new OpenTypeListCellBean(type.getDisplayTypeName(),type.getDisplayPackageName(),type.getIcon(),entries,typeName));\n  }\n else {\n    model.addElement(new OpenTypeListCellBean(typeName,entries,typeName));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 75,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 755,
        "startLineNumber" : 206,
        "startColumnNumber" : 16,
        "endLineNumber" : 218,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (index < MAX_LINE_COUNT) {\n  Collection<Container.Entry> entries=map.get(typeName);\n  Container.Entry firstEntry=entries.iterator().next();\n  Type type=api.getTypeFactory(firstEntry).make(api,firstEntry,typeName);\n  if (type != null) {\n    model.addElement(new OpenTypeListCellBean(type.getDisplayTypeName(),type.getDisplayPackageName(),type.getIcon(),entries,typeName));\n  }\n else {\n    model.addElement(new OpenTypeListCellBean(typeName,entries,typeName));\n  }\n}\n else if (index == MAX_LINE_COUNT) {\n  model.addElement(null);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 89,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 789,
        "startLineNumber" : 205,
        "startColumnNumber" : 46,
        "endLineNumber" : 219,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (index < MAX_LINE_COUNT) {\n    Collection<Container.Entry> entries=map.get(typeName);\n    Container.Entry firstEntry=entries.iterator().next();\n    Type type=api.getTypeFactory(firstEntry).make(api,firstEntry,typeName);\n    if (type != null) {\n      model.addElement(new OpenTypeListCellBean(type.getDisplayTypeName(),type.getDisplayPackageName(),type.getIcon(),entries,typeName));\n    }\n else {\n      model.addElement(new OpenTypeListCellBean(typeName,entries,typeName));\n    }\n  }\n else   if (index == MAX_LINE_COUNT) {\n    model.addElement(null);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 90,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 823,
        "startLineNumber" : 205,
        "startColumnNumber" : 12,
        "endLineNumber" : 219,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (String typeName : typeNames) {\n  if (index < MAX_LINE_COUNT) {\n    Collection<Container.Entry> entries=map.get(typeName);\n    Container.Entry firstEntry=entries.iterator().next();\n    Type type=api.getTypeFactory(firstEntry).make(api,firstEntry,typeName);\n    if (type != null) {\n      model.addElement(new OpenTypeListCellBean(type.getDisplayTypeName(),type.getDisplayPackageName(),type.getIcon(),entries,typeName));\n    }\n else {\n      model.addElement(new OpenTypeListCellBean(typeName,entries,typeName));\n    }\n  }\n else   if (index == MAX_LINE_COUNT) {\n    model.addElement(null);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 96,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LambdaExpression,body]",
      "nodePosition" : {
        "charLength" : 1567,
        "startLineNumber" : 196,
        "startColumnNumber" : 36,
        "endLineNumber" : 233,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  DefaultListModel model=(DefaultListModel)openTypeList.getModel();\n  ArrayList<String> typeNames=new ArrayList<>(map.keySet());\n  int index=0;\n  typeNames.sort(TYPE_NAME_COMPARATOR);\n  model.removeAllElements();\n  for (  String typeName : typeNames) {\n    if (index < MAX_LINE_COUNT) {\n      Collection<Container.Entry> entries=map.get(typeName);\n      Container.Entry firstEntry=entries.iterator().next();\n      Type type=api.getTypeFactory(firstEntry).make(api,firstEntry,typeName);\n      if (type != null) {\n        model.addElement(new OpenTypeListCellBean(type.getDisplayTypeName(),type.getDisplayPackageName(),type.getIcon(),entries,typeName));\n      }\n else {\n        model.addElement(new OpenTypeListCellBean(typeName,entries,typeName));\n      }\n    }\n else     if (index == MAX_LINE_COUNT) {\n      model.addElement(null);\n    }\n  }\n  int count=typeNames.size();\nswitch (count) {\ncase 0:    openTypeMatchLabel.setText(\"Matching types:\");\n  break;\ncase 1:openTypeMatchLabel.setText(\"1 matching type:\");\nbreak;\ndefault:openTypeMatchLabel.setText(count + \" matching types:\");\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 170,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 1573,
        "startLineNumber" : 196,
        "startColumnNumber" : 30,
        "endLineNumber" : 233,
        "endColumnNumber" : 9
      },
      "nodeContext" : "() -> {\n  DefaultListModel model=(DefaultListModel)openTypeList.getModel();\n  ArrayList<String> typeNames=new ArrayList<>(map.keySet());\n  int index=0;\n  typeNames.sort(TYPE_NAME_COMPARATOR);\n  model.removeAllElements();\n  for (  String typeName : typeNames) {\n    if (index < MAX_LINE_COUNT) {\n      Collection<Container.Entry> entries=map.get(typeName);\n      Container.Entry firstEntry=entries.iterator().next();\n      Type type=api.getTypeFactory(firstEntry).make(api,firstEntry,typeName);\n      if (type != null) {\n        model.addElement(new OpenTypeListCellBean(type.getDisplayTypeName(),type.getDisplayPackageName(),type.getIcon(),entries,typeName));\n      }\n else {\n        model.addElement(new OpenTypeListCellBean(typeName,entries,typeName));\n      }\n    }\n else     if (index == MAX_LINE_COUNT) {\n      model.addElement(null);\n    }\n  }\n  int count=typeNames.size();\nswitch (count) {\ncase 0:    openTypeMatchLabel.setText(\"Matching types:\");\n  break;\ncase 1:openTypeMatchLabel.setText(\"1 matching type:\");\nbreak;\ndefault:openTypeMatchLabel.setText(count + \" matching types:\");\n}\n}\n",
      "nodeType" : "LambdaExpression",
      "astNodeNumber" : 171,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 214,
        "startColumnNumber" : 24,
        "endLineNumber" : 214,
        "endColumnNumber" : 96
      },
      "nodeContext" : "model.addElement(new OpenTypeListCellBean(typeName,entries,typeName));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.util.Collection<org.jd.gui.api.model.Container.Entry>"
  } ],
  "positionList" : [ {
    "charLength" : 7,
    "startLineNumber" : 208,
    "startColumnNumber" : 49,
    "endLineNumber" : 208,
    "endColumnNumber" : 56
  }, {
    "charLength" : 7,
    "startLineNumber" : 212,
    "startColumnNumber" : 139,
    "endLineNumber" : 212,
    "endColumnNumber" : 146
  }, {
    "charLength" : 7,
    "startLineNumber" : 214,
    "startColumnNumber" : 76,
    "endLineNumber" : 214,
    "endColumnNumber" : 83
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  } ]
}