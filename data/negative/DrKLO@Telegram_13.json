{
  "id" : 13,
  "expression" : "new Integer[1]",
  "projectName" : "DrKLO@Telegram",
  "commitID" : "11fbfb1329df700b203e1852a71c4c11b5ab12f4",
  "filePath" : "/TMessagesProj/src/main/java/org/telegram/ui/Components/AnimatedTextView.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new Integer[1]",
    "nodeType" : "ArrayCreation",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 335,
      "startColumnNumber" : 39,
      "endLineNumber" : 335,
      "endColumnNumber" : 53
    },
    "astNodeNumber" : 6,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 335,
        "startColumnNumber" : 16,
        "endLineNumber" : 335,
        "endColumnNumber" : 53
      },
      "nodeContext" : "currentLayoutOffsets=new Integer[1]",
      "nodeType" : "Assignment",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 335,
        "startColumnNumber" : 16,
        "endLineNumber" : 335,
        "endColumnNumber" : 54
      },
      "nodeContext" : "currentLayoutOffsets=new Integer[1];\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1142,
        "startLineNumber" : 322,
        "startColumnNumber" : 19,
        "endLineNumber" : 352,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (animator != null) {\n    animator.cancel();\n  }\n  animator=null;\n  toSetText=null;\n  toSetTextMoveDown=false;\n  t=0;\n  currentLayout=new StaticLayout[1];\n  currentLayout[0]=makeLayout(currentText=text,bounds.width());\n  currentWidth=(int)currentLayout[0].getLineWidth(0);\n  currentHeight=currentLayout[0].getHeight();\n  currentLayoutOffsets=new Integer[1];\n  currentLayoutOffsets[0]=0;\n  currentLayoutToOldIndex=new Integer[1];\n  currentLayoutToOldIndex[0]=-1;\n  if (this.currentLayout.length > 0) {\n    isRTL=this.currentLayout[0].isRtlCharAt(0);\n  }\n  oldLayout=null;\n  oldLayoutOffsets=null;\n  oldLayoutToCurrentIndex=null;\n  oldText=null;\n  oldWidth=0;\n  oldHeight=0;\n  invalidateSelf();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 145,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7884,
        "startLineNumber" : 195,
        "startColumnNumber" : 12,
        "endLineNumber" : 352,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (animated) {\n  if (isAnimating()) {\n    toSetText=text;\n    toSetTextMoveDown=moveDown;\n    return;\n  }\n  if (text.equals(currentText)) {\n    return;\n  }\n  oldText=currentText;\n  currentText=text;\n  currentLayout=null;\n  oldLayout=null;\n  ArrayList<Integer> currentLayoutOffsets=new ArrayList<>();\n  ArrayList<Integer> currentLayoutToOldIndex=new ArrayList<>();\n  ArrayList<StaticLayout> currentLayoutList=new ArrayList<>();\n  ArrayList<Integer> oldLayoutOffsets=new ArrayList<>();\n  ArrayList<Integer> oldLayoutToCurrentIndex=new ArrayList<>();\n  ArrayList<StaticLayout> oldLayoutList=new ArrayList<>();\n  currentWidth=currentHeight=0;\n  oldWidth=oldHeight=0;\n  RegionCallback onEqualRegion=(part,from,to) -> {\n    StaticLayout layout=makeLayout(part,bounds.width() - Math.min(currentWidth,oldWidth));\n    oldLayoutToCurrentIndex.add(currentLayoutList.size());\n    currentLayoutToOldIndex.add(oldLayoutList.size());\n    currentLayoutOffsets.add(currentWidth);\n    currentLayoutList.add(layout);\n    oldLayoutOffsets.add(oldWidth);\n    oldLayoutList.add(layout);\n    float partWidth=layout.getLineWidth(0);\n    currentWidth+=partWidth;\n    oldWidth+=partWidth;\n    currentHeight=Math.max(currentHeight,layout.getHeight());\n    oldHeight=Math.max(oldHeight,layout.getHeight());\n  }\n;\n  RegionCallback onNewPart=(part,from,to) -> {\n    StaticLayout layout=makeLayout(part,bounds.width() - currentWidth);\n    currentLayoutOffsets.add(currentWidth);\n    currentLayoutList.add(layout);\n    currentLayoutToOldIndex.add(-1);\n    currentWidth+=layout.getLineWidth(0);\n    currentHeight=Math.max(currentHeight,layout.getHeight());\n  }\n;\n  RegionCallback onOldPart=(part,from,to) -> {\n    StaticLayout layout=makeLayout(part,bounds.width() - oldWidth);\n    oldLayoutOffsets.add(oldWidth);\n    oldLayoutList.add(layout);\n    oldLayoutToCurrentIndex.add(-1);\n    oldWidth+=layout.getLineWidth(0);\n    oldHeight=Math.max(oldHeight,layout.getHeight());\n  }\n;\n  CharSequence from=splitByWords ? new WordSequence(oldText) : oldText;\n  CharSequence to=splitByWords ? new WordSequence(currentText) : currentText;\n  diff(from,to,onEqualRegion,onNewPart,onOldPart);\n  if (this.currentLayout == null || this.currentLayout.length != currentLayoutList.size()) {\n    this.currentLayout=new StaticLayout[currentLayoutList.size()];\n  }\n  currentLayoutList.toArray(currentLayout);\n  if (this.currentLayoutOffsets == null || this.currentLayoutOffsets.length != currentLayoutOffsets.size()) {\n    this.currentLayoutOffsets=new Integer[currentLayoutOffsets.size()];\n  }\n  currentLayoutOffsets.toArray(this.currentLayoutOffsets);\n  if (this.currentLayoutToOldIndex == null || this.currentLayoutToOldIndex.length != currentLayoutToOldIndex.size()) {\n    this.currentLayoutToOldIndex=new Integer[currentLayoutToOldIndex.size()];\n  }\n  currentLayoutToOldIndex.toArray(this.currentLayoutToOldIndex);\n  if (this.oldLayout == null || this.oldLayout.length != oldLayoutList.size()) {\n    this.oldLayout=new StaticLayout[oldLayoutList.size()];\n  }\n  oldLayoutList.toArray(oldLayout);\n  if (this.oldLayoutOffsets == null || this.oldLayoutOffsets.length != oldLayoutOffsets.size()) {\n    this.oldLayoutOffsets=new Integer[oldLayoutOffsets.size()];\n  }\n  oldLayoutOffsets.toArray(this.oldLayoutOffsets);\n  if (this.oldLayoutToCurrentIndex == null || this.oldLayoutToCurrentIndex.length != oldLayoutToCurrentIndex.size()) {\n    this.oldLayoutToCurrentIndex=new Integer[oldLayoutToCurrentIndex.size()];\n  }\n  oldLayoutToCurrentIndex.toArray(this.oldLayoutToCurrentIndex);\n  if (this.currentLayout.length > 0) {\n    isRTL=this.currentLayout[0].isRtlCharAt(0);\n  }\n else   if (this.oldLayout.length > 0) {\n    isRTL=this.oldLayout[0].isRtlCharAt(0);\n  }\n  this.moveDown=moveDown;\n  animator=ValueAnimator.ofFloat(t=0f,1f);\n  animator.addUpdateListener(anm -> {\n    t=(float)anm.getAnimatedValue();\n    invalidateSelf();\n  }\n);\n  animator.addListener(new AnimatorListenerAdapter(){\n    @Override public void onAnimationEnd(    Animator animation){\n      super.onAnimationEnd(animation);\n      oldLayout=null;\n      AnimatedTextDrawable.this.oldLayoutOffsets=null;\n      AnimatedTextDrawable.this.oldLayoutToCurrentIndex=null;\n      oldText=null;\n      oldWidth=0;\n      t=0;\n      invalidateSelf();\n      animator=null;\n      if (toSetText != null) {\n        setText(toSetText,true,toSetTextMoveDown);\n        toSetText=null;\n        toSetTextMoveDown=false;\n      }\n else       if (onAnimationFinishListener != null) {\n        onAnimationFinishListener.run();\n      }\n    }\n  }\n);\n  animator.setStartDelay(animateDelay);\n  animator.setDuration(animateDuration);\n  animator.setInterpolator(animateInterpolator);\n  animator.start();\n}\n else {\n  if (animator != null) {\n    animator.cancel();\n  }\n  animator=null;\n  toSetText=null;\n  toSetTextMoveDown=false;\n  t=0;\n  currentLayout=new StaticLayout[1];\n  currentLayout[0]=makeLayout(currentText=text,bounds.width());\n  currentWidth=(int)currentLayout[0].getLineWidth(0);\n  currentHeight=currentLayout[0].getHeight();\n  currentLayoutOffsets=new Integer[1];\n  currentLayoutOffsets[0]=0;\n  currentLayoutToOldIndex=new Integer[1];\n  currentLayoutToOldIndex[0]=-1;\n  if (this.currentLayout.length > 0) {\n    isRTL=this.currentLayout[0].isRtlCharAt(0);\n  }\n  oldLayout=null;\n  oldLayoutOffsets=null;\n  oldLayoutToCurrentIndex=null;\n  oldText=null;\n  oldWidth=0;\n  oldHeight=0;\n  invalidateSelf();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 918,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8097,
        "startLineNumber" : 188,
        "startColumnNumber" : 83,
        "endLineNumber" : 353,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (this.currentText == null || text == null) {\n    animated=false;\n  }\n  if (text == null) {\n    text=\"\";\n  }\n  if (animated) {\n    if (isAnimating()) {\n      toSetText=text;\n      toSetTextMoveDown=moveDown;\n      return;\n    }\n    if (text.equals(currentText)) {\n      return;\n    }\n    oldText=currentText;\n    currentText=text;\n    currentLayout=null;\n    oldLayout=null;\n    ArrayList<Integer> currentLayoutOffsets=new ArrayList<>();\n    ArrayList<Integer> currentLayoutToOldIndex=new ArrayList<>();\n    ArrayList<StaticLayout> currentLayoutList=new ArrayList<>();\n    ArrayList<Integer> oldLayoutOffsets=new ArrayList<>();\n    ArrayList<Integer> oldLayoutToCurrentIndex=new ArrayList<>();\n    ArrayList<StaticLayout> oldLayoutList=new ArrayList<>();\n    currentWidth=currentHeight=0;\n    oldWidth=oldHeight=0;\n    RegionCallback onEqualRegion=(part,from,to) -> {\n      StaticLayout layout=makeLayout(part,bounds.width() - Math.min(currentWidth,oldWidth));\n      oldLayoutToCurrentIndex.add(currentLayoutList.size());\n      currentLayoutToOldIndex.add(oldLayoutList.size());\n      currentLayoutOffsets.add(currentWidth);\n      currentLayoutList.add(layout);\n      oldLayoutOffsets.add(oldWidth);\n      oldLayoutList.add(layout);\n      float partWidth=layout.getLineWidth(0);\n      currentWidth+=partWidth;\n      oldWidth+=partWidth;\n      currentHeight=Math.max(currentHeight,layout.getHeight());\n      oldHeight=Math.max(oldHeight,layout.getHeight());\n    }\n;\n    RegionCallback onNewPart=(part,from,to) -> {\n      StaticLayout layout=makeLayout(part,bounds.width() - currentWidth);\n      currentLayoutOffsets.add(currentWidth);\n      currentLayoutList.add(layout);\n      currentLayoutToOldIndex.add(-1);\n      currentWidth+=layout.getLineWidth(0);\n      currentHeight=Math.max(currentHeight,layout.getHeight());\n    }\n;\n    RegionCallback onOldPart=(part,from,to) -> {\n      StaticLayout layout=makeLayout(part,bounds.width() - oldWidth);\n      oldLayoutOffsets.add(oldWidth);\n      oldLayoutList.add(layout);\n      oldLayoutToCurrentIndex.add(-1);\n      oldWidth+=layout.getLineWidth(0);\n      oldHeight=Math.max(oldHeight,layout.getHeight());\n    }\n;\n    CharSequence from=splitByWords ? new WordSequence(oldText) : oldText;\n    CharSequence to=splitByWords ? new WordSequence(currentText) : currentText;\n    diff(from,to,onEqualRegion,onNewPart,onOldPart);\n    if (this.currentLayout == null || this.currentLayout.length != currentLayoutList.size()) {\n      this.currentLayout=new StaticLayout[currentLayoutList.size()];\n    }\n    currentLayoutList.toArray(currentLayout);\n    if (this.currentLayoutOffsets == null || this.currentLayoutOffsets.length != currentLayoutOffsets.size()) {\n      this.currentLayoutOffsets=new Integer[currentLayoutOffsets.size()];\n    }\n    currentLayoutOffsets.toArray(this.currentLayoutOffsets);\n    if (this.currentLayoutToOldIndex == null || this.currentLayoutToOldIndex.length != currentLayoutToOldIndex.size()) {\n      this.currentLayoutToOldIndex=new Integer[currentLayoutToOldIndex.size()];\n    }\n    currentLayoutToOldIndex.toArray(this.currentLayoutToOldIndex);\n    if (this.oldLayout == null || this.oldLayout.length != oldLayoutList.size()) {\n      this.oldLayout=new StaticLayout[oldLayoutList.size()];\n    }\n    oldLayoutList.toArray(oldLayout);\n    if (this.oldLayoutOffsets == null || this.oldLayoutOffsets.length != oldLayoutOffsets.size()) {\n      this.oldLayoutOffsets=new Integer[oldLayoutOffsets.size()];\n    }\n    oldLayoutOffsets.toArray(this.oldLayoutOffsets);\n    if (this.oldLayoutToCurrentIndex == null || this.oldLayoutToCurrentIndex.length != oldLayoutToCurrentIndex.size()) {\n      this.oldLayoutToCurrentIndex=new Integer[oldLayoutToCurrentIndex.size()];\n    }\n    oldLayoutToCurrentIndex.toArray(this.oldLayoutToCurrentIndex);\n    if (this.currentLayout.length > 0) {\n      isRTL=this.currentLayout[0].isRtlCharAt(0);\n    }\n else     if (this.oldLayout.length > 0) {\n      isRTL=this.oldLayout[0].isRtlCharAt(0);\n    }\n    this.moveDown=moveDown;\n    animator=ValueAnimator.ofFloat(t=0f,1f);\n    animator.addUpdateListener(anm -> {\n      t=(float)anm.getAnimatedValue();\n      invalidateSelf();\n    }\n);\n    animator.addListener(new AnimatorListenerAdapter(){\n      @Override public void onAnimationEnd(      Animator animation){\n        super.onAnimationEnd(animation);\n        oldLayout=null;\n        AnimatedTextDrawable.this.oldLayoutOffsets=null;\n        AnimatedTextDrawable.this.oldLayoutToCurrentIndex=null;\n        oldText=null;\n        oldWidth=0;\n        t=0;\n        invalidateSelf();\n        animator=null;\n        if (toSetText != null) {\n          setText(toSetText,true,toSetTextMoveDown);\n          toSetText=null;\n          toSetTextMoveDown=false;\n        }\n else         if (onAnimationFinishListener != null) {\n          onAnimationFinishListener.run();\n        }\n      }\n    }\n);\n    animator.setStartDelay(animateDelay);\n    animator.setDuration(animateDuration);\n    animator.setInterpolator(animateInterpolator);\n    animator.start();\n  }\n else {\n    if (animator != null) {\n      animator.cancel();\n    }\n    animator=null;\n    toSetText=null;\n    toSetTextMoveDown=false;\n    t=0;\n    currentLayout=new StaticLayout[1];\n    currentLayout[0]=makeLayout(currentText=text,bounds.width());\n    currentWidth=(int)currentLayout[0].getLineWidth(0);\n    currentHeight=currentLayout[0].getHeight();\n    currentLayoutOffsets=new Integer[1];\n    currentLayoutOffsets[0]=0;\n    currentLayoutToOldIndex=new Integer[1];\n    currentLayoutToOldIndex[0]=-1;\n    if (this.currentLayout.length > 0) {\n      isRTL=this.currentLayout[0].isRtlCharAt(0);\n    }\n    oldLayout=null;\n    oldLayoutOffsets=null;\n    oldLayoutToCurrentIndex=null;\n    oldText=null;\n    oldWidth=0;\n    oldHeight=0;\n    invalidateSelf();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 943,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8172,
        "startLineNumber" : 188,
        "startColumnNumber" : 8,
        "endLineNumber" : 353,
        "endColumnNumber" : 9
      },
      "nodeContext" : "public void setText(CharSequence text,boolean animated,boolean moveDown){\n  if (this.currentText == null || text == null) {\n    animated=false;\n  }\n  if (text == null) {\n    text=\"\";\n  }\n  if (animated) {\n    if (isAnimating()) {\n      toSetText=text;\n      toSetTextMoveDown=moveDown;\n      return;\n    }\n    if (text.equals(currentText)) {\n      return;\n    }\n    oldText=currentText;\n    currentText=text;\n    currentLayout=null;\n    oldLayout=null;\n    ArrayList<Integer> currentLayoutOffsets=new ArrayList<>();\n    ArrayList<Integer> currentLayoutToOldIndex=new ArrayList<>();\n    ArrayList<StaticLayout> currentLayoutList=new ArrayList<>();\n    ArrayList<Integer> oldLayoutOffsets=new ArrayList<>();\n    ArrayList<Integer> oldLayoutToCurrentIndex=new ArrayList<>();\n    ArrayList<StaticLayout> oldLayoutList=new ArrayList<>();\n    currentWidth=currentHeight=0;\n    oldWidth=oldHeight=0;\n    RegionCallback onEqualRegion=(part,from,to) -> {\n      StaticLayout layout=makeLayout(part,bounds.width() - Math.min(currentWidth,oldWidth));\n      oldLayoutToCurrentIndex.add(currentLayoutList.size());\n      currentLayoutToOldIndex.add(oldLayoutList.size());\n      currentLayoutOffsets.add(currentWidth);\n      currentLayoutList.add(layout);\n      oldLayoutOffsets.add(oldWidth);\n      oldLayoutList.add(layout);\n      float partWidth=layout.getLineWidth(0);\n      currentWidth+=partWidth;\n      oldWidth+=partWidth;\n      currentHeight=Math.max(currentHeight,layout.getHeight());\n      oldHeight=Math.max(oldHeight,layout.getHeight());\n    }\n;\n    RegionCallback onNewPart=(part,from,to) -> {\n      StaticLayout layout=makeLayout(part,bounds.width() - currentWidth);\n      currentLayoutOffsets.add(currentWidth);\n      currentLayoutList.add(layout);\n      currentLayoutToOldIndex.add(-1);\n      currentWidth+=layout.getLineWidth(0);\n      currentHeight=Math.max(currentHeight,layout.getHeight());\n    }\n;\n    RegionCallback onOldPart=(part,from,to) -> {\n      StaticLayout layout=makeLayout(part,bounds.width() - oldWidth);\n      oldLayoutOffsets.add(oldWidth);\n      oldLayoutList.add(layout);\n      oldLayoutToCurrentIndex.add(-1);\n      oldWidth+=layout.getLineWidth(0);\n      oldHeight=Math.max(oldHeight,layout.getHeight());\n    }\n;\n    CharSequence from=splitByWords ? new WordSequence(oldText) : oldText;\n    CharSequence to=splitByWords ? new WordSequence(currentText) : currentText;\n    diff(from,to,onEqualRegion,onNewPart,onOldPart);\n    if (this.currentLayout == null || this.currentLayout.length != currentLayoutList.size()) {\n      this.currentLayout=new StaticLayout[currentLayoutList.size()];\n    }\n    currentLayoutList.toArray(currentLayout);\n    if (this.currentLayoutOffsets == null || this.currentLayoutOffsets.length != currentLayoutOffsets.size()) {\n      this.currentLayoutOffsets=new Integer[currentLayoutOffsets.size()];\n    }\n    currentLayoutOffsets.toArray(this.currentLayoutOffsets);\n    if (this.currentLayoutToOldIndex == null || this.currentLayoutToOldIndex.length != currentLayoutToOldIndex.size()) {\n      this.currentLayoutToOldIndex=new Integer[currentLayoutToOldIndex.size()];\n    }\n    currentLayoutToOldIndex.toArray(this.currentLayoutToOldIndex);\n    if (this.oldLayout == null || this.oldLayout.length != oldLayoutList.size()) {\n      this.oldLayout=new StaticLayout[oldLayoutList.size()];\n    }\n    oldLayoutList.toArray(oldLayout);\n    if (this.oldLayoutOffsets == null || this.oldLayoutOffsets.length != oldLayoutOffsets.size()) {\n      this.oldLayoutOffsets=new Integer[oldLayoutOffsets.size()];\n    }\n    oldLayoutOffsets.toArray(this.oldLayoutOffsets);\n    if (this.oldLayoutToCurrentIndex == null || this.oldLayoutToCurrentIndex.length != oldLayoutToCurrentIndex.size()) {\n      this.oldLayoutToCurrentIndex=new Integer[oldLayoutToCurrentIndex.size()];\n    }\n    oldLayoutToCurrentIndex.toArray(this.oldLayoutToCurrentIndex);\n    if (this.currentLayout.length > 0) {\n      isRTL=this.currentLayout[0].isRtlCharAt(0);\n    }\n else     if (this.oldLayout.length > 0) {\n      isRTL=this.oldLayout[0].isRtlCharAt(0);\n    }\n    this.moveDown=moveDown;\n    animator=ValueAnimator.ofFloat(t=0f,1f);\n    animator.addUpdateListener(anm -> {\n      t=(float)anm.getAnimatedValue();\n      invalidateSelf();\n    }\n);\n    animator.addListener(new AnimatorListenerAdapter(){\n      @Override public void onAnimationEnd(      Animator animation){\n        super.onAnimationEnd(animation);\n        oldLayout=null;\n        AnimatedTextDrawable.this.oldLayoutOffsets=null;\n        AnimatedTextDrawable.this.oldLayoutToCurrentIndex=null;\n        oldText=null;\n        oldWidth=0;\n        t=0;\n        invalidateSelf();\n        animator=null;\n        if (toSetText != null) {\n          setText(toSetText,true,toSetTextMoveDown);\n          toSetText=null;\n          toSetTextMoveDown=false;\n        }\n else         if (onAnimationFinishListener != null) {\n          onAnimationFinishListener.run();\n        }\n      }\n    }\n);\n    animator.setStartDelay(animateDelay);\n    animator.setDuration(animateDuration);\n    animator.setInterpolator(animateInterpolator);\n    animator.start();\n  }\n else {\n    if (animator != null) {\n      animator.cancel();\n    }\n    animator=null;\n    toSetText=null;\n    toSetTextMoveDown=false;\n    t=0;\n    currentLayout=new StaticLayout[1];\n    currentLayout[0]=makeLayout(currentText=text,bounds.width());\n    currentWidth=(int)currentLayout[0].getLineWidth(0);\n    currentHeight=currentLayout[0].getHeight();\n    currentLayoutOffsets=new Integer[1];\n    currentLayoutOffsets[0]=0;\n    currentLayoutToOldIndex=new Integer[1];\n    currentLayoutToOldIndex[0]=-1;\n    if (this.currentLayout.length > 0) {\n      isRTL=this.currentLayout[0].isRtlCharAt(0);\n    }\n    oldLayout=null;\n    oldLayoutOffsets=null;\n    oldLayoutToCurrentIndex=null;\n    oldText=null;\n    oldWidth=0;\n    oldHeight=0;\n    invalidateSelf();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 957,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 335,
        "startColumnNumber" : 16,
        "endLineNumber" : 335,
        "endColumnNumber" : 54
      },
      "nodeContext" : "currentLayoutOffsets=new Integer[1];\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 6
    },
    "tokenLength" : 2,
    "type" : "java.lang.Integer[]"
  }, {
    "nodeContext" : "new Integer[1]",
    "nodeType" : "ArrayCreation",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 337,
      "startColumnNumber" : 42,
      "endLineNumber" : 337,
      "endColumnNumber" : 56
    },
    "astNodeNumber" : 6,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 337,
        "startColumnNumber" : 16,
        "endLineNumber" : 337,
        "endColumnNumber" : 56
      },
      "nodeContext" : "currentLayoutToOldIndex=new Integer[1]",
      "nodeType" : "Assignment",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 337,
        "startColumnNumber" : 16,
        "endLineNumber" : 337,
        "endColumnNumber" : 57
      },
      "nodeContext" : "currentLayoutToOldIndex=new Integer[1];\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1142,
        "startLineNumber" : 322,
        "startColumnNumber" : 19,
        "endLineNumber" : 352,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (animator != null) {\n    animator.cancel();\n  }\n  animator=null;\n  toSetText=null;\n  toSetTextMoveDown=false;\n  t=0;\n  currentLayout=new StaticLayout[1];\n  currentLayout[0]=makeLayout(currentText=text,bounds.width());\n  currentWidth=(int)currentLayout[0].getLineWidth(0);\n  currentHeight=currentLayout[0].getHeight();\n  currentLayoutOffsets=new Integer[1];\n  currentLayoutOffsets[0]=0;\n  currentLayoutToOldIndex=new Integer[1];\n  currentLayoutToOldIndex[0]=-1;\n  if (this.currentLayout.length > 0) {\n    isRTL=this.currentLayout[0].isRtlCharAt(0);\n  }\n  oldLayout=null;\n  oldLayoutOffsets=null;\n  oldLayoutToCurrentIndex=null;\n  oldText=null;\n  oldWidth=0;\n  oldHeight=0;\n  invalidateSelf();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 145,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7884,
        "startLineNumber" : 195,
        "startColumnNumber" : 12,
        "endLineNumber" : 352,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (animated) {\n  if (isAnimating()) {\n    toSetText=text;\n    toSetTextMoveDown=moveDown;\n    return;\n  }\n  if (text.equals(currentText)) {\n    return;\n  }\n  oldText=currentText;\n  currentText=text;\n  currentLayout=null;\n  oldLayout=null;\n  ArrayList<Integer> currentLayoutOffsets=new ArrayList<>();\n  ArrayList<Integer> currentLayoutToOldIndex=new ArrayList<>();\n  ArrayList<StaticLayout> currentLayoutList=new ArrayList<>();\n  ArrayList<Integer> oldLayoutOffsets=new ArrayList<>();\n  ArrayList<Integer> oldLayoutToCurrentIndex=new ArrayList<>();\n  ArrayList<StaticLayout> oldLayoutList=new ArrayList<>();\n  currentWidth=currentHeight=0;\n  oldWidth=oldHeight=0;\n  RegionCallback onEqualRegion=(part,from,to) -> {\n    StaticLayout layout=makeLayout(part,bounds.width() - Math.min(currentWidth,oldWidth));\n    oldLayoutToCurrentIndex.add(currentLayoutList.size());\n    currentLayoutToOldIndex.add(oldLayoutList.size());\n    currentLayoutOffsets.add(currentWidth);\n    currentLayoutList.add(layout);\n    oldLayoutOffsets.add(oldWidth);\n    oldLayoutList.add(layout);\n    float partWidth=layout.getLineWidth(0);\n    currentWidth+=partWidth;\n    oldWidth+=partWidth;\n    currentHeight=Math.max(currentHeight,layout.getHeight());\n    oldHeight=Math.max(oldHeight,layout.getHeight());\n  }\n;\n  RegionCallback onNewPart=(part,from,to) -> {\n    StaticLayout layout=makeLayout(part,bounds.width() - currentWidth);\n    currentLayoutOffsets.add(currentWidth);\n    currentLayoutList.add(layout);\n    currentLayoutToOldIndex.add(-1);\n    currentWidth+=layout.getLineWidth(0);\n    currentHeight=Math.max(currentHeight,layout.getHeight());\n  }\n;\n  RegionCallback onOldPart=(part,from,to) -> {\n    StaticLayout layout=makeLayout(part,bounds.width() - oldWidth);\n    oldLayoutOffsets.add(oldWidth);\n    oldLayoutList.add(layout);\n    oldLayoutToCurrentIndex.add(-1);\n    oldWidth+=layout.getLineWidth(0);\n    oldHeight=Math.max(oldHeight,layout.getHeight());\n  }\n;\n  CharSequence from=splitByWords ? new WordSequence(oldText) : oldText;\n  CharSequence to=splitByWords ? new WordSequence(currentText) : currentText;\n  diff(from,to,onEqualRegion,onNewPart,onOldPart);\n  if (this.currentLayout == null || this.currentLayout.length != currentLayoutList.size()) {\n    this.currentLayout=new StaticLayout[currentLayoutList.size()];\n  }\n  currentLayoutList.toArray(currentLayout);\n  if (this.currentLayoutOffsets == null || this.currentLayoutOffsets.length != currentLayoutOffsets.size()) {\n    this.currentLayoutOffsets=new Integer[currentLayoutOffsets.size()];\n  }\n  currentLayoutOffsets.toArray(this.currentLayoutOffsets);\n  if (this.currentLayoutToOldIndex == null || this.currentLayoutToOldIndex.length != currentLayoutToOldIndex.size()) {\n    this.currentLayoutToOldIndex=new Integer[currentLayoutToOldIndex.size()];\n  }\n  currentLayoutToOldIndex.toArray(this.currentLayoutToOldIndex);\n  if (this.oldLayout == null || this.oldLayout.length != oldLayoutList.size()) {\n    this.oldLayout=new StaticLayout[oldLayoutList.size()];\n  }\n  oldLayoutList.toArray(oldLayout);\n  if (this.oldLayoutOffsets == null || this.oldLayoutOffsets.length != oldLayoutOffsets.size()) {\n    this.oldLayoutOffsets=new Integer[oldLayoutOffsets.size()];\n  }\n  oldLayoutOffsets.toArray(this.oldLayoutOffsets);\n  if (this.oldLayoutToCurrentIndex == null || this.oldLayoutToCurrentIndex.length != oldLayoutToCurrentIndex.size()) {\n    this.oldLayoutToCurrentIndex=new Integer[oldLayoutToCurrentIndex.size()];\n  }\n  oldLayoutToCurrentIndex.toArray(this.oldLayoutToCurrentIndex);\n  if (this.currentLayout.length > 0) {\n    isRTL=this.currentLayout[0].isRtlCharAt(0);\n  }\n else   if (this.oldLayout.length > 0) {\n    isRTL=this.oldLayout[0].isRtlCharAt(0);\n  }\n  this.moveDown=moveDown;\n  animator=ValueAnimator.ofFloat(t=0f,1f);\n  animator.addUpdateListener(anm -> {\n    t=(float)anm.getAnimatedValue();\n    invalidateSelf();\n  }\n);\n  animator.addListener(new AnimatorListenerAdapter(){\n    @Override public void onAnimationEnd(    Animator animation){\n      super.onAnimationEnd(animation);\n      oldLayout=null;\n      AnimatedTextDrawable.this.oldLayoutOffsets=null;\n      AnimatedTextDrawable.this.oldLayoutToCurrentIndex=null;\n      oldText=null;\n      oldWidth=0;\n      t=0;\n      invalidateSelf();\n      animator=null;\n      if (toSetText != null) {\n        setText(toSetText,true,toSetTextMoveDown);\n        toSetText=null;\n        toSetTextMoveDown=false;\n      }\n else       if (onAnimationFinishListener != null) {\n        onAnimationFinishListener.run();\n      }\n    }\n  }\n);\n  animator.setStartDelay(animateDelay);\n  animator.setDuration(animateDuration);\n  animator.setInterpolator(animateInterpolator);\n  animator.start();\n}\n else {\n  if (animator != null) {\n    animator.cancel();\n  }\n  animator=null;\n  toSetText=null;\n  toSetTextMoveDown=false;\n  t=0;\n  currentLayout=new StaticLayout[1];\n  currentLayout[0]=makeLayout(currentText=text,bounds.width());\n  currentWidth=(int)currentLayout[0].getLineWidth(0);\n  currentHeight=currentLayout[0].getHeight();\n  currentLayoutOffsets=new Integer[1];\n  currentLayoutOffsets[0]=0;\n  currentLayoutToOldIndex=new Integer[1];\n  currentLayoutToOldIndex[0]=-1;\n  if (this.currentLayout.length > 0) {\n    isRTL=this.currentLayout[0].isRtlCharAt(0);\n  }\n  oldLayout=null;\n  oldLayoutOffsets=null;\n  oldLayoutToCurrentIndex=null;\n  oldText=null;\n  oldWidth=0;\n  oldHeight=0;\n  invalidateSelf();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 918,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8097,
        "startLineNumber" : 188,
        "startColumnNumber" : 83,
        "endLineNumber" : 353,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (this.currentText == null || text == null) {\n    animated=false;\n  }\n  if (text == null) {\n    text=\"\";\n  }\n  if (animated) {\n    if (isAnimating()) {\n      toSetText=text;\n      toSetTextMoveDown=moveDown;\n      return;\n    }\n    if (text.equals(currentText)) {\n      return;\n    }\n    oldText=currentText;\n    currentText=text;\n    currentLayout=null;\n    oldLayout=null;\n    ArrayList<Integer> currentLayoutOffsets=new ArrayList<>();\n    ArrayList<Integer> currentLayoutToOldIndex=new ArrayList<>();\n    ArrayList<StaticLayout> currentLayoutList=new ArrayList<>();\n    ArrayList<Integer> oldLayoutOffsets=new ArrayList<>();\n    ArrayList<Integer> oldLayoutToCurrentIndex=new ArrayList<>();\n    ArrayList<StaticLayout> oldLayoutList=new ArrayList<>();\n    currentWidth=currentHeight=0;\n    oldWidth=oldHeight=0;\n    RegionCallback onEqualRegion=(part,from,to) -> {\n      StaticLayout layout=makeLayout(part,bounds.width() - Math.min(currentWidth,oldWidth));\n      oldLayoutToCurrentIndex.add(currentLayoutList.size());\n      currentLayoutToOldIndex.add(oldLayoutList.size());\n      currentLayoutOffsets.add(currentWidth);\n      currentLayoutList.add(layout);\n      oldLayoutOffsets.add(oldWidth);\n      oldLayoutList.add(layout);\n      float partWidth=layout.getLineWidth(0);\n      currentWidth+=partWidth;\n      oldWidth+=partWidth;\n      currentHeight=Math.max(currentHeight,layout.getHeight());\n      oldHeight=Math.max(oldHeight,layout.getHeight());\n    }\n;\n    RegionCallback onNewPart=(part,from,to) -> {\n      StaticLayout layout=makeLayout(part,bounds.width() - currentWidth);\n      currentLayoutOffsets.add(currentWidth);\n      currentLayoutList.add(layout);\n      currentLayoutToOldIndex.add(-1);\n      currentWidth+=layout.getLineWidth(0);\n      currentHeight=Math.max(currentHeight,layout.getHeight());\n    }\n;\n    RegionCallback onOldPart=(part,from,to) -> {\n      StaticLayout layout=makeLayout(part,bounds.width() - oldWidth);\n      oldLayoutOffsets.add(oldWidth);\n      oldLayoutList.add(layout);\n      oldLayoutToCurrentIndex.add(-1);\n      oldWidth+=layout.getLineWidth(0);\n      oldHeight=Math.max(oldHeight,layout.getHeight());\n    }\n;\n    CharSequence from=splitByWords ? new WordSequence(oldText) : oldText;\n    CharSequence to=splitByWords ? new WordSequence(currentText) : currentText;\n    diff(from,to,onEqualRegion,onNewPart,onOldPart);\n    if (this.currentLayout == null || this.currentLayout.length != currentLayoutList.size()) {\n      this.currentLayout=new StaticLayout[currentLayoutList.size()];\n    }\n    currentLayoutList.toArray(currentLayout);\n    if (this.currentLayoutOffsets == null || this.currentLayoutOffsets.length != currentLayoutOffsets.size()) {\n      this.currentLayoutOffsets=new Integer[currentLayoutOffsets.size()];\n    }\n    currentLayoutOffsets.toArray(this.currentLayoutOffsets);\n    if (this.currentLayoutToOldIndex == null || this.currentLayoutToOldIndex.length != currentLayoutToOldIndex.size()) {\n      this.currentLayoutToOldIndex=new Integer[currentLayoutToOldIndex.size()];\n    }\n    currentLayoutToOldIndex.toArray(this.currentLayoutToOldIndex);\n    if (this.oldLayout == null || this.oldLayout.length != oldLayoutList.size()) {\n      this.oldLayout=new StaticLayout[oldLayoutList.size()];\n    }\n    oldLayoutList.toArray(oldLayout);\n    if (this.oldLayoutOffsets == null || this.oldLayoutOffsets.length != oldLayoutOffsets.size()) {\n      this.oldLayoutOffsets=new Integer[oldLayoutOffsets.size()];\n    }\n    oldLayoutOffsets.toArray(this.oldLayoutOffsets);\n    if (this.oldLayoutToCurrentIndex == null || this.oldLayoutToCurrentIndex.length != oldLayoutToCurrentIndex.size()) {\n      this.oldLayoutToCurrentIndex=new Integer[oldLayoutToCurrentIndex.size()];\n    }\n    oldLayoutToCurrentIndex.toArray(this.oldLayoutToCurrentIndex);\n    if (this.currentLayout.length > 0) {\n      isRTL=this.currentLayout[0].isRtlCharAt(0);\n    }\n else     if (this.oldLayout.length > 0) {\n      isRTL=this.oldLayout[0].isRtlCharAt(0);\n    }\n    this.moveDown=moveDown;\n    animator=ValueAnimator.ofFloat(t=0f,1f);\n    animator.addUpdateListener(anm -> {\n      t=(float)anm.getAnimatedValue();\n      invalidateSelf();\n    }\n);\n    animator.addListener(new AnimatorListenerAdapter(){\n      @Override public void onAnimationEnd(      Animator animation){\n        super.onAnimationEnd(animation);\n        oldLayout=null;\n        AnimatedTextDrawable.this.oldLayoutOffsets=null;\n        AnimatedTextDrawable.this.oldLayoutToCurrentIndex=null;\n        oldText=null;\n        oldWidth=0;\n        t=0;\n        invalidateSelf();\n        animator=null;\n        if (toSetText != null) {\n          setText(toSetText,true,toSetTextMoveDown);\n          toSetText=null;\n          toSetTextMoveDown=false;\n        }\n else         if (onAnimationFinishListener != null) {\n          onAnimationFinishListener.run();\n        }\n      }\n    }\n);\n    animator.setStartDelay(animateDelay);\n    animator.setDuration(animateDuration);\n    animator.setInterpolator(animateInterpolator);\n    animator.start();\n  }\n else {\n    if (animator != null) {\n      animator.cancel();\n    }\n    animator=null;\n    toSetText=null;\n    toSetTextMoveDown=false;\n    t=0;\n    currentLayout=new StaticLayout[1];\n    currentLayout[0]=makeLayout(currentText=text,bounds.width());\n    currentWidth=(int)currentLayout[0].getLineWidth(0);\n    currentHeight=currentLayout[0].getHeight();\n    currentLayoutOffsets=new Integer[1];\n    currentLayoutOffsets[0]=0;\n    currentLayoutToOldIndex=new Integer[1];\n    currentLayoutToOldIndex[0]=-1;\n    if (this.currentLayout.length > 0) {\n      isRTL=this.currentLayout[0].isRtlCharAt(0);\n    }\n    oldLayout=null;\n    oldLayoutOffsets=null;\n    oldLayoutToCurrentIndex=null;\n    oldText=null;\n    oldWidth=0;\n    oldHeight=0;\n    invalidateSelf();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 943,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8172,
        "startLineNumber" : 188,
        "startColumnNumber" : 8,
        "endLineNumber" : 353,
        "endColumnNumber" : 9
      },
      "nodeContext" : "public void setText(CharSequence text,boolean animated,boolean moveDown){\n  if (this.currentText == null || text == null) {\n    animated=false;\n  }\n  if (text == null) {\n    text=\"\";\n  }\n  if (animated) {\n    if (isAnimating()) {\n      toSetText=text;\n      toSetTextMoveDown=moveDown;\n      return;\n    }\n    if (text.equals(currentText)) {\n      return;\n    }\n    oldText=currentText;\n    currentText=text;\n    currentLayout=null;\n    oldLayout=null;\n    ArrayList<Integer> currentLayoutOffsets=new ArrayList<>();\n    ArrayList<Integer> currentLayoutToOldIndex=new ArrayList<>();\n    ArrayList<StaticLayout> currentLayoutList=new ArrayList<>();\n    ArrayList<Integer> oldLayoutOffsets=new ArrayList<>();\n    ArrayList<Integer> oldLayoutToCurrentIndex=new ArrayList<>();\n    ArrayList<StaticLayout> oldLayoutList=new ArrayList<>();\n    currentWidth=currentHeight=0;\n    oldWidth=oldHeight=0;\n    RegionCallback onEqualRegion=(part,from,to) -> {\n      StaticLayout layout=makeLayout(part,bounds.width() - Math.min(currentWidth,oldWidth));\n      oldLayoutToCurrentIndex.add(currentLayoutList.size());\n      currentLayoutToOldIndex.add(oldLayoutList.size());\n      currentLayoutOffsets.add(currentWidth);\n      currentLayoutList.add(layout);\n      oldLayoutOffsets.add(oldWidth);\n      oldLayoutList.add(layout);\n      float partWidth=layout.getLineWidth(0);\n      currentWidth+=partWidth;\n      oldWidth+=partWidth;\n      currentHeight=Math.max(currentHeight,layout.getHeight());\n      oldHeight=Math.max(oldHeight,layout.getHeight());\n    }\n;\n    RegionCallback onNewPart=(part,from,to) -> {\n      StaticLayout layout=makeLayout(part,bounds.width() - currentWidth);\n      currentLayoutOffsets.add(currentWidth);\n      currentLayoutList.add(layout);\n      currentLayoutToOldIndex.add(-1);\n      currentWidth+=layout.getLineWidth(0);\n      currentHeight=Math.max(currentHeight,layout.getHeight());\n    }\n;\n    RegionCallback onOldPart=(part,from,to) -> {\n      StaticLayout layout=makeLayout(part,bounds.width() - oldWidth);\n      oldLayoutOffsets.add(oldWidth);\n      oldLayoutList.add(layout);\n      oldLayoutToCurrentIndex.add(-1);\n      oldWidth+=layout.getLineWidth(0);\n      oldHeight=Math.max(oldHeight,layout.getHeight());\n    }\n;\n    CharSequence from=splitByWords ? new WordSequence(oldText) : oldText;\n    CharSequence to=splitByWords ? new WordSequence(currentText) : currentText;\n    diff(from,to,onEqualRegion,onNewPart,onOldPart);\n    if (this.currentLayout == null || this.currentLayout.length != currentLayoutList.size()) {\n      this.currentLayout=new StaticLayout[currentLayoutList.size()];\n    }\n    currentLayoutList.toArray(currentLayout);\n    if (this.currentLayoutOffsets == null || this.currentLayoutOffsets.length != currentLayoutOffsets.size()) {\n      this.currentLayoutOffsets=new Integer[currentLayoutOffsets.size()];\n    }\n    currentLayoutOffsets.toArray(this.currentLayoutOffsets);\n    if (this.currentLayoutToOldIndex == null || this.currentLayoutToOldIndex.length != currentLayoutToOldIndex.size()) {\n      this.currentLayoutToOldIndex=new Integer[currentLayoutToOldIndex.size()];\n    }\n    currentLayoutToOldIndex.toArray(this.currentLayoutToOldIndex);\n    if (this.oldLayout == null || this.oldLayout.length != oldLayoutList.size()) {\n      this.oldLayout=new StaticLayout[oldLayoutList.size()];\n    }\n    oldLayoutList.toArray(oldLayout);\n    if (this.oldLayoutOffsets == null || this.oldLayoutOffsets.length != oldLayoutOffsets.size()) {\n      this.oldLayoutOffsets=new Integer[oldLayoutOffsets.size()];\n    }\n    oldLayoutOffsets.toArray(this.oldLayoutOffsets);\n    if (this.oldLayoutToCurrentIndex == null || this.oldLayoutToCurrentIndex.length != oldLayoutToCurrentIndex.size()) {\n      this.oldLayoutToCurrentIndex=new Integer[oldLayoutToCurrentIndex.size()];\n    }\n    oldLayoutToCurrentIndex.toArray(this.oldLayoutToCurrentIndex);\n    if (this.currentLayout.length > 0) {\n      isRTL=this.currentLayout[0].isRtlCharAt(0);\n    }\n else     if (this.oldLayout.length > 0) {\n      isRTL=this.oldLayout[0].isRtlCharAt(0);\n    }\n    this.moveDown=moveDown;\n    animator=ValueAnimator.ofFloat(t=0f,1f);\n    animator.addUpdateListener(anm -> {\n      t=(float)anm.getAnimatedValue();\n      invalidateSelf();\n    }\n);\n    animator.addListener(new AnimatorListenerAdapter(){\n      @Override public void onAnimationEnd(      Animator animation){\n        super.onAnimationEnd(animation);\n        oldLayout=null;\n        AnimatedTextDrawable.this.oldLayoutOffsets=null;\n        AnimatedTextDrawable.this.oldLayoutToCurrentIndex=null;\n        oldText=null;\n        oldWidth=0;\n        t=0;\n        invalidateSelf();\n        animator=null;\n        if (toSetText != null) {\n          setText(toSetText,true,toSetTextMoveDown);\n          toSetText=null;\n          toSetTextMoveDown=false;\n        }\n else         if (onAnimationFinishListener != null) {\n          onAnimationFinishListener.run();\n        }\n      }\n    }\n);\n    animator.setStartDelay(animateDelay);\n    animator.setDuration(animateDuration);\n    animator.setInterpolator(animateInterpolator);\n    animator.start();\n  }\n else {\n    if (animator != null) {\n      animator.cancel();\n    }\n    animator=null;\n    toSetText=null;\n    toSetTextMoveDown=false;\n    t=0;\n    currentLayout=new StaticLayout[1];\n    currentLayout[0]=makeLayout(currentText=text,bounds.width());\n    currentWidth=(int)currentLayout[0].getLineWidth(0);\n    currentHeight=currentLayout[0].getHeight();\n    currentLayoutOffsets=new Integer[1];\n    currentLayoutOffsets[0]=0;\n    currentLayoutToOldIndex=new Integer[1];\n    currentLayoutToOldIndex[0]=-1;\n    if (this.currentLayout.length > 0) {\n      isRTL=this.currentLayout[0].isRtlCharAt(0);\n    }\n    oldLayout=null;\n    oldLayoutOffsets=null;\n    oldLayoutToCurrentIndex=null;\n    oldText=null;\n    oldWidth=0;\n    oldHeight=0;\n    invalidateSelf();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 957,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 337,
        "startColumnNumber" : 16,
        "endLineNumber" : 337,
        "endColumnNumber" : 57
      },
      "nodeContext" : "currentLayoutToOldIndex=new Integer[1];\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 6
    },
    "tokenLength" : 2,
    "type" : "java.lang.Integer[]"
  } ],
  "positionList" : [ {
    "charLength" : 14,
    "startLineNumber" : 335,
    "startColumnNumber" : 39,
    "endLineNumber" : 335,
    "endColumnNumber" : 53
  }, {
    "charLength" : 14,
    "startLineNumber" : 337,
    "startColumnNumber" : 42,
    "endLineNumber" : 337,
    "endColumnNumber" : 56
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}