{
  "id" : 455,
  "expression" : "str.toCharArray()",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/main/java/com/williamfiset/algorithms/strings/ManachersAlgorithm.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "str.toCharArray()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 17,
      "startLineNumber" : 53,
      "startColumnNumber" : 15,
      "endLineNumber" : 53,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 53,
        "startColumnNumber" : 11,
        "endLineNumber" : 53,
        "endColumnNumber" : 32
      },
      "nodeContext" : "S=str.toCharArray()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 53,
        "startColumnNumber" : 4,
        "endLineNumber" : 53,
        "endColumnNumber" : 33
      },
      "nodeContext" : "char[] S=str.toCharArray();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 796,
        "startLineNumber" : 52,
        "startColumnNumber" : 79,
        "endLineNumber" : 79,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  char[] S=str.toCharArray();\n  int[] centers=manachers(S);\n  java.util.TreeSet<String> palindromes=new java.util.TreeSet<>();\n  for (int i=0; i < centers.length; i++) {\n    int diameter=centers[i];\n    if (diameter >= 1) {\n      if (i % 2 == 1) {\n        while (diameter > 1) {\n          int index=(i - 1) / 2 - diameter / 2;\n          palindromes.add(new String(S,index,diameter));\n          diameter-=2;\n        }\n      }\n else {\n        while (diameter >= 1) {\n          int index=(i - 2) / 2 - (diameter - 1) / 2;\n          palindromes.add(new String(S,index,diameter));\n          diameter-=2;\n        }\n      }\n    }\n  }\n  return palindromes;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 144,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 873,
        "startLineNumber" : 52,
        "startColumnNumber" : 2,
        "endLineNumber" : 79,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static java.util.TreeSet<String> findPalindromeSubstrings(String str){\n  char[] S=str.toCharArray();\n  int[] centers=manachers(S);\n  java.util.TreeSet<String> palindromes=new java.util.TreeSet<>();\n  for (int i=0; i < centers.length; i++) {\n    int diameter=centers[i];\n    if (diameter >= 1) {\n      if (i % 2 == 1) {\n        while (diameter > 1) {\n          int index=(i - 1) / 2 - diameter / 2;\n          palindromes.add(new String(S,index,diameter));\n          diameter-=2;\n        }\n      }\n else {\n        while (diameter >= 1) {\n          int index=(i - 2) / 2 - (diameter - 1) / 2;\n          palindromes.add(new String(S,index,diameter));\n          diameter-=2;\n        }\n      }\n    }\n  }\n  return palindromes;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 161,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 53,
        "startColumnNumber" : 4,
        "endLineNumber" : 53,
        "endColumnNumber" : 33
      },
      "nodeContext" : "char[] S=str.toCharArray();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "char[]"
  } ],
  "positionList" : [ {
    "charLength" : 17,
    "startLineNumber" : 53,
    "startColumnNumber" : 15,
    "endLineNumber" : 53,
    "endColumnNumber" : 32
  } ],
  "layoutRelationDataList" : [ ]
}