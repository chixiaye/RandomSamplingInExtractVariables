{
  "id" : 399,
  "expression" : "true",
  "projectName" : "spring-projects@spring-framework",
  "commitID" : "d5dab129097f98ed3148473422eb706c20fd10c9",
  "filePath" : "/spring-context/src/main/java/org/springframework/scheduling/SchedulingTaskExecutor.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "true",
    "nodeType" : "BooleanLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 58,
      "startColumnNumber" : 9,
      "endLineNumber" : 58,
      "endColumnNumber" : 13
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 58,
        "startColumnNumber" : 2,
        "endLineNumber" : 58,
        "endColumnNumber" : 14
      },
      "nodeContext" : "return true;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 57,
        "startColumnNumber" : 42,
        "endLineNumber" : 59,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 3,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 948,
        "startLineNumber" : 44,
        "startColumnNumber" : 1,
        "endLineNumber" : 59,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Does this  {@code TaskExecutor} prefer short-lived tasks over long-lived tasks?<p>A  {@code SchedulingTaskExecutor} implementation can indicate whether itprefers submitted tasks to perform as little work as they can within a single task execution. For example, submitted tasks might break a repeated loop into individual subtasks which submit a follow-up task afterwards (if feasible). <p>This should be considered a hint. Of course  {@code TaskExecutor} clientsare free to ignore this flag and hence the  {@code SchedulingTaskExecutor}interface overall. However, thread pools will usually indicated a preference for short-lived tasks, allowing for more fine-grained scheduling.\n * @return {@code true} if this executor prefers short-lived tasks (the default),{@code false} otherwise (for treatment like a regular {@code TaskExecutor})\n */\ndefault boolean prefersShortLivedTasks(){\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 8,
      "astHeight" : 5
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 58,
        "startColumnNumber" : 2,
        "endLineNumber" : 58,
        "endColumnNumber" : 14
      },
      "nodeContext" : "return true;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 58,
    "startColumnNumber" : 9,
    "endLineNumber" : 58,
    "endColumnNumber" : 13
  } ],
  "layoutRelationDataList" : [ ]
}