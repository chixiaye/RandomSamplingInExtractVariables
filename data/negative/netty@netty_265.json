{
  "id" : 265,
  "expression" : "new TrustManager[]{new X509TrustManager(){\n  @Override public void checkClientTrusted(  X509Certificate[] x509Certificates,  String s) throws CertificateException {\n    throw new CertificateException();\n  }\n  @Override public void checkServerTrusted(  X509Certificate[] x509Certificates,  String s) throws CertificateException {\n    throw new CertificateException();\n  }\n  @Override public X509Certificate[] getAcceptedIssuers(){\n    return EmptyArrays.EMPTY_X509_CERTIFICATES;\n  }\n}\n}",
  "projectName" : "netty@netty",
  "commitID" : "8a68c3e58d4663ae42e41a90d0d11aec3c25016b",
  "filePath" : "/handler/src/main/java/io/netty/handler/ssl/OpenSslX509TrustManagerWrapper.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new TrustManager[]{new X509TrustManager(){\n  @Override public void checkClientTrusted(  X509Certificate[] x509Certificates,  String s) throws CertificateException {\n    throw new CertificateException();\n  }\n  @Override public void checkServerTrusted(  X509Certificate[] x509Certificates,  String s) throws CertificateException {\n    throw new CertificateException();\n  }\n  @Override public X509Certificate[] getAcceptedIssuers(){\n    return EmptyArrays.EMPTY_X509_CERTIFICATES;\n  }\n}\n}",
    "nodeType" : "ArrayCreation",
    "nodePosition" : {
      "charLength" : 964,
      "startLineNumber" : 65,
      "startColumnNumber" : 35,
      "endLineNumber" : 84,
      "endColumnNumber" : 17
    },
    "astNodeNumber" : 70,
    "astHeight" : 10,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 990,
        "startLineNumber" : 65,
        "startColumnNumber" : 16,
        "endLineNumber" : 84,
        "endColumnNumber" : 24
      },
      "nodeContext" : "context.init(null,new TrustManager[]{new X509TrustManager(){\n  @Override public void checkClientTrusted(  X509Certificate[] x509Certificates,  String s) throws CertificateException {\n    throw new CertificateException();\n  }\n  @Override public void checkServerTrusted(  X509Certificate[] x509Certificates,  String s) throws CertificateException {\n    throw new CertificateException();\n  }\n  @Override public X509Certificate[] getAcceptedIssuers(){\n    return EmptyArrays.EMPTY_X509_CERTIFICATES;\n  }\n}\n},null)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 75,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 991,
        "startLineNumber" : 65,
        "startColumnNumber" : 16,
        "endLineNumber" : 84,
        "endColumnNumber" : 25
      },
      "nodeContext" : "context.init(null,new TrustManager[]{new X509TrustManager(){\n  @Override public void checkClientTrusted(  X509Certificate[] x509Certificates,  String s) throws CertificateException {\n    throw new CertificateException();\n  }\n  @Override public void checkServerTrusted(  X509Certificate[] x509Certificates,  String s) throws CertificateException {\n    throw new CertificateException();\n  }\n  @Override public X509Certificate[] getAcceptedIssuers(){\n    return EmptyArrays.EMPTY_X509_CERTIFICATES;\n  }\n}\n},null);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 76,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1541,
        "startLineNumber" : 56,
        "startColumnNumber" : 16,
        "endLineNumber" : 85,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  context=newSSLContext();\n  context.init(null,new TrustManager[]{new X509TrustManager(){\n    @Override public void checkClientTrusted(    X509Certificate[] x509Certificates,    String s) throws CertificateException {\n      throw new CertificateException();\n    }\n    @Override public void checkServerTrusted(    X509Certificate[] x509Certificates,    String s) throws CertificateException {\n      throw new CertificateException();\n    }\n    @Override public X509Certificate[] getAcceptedIssuers(){\n      return EmptyArrays.EMPTY_X509_CERTIFICATES;\n    }\n  }\n},null);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 82,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1651,
        "startLineNumber" : 56,
        "startColumnNumber" : 12,
        "endLineNumber" : 88,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  context=newSSLContext();\n  context.init(null,new TrustManager[]{new X509TrustManager(){\n    @Override public void checkClientTrusted(    X509Certificate[] x509Certificates,    String s) throws CertificateException {\n      throw new CertificateException();\n    }\n    @Override public void checkServerTrusted(    X509Certificate[] x509Certificates,    String s) throws CertificateException {\n      throw new CertificateException();\n    }\n    @Override public X509Certificate[] getAcceptedIssuers(){\n      return EmptyArrays.EMPTY_X509_CERTIFICATES;\n    }\n  }\n},null);\n}\n catch (Throwable error) {\n  context=null;\n  cause=error;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 97,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 4069,
        "startLineNumber" : 54,
        "startColumnNumber" : 33,
        "endLineNumber" : 128,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  SSLContext context;\n  try {\n    context=newSSLContext();\n    context.init(null,new TrustManager[]{new X509TrustManager(){\n      @Override public void checkClientTrusted(      X509Certificate[] x509Certificates,      String s) throws CertificateException {\n        throw new CertificateException();\n      }\n      @Override public void checkServerTrusted(      X509Certificate[] x509Certificates,      String s) throws CertificateException {\n        throw new CertificateException();\n      }\n      @Override public X509Certificate[] getAcceptedIssuers(){\n        return EmptyArrays.EMPTY_X509_CERTIFICATES;\n      }\n    }\n},null);\n  }\n catch (  Throwable error) {\n    context=null;\n    cause=error;\n  }\n  if (cause != null) {\n    LOGGER.debug(\"Unable to access wrapped TrustManager\",cause);\n  }\n else {\n    final SSLContext finalContext=context;\n    Object maybeWrapper=AccessController.doPrivileged((PrivilegedAction<Object>)() -> {\n      try {\n        Field contextSpiField=SSLContext.class.getDeclaredField(\"contextSpi\");\n        final long spiOffset=PlatformDependent.objectFieldOffset(contextSpiField);\n        Object spi=PlatformDependent.getObject(finalContext,spiOffset);\n        if (spi != null) {\n          Class<?> clazz=spi.getClass();\n          do {\n            try {\n              Field trustManagerField=clazz.getDeclaredField(\"trustManager\");\n              final long tmOffset=PlatformDependent.objectFieldOffset(trustManagerField);\n              Object trustManager=PlatformDependent.getObject(spi,tmOffset);\n              if (trustManager instanceof X509ExtendedTrustManager) {\n                return new UnsafeTrustManagerWrapper(spiOffset,tmOffset);\n              }\n            }\n catch (            NoSuchFieldException ignore) {\n            }\n            clazz=clazz.getSuperclass();\n          }\n while (clazz != null);\n        }\n        throw new NoSuchFieldException();\n      }\n catch (      NoSuchFieldException|SecurityException e) {\n        return e;\n      }\n    }\n);\n    if (maybeWrapper instanceof Throwable) {\n      LOGGER.debug(\"Unable to access wrapped TrustManager\",(Throwable)maybeWrapper);\n    }\n else {\n      wrapper=(TrustManagerWrapper)maybeWrapper;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 282,
      "astHeight" : 23
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4187,
        "startLineNumber" : 54,
        "startColumnNumber" : 8,
        "endLineNumber" : 130,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (unsafeCause == null) {\n  SSLContext context;\n  try {\n    context=newSSLContext();\n    context.init(null,new TrustManager[]{new X509TrustManager(){\n      @Override public void checkClientTrusted(      X509Certificate[] x509Certificates,      String s) throws CertificateException {\n        throw new CertificateException();\n      }\n      @Override public void checkServerTrusted(      X509Certificate[] x509Certificates,      String s) throws CertificateException {\n        throw new CertificateException();\n      }\n      @Override public X509Certificate[] getAcceptedIssuers(){\n        return EmptyArrays.EMPTY_X509_CERTIFICATES;\n      }\n    }\n},null);\n  }\n catch (  Throwable error) {\n    context=null;\n    cause=error;\n  }\n  if (cause != null) {\n    LOGGER.debug(\"Unable to access wrapped TrustManager\",cause);\n  }\n else {\n    final SSLContext finalContext=context;\n    Object maybeWrapper=AccessController.doPrivileged((PrivilegedAction<Object>)() -> {\n      try {\n        Field contextSpiField=SSLContext.class.getDeclaredField(\"contextSpi\");\n        final long spiOffset=PlatformDependent.objectFieldOffset(contextSpiField);\n        Object spi=PlatformDependent.getObject(finalContext,spiOffset);\n        if (spi != null) {\n          Class<?> clazz=spi.getClass();\n          do {\n            try {\n              Field trustManagerField=clazz.getDeclaredField(\"trustManager\");\n              final long tmOffset=PlatformDependent.objectFieldOffset(trustManagerField);\n              Object trustManager=PlatformDependent.getObject(spi,tmOffset);\n              if (trustManager instanceof X509ExtendedTrustManager) {\n                return new UnsafeTrustManagerWrapper(spiOffset,tmOffset);\n              }\n            }\n catch (            NoSuchFieldException ignore) {\n            }\n            clazz=clazz.getSuperclass();\n          }\n while (clazz != null);\n        }\n        throw new NoSuchFieldException();\n      }\n catch (      NoSuchFieldException|SecurityException e) {\n        return e;\n      }\n    }\n);\n    if (maybeWrapper instanceof Throwable) {\n      LOGGER.debug(\"Unable to access wrapped TrustManager\",(Throwable)maybeWrapper);\n    }\n else {\n      wrapper=(TrustManagerWrapper)maybeWrapper;\n    }\n  }\n}\n else {\n  LOGGER.debug(\"Unable to access wrapped TrustManager\",cause);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 293,
      "astHeight" : 24
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Initializer,body]",
      "nodePosition" : {
        "charLength" : 4500,
        "startLineNumber" : 48,
        "startColumnNumber" : 11,
        "endLineNumber" : 132,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  TrustManagerWrapper wrapper=manager -> manager;\n  Throwable cause=null;\n  Throwable unsafeCause=PlatformDependent.getUnsafeUnavailabilityCause();\n  if (unsafeCause == null) {\n    SSLContext context;\n    try {\n      context=newSSLContext();\n      context.init(null,new TrustManager[]{new X509TrustManager(){\n        @Override public void checkClientTrusted(        X509Certificate[] x509Certificates,        String s) throws CertificateException {\n          throw new CertificateException();\n        }\n        @Override public void checkServerTrusted(        X509Certificate[] x509Certificates,        String s) throws CertificateException {\n          throw new CertificateException();\n        }\n        @Override public X509Certificate[] getAcceptedIssuers(){\n          return EmptyArrays.EMPTY_X509_CERTIFICATES;\n        }\n      }\n},null);\n    }\n catch (    Throwable error) {\n      context=null;\n      cause=error;\n    }\n    if (cause != null) {\n      LOGGER.debug(\"Unable to access wrapped TrustManager\",cause);\n    }\n else {\n      final SSLContext finalContext=context;\n      Object maybeWrapper=AccessController.doPrivileged((PrivilegedAction<Object>)() -> {\n        try {\n          Field contextSpiField=SSLContext.class.getDeclaredField(\"contextSpi\");\n          final long spiOffset=PlatformDependent.objectFieldOffset(contextSpiField);\n          Object spi=PlatformDependent.getObject(finalContext,spiOffset);\n          if (spi != null) {\n            Class<?> clazz=spi.getClass();\n            do {\n              try {\n                Field trustManagerField=clazz.getDeclaredField(\"trustManager\");\n                final long tmOffset=PlatformDependent.objectFieldOffset(trustManagerField);\n                Object trustManager=PlatformDependent.getObject(spi,tmOffset);\n                if (trustManager instanceof X509ExtendedTrustManager) {\n                  return new UnsafeTrustManagerWrapper(spiOffset,tmOffset);\n                }\n              }\n catch (              NoSuchFieldException ignore) {\n              }\n              clazz=clazz.getSuperclass();\n            }\n while (clazz != null);\n          }\n          throw new NoSuchFieldException();\n        }\n catch (        NoSuchFieldException|SecurityException e) {\n          return e;\n        }\n      }\n);\n      if (maybeWrapper instanceof Throwable) {\n        LOGGER.debug(\"Unable to access wrapped TrustManager\",(Throwable)maybeWrapper);\n      }\n else {\n        wrapper=(TrustManagerWrapper)maybeWrapper;\n      }\n    }\n  }\n else {\n    LOGGER.debug(\"Unable to access wrapped TrustManager\",cause);\n  }\n  WRAPPER=wrapper;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 321,
      "astHeight" : 25
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4507,
        "startLineNumber" : 48,
        "startColumnNumber" : 4,
        "endLineNumber" : 132,
        "endColumnNumber" : 5
      },
      "nodeContext" : "static {\n  TrustManagerWrapper wrapper=manager -> manager;\n  Throwable cause=null;\n  Throwable unsafeCause=PlatformDependent.getUnsafeUnavailabilityCause();\n  if (unsafeCause == null) {\n    SSLContext context;\n    try {\n      context=newSSLContext();\n      context.init(null,new TrustManager[]{new X509TrustManager(){\n        @Override public void checkClientTrusted(        X509Certificate[] x509Certificates,        String s) throws CertificateException {\n          throw new CertificateException();\n        }\n        @Override public void checkServerTrusted(        X509Certificate[] x509Certificates,        String s) throws CertificateException {\n          throw new CertificateException();\n        }\n        @Override public X509Certificate[] getAcceptedIssuers(){\n          return EmptyArrays.EMPTY_X509_CERTIFICATES;\n        }\n      }\n},null);\n    }\n catch (    Throwable error) {\n      context=null;\n      cause=error;\n    }\n    if (cause != null) {\n      LOGGER.debug(\"Unable to access wrapped TrustManager\",cause);\n    }\n else {\n      final SSLContext finalContext=context;\n      Object maybeWrapper=AccessController.doPrivileged((PrivilegedAction<Object>)() -> {\n        try {\n          Field contextSpiField=SSLContext.class.getDeclaredField(\"contextSpi\");\n          final long spiOffset=PlatformDependent.objectFieldOffset(contextSpiField);\n          Object spi=PlatformDependent.getObject(finalContext,spiOffset);\n          if (spi != null) {\n            Class<?> clazz=spi.getClass();\n            do {\n              try {\n                Field trustManagerField=clazz.getDeclaredField(\"trustManager\");\n                final long tmOffset=PlatformDependent.objectFieldOffset(trustManagerField);\n                Object trustManager=PlatformDependent.getObject(spi,tmOffset);\n                if (trustManager instanceof X509ExtendedTrustManager) {\n                  return new UnsafeTrustManagerWrapper(spiOffset,tmOffset);\n                }\n              }\n catch (              NoSuchFieldException ignore) {\n              }\n              clazz=clazz.getSuperclass();\n            }\n while (clazz != null);\n          }\n          throw new NoSuchFieldException();\n        }\n catch (        NoSuchFieldException|SecurityException e) {\n          return e;\n        }\n      }\n);\n      if (maybeWrapper instanceof Throwable) {\n        LOGGER.debug(\"Unable to access wrapped TrustManager\",(Throwable)maybeWrapper);\n      }\n else {\n        wrapper=(TrustManagerWrapper)maybeWrapper;\n      }\n    }\n  }\n else {\n    LOGGER.debug(\"Unable to access wrapped TrustManager\",cause);\n  }\n  WRAPPER=wrapper;\n}\n",
      "nodeType" : "Initializer",
      "astNodeNumber" : 323,
      "astHeight" : 26
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 991,
        "startLineNumber" : 65,
        "startColumnNumber" : 16,
        "endLineNumber" : 84,
        "endColumnNumber" : 25
      },
      "nodeContext" : "context.init(null,new TrustManager[]{new X509TrustManager(){\n  @Override public void checkClientTrusted(  X509Certificate[] x509Certificates,  String s) throws CertificateException {\n    throw new CertificateException();\n  }\n  @Override public void checkServerTrusted(  X509Certificate[] x509Certificates,  String s) throws CertificateException {\n    throw new CertificateException();\n  }\n  @Override public X509Certificate[] getAcceptedIssuers(){\n    return EmptyArrays.EMPTY_X509_CERTIFICATES;\n  }\n}\n},null);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 76,
      "astHeight" : 12
    },
    "tokenLength" : 25,
    "type" : "javax.net.ssl.TrustManager[]"
  } ],
  "positionList" : [ {
    "charLength" : 964,
    "startLineNumber" : 65,
    "startColumnNumber" : 35,
    "endLineNumber" : 84,
    "endColumnNumber" : 17
  } ],
  "layoutRelationDataList" : [ ]
}