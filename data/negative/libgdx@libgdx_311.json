{
  "id" : 311,
  "expression" : "separation",
  "projectName" : "libgdx@libgdx",
  "commitID" : "3485b16e8979c0141421bc80cb8831b7a0403f67",
  "filePath" : "/extensions/gdx-box2d/gdx-box2d-gwt/src/com/badlogic/gdx/physics/box2d/gwt/emu/org/jbox2d/collision/broadphase/DynamicTreeFlatNodes.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "separation",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 271,
      "startColumnNumber" : 10,
      "endLineNumber" : 271,
      "endColumnNumber" : 20
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 271,
        "startColumnNumber" : 10,
        "endLineNumber" : 271,
        "endColumnNumber" : 27
      },
      "nodeContext" : "separation > 0.0f",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 271,
        "startColumnNumber" : 6,
        "endLineNumber" : 273,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (separation > 0.0f) {\n  continue;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 2041,
        "startLineNumber" : 249,
        "startColumnNumber" : 31,
        "endLineNumber" : 307,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int node=nodeStack[--nodeStackIndex]=m_root;\n  if (node == NULL_NODE) {\n    continue;\n  }\n  final AABB nodeAABB=m_aabb[node];\n  if (!AABB.testOverlap(nodeAABB,segAABB)) {\n    continue;\n  }\n  cx=(nodeAABB.lowerBound.x + nodeAABB.upperBound.x) * .5f;\n  cy=(nodeAABB.lowerBound.y + nodeAABB.upperBound.y) * .5f;\n  hx=(nodeAABB.upperBound.x - nodeAABB.lowerBound.x) * .5f;\n  hy=(nodeAABB.upperBound.y - nodeAABB.lowerBound.y) * .5f;\n  tempx=p1x - cx;\n  tempy=p1y - cy;\n  float separation=MathUtils.abs(vx * tempx + vy * tempy) - (absVx * hx + absVy * hy);\n  if (separation > 0.0f) {\n    continue;\n  }\n  int child1=m_child1[node];\n  if (child1 == NULL_NODE) {\n    subInput.p1.x=p1x;\n    subInput.p1.y=p1y;\n    subInput.p2.x=p2x;\n    subInput.p2.y=p2y;\n    subInput.maxFraction=maxFraction;\n    float value=callback.raycastCallback(subInput,node);\n    if (value == 0.0f) {\n      return;\n    }\n    if (value > 0.0f) {\n      maxFraction=value;\n      tempx=(p2x - p1x) * maxFraction + p1x;\n      tempy=(p2y - p1y) * maxFraction + p1y;\n      segAABB.lowerBound.x=p1x < tempx ? p1x : tempx;\n      segAABB.lowerBound.y=p1y < tempy ? p1y : tempy;\n      segAABB.upperBound.x=p1x > tempx ? p1x : tempx;\n      segAABB.upperBound.y=p1y > tempy ? p1y : tempy;\n    }\n  }\n else {\n    nodeStack[nodeStackIndex++]=child1;\n    nodeStack[nodeStackIndex++]=m_child2[node];\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 309,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2068,
        "startLineNumber" : 249,
        "startColumnNumber" : 4,
        "endLineNumber" : 307,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (nodeStackIndex > 0) {\n  int node=nodeStack[--nodeStackIndex]=m_root;\n  if (node == NULL_NODE) {\n    continue;\n  }\n  final AABB nodeAABB=m_aabb[node];\n  if (!AABB.testOverlap(nodeAABB,segAABB)) {\n    continue;\n  }\n  cx=(nodeAABB.lowerBound.x + nodeAABB.upperBound.x) * .5f;\n  cy=(nodeAABB.lowerBound.y + nodeAABB.upperBound.y) * .5f;\n  hx=(nodeAABB.upperBound.x - nodeAABB.lowerBound.x) * .5f;\n  hy=(nodeAABB.upperBound.y - nodeAABB.lowerBound.y) * .5f;\n  tempx=p1x - cx;\n  tempy=p1y - cy;\n  float separation=MathUtils.abs(vx * tempx + vy * tempy) - (absVx * hx + absVy * hy);\n  if (separation > 0.0f) {\n    continue;\n  }\n  int child1=m_child1[node];\n  if (child1 == NULL_NODE) {\n    subInput.p1.x=p1x;\n    subInput.p1.y=p1y;\n    subInput.p2.x=p2x;\n    subInput.p2.y=p2y;\n    subInput.maxFraction=maxFraction;\n    float value=callback.raycastCallback(subInput,node);\n    if (value == 0.0f) {\n      return;\n    }\n    if (value > 0.0f) {\n      maxFraction=value;\n      tempx=(p2x - p1x) * maxFraction + p1x;\n      tempy=(p2y - p1y) * maxFraction + p1y;\n      segAABB.lowerBound.x=p1x < tempx ? p1x : tempx;\n      segAABB.lowerBound.y=p1y < tempy ? p1y : tempy;\n      segAABB.upperBound.x=p1x > tempx ? p1x : tempx;\n      segAABB.upperBound.y=p1y > tempy ? p1y : tempy;\n    }\n  }\n else {\n    nodeStack[nodeStackIndex++]=child1;\n    nodeStack[nodeStackIndex++]=m_child2[node];\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 313,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3429,
        "startLineNumber" : 204,
        "startColumnNumber" : 72,
        "endLineNumber" : 308,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final Vec2 p1=input.p1;\n  final Vec2 p2=input.p2;\n  float p1x=p1.x, p2x=p2.x, p1y=p1.y, p2y=p2.y;\n  float vx, vy;\n  float rx, ry;\n  float absVx, absVy;\n  float cx, cy;\n  float hx, hy;\n  float tempx, tempy;\n  r.x=p2x - p1x;\n  r.y=p2y - p1y;\n  assert ((r.x * r.x + r.y * r.y) > 0f);\n  r.normalize();\n  rx=r.x;\n  ry=r.y;\n  vx=-1f * ry;\n  vy=1f * rx;\n  absVx=MathUtils.abs(vx);\n  absVy=MathUtils.abs(vy);\n  float maxFraction=input.maxFraction;\n  final AABB segAABB=aabb;\n  tempx=(p2x - p1x) * maxFraction + p1x;\n  tempy=(p2y - p1y) * maxFraction + p1y;\n  segAABB.lowerBound.x=p1x < tempx ? p1x : tempx;\n  segAABB.lowerBound.y=p1y < tempy ? p1y : tempy;\n  segAABB.upperBound.x=p1x > tempx ? p1x : tempx;\n  segAABB.upperBound.y=p1y > tempy ? p1y : tempy;\n  nodeStackIndex=0;\n  nodeStack[nodeStackIndex++]=m_root;\n  while (nodeStackIndex > 0) {\n    int node=nodeStack[--nodeStackIndex]=m_root;\n    if (node == NULL_NODE) {\n      continue;\n    }\n    final AABB nodeAABB=m_aabb[node];\n    if (!AABB.testOverlap(nodeAABB,segAABB)) {\n      continue;\n    }\n    cx=(nodeAABB.lowerBound.x + nodeAABB.upperBound.x) * .5f;\n    cy=(nodeAABB.lowerBound.y + nodeAABB.upperBound.y) * .5f;\n    hx=(nodeAABB.upperBound.x - nodeAABB.lowerBound.x) * .5f;\n    hy=(nodeAABB.upperBound.y - nodeAABB.lowerBound.y) * .5f;\n    tempx=p1x - cx;\n    tempy=p1y - cy;\n    float separation=MathUtils.abs(vx * tempx + vy * tempy) - (absVx * hx + absVy * hy);\n    if (separation > 0.0f) {\n      continue;\n    }\n    int child1=m_child1[node];\n    if (child1 == NULL_NODE) {\n      subInput.p1.x=p1x;\n      subInput.p1.y=p1y;\n      subInput.p2.x=p2x;\n      subInput.p2.y=p2y;\n      subInput.maxFraction=maxFraction;\n      float value=callback.raycastCallback(subInput,node);\n      if (value == 0.0f) {\n        return;\n      }\n      if (value > 0.0f) {\n        maxFraction=value;\n        tempx=(p2x - p1x) * maxFraction + p1x;\n        tempy=(p2y - p1y) * maxFraction + p1y;\n        segAABB.lowerBound.x=p1x < tempx ? p1x : tempx;\n        segAABB.lowerBound.y=p1y < tempy ? p1y : tempy;\n        segAABB.upperBound.x=p1x > tempx ? p1x : tempx;\n        segAABB.upperBound.y=p1y > tempy ? p1y : tempy;\n      }\n    }\n else {\n      nodeStack[nodeStackIndex++]=child1;\n      nodeStack[nodeStackIndex++]=m_child2[node];\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 568,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3511,
        "startLineNumber" : 203,
        "startColumnNumber" : 2,
        "endLineNumber" : 308,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public void raycast(TreeRayCastCallback callback,RayCastInput input){\n  final Vec2 p1=input.p1;\n  final Vec2 p2=input.p2;\n  float p1x=p1.x, p2x=p2.x, p1y=p1.y, p2y=p2.y;\n  float vx, vy;\n  float rx, ry;\n  float absVx, absVy;\n  float cx, cy;\n  float hx, hy;\n  float tempx, tempy;\n  r.x=p2x - p1x;\n  r.y=p2y - p1y;\n  assert ((r.x * r.x + r.y * r.y) > 0f);\n  r.normalize();\n  rx=r.x;\n  ry=r.y;\n  vx=-1f * ry;\n  vy=1f * rx;\n  absVx=MathUtils.abs(vx);\n  absVy=MathUtils.abs(vy);\n  float maxFraction=input.maxFraction;\n  final AABB segAABB=aabb;\n  tempx=(p2x - p1x) * maxFraction + p1x;\n  tempy=(p2y - p1y) * maxFraction + p1y;\n  segAABB.lowerBound.x=p1x < tempx ? p1x : tempx;\n  segAABB.lowerBound.y=p1y < tempy ? p1y : tempy;\n  segAABB.upperBound.x=p1x > tempx ? p1x : tempx;\n  segAABB.upperBound.y=p1y > tempy ? p1y : tempy;\n  nodeStackIndex=0;\n  nodeStack[nodeStackIndex++]=m_root;\n  while (nodeStackIndex > 0) {\n    int node=nodeStack[--nodeStackIndex]=m_root;\n    if (node == NULL_NODE) {\n      continue;\n    }\n    final AABB nodeAABB=m_aabb[node];\n    if (!AABB.testOverlap(nodeAABB,segAABB)) {\n      continue;\n    }\n    cx=(nodeAABB.lowerBound.x + nodeAABB.upperBound.x) * .5f;\n    cy=(nodeAABB.lowerBound.y + nodeAABB.upperBound.y) * .5f;\n    hx=(nodeAABB.upperBound.x - nodeAABB.lowerBound.x) * .5f;\n    hy=(nodeAABB.upperBound.y - nodeAABB.lowerBound.y) * .5f;\n    tempx=p1x - cx;\n    tempy=p1y - cy;\n    float separation=MathUtils.abs(vx * tempx + vy * tempy) - (absVx * hx + absVy * hy);\n    if (separation > 0.0f) {\n      continue;\n    }\n    int child1=m_child1[node];\n    if (child1 == NULL_NODE) {\n      subInput.p1.x=p1x;\n      subInput.p1.y=p1y;\n      subInput.p2.x=p2x;\n      subInput.p2.y=p2y;\n      subInput.maxFraction=maxFraction;\n      float value=callback.raycastCallback(subInput,node);\n      if (value == 0.0f) {\n        return;\n      }\n      if (value > 0.0f) {\n        maxFraction=value;\n        tempx=(p2x - p1x) * maxFraction + p1x;\n        tempy=(p2y - p1y) * maxFraction + p1y;\n        segAABB.lowerBound.x=p1x < tempx ? p1x : tempx;\n        segAABB.lowerBound.y=p1y < tempy ? p1y : tempy;\n        segAABB.upperBound.x=p1x > tempx ? p1x : tempx;\n        segAABB.upperBound.y=p1y > tempy ? p1y : tempy;\n      }\n    }\n else {\n      nodeStack[nodeStackIndex++]=child1;\n      nodeStack[nodeStackIndex++]=m_child2[node];\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 582,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 271,
        "startColumnNumber" : 10,
        "endLineNumber" : 271,
        "endColumnNumber" : 27
      },
      "nodeContext" : "separation > 0.0f",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "float"
  } ],
  "positionList" : [ {
    "charLength" : 10,
    "startLineNumber" : 271,
    "startColumnNumber" : 10,
    "endLineNumber" : 271,
    "endColumnNumber" : 20
  } ],
  "layoutRelationDataList" : [ ]
}