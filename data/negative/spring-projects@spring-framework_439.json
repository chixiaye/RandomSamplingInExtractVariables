{
  "id" : 439,
  "expression" : "result.getClass()",
  "projectName" : "spring-projects@spring-framework",
  "commitID" : "d5dab129097f98ed3148473422eb706c20fd10c9",
  "filePath" : "/spring-web/src/main/java/org/springframework/web/method/annotation/AbstractWebArgumentResolverAdapter.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "result.getClass()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 17,
      "startLineNumber" : 104,
      "startColumnNumber" : 68,
      "endLineNumber" : 104,
      "endColumnNumber" : 85
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 104,
        "startColumnNumber" : 51,
        "endLineNumber" : 104,
        "endColumnNumber" : 92
      },
      "nodeContext" : "result != null ? result.getClass() : null",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.InfixExpression,extendedOperands]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 104,
        "startColumnNumber" : 50,
        "endLineNumber" : 104,
        "endColumnNumber" : 93
      },
      "nodeContext" : "(result != null ? result.getClass() : null)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 262,
        "startLineNumber" : 103,
        "startColumnNumber" : 5,
        "endLineNumber" : 105,
        "endColumnNumber" : 74
      },
      "nodeContext" : "\"Standard argument type [\" + paramType.getName() + \"] in method \"+ parameter.getMethod()+ \"resolved to incompatible value of type [\"+ (result != null ? result.getClass() : null)+ \"]. Consider declaring the argument type in a less specific fashion.\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 20,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
      "nodePosition" : {
        "charLength" : 295,
        "startLineNumber" : 102,
        "startColumnNumber" : 9,
        "endLineNumber" : 105,
        "endColumnNumber" : 75
      },
      "nodeContext" : "new IllegalStateException(\"Standard argument type [\" + paramType.getName() + \"] in method \"+ parameter.getMethod()+ \"resolved to incompatible value of type [\"+ (result != null ? result.getClass() : null)+ \"]. Consider declaring the argument type in a less specific fashion.\")",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 23,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 302,
        "startLineNumber" : 102,
        "startColumnNumber" : 3,
        "endLineNumber" : 105,
        "endColumnNumber" : 76
      },
      "nodeContext" : "throw new IllegalStateException(\"Standard argument type [\" + paramType.getName() + \"] in method \"+ parameter.getMethod()+ \"resolved to incompatible value of type [\"+ (result != null ? result.getClass() : null)+ \"]. Consider declaring the argument type in a less specific fashion.\");\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 24,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 311,
        "startLineNumber" : 101,
        "startColumnNumber" : 100,
        "endLineNumber" : 106,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  throw new IllegalStateException(\"Standard argument type [\" + paramType.getName() + \"] in method \"+ parameter.getMethod()+ \"resolved to incompatible value of type [\"+ (result != null ? result.getClass() : null)+ \"]. Consider declaring the argument type in a less specific fashion.\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 25,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 409,
        "startLineNumber" : 101,
        "startColumnNumber" : 2,
        "endLineNumber" : 106,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (result == WebArgumentResolver.UNRESOLVED || !ClassUtils.isAssignableValue(paramType,result)) {\n  throw new IllegalStateException(\"Standard argument type [\" + paramType.getName() + \"] in method \"+ parameter.getMethod()+ \"resolved to incompatible value of type [\"+ (result != null ? result.getClass() : null)+ \"]. Consider declaring the argument type in a less specific fashion.\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 38,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 558,
        "startLineNumber" : 97,
        "startColumnNumber" : 95,
        "endLineNumber" : 108,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  Class<?> paramType=parameter.getParameterType();\n  Object result=this.adaptee.resolveArgument(parameter,webRequest);\n  if (result == WebArgumentResolver.UNRESOLVED || !ClassUtils.isAssignableValue(paramType,result)) {\n    throw new IllegalStateException(\"Standard argument type [\" + paramType.getName() + \"] in method \"+ parameter.getMethod()+ \"resolved to incompatible value of type [\"+ (result != null ? result.getClass() : null)+ \"]. Consider declaring the argument type in a less specific fashion.\");\n  }\n  return result;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 63,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 949,
        "startLineNumber" : 89,
        "startColumnNumber" : 1,
        "endLineNumber" : 108,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Delegate to the  {@link WebArgumentResolver} instance.\n * @throws IllegalStateException if the resolved value is not assignableto the method parameter.\n */\n@Override @Nullable public Object resolveArgument(MethodParameter parameter,@Nullable ModelAndViewContainer mavContainer,NativeWebRequest webRequest,@Nullable WebDataBinderFactory binderFactory) throws Exception {\n  Class<?> paramType=parameter.getParameterType();\n  Object result=this.adaptee.resolveArgument(parameter,webRequest);\n  if (result == WebArgumentResolver.UNRESOLVED || !ClassUtils.isAssignableValue(paramType,result)) {\n    throw new IllegalStateException(\"Standard argument type [\" + paramType.getName() + \"] in method \"+ parameter.getMethod()+ \"resolved to incompatible value of type [\"+ (result != null ? result.getClass() : null)+ \"]. Consider declaring the argument type in a less specific fashion.\");\n  }\n  return result;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 95,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.InfixExpression,extendedOperands]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 104,
        "startColumnNumber" : 50,
        "endLineNumber" : 104,
        "endColumnNumber" : 93
      },
      "nodeContext" : "(result != null ? result.getClass() : null)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.lang.Class<>"
  } ],
  "positionList" : [ {
    "charLength" : 17,
    "startLineNumber" : 104,
    "startColumnNumber" : 68,
    "endLineNumber" : 104,
    "endColumnNumber" : 85
  } ],
  "layoutRelationDataList" : [ ]
}