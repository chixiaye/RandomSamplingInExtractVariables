{
  "id" : 274,
  "expression" : "!op.returnTypeSupportsEntities",
  "projectName" : "OpenAPITools@openapi-generator",
  "commitID" : "48e05ce16283f59ce6889543e3aac47ce1f1a2ad",
  "filePath" : "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/TypeScriptFetchClientCodegen.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "!op.returnTypeSupportsEntities",
    "nodeType" : "PrefixExpression",
    "nodePosition" : {
      "charLength" : 30,
      "startLineNumber" : 771,
      "startColumnNumber" : 31,
      "endLineNumber" : 771,
      "endColumnNumber" : 61
    },
    "astNodeNumber" : 4,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 771,
        "startColumnNumber" : 31,
        "endLineNumber" : 771,
        "endColumnNumber" : 121
      },
      "nodeContext" : "!op.returnTypeSupportsEntities && !existingClassNames.contains(op.returnBaseTypeAlternate)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 205,
        "startLineNumber" : 771,
        "startColumnNumber" : 27,
        "endLineNumber" : 773,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (!op.returnTypeSupportsEntities && !existingClassNames.contains(op.returnBaseTypeAlternate)) {\n  additionalPassthroughImports.add(op.returnBaseTypeAlternate);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 421,
        "startLineNumber" : 769,
        "startColumnNumber" : 20,
        "endLineNumber" : 773,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (op.returnTypeSupportsEntities && !existingRecordClassNames.contains(op.returnBaseTypeAlternate)) {\n  additionalPassthroughImports.add(op.returnBaseTypeAlternate);\n}\n else if (!op.returnTypeSupportsEntities && !existingClassNames.contains(op.returnBaseTypeAlternate)) {\n  additionalPassthroughImports.add(op.returnBaseTypeAlternate);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 41,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 461,
        "startLineNumber" : 768,
        "startColumnNumber" : 98,
        "endLineNumber" : 774,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  if (op.returnTypeSupportsEntities && !existingRecordClassNames.contains(op.returnBaseTypeAlternate)) {\n    additionalPassthroughImports.add(op.returnBaseTypeAlternate);\n  }\n else   if (!op.returnTypeSupportsEntities && !existingClassNames.contains(op.returnBaseTypeAlternate)) {\n    additionalPassthroughImports.add(op.returnBaseTypeAlternate);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 42,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 543,
        "startLineNumber" : 768,
        "startColumnNumber" : 16,
        "endLineNumber" : 774,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (op.returnPassthrough != null && op.returnBaseTypeAlternate instanceof String) {\n  if (op.returnTypeSupportsEntities && !existingRecordClassNames.contains(op.returnBaseTypeAlternate)) {\n    additionalPassthroughImports.add(op.returnBaseTypeAlternate);\n  }\n else   if (!op.returnTypeSupportsEntities && !existingClassNames.contains(op.returnBaseTypeAlternate)) {\n    additionalPassthroughImports.add(op.returnBaseTypeAlternate);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 55,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 575,
        "startLineNumber" : 767,
        "startColumnNumber" : 62,
        "endLineNumber" : 775,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (op.returnPassthrough != null && op.returnBaseTypeAlternate instanceof String) {\n    if (op.returnTypeSupportsEntities && !existingRecordClassNames.contains(op.returnBaseTypeAlternate)) {\n      additionalPassthroughImports.add(op.returnBaseTypeAlternate);\n    }\n else     if (!op.returnTypeSupportsEntities && !existingClassNames.contains(op.returnBaseTypeAlternate)) {\n      additionalPassthroughImports.add(op.returnBaseTypeAlternate);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 56,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 625,
        "startLineNumber" : 767,
        "startColumnNumber" : 12,
        "endLineNumber" : 775,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (ExtendedCodegenOperation op : operationList) {\n  if (op.returnPassthrough != null && op.returnBaseTypeAlternate instanceof String) {\n    if (op.returnTypeSupportsEntities && !existingRecordClassNames.contains(op.returnBaseTypeAlternate)) {\n      additionalPassthroughImports.add(op.returnBaseTypeAlternate);\n    }\n else     if (!op.returnTypeSupportsEntities && !existingClassNames.contains(op.returnBaseTypeAlternate)) {\n      additionalPassthroughImports.add(op.returnBaseTypeAlternate);\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 62,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1121,
        "startLineNumber" : 763,
        "startColumnNumber" : 39,
        "endLineNumber" : 778,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Map<String,Object> _operations=(Map<String,Object>)operations.get(\"operations\");\n  List<ExtendedCodegenOperation> operationList=(List<ExtendedCodegenOperation>)_operations.get(\"operation\");\n  Set<String> additionalPassthroughImports=new TreeSet<String>();\n  for (  ExtendedCodegenOperation op : operationList) {\n    if (op.returnPassthrough != null && op.returnBaseTypeAlternate instanceof String) {\n      if (op.returnTypeSupportsEntities && !existingRecordClassNames.contains(op.returnBaseTypeAlternate)) {\n        additionalPassthroughImports.add(op.returnBaseTypeAlternate);\n      }\n else       if (!op.returnTypeSupportsEntities && !existingClassNames.contains(op.returnBaseTypeAlternate)) {\n        additionalPassthroughImports.add(op.returnBaseTypeAlternate);\n      }\n    }\n  }\n  operations.put(\"passthroughImports\",additionalPassthroughImports);\n  operations.put(\"hasPassthroughImports\",additionalPassthroughImports.size() > 0);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 133,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1152,
        "startLineNumber" : 763,
        "startColumnNumber" : 8,
        "endLineNumber" : 778,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (this.getSagasAndRecords()) {\n  Map<String,Object> _operations=(Map<String,Object>)operations.get(\"operations\");\n  List<ExtendedCodegenOperation> operationList=(List<ExtendedCodegenOperation>)_operations.get(\"operation\");\n  Set<String> additionalPassthroughImports=new TreeSet<String>();\n  for (  ExtendedCodegenOperation op : operationList) {\n    if (op.returnPassthrough != null && op.returnBaseTypeAlternate instanceof String) {\n      if (op.returnTypeSupportsEntities && !existingRecordClassNames.contains(op.returnBaseTypeAlternate)) {\n        additionalPassthroughImports.add(op.returnBaseTypeAlternate);\n      }\n else       if (!op.returnTypeSupportsEntities && !existingClassNames.contains(op.returnBaseTypeAlternate)) {\n        additionalPassthroughImports.add(op.returnBaseTypeAlternate);\n      }\n    }\n  }\n  operations.put(\"passthroughImports\",additionalPassthroughImports);\n  operations.put(\"hasPassthroughImports\",additionalPassthroughImports.size() > 0);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 137,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1915,
        "startLineNumber" : 749,
        "startColumnNumber" : 83,
        "endLineNumber" : 779,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<Map<String,Object>> imports=(List<Map<String,Object>>)operations.get(\"imports\");\n  List<String> existingRecordClassNames=new ArrayList<String>();\n  List<String> existingClassNames=new ArrayList<String>();\n  for (  Map<String,Object> im : imports) {\n    String className=im.get(\"import\").toString().replace(modelPackage() + \".\",\"\");\n    existingClassNames.add(className);\n    existingRecordClassNames.add(className + \"Record\");\n    im.put(\"className\",className);\n  }\n  if (this.getSagasAndRecords()) {\n    Map<String,Object> _operations=(Map<String,Object>)operations.get(\"operations\");\n    List<ExtendedCodegenOperation> operationList=(List<ExtendedCodegenOperation>)_operations.get(\"operation\");\n    Set<String> additionalPassthroughImports=new TreeSet<String>();\n    for (    ExtendedCodegenOperation op : operationList) {\n      if (op.returnPassthrough != null && op.returnBaseTypeAlternate instanceof String) {\n        if (op.returnTypeSupportsEntities && !existingRecordClassNames.contains(op.returnBaseTypeAlternate)) {\n          additionalPassthroughImports.add(op.returnBaseTypeAlternate);\n        }\n else         if (!op.returnTypeSupportsEntities && !existingClassNames.contains(op.returnBaseTypeAlternate)) {\n          additionalPassthroughImports.add(op.returnBaseTypeAlternate);\n        }\n      }\n    }\n    operations.put(\"passthroughImports\",additionalPassthroughImports);\n    operations.put(\"hasPassthroughImports\",additionalPassthroughImports.size() > 0);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 242,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1994,
        "startLineNumber" : 749,
        "startColumnNumber" : 4,
        "endLineNumber" : 779,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void addOperationModelImportInfomation(Map<String,Object> operations){\n  List<Map<String,Object>> imports=(List<Map<String,Object>>)operations.get(\"imports\");\n  List<String> existingRecordClassNames=new ArrayList<String>();\n  List<String> existingClassNames=new ArrayList<String>();\n  for (  Map<String,Object> im : imports) {\n    String className=im.get(\"import\").toString().replace(modelPackage() + \".\",\"\");\n    existingClassNames.add(className);\n    existingRecordClassNames.add(className + \"Record\");\n    im.put(\"className\",className);\n  }\n  if (this.getSagasAndRecords()) {\n    Map<String,Object> _operations=(Map<String,Object>)operations.get(\"operations\");\n    List<ExtendedCodegenOperation> operationList=(List<ExtendedCodegenOperation>)_operations.get(\"operation\");\n    Set<String> additionalPassthroughImports=new TreeSet<String>();\n    for (    ExtendedCodegenOperation op : operationList) {\n      if (op.returnPassthrough != null && op.returnBaseTypeAlternate instanceof String) {\n        if (op.returnTypeSupportsEntities && !existingRecordClassNames.contains(op.returnBaseTypeAlternate)) {\n          additionalPassthroughImports.add(op.returnBaseTypeAlternate);\n        }\n else         if (!op.returnTypeSupportsEntities && !existingClassNames.contains(op.returnBaseTypeAlternate)) {\n          additionalPassthroughImports.add(op.returnBaseTypeAlternate);\n        }\n      }\n    }\n    operations.put(\"passthroughImports\",additionalPassthroughImports);\n    operations.put(\"hasPassthroughImports\",additionalPassthroughImports.size() > 0);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 255,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 771,
        "startColumnNumber" : 31,
        "endLineNumber" : 771,
        "endColumnNumber" : 121
      },
      "nodeContext" : "!op.returnTypeSupportsEntities && !existingClassNames.contains(op.returnBaseTypeAlternate)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 30,
    "startLineNumber" : 771,
    "startColumnNumber" : 31,
    "endLineNumber" : 771,
    "endColumnNumber" : 61
  } ],
  "layoutRelationDataList" : [ ]
}