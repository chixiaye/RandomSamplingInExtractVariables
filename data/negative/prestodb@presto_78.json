{
  "id" : 78,
  "expression" : "followingRowOffset - rowOffset",
  "projectName" : "prestodb@presto",
  "commitID" : "eff77883d0d24dc6022ecde252612d1430c9fbac",
  "filePath" : "/presto-spark-base/src/main/java/com/facebook/presto/spark/execution/PrestoSparkRowBatch.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "followingRowOffset - rowOffset",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 30,
      "startLineNumber" : 273,
      "startColumnNumber" : 38,
      "endLineNumber" : 273,
      "endColumnNumber" : 68
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 273,
        "startColumnNumber" : 28,
        "endLineNumber" : 273,
        "endColumnNumber" : 68
      },
      "nodeContext" : "rowSize=followingRowOffset - rowOffset",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 273,
        "startColumnNumber" : 24,
        "endLineNumber" : 273,
        "endColumnNumber" : 69
      },
      "nodeContext" : "int rowSize=followingRowOffset - rowOffset;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 1070,
        "startLineNumber" : 268,
        "startColumnNumber" : 59,
        "endLineNumber" : 290,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  int row=rowIndex.peekRow(partition);\n  int followingRow=row + 1;\n  int rowOffset=rowOffsets[row];\n  int followingRowOffset=followingRow < rowCount ? rowOffsets[followingRow] : totalSizeInBytes;\n  int rowSize=followingRowOffset - rowOffset;\n  verify(rowSize >= 2,\"rowSize is expected to be greater than or equal to 2: %s\",rowSize);\n  rowOffset+=2;\n  rowSize-=2;\n  if (currentEntryRowCount > 0 && (currentEntrySize + rowSize > maxEntrySizeInBytes || currentEntryRowCount + 1 > maxRowsPerEntry)) {\n    break;\n  }\n  output.writeBytes(data,rowOffset,rowSize);\n  currentEntrySize+=rowSize;\n  currentEntryRowCount++;\n  rowIndex.nextRow(partition);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 96,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1109,
        "startLineNumber" : 268,
        "startColumnNumber" : 20,
        "endLineNumber" : 290,
        "endColumnNumber" : 21
      },
      "nodeContext" : "while (rowIndex.hasNextRow(partition)) {\n  int row=rowIndex.peekRow(partition);\n  int followingRow=row + 1;\n  int rowOffset=rowOffsets[row];\n  int followingRowOffset=followingRow < rowCount ? rowOffsets[followingRow] : totalSizeInBytes;\n  int rowSize=followingRowOffset - rowOffset;\n  verify(rowSize >= 2,\"rowSize is expected to be greater than or equal to 2: %s\",rowSize);\n  rowOffset+=2;\n  rowSize-=2;\n  if (currentEntryRowCount > 0 && (currentEntrySize + rowSize > maxEntrySizeInBytes || currentEntryRowCount + 1 > maxRowsPerEntry)) {\n    break;\n  }\n  output.writeBytes(data,rowOffset,rowSize);\n  currentEntrySize+=rowSize;\n  currentEntryRowCount++;\n  rowIndex.nextRow(partition);\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 101,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 1961,
        "startLineNumber" : 255,
        "startColumnNumber" : 55,
        "endLineNumber" : 295,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  short currentEntrySize=0;\n  short currentEntryRowCount=0;\n  int currentEntryOffset=output.size();\n  output.writeShort(0);\n  entryOffsets=ensureCapacity(entryOffsets,entriesCount + 1);\n  entryOffsets[entriesCount]=currentEntryOffset;\n  entryPartitions=ensureCapacity(entryPartitions,entriesCount + 1);\n  entryPartitions[entriesCount]=partition;\n  while (rowIndex.hasNextRow(partition)) {\n    int row=rowIndex.peekRow(partition);\n    int followingRow=row + 1;\n    int rowOffset=rowOffsets[row];\n    int followingRowOffset=followingRow < rowCount ? rowOffsets[followingRow] : totalSizeInBytes;\n    int rowSize=followingRowOffset - rowOffset;\n    verify(rowSize >= 2,\"rowSize is expected to be greater than or equal to 2: %s\",rowSize);\n    rowOffset+=2;\n    rowSize-=2;\n    if (currentEntryRowCount > 0 && (currentEntrySize + rowSize > maxEntrySizeInBytes || currentEntryRowCount + 1 > maxRowsPerEntry)) {\n      break;\n    }\n    output.writeBytes(data,rowOffset,rowSize);\n    currentEntrySize+=rowSize;\n    currentEntryRowCount++;\n    rowIndex.nextRow(partition);\n  }\n  output.getUnderlyingSlice().setShort(currentEntryOffset,currentEntryRowCount);\n  entriesCount++;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 165,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2000,
        "startLineNumber" : 255,
        "startColumnNumber" : 16,
        "endLineNumber" : 295,
        "endColumnNumber" : 17
      },
      "nodeContext" : "while (rowIndex.hasNextRow(partition)) {\n  short currentEntrySize=0;\n  short currentEntryRowCount=0;\n  int currentEntryOffset=output.size();\n  output.writeShort(0);\n  entryOffsets=ensureCapacity(entryOffsets,entriesCount + 1);\n  entryOffsets[entriesCount]=currentEntryOffset;\n  entryPartitions=ensureCapacity(entryPartitions,entriesCount + 1);\n  entryPartitions[entriesCount]=partition;\n  while (rowIndex.hasNextRow(partition)) {\n    int row=rowIndex.peekRow(partition);\n    int followingRow=row + 1;\n    int rowOffset=rowOffsets[row];\n    int followingRowOffset=followingRow < rowCount ? rowOffsets[followingRow] : totalSizeInBytes;\n    int rowSize=followingRowOffset - rowOffset;\n    verify(rowSize >= 2,\"rowSize is expected to be greater than or equal to 2: %s\",rowSize);\n    rowOffset+=2;\n    rowSize-=2;\n    if (currentEntryRowCount > 0 && (currentEntrySize + rowSize > maxEntrySizeInBytes || currentEntryRowCount + 1 > maxRowsPerEntry)) {\n      break;\n    }\n    output.writeBytes(data,rowOffset,rowSize);\n    currentEntrySize+=rowSize;\n    currentEntryRowCount++;\n    rowIndex.nextRow(partition);\n  }\n  output.getUnderlyingSlice().setShort(currentEntryOffset,currentEntryRowCount);\n  entriesCount++;\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 170,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 2032,
        "startLineNumber" : 254,
        "startColumnNumber" : 103,
        "endLineNumber" : 296,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  while (rowIndex.hasNextRow(partition)) {\n    short currentEntrySize=0;\n    short currentEntryRowCount=0;\n    int currentEntryOffset=output.size();\n    output.writeShort(0);\n    entryOffsets=ensureCapacity(entryOffsets,entriesCount + 1);\n    entryOffsets[entriesCount]=currentEntryOffset;\n    entryPartitions=ensureCapacity(entryPartitions,entriesCount + 1);\n    entryPartitions[entriesCount]=partition;\n    while (rowIndex.hasNextRow(partition)) {\n      int row=rowIndex.peekRow(partition);\n      int followingRow=row + 1;\n      int rowOffset=rowOffsets[row];\n      int followingRowOffset=followingRow < rowCount ? rowOffsets[followingRow] : totalSizeInBytes;\n      int rowSize=followingRowOffset - rowOffset;\n      verify(rowSize >= 2,\"rowSize is expected to be greater than or equal to 2: %s\",rowSize);\n      rowOffset+=2;\n      rowSize-=2;\n      if (currentEntryRowCount > 0 && (currentEntrySize + rowSize > maxEntrySizeInBytes || currentEntryRowCount + 1 > maxRowsPerEntry)) {\n        break;\n      }\n      output.writeBytes(data,rowOffset,rowSize);\n      currentEntrySize+=rowSize;\n      currentEntryRowCount++;\n      rowIndex.nextRow(partition);\n    }\n    output.getUnderlyingSlice().setShort(currentEntryOffset,currentEntryRowCount);\n    entriesCount++;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 171,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2123,
        "startLineNumber" : 254,
        "startColumnNumber" : 12,
        "endLineNumber" : 296,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int partition=REPLICATED_ROW_PARTITION_ID; partition < partitionCount; partition++) {\n  while (rowIndex.hasNextRow(partition)) {\n    short currentEntrySize=0;\n    short currentEntryRowCount=0;\n    int currentEntryOffset=output.size();\n    output.writeShort(0);\n    entryOffsets=ensureCapacity(entryOffsets,entriesCount + 1);\n    entryOffsets[entriesCount]=currentEntryOffset;\n    entryPartitions=ensureCapacity(entryPartitions,entriesCount + 1);\n    entryPartitions[entriesCount]=partition;\n    while (rowIndex.hasNextRow(partition)) {\n      int row=rowIndex.peekRow(partition);\n      int followingRow=row + 1;\n      int rowOffset=rowOffsets[row];\n      int followingRowOffset=followingRow < rowCount ? rowOffsets[followingRow] : totalSizeInBytes;\n      int rowSize=followingRowOffset - rowOffset;\n      verify(rowSize >= 2,\"rowSize is expected to be greater than or equal to 2: %s\",rowSize);\n      rowOffset+=2;\n      rowSize-=2;\n      if (currentEntryRowCount > 0 && (currentEntrySize + rowSize > maxEntrySizeInBytes || currentEntryRowCount + 1 > maxRowsPerEntry)) {\n        break;\n      }\n      output.writeBytes(data,rowOffset,rowSize);\n      currentEntrySize+=rowSize;\n      currentEntryRowCount++;\n      rowIndex.nextRow(partition);\n    }\n    output.getUnderlyingSlice().setShort(currentEntryOffset,currentEntryRowCount);\n    entriesCount++;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 182,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2959,
        "startLineNumber" : 245,
        "startColumnNumber" : 8,
        "endLineNumber" : 305,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  RowIndex rowIndex=RowIndex.create(rowCount,partitionCount,rowPartitions);\n  byte[] data=sliceOutput.getUnderlyingSlice().byteArray();\n  DynamicSliceOutput output=new DynamicSliceOutput((int)(totalSizeInBytes * 1.2f));\n  int expectedEntriesCount=(int)((totalSizeInBytes / targetAverageRowSizeInBytes) * 1.2f);\n  int[] entryOffsets=new int[expectedEntriesCount];\n  int[] entryPartitions=new int[expectedEntriesCount];\n  int entriesCount=0;\n  for (int partition=REPLICATED_ROW_PARTITION_ID; partition < partitionCount; partition++) {\n    while (rowIndex.hasNextRow(partition)) {\n      short currentEntrySize=0;\n      short currentEntryRowCount=0;\n      int currentEntryOffset=output.size();\n      output.writeShort(0);\n      entryOffsets=ensureCapacity(entryOffsets,entriesCount + 1);\n      entryOffsets[entriesCount]=currentEntryOffset;\n      entryPartitions=ensureCapacity(entryPartitions,entriesCount + 1);\n      entryPartitions[entriesCount]=partition;\n      while (rowIndex.hasNextRow(partition)) {\n        int row=rowIndex.peekRow(partition);\n        int followingRow=row + 1;\n        int rowOffset=rowOffsets[row];\n        int followingRowOffset=followingRow < rowCount ? rowOffsets[followingRow] : totalSizeInBytes;\n        int rowSize=followingRowOffset - rowOffset;\n        verify(rowSize >= 2,\"rowSize is expected to be greater than or equal to 2: %s\",rowSize);\n        rowOffset+=2;\n        rowSize-=2;\n        if (currentEntryRowCount > 0 && (currentEntrySize + rowSize > maxEntrySizeInBytes || currentEntryRowCount + 1 > maxRowsPerEntry)) {\n          break;\n        }\n        output.writeBytes(data,rowOffset,rowSize);\n        currentEntrySize+=rowSize;\n        currentEntryRowCount++;\n        rowIndex.nextRow(partition);\n      }\n      output.getUnderlyingSlice().setShort(currentEntryOffset,currentEntryRowCount);\n      entriesCount++;\n    }\n  }\n  return new PrestoSparkRowBatch(partitionCount,entriesCount,output.getUnderlyingSlice().byteArray(),entryPartitions,entryOffsets,output.size());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 275,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3019,
        "startLineNumber" : 244,
        "startColumnNumber" : 8,
        "endLineNumber" : 305,
        "endColumnNumber" : 9
      },
      "nodeContext" : "private PrestoSparkRowBatch createGroupedRowBatch(){\n  RowIndex rowIndex=RowIndex.create(rowCount,partitionCount,rowPartitions);\n  byte[] data=sliceOutput.getUnderlyingSlice().byteArray();\n  DynamicSliceOutput output=new DynamicSliceOutput((int)(totalSizeInBytes * 1.2f));\n  int expectedEntriesCount=(int)((totalSizeInBytes / targetAverageRowSizeInBytes) * 1.2f);\n  int[] entryOffsets=new int[expectedEntriesCount];\n  int[] entryPartitions=new int[expectedEntriesCount];\n  int entriesCount=0;\n  for (int partition=REPLICATED_ROW_PARTITION_ID; partition < partitionCount; partition++) {\n    while (rowIndex.hasNextRow(partition)) {\n      short currentEntrySize=0;\n      short currentEntryRowCount=0;\n      int currentEntryOffset=output.size();\n      output.writeShort(0);\n      entryOffsets=ensureCapacity(entryOffsets,entriesCount + 1);\n      entryOffsets[entriesCount]=currentEntryOffset;\n      entryPartitions=ensureCapacity(entryPartitions,entriesCount + 1);\n      entryPartitions[entriesCount]=partition;\n      while (rowIndex.hasNextRow(partition)) {\n        int row=rowIndex.peekRow(partition);\n        int followingRow=row + 1;\n        int rowOffset=rowOffsets[row];\n        int followingRowOffset=followingRow < rowCount ? rowOffsets[followingRow] : totalSizeInBytes;\n        int rowSize=followingRowOffset - rowOffset;\n        verify(rowSize >= 2,\"rowSize is expected to be greater than or equal to 2: %s\",rowSize);\n        rowOffset+=2;\n        rowSize-=2;\n        if (currentEntryRowCount > 0 && (currentEntrySize + rowSize > maxEntrySizeInBytes || currentEntryRowCount + 1 > maxRowsPerEntry)) {\n          break;\n        }\n        output.writeBytes(data,rowOffset,rowSize);\n        currentEntrySize+=rowSize;\n        currentEntryRowCount++;\n        rowIndex.nextRow(partition);\n      }\n      output.getUnderlyingSlice().setShort(currentEntryOffset,currentEntryRowCount);\n      entriesCount++;\n    }\n  }\n  return new PrestoSparkRowBatch(partitionCount,entriesCount,output.getUnderlyingSlice().byteArray(),entryPartitions,entryOffsets,output.size());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 280,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 273,
        "startColumnNumber" : 24,
        "endLineNumber" : 273,
        "endColumnNumber" : 69
      },
      "nodeContext" : "int rowSize=followingRowOffset - rowOffset;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 30,
    "startLineNumber" : 273,
    "startColumnNumber" : 38,
    "endLineNumber" : 273,
    "endColumnNumber" : 68
  } ],
  "layoutRelationDataList" : [ ]
}