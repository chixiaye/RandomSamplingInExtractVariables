{
  "id" : 190,
  "expression" : "this.taskDecorator.decorate(task)",
  "projectName" : "spring-projects@spring-framework",
  "commitID" : "d5dab129097f98ed3148473422eb706c20fd10c9",
  "filePath" : "/spring-tx/src/main/java/org/springframework/jca/work/WorkManagerTaskExecutor.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "this.taskDecorator.decorate(task)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 33,
      "startLineNumber" : 222,
      "startColumnNumber" : 62,
      "endLineNumber" : 222,
      "endColumnNumber" : 95
    },
    "astNodeNumber" : 6,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 222,
        "startColumnNumber" : 33,
        "endLineNumber" : 222,
        "endColumnNumber" : 102
      },
      "nodeContext" : "this.taskDecorator != null ? this.taskDecorator.decorate(task) : task",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 89,
        "startLineNumber" : 222,
        "startColumnNumber" : 14,
        "endLineNumber" : 222,
        "endColumnNumber" : 103
      },
      "nodeContext" : "new DelegatingWork(this.taskDecorator != null ? this.taskDecorator.decorate(task) : task)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 96,
        "startLineNumber" : 222,
        "startColumnNumber" : 7,
        "endLineNumber" : 222,
        "endColumnNumber" : 103
      },
      "nodeContext" : "work=new DelegatingWork(this.taskDecorator != null ? this.taskDecorator.decorate(task) : task)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 222,
        "startColumnNumber" : 2,
        "endLineNumber" : 222,
        "endColumnNumber" : 104
      },
      "nodeContext" : "Work work=new DelegatingWork(this.taskDecorator != null ? this.taskDecorator.decorate(task) : task);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 21,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1310,
        "startLineNumber" : 221,
        "startColumnNumber" : 55,
        "endLineNumber" : 260,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  Work work=new DelegatingWork(this.taskDecorator != null ? this.taskDecorator.decorate(task) : task);\n  try {\n    if (this.blockUntilCompleted) {\n      if (startTimeout != TIMEOUT_INDEFINITE || this.workListener != null) {\n        obtainWorkManager().doWork(work,startTimeout,null,this.workListener);\n      }\n else {\n        obtainWorkManager().doWork(work);\n      }\n    }\n else     if (this.blockUntilStarted) {\n      if (startTimeout != TIMEOUT_INDEFINITE || this.workListener != null) {\n        obtainWorkManager().startWork(work,startTimeout,null,this.workListener);\n      }\n else {\n        obtainWorkManager().startWork(work);\n      }\n    }\n else {\n      if (startTimeout != TIMEOUT_INDEFINITE || this.workListener != null) {\n        obtainWorkManager().scheduleWork(work,startTimeout,null,this.workListener);\n      }\n else {\n        obtainWorkManager().scheduleWork(work);\n      }\n    }\n  }\n catch (  WorkRejectedException ex) {\n    if (WorkException.START_TIMED_OUT.equals(ex.getErrorCode())) {\n      throw new TaskTimeoutException(\"JCA WorkManager rejected task because of timeout: \" + task,ex);\n    }\n else {\n      throw new TaskRejectedException(\"JCA WorkManager rejected task: \" + task,ex);\n    }\n  }\ncatch (  WorkException ex) {\n    throw new SchedulingException(\"Could not schedule task on JCA WorkManager\",ex);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 167,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1375,
        "startLineNumber" : 220,
        "startColumnNumber" : 1,
        "endLineNumber" : 260,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override public void execute(Runnable task,long startTimeout){\n  Work work=new DelegatingWork(this.taskDecorator != null ? this.taskDecorator.decorate(task) : task);\n  try {\n    if (this.blockUntilCompleted) {\n      if (startTimeout != TIMEOUT_INDEFINITE || this.workListener != null) {\n        obtainWorkManager().doWork(work,startTimeout,null,this.workListener);\n      }\n else {\n        obtainWorkManager().doWork(work);\n      }\n    }\n else     if (this.blockUntilStarted) {\n      if (startTimeout != TIMEOUT_INDEFINITE || this.workListener != null) {\n        obtainWorkManager().startWork(work,startTimeout,null,this.workListener);\n      }\n else {\n        obtainWorkManager().startWork(work);\n      }\n    }\n else {\n      if (startTimeout != TIMEOUT_INDEFINITE || this.workListener != null) {\n        obtainWorkManager().scheduleWork(work,startTimeout,null,this.workListener);\n      }\n else {\n        obtainWorkManager().scheduleWork(work);\n      }\n    }\n  }\n catch (  WorkRejectedException ex) {\n    if (WorkException.START_TIMED_OUT.equals(ex.getErrorCode())) {\n      throw new TaskTimeoutException(\"JCA WorkManager rejected task because of timeout: \" + task,ex);\n    }\n else {\n      throw new TaskRejectedException(\"JCA WorkManager rejected task: \" + task,ex);\n    }\n  }\ncatch (  WorkException ex) {\n    throw new SchedulingException(\"Could not schedule task on JCA WorkManager\",ex);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 180,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 222,
        "startColumnNumber" : 2,
        "endLineNumber" : 222,
        "endColumnNumber" : 104
      },
      "nodeContext" : "Work work=new DelegatingWork(this.taskDecorator != null ? this.taskDecorator.decorate(task) : task);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 21,
      "astHeight" : 7
    },
    "tokenLength" : 3,
    "type" : "java.lang.Runnable"
  } ],
  "positionList" : [ {
    "charLength" : 33,
    "startLineNumber" : 222,
    "startColumnNumber" : 62,
    "endLineNumber" : 222,
    "endColumnNumber" : 95
  } ],
  "layoutRelationDataList" : [ ]
}