{
  "id" : 218,
  "expression" : "bufferHandle",
  "projectName" : "libgdx@libgdx",
  "commitID" : "3485b16e8979c0141421bc80cb8831b7a0403f67",
  "filePath" : "/backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/com/badlogic/gdx/graphics/glutils/VertexBufferObjectWithVAO.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "bufferHandle",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 169,
      "startColumnNumber" : 45,
      "endLineNumber" : 169,
      "endColumnNumber" : 57
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 169,
        "startColumnNumber" : 3,
        "endLineNumber" : 169,
        "endColumnNumber" : 58
      },
      "nodeContext" : "Gdx.gl.glBindBuffer(GL20.GL_ARRAY_BUFFER,bufferHandle)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 169,
        "startColumnNumber" : 3,
        "endLineNumber" : 169,
        "endColumnNumber" : 59
      },
      "nodeContext" : "Gdx.gl.glBindBuffer(GL20.GL_ARRAY_BUFFER,bufferHandle);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 683,
        "startLineNumber" : 168,
        "startColumnNumber" : 19,
        "endLineNumber" : 189,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Gdx.gl.glBindBuffer(GL20.GL_ARRAY_BUFFER,bufferHandle);\n  unbindAttributes(shader);\n  this.cachedLocations.clear();\n  for (int i=0; i < numAttributes; i++) {\n    VertexAttribute attribute=attributes.get(i);\n    if (locations == null) {\n      this.cachedLocations.add(shader.getAttributeLocation(attribute.alias));\n    }\n else {\n      this.cachedLocations.add(locations[i]);\n    }\n    int location=this.cachedLocations.get(i);\n    if (location < 0) {\n      continue;\n    }\n    shader.enableVertexAttribute(location);\n    shader.setVertexAttribute(location,attribute.numComponents,attribute.type,attribute.normalized,attributes.vertexSize,attribute.offset);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 110,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 700,
        "startLineNumber" : 168,
        "startColumnNumber" : 2,
        "endLineNumber" : 189,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (!stillValid) {\n  Gdx.gl.glBindBuffer(GL20.GL_ARRAY_BUFFER,bufferHandle);\n  unbindAttributes(shader);\n  this.cachedLocations.clear();\n  for (int i=0; i < numAttributes; i++) {\n    VertexAttribute attribute=attributes.get(i);\n    if (locations == null) {\n      this.cachedLocations.add(shader.getAttributeLocation(attribute.alias));\n    }\n else {\n      this.cachedLocations.add(locations[i]);\n    }\n    int location=this.cachedLocations.get(i);\n    if (location < 0) {\n      continue;\n    }\n    shader.enableVertexAttribute(location);\n    shader.setVertexAttribute(location,attribute.numComponents,attribute.type,attribute.normalized,attributes.vertexSize,attribute.offset);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 113,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1316,
        "startLineNumber" : 149,
        "startColumnNumber" : 69,
        "endLineNumber" : 190,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  boolean stillValid=this.cachedLocations.size != 0;\n  final int numAttributes=attributes.size();\n  if (stillValid) {\n    if (locations == null) {\n      for (int i=0; stillValid && i < numAttributes; i++) {\n        VertexAttribute attribute=attributes.get(i);\n        int location=shader.getAttributeLocation(attribute.alias);\n        stillValid=location == this.cachedLocations.get(i);\n      }\n    }\n else {\n      stillValid=locations.length == this.cachedLocations.size;\n      for (int i=0; stillValid && i < numAttributes; i++) {\n        stillValid=locations[i] == this.cachedLocations.get(i);\n      }\n    }\n  }\n  if (!stillValid) {\n    Gdx.gl.glBindBuffer(GL20.GL_ARRAY_BUFFER,bufferHandle);\n    unbindAttributes(shader);\n    this.cachedLocations.clear();\n    for (int i=0; i < numAttributes; i++) {\n      VertexAttribute attribute=attributes.get(i);\n      if (locations == null) {\n        this.cachedLocations.add(shader.getAttributeLocation(attribute.alias));\n      }\n else {\n        this.cachedLocations.add(locations[i]);\n      }\n      int location=this.cachedLocations.get(i);\n      if (location < 0) {\n        continue;\n      }\n      shader.enableVertexAttribute(location);\n      shader.setVertexAttribute(location,attribute.numComponents,attribute.type,attribute.normalized,attributes.vertexSize,attribute.offset);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 225,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1384,
        "startLineNumber" : 149,
        "startColumnNumber" : 1,
        "endLineNumber" : 190,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void bindAttributes(ShaderProgram shader,int[] locations){\n  boolean stillValid=this.cachedLocations.size != 0;\n  final int numAttributes=attributes.size();\n  if (stillValid) {\n    if (locations == null) {\n      for (int i=0; stillValid && i < numAttributes; i++) {\n        VertexAttribute attribute=attributes.get(i);\n        int location=shader.getAttributeLocation(attribute.alias);\n        stillValid=location == this.cachedLocations.get(i);\n      }\n    }\n else {\n      stillValid=locations.length == this.cachedLocations.size;\n      for (int i=0; stillValid && i < numAttributes; i++) {\n        stillValid=locations[i] == this.cachedLocations.get(i);\n      }\n    }\n  }\n  if (!stillValid) {\n    Gdx.gl.glBindBuffer(GL20.GL_ARRAY_BUFFER,bufferHandle);\n    unbindAttributes(shader);\n    this.cachedLocations.clear();\n    for (int i=0; i < numAttributes; i++) {\n      VertexAttribute attribute=attributes.get(i);\n      if (locations == null) {\n        this.cachedLocations.add(shader.getAttributeLocation(attribute.alias));\n      }\n else {\n        this.cachedLocations.add(locations[i]);\n      }\n      int location=this.cachedLocations.get(i);\n      if (location < 0) {\n        continue;\n      }\n      shader.enableVertexAttribute(location);\n      shader.setVertexAttribute(location,attribute.numComponents,attribute.type,attribute.normalized,attributes.vertexSize,attribute.offset);\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 238,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 169,
        "startColumnNumber" : 3,
        "endLineNumber" : 169,
        "endColumnNumber" : 59
      },
      "nodeContext" : "Gdx.gl.glBindBuffer(GL20.GL_ARRAY_BUFFER,bufferHandle);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 12,
    "startLineNumber" : 169,
    "startColumnNumber" : 45,
    "endLineNumber" : 169,
    "endColumnNumber" : 57
  } ],
  "layoutRelationDataList" : [ ]
}