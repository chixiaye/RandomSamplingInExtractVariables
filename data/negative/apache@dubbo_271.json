{
  "id" : 271,
  "expression" : "parameters.isEmpty()",
  "projectName" : "apache@dubbo",
  "commitID" : "4ea0a09846fa74b7b1a6a1a548f31859a2cddcc8",
  "filePath" : "/dubbo-common/src/main/java/org/apache/dubbo/config/AbstractConfig.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "parameters.isEmpty()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 20,
      "startLineNumber" : 334,
      "startColumnNumber" : 34,
      "endLineNumber" : 334,
      "endColumnNumber" : 54
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 334,
        "startColumnNumber" : 12,
        "endLineNumber" : 334,
        "endColumnNumber" : 54
      },
      "nodeContext" : "parameters == null || parameters.isEmpty()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 334,
        "startColumnNumber" : 8,
        "endLineNumber" : 336,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (parameters == null || parameters.isEmpty()) {\n  return Collections.emptyMap();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 747,
        "startLineNumber" : 333,
        "startColumnNumber" : 96,
        "endLineNumber" : 350,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (parameters == null || parameters.isEmpty()) {\n    return Collections.emptyMap();\n  }\n  Map<String,String> result=new HashMap<>();\n  String pre=(prefix != null && prefix.length() > 0 ? prefix + \".\" : \"\");\n  for (  Map.Entry<String,String> entry : parameters.entrySet()) {\n    String key=entry.getKey();\n    String value=entry.getValue();\n    result.put(pre + key,value);\n    if (Arrays.binarySearch(Constants.DOT_COMPATIBLE_KEYS,key) != -1) {\n      result.put(pre + key.replace('-','.'),value);\n    }\n  }\n  return result;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 114,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1053,
        "startLineNumber" : 327,
        "startColumnNumber" : 4,
        "endLineNumber" : 350,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * @param parameters the raw parameters\n * @param prefix     the prefix\n * @return the parameters whose raw key will replace \"-\" to \".\"\n * @revised 2.7.8 \"private\" to be \"protected\"\n */\nprotected static Map<String,String> convert(Map<String,String> parameters,String prefix){\n  if (parameters == null || parameters.isEmpty()) {\n    return Collections.emptyMap();\n  }\n  Map<String,String> result=new HashMap<>();\n  String pre=(prefix != null && prefix.length() > 0 ? prefix + \".\" : \"\");\n  for (  Map.Entry<String,String> entry : parameters.entrySet()) {\n    String key=entry.getKey();\n    String value=entry.getValue();\n    result.put(pre + key,value);\n    if (Arrays.binarySearch(Constants.DOT_COMPATIBLE_KEYS,key) != -1) {\n      result.put(pre + key.replace('-','.'),value);\n    }\n  }\n  return result;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 139,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 334,
        "startColumnNumber" : 12,
        "endLineNumber" : 334,
        "endColumnNumber" : 54
      },
      "nodeContext" : "parameters == null || parameters.isEmpty()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 20,
    "startLineNumber" : 334,
    "startColumnNumber" : 34,
    "endLineNumber" : 334,
    "endColumnNumber" : 54
  } ],
  "layoutRelationDataList" : [ ]
}