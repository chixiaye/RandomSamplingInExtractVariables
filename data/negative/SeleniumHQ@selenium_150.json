{
  "id" : 150,
  "expression" : "self.getProtocol().equals(url.getScheme())",
  "projectName" : "SeleniumHQ@selenium",
  "commitID" : "c146621f39dbec94114835aa1f6af6a0e1fa4cd0",
  "filePath" : "/java/server/src/org/openqa/selenium/grid/web/RoutableHttpClientFactory.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "self.getProtocol().equals(url.getScheme())",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 42,
      "startLineNumber" : 51,
      "startColumnNumber" : 8,
      "endLineNumber" : 51,
      "endColumnNumber" : 50
    },
    "astNodeNumber" : 8,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 129,
        "startLineNumber" : 51,
        "startColumnNumber" : 8,
        "endLineNumber" : 53,
        "endColumnNumber" : 37
      },
      "nodeContext" : "self.getProtocol().equals(url.getScheme()) && self.getHost().equals(url.getHost()) && self.getPort() == url.getPort()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 24,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 773,
        "startLineNumber" : 51,
        "startColumnNumber" : 4,
        "endLineNumber" : 74,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (self.getProtocol().equals(url.getScheme()) && self.getHost().equals(url.getHost()) && self.getPort() == url.getPort()) {\n  return new HttpClient(){\n    @Override public HttpResponse execute(    HttpRequest request) throws UncheckedIOException {\n      HttpResponse response=new HttpResponse();\n      if (!handler.test(request)) {\n        response.setStatus(404);\n        response.setContent(utf8String(\"Unable to route \" + request));\n        return response;\n      }\n      return handler.execute(request);\n    }\n    @Override public WebSocket openSocket(    HttpRequest request,    WebSocket.Listener listener){\n      throw new UnsupportedOperationException(\"openSocket\");\n    }\n  }\n;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 104,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 906,
        "startLineNumber" : 46,
        "startColumnNumber" : 54,
        "endLineNumber" : 77,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Require.nonNull(\"Client config\",config);\n  URI url=config.baseUri();\n  if (self.getProtocol().equals(url.getScheme()) && self.getHost().equals(url.getHost()) && self.getPort() == url.getPort()) {\n    return new HttpClient(){\n      @Override public HttpResponse execute(      HttpRequest request) throws UncheckedIOException {\n        HttpResponse response=new HttpResponse();\n        if (!handler.test(request)) {\n          response.setStatus(404);\n          response.setContent(utf8String(\"Unable to route \" + request));\n          return response;\n        }\n        return handler.execute(request);\n      }\n      @Override public WebSocket openSocket(      HttpRequest request,      WebSocket.Listener listener){\n        throw new UnsupportedOperationException(\"openSocket\");\n      }\n    }\n;\n  }\n  return delegate.createClient(config);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 124,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 970,
        "startLineNumber" : 45,
        "startColumnNumber" : 2,
        "endLineNumber" : 77,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public HttpClient createClient(ClientConfig config){\n  Require.nonNull(\"Client config\",config);\n  URI url=config.baseUri();\n  if (self.getProtocol().equals(url.getScheme()) && self.getHost().equals(url.getHost()) && self.getPort() == url.getPort()) {\n    return new HttpClient(){\n      @Override public HttpResponse execute(      HttpRequest request) throws UncheckedIOException {\n        HttpResponse response=new HttpResponse();\n        if (!handler.test(request)) {\n          response.setStatus(404);\n          response.setContent(utf8String(\"Unable to route \" + request));\n          return response;\n        }\n        return handler.execute(request);\n      }\n      @Override public WebSocket openSocket(      HttpRequest request,      WebSocket.Listener listener){\n        throw new UnsupportedOperationException(\"openSocket\");\n      }\n    }\n;\n  }\n  return delegate.createClient(config);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 135,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 129,
        "startLineNumber" : 51,
        "startColumnNumber" : 8,
        "endLineNumber" : 53,
        "endColumnNumber" : 37
      },
      "nodeContext" : "self.getProtocol().equals(url.getScheme()) && self.getHost().equals(url.getHost()) && self.getPort() == url.getPort()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 24,
      "astHeight" : 4
    },
    "tokenLength" : 5,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 42,
    "startLineNumber" : 51,
    "startColumnNumber" : 8,
    "endLineNumber" : 51,
    "endColumnNumber" : 50
  } ],
  "layoutRelationDataList" : [ ]
}