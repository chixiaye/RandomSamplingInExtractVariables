{
  "id" : 156,
  "expression" : "!origin.startsWith(\"http\")",
  "projectName" : "Netflix@Hystrix",
  "commitID" : "45d7875c3e51f6d6152b667db31e4fe435711917",
  "filePath" : "/hystrix-dashboard/src/main/java/com/netflix/hystrix/dashboard/stream/ProxyStreamServlet.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "!origin.startsWith(\"http\")",
    "nodeType" : "PrefixExpression",
    "nodePosition" : {
      "charLength" : 26,
      "startLineNumber" : 70,
      "startColumnNumber" : 12,
      "endLineNumber" : 70,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 70,
        "startColumnNumber" : 8,
        "endLineNumber" : 72,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!origin.startsWith(\"http\")) {\n  url.append(\"http://\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4423,
        "startLineNumber" : 56,
        "startColumnNumber" : 120,
        "endLineNumber" : 158,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String origin=request.getParameter(\"origin\");\n  String authorization=request.getParameter(\"authorization\");\n  if (origin == null) {\n    response.setStatus(500);\n    response.getWriter().println(\"Required parameter 'origin' missing. Example: 107.20.175.135:7001\");\n    return;\n  }\n  origin=origin.trim();\n  HttpGet httpget=null;\n  InputStream is=null;\n  boolean hasFirstParameter=false;\n  StringBuilder url=new StringBuilder();\n  if (!origin.startsWith(\"http\")) {\n    url.append(\"http://\");\n  }\n  url.append(origin);\n  if (origin.contains(\"?\")) {\n    hasFirstParameter=true;\n  }\n  @SuppressWarnings(\"unchecked\") Map<String,String[]> params=request.getParameterMap();\n  for (  String key : params.keySet()) {\n    if (!key.equals(\"origin\") && !key.equals(\"authorization\")) {\n      String[] values=params.get(key);\n      String value=values[0].trim();\n      if (hasFirstParameter) {\n        url.append(\"&\");\n      }\n else {\n        url.append(\"?\");\n        hasFirstParameter=true;\n      }\n      url.append(key).append(\"=\").append(value);\n    }\n  }\n  String proxyUrl=url.toString();\n  logger.info(\"\\n\\nProxy opening connection to: {}\\n\\n\",proxyUrl);\n  try {\n    httpget=new HttpGet(proxyUrl);\n    if (authorization != null) {\n      httpget.addHeader(\"Authorization\",authorization);\n    }\n    HttpClient client=ProxyConnectionManager.httpClient;\n    HttpResponse httpResponse=client.execute(httpget);\n    int statusCode=httpResponse.getStatusLine().getStatusCode();\n    if (statusCode == HttpStatus.SC_OK) {\n      is=httpResponse.getEntity().getContent();\n      for (      Header header : httpResponse.getAllHeaders()) {\n        if (!HttpHeaders.TRANSFER_ENCODING.equals(header.getName())) {\n          response.addHeader(header.getName(),header.getValue());\n        }\n      }\n      OutputStream os=response.getOutputStream();\n      int b=-1;\n      while ((b=is.read()) != -1) {\n        try {\n          os.write(b);\n          if (b == 10) {\n            os.flush();\n          }\n        }\n catch (        Exception e) {\n          if (e.getClass().getSimpleName().equalsIgnoreCase(\"ClientAbortException\")) {\n            logger.debug(\"Connection closed by client. Will stop proxying ...\");\n            break;\n          }\n else {\n            throw new RuntimeException(e);\n          }\n        }\n      }\n    }\n  }\n catch (  Exception e) {\n    logger.error(\"Error proxying request: \" + url,e);\n  }\n finally {\n    if (httpget != null) {\n      try {\n        httpget.abort();\n      }\n catch (      Exception e) {\n        logger.error(\"failed aborting proxy connection.\",e);\n      }\n    }\n    if (is != null) {\n      try {\n        is.close();\n      }\n catch (      Exception e) {\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 414,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4643,
        "startLineNumber" : 53,
        "startColumnNumber" : 4,
        "endLineNumber" : 158,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * @see HttpServlet#doGet(HttpServletRequest request,HttpServletResponse response)\n */\nprotected void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {\n  String origin=request.getParameter(\"origin\");\n  String authorization=request.getParameter(\"authorization\");\n  if (origin == null) {\n    response.setStatus(500);\n    response.getWriter().println(\"Required parameter 'origin' missing. Example: 107.20.175.135:7001\");\n    return;\n  }\n  origin=origin.trim();\n  HttpGet httpget=null;\n  InputStream is=null;\n  boolean hasFirstParameter=false;\n  StringBuilder url=new StringBuilder();\n  if (!origin.startsWith(\"http\")) {\n    url.append(\"http://\");\n  }\n  url.append(origin);\n  if (origin.contains(\"?\")) {\n    hasFirstParameter=true;\n  }\n  @SuppressWarnings(\"unchecked\") Map<String,String[]> params=request.getParameterMap();\n  for (  String key : params.keySet()) {\n    if (!key.equals(\"origin\") && !key.equals(\"authorization\")) {\n      String[] values=params.get(key);\n      String value=values[0].trim();\n      if (hasFirstParameter) {\n        url.append(\"&\");\n      }\n else {\n        url.append(\"?\");\n        hasFirstParameter=true;\n      }\n      url.append(key).append(\"=\").append(value);\n    }\n  }\n  String proxyUrl=url.toString();\n  logger.info(\"\\n\\nProxy opening connection to: {}\\n\\n\",proxyUrl);\n  try {\n    httpget=new HttpGet(proxyUrl);\n    if (authorization != null) {\n      httpget.addHeader(\"Authorization\",authorization);\n    }\n    HttpClient client=ProxyConnectionManager.httpClient;\n    HttpResponse httpResponse=client.execute(httpget);\n    int statusCode=httpResponse.getStatusLine().getStatusCode();\n    if (statusCode == HttpStatus.SC_OK) {\n      is=httpResponse.getEntity().getContent();\n      for (      Header header : httpResponse.getAllHeaders()) {\n        if (!HttpHeaders.TRANSFER_ENCODING.equals(header.getName())) {\n          response.addHeader(header.getName(),header.getValue());\n        }\n      }\n      OutputStream os=response.getOutputStream();\n      int b=-1;\n      while ((b=is.read()) != -1) {\n        try {\n          os.write(b);\n          if (b == 10) {\n            os.flush();\n          }\n        }\n catch (        Exception e) {\n          if (e.getClass().getSimpleName().equalsIgnoreCase(\"ClientAbortException\")) {\n            logger.debug(\"Connection closed by client. Will stop proxying ...\");\n            break;\n          }\n else {\n            throw new RuntimeException(e);\n          }\n        }\n      }\n    }\n  }\n catch (  Exception e) {\n    logger.error(\"Error proxying request: \" + url,e);\n  }\n finally {\n    if (httpget != null) {\n      try {\n        httpget.abort();\n      }\n catch (      Exception e) {\n        logger.error(\"failed aborting proxy connection.\",e);\n      }\n    }\n    if (is != null) {\n      try {\n        is.close();\n      }\n catch (      Exception e) {\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 431,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 70,
        "startColumnNumber" : 8,
        "endLineNumber" : 72,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!origin.startsWith(\"http\")) {\n  url.append(\"http://\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 26,
    "startLineNumber" : 70,
    "startColumnNumber" : 12,
    "endLineNumber" : 70,
    "endColumnNumber" : 38
  } ],
  "layoutRelationDataList" : [ ]
}