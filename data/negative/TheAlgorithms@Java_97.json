{
  "id" : 97,
  "expression" : "Character",
  "projectName" : "TheAlgorithms@Java",
  "commitID" : "8b243667d736be7d0413cc77159378aa02459db0",
  "filePath" : "/Data Structures/CSVFile/src/CSVFile.java",
  "occurrences" : 12,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Character",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 165,
      "startColumnNumber" : 8,
      "endLineNumber" : 165,
      "endColumnNumber" : 17
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 165,
        "startColumnNumber" : 8,
        "endLineNumber" : 165,
        "endColumnNumber" : 30
      },
      "nodeContext" : "Character.isLetter(ch)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 165,
        "startColumnNumber" : 8,
        "endLineNumber" : 165,
        "endColumnNumber" : 55
      },
      "nodeContext" : "Character.isLetter(ch) || Character.isDigit(ch)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 230,
        "startLineNumber" : 165,
        "startColumnNumber" : 4,
        "endLineNumber" : 173,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (Character.isLetter(ch) || Character.isDigit(ch)) {\n  state=1;\n  column+=ch;\n}\n else if (ch == '\"') {\n  state=2;\n  column+=ch;\n}\n else if (Character.isWhitespace(ch)) {\n  state=0;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 42,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1584,
        "startLineNumber" : 161,
        "startColumnNumber" : 3,
        "endLineNumber" : 226,
        "endColumnNumber" : 4
      },
      "nodeContext" : "switch (state) {\ncase 0:  if (Character.isLetter(ch) || Character.isDigit(ch)) {\n    state=1;\n    column+=ch;\n  }\n else   if (ch == '\"') {\n    state=2;\n    column+=ch;\n  }\n else   if (Character.isWhitespace(ch)) {\n    state=0;\n  }\nbreak;\ncase 1:if ((Character.isLetter(ch) || Character.isDigit(ch) || isPunctuation(ch)|| Character.isWhitespace(ch)) && (ch != sep)) {\nstate=1;\ncolumn+=ch;\n}\n else if (ch == sep || ch == '\\n') {\nstate=0;\ncolumn=column.trim();\ncolumns.add(column);\ncolumn=\"\";\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\nbreak;\ncase 2:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"')) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == '\"') {\nstate=3;\ncolumn+=ch;\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\nbreak;\ncase 3:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"') && (ch != sep)) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == ',') {\nstate=0;\ncolumn=column.trim();\ncolumns.add(column);\ncolumn=\"\";\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 247,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1644,
        "startLineNumber" : 158,
        "startColumnNumber" : 41,
        "endLineNumber" : 228,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  ch=row.charAt(i);\nswitch (state) {\ncase 0:    if (Character.isLetter(ch) || Character.isDigit(ch)) {\n      state=1;\n      column+=ch;\n    }\n else     if (ch == '\"') {\n      state=2;\n      column+=ch;\n    }\n else     if (Character.isWhitespace(ch)) {\n      state=0;\n    }\n  break;\ncase 1:if ((Character.isLetter(ch) || Character.isDigit(ch) || isPunctuation(ch)|| Character.isWhitespace(ch)) && (ch != sep)) {\n  state=1;\n  column+=ch;\n}\n else if (ch == sep || ch == '\\n') {\n  state=0;\n  column=column.trim();\n  columns.add(column);\n  column=\"\";\n}\n else {\n  throw new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\nbreak;\ncase 2:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"')) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == '\"') {\nstate=3;\ncolumn+=ch;\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\nbreak;\ncase 3:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"') && (ch != sep)) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == ',') {\nstate=0;\ncolumn=column.trim();\ncolumns.add(column);\ncolumn=\"\";\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 255,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1683,
        "startLineNumber" : 158,
        "startColumnNumber" : 2,
        "endLineNumber" : 228,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (int i=0; i < row.length(); i++) {\n  ch=row.charAt(i);\nswitch (state) {\ncase 0:    if (Character.isLetter(ch) || Character.isDigit(ch)) {\n      state=1;\n      column+=ch;\n    }\n else     if (ch == '\"') {\n      state=2;\n      column+=ch;\n    }\n else     if (Character.isWhitespace(ch)) {\n      state=0;\n    }\n  break;\ncase 1:if ((Character.isLetter(ch) || Character.isDigit(ch) || isPunctuation(ch)|| Character.isWhitespace(ch)) && (ch != sep)) {\n  state=1;\n  column+=ch;\n}\n else if (ch == sep || ch == '\\n') {\n  state=0;\n  column=column.trim();\n  columns.add(column);\n  column=\"\";\n}\n else {\n  throw new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\nbreak;\ncase 2:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"')) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == '\"') {\nstate=3;\ncolumn+=ch;\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\nbreak;\ncase 3:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"') && (ch != sep)) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == ',') {\nstate=0;\ncolumn=column.trim();\ncolumns.add(column);\ncolumn=\"\";\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\n}\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 268,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1917,
        "startLineNumber" : 152,
        "startColumnNumber" : 63,
        "endLineNumber" : 233,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  ArrayList<String> columns=new ArrayList<String>();\n  int state=0;\n  char ch=' ';\n  String column=\"\";\n  int countQuotes=0;\n  for (int i=0; i < row.length(); i++) {\n    ch=row.charAt(i);\nswitch (state) {\ncase 0:      if (Character.isLetter(ch) || Character.isDigit(ch)) {\n        state=1;\n        column+=ch;\n      }\n else       if (ch == '\"') {\n        state=2;\n        column+=ch;\n      }\n else       if (Character.isWhitespace(ch)) {\n        state=0;\n      }\n    break;\ncase 1:  if ((Character.isLetter(ch) || Character.isDigit(ch) || isPunctuation(ch)|| Character.isWhitespace(ch)) && (ch != sep)) {\n    state=1;\n    column+=ch;\n  }\n else   if (ch == sep || ch == '\\n') {\n    state=0;\n    column=column.trim();\n    columns.add(column);\n    column=\"\";\n  }\n else {\n    throw new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n  }\nbreak;\ncase 2:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"')) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == '\"') {\nstate=3;\ncolumn+=ch;\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\nbreak;\ncase 3:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"') && (ch != sep)) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == ',') {\nstate=0;\ncolumn=column.trim();\ncolumns.add(column);\ncolumn=\"\";\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\n}\n}\ncolumns.add(column);\ncolumn=\"\";\nreturn columns;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 315,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2164,
        "startLineNumber" : 143,
        "startColumnNumber" : 1,
        "endLineNumber" : 233,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * @param row\n * @param sep the seperator\n * @return ArrayList<String> that contains each column of row.\n * @purpose compiles row in its columns.\n */\npublic static ArrayList<String> compile(String row,char sep){\n  ArrayList<String> columns=new ArrayList<String>();\n  int state=0;\n  char ch=' ';\n  String column=\"\";\n  int countQuotes=0;\n  for (int i=0; i < row.length(); i++) {\n    ch=row.charAt(i);\nswitch (state) {\ncase 0:      if (Character.isLetter(ch) || Character.isDigit(ch)) {\n        state=1;\n        column+=ch;\n      }\n else       if (ch == '\"') {\n        state=2;\n        column+=ch;\n      }\n else       if (Character.isWhitespace(ch)) {\n        state=0;\n      }\n    break;\ncase 1:  if ((Character.isLetter(ch) || Character.isDigit(ch) || isPunctuation(ch)|| Character.isWhitespace(ch)) && (ch != sep)) {\n    state=1;\n    column+=ch;\n  }\n else   if (ch == sep || ch == '\\n') {\n    state=0;\n    column=column.trim();\n    columns.add(column);\n    column=\"\";\n  }\n else {\n    throw new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n  }\nbreak;\ncase 2:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"')) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == '\"') {\nstate=3;\ncolumn+=ch;\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\nbreak;\ncase 3:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"') && (ch != sep)) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == ',') {\nstate=0;\ncolumn=column.trim();\ncolumns.add(column);\ncolumn=\"\";\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\n}\n}\ncolumns.add(column);\ncolumn=\"\";\nreturn columns;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 332,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 165,
        "startColumnNumber" : 8,
        "endLineNumber" : 165,
        "endColumnNumber" : 55
      },
      "nodeContext" : "Character.isLetter(ch) || Character.isDigit(ch)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "Character",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 165,
      "startColumnNumber" : 34,
      "endLineNumber" : 165,
      "endColumnNumber" : 43
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 165,
        "startColumnNumber" : 34,
        "endLineNumber" : 165,
        "endColumnNumber" : 55
      },
      "nodeContext" : "Character.isDigit(ch)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 165,
        "startColumnNumber" : 8,
        "endLineNumber" : 165,
        "endColumnNumber" : 55
      },
      "nodeContext" : "Character.isLetter(ch) || Character.isDigit(ch)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 230,
        "startLineNumber" : 165,
        "startColumnNumber" : 4,
        "endLineNumber" : 173,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (Character.isLetter(ch) || Character.isDigit(ch)) {\n  state=1;\n  column+=ch;\n}\n else if (ch == '\"') {\n  state=2;\n  column+=ch;\n}\n else if (Character.isWhitespace(ch)) {\n  state=0;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 42,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1584,
        "startLineNumber" : 161,
        "startColumnNumber" : 3,
        "endLineNumber" : 226,
        "endColumnNumber" : 4
      },
      "nodeContext" : "switch (state) {\ncase 0:  if (Character.isLetter(ch) || Character.isDigit(ch)) {\n    state=1;\n    column+=ch;\n  }\n else   if (ch == '\"') {\n    state=2;\n    column+=ch;\n  }\n else   if (Character.isWhitespace(ch)) {\n    state=0;\n  }\nbreak;\ncase 1:if ((Character.isLetter(ch) || Character.isDigit(ch) || isPunctuation(ch)|| Character.isWhitespace(ch)) && (ch != sep)) {\nstate=1;\ncolumn+=ch;\n}\n else if (ch == sep || ch == '\\n') {\nstate=0;\ncolumn=column.trim();\ncolumns.add(column);\ncolumn=\"\";\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\nbreak;\ncase 2:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"')) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == '\"') {\nstate=3;\ncolumn+=ch;\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\nbreak;\ncase 3:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"') && (ch != sep)) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == ',') {\nstate=0;\ncolumn=column.trim();\ncolumns.add(column);\ncolumn=\"\";\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 247,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1644,
        "startLineNumber" : 158,
        "startColumnNumber" : 41,
        "endLineNumber" : 228,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  ch=row.charAt(i);\nswitch (state) {\ncase 0:    if (Character.isLetter(ch) || Character.isDigit(ch)) {\n      state=1;\n      column+=ch;\n    }\n else     if (ch == '\"') {\n      state=2;\n      column+=ch;\n    }\n else     if (Character.isWhitespace(ch)) {\n      state=0;\n    }\n  break;\ncase 1:if ((Character.isLetter(ch) || Character.isDigit(ch) || isPunctuation(ch)|| Character.isWhitespace(ch)) && (ch != sep)) {\n  state=1;\n  column+=ch;\n}\n else if (ch == sep || ch == '\\n') {\n  state=0;\n  column=column.trim();\n  columns.add(column);\n  column=\"\";\n}\n else {\n  throw new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\nbreak;\ncase 2:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"')) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == '\"') {\nstate=3;\ncolumn+=ch;\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\nbreak;\ncase 3:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"') && (ch != sep)) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == ',') {\nstate=0;\ncolumn=column.trim();\ncolumns.add(column);\ncolumn=\"\";\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 255,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1683,
        "startLineNumber" : 158,
        "startColumnNumber" : 2,
        "endLineNumber" : 228,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (int i=0; i < row.length(); i++) {\n  ch=row.charAt(i);\nswitch (state) {\ncase 0:    if (Character.isLetter(ch) || Character.isDigit(ch)) {\n      state=1;\n      column+=ch;\n    }\n else     if (ch == '\"') {\n      state=2;\n      column+=ch;\n    }\n else     if (Character.isWhitespace(ch)) {\n      state=0;\n    }\n  break;\ncase 1:if ((Character.isLetter(ch) || Character.isDigit(ch) || isPunctuation(ch)|| Character.isWhitespace(ch)) && (ch != sep)) {\n  state=1;\n  column+=ch;\n}\n else if (ch == sep || ch == '\\n') {\n  state=0;\n  column=column.trim();\n  columns.add(column);\n  column=\"\";\n}\n else {\n  throw new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\nbreak;\ncase 2:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"')) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == '\"') {\nstate=3;\ncolumn+=ch;\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\nbreak;\ncase 3:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"') && (ch != sep)) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == ',') {\nstate=0;\ncolumn=column.trim();\ncolumns.add(column);\ncolumn=\"\";\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\n}\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 268,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1917,
        "startLineNumber" : 152,
        "startColumnNumber" : 63,
        "endLineNumber" : 233,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  ArrayList<String> columns=new ArrayList<String>();\n  int state=0;\n  char ch=' ';\n  String column=\"\";\n  int countQuotes=0;\n  for (int i=0; i < row.length(); i++) {\n    ch=row.charAt(i);\nswitch (state) {\ncase 0:      if (Character.isLetter(ch) || Character.isDigit(ch)) {\n        state=1;\n        column+=ch;\n      }\n else       if (ch == '\"') {\n        state=2;\n        column+=ch;\n      }\n else       if (Character.isWhitespace(ch)) {\n        state=0;\n      }\n    break;\ncase 1:  if ((Character.isLetter(ch) || Character.isDigit(ch) || isPunctuation(ch)|| Character.isWhitespace(ch)) && (ch != sep)) {\n    state=1;\n    column+=ch;\n  }\n else   if (ch == sep || ch == '\\n') {\n    state=0;\n    column=column.trim();\n    columns.add(column);\n    column=\"\";\n  }\n else {\n    throw new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n  }\nbreak;\ncase 2:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"')) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == '\"') {\nstate=3;\ncolumn+=ch;\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\nbreak;\ncase 3:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"') && (ch != sep)) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == ',') {\nstate=0;\ncolumn=column.trim();\ncolumns.add(column);\ncolumn=\"\";\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\n}\n}\ncolumns.add(column);\ncolumn=\"\";\nreturn columns;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 315,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2164,
        "startLineNumber" : 143,
        "startColumnNumber" : 1,
        "endLineNumber" : 233,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * @param row\n * @param sep the seperator\n * @return ArrayList<String> that contains each column of row.\n * @purpose compiles row in its columns.\n */\npublic static ArrayList<String> compile(String row,char sep){\n  ArrayList<String> columns=new ArrayList<String>();\n  int state=0;\n  char ch=' ';\n  String column=\"\";\n  int countQuotes=0;\n  for (int i=0; i < row.length(); i++) {\n    ch=row.charAt(i);\nswitch (state) {\ncase 0:      if (Character.isLetter(ch) || Character.isDigit(ch)) {\n        state=1;\n        column+=ch;\n      }\n else       if (ch == '\"') {\n        state=2;\n        column+=ch;\n      }\n else       if (Character.isWhitespace(ch)) {\n        state=0;\n      }\n    break;\ncase 1:  if ((Character.isLetter(ch) || Character.isDigit(ch) || isPunctuation(ch)|| Character.isWhitespace(ch)) && (ch != sep)) {\n    state=1;\n    column+=ch;\n  }\n else   if (ch == sep || ch == '\\n') {\n    state=0;\n    column=column.trim();\n    columns.add(column);\n    column=\"\";\n  }\n else {\n    throw new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n  }\nbreak;\ncase 2:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"')) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == '\"') {\nstate=3;\ncolumn+=ch;\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\nbreak;\ncase 3:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"') && (ch != sep)) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == ',') {\nstate=0;\ncolumn=column.trim();\ncolumns.add(column);\ncolumn=\"\";\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\n}\n}\ncolumns.add(column);\ncolumn=\"\";\nreturn columns;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 332,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 165,
        "startColumnNumber" : 8,
        "endLineNumber" : 165,
        "endColumnNumber" : 55
      },
      "nodeContext" : "Character.isLetter(ch) || Character.isDigit(ch)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "Character",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 171,
      "startColumnNumber" : 15,
      "endLineNumber" : 171,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 171,
        "startColumnNumber" : 15,
        "endLineNumber" : 171,
        "endColumnNumber" : 41
      },
      "nodeContext" : "Character.isWhitespace(ch)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 171,
        "startColumnNumber" : 11,
        "endLineNumber" : 173,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (Character.isWhitespace(ch)) {\n  state=0;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 129,
        "startLineNumber" : 168,
        "startColumnNumber" : 11,
        "endLineNumber" : 173,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (ch == '\"') {\n  state=2;\n  column+=ch;\n}\n else if (Character.isWhitespace(ch)) {\n  state=0;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 23,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 230,
        "startLineNumber" : 165,
        "startColumnNumber" : 4,
        "endLineNumber" : 173,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (Character.isLetter(ch) || Character.isDigit(ch)) {\n  state=1;\n  column+=ch;\n}\n else if (ch == '\"') {\n  state=2;\n  column+=ch;\n}\n else if (Character.isWhitespace(ch)) {\n  state=0;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 42,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1584,
        "startLineNumber" : 161,
        "startColumnNumber" : 3,
        "endLineNumber" : 226,
        "endColumnNumber" : 4
      },
      "nodeContext" : "switch (state) {\ncase 0:  if (Character.isLetter(ch) || Character.isDigit(ch)) {\n    state=1;\n    column+=ch;\n  }\n else   if (ch == '\"') {\n    state=2;\n    column+=ch;\n  }\n else   if (Character.isWhitespace(ch)) {\n    state=0;\n  }\nbreak;\ncase 1:if ((Character.isLetter(ch) || Character.isDigit(ch) || isPunctuation(ch)|| Character.isWhitespace(ch)) && (ch != sep)) {\nstate=1;\ncolumn+=ch;\n}\n else if (ch == sep || ch == '\\n') {\nstate=0;\ncolumn=column.trim();\ncolumns.add(column);\ncolumn=\"\";\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\nbreak;\ncase 2:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"')) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == '\"') {\nstate=3;\ncolumn+=ch;\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\nbreak;\ncase 3:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"') && (ch != sep)) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == ',') {\nstate=0;\ncolumn=column.trim();\ncolumns.add(column);\ncolumn=\"\";\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 247,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1644,
        "startLineNumber" : 158,
        "startColumnNumber" : 41,
        "endLineNumber" : 228,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  ch=row.charAt(i);\nswitch (state) {\ncase 0:    if (Character.isLetter(ch) || Character.isDigit(ch)) {\n      state=1;\n      column+=ch;\n    }\n else     if (ch == '\"') {\n      state=2;\n      column+=ch;\n    }\n else     if (Character.isWhitespace(ch)) {\n      state=0;\n    }\n  break;\ncase 1:if ((Character.isLetter(ch) || Character.isDigit(ch) || isPunctuation(ch)|| Character.isWhitespace(ch)) && (ch != sep)) {\n  state=1;\n  column+=ch;\n}\n else if (ch == sep || ch == '\\n') {\n  state=0;\n  column=column.trim();\n  columns.add(column);\n  column=\"\";\n}\n else {\n  throw new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\nbreak;\ncase 2:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"')) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == '\"') {\nstate=3;\ncolumn+=ch;\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\nbreak;\ncase 3:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"') && (ch != sep)) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == ',') {\nstate=0;\ncolumn=column.trim();\ncolumns.add(column);\ncolumn=\"\";\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 255,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1683,
        "startLineNumber" : 158,
        "startColumnNumber" : 2,
        "endLineNumber" : 228,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (int i=0; i < row.length(); i++) {\n  ch=row.charAt(i);\nswitch (state) {\ncase 0:    if (Character.isLetter(ch) || Character.isDigit(ch)) {\n      state=1;\n      column+=ch;\n    }\n else     if (ch == '\"') {\n      state=2;\n      column+=ch;\n    }\n else     if (Character.isWhitespace(ch)) {\n      state=0;\n    }\n  break;\ncase 1:if ((Character.isLetter(ch) || Character.isDigit(ch) || isPunctuation(ch)|| Character.isWhitespace(ch)) && (ch != sep)) {\n  state=1;\n  column+=ch;\n}\n else if (ch == sep || ch == '\\n') {\n  state=0;\n  column=column.trim();\n  columns.add(column);\n  column=\"\";\n}\n else {\n  throw new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\nbreak;\ncase 2:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"')) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == '\"') {\nstate=3;\ncolumn+=ch;\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\nbreak;\ncase 3:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"') && (ch != sep)) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == ',') {\nstate=0;\ncolumn=column.trim();\ncolumns.add(column);\ncolumn=\"\";\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\n}\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 268,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1917,
        "startLineNumber" : 152,
        "startColumnNumber" : 63,
        "endLineNumber" : 233,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  ArrayList<String> columns=new ArrayList<String>();\n  int state=0;\n  char ch=' ';\n  String column=\"\";\n  int countQuotes=0;\n  for (int i=0; i < row.length(); i++) {\n    ch=row.charAt(i);\nswitch (state) {\ncase 0:      if (Character.isLetter(ch) || Character.isDigit(ch)) {\n        state=1;\n        column+=ch;\n      }\n else       if (ch == '\"') {\n        state=2;\n        column+=ch;\n      }\n else       if (Character.isWhitespace(ch)) {\n        state=0;\n      }\n    break;\ncase 1:  if ((Character.isLetter(ch) || Character.isDigit(ch) || isPunctuation(ch)|| Character.isWhitespace(ch)) && (ch != sep)) {\n    state=1;\n    column+=ch;\n  }\n else   if (ch == sep || ch == '\\n') {\n    state=0;\n    column=column.trim();\n    columns.add(column);\n    column=\"\";\n  }\n else {\n    throw new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n  }\nbreak;\ncase 2:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"')) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == '\"') {\nstate=3;\ncolumn+=ch;\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\nbreak;\ncase 3:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"') && (ch != sep)) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == ',') {\nstate=0;\ncolumn=column.trim();\ncolumns.add(column);\ncolumn=\"\";\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\n}\n}\ncolumns.add(column);\ncolumn=\"\";\nreturn columns;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 315,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2164,
        "startLineNumber" : 143,
        "startColumnNumber" : 1,
        "endLineNumber" : 233,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * @param row\n * @param sep the seperator\n * @return ArrayList<String> that contains each column of row.\n * @purpose compiles row in its columns.\n */\npublic static ArrayList<String> compile(String row,char sep){\n  ArrayList<String> columns=new ArrayList<String>();\n  int state=0;\n  char ch=' ';\n  String column=\"\";\n  int countQuotes=0;\n  for (int i=0; i < row.length(); i++) {\n    ch=row.charAt(i);\nswitch (state) {\ncase 0:      if (Character.isLetter(ch) || Character.isDigit(ch)) {\n        state=1;\n        column+=ch;\n      }\n else       if (ch == '\"') {\n        state=2;\n        column+=ch;\n      }\n else       if (Character.isWhitespace(ch)) {\n        state=0;\n      }\n    break;\ncase 1:  if ((Character.isLetter(ch) || Character.isDigit(ch) || isPunctuation(ch)|| Character.isWhitespace(ch)) && (ch != sep)) {\n    state=1;\n    column+=ch;\n  }\n else   if (ch == sep || ch == '\\n') {\n    state=0;\n    column=column.trim();\n    columns.add(column);\n    column=\"\";\n  }\n else {\n    throw new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n  }\nbreak;\ncase 2:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"')) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == '\"') {\nstate=3;\ncolumn+=ch;\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\nbreak;\ncase 3:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"') && (ch != sep)) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == ',') {\nstate=0;\ncolumn=column.trim();\ncolumns.add(column);\ncolumn=\"\";\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\n}\n}\ncolumns.add(column);\ncolumn=\"\";\nreturn columns;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 332,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 171,
        "startColumnNumber" : 15,
        "endLineNumber" : 171,
        "endColumnNumber" : 41
      },
      "nodeContext" : "Character.isWhitespace(ch)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "Character",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 177,
      "startColumnNumber" : 9,
      "endLineNumber" : 177,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 177,
        "startColumnNumber" : 9,
        "endLineNumber" : 177,
        "endColumnNumber" : 31
      },
      "nodeContext" : "Character.isLetter(ch)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 105,
        "startLineNumber" : 177,
        "startColumnNumber" : 9,
        "endLineNumber" : 178,
        "endColumnNumber" : 56
      },
      "nodeContext" : "Character.isLetter(ch) || Character.isDigit(ch) || isPunctuation(ch)|| Character.isWhitespace(ch)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 16,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 107,
        "startLineNumber" : 177,
        "startColumnNumber" : 8,
        "endLineNumber" : 178,
        "endColumnNumber" : 57
      },
      "nodeContext" : "(Character.isLetter(ch) || Character.isDigit(ch) || isPunctuation(ch)|| Character.isWhitespace(ch))",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 17,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 128,
        "startLineNumber" : 177,
        "startColumnNumber" : 8,
        "endLineNumber" : 179,
        "endColumnNumber" : 20
      },
      "nodeContext" : "(Character.isLetter(ch) || Character.isDigit(ch) || isPunctuation(ch)|| Character.isWhitespace(ch)) && (ch != sep)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 22,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 415,
        "startLineNumber" : 177,
        "startColumnNumber" : 4,
        "endLineNumber" : 190,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if ((Character.isLetter(ch) || Character.isDigit(ch) || isPunctuation(ch)|| Character.isWhitespace(ch)) && (ch != sep)) {\n  state=1;\n  column+=ch;\n}\n else if (ch == sep || ch == '\\n') {\n  state=0;\n  column=column.trim();\n  columns.add(column);\n  column=\"\";\n}\n else {\n  throw new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 69,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1584,
        "startLineNumber" : 161,
        "startColumnNumber" : 3,
        "endLineNumber" : 226,
        "endColumnNumber" : 4
      },
      "nodeContext" : "switch (state) {\ncase 0:  if (Character.isLetter(ch) || Character.isDigit(ch)) {\n    state=1;\n    column+=ch;\n  }\n else   if (ch == '\"') {\n    state=2;\n    column+=ch;\n  }\n else   if (Character.isWhitespace(ch)) {\n    state=0;\n  }\nbreak;\ncase 1:if ((Character.isLetter(ch) || Character.isDigit(ch) || isPunctuation(ch)|| Character.isWhitespace(ch)) && (ch != sep)) {\nstate=1;\ncolumn+=ch;\n}\n else if (ch == sep || ch == '\\n') {\nstate=0;\ncolumn=column.trim();\ncolumns.add(column);\ncolumn=\"\";\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\nbreak;\ncase 2:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"')) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == '\"') {\nstate=3;\ncolumn+=ch;\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\nbreak;\ncase 3:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"') && (ch != sep)) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == ',') {\nstate=0;\ncolumn=column.trim();\ncolumns.add(column);\ncolumn=\"\";\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 247,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1644,
        "startLineNumber" : 158,
        "startColumnNumber" : 41,
        "endLineNumber" : 228,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  ch=row.charAt(i);\nswitch (state) {\ncase 0:    if (Character.isLetter(ch) || Character.isDigit(ch)) {\n      state=1;\n      column+=ch;\n    }\n else     if (ch == '\"') {\n      state=2;\n      column+=ch;\n    }\n else     if (Character.isWhitespace(ch)) {\n      state=0;\n    }\n  break;\ncase 1:if ((Character.isLetter(ch) || Character.isDigit(ch) || isPunctuation(ch)|| Character.isWhitespace(ch)) && (ch != sep)) {\n  state=1;\n  column+=ch;\n}\n else if (ch == sep || ch == '\\n') {\n  state=0;\n  column=column.trim();\n  columns.add(column);\n  column=\"\";\n}\n else {\n  throw new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\nbreak;\ncase 2:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"')) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == '\"') {\nstate=3;\ncolumn+=ch;\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\nbreak;\ncase 3:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"') && (ch != sep)) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == ',') {\nstate=0;\ncolumn=column.trim();\ncolumns.add(column);\ncolumn=\"\";\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 255,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1683,
        "startLineNumber" : 158,
        "startColumnNumber" : 2,
        "endLineNumber" : 228,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (int i=0; i < row.length(); i++) {\n  ch=row.charAt(i);\nswitch (state) {\ncase 0:    if (Character.isLetter(ch) || Character.isDigit(ch)) {\n      state=1;\n      column+=ch;\n    }\n else     if (ch == '\"') {\n      state=2;\n      column+=ch;\n    }\n else     if (Character.isWhitespace(ch)) {\n      state=0;\n    }\n  break;\ncase 1:if ((Character.isLetter(ch) || Character.isDigit(ch) || isPunctuation(ch)|| Character.isWhitespace(ch)) && (ch != sep)) {\n  state=1;\n  column+=ch;\n}\n else if (ch == sep || ch == '\\n') {\n  state=0;\n  column=column.trim();\n  columns.add(column);\n  column=\"\";\n}\n else {\n  throw new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\nbreak;\ncase 2:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"')) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == '\"') {\nstate=3;\ncolumn+=ch;\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\nbreak;\ncase 3:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"') && (ch != sep)) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == ',') {\nstate=0;\ncolumn=column.trim();\ncolumns.add(column);\ncolumn=\"\";\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\n}\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 268,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1917,
        "startLineNumber" : 152,
        "startColumnNumber" : 63,
        "endLineNumber" : 233,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  ArrayList<String> columns=new ArrayList<String>();\n  int state=0;\n  char ch=' ';\n  String column=\"\";\n  int countQuotes=0;\n  for (int i=0; i < row.length(); i++) {\n    ch=row.charAt(i);\nswitch (state) {\ncase 0:      if (Character.isLetter(ch) || Character.isDigit(ch)) {\n        state=1;\n        column+=ch;\n      }\n else       if (ch == '\"') {\n        state=2;\n        column+=ch;\n      }\n else       if (Character.isWhitespace(ch)) {\n        state=0;\n      }\n    break;\ncase 1:  if ((Character.isLetter(ch) || Character.isDigit(ch) || isPunctuation(ch)|| Character.isWhitespace(ch)) && (ch != sep)) {\n    state=1;\n    column+=ch;\n  }\n else   if (ch == sep || ch == '\\n') {\n    state=0;\n    column=column.trim();\n    columns.add(column);\n    column=\"\";\n  }\n else {\n    throw new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n  }\nbreak;\ncase 2:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"')) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == '\"') {\nstate=3;\ncolumn+=ch;\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\nbreak;\ncase 3:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"') && (ch != sep)) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == ',') {\nstate=0;\ncolumn=column.trim();\ncolumns.add(column);\ncolumn=\"\";\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\n}\n}\ncolumns.add(column);\ncolumn=\"\";\nreturn columns;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 315,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2164,
        "startLineNumber" : 143,
        "startColumnNumber" : 1,
        "endLineNumber" : 233,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * @param row\n * @param sep the seperator\n * @return ArrayList<String> that contains each column of row.\n * @purpose compiles row in its columns.\n */\npublic static ArrayList<String> compile(String row,char sep){\n  ArrayList<String> columns=new ArrayList<String>();\n  int state=0;\n  char ch=' ';\n  String column=\"\";\n  int countQuotes=0;\n  for (int i=0; i < row.length(); i++) {\n    ch=row.charAt(i);\nswitch (state) {\ncase 0:      if (Character.isLetter(ch) || Character.isDigit(ch)) {\n        state=1;\n        column+=ch;\n      }\n else       if (ch == '\"') {\n        state=2;\n        column+=ch;\n      }\n else       if (Character.isWhitespace(ch)) {\n        state=0;\n      }\n    break;\ncase 1:  if ((Character.isLetter(ch) || Character.isDigit(ch) || isPunctuation(ch)|| Character.isWhitespace(ch)) && (ch != sep)) {\n    state=1;\n    column+=ch;\n  }\n else   if (ch == sep || ch == '\\n') {\n    state=0;\n    column=column.trim();\n    columns.add(column);\n    column=\"\";\n  }\n else {\n    throw new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n  }\nbreak;\ncase 2:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"')) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == '\"') {\nstate=3;\ncolumn+=ch;\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\nbreak;\ncase 3:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"') && (ch != sep)) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == ',') {\nstate=0;\ncolumn=column.trim();\ncolumns.add(column);\ncolumn=\"\";\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\n}\n}\ncolumns.add(column);\ncolumn=\"\";\nreturn columns;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 332,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 177,
        "startColumnNumber" : 9,
        "endLineNumber" : 177,
        "endColumnNumber" : 31
      },
      "nodeContext" : "Character.isLetter(ch)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "Character",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 177,
      "startColumnNumber" : 35,
      "endLineNumber" : 177,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 177,
        "startColumnNumber" : 35,
        "endLineNumber" : 177,
        "endColumnNumber" : 56
      },
      "nodeContext" : "Character.isDigit(ch)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 105,
        "startLineNumber" : 177,
        "startColumnNumber" : 9,
        "endLineNumber" : 178,
        "endColumnNumber" : 56
      },
      "nodeContext" : "Character.isLetter(ch) || Character.isDigit(ch) || isPunctuation(ch)|| Character.isWhitespace(ch)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 16,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 107,
        "startLineNumber" : 177,
        "startColumnNumber" : 8,
        "endLineNumber" : 178,
        "endColumnNumber" : 57
      },
      "nodeContext" : "(Character.isLetter(ch) || Character.isDigit(ch) || isPunctuation(ch)|| Character.isWhitespace(ch))",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 17,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 128,
        "startLineNumber" : 177,
        "startColumnNumber" : 8,
        "endLineNumber" : 179,
        "endColumnNumber" : 20
      },
      "nodeContext" : "(Character.isLetter(ch) || Character.isDigit(ch) || isPunctuation(ch)|| Character.isWhitespace(ch)) && (ch != sep)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 22,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 415,
        "startLineNumber" : 177,
        "startColumnNumber" : 4,
        "endLineNumber" : 190,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if ((Character.isLetter(ch) || Character.isDigit(ch) || isPunctuation(ch)|| Character.isWhitespace(ch)) && (ch != sep)) {\n  state=1;\n  column+=ch;\n}\n else if (ch == sep || ch == '\\n') {\n  state=0;\n  column=column.trim();\n  columns.add(column);\n  column=\"\";\n}\n else {\n  throw new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 69,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1584,
        "startLineNumber" : 161,
        "startColumnNumber" : 3,
        "endLineNumber" : 226,
        "endColumnNumber" : 4
      },
      "nodeContext" : "switch (state) {\ncase 0:  if (Character.isLetter(ch) || Character.isDigit(ch)) {\n    state=1;\n    column+=ch;\n  }\n else   if (ch == '\"') {\n    state=2;\n    column+=ch;\n  }\n else   if (Character.isWhitespace(ch)) {\n    state=0;\n  }\nbreak;\ncase 1:if ((Character.isLetter(ch) || Character.isDigit(ch) || isPunctuation(ch)|| Character.isWhitespace(ch)) && (ch != sep)) {\nstate=1;\ncolumn+=ch;\n}\n else if (ch == sep || ch == '\\n') {\nstate=0;\ncolumn=column.trim();\ncolumns.add(column);\ncolumn=\"\";\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\nbreak;\ncase 2:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"')) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == '\"') {\nstate=3;\ncolumn+=ch;\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\nbreak;\ncase 3:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"') && (ch != sep)) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == ',') {\nstate=0;\ncolumn=column.trim();\ncolumns.add(column);\ncolumn=\"\";\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 247,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1644,
        "startLineNumber" : 158,
        "startColumnNumber" : 41,
        "endLineNumber" : 228,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  ch=row.charAt(i);\nswitch (state) {\ncase 0:    if (Character.isLetter(ch) || Character.isDigit(ch)) {\n      state=1;\n      column+=ch;\n    }\n else     if (ch == '\"') {\n      state=2;\n      column+=ch;\n    }\n else     if (Character.isWhitespace(ch)) {\n      state=0;\n    }\n  break;\ncase 1:if ((Character.isLetter(ch) || Character.isDigit(ch) || isPunctuation(ch)|| Character.isWhitespace(ch)) && (ch != sep)) {\n  state=1;\n  column+=ch;\n}\n else if (ch == sep || ch == '\\n') {\n  state=0;\n  column=column.trim();\n  columns.add(column);\n  column=\"\";\n}\n else {\n  throw new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\nbreak;\ncase 2:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"')) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == '\"') {\nstate=3;\ncolumn+=ch;\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\nbreak;\ncase 3:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"') && (ch != sep)) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == ',') {\nstate=0;\ncolumn=column.trim();\ncolumns.add(column);\ncolumn=\"\";\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 255,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1683,
        "startLineNumber" : 158,
        "startColumnNumber" : 2,
        "endLineNumber" : 228,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (int i=0; i < row.length(); i++) {\n  ch=row.charAt(i);\nswitch (state) {\ncase 0:    if (Character.isLetter(ch) || Character.isDigit(ch)) {\n      state=1;\n      column+=ch;\n    }\n else     if (ch == '\"') {\n      state=2;\n      column+=ch;\n    }\n else     if (Character.isWhitespace(ch)) {\n      state=0;\n    }\n  break;\ncase 1:if ((Character.isLetter(ch) || Character.isDigit(ch) || isPunctuation(ch)|| Character.isWhitespace(ch)) && (ch != sep)) {\n  state=1;\n  column+=ch;\n}\n else if (ch == sep || ch == '\\n') {\n  state=0;\n  column=column.trim();\n  columns.add(column);\n  column=\"\";\n}\n else {\n  throw new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\nbreak;\ncase 2:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"')) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == '\"') {\nstate=3;\ncolumn+=ch;\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\nbreak;\ncase 3:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"') && (ch != sep)) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == ',') {\nstate=0;\ncolumn=column.trim();\ncolumns.add(column);\ncolumn=\"\";\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\n}\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 268,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1917,
        "startLineNumber" : 152,
        "startColumnNumber" : 63,
        "endLineNumber" : 233,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  ArrayList<String> columns=new ArrayList<String>();\n  int state=0;\n  char ch=' ';\n  String column=\"\";\n  int countQuotes=0;\n  for (int i=0; i < row.length(); i++) {\n    ch=row.charAt(i);\nswitch (state) {\ncase 0:      if (Character.isLetter(ch) || Character.isDigit(ch)) {\n        state=1;\n        column+=ch;\n      }\n else       if (ch == '\"') {\n        state=2;\n        column+=ch;\n      }\n else       if (Character.isWhitespace(ch)) {\n        state=0;\n      }\n    break;\ncase 1:  if ((Character.isLetter(ch) || Character.isDigit(ch) || isPunctuation(ch)|| Character.isWhitespace(ch)) && (ch != sep)) {\n    state=1;\n    column+=ch;\n  }\n else   if (ch == sep || ch == '\\n') {\n    state=0;\n    column=column.trim();\n    columns.add(column);\n    column=\"\";\n  }\n else {\n    throw new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n  }\nbreak;\ncase 2:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"')) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == '\"') {\nstate=3;\ncolumn+=ch;\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\nbreak;\ncase 3:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"') && (ch != sep)) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == ',') {\nstate=0;\ncolumn=column.trim();\ncolumns.add(column);\ncolumn=\"\";\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\n}\n}\ncolumns.add(column);\ncolumn=\"\";\nreturn columns;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 315,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2164,
        "startLineNumber" : 143,
        "startColumnNumber" : 1,
        "endLineNumber" : 233,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * @param row\n * @param sep the seperator\n * @return ArrayList<String> that contains each column of row.\n * @purpose compiles row in its columns.\n */\npublic static ArrayList<String> compile(String row,char sep){\n  ArrayList<String> columns=new ArrayList<String>();\n  int state=0;\n  char ch=' ';\n  String column=\"\";\n  int countQuotes=0;\n  for (int i=0; i < row.length(); i++) {\n    ch=row.charAt(i);\nswitch (state) {\ncase 0:      if (Character.isLetter(ch) || Character.isDigit(ch)) {\n        state=1;\n        column+=ch;\n      }\n else       if (ch == '\"') {\n        state=2;\n        column+=ch;\n      }\n else       if (Character.isWhitespace(ch)) {\n        state=0;\n      }\n    break;\ncase 1:  if ((Character.isLetter(ch) || Character.isDigit(ch) || isPunctuation(ch)|| Character.isWhitespace(ch)) && (ch != sep)) {\n    state=1;\n    column+=ch;\n  }\n else   if (ch == sep || ch == '\\n') {\n    state=0;\n    column=column.trim();\n    columns.add(column);\n    column=\"\";\n  }\n else {\n    throw new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n  }\nbreak;\ncase 2:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"')) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == '\"') {\nstate=3;\ncolumn+=ch;\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\nbreak;\ncase 3:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"') && (ch != sep)) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == ',') {\nstate=0;\ncolumn=column.trim();\ncolumns.add(column);\ncolumn=\"\";\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\n}\n}\ncolumns.add(column);\ncolumn=\"\";\nreturn columns;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 332,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 177,
        "startColumnNumber" : 35,
        "endLineNumber" : 177,
        "endColumnNumber" : 56
      },
      "nodeContext" : "Character.isDigit(ch)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "Character",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 178,
      "startColumnNumber" : 30,
      "endLineNumber" : 178,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.InfixExpression,extendedOperands]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 178,
        "startColumnNumber" : 30,
        "endLineNumber" : 178,
        "endColumnNumber" : 56
      },
      "nodeContext" : "Character.isWhitespace(ch)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 105,
        "startLineNumber" : 177,
        "startColumnNumber" : 9,
        "endLineNumber" : 178,
        "endColumnNumber" : 56
      },
      "nodeContext" : "Character.isLetter(ch) || Character.isDigit(ch) || isPunctuation(ch)|| Character.isWhitespace(ch)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 16,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 107,
        "startLineNumber" : 177,
        "startColumnNumber" : 8,
        "endLineNumber" : 178,
        "endColumnNumber" : 57
      },
      "nodeContext" : "(Character.isLetter(ch) || Character.isDigit(ch) || isPunctuation(ch)|| Character.isWhitespace(ch))",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 17,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 128,
        "startLineNumber" : 177,
        "startColumnNumber" : 8,
        "endLineNumber" : 179,
        "endColumnNumber" : 20
      },
      "nodeContext" : "(Character.isLetter(ch) || Character.isDigit(ch) || isPunctuation(ch)|| Character.isWhitespace(ch)) && (ch != sep)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 22,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 415,
        "startLineNumber" : 177,
        "startColumnNumber" : 4,
        "endLineNumber" : 190,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if ((Character.isLetter(ch) || Character.isDigit(ch) || isPunctuation(ch)|| Character.isWhitespace(ch)) && (ch != sep)) {\n  state=1;\n  column+=ch;\n}\n else if (ch == sep || ch == '\\n') {\n  state=0;\n  column=column.trim();\n  columns.add(column);\n  column=\"\";\n}\n else {\n  throw new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 69,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1584,
        "startLineNumber" : 161,
        "startColumnNumber" : 3,
        "endLineNumber" : 226,
        "endColumnNumber" : 4
      },
      "nodeContext" : "switch (state) {\ncase 0:  if (Character.isLetter(ch) || Character.isDigit(ch)) {\n    state=1;\n    column+=ch;\n  }\n else   if (ch == '\"') {\n    state=2;\n    column+=ch;\n  }\n else   if (Character.isWhitespace(ch)) {\n    state=0;\n  }\nbreak;\ncase 1:if ((Character.isLetter(ch) || Character.isDigit(ch) || isPunctuation(ch)|| Character.isWhitespace(ch)) && (ch != sep)) {\nstate=1;\ncolumn+=ch;\n}\n else if (ch == sep || ch == '\\n') {\nstate=0;\ncolumn=column.trim();\ncolumns.add(column);\ncolumn=\"\";\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\nbreak;\ncase 2:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"')) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == '\"') {\nstate=3;\ncolumn+=ch;\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\nbreak;\ncase 3:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"') && (ch != sep)) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == ',') {\nstate=0;\ncolumn=column.trim();\ncolumns.add(column);\ncolumn=\"\";\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 247,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1644,
        "startLineNumber" : 158,
        "startColumnNumber" : 41,
        "endLineNumber" : 228,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  ch=row.charAt(i);\nswitch (state) {\ncase 0:    if (Character.isLetter(ch) || Character.isDigit(ch)) {\n      state=1;\n      column+=ch;\n    }\n else     if (ch == '\"') {\n      state=2;\n      column+=ch;\n    }\n else     if (Character.isWhitespace(ch)) {\n      state=0;\n    }\n  break;\ncase 1:if ((Character.isLetter(ch) || Character.isDigit(ch) || isPunctuation(ch)|| Character.isWhitespace(ch)) && (ch != sep)) {\n  state=1;\n  column+=ch;\n}\n else if (ch == sep || ch == '\\n') {\n  state=0;\n  column=column.trim();\n  columns.add(column);\n  column=\"\";\n}\n else {\n  throw new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\nbreak;\ncase 2:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"')) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == '\"') {\nstate=3;\ncolumn+=ch;\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\nbreak;\ncase 3:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"') && (ch != sep)) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == ',') {\nstate=0;\ncolumn=column.trim();\ncolumns.add(column);\ncolumn=\"\";\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 255,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1683,
        "startLineNumber" : 158,
        "startColumnNumber" : 2,
        "endLineNumber" : 228,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (int i=0; i < row.length(); i++) {\n  ch=row.charAt(i);\nswitch (state) {\ncase 0:    if (Character.isLetter(ch) || Character.isDigit(ch)) {\n      state=1;\n      column+=ch;\n    }\n else     if (ch == '\"') {\n      state=2;\n      column+=ch;\n    }\n else     if (Character.isWhitespace(ch)) {\n      state=0;\n    }\n  break;\ncase 1:if ((Character.isLetter(ch) || Character.isDigit(ch) || isPunctuation(ch)|| Character.isWhitespace(ch)) && (ch != sep)) {\n  state=1;\n  column+=ch;\n}\n else if (ch == sep || ch == '\\n') {\n  state=0;\n  column=column.trim();\n  columns.add(column);\n  column=\"\";\n}\n else {\n  throw new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\nbreak;\ncase 2:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"')) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == '\"') {\nstate=3;\ncolumn+=ch;\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\nbreak;\ncase 3:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"') && (ch != sep)) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == ',') {\nstate=0;\ncolumn=column.trim();\ncolumns.add(column);\ncolumn=\"\";\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\n}\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 268,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1917,
        "startLineNumber" : 152,
        "startColumnNumber" : 63,
        "endLineNumber" : 233,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  ArrayList<String> columns=new ArrayList<String>();\n  int state=0;\n  char ch=' ';\n  String column=\"\";\n  int countQuotes=0;\n  for (int i=0; i < row.length(); i++) {\n    ch=row.charAt(i);\nswitch (state) {\ncase 0:      if (Character.isLetter(ch) || Character.isDigit(ch)) {\n        state=1;\n        column+=ch;\n      }\n else       if (ch == '\"') {\n        state=2;\n        column+=ch;\n      }\n else       if (Character.isWhitespace(ch)) {\n        state=0;\n      }\n    break;\ncase 1:  if ((Character.isLetter(ch) || Character.isDigit(ch) || isPunctuation(ch)|| Character.isWhitespace(ch)) && (ch != sep)) {\n    state=1;\n    column+=ch;\n  }\n else   if (ch == sep || ch == '\\n') {\n    state=0;\n    column=column.trim();\n    columns.add(column);\n    column=\"\";\n  }\n else {\n    throw new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n  }\nbreak;\ncase 2:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"')) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == '\"') {\nstate=3;\ncolumn+=ch;\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\nbreak;\ncase 3:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"') && (ch != sep)) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == ',') {\nstate=0;\ncolumn=column.trim();\ncolumns.add(column);\ncolumn=\"\";\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\n}\n}\ncolumns.add(column);\ncolumn=\"\";\nreturn columns;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 315,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2164,
        "startLineNumber" : 143,
        "startColumnNumber" : 1,
        "endLineNumber" : 233,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * @param row\n * @param sep the seperator\n * @return ArrayList<String> that contains each column of row.\n * @purpose compiles row in its columns.\n */\npublic static ArrayList<String> compile(String row,char sep){\n  ArrayList<String> columns=new ArrayList<String>();\n  int state=0;\n  char ch=' ';\n  String column=\"\";\n  int countQuotes=0;\n  for (int i=0; i < row.length(); i++) {\n    ch=row.charAt(i);\nswitch (state) {\ncase 0:      if (Character.isLetter(ch) || Character.isDigit(ch)) {\n        state=1;\n        column+=ch;\n      }\n else       if (ch == '\"') {\n        state=2;\n        column+=ch;\n      }\n else       if (Character.isWhitespace(ch)) {\n        state=0;\n      }\n    break;\ncase 1:  if ((Character.isLetter(ch) || Character.isDigit(ch) || isPunctuation(ch)|| Character.isWhitespace(ch)) && (ch != sep)) {\n    state=1;\n    column+=ch;\n  }\n else   if (ch == sep || ch == '\\n') {\n    state=0;\n    column=column.trim();\n    columns.add(column);\n    column=\"\";\n  }\n else {\n    throw new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n  }\nbreak;\ncase 2:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"')) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == '\"') {\nstate=3;\ncolumn+=ch;\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\nbreak;\ncase 3:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"') && (ch != sep)) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == ',') {\nstate=0;\ncolumn=column.trim();\ncolumns.add(column);\ncolumn=\"\";\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\n}\n}\ncolumns.add(column);\ncolumn=\"\";\nreturn columns;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 332,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.InfixExpression,extendedOperands]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 178,
        "startColumnNumber" : 30,
        "endLineNumber" : 178,
        "endColumnNumber" : 56
      },
      "nodeContext" : "Character.isWhitespace(ch)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "Character",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 195,
      "startColumnNumber" : 9,
      "endLineNumber" : 195,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 195,
        "startColumnNumber" : 9,
        "endLineNumber" : 195,
        "endColumnNumber" : 31
      },
      "nodeContext" : "Character.isLetter(ch)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 104,
        "startLineNumber" : 195,
        "startColumnNumber" : 9,
        "endLineNumber" : 196,
        "endColumnNumber" : 56
      },
      "nodeContext" : "Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 16,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 106,
        "startLineNumber" : 195,
        "startColumnNumber" : 8,
        "endLineNumber" : 196,
        "endColumnNumber" : 57
      },
      "nodeContext" : "(Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch))",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 17,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 127,
        "startLineNumber" : 195,
        "startColumnNumber" : 8,
        "endLineNumber" : 197,
        "endColumnNumber" : 20
      },
      "nodeContext" : "(Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"')",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 22,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 346,
        "startLineNumber" : 195,
        "startColumnNumber" : 4,
        "endLineNumber" : 206,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"')) {\n  state=2;\n  column+=ch;\n}\n else if (ch == '\"') {\n  state=3;\n  column+=ch;\n}\n else {\n  throw new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 54,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1584,
        "startLineNumber" : 161,
        "startColumnNumber" : 3,
        "endLineNumber" : 226,
        "endColumnNumber" : 4
      },
      "nodeContext" : "switch (state) {\ncase 0:  if (Character.isLetter(ch) || Character.isDigit(ch)) {\n    state=1;\n    column+=ch;\n  }\n else   if (ch == '\"') {\n    state=2;\n    column+=ch;\n  }\n else   if (Character.isWhitespace(ch)) {\n    state=0;\n  }\nbreak;\ncase 1:if ((Character.isLetter(ch) || Character.isDigit(ch) || isPunctuation(ch)|| Character.isWhitespace(ch)) && (ch != sep)) {\nstate=1;\ncolumn+=ch;\n}\n else if (ch == sep || ch == '\\n') {\nstate=0;\ncolumn=column.trim();\ncolumns.add(column);\ncolumn=\"\";\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\nbreak;\ncase 2:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"')) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == '\"') {\nstate=3;\ncolumn+=ch;\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\nbreak;\ncase 3:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"') && (ch != sep)) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == ',') {\nstate=0;\ncolumn=column.trim();\ncolumns.add(column);\ncolumn=\"\";\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 247,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1644,
        "startLineNumber" : 158,
        "startColumnNumber" : 41,
        "endLineNumber" : 228,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  ch=row.charAt(i);\nswitch (state) {\ncase 0:    if (Character.isLetter(ch) || Character.isDigit(ch)) {\n      state=1;\n      column+=ch;\n    }\n else     if (ch == '\"') {\n      state=2;\n      column+=ch;\n    }\n else     if (Character.isWhitespace(ch)) {\n      state=0;\n    }\n  break;\ncase 1:if ((Character.isLetter(ch) || Character.isDigit(ch) || isPunctuation(ch)|| Character.isWhitespace(ch)) && (ch != sep)) {\n  state=1;\n  column+=ch;\n}\n else if (ch == sep || ch == '\\n') {\n  state=0;\n  column=column.trim();\n  columns.add(column);\n  column=\"\";\n}\n else {\n  throw new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\nbreak;\ncase 2:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"')) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == '\"') {\nstate=3;\ncolumn+=ch;\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\nbreak;\ncase 3:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"') && (ch != sep)) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == ',') {\nstate=0;\ncolumn=column.trim();\ncolumns.add(column);\ncolumn=\"\";\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 255,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1683,
        "startLineNumber" : 158,
        "startColumnNumber" : 2,
        "endLineNumber" : 228,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (int i=0; i < row.length(); i++) {\n  ch=row.charAt(i);\nswitch (state) {\ncase 0:    if (Character.isLetter(ch) || Character.isDigit(ch)) {\n      state=1;\n      column+=ch;\n    }\n else     if (ch == '\"') {\n      state=2;\n      column+=ch;\n    }\n else     if (Character.isWhitespace(ch)) {\n      state=0;\n    }\n  break;\ncase 1:if ((Character.isLetter(ch) || Character.isDigit(ch) || isPunctuation(ch)|| Character.isWhitespace(ch)) && (ch != sep)) {\n  state=1;\n  column+=ch;\n}\n else if (ch == sep || ch == '\\n') {\n  state=0;\n  column=column.trim();\n  columns.add(column);\n  column=\"\";\n}\n else {\n  throw new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\nbreak;\ncase 2:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"')) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == '\"') {\nstate=3;\ncolumn+=ch;\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\nbreak;\ncase 3:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"') && (ch != sep)) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == ',') {\nstate=0;\ncolumn=column.trim();\ncolumns.add(column);\ncolumn=\"\";\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\n}\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 268,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1917,
        "startLineNumber" : 152,
        "startColumnNumber" : 63,
        "endLineNumber" : 233,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  ArrayList<String> columns=new ArrayList<String>();\n  int state=0;\n  char ch=' ';\n  String column=\"\";\n  int countQuotes=0;\n  for (int i=0; i < row.length(); i++) {\n    ch=row.charAt(i);\nswitch (state) {\ncase 0:      if (Character.isLetter(ch) || Character.isDigit(ch)) {\n        state=1;\n        column+=ch;\n      }\n else       if (ch == '\"') {\n        state=2;\n        column+=ch;\n      }\n else       if (Character.isWhitespace(ch)) {\n        state=0;\n      }\n    break;\ncase 1:  if ((Character.isLetter(ch) || Character.isDigit(ch) || isPunctuation(ch)|| Character.isWhitespace(ch)) && (ch != sep)) {\n    state=1;\n    column+=ch;\n  }\n else   if (ch == sep || ch == '\\n') {\n    state=0;\n    column=column.trim();\n    columns.add(column);\n    column=\"\";\n  }\n else {\n    throw new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n  }\nbreak;\ncase 2:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"')) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == '\"') {\nstate=3;\ncolumn+=ch;\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\nbreak;\ncase 3:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"') && (ch != sep)) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == ',') {\nstate=0;\ncolumn=column.trim();\ncolumns.add(column);\ncolumn=\"\";\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\n}\n}\ncolumns.add(column);\ncolumn=\"\";\nreturn columns;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 315,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2164,
        "startLineNumber" : 143,
        "startColumnNumber" : 1,
        "endLineNumber" : 233,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * @param row\n * @param sep the seperator\n * @return ArrayList<String> that contains each column of row.\n * @purpose compiles row in its columns.\n */\npublic static ArrayList<String> compile(String row,char sep){\n  ArrayList<String> columns=new ArrayList<String>();\n  int state=0;\n  char ch=' ';\n  String column=\"\";\n  int countQuotes=0;\n  for (int i=0; i < row.length(); i++) {\n    ch=row.charAt(i);\nswitch (state) {\ncase 0:      if (Character.isLetter(ch) || Character.isDigit(ch)) {\n        state=1;\n        column+=ch;\n      }\n else       if (ch == '\"') {\n        state=2;\n        column+=ch;\n      }\n else       if (Character.isWhitespace(ch)) {\n        state=0;\n      }\n    break;\ncase 1:  if ((Character.isLetter(ch) || Character.isDigit(ch) || isPunctuation(ch)|| Character.isWhitespace(ch)) && (ch != sep)) {\n    state=1;\n    column+=ch;\n  }\n else   if (ch == sep || ch == '\\n') {\n    state=0;\n    column=column.trim();\n    columns.add(column);\n    column=\"\";\n  }\n else {\n    throw new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n  }\nbreak;\ncase 2:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"')) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == '\"') {\nstate=3;\ncolumn+=ch;\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\nbreak;\ncase 3:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"') && (ch != sep)) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == ',') {\nstate=0;\ncolumn=column.trim();\ncolumns.add(column);\ncolumn=\"\";\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\n}\n}\ncolumns.add(column);\ncolumn=\"\";\nreturn columns;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 332,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 195,
        "startColumnNumber" : 9,
        "endLineNumber" : 195,
        "endColumnNumber" : 31
      },
      "nodeContext" : "Character.isLetter(ch)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "Character",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 195,
      "startColumnNumber" : 35,
      "endLineNumber" : 195,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 195,
        "startColumnNumber" : 35,
        "endLineNumber" : 195,
        "endColumnNumber" : 56
      },
      "nodeContext" : "Character.isDigit(ch)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 104,
        "startLineNumber" : 195,
        "startColumnNumber" : 9,
        "endLineNumber" : 196,
        "endColumnNumber" : 56
      },
      "nodeContext" : "Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 16,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 106,
        "startLineNumber" : 195,
        "startColumnNumber" : 8,
        "endLineNumber" : 196,
        "endColumnNumber" : 57
      },
      "nodeContext" : "(Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch))",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 17,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 127,
        "startLineNumber" : 195,
        "startColumnNumber" : 8,
        "endLineNumber" : 197,
        "endColumnNumber" : 20
      },
      "nodeContext" : "(Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"')",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 22,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 346,
        "startLineNumber" : 195,
        "startColumnNumber" : 4,
        "endLineNumber" : 206,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"')) {\n  state=2;\n  column+=ch;\n}\n else if (ch == '\"') {\n  state=3;\n  column+=ch;\n}\n else {\n  throw new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 54,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1584,
        "startLineNumber" : 161,
        "startColumnNumber" : 3,
        "endLineNumber" : 226,
        "endColumnNumber" : 4
      },
      "nodeContext" : "switch (state) {\ncase 0:  if (Character.isLetter(ch) || Character.isDigit(ch)) {\n    state=1;\n    column+=ch;\n  }\n else   if (ch == '\"') {\n    state=2;\n    column+=ch;\n  }\n else   if (Character.isWhitespace(ch)) {\n    state=0;\n  }\nbreak;\ncase 1:if ((Character.isLetter(ch) || Character.isDigit(ch) || isPunctuation(ch)|| Character.isWhitespace(ch)) && (ch != sep)) {\nstate=1;\ncolumn+=ch;\n}\n else if (ch == sep || ch == '\\n') {\nstate=0;\ncolumn=column.trim();\ncolumns.add(column);\ncolumn=\"\";\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\nbreak;\ncase 2:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"')) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == '\"') {\nstate=3;\ncolumn+=ch;\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\nbreak;\ncase 3:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"') && (ch != sep)) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == ',') {\nstate=0;\ncolumn=column.trim();\ncolumns.add(column);\ncolumn=\"\";\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 247,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1644,
        "startLineNumber" : 158,
        "startColumnNumber" : 41,
        "endLineNumber" : 228,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  ch=row.charAt(i);\nswitch (state) {\ncase 0:    if (Character.isLetter(ch) || Character.isDigit(ch)) {\n      state=1;\n      column+=ch;\n    }\n else     if (ch == '\"') {\n      state=2;\n      column+=ch;\n    }\n else     if (Character.isWhitespace(ch)) {\n      state=0;\n    }\n  break;\ncase 1:if ((Character.isLetter(ch) || Character.isDigit(ch) || isPunctuation(ch)|| Character.isWhitespace(ch)) && (ch != sep)) {\n  state=1;\n  column+=ch;\n}\n else if (ch == sep || ch == '\\n') {\n  state=0;\n  column=column.trim();\n  columns.add(column);\n  column=\"\";\n}\n else {\n  throw new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\nbreak;\ncase 2:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"')) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == '\"') {\nstate=3;\ncolumn+=ch;\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\nbreak;\ncase 3:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"') && (ch != sep)) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == ',') {\nstate=0;\ncolumn=column.trim();\ncolumns.add(column);\ncolumn=\"\";\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 255,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1683,
        "startLineNumber" : 158,
        "startColumnNumber" : 2,
        "endLineNumber" : 228,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (int i=0; i < row.length(); i++) {\n  ch=row.charAt(i);\nswitch (state) {\ncase 0:    if (Character.isLetter(ch) || Character.isDigit(ch)) {\n      state=1;\n      column+=ch;\n    }\n else     if (ch == '\"') {\n      state=2;\n      column+=ch;\n    }\n else     if (Character.isWhitespace(ch)) {\n      state=0;\n    }\n  break;\ncase 1:if ((Character.isLetter(ch) || Character.isDigit(ch) || isPunctuation(ch)|| Character.isWhitespace(ch)) && (ch != sep)) {\n  state=1;\n  column+=ch;\n}\n else if (ch == sep || ch == '\\n') {\n  state=0;\n  column=column.trim();\n  columns.add(column);\n  column=\"\";\n}\n else {\n  throw new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\nbreak;\ncase 2:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"')) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == '\"') {\nstate=3;\ncolumn+=ch;\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\nbreak;\ncase 3:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"') && (ch != sep)) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == ',') {\nstate=0;\ncolumn=column.trim();\ncolumns.add(column);\ncolumn=\"\";\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\n}\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 268,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1917,
        "startLineNumber" : 152,
        "startColumnNumber" : 63,
        "endLineNumber" : 233,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  ArrayList<String> columns=new ArrayList<String>();\n  int state=0;\n  char ch=' ';\n  String column=\"\";\n  int countQuotes=0;\n  for (int i=0; i < row.length(); i++) {\n    ch=row.charAt(i);\nswitch (state) {\ncase 0:      if (Character.isLetter(ch) || Character.isDigit(ch)) {\n        state=1;\n        column+=ch;\n      }\n else       if (ch == '\"') {\n        state=2;\n        column+=ch;\n      }\n else       if (Character.isWhitespace(ch)) {\n        state=0;\n      }\n    break;\ncase 1:  if ((Character.isLetter(ch) || Character.isDigit(ch) || isPunctuation(ch)|| Character.isWhitespace(ch)) && (ch != sep)) {\n    state=1;\n    column+=ch;\n  }\n else   if (ch == sep || ch == '\\n') {\n    state=0;\n    column=column.trim();\n    columns.add(column);\n    column=\"\";\n  }\n else {\n    throw new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n  }\nbreak;\ncase 2:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"')) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == '\"') {\nstate=3;\ncolumn+=ch;\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\nbreak;\ncase 3:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"') && (ch != sep)) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == ',') {\nstate=0;\ncolumn=column.trim();\ncolumns.add(column);\ncolumn=\"\";\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\n}\n}\ncolumns.add(column);\ncolumn=\"\";\nreturn columns;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 315,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2164,
        "startLineNumber" : 143,
        "startColumnNumber" : 1,
        "endLineNumber" : 233,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * @param row\n * @param sep the seperator\n * @return ArrayList<String> that contains each column of row.\n * @purpose compiles row in its columns.\n */\npublic static ArrayList<String> compile(String row,char sep){\n  ArrayList<String> columns=new ArrayList<String>();\n  int state=0;\n  char ch=' ';\n  String column=\"\";\n  int countQuotes=0;\n  for (int i=0; i < row.length(); i++) {\n    ch=row.charAt(i);\nswitch (state) {\ncase 0:      if (Character.isLetter(ch) || Character.isDigit(ch)) {\n        state=1;\n        column+=ch;\n      }\n else       if (ch == '\"') {\n        state=2;\n        column+=ch;\n      }\n else       if (Character.isWhitespace(ch)) {\n        state=0;\n      }\n    break;\ncase 1:  if ((Character.isLetter(ch) || Character.isDigit(ch) || isPunctuation(ch)|| Character.isWhitespace(ch)) && (ch != sep)) {\n    state=1;\n    column+=ch;\n  }\n else   if (ch == sep || ch == '\\n') {\n    state=0;\n    column=column.trim();\n    columns.add(column);\n    column=\"\";\n  }\n else {\n    throw new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n  }\nbreak;\ncase 2:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"')) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == '\"') {\nstate=3;\ncolumn+=ch;\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\nbreak;\ncase 3:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"') && (ch != sep)) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == ',') {\nstate=0;\ncolumn=column.trim();\ncolumns.add(column);\ncolumn=\"\";\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\n}\n}\ncolumns.add(column);\ncolumn=\"\";\nreturn columns;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 332,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 195,
        "startColumnNumber" : 35,
        "endLineNumber" : 195,
        "endColumnNumber" : 56
      },
      "nodeContext" : "Character.isDigit(ch)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "Character",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 196,
      "startColumnNumber" : 9,
      "endLineNumber" : 196,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.InfixExpression,extendedOperands]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 196,
        "startColumnNumber" : 9,
        "endLineNumber" : 196,
        "endColumnNumber" : 35
      },
      "nodeContext" : "Character.isWhitespace(ch)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 104,
        "startLineNumber" : 195,
        "startColumnNumber" : 9,
        "endLineNumber" : 196,
        "endColumnNumber" : 56
      },
      "nodeContext" : "Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 16,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 106,
        "startLineNumber" : 195,
        "startColumnNumber" : 8,
        "endLineNumber" : 196,
        "endColumnNumber" : 57
      },
      "nodeContext" : "(Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch))",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 17,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 127,
        "startLineNumber" : 195,
        "startColumnNumber" : 8,
        "endLineNumber" : 197,
        "endColumnNumber" : 20
      },
      "nodeContext" : "(Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"')",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 22,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 346,
        "startLineNumber" : 195,
        "startColumnNumber" : 4,
        "endLineNumber" : 206,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"')) {\n  state=2;\n  column+=ch;\n}\n else if (ch == '\"') {\n  state=3;\n  column+=ch;\n}\n else {\n  throw new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 54,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1584,
        "startLineNumber" : 161,
        "startColumnNumber" : 3,
        "endLineNumber" : 226,
        "endColumnNumber" : 4
      },
      "nodeContext" : "switch (state) {\ncase 0:  if (Character.isLetter(ch) || Character.isDigit(ch)) {\n    state=1;\n    column+=ch;\n  }\n else   if (ch == '\"') {\n    state=2;\n    column+=ch;\n  }\n else   if (Character.isWhitespace(ch)) {\n    state=0;\n  }\nbreak;\ncase 1:if ((Character.isLetter(ch) || Character.isDigit(ch) || isPunctuation(ch)|| Character.isWhitespace(ch)) && (ch != sep)) {\nstate=1;\ncolumn+=ch;\n}\n else if (ch == sep || ch == '\\n') {\nstate=0;\ncolumn=column.trim();\ncolumns.add(column);\ncolumn=\"\";\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\nbreak;\ncase 2:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"')) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == '\"') {\nstate=3;\ncolumn+=ch;\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\nbreak;\ncase 3:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"') && (ch != sep)) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == ',') {\nstate=0;\ncolumn=column.trim();\ncolumns.add(column);\ncolumn=\"\";\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 247,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1644,
        "startLineNumber" : 158,
        "startColumnNumber" : 41,
        "endLineNumber" : 228,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  ch=row.charAt(i);\nswitch (state) {\ncase 0:    if (Character.isLetter(ch) || Character.isDigit(ch)) {\n      state=1;\n      column+=ch;\n    }\n else     if (ch == '\"') {\n      state=2;\n      column+=ch;\n    }\n else     if (Character.isWhitespace(ch)) {\n      state=0;\n    }\n  break;\ncase 1:if ((Character.isLetter(ch) || Character.isDigit(ch) || isPunctuation(ch)|| Character.isWhitespace(ch)) && (ch != sep)) {\n  state=1;\n  column+=ch;\n}\n else if (ch == sep || ch == '\\n') {\n  state=0;\n  column=column.trim();\n  columns.add(column);\n  column=\"\";\n}\n else {\n  throw new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\nbreak;\ncase 2:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"')) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == '\"') {\nstate=3;\ncolumn+=ch;\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\nbreak;\ncase 3:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"') && (ch != sep)) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == ',') {\nstate=0;\ncolumn=column.trim();\ncolumns.add(column);\ncolumn=\"\";\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 255,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1683,
        "startLineNumber" : 158,
        "startColumnNumber" : 2,
        "endLineNumber" : 228,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (int i=0; i < row.length(); i++) {\n  ch=row.charAt(i);\nswitch (state) {\ncase 0:    if (Character.isLetter(ch) || Character.isDigit(ch)) {\n      state=1;\n      column+=ch;\n    }\n else     if (ch == '\"') {\n      state=2;\n      column+=ch;\n    }\n else     if (Character.isWhitespace(ch)) {\n      state=0;\n    }\n  break;\ncase 1:if ((Character.isLetter(ch) || Character.isDigit(ch) || isPunctuation(ch)|| Character.isWhitespace(ch)) && (ch != sep)) {\n  state=1;\n  column+=ch;\n}\n else if (ch == sep || ch == '\\n') {\n  state=0;\n  column=column.trim();\n  columns.add(column);\n  column=\"\";\n}\n else {\n  throw new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\nbreak;\ncase 2:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"')) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == '\"') {\nstate=3;\ncolumn+=ch;\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\nbreak;\ncase 3:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"') && (ch != sep)) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == ',') {\nstate=0;\ncolumn=column.trim();\ncolumns.add(column);\ncolumn=\"\";\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\n}\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 268,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1917,
        "startLineNumber" : 152,
        "startColumnNumber" : 63,
        "endLineNumber" : 233,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  ArrayList<String> columns=new ArrayList<String>();\n  int state=0;\n  char ch=' ';\n  String column=\"\";\n  int countQuotes=0;\n  for (int i=0; i < row.length(); i++) {\n    ch=row.charAt(i);\nswitch (state) {\ncase 0:      if (Character.isLetter(ch) || Character.isDigit(ch)) {\n        state=1;\n        column+=ch;\n      }\n else       if (ch == '\"') {\n        state=2;\n        column+=ch;\n      }\n else       if (Character.isWhitespace(ch)) {\n        state=0;\n      }\n    break;\ncase 1:  if ((Character.isLetter(ch) || Character.isDigit(ch) || isPunctuation(ch)|| Character.isWhitespace(ch)) && (ch != sep)) {\n    state=1;\n    column+=ch;\n  }\n else   if (ch == sep || ch == '\\n') {\n    state=0;\n    column=column.trim();\n    columns.add(column);\n    column=\"\";\n  }\n else {\n    throw new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n  }\nbreak;\ncase 2:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"')) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == '\"') {\nstate=3;\ncolumn+=ch;\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\nbreak;\ncase 3:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"') && (ch != sep)) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == ',') {\nstate=0;\ncolumn=column.trim();\ncolumns.add(column);\ncolumn=\"\";\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\n}\n}\ncolumns.add(column);\ncolumn=\"\";\nreturn columns;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 315,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2164,
        "startLineNumber" : 143,
        "startColumnNumber" : 1,
        "endLineNumber" : 233,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * @param row\n * @param sep the seperator\n * @return ArrayList<String> that contains each column of row.\n * @purpose compiles row in its columns.\n */\npublic static ArrayList<String> compile(String row,char sep){\n  ArrayList<String> columns=new ArrayList<String>();\n  int state=0;\n  char ch=' ';\n  String column=\"\";\n  int countQuotes=0;\n  for (int i=0; i < row.length(); i++) {\n    ch=row.charAt(i);\nswitch (state) {\ncase 0:      if (Character.isLetter(ch) || Character.isDigit(ch)) {\n        state=1;\n        column+=ch;\n      }\n else       if (ch == '\"') {\n        state=2;\n        column+=ch;\n      }\n else       if (Character.isWhitespace(ch)) {\n        state=0;\n      }\n    break;\ncase 1:  if ((Character.isLetter(ch) || Character.isDigit(ch) || isPunctuation(ch)|| Character.isWhitespace(ch)) && (ch != sep)) {\n    state=1;\n    column+=ch;\n  }\n else   if (ch == sep || ch == '\\n') {\n    state=0;\n    column=column.trim();\n    columns.add(column);\n    column=\"\";\n  }\n else {\n    throw new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n  }\nbreak;\ncase 2:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"')) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == '\"') {\nstate=3;\ncolumn+=ch;\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\nbreak;\ncase 3:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"') && (ch != sep)) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == ',') {\nstate=0;\ncolumn=column.trim();\ncolumns.add(column);\ncolumn=\"\";\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\n}\n}\ncolumns.add(column);\ncolumn=\"\";\nreturn columns;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 332,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.InfixExpression,extendedOperands]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 196,
        "startColumnNumber" : 9,
        "endLineNumber" : 196,
        "endColumnNumber" : 35
      },
      "nodeContext" : "Character.isWhitespace(ch)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "Character",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 211,
      "startColumnNumber" : 9,
      "endLineNumber" : 211,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 211,
        "startColumnNumber" : 9,
        "endLineNumber" : 211,
        "endColumnNumber" : 31
      },
      "nodeContext" : "Character.isLetter(ch)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 104,
        "startLineNumber" : 211,
        "startColumnNumber" : 9,
        "endLineNumber" : 212,
        "endColumnNumber" : 56
      },
      "nodeContext" : "Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 16,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 106,
        "startLineNumber" : 211,
        "startColumnNumber" : 8,
        "endLineNumber" : 212,
        "endColumnNumber" : 57
      },
      "nodeContext" : "(Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch))",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 17,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 142,
        "startLineNumber" : 211,
        "startColumnNumber" : 8,
        "endLineNumber" : 213,
        "endColumnNumber" : 35
      },
      "nodeContext" : "(Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"') && (ch != sep)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 26,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 415,
        "startLineNumber" : 211,
        "startColumnNumber" : 4,
        "endLineNumber" : 224,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"') && (ch != sep)) {\n  state=2;\n  column+=ch;\n}\n else if (ch == ',') {\n  state=0;\n  column=column.trim();\n  columns.add(column);\n  column=\"\";\n}\n else {\n  throw new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 69,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1584,
        "startLineNumber" : 161,
        "startColumnNumber" : 3,
        "endLineNumber" : 226,
        "endColumnNumber" : 4
      },
      "nodeContext" : "switch (state) {\ncase 0:  if (Character.isLetter(ch) || Character.isDigit(ch)) {\n    state=1;\n    column+=ch;\n  }\n else   if (ch == '\"') {\n    state=2;\n    column+=ch;\n  }\n else   if (Character.isWhitespace(ch)) {\n    state=0;\n  }\nbreak;\ncase 1:if ((Character.isLetter(ch) || Character.isDigit(ch) || isPunctuation(ch)|| Character.isWhitespace(ch)) && (ch != sep)) {\nstate=1;\ncolumn+=ch;\n}\n else if (ch == sep || ch == '\\n') {\nstate=0;\ncolumn=column.trim();\ncolumns.add(column);\ncolumn=\"\";\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\nbreak;\ncase 2:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"')) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == '\"') {\nstate=3;\ncolumn+=ch;\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\nbreak;\ncase 3:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"') && (ch != sep)) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == ',') {\nstate=0;\ncolumn=column.trim();\ncolumns.add(column);\ncolumn=\"\";\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 247,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1644,
        "startLineNumber" : 158,
        "startColumnNumber" : 41,
        "endLineNumber" : 228,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  ch=row.charAt(i);\nswitch (state) {\ncase 0:    if (Character.isLetter(ch) || Character.isDigit(ch)) {\n      state=1;\n      column+=ch;\n    }\n else     if (ch == '\"') {\n      state=2;\n      column+=ch;\n    }\n else     if (Character.isWhitespace(ch)) {\n      state=0;\n    }\n  break;\ncase 1:if ((Character.isLetter(ch) || Character.isDigit(ch) || isPunctuation(ch)|| Character.isWhitespace(ch)) && (ch != sep)) {\n  state=1;\n  column+=ch;\n}\n else if (ch == sep || ch == '\\n') {\n  state=0;\n  column=column.trim();\n  columns.add(column);\n  column=\"\";\n}\n else {\n  throw new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\nbreak;\ncase 2:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"')) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == '\"') {\nstate=3;\ncolumn+=ch;\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\nbreak;\ncase 3:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"') && (ch != sep)) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == ',') {\nstate=0;\ncolumn=column.trim();\ncolumns.add(column);\ncolumn=\"\";\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 255,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1683,
        "startLineNumber" : 158,
        "startColumnNumber" : 2,
        "endLineNumber" : 228,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (int i=0; i < row.length(); i++) {\n  ch=row.charAt(i);\nswitch (state) {\ncase 0:    if (Character.isLetter(ch) || Character.isDigit(ch)) {\n      state=1;\n      column+=ch;\n    }\n else     if (ch == '\"') {\n      state=2;\n      column+=ch;\n    }\n else     if (Character.isWhitespace(ch)) {\n      state=0;\n    }\n  break;\ncase 1:if ((Character.isLetter(ch) || Character.isDigit(ch) || isPunctuation(ch)|| Character.isWhitespace(ch)) && (ch != sep)) {\n  state=1;\n  column+=ch;\n}\n else if (ch == sep || ch == '\\n') {\n  state=0;\n  column=column.trim();\n  columns.add(column);\n  column=\"\";\n}\n else {\n  throw new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\nbreak;\ncase 2:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"')) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == '\"') {\nstate=3;\ncolumn+=ch;\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\nbreak;\ncase 3:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"') && (ch != sep)) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == ',') {\nstate=0;\ncolumn=column.trim();\ncolumns.add(column);\ncolumn=\"\";\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\n}\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 268,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1917,
        "startLineNumber" : 152,
        "startColumnNumber" : 63,
        "endLineNumber" : 233,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  ArrayList<String> columns=new ArrayList<String>();\n  int state=0;\n  char ch=' ';\n  String column=\"\";\n  int countQuotes=0;\n  for (int i=0; i < row.length(); i++) {\n    ch=row.charAt(i);\nswitch (state) {\ncase 0:      if (Character.isLetter(ch) || Character.isDigit(ch)) {\n        state=1;\n        column+=ch;\n      }\n else       if (ch == '\"') {\n        state=2;\n        column+=ch;\n      }\n else       if (Character.isWhitespace(ch)) {\n        state=0;\n      }\n    break;\ncase 1:  if ((Character.isLetter(ch) || Character.isDigit(ch) || isPunctuation(ch)|| Character.isWhitespace(ch)) && (ch != sep)) {\n    state=1;\n    column+=ch;\n  }\n else   if (ch == sep || ch == '\\n') {\n    state=0;\n    column=column.trim();\n    columns.add(column);\n    column=\"\";\n  }\n else {\n    throw new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n  }\nbreak;\ncase 2:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"')) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == '\"') {\nstate=3;\ncolumn+=ch;\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\nbreak;\ncase 3:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"') && (ch != sep)) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == ',') {\nstate=0;\ncolumn=column.trim();\ncolumns.add(column);\ncolumn=\"\";\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\n}\n}\ncolumns.add(column);\ncolumn=\"\";\nreturn columns;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 315,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2164,
        "startLineNumber" : 143,
        "startColumnNumber" : 1,
        "endLineNumber" : 233,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * @param row\n * @param sep the seperator\n * @return ArrayList<String> that contains each column of row.\n * @purpose compiles row in its columns.\n */\npublic static ArrayList<String> compile(String row,char sep){\n  ArrayList<String> columns=new ArrayList<String>();\n  int state=0;\n  char ch=' ';\n  String column=\"\";\n  int countQuotes=0;\n  for (int i=0; i < row.length(); i++) {\n    ch=row.charAt(i);\nswitch (state) {\ncase 0:      if (Character.isLetter(ch) || Character.isDigit(ch)) {\n        state=1;\n        column+=ch;\n      }\n else       if (ch == '\"') {\n        state=2;\n        column+=ch;\n      }\n else       if (Character.isWhitespace(ch)) {\n        state=0;\n      }\n    break;\ncase 1:  if ((Character.isLetter(ch) || Character.isDigit(ch) || isPunctuation(ch)|| Character.isWhitespace(ch)) && (ch != sep)) {\n    state=1;\n    column+=ch;\n  }\n else   if (ch == sep || ch == '\\n') {\n    state=0;\n    column=column.trim();\n    columns.add(column);\n    column=\"\";\n  }\n else {\n    throw new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n  }\nbreak;\ncase 2:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"')) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == '\"') {\nstate=3;\ncolumn+=ch;\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\nbreak;\ncase 3:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"') && (ch != sep)) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == ',') {\nstate=0;\ncolumn=column.trim();\ncolumns.add(column);\ncolumn=\"\";\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\n}\n}\ncolumns.add(column);\ncolumn=\"\";\nreturn columns;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 332,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 211,
        "startColumnNumber" : 9,
        "endLineNumber" : 211,
        "endColumnNumber" : 31
      },
      "nodeContext" : "Character.isLetter(ch)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "Character",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 211,
      "startColumnNumber" : 35,
      "endLineNumber" : 211,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 211,
        "startColumnNumber" : 35,
        "endLineNumber" : 211,
        "endColumnNumber" : 56
      },
      "nodeContext" : "Character.isDigit(ch)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 104,
        "startLineNumber" : 211,
        "startColumnNumber" : 9,
        "endLineNumber" : 212,
        "endColumnNumber" : 56
      },
      "nodeContext" : "Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 16,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 106,
        "startLineNumber" : 211,
        "startColumnNumber" : 8,
        "endLineNumber" : 212,
        "endColumnNumber" : 57
      },
      "nodeContext" : "(Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch))",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 17,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 142,
        "startLineNumber" : 211,
        "startColumnNumber" : 8,
        "endLineNumber" : 213,
        "endColumnNumber" : 35
      },
      "nodeContext" : "(Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"') && (ch != sep)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 26,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 415,
        "startLineNumber" : 211,
        "startColumnNumber" : 4,
        "endLineNumber" : 224,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"') && (ch != sep)) {\n  state=2;\n  column+=ch;\n}\n else if (ch == ',') {\n  state=0;\n  column=column.trim();\n  columns.add(column);\n  column=\"\";\n}\n else {\n  throw new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 69,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1584,
        "startLineNumber" : 161,
        "startColumnNumber" : 3,
        "endLineNumber" : 226,
        "endColumnNumber" : 4
      },
      "nodeContext" : "switch (state) {\ncase 0:  if (Character.isLetter(ch) || Character.isDigit(ch)) {\n    state=1;\n    column+=ch;\n  }\n else   if (ch == '\"') {\n    state=2;\n    column+=ch;\n  }\n else   if (Character.isWhitespace(ch)) {\n    state=0;\n  }\nbreak;\ncase 1:if ((Character.isLetter(ch) || Character.isDigit(ch) || isPunctuation(ch)|| Character.isWhitespace(ch)) && (ch != sep)) {\nstate=1;\ncolumn+=ch;\n}\n else if (ch == sep || ch == '\\n') {\nstate=0;\ncolumn=column.trim();\ncolumns.add(column);\ncolumn=\"\";\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\nbreak;\ncase 2:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"')) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == '\"') {\nstate=3;\ncolumn+=ch;\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\nbreak;\ncase 3:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"') && (ch != sep)) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == ',') {\nstate=0;\ncolumn=column.trim();\ncolumns.add(column);\ncolumn=\"\";\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 247,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1644,
        "startLineNumber" : 158,
        "startColumnNumber" : 41,
        "endLineNumber" : 228,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  ch=row.charAt(i);\nswitch (state) {\ncase 0:    if (Character.isLetter(ch) || Character.isDigit(ch)) {\n      state=1;\n      column+=ch;\n    }\n else     if (ch == '\"') {\n      state=2;\n      column+=ch;\n    }\n else     if (Character.isWhitespace(ch)) {\n      state=0;\n    }\n  break;\ncase 1:if ((Character.isLetter(ch) || Character.isDigit(ch) || isPunctuation(ch)|| Character.isWhitespace(ch)) && (ch != sep)) {\n  state=1;\n  column+=ch;\n}\n else if (ch == sep || ch == '\\n') {\n  state=0;\n  column=column.trim();\n  columns.add(column);\n  column=\"\";\n}\n else {\n  throw new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\nbreak;\ncase 2:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"')) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == '\"') {\nstate=3;\ncolumn+=ch;\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\nbreak;\ncase 3:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"') && (ch != sep)) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == ',') {\nstate=0;\ncolumn=column.trim();\ncolumns.add(column);\ncolumn=\"\";\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 255,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1683,
        "startLineNumber" : 158,
        "startColumnNumber" : 2,
        "endLineNumber" : 228,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (int i=0; i < row.length(); i++) {\n  ch=row.charAt(i);\nswitch (state) {\ncase 0:    if (Character.isLetter(ch) || Character.isDigit(ch)) {\n      state=1;\n      column+=ch;\n    }\n else     if (ch == '\"') {\n      state=2;\n      column+=ch;\n    }\n else     if (Character.isWhitespace(ch)) {\n      state=0;\n    }\n  break;\ncase 1:if ((Character.isLetter(ch) || Character.isDigit(ch) || isPunctuation(ch)|| Character.isWhitespace(ch)) && (ch != sep)) {\n  state=1;\n  column+=ch;\n}\n else if (ch == sep || ch == '\\n') {\n  state=0;\n  column=column.trim();\n  columns.add(column);\n  column=\"\";\n}\n else {\n  throw new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\nbreak;\ncase 2:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"')) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == '\"') {\nstate=3;\ncolumn+=ch;\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\nbreak;\ncase 3:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"') && (ch != sep)) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == ',') {\nstate=0;\ncolumn=column.trim();\ncolumns.add(column);\ncolumn=\"\";\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\n}\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 268,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1917,
        "startLineNumber" : 152,
        "startColumnNumber" : 63,
        "endLineNumber" : 233,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  ArrayList<String> columns=new ArrayList<String>();\n  int state=0;\n  char ch=' ';\n  String column=\"\";\n  int countQuotes=0;\n  for (int i=0; i < row.length(); i++) {\n    ch=row.charAt(i);\nswitch (state) {\ncase 0:      if (Character.isLetter(ch) || Character.isDigit(ch)) {\n        state=1;\n        column+=ch;\n      }\n else       if (ch == '\"') {\n        state=2;\n        column+=ch;\n      }\n else       if (Character.isWhitespace(ch)) {\n        state=0;\n      }\n    break;\ncase 1:  if ((Character.isLetter(ch) || Character.isDigit(ch) || isPunctuation(ch)|| Character.isWhitespace(ch)) && (ch != sep)) {\n    state=1;\n    column+=ch;\n  }\n else   if (ch == sep || ch == '\\n') {\n    state=0;\n    column=column.trim();\n    columns.add(column);\n    column=\"\";\n  }\n else {\n    throw new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n  }\nbreak;\ncase 2:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"')) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == '\"') {\nstate=3;\ncolumn+=ch;\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\nbreak;\ncase 3:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"') && (ch != sep)) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == ',') {\nstate=0;\ncolumn=column.trim();\ncolumns.add(column);\ncolumn=\"\";\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\n}\n}\ncolumns.add(column);\ncolumn=\"\";\nreturn columns;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 315,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2164,
        "startLineNumber" : 143,
        "startColumnNumber" : 1,
        "endLineNumber" : 233,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * @param row\n * @param sep the seperator\n * @return ArrayList<String> that contains each column of row.\n * @purpose compiles row in its columns.\n */\npublic static ArrayList<String> compile(String row,char sep){\n  ArrayList<String> columns=new ArrayList<String>();\n  int state=0;\n  char ch=' ';\n  String column=\"\";\n  int countQuotes=0;\n  for (int i=0; i < row.length(); i++) {\n    ch=row.charAt(i);\nswitch (state) {\ncase 0:      if (Character.isLetter(ch) || Character.isDigit(ch)) {\n        state=1;\n        column+=ch;\n      }\n else       if (ch == '\"') {\n        state=2;\n        column+=ch;\n      }\n else       if (Character.isWhitespace(ch)) {\n        state=0;\n      }\n    break;\ncase 1:  if ((Character.isLetter(ch) || Character.isDigit(ch) || isPunctuation(ch)|| Character.isWhitespace(ch)) && (ch != sep)) {\n    state=1;\n    column+=ch;\n  }\n else   if (ch == sep || ch == '\\n') {\n    state=0;\n    column=column.trim();\n    columns.add(column);\n    column=\"\";\n  }\n else {\n    throw new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n  }\nbreak;\ncase 2:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"')) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == '\"') {\nstate=3;\ncolumn+=ch;\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\nbreak;\ncase 3:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"') && (ch != sep)) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == ',') {\nstate=0;\ncolumn=column.trim();\ncolumns.add(column);\ncolumn=\"\";\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\n}\n}\ncolumns.add(column);\ncolumn=\"\";\nreturn columns;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 332,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 211,
        "startColumnNumber" : 35,
        "endLineNumber" : 211,
        "endColumnNumber" : 56
      },
      "nodeContext" : "Character.isDigit(ch)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "Character",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 212,
      "startColumnNumber" : 9,
      "endLineNumber" : 212,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.InfixExpression,extendedOperands]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 212,
        "startColumnNumber" : 9,
        "endLineNumber" : 212,
        "endColumnNumber" : 35
      },
      "nodeContext" : "Character.isWhitespace(ch)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 104,
        "startLineNumber" : 211,
        "startColumnNumber" : 9,
        "endLineNumber" : 212,
        "endColumnNumber" : 56
      },
      "nodeContext" : "Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 16,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 106,
        "startLineNumber" : 211,
        "startColumnNumber" : 8,
        "endLineNumber" : 212,
        "endColumnNumber" : 57
      },
      "nodeContext" : "(Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch))",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 17,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 142,
        "startLineNumber" : 211,
        "startColumnNumber" : 8,
        "endLineNumber" : 213,
        "endColumnNumber" : 35
      },
      "nodeContext" : "(Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"') && (ch != sep)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 26,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 415,
        "startLineNumber" : 211,
        "startColumnNumber" : 4,
        "endLineNumber" : 224,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"') && (ch != sep)) {\n  state=2;\n  column+=ch;\n}\n else if (ch == ',') {\n  state=0;\n  column=column.trim();\n  columns.add(column);\n  column=\"\";\n}\n else {\n  throw new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 69,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1584,
        "startLineNumber" : 161,
        "startColumnNumber" : 3,
        "endLineNumber" : 226,
        "endColumnNumber" : 4
      },
      "nodeContext" : "switch (state) {\ncase 0:  if (Character.isLetter(ch) || Character.isDigit(ch)) {\n    state=1;\n    column+=ch;\n  }\n else   if (ch == '\"') {\n    state=2;\n    column+=ch;\n  }\n else   if (Character.isWhitespace(ch)) {\n    state=0;\n  }\nbreak;\ncase 1:if ((Character.isLetter(ch) || Character.isDigit(ch) || isPunctuation(ch)|| Character.isWhitespace(ch)) && (ch != sep)) {\nstate=1;\ncolumn+=ch;\n}\n else if (ch == sep || ch == '\\n') {\nstate=0;\ncolumn=column.trim();\ncolumns.add(column);\ncolumn=\"\";\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\nbreak;\ncase 2:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"')) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == '\"') {\nstate=3;\ncolumn+=ch;\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\nbreak;\ncase 3:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"') && (ch != sep)) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == ',') {\nstate=0;\ncolumn=column.trim();\ncolumns.add(column);\ncolumn=\"\";\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 247,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1644,
        "startLineNumber" : 158,
        "startColumnNumber" : 41,
        "endLineNumber" : 228,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  ch=row.charAt(i);\nswitch (state) {\ncase 0:    if (Character.isLetter(ch) || Character.isDigit(ch)) {\n      state=1;\n      column+=ch;\n    }\n else     if (ch == '\"') {\n      state=2;\n      column+=ch;\n    }\n else     if (Character.isWhitespace(ch)) {\n      state=0;\n    }\n  break;\ncase 1:if ((Character.isLetter(ch) || Character.isDigit(ch) || isPunctuation(ch)|| Character.isWhitespace(ch)) && (ch != sep)) {\n  state=1;\n  column+=ch;\n}\n else if (ch == sep || ch == '\\n') {\n  state=0;\n  column=column.trim();\n  columns.add(column);\n  column=\"\";\n}\n else {\n  throw new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\nbreak;\ncase 2:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"')) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == '\"') {\nstate=3;\ncolumn+=ch;\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\nbreak;\ncase 3:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"') && (ch != sep)) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == ',') {\nstate=0;\ncolumn=column.trim();\ncolumns.add(column);\ncolumn=\"\";\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 255,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1683,
        "startLineNumber" : 158,
        "startColumnNumber" : 2,
        "endLineNumber" : 228,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (int i=0; i < row.length(); i++) {\n  ch=row.charAt(i);\nswitch (state) {\ncase 0:    if (Character.isLetter(ch) || Character.isDigit(ch)) {\n      state=1;\n      column+=ch;\n    }\n else     if (ch == '\"') {\n      state=2;\n      column+=ch;\n    }\n else     if (Character.isWhitespace(ch)) {\n      state=0;\n    }\n  break;\ncase 1:if ((Character.isLetter(ch) || Character.isDigit(ch) || isPunctuation(ch)|| Character.isWhitespace(ch)) && (ch != sep)) {\n  state=1;\n  column+=ch;\n}\n else if (ch == sep || ch == '\\n') {\n  state=0;\n  column=column.trim();\n  columns.add(column);\n  column=\"\";\n}\n else {\n  throw new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\nbreak;\ncase 2:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"')) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == '\"') {\nstate=3;\ncolumn+=ch;\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\nbreak;\ncase 3:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"') && (ch != sep)) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == ',') {\nstate=0;\ncolumn=column.trim();\ncolumns.add(column);\ncolumn=\"\";\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\n}\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 268,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1917,
        "startLineNumber" : 152,
        "startColumnNumber" : 63,
        "endLineNumber" : 233,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  ArrayList<String> columns=new ArrayList<String>();\n  int state=0;\n  char ch=' ';\n  String column=\"\";\n  int countQuotes=0;\n  for (int i=0; i < row.length(); i++) {\n    ch=row.charAt(i);\nswitch (state) {\ncase 0:      if (Character.isLetter(ch) || Character.isDigit(ch)) {\n        state=1;\n        column+=ch;\n      }\n else       if (ch == '\"') {\n        state=2;\n        column+=ch;\n      }\n else       if (Character.isWhitespace(ch)) {\n        state=0;\n      }\n    break;\ncase 1:  if ((Character.isLetter(ch) || Character.isDigit(ch) || isPunctuation(ch)|| Character.isWhitespace(ch)) && (ch != sep)) {\n    state=1;\n    column+=ch;\n  }\n else   if (ch == sep || ch == '\\n') {\n    state=0;\n    column=column.trim();\n    columns.add(column);\n    column=\"\";\n  }\n else {\n    throw new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n  }\nbreak;\ncase 2:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"')) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == '\"') {\nstate=3;\ncolumn+=ch;\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\nbreak;\ncase 3:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"') && (ch != sep)) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == ',') {\nstate=0;\ncolumn=column.trim();\ncolumns.add(column);\ncolumn=\"\";\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\n}\n}\ncolumns.add(column);\ncolumn=\"\";\nreturn columns;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 315,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2164,
        "startLineNumber" : 143,
        "startColumnNumber" : 1,
        "endLineNumber" : 233,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * @param row\n * @param sep the seperator\n * @return ArrayList<String> that contains each column of row.\n * @purpose compiles row in its columns.\n */\npublic static ArrayList<String> compile(String row,char sep){\n  ArrayList<String> columns=new ArrayList<String>();\n  int state=0;\n  char ch=' ';\n  String column=\"\";\n  int countQuotes=0;\n  for (int i=0; i < row.length(); i++) {\n    ch=row.charAt(i);\nswitch (state) {\ncase 0:      if (Character.isLetter(ch) || Character.isDigit(ch)) {\n        state=1;\n        column+=ch;\n      }\n else       if (ch == '\"') {\n        state=2;\n        column+=ch;\n      }\n else       if (Character.isWhitespace(ch)) {\n        state=0;\n      }\n    break;\ncase 1:  if ((Character.isLetter(ch) || Character.isDigit(ch) || isPunctuation(ch)|| Character.isWhitespace(ch)) && (ch != sep)) {\n    state=1;\n    column+=ch;\n  }\n else   if (ch == sep || ch == '\\n') {\n    state=0;\n    column=column.trim();\n    columns.add(column);\n    column=\"\";\n  }\n else {\n    throw new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n  }\nbreak;\ncase 2:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"')) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == '\"') {\nstate=3;\ncolumn+=ch;\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\nbreak;\ncase 3:if ((Character.isLetter(ch) || Character.isDigit(ch) || Character.isWhitespace(ch)|| isPunctuation(ch)) && (ch != '\"') && (ch != sep)) {\nstate=2;\ncolumn+=ch;\n}\n else if (ch == ',') {\nstate=0;\ncolumn=column.trim();\ncolumns.add(column);\ncolumn=\"\";\n}\n else {\nthrow new RuntimeException(\"compile: invalid\" + \" character \" + ch);\n}\n}\n}\ncolumns.add(column);\ncolumn=\"\";\nreturn columns;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 332,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.InfixExpression,extendedOperands]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 212,
        "startColumnNumber" : 9,
        "endLineNumber" : 212,
        "endColumnNumber" : 35
      },
      "nodeContext" : "Character.isWhitespace(ch)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : null
  } ],
  "positionList" : [ {
    "charLength" : 9,
    "startLineNumber" : 165,
    "startColumnNumber" : 8,
    "endLineNumber" : 165,
    "endColumnNumber" : 17
  }, {
    "charLength" : 9,
    "startLineNumber" : 165,
    "startColumnNumber" : 34,
    "endLineNumber" : 165,
    "endColumnNumber" : 43
  }, {
    "charLength" : 9,
    "startLineNumber" : 171,
    "startColumnNumber" : 15,
    "endLineNumber" : 171,
    "endColumnNumber" : 24
  }, {
    "charLength" : 9,
    "startLineNumber" : 177,
    "startColumnNumber" : 9,
    "endLineNumber" : 177,
    "endColumnNumber" : 18
  }, {
    "charLength" : 9,
    "startLineNumber" : 177,
    "startColumnNumber" : 35,
    "endLineNumber" : 177,
    "endColumnNumber" : 44
  }, {
    "charLength" : 9,
    "startLineNumber" : 178,
    "startColumnNumber" : 30,
    "endLineNumber" : 178,
    "endColumnNumber" : 39
  }, {
    "charLength" : 9,
    "startLineNumber" : 195,
    "startColumnNumber" : 9,
    "endLineNumber" : 195,
    "endColumnNumber" : 18
  }, {
    "charLength" : 9,
    "startLineNumber" : 195,
    "startColumnNumber" : 35,
    "endLineNumber" : 195,
    "endColumnNumber" : 44
  }, {
    "charLength" : 9,
    "startLineNumber" : 196,
    "startColumnNumber" : 9,
    "endLineNumber" : 196,
    "endColumnNumber" : 18
  }, {
    "charLength" : 9,
    "startLineNumber" : 211,
    "startColumnNumber" : 9,
    "endLineNumber" : 211,
    "endColumnNumber" : 18
  }, {
    "charLength" : 9,
    "startLineNumber" : 211,
    "startColumnNumber" : 35,
    "endLineNumber" : 211,
    "endColumnNumber" : 44
  }, {
    "charLength" : 9,
    "startLineNumber" : 212,
    "startColumnNumber" : 9,
    "endLineNumber" : 212,
    "endColumnNumber" : 18
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 1
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 1
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 1
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 1
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 1
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 1
  }, {
    "firstKey" : 6,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 1
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 1
  }, {
    "firstKey" : 7,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 1
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 1
  }, {
    "firstKey" : 8,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 10,
    "layout" : 1
  }, {
    "firstKey" : 9,
    "secondKey" : 11,
    "layout" : 1
  }, {
    "firstKey" : 10,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 9,
    "layout" : 1
  }, {
    "firstKey" : 10,
    "secondKey" : 11,
    "layout" : 1
  }, {
    "firstKey" : 11,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 9,
    "layout" : 1
  }, {
    "firstKey" : 11,
    "secondKey" : 10,
    "layout" : 1
  } ]
}