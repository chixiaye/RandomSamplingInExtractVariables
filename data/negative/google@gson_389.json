{
  "id" : 389,
  "expression" : "keyTypeAdapter.toJsonTree(entry.getKey())",
  "projectName" : "google@gson",
  "commitID" : "c3d0f200b352f411b9ebe45c3bf49d4328b2c51f",
  "filePath" : "/gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "keyTypeAdapter.toJsonTree(entry.getKey())",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 41,
      "startLineNumber" : 219,
      "startColumnNumber" : 33,
      "endLineNumber" : 219,
      "endColumnNumber" : 74
    },
    "astNodeNumber" : 6,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 219,
        "startColumnNumber" : 20,
        "endLineNumber" : 219,
        "endColumnNumber" : 74
      },
      "nodeContext" : "keyElement=keyTypeAdapter.toJsonTree(entry.getKey())",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 219,
        "startColumnNumber" : 8,
        "endLineNumber" : 219,
        "endColumnNumber" : 75
      },
      "nodeContext" : "JsonElement keyElement=keyTypeAdapter.toJsonTree(entry.getKey());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 234,
        "startLineNumber" : 218,
        "startColumnNumber" : 51,
        "endLineNumber" : 223,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  JsonElement keyElement=keyTypeAdapter.toJsonTree(entry.getKey());\n  keys.add(keyElement);\n  values.add(entry.getValue());\n  hasComplexKeys|=keyElement.isJsonArray() || keyElement.isJsonObject();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 34,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 279,
        "startLineNumber" : 218,
        "startColumnNumber" : 6,
        "endLineNumber" : 223,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (Map.Entry<K,V> entry : map.entrySet()) {\n  JsonElement keyElement=keyTypeAdapter.toJsonTree(entry.getKey());\n  keys.add(keyElement);\n  values.add(entry.getValue());\n  hasComplexKeys|=keyElement.isJsonArray() || keyElement.isJsonObject();\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 49,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1406,
        "startLineNumber" : 198,
        "startColumnNumber" : 72,
        "endLineNumber" : 243,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (map == null) {\n    out.nullValue();\n    return;\n  }\n  if (!complexMapKeySerialization) {\n    out.beginObject();\n    for (    Map.Entry<K,V> entry : map.entrySet()) {\n      out.name(String.valueOf(entry.getKey()));\n      valueTypeAdapter.write(out,entry.getValue());\n    }\n    out.endObject();\n    return;\n  }\n  boolean hasComplexKeys=false;\n  List<JsonElement> keys=new ArrayList<JsonElement>(map.size());\n  List<V> values=new ArrayList<V>(map.size());\n  for (  Map.Entry<K,V> entry : map.entrySet()) {\n    JsonElement keyElement=keyTypeAdapter.toJsonTree(entry.getKey());\n    keys.add(keyElement);\n    values.add(entry.getValue());\n    hasComplexKeys|=keyElement.isJsonArray() || keyElement.isJsonObject();\n  }\n  if (hasComplexKeys) {\n    out.beginArray();\n    for (int i=0; i < keys.size(); i++) {\n      out.beginArray();\n      Streams.write(keys.get(i),out);\n      valueTypeAdapter.write(out,values.get(i));\n      out.endArray();\n    }\n    out.endArray();\n  }\n else {\n    out.beginObject();\n    for (int i=0; i < keys.size(); i++) {\n      JsonElement keyElement=keys.get(i);\n      out.name(keyToString(keyElement));\n      valueTypeAdapter.write(out,values.get(i));\n    }\n    out.endObject();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 245,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1474,
        "startLineNumber" : 198,
        "startColumnNumber" : 4,
        "endLineNumber" : 243,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void write(JsonWriter out,Map<K,V> map) throws IOException {\n  if (map == null) {\n    out.nullValue();\n    return;\n  }\n  if (!complexMapKeySerialization) {\n    out.beginObject();\n    for (    Map.Entry<K,V> entry : map.entrySet()) {\n      out.name(String.valueOf(entry.getKey()));\n      valueTypeAdapter.write(out,entry.getValue());\n    }\n    out.endObject();\n    return;\n  }\n  boolean hasComplexKeys=false;\n  List<JsonElement> keys=new ArrayList<JsonElement>(map.size());\n  List<V> values=new ArrayList<V>(map.size());\n  for (  Map.Entry<K,V> entry : map.entrySet()) {\n    JsonElement keyElement=keyTypeAdapter.toJsonTree(entry.getKey());\n    keys.add(keyElement);\n    values.add(entry.getValue());\n    hasComplexKeys|=keyElement.isJsonArray() || keyElement.isJsonObject();\n  }\n  if (hasComplexKeys) {\n    out.beginArray();\n    for (int i=0; i < keys.size(); i++) {\n      out.beginArray();\n      Streams.write(keys.get(i),out);\n      valueTypeAdapter.write(out,values.get(i));\n      out.endArray();\n    }\n    out.endArray();\n  }\n else {\n    out.beginObject();\n    for (int i=0; i < keys.size(); i++) {\n      JsonElement keyElement=keys.get(i);\n      out.name(keyToString(keyElement));\n      valueTypeAdapter.write(out,values.get(i));\n    }\n    out.endObject();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 264,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 219,
        "startColumnNumber" : 8,
        "endLineNumber" : 219,
        "endColumnNumber" : 75
      },
      "nodeContext" : "JsonElement keyElement=keyTypeAdapter.toJsonTree(entry.getKey());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 4,
    "type" : "com.google.gson.JsonElement"
  } ],
  "positionList" : [ {
    "charLength" : 41,
    "startLineNumber" : 219,
    "startColumnNumber" : 33,
    "endLineNumber" : 219,
    "endColumnNumber" : 74
  } ],
  "layoutRelationDataList" : [ ]
}