{
  "id" : 139,
  "expression" : "null",
  "projectName" : "spring-projects@spring-boot",
  "commitID" : "22a6ee03ebe9326364c3c79318942dc0694189f3",
  "filePath" : "spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/MetricsEndpoint.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 82,
      "startColumnNumber" : 23,
      "endLineNumber" : 82,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 82,
        "startColumnNumber" : 16,
        "endLineNumber" : 82,
        "endColumnNumber" : 27
      },
      "nodeContext" : "tag == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 82,
        "startColumnNumber" : 16,
        "endLineNumber" : 82,
        "endColumnNumber" : 76
      },
      "nodeContext" : "tag == null || tag.stream().allMatch((t) -> t.contains(\":\"))",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 131,
        "startLineNumber" : 82,
        "startColumnNumber" : 2,
        "endLineNumber" : 83,
        "endColumnNumber" : 55
      },
      "nodeContext" : "Assert.isTrue(tag == null || tag.stream().allMatch((t) -> t.contains(\":\")),\"Each tag parameter must be in the form key:value\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 132,
        "startLineNumber" : 82,
        "startColumnNumber" : 2,
        "endLineNumber" : 83,
        "endColumnNumber" : 56
      },
      "nodeContext" : "Assert.isTrue(tag == null || tag.stream().allMatch((t) -> t.contains(\":\")),\"Each tag parameter must be in the form key:value\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 21,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 669,
        "startLineNumber" : 81,
        "startColumnNumber" : 31,
        "endLineNumber" : 96,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  Assert.isTrue(tag == null || tag.stream().allMatch((t) -> t.contains(\":\")),\"Each tag parameter must be in the form key:value\");\n  List<Tag> tags=parseTags(tag);\n  List<Meter> meters=new ArrayList<>();\n  collectMeters(meters,this.registry,requiredMetricName,tags);\n  if (meters.isEmpty()) {\n    return null;\n  }\n  Map<Statistic,Double> samples=getSamples(meters);\n  Map<String,List<String>> availableTags=getAvailableTags(meters);\n  tags.forEach((t) -> availableTags.remove(t.getKey()));\n  return new MetricResponse(requiredMetricName,asList(samples,MetricResponse.Sample::new),asList(availableTags,MetricResponse.AvailableTag::new));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 124,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 782,
        "startLineNumber" : 79,
        "startColumnNumber" : 1,
        "endLineNumber" : 96,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@ReadOperation public MetricResponse metric(@Selector String requiredMetricName,@Nullable List<String> tag){\n  Assert.isTrue(tag == null || tag.stream().allMatch((t) -> t.contains(\":\")),\"Each tag parameter must be in the form key:value\");\n  List<Tag> tags=parseTags(tag);\n  List<Meter> meters=new ArrayList<>();\n  collectMeters(meters,this.registry,requiredMetricName,tags);\n  if (meters.isEmpty()) {\n    return null;\n  }\n  Map<Statistic,Double> samples=getSamples(meters);\n  Map<String,List<String>> availableTags=getAvailableTags(meters);\n  tags.forEach((t) -> availableTags.remove(t.getKey()));\n  return new MetricResponse(requiredMetricName,asList(samples,MetricResponse.Sample::new),asList(availableTags,MetricResponse.AvailableTag::new));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 146,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 82,
        "startColumnNumber" : 16,
        "endLineNumber" : 82,
        "endColumnNumber" : 76
      },
      "nodeContext" : "tag == null || tag.stream().allMatch((t) -> t.contains(\":\"))",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 16,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 88,
      "startColumnNumber" : 10,
      "endLineNumber" : 88,
      "endColumnNumber" : 14
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 88,
        "startColumnNumber" : 3,
        "endLineNumber" : 88,
        "endColumnNumber" : 15
      },
      "nodeContext" : "return null;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 87,
        "startColumnNumber" : 24,
        "endLineNumber" : 89,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  return null;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 3,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 87,
        "startColumnNumber" : 2,
        "endLineNumber" : 89,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (meters.isEmpty()) {\n  return null;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 669,
        "startLineNumber" : 81,
        "startColumnNumber" : 31,
        "endLineNumber" : 96,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  Assert.isTrue(tag == null || tag.stream().allMatch((t) -> t.contains(\":\")),\"Each tag parameter must be in the form key:value\");\n  List<Tag> tags=parseTags(tag);\n  List<Meter> meters=new ArrayList<>();\n  collectMeters(meters,this.registry,requiredMetricName,tags);\n  if (meters.isEmpty()) {\n    return null;\n  }\n  Map<Statistic,Double> samples=getSamples(meters);\n  Map<String,List<String>> availableTags=getAvailableTags(meters);\n  tags.forEach((t) -> availableTags.remove(t.getKey()));\n  return new MetricResponse(requiredMetricName,asList(samples,MetricResponse.Sample::new),asList(availableTags,MetricResponse.AvailableTag::new));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 124,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 782,
        "startLineNumber" : 79,
        "startColumnNumber" : 1,
        "endLineNumber" : 96,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@ReadOperation public MetricResponse metric(@Selector String requiredMetricName,@Nullable List<String> tag){\n  Assert.isTrue(tag == null || tag.stream().allMatch((t) -> t.contains(\":\")),\"Each tag parameter must be in the form key:value\");\n  List<Tag> tags=parseTags(tag);\n  List<Meter> meters=new ArrayList<>();\n  collectMeters(meters,this.registry,requiredMetricName,tags);\n  if (meters.isEmpty()) {\n    return null;\n  }\n  Map<Statistic,Double> samples=getSamples(meters);\n  Map<String,List<String>> availableTags=getAvailableTags(meters);\n  tags.forEach((t) -> availableTags.remove(t.getKey()));\n  return new MetricResponse(requiredMetricName,asList(samples,MetricResponse.Sample::new),asList(availableTags,MetricResponse.AvailableTag::new));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 146,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 88,
        "startColumnNumber" : 3,
        "endLineNumber" : 88,
        "endColumnNumber" : 15
      },
      "nodeContext" : "return null;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "null"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 82,
    "startColumnNumber" : 23,
    "endLineNumber" : 82,
    "endColumnNumber" : 27
  }, {
    "charLength" : 4,
    "startLineNumber" : 88,
    "startColumnNumber" : 10,
    "endLineNumber" : 88,
    "endColumnNumber" : 14
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}