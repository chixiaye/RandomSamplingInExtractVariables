{
  "id" : 334,
  "expression" : "os",
  "projectName" : "jenkinsci@jenkins",
  "commitID" : "c44fa7f4cf769257844d562353a579a198ea517a",
  "filePath" : "/core/src/main/java/hudson/os/SU.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "os",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 78,
      "startColumnNumber" : 11,
      "endLineNumber" : 78,
      "endColumnNumber" : 13
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 78,
        "startColumnNumber" : 11,
        "endLineNumber" : 78,
        "endColumnNumber" : 29
      },
      "nodeContext" : "os.equals(\"Linux\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 952,
        "startLineNumber" : 78,
        "startColumnNumber" : 8,
        "endLineNumber" : 97,
        "endColumnNumber" : 43
      },
      "nodeContext" : "if (os.equals(\"Linux\")) return new UnixSu(){\n  protected String sudoExe(){\n    return \"sudo\";\n  }\n  protected Process sudoWithPass(  ArgumentListBuilder args) throws IOException {\n    args.prepend(sudoExe(),\"-S\");\n    listener.getLogger().println(\"$ \" + Util.join(args.toList(),\" \"));\n    ProcessBuilder pb=new ProcessBuilder(args.toCommandArray());\n    Process p=pb.start();\n    PrintStream ps=new PrintStream(p.getOutputStream());\n    ps.println(rootPassword);\n    ps.println(rootPassword);\n    ps.println(rootPassword);\n    return p;\n  }\n}\n.start(listener,rootPassword);\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 103,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2099,
        "startLineNumber" : 73,
        "startColumnNumber" : 163,
        "endLineNumber" : 118,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (File.pathSeparatorChar == ';')   return newLocalChannel();\n  String os=Util.fixNull(System.getProperty(\"os.name\"));\n  if (os.equals(\"Linux\"))   return new UnixSu(){\n    protected String sudoExe(){\n      return \"sudo\";\n    }\n    protected Process sudoWithPass(    ArgumentListBuilder args) throws IOException {\n      args.prepend(sudoExe(),\"-S\");\n      listener.getLogger().println(\"$ \" + Util.join(args.toList(),\" \"));\n      ProcessBuilder pb=new ProcessBuilder(args.toCommandArray());\n      Process p=pb.start();\n      PrintStream ps=new PrintStream(p.getOutputStream());\n      ps.println(rootPassword);\n      ps.println(rootPassword);\n      ps.println(rootPassword);\n      return p;\n    }\n  }\n.start(listener,rootPassword);\n  if (os.equals(\"SunOS\"))   return new UnixSu(){\n    protected String sudoExe(){\n      return \"/usr/bin/pfexec\";\n    }\n    protected Process sudoWithPass(    ArgumentListBuilder args) throws IOException {\n      listener.getLogger().println(\"Running with embedded_su\");\n      ProcessBuilder pb=new ProcessBuilder(args.prepend(sudoExe()).toCommandArray());\n      return EmbeddedSu.startWithSu(rootUsername,rootPassword,pb);\n    }\n  }\n.start(listener,rootUsername == null ? null : rootPassword);\n  return newLocalChannel();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 196,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2694,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 118,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Returns a  {@link VirtualChannel} that's connected to the privilege-escalated environment.\n * @param listener What this method is doing (such as what process it's invoking) will be sent here.\n * @return Never null. This may represent a channel to a separate JVM, or just  {@link LocalChannel}. Close this channel and the SU environment will be shut down.\n */\npublic static VirtualChannel start(final TaskListener listener,final String rootUsername,final String rootPassword) throws IOException, InterruptedException {\n  if (File.pathSeparatorChar == ';')   return newLocalChannel();\n  String os=Util.fixNull(System.getProperty(\"os.name\"));\n  if (os.equals(\"Linux\"))   return new UnixSu(){\n    protected String sudoExe(){\n      return \"sudo\";\n    }\n    protected Process sudoWithPass(    ArgumentListBuilder args) throws IOException {\n      args.prepend(sudoExe(),\"-S\");\n      listener.getLogger().println(\"$ \" + Util.join(args.toList(),\" \"));\n      ProcessBuilder pb=new ProcessBuilder(args.toCommandArray());\n      Process p=pb.start();\n      PrintStream ps=new PrintStream(p.getOutputStream());\n      ps.println(rootPassword);\n      ps.println(rootPassword);\n      ps.println(rootPassword);\n      return p;\n    }\n  }\n.start(listener,rootPassword);\n  if (os.equals(\"SunOS\"))   return new UnixSu(){\n    protected String sudoExe(){\n      return \"/usr/bin/pfexec\";\n    }\n    protected Process sudoWithPass(    ArgumentListBuilder args) throws IOException {\n      listener.getLogger().println(\"Running with embedded_su\");\n      ProcessBuilder pb=new ProcessBuilder(args.prepend(sudoExe()).toCommandArray());\n      return EmbeddedSu.startWithSu(rootUsername,rootPassword,pb);\n    }\n  }\n.start(listener,rootUsername == null ? null : rootPassword);\n  return newLocalChannel();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 222,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 78,
        "startColumnNumber" : 11,
        "endLineNumber" : 78,
        "endColumnNumber" : 29
      },
      "nodeContext" : "os.equals(\"Linux\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "os",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 99,
      "startColumnNumber" : 11,
      "endLineNumber" : 99,
      "endColumnNumber" : 13
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 99,
        "startColumnNumber" : 11,
        "endLineNumber" : 99,
        "endColumnNumber" : 29
      },
      "nodeContext" : "os.equals(\"SunOS\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 789,
        "startLineNumber" : 99,
        "startColumnNumber" : 8,
        "endLineNumber" : 112,
        "endColumnNumber" : 67
      },
      "nodeContext" : "if (os.equals(\"SunOS\")) return new UnixSu(){\n  protected String sudoExe(){\n    return \"/usr/bin/pfexec\";\n  }\n  protected Process sudoWithPass(  ArgumentListBuilder args) throws IOException {\n    listener.getLogger().println(\"Running with embedded_su\");\n    ProcessBuilder pb=new ProcessBuilder(args.prepend(sudoExe()).toCommandArray());\n    return EmbeddedSu.startWithSu(rootUsername,rootPassword,pb);\n  }\n}\n.start(listener,rootUsername == null ? null : rootPassword);\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 68,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2099,
        "startLineNumber" : 73,
        "startColumnNumber" : 163,
        "endLineNumber" : 118,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (File.pathSeparatorChar == ';')   return newLocalChannel();\n  String os=Util.fixNull(System.getProperty(\"os.name\"));\n  if (os.equals(\"Linux\"))   return new UnixSu(){\n    protected String sudoExe(){\n      return \"sudo\";\n    }\n    protected Process sudoWithPass(    ArgumentListBuilder args) throws IOException {\n      args.prepend(sudoExe(),\"-S\");\n      listener.getLogger().println(\"$ \" + Util.join(args.toList(),\" \"));\n      ProcessBuilder pb=new ProcessBuilder(args.toCommandArray());\n      Process p=pb.start();\n      PrintStream ps=new PrintStream(p.getOutputStream());\n      ps.println(rootPassword);\n      ps.println(rootPassword);\n      ps.println(rootPassword);\n      return p;\n    }\n  }\n.start(listener,rootPassword);\n  if (os.equals(\"SunOS\"))   return new UnixSu(){\n    protected String sudoExe(){\n      return \"/usr/bin/pfexec\";\n    }\n    protected Process sudoWithPass(    ArgumentListBuilder args) throws IOException {\n      listener.getLogger().println(\"Running with embedded_su\");\n      ProcessBuilder pb=new ProcessBuilder(args.prepend(sudoExe()).toCommandArray());\n      return EmbeddedSu.startWithSu(rootUsername,rootPassword,pb);\n    }\n  }\n.start(listener,rootUsername == null ? null : rootPassword);\n  return newLocalChannel();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 196,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2694,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 118,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Returns a  {@link VirtualChannel} that's connected to the privilege-escalated environment.\n * @param listener What this method is doing (such as what process it's invoking) will be sent here.\n * @return Never null. This may represent a channel to a separate JVM, or just  {@link LocalChannel}. Close this channel and the SU environment will be shut down.\n */\npublic static VirtualChannel start(final TaskListener listener,final String rootUsername,final String rootPassword) throws IOException, InterruptedException {\n  if (File.pathSeparatorChar == ';')   return newLocalChannel();\n  String os=Util.fixNull(System.getProperty(\"os.name\"));\n  if (os.equals(\"Linux\"))   return new UnixSu(){\n    protected String sudoExe(){\n      return \"sudo\";\n    }\n    protected Process sudoWithPass(    ArgumentListBuilder args) throws IOException {\n      args.prepend(sudoExe(),\"-S\");\n      listener.getLogger().println(\"$ \" + Util.join(args.toList(),\" \"));\n      ProcessBuilder pb=new ProcessBuilder(args.toCommandArray());\n      Process p=pb.start();\n      PrintStream ps=new PrintStream(p.getOutputStream());\n      ps.println(rootPassword);\n      ps.println(rootPassword);\n      ps.println(rootPassword);\n      return p;\n    }\n  }\n.start(listener,rootPassword);\n  if (os.equals(\"SunOS\"))   return new UnixSu(){\n    protected String sudoExe(){\n      return \"/usr/bin/pfexec\";\n    }\n    protected Process sudoWithPass(    ArgumentListBuilder args) throws IOException {\n      listener.getLogger().println(\"Running with embedded_su\");\n      ProcessBuilder pb=new ProcessBuilder(args.prepend(sudoExe()).toCommandArray());\n      return EmbeddedSu.startWithSu(rootUsername,rootPassword,pb);\n    }\n  }\n.start(listener,rootUsername == null ? null : rootPassword);\n  return newLocalChannel();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 222,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 99,
        "startColumnNumber" : 11,
        "endLineNumber" : 99,
        "endColumnNumber" : 29
      },
      "nodeContext" : "os.equals(\"SunOS\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 2,
    "startLineNumber" : 78,
    "startColumnNumber" : 11,
    "endLineNumber" : 78,
    "endColumnNumber" : 13
  }, {
    "charLength" : 2,
    "startLineNumber" : 99,
    "startColumnNumber" : 11,
    "endLineNumber" : 99,
    "endColumnNumber" : 13
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}