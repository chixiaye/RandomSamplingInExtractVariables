{
  "id" : 340,
  "expression" : "sourceTopicsWithNewPartitions",
  "projectName" : "apache@kafka",
  "commitID" : "539f006e65d9060cd46a4052d1b70f2312d8ca34",
  "filePath" : "/connect/mirror/src/main/java/org/apache/kafka/connect/mirror/MirrorSourceConnector.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "sourceTopicsWithNewPartitions",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 29,
      "startLineNumber" : 345,
      "startColumnNumber" : 13,
      "endLineNumber" : 345,
      "endColumnNumber" : 42
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 345,
        "startColumnNumber" : 13,
        "endLineNumber" : 345,
        "endColumnNumber" : 52
      },
      "nodeContext" : "sourceTopicsWithNewPartitions.isEmpty()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 345,
        "startColumnNumber" : 12,
        "endLineNumber" : 345,
        "endColumnNumber" : 52
      },
      "nodeContext" : "!sourceTopicsWithNewPartitions.isEmpty()",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 501,
        "startLineNumber" : 345,
        "startColumnNumber" : 8,
        "endLineNumber" : 350,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!sourceTopicsWithNewPartitions.isEmpty()) {\n  Map<String,NewPartitions> newTargetPartitions=sourceTopicsWithNewPartitions.entrySet().stream().collect(Collectors.toMap(sourceTopicAndPartitionCount -> sourceToRemoteTopics.get(sourceTopicAndPartitionCount.getKey()),sourceTopicAndPartitionCount -> NewPartitions.increaseTo(sourceTopicAndPartitionCount.getValue().intValue())));\n  createNewPartitions(newTargetPartitions);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 50,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2629,
        "startLineNumber" : 311,
        "startColumnNumber" : 91,
        "endLineNumber" : 351,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,Long> sourceTopicToPartitionCounts=knownSourceTopicPartitions.stream().collect(Collectors.groupingBy(TopicPartition::topic,Collectors.counting())).entrySet().stream().collect(Collectors.toMap(Entry::getKey,Entry::getValue));\n  Map<String,Long> targetTopicToPartitionCounts=knownTargetTopicPartitions.stream().collect(Collectors.groupingBy(TopicPartition::topic,Collectors.counting())).entrySet().stream().collect(Collectors.toMap(Entry::getKey,Entry::getValue));\n  Set<String> knownSourceTopics=sourceTopicToPartitionCounts.keySet();\n  Set<String> knownTargetTopics=targetTopicToPartitionCounts.keySet();\n  Map<String,String> sourceToRemoteTopics=knownSourceTopics.stream().collect(Collectors.toMap(Function.identity(),this::formatRemoteTopic));\n  Map<Boolean,Set<String>> partitionedSourceTopics=knownSourceTopics.stream().collect(Collectors.partitioningBy(sourceTopic -> knownTargetTopics.contains(sourceToRemoteTopics.get(sourceTopic)),Collectors.toSet()));\n  Set<String> existingSourceTopics=partitionedSourceTopics.get(true);\n  Set<String> newSourceTopics=partitionedSourceTopics.get(false);\n  if (!newSourceTopics.isEmpty())   createNewTopics(newSourceTopics,sourceTopicToPartitionCounts);\n  Map<String,Long> sourceTopicsWithNewPartitions=existingSourceTopics.stream().filter(sourceTopic -> {\n    String targetTopic=sourceToRemoteTopics.get(sourceTopic);\n    return sourceTopicToPartitionCounts.get(sourceTopic) > targetTopicToPartitionCounts.get(targetTopic);\n  }\n).collect(Collectors.toMap(Function.identity(),sourceTopicToPartitionCounts::get));\n  if (!sourceTopicsWithNewPartitions.isEmpty()) {\n    Map<String,NewPartitions> newTargetPartitions=sourceTopicsWithNewPartitions.entrySet().stream().collect(Collectors.toMap(sourceTopicAndPartitionCount -> sourceToRemoteTopics.get(sourceTopicAndPartitionCount.getKey()),sourceTopicAndPartitionCount -> NewPartitions.increaseTo(sourceTopicAndPartitionCount.getValue().intValue())));\n    createNewPartitions(newTargetPartitions);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 292,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2716,
        "startLineNumber" : 311,
        "startColumnNumber" : 4,
        "endLineNumber" : 351,
        "endColumnNumber" : 5
      },
      "nodeContext" : "void computeAndCreateTopicPartitions() throws ExecutionException, InterruptedException {\n  Map<String,Long> sourceTopicToPartitionCounts=knownSourceTopicPartitions.stream().collect(Collectors.groupingBy(TopicPartition::topic,Collectors.counting())).entrySet().stream().collect(Collectors.toMap(Entry::getKey,Entry::getValue));\n  Map<String,Long> targetTopicToPartitionCounts=knownTargetTopicPartitions.stream().collect(Collectors.groupingBy(TopicPartition::topic,Collectors.counting())).entrySet().stream().collect(Collectors.toMap(Entry::getKey,Entry::getValue));\n  Set<String> knownSourceTopics=sourceTopicToPartitionCounts.keySet();\n  Set<String> knownTargetTopics=targetTopicToPartitionCounts.keySet();\n  Map<String,String> sourceToRemoteTopics=knownSourceTopics.stream().collect(Collectors.toMap(Function.identity(),this::formatRemoteTopic));\n  Map<Boolean,Set<String>> partitionedSourceTopics=knownSourceTopics.stream().collect(Collectors.partitioningBy(sourceTopic -> knownTargetTopics.contains(sourceToRemoteTopics.get(sourceTopic)),Collectors.toSet()));\n  Set<String> existingSourceTopics=partitionedSourceTopics.get(true);\n  Set<String> newSourceTopics=partitionedSourceTopics.get(false);\n  if (!newSourceTopics.isEmpty())   createNewTopics(newSourceTopics,sourceTopicToPartitionCounts);\n  Map<String,Long> sourceTopicsWithNewPartitions=existingSourceTopics.stream().filter(sourceTopic -> {\n    String targetTopic=sourceToRemoteTopics.get(sourceTopic);\n    return sourceTopicToPartitionCounts.get(sourceTopic) > targetTopicToPartitionCounts.get(targetTopic);\n  }\n).collect(Collectors.toMap(Function.identity(),sourceTopicToPartitionCounts::get));\n  if (!sourceTopicsWithNewPartitions.isEmpty()) {\n    Map<String,NewPartitions> newTargetPartitions=sourceTopicsWithNewPartitions.entrySet().stream().collect(Collectors.toMap(sourceTopicAndPartitionCount -> sourceToRemoteTopics.get(sourceTopicAndPartitionCount.getKey()),sourceTopicAndPartitionCount -> NewPartitions.increaseTo(sourceTopicAndPartitionCount.getValue().intValue())));\n    createNewPartitions(newTargetPartitions);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 299,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 345,
        "startColumnNumber" : 12,
        "endLineNumber" : 345,
        "endColumnNumber" : 52
      },
      "nodeContext" : "!sourceTopicsWithNewPartitions.isEmpty()",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.util.Map<java.lang.String,java.lang.Long>"
  }, {
    "nodeContext" : "sourceTopicsWithNewPartitions",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 29,
      "startLineNumber" : 346,
      "startColumnNumber" : 61,
      "endLineNumber" : 346,
      "endColumnNumber" : 90
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 346,
        "startColumnNumber" : 61,
        "endLineNumber" : 346,
        "endColumnNumber" : 101
      },
      "nodeContext" : "sourceTopicsWithNewPartitions.entrySet()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 346,
        "startColumnNumber" : 61,
        "endLineNumber" : 346,
        "endColumnNumber" : 110
      },
      "nodeContext" : "sourceTopicsWithNewPartitions.entrySet().stream()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 327,
        "startLineNumber" : 346,
        "startColumnNumber" : 61,
        "endLineNumber" : 348,
        "endColumnNumber" : 134
      },
      "nodeContext" : "sourceTopicsWithNewPartitions.entrySet().stream().collect(Collectors.toMap(sourceTopicAndPartitionCount -> sourceToRemoteTopics.get(sourceTopicAndPartitionCount.getKey()),sourceTopicAndPartitionCount -> NewPartitions.increaseTo(sourceTopicAndPartitionCount.getValue().intValue())))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 30,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 349,
        "startLineNumber" : 346,
        "startColumnNumber" : 39,
        "endLineNumber" : 348,
        "endColumnNumber" : 134
      },
      "nodeContext" : "newTargetPartitions=sourceTopicsWithNewPartitions.entrySet().stream().collect(Collectors.toMap(sourceTopicAndPartitionCount -> sourceToRemoteTopics.get(sourceTopicAndPartitionCount.getKey()),sourceTopicAndPartitionCount -> NewPartitions.increaseTo(sourceTopicAndPartitionCount.getValue().intValue())))",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 32,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 377,
        "startLineNumber" : 346,
        "startColumnNumber" : 12,
        "endLineNumber" : 348,
        "endColumnNumber" : 135
      },
      "nodeContext" : "Map<String,NewPartitions> newTargetPartitions=sourceTopicsWithNewPartitions.entrySet().stream().collect(Collectors.toMap(sourceTopicAndPartitionCount -> sourceToRemoteTopics.get(sourceTopicAndPartitionCount.getKey()),sourceTopicAndPartitionCount -> NewPartitions.increaseTo(sourceTopicAndPartitionCount.getValue().intValue())));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 40,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 455,
        "startLineNumber" : 345,
        "startColumnNumber" : 54,
        "endLineNumber" : 350,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Map<String,NewPartitions> newTargetPartitions=sourceTopicsWithNewPartitions.entrySet().stream().collect(Collectors.toMap(sourceTopicAndPartitionCount -> sourceToRemoteTopics.get(sourceTopicAndPartitionCount.getKey()),sourceTopicAndPartitionCount -> NewPartitions.increaseTo(sourceTopicAndPartitionCount.getValue().intValue())));\n  createNewPartitions(newTargetPartitions);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 45,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 501,
        "startLineNumber" : 345,
        "startColumnNumber" : 8,
        "endLineNumber" : 350,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!sourceTopicsWithNewPartitions.isEmpty()) {\n  Map<String,NewPartitions> newTargetPartitions=sourceTopicsWithNewPartitions.entrySet().stream().collect(Collectors.toMap(sourceTopicAndPartitionCount -> sourceToRemoteTopics.get(sourceTopicAndPartitionCount.getKey()),sourceTopicAndPartitionCount -> NewPartitions.increaseTo(sourceTopicAndPartitionCount.getValue().intValue())));\n  createNewPartitions(newTargetPartitions);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 50,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2629,
        "startLineNumber" : 311,
        "startColumnNumber" : 91,
        "endLineNumber" : 351,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,Long> sourceTopicToPartitionCounts=knownSourceTopicPartitions.stream().collect(Collectors.groupingBy(TopicPartition::topic,Collectors.counting())).entrySet().stream().collect(Collectors.toMap(Entry::getKey,Entry::getValue));\n  Map<String,Long> targetTopicToPartitionCounts=knownTargetTopicPartitions.stream().collect(Collectors.groupingBy(TopicPartition::topic,Collectors.counting())).entrySet().stream().collect(Collectors.toMap(Entry::getKey,Entry::getValue));\n  Set<String> knownSourceTopics=sourceTopicToPartitionCounts.keySet();\n  Set<String> knownTargetTopics=targetTopicToPartitionCounts.keySet();\n  Map<String,String> sourceToRemoteTopics=knownSourceTopics.stream().collect(Collectors.toMap(Function.identity(),this::formatRemoteTopic));\n  Map<Boolean,Set<String>> partitionedSourceTopics=knownSourceTopics.stream().collect(Collectors.partitioningBy(sourceTopic -> knownTargetTopics.contains(sourceToRemoteTopics.get(sourceTopic)),Collectors.toSet()));\n  Set<String> existingSourceTopics=partitionedSourceTopics.get(true);\n  Set<String> newSourceTopics=partitionedSourceTopics.get(false);\n  if (!newSourceTopics.isEmpty())   createNewTopics(newSourceTopics,sourceTopicToPartitionCounts);\n  Map<String,Long> sourceTopicsWithNewPartitions=existingSourceTopics.stream().filter(sourceTopic -> {\n    String targetTopic=sourceToRemoteTopics.get(sourceTopic);\n    return sourceTopicToPartitionCounts.get(sourceTopic) > targetTopicToPartitionCounts.get(targetTopic);\n  }\n).collect(Collectors.toMap(Function.identity(),sourceTopicToPartitionCounts::get));\n  if (!sourceTopicsWithNewPartitions.isEmpty()) {\n    Map<String,NewPartitions> newTargetPartitions=sourceTopicsWithNewPartitions.entrySet().stream().collect(Collectors.toMap(sourceTopicAndPartitionCount -> sourceToRemoteTopics.get(sourceTopicAndPartitionCount.getKey()),sourceTopicAndPartitionCount -> NewPartitions.increaseTo(sourceTopicAndPartitionCount.getValue().intValue())));\n    createNewPartitions(newTargetPartitions);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 292,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2716,
        "startLineNumber" : 311,
        "startColumnNumber" : 4,
        "endLineNumber" : 351,
        "endColumnNumber" : 5
      },
      "nodeContext" : "void computeAndCreateTopicPartitions() throws ExecutionException, InterruptedException {\n  Map<String,Long> sourceTopicToPartitionCounts=knownSourceTopicPartitions.stream().collect(Collectors.groupingBy(TopicPartition::topic,Collectors.counting())).entrySet().stream().collect(Collectors.toMap(Entry::getKey,Entry::getValue));\n  Map<String,Long> targetTopicToPartitionCounts=knownTargetTopicPartitions.stream().collect(Collectors.groupingBy(TopicPartition::topic,Collectors.counting())).entrySet().stream().collect(Collectors.toMap(Entry::getKey,Entry::getValue));\n  Set<String> knownSourceTopics=sourceTopicToPartitionCounts.keySet();\n  Set<String> knownTargetTopics=targetTopicToPartitionCounts.keySet();\n  Map<String,String> sourceToRemoteTopics=knownSourceTopics.stream().collect(Collectors.toMap(Function.identity(),this::formatRemoteTopic));\n  Map<Boolean,Set<String>> partitionedSourceTopics=knownSourceTopics.stream().collect(Collectors.partitioningBy(sourceTopic -> knownTargetTopics.contains(sourceToRemoteTopics.get(sourceTopic)),Collectors.toSet()));\n  Set<String> existingSourceTopics=partitionedSourceTopics.get(true);\n  Set<String> newSourceTopics=partitionedSourceTopics.get(false);\n  if (!newSourceTopics.isEmpty())   createNewTopics(newSourceTopics,sourceTopicToPartitionCounts);\n  Map<String,Long> sourceTopicsWithNewPartitions=existingSourceTopics.stream().filter(sourceTopic -> {\n    String targetTopic=sourceToRemoteTopics.get(sourceTopic);\n    return sourceTopicToPartitionCounts.get(sourceTopic) > targetTopicToPartitionCounts.get(targetTopic);\n  }\n).collect(Collectors.toMap(Function.identity(),sourceTopicToPartitionCounts::get));\n  if (!sourceTopicsWithNewPartitions.isEmpty()) {\n    Map<String,NewPartitions> newTargetPartitions=sourceTopicsWithNewPartitions.entrySet().stream().collect(Collectors.toMap(sourceTopicAndPartitionCount -> sourceToRemoteTopics.get(sourceTopicAndPartitionCount.getKey()),sourceTopicAndPartitionCount -> NewPartitions.increaseTo(sourceTopicAndPartitionCount.getValue().intValue())));\n    createNewPartitions(newTargetPartitions);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 299,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 346,
        "startColumnNumber" : 61,
        "endLineNumber" : 346,
        "endColumnNumber" : 110
      },
      "nodeContext" : "sourceTopicsWithNewPartitions.entrySet().stream()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.util.Map<java.lang.String,java.lang.Long>"
  } ],
  "positionList" : [ {
    "charLength" : 29,
    "startLineNumber" : 345,
    "startColumnNumber" : 13,
    "endLineNumber" : 345,
    "endColumnNumber" : 42
  }, {
    "charLength" : 29,
    "startLineNumber" : 346,
    "startColumnNumber" : 61,
    "endLineNumber" : 346,
    "endColumnNumber" : 90
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 6
  } ]
}