{
  "id" : 274,
  "expression" : "mockedKeyValueTimestampStore.range(\"key1\",\"key2\")",
  "projectName" : "apache@kafka",
  "commitID" : "539f006e65d9060cd46a4052d1b70f2312d8ca34",
  "filePath" : "/streams/src/test/java/org/apache/kafka/streams/state/internals/ReadOnlyKeyValueStoreFacadeTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "mockedKeyValueTimestampStore.range(\"key1\",\"key2\")",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 50,
      "startLineNumber" : 69,
      "startColumnNumber" : 15,
      "endLineNumber" : 69,
      "endColumnNumber" : 65
    },
    "astNodeNumber" : 5,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 69,
        "startColumnNumber" : 8,
        "endLineNumber" : 69,
        "endColumnNumber" : 66
      },
      "nodeContext" : "expect(mockedKeyValueTimestampStore.range(\"key1\",\"key2\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 101,
        "startLineNumber" : 69,
        "startColumnNumber" : 8,
        "endLineNumber" : 69,
        "endColumnNumber" : 109
      },
      "nodeContext" : "expect(mockedKeyValueTimestampStore.range(\"key1\",\"key2\")).andReturn(mockedKeyValueTimestampIterator)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 69,
        "startColumnNumber" : 8,
        "endLineNumber" : 69,
        "endColumnNumber" : 110
      },
      "nodeContext" : "expect(mockedKeyValueTimestampStore.range(\"key1\",\"key2\")).andReturn(mockedKeyValueTimestampIterator);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 760,
        "startLineNumber" : 65,
        "startColumnNumber" : 65,
        "endLineNumber" : 76,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  expect(mockedKeyValueTimestampIterator.next()).andReturn(KeyValue.pair(\"key1\",ValueAndTimestamp.make(\"value1\",21L))).andReturn(KeyValue.pair(\"key2\",ValueAndTimestamp.make(\"value2\",42L)));\n  expect(mockedKeyValueTimestampStore.range(\"key1\",\"key2\")).andReturn(mockedKeyValueTimestampIterator);\n  replay(mockedKeyValueTimestampIterator,mockedKeyValueTimestampStore);\n  final KeyValueIterator<String,String> iterator=readOnlyKeyValueStoreFacade.range(\"key1\",\"key2\");\n  assertThat(iterator.next(),is(KeyValue.pair(\"key1\",\"value1\")));\n  assertThat(iterator.next(),is(KeyValue.pair(\"key2\",\"value2\")));\n  verify(mockedKeyValueTimestampIterator,mockedKeyValueTimestampStore);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 92,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 831,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 76,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void shouldReturnPlainKeyValuePairsForRangeIterator(){\n  expect(mockedKeyValueTimestampIterator.next()).andReturn(KeyValue.pair(\"key1\",ValueAndTimestamp.make(\"value1\",21L))).andReturn(KeyValue.pair(\"key2\",ValueAndTimestamp.make(\"value2\",42L)));\n  expect(mockedKeyValueTimestampStore.range(\"key1\",\"key2\")).andReturn(mockedKeyValueTimestampIterator);\n  replay(mockedKeyValueTimestampIterator,mockedKeyValueTimestampStore);\n  final KeyValueIterator<String,String> iterator=readOnlyKeyValueStoreFacade.range(\"key1\",\"key2\");\n  assertThat(iterator.next(),is(KeyValue.pair(\"key1\",\"value1\")));\n  assertThat(iterator.next(),is(KeyValue.pair(\"key2\",\"value2\")));\n  verify(mockedKeyValueTimestampIterator,mockedKeyValueTimestampStore);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 98,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 69,
        "startColumnNumber" : 8,
        "endLineNumber" : 69,
        "endColumnNumber" : 110
      },
      "nodeContext" : "expect(mockedKeyValueTimestampStore.range(\"key1\",\"key2\")).andReturn(mockedKeyValueTimestampIterator);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 4,
    "type" : "org.apache.kafka.streams.state.KeyValueIterator<java.lang.String,org.apache.kafka.streams.state.ValueAndTimestamp<java.lang.String>>"
  } ],
  "positionList" : [ {
    "charLength" : 50,
    "startLineNumber" : 69,
    "startColumnNumber" : 15,
    "endLineNumber" : 69,
    "endColumnNumber" : 65
  } ],
  "layoutRelationDataList" : [ ]
}