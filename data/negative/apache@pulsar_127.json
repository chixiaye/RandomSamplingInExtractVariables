{
  "id" : 127,
  "expression" : "fileDetail",
  "projectName" : "apache@pulsar",
  "commitID" : "ded806fd52f6e2f182fa02052cbd82c2a6755098",
  "filePath" : "/pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/rest/api/SinksImpl.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "fileDetail",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 176,
      "startColumnNumber" : 100,
      "endLineNumber" : 176,
      "endColumnNumber" : 110
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 176,
        "startColumnNumber" : 100,
        "endLineNumber" : 176,
        "endColumnNumber" : 118
      },
      "nodeContext" : "fileDetail == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 176,
        "startColumnNumber" : 68,
        "endLineNumber" : 176,
        "endColumnNumber" : 118
      },
      "nodeContext" : "componentPackageFile == null || fileDetail == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 176,
        "startColumnNumber" : 67,
        "endLineNumber" : 176,
        "endColumnNumber" : 119
      },
      "nodeContext" : "(componentPackageFile == null || fileDetail == null)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 176,
        "startColumnNumber" : 24,
        "endLineNumber" : 176,
        "endColumnNumber" : 119
      },
      "nodeContext" : "!isFunctionCodeBuiltin(functionDetails) && (componentPackageFile == null || fileDetail == null)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 257,
        "startLineNumber" : 176,
        "startColumnNumber" : 20,
        "endLineNumber" : 178,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (!isFunctionCodeBuiltin(functionDetails) && (componentPackageFile == null || fileDetail == null)) {\n  throw new IllegalArgumentException(ComponentTypeUtils.toString(componentType) + \" Package is not provided\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 25,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 627,
        "startLineNumber" : 170,
        "startColumnNumber" : 23,
        "endLineNumber" : 179,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  if (uploadedInputStream != null) {\n    componentPackageFile=WorkerUtils.dumpToTmpFile(uploadedInputStream);\n  }\n  functionDetails=validateUpdateRequestParams(tenant,namespace,sinkName,sinkConfig,componentPackageFile);\n  if (!isFunctionCodeBuiltin(functionDetails) && (componentPackageFile == null || fileDetail == null)) {\n    throw new IllegalArgumentException(ComponentTypeUtils.toString(componentType) + \" Package is not provided\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 48,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1679,
        "startLineNumber" : 155,
        "startColumnNumber" : 16,
        "endLineNumber" : 179,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (isPkgUrlProvided) {\n  if (hasPackageTypePrefix(sinkPkgUrl)) {\n    componentPackageFile=downloadPackageFile(sinkPkgUrl);\n  }\n else {\n    if (!Utils.isFunctionPackageUrlSupported(sinkPkgUrl)) {\n      throw new IllegalArgumentException(\"Function Package url is not valid. supported url (http/https/file)\");\n    }\n    try {\n      componentPackageFile=FunctionCommon.extractFileFromPkgURL(sinkPkgUrl);\n    }\n catch (    Exception e) {\n      throw new IllegalArgumentException(String.format(\"Encountered error \\\"%s\\\" when getting %s package from %s\",e.getMessage(),ComponentTypeUtils.toString(componentType),sinkPkgUrl));\n    }\n  }\n  functionDetails=validateUpdateRequestParams(tenant,namespace,sinkName,sinkConfig,componentPackageFile);\n}\n else {\n  if (uploadedInputStream != null) {\n    componentPackageFile=WorkerUtils.dumpToTmpFile(uploadedInputStream);\n  }\n  functionDetails=validateUpdateRequestParams(tenant,namespace,sinkName,sinkConfig,componentPackageFile);\n  if (!isFunctionCodeBuiltin(functionDetails) && (componentPackageFile == null || fileDetail == null)) {\n    throw new IllegalArgumentException(ComponentTypeUtils.toString(componentType) + \" Package is not provided\");\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 116,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1711,
        "startLineNumber" : 154,
        "startColumnNumber" : 16,
        "endLineNumber" : 180,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (isPkgUrlProvided) {\n    if (hasPackageTypePrefix(sinkPkgUrl)) {\n      componentPackageFile=downloadPackageFile(sinkPkgUrl);\n    }\n else {\n      if (!Utils.isFunctionPackageUrlSupported(sinkPkgUrl)) {\n        throw new IllegalArgumentException(\"Function Package url is not valid. supported url (http/https/file)\");\n      }\n      try {\n        componentPackageFile=FunctionCommon.extractFileFromPkgURL(sinkPkgUrl);\n      }\n catch (      Exception e) {\n        throw new IllegalArgumentException(String.format(\"Encountered error \\\"%s\\\" when getting %s package from %s\",e.getMessage(),ComponentTypeUtils.toString(componentType),sinkPkgUrl));\n      }\n    }\n    functionDetails=validateUpdateRequestParams(tenant,namespace,sinkName,sinkConfig,componentPackageFile);\n  }\n else {\n    if (uploadedInputStream != null) {\n      componentPackageFile=WorkerUtils.dumpToTmpFile(uploadedInputStream);\n    }\n    functionDetails=validateUpdateRequestParams(tenant,namespace,sinkName,sinkConfig,componentPackageFile);\n    if (!isFunctionCodeBuiltin(functionDetails) && (componentPackageFile == null || fileDetail == null)) {\n      throw new IllegalArgumentException(ComponentTypeUtils.toString(componentType) + \" Package is not provided\");\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 117,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1983,
        "startLineNumber" : 154,
        "startColumnNumber" : 12,
        "endLineNumber" : 183,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  if (isPkgUrlProvided) {\n    if (hasPackageTypePrefix(sinkPkgUrl)) {\n      componentPackageFile=downloadPackageFile(sinkPkgUrl);\n    }\n else {\n      if (!Utils.isFunctionPackageUrlSupported(sinkPkgUrl)) {\n        throw new IllegalArgumentException(\"Function Package url is not valid. supported url (http/https/file)\");\n      }\n      try {\n        componentPackageFile=FunctionCommon.extractFileFromPkgURL(sinkPkgUrl);\n      }\n catch (      Exception e) {\n        throw new IllegalArgumentException(String.format(\"Encountered error \\\"%s\\\" when getting %s package from %s\",e.getMessage(),ComponentTypeUtils.toString(componentType),sinkPkgUrl));\n      }\n    }\n    functionDetails=validateUpdateRequestParams(tenant,namespace,sinkName,sinkConfig,componentPackageFile);\n  }\n else {\n    if (uploadedInputStream != null) {\n      componentPackageFile=WorkerUtils.dumpToTmpFile(uploadedInputStream);\n    }\n    functionDetails=validateUpdateRequestParams(tenant,namespace,sinkName,sinkConfig,componentPackageFile);\n    if (!isFunctionCodeBuiltin(functionDetails) && (componentPackageFile == null || fileDetail == null)) {\n      throw new IllegalArgumentException(ComponentTypeUtils.toString(componentType) + \" Package is not provided\");\n    }\n  }\n}\n catch (Exception e) {\n  log.error(\"Invalid register {} request @ /{}/{}/{}\",ComponentTypeUtils.toString(componentType),tenant,namespace,sinkName,e);\n  throw new RestException(Response.Status.BAD_REQUEST,e.getMessage());\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 149,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5202,
        "startLineNumber" : 151,
        "startColumnNumber" : 12,
        "endLineNumber" : 237,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    if (isPkgUrlProvided) {\n      if (hasPackageTypePrefix(sinkPkgUrl)) {\n        componentPackageFile=downloadPackageFile(sinkPkgUrl);\n      }\n else {\n        if (!Utils.isFunctionPackageUrlSupported(sinkPkgUrl)) {\n          throw new IllegalArgumentException(\"Function Package url is not valid. supported url (http/https/file)\");\n        }\n        try {\n          componentPackageFile=FunctionCommon.extractFileFromPkgURL(sinkPkgUrl);\n        }\n catch (        Exception e) {\n          throw new IllegalArgumentException(String.format(\"Encountered error \\\"%s\\\" when getting %s package from %s\",e.getMessage(),ComponentTypeUtils.toString(componentType),sinkPkgUrl));\n        }\n      }\n      functionDetails=validateUpdateRequestParams(tenant,namespace,sinkName,sinkConfig,componentPackageFile);\n    }\n else {\n      if (uploadedInputStream != null) {\n        componentPackageFile=WorkerUtils.dumpToTmpFile(uploadedInputStream);\n      }\n      functionDetails=validateUpdateRequestParams(tenant,namespace,sinkName,sinkConfig,componentPackageFile);\n      if (!isFunctionCodeBuiltin(functionDetails) && (componentPackageFile == null || fileDetail == null)) {\n        throw new IllegalArgumentException(ComponentTypeUtils.toString(componentType) + \" Package is not provided\");\n      }\n    }\n  }\n catch (  Exception e) {\n    log.error(\"Invalid register {} request @ /{}/{}/{}\",ComponentTypeUtils.toString(componentType),tenant,namespace,sinkName,e);\n    throw new RestException(Response.Status.BAD_REQUEST,e.getMessage());\n  }\n  try {\n    worker().getFunctionRuntimeManager().getRuntimeFactory().doAdmissionChecks(functionDetails);\n  }\n catch (  Exception e) {\n    log.error(\"{} {}/{}/{} cannot be admitted by the runtime factory\",ComponentTypeUtils.toString(componentType),tenant,namespace,sinkName);\n    throw new RestException(Response.Status.BAD_REQUEST,String.format(\"%s %s cannot be admitted:- %s\",ComponentTypeUtils.toString(componentType),sinkName,e.getMessage()));\n  }\n  Function.FunctionMetaData.Builder functionMetaDataBuilder=Function.FunctionMetaData.newBuilder().setFunctionDetails(functionDetails).setCreateTime(System.currentTimeMillis()).setVersion(0);\n  if (worker().getWorkerConfig().isAuthenticationEnabled()) {\n    Function.FunctionDetails finalFunctionDetails=functionDetails;\n    worker().getFunctionRuntimeManager().getRuntimeFactory().getAuthProvider().ifPresent(functionAuthProvider -> {\n      if (clientAuthenticationDataHttps != null) {\n        try {\n          Optional<FunctionAuthData> functionAuthData=functionAuthProvider.cacheAuthData(finalFunctionDetails,clientAuthenticationDataHttps);\n          functionAuthData.ifPresent(authData -> functionMetaDataBuilder.setFunctionAuthSpec(Function.FunctionAuthenticationSpec.newBuilder().setData(ByteString.copyFrom(authData.getData())).build()));\n        }\n catch (        Exception e) {\n          log.error(\"Error caching authentication data for {} {}/{}/{}\",ComponentTypeUtils.toString(componentType),tenant,namespace,sinkName,e);\n          throw new RestException(Response.Status.INTERNAL_SERVER_ERROR,String.format(\"Error caching authentication data for %s %s:- %s\",ComponentTypeUtils.toString(componentType),sinkName,e.getMessage()));\n        }\n      }\n    }\n);\n  }\n  Function.PackageLocationMetaData.Builder packageLocationMetaDataBuilder;\n  try {\n    packageLocationMetaDataBuilder=getFunctionPackageLocation(functionMetaDataBuilder.build(),sinkPkgUrl,fileDetail,componentPackageFile);\n  }\n catch (  Exception e) {\n    log.error(\"Failed process {} {}/{}/{} package: \",ComponentTypeUtils.toString(componentType),tenant,namespace,sinkName,e);\n    throw new RestException(Response.Status.INTERNAL_SERVER_ERROR,e.getMessage());\n  }\n  functionMetaDataBuilder.setPackageLocation(packageLocationMetaDataBuilder);\n  updateRequest(null,functionMetaDataBuilder.build());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 407,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5470,
        "startLineNumber" : 151,
        "startColumnNumber" : 8,
        "endLineNumber" : 243,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  try {\n    if (isPkgUrlProvided) {\n      if (hasPackageTypePrefix(sinkPkgUrl)) {\n        componentPackageFile=downloadPackageFile(sinkPkgUrl);\n      }\n else {\n        if (!Utils.isFunctionPackageUrlSupported(sinkPkgUrl)) {\n          throw new IllegalArgumentException(\"Function Package url is not valid. supported url (http/https/file)\");\n        }\n        try {\n          componentPackageFile=FunctionCommon.extractFileFromPkgURL(sinkPkgUrl);\n        }\n catch (        Exception e) {\n          throw new IllegalArgumentException(String.format(\"Encountered error \\\"%s\\\" when getting %s package from %s\",e.getMessage(),ComponentTypeUtils.toString(componentType),sinkPkgUrl));\n        }\n      }\n      functionDetails=validateUpdateRequestParams(tenant,namespace,sinkName,sinkConfig,componentPackageFile);\n    }\n else {\n      if (uploadedInputStream != null) {\n        componentPackageFile=WorkerUtils.dumpToTmpFile(uploadedInputStream);\n      }\n      functionDetails=validateUpdateRequestParams(tenant,namespace,sinkName,sinkConfig,componentPackageFile);\n      if (!isFunctionCodeBuiltin(functionDetails) && (componentPackageFile == null || fileDetail == null)) {\n        throw new IllegalArgumentException(ComponentTypeUtils.toString(componentType) + \" Package is not provided\");\n      }\n    }\n  }\n catch (  Exception e) {\n    log.error(\"Invalid register {} request @ /{}/{}/{}\",ComponentTypeUtils.toString(componentType),tenant,namespace,sinkName,e);\n    throw new RestException(Response.Status.BAD_REQUEST,e.getMessage());\n  }\n  try {\n    worker().getFunctionRuntimeManager().getRuntimeFactory().doAdmissionChecks(functionDetails);\n  }\n catch (  Exception e) {\n    log.error(\"{} {}/{}/{} cannot be admitted by the runtime factory\",ComponentTypeUtils.toString(componentType),tenant,namespace,sinkName);\n    throw new RestException(Response.Status.BAD_REQUEST,String.format(\"%s %s cannot be admitted:- %s\",ComponentTypeUtils.toString(componentType),sinkName,e.getMessage()));\n  }\n  Function.FunctionMetaData.Builder functionMetaDataBuilder=Function.FunctionMetaData.newBuilder().setFunctionDetails(functionDetails).setCreateTime(System.currentTimeMillis()).setVersion(0);\n  if (worker().getWorkerConfig().isAuthenticationEnabled()) {\n    Function.FunctionDetails finalFunctionDetails=functionDetails;\n    worker().getFunctionRuntimeManager().getRuntimeFactory().getAuthProvider().ifPresent(functionAuthProvider -> {\n      if (clientAuthenticationDataHttps != null) {\n        try {\n          Optional<FunctionAuthData> functionAuthData=functionAuthProvider.cacheAuthData(finalFunctionDetails,clientAuthenticationDataHttps);\n          functionAuthData.ifPresent(authData -> functionMetaDataBuilder.setFunctionAuthSpec(Function.FunctionAuthenticationSpec.newBuilder().setData(ByteString.copyFrom(authData.getData())).build()));\n        }\n catch (        Exception e) {\n          log.error(\"Error caching authentication data for {} {}/{}/{}\",ComponentTypeUtils.toString(componentType),tenant,namespace,sinkName,e);\n          throw new RestException(Response.Status.INTERNAL_SERVER_ERROR,String.format(\"Error caching authentication data for %s %s:- %s\",ComponentTypeUtils.toString(componentType),sinkName,e.getMessage()));\n        }\n      }\n    }\n);\n  }\n  Function.PackageLocationMetaData.Builder packageLocationMetaDataBuilder;\n  try {\n    packageLocationMetaDataBuilder=getFunctionPackageLocation(functionMetaDataBuilder.build(),sinkPkgUrl,fileDetail,componentPackageFile);\n  }\n catch (  Exception e) {\n    log.error(\"Failed process {} {}/{}/{} package: \",ComponentTypeUtils.toString(componentType),tenant,namespace,sinkName,e);\n    throw new RestException(Response.Status.INTERNAL_SERVER_ERROR,e.getMessage());\n  }\n  functionMetaDataBuilder.setPackageLocation(packageLocationMetaDataBuilder);\n  updateRequest(null,functionMetaDataBuilder.build());\n}\n  finally {\n  if (componentPackageFile != null && componentPackageFile.exists()) {\n    if (sinkPkgUrl == null || !sinkPkgUrl.startsWith(Utils.FILE)) {\n      componentPackageFile.delete();\n    }\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 435,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 9202,
        "startLineNumber" : 85,
        "startColumnNumber" : 84,
        "endLineNumber" : 244,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (!isWorkerServiceAvailable()) {\n    throwUnavailableException();\n  }\n  if (tenant == null) {\n    throw new RestException(Response.Status.BAD_REQUEST,\"Tenant is not provided\");\n  }\n  if (namespace == null) {\n    throw new RestException(Response.Status.BAD_REQUEST,\"Namespace is not provided\");\n  }\n  if (sinkName == null) {\n    throw new RestException(Response.Status.BAD_REQUEST,\"Sink name is not provided\");\n  }\n  if (sinkConfig == null) {\n    throw new RestException(Response.Status.BAD_REQUEST,\"Sink config is not provided\");\n  }\n  try {\n    if (!isAuthorizedRole(tenant,namespace,clientRole,clientAuthenticationDataHttps)) {\n      log.warn(\"{}/{}/{} Client [{}] is not authorized to register {}\",tenant,namespace,sinkName,clientRole,ComponentTypeUtils.toString(componentType));\n      throw new RestException(Response.Status.UNAUTHORIZED,\"Client is not authorized to perform operation\");\n    }\n  }\n catch (  PulsarAdminException e) {\n    log.error(\"{}/{}/{} Failed to authorize [{}]\",tenant,namespace,sinkName,e);\n    throw new RestException(Response.Status.INTERNAL_SERVER_ERROR,e.getMessage());\n  }\n  try {\n    worker().getBrokerAdmin().tenants().getTenantInfo(tenant);\n    String qualifiedNamespace=tenant + \"/\" + namespace;\n    List<String> namespaces=worker().getBrokerAdmin().namespaces().getNamespaces(tenant);\n    if (namespaces != null && !namespaces.contains(qualifiedNamespace)) {\n      String qualifiedNamespaceWithCluster=String.format(\"%s/%s/%s\",tenant,worker().getWorkerConfig().getPulsarFunctionsCluster(),namespace);\n      if (namespaces != null && !namespaces.contains(qualifiedNamespaceWithCluster)) {\n        log.error(\"{}/{}/{} Namespace {} does not exist\",tenant,namespace,sinkName,namespace);\n        throw new RestException(Response.Status.BAD_REQUEST,\"Namespace does not exist\");\n      }\n    }\n  }\n catch (  PulsarAdminException.NotAuthorizedException e) {\n    log.error(\"{}/{}/{} Client [{}] is not authorized to operate {} on tenant\",tenant,namespace,sinkName,clientRole,ComponentTypeUtils.toString(componentType));\n    throw new RestException(Response.Status.UNAUTHORIZED,\"Client is not authorized to perform operation\");\n  }\ncatch (  PulsarAdminException.NotFoundException e) {\n    log.error(\"{}/{}/{} Tenant {} does not exist\",tenant,namespace,sinkName,tenant);\n    throw new RestException(Response.Status.BAD_REQUEST,\"Tenant does not exist\");\n  }\ncatch (  PulsarAdminException e) {\n    log.error(\"{}/{}/{} Issues getting tenant data\",tenant,namespace,sinkName,e);\n    throw new RestException(Response.Status.INTERNAL_SERVER_ERROR,e.getMessage());\n  }\n  FunctionMetaDataManager functionMetaDataManager=worker().getFunctionMetaDataManager();\n  if (functionMetaDataManager.containsFunction(tenant,namespace,sinkName)) {\n    log.error(\"{} {}/{}/{} already exists\",ComponentTypeUtils.toString(componentType),tenant,namespace,sinkName);\n    throw new RestException(Response.Status.BAD_REQUEST,String.format(\"%s %s already exists\",ComponentTypeUtils.toString(componentType),sinkName));\n  }\n  Function.FunctionDetails functionDetails=null;\n  boolean isPkgUrlProvided=isNotBlank(sinkPkgUrl);\n  File componentPackageFile=null;\n  try {\n    try {\n      if (isPkgUrlProvided) {\n        if (hasPackageTypePrefix(sinkPkgUrl)) {\n          componentPackageFile=downloadPackageFile(sinkPkgUrl);\n        }\n else {\n          if (!Utils.isFunctionPackageUrlSupported(sinkPkgUrl)) {\n            throw new IllegalArgumentException(\"Function Package url is not valid. supported url (http/https/file)\");\n          }\n          try {\n            componentPackageFile=FunctionCommon.extractFileFromPkgURL(sinkPkgUrl);\n          }\n catch (          Exception e) {\n            throw new IllegalArgumentException(String.format(\"Encountered error \\\"%s\\\" when getting %s package from %s\",e.getMessage(),ComponentTypeUtils.toString(componentType),sinkPkgUrl));\n          }\n        }\n        functionDetails=validateUpdateRequestParams(tenant,namespace,sinkName,sinkConfig,componentPackageFile);\n      }\n else {\n        if (uploadedInputStream != null) {\n          componentPackageFile=WorkerUtils.dumpToTmpFile(uploadedInputStream);\n        }\n        functionDetails=validateUpdateRequestParams(tenant,namespace,sinkName,sinkConfig,componentPackageFile);\n        if (!isFunctionCodeBuiltin(functionDetails) && (componentPackageFile == null || fileDetail == null)) {\n          throw new IllegalArgumentException(ComponentTypeUtils.toString(componentType) + \" Package is not provided\");\n        }\n      }\n    }\n catch (    Exception e) {\n      log.error(\"Invalid register {} request @ /{}/{}/{}\",ComponentTypeUtils.toString(componentType),tenant,namespace,sinkName,e);\n      throw new RestException(Response.Status.BAD_REQUEST,e.getMessage());\n    }\n    try {\n      worker().getFunctionRuntimeManager().getRuntimeFactory().doAdmissionChecks(functionDetails);\n    }\n catch (    Exception e) {\n      log.error(\"{} {}/{}/{} cannot be admitted by the runtime factory\",ComponentTypeUtils.toString(componentType),tenant,namespace,sinkName);\n      throw new RestException(Response.Status.BAD_REQUEST,String.format(\"%s %s cannot be admitted:- %s\",ComponentTypeUtils.toString(componentType),sinkName,e.getMessage()));\n    }\n    Function.FunctionMetaData.Builder functionMetaDataBuilder=Function.FunctionMetaData.newBuilder().setFunctionDetails(functionDetails).setCreateTime(System.currentTimeMillis()).setVersion(0);\n    if (worker().getWorkerConfig().isAuthenticationEnabled()) {\n      Function.FunctionDetails finalFunctionDetails=functionDetails;\n      worker().getFunctionRuntimeManager().getRuntimeFactory().getAuthProvider().ifPresent(functionAuthProvider -> {\n        if (clientAuthenticationDataHttps != null) {\n          try {\n            Optional<FunctionAuthData> functionAuthData=functionAuthProvider.cacheAuthData(finalFunctionDetails,clientAuthenticationDataHttps);\n            functionAuthData.ifPresent(authData -> functionMetaDataBuilder.setFunctionAuthSpec(Function.FunctionAuthenticationSpec.newBuilder().setData(ByteString.copyFrom(authData.getData())).build()));\n          }\n catch (          Exception e) {\n            log.error(\"Error caching authentication data for {} {}/{}/{}\",ComponentTypeUtils.toString(componentType),tenant,namespace,sinkName,e);\n            throw new RestException(Response.Status.INTERNAL_SERVER_ERROR,String.format(\"Error caching authentication data for %s %s:- %s\",ComponentTypeUtils.toString(componentType),sinkName,e.getMessage()));\n          }\n        }\n      }\n);\n    }\n    Function.PackageLocationMetaData.Builder packageLocationMetaDataBuilder;\n    try {\n      packageLocationMetaDataBuilder=getFunctionPackageLocation(functionMetaDataBuilder.build(),sinkPkgUrl,fileDetail,componentPackageFile);\n    }\n catch (    Exception e) {\n      log.error(\"Failed process {} {}/{}/{} package: \",ComponentTypeUtils.toString(componentType),tenant,namespace,sinkName,e);\n      throw new RestException(Response.Status.INTERNAL_SERVER_ERROR,e.getMessage());\n    }\n    functionMetaDataBuilder.setPackageLocation(packageLocationMetaDataBuilder);\n    updateRequest(null,functionMetaDataBuilder.build());\n  }\n  finally {\n    if (componentPackageFile != null && componentPackageFile.exists()) {\n      if (sinkPkgUrl == null || !sinkPkgUrl.startsWith(Utils.FILE)) {\n        componentPackageFile.delete();\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 814,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 9759,
        "startLineNumber" : 76,
        "startColumnNumber" : 4,
        "endLineNumber" : 244,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void registerSink(final String tenant,final String namespace,final String sinkName,final InputStream uploadedInputStream,final FormDataContentDisposition fileDetail,final String sinkPkgUrl,final SinkConfig sinkConfig,final String clientRole,AuthenticationDataHttps clientAuthenticationDataHttps){\n  if (!isWorkerServiceAvailable()) {\n    throwUnavailableException();\n  }\n  if (tenant == null) {\n    throw new RestException(Response.Status.BAD_REQUEST,\"Tenant is not provided\");\n  }\n  if (namespace == null) {\n    throw new RestException(Response.Status.BAD_REQUEST,\"Namespace is not provided\");\n  }\n  if (sinkName == null) {\n    throw new RestException(Response.Status.BAD_REQUEST,\"Sink name is not provided\");\n  }\n  if (sinkConfig == null) {\n    throw new RestException(Response.Status.BAD_REQUEST,\"Sink config is not provided\");\n  }\n  try {\n    if (!isAuthorizedRole(tenant,namespace,clientRole,clientAuthenticationDataHttps)) {\n      log.warn(\"{}/{}/{} Client [{}] is not authorized to register {}\",tenant,namespace,sinkName,clientRole,ComponentTypeUtils.toString(componentType));\n      throw new RestException(Response.Status.UNAUTHORIZED,\"Client is not authorized to perform operation\");\n    }\n  }\n catch (  PulsarAdminException e) {\n    log.error(\"{}/{}/{} Failed to authorize [{}]\",tenant,namespace,sinkName,e);\n    throw new RestException(Response.Status.INTERNAL_SERVER_ERROR,e.getMessage());\n  }\n  try {\n    worker().getBrokerAdmin().tenants().getTenantInfo(tenant);\n    String qualifiedNamespace=tenant + \"/\" + namespace;\n    List<String> namespaces=worker().getBrokerAdmin().namespaces().getNamespaces(tenant);\n    if (namespaces != null && !namespaces.contains(qualifiedNamespace)) {\n      String qualifiedNamespaceWithCluster=String.format(\"%s/%s/%s\",tenant,worker().getWorkerConfig().getPulsarFunctionsCluster(),namespace);\n      if (namespaces != null && !namespaces.contains(qualifiedNamespaceWithCluster)) {\n        log.error(\"{}/{}/{} Namespace {} does not exist\",tenant,namespace,sinkName,namespace);\n        throw new RestException(Response.Status.BAD_REQUEST,\"Namespace does not exist\");\n      }\n    }\n  }\n catch (  PulsarAdminException.NotAuthorizedException e) {\n    log.error(\"{}/{}/{} Client [{}] is not authorized to operate {} on tenant\",tenant,namespace,sinkName,clientRole,ComponentTypeUtils.toString(componentType));\n    throw new RestException(Response.Status.UNAUTHORIZED,\"Client is not authorized to perform operation\");\n  }\ncatch (  PulsarAdminException.NotFoundException e) {\n    log.error(\"{}/{}/{} Tenant {} does not exist\",tenant,namespace,sinkName,tenant);\n    throw new RestException(Response.Status.BAD_REQUEST,\"Tenant does not exist\");\n  }\ncatch (  PulsarAdminException e) {\n    log.error(\"{}/{}/{} Issues getting tenant data\",tenant,namespace,sinkName,e);\n    throw new RestException(Response.Status.INTERNAL_SERVER_ERROR,e.getMessage());\n  }\n  FunctionMetaDataManager functionMetaDataManager=worker().getFunctionMetaDataManager();\n  if (functionMetaDataManager.containsFunction(tenant,namespace,sinkName)) {\n    log.error(\"{} {}/{}/{} already exists\",ComponentTypeUtils.toString(componentType),tenant,namespace,sinkName);\n    throw new RestException(Response.Status.BAD_REQUEST,String.format(\"%s %s already exists\",ComponentTypeUtils.toString(componentType),sinkName));\n  }\n  Function.FunctionDetails functionDetails=null;\n  boolean isPkgUrlProvided=isNotBlank(sinkPkgUrl);\n  File componentPackageFile=null;\n  try {\n    try {\n      if (isPkgUrlProvided) {\n        if (hasPackageTypePrefix(sinkPkgUrl)) {\n          componentPackageFile=downloadPackageFile(sinkPkgUrl);\n        }\n else {\n          if (!Utils.isFunctionPackageUrlSupported(sinkPkgUrl)) {\n            throw new IllegalArgumentException(\"Function Package url is not valid. supported url (http/https/file)\");\n          }\n          try {\n            componentPackageFile=FunctionCommon.extractFileFromPkgURL(sinkPkgUrl);\n          }\n catch (          Exception e) {\n            throw new IllegalArgumentException(String.format(\"Encountered error \\\"%s\\\" when getting %s package from %s\",e.getMessage(),ComponentTypeUtils.toString(componentType),sinkPkgUrl));\n          }\n        }\n        functionDetails=validateUpdateRequestParams(tenant,namespace,sinkName,sinkConfig,componentPackageFile);\n      }\n else {\n        if (uploadedInputStream != null) {\n          componentPackageFile=WorkerUtils.dumpToTmpFile(uploadedInputStream);\n        }\n        functionDetails=validateUpdateRequestParams(tenant,namespace,sinkName,sinkConfig,componentPackageFile);\n        if (!isFunctionCodeBuiltin(functionDetails) && (componentPackageFile == null || fileDetail == null)) {\n          throw new IllegalArgumentException(ComponentTypeUtils.toString(componentType) + \" Package is not provided\");\n        }\n      }\n    }\n catch (    Exception e) {\n      log.error(\"Invalid register {} request @ /{}/{}/{}\",ComponentTypeUtils.toString(componentType),tenant,namespace,sinkName,e);\n      throw new RestException(Response.Status.BAD_REQUEST,e.getMessage());\n    }\n    try {\n      worker().getFunctionRuntimeManager().getRuntimeFactory().doAdmissionChecks(functionDetails);\n    }\n catch (    Exception e) {\n      log.error(\"{} {}/{}/{} cannot be admitted by the runtime factory\",ComponentTypeUtils.toString(componentType),tenant,namespace,sinkName);\n      throw new RestException(Response.Status.BAD_REQUEST,String.format(\"%s %s cannot be admitted:- %s\",ComponentTypeUtils.toString(componentType),sinkName,e.getMessage()));\n    }\n    Function.FunctionMetaData.Builder functionMetaDataBuilder=Function.FunctionMetaData.newBuilder().setFunctionDetails(functionDetails).setCreateTime(System.currentTimeMillis()).setVersion(0);\n    if (worker().getWorkerConfig().isAuthenticationEnabled()) {\n      Function.FunctionDetails finalFunctionDetails=functionDetails;\n      worker().getFunctionRuntimeManager().getRuntimeFactory().getAuthProvider().ifPresent(functionAuthProvider -> {\n        if (clientAuthenticationDataHttps != null) {\n          try {\n            Optional<FunctionAuthData> functionAuthData=functionAuthProvider.cacheAuthData(finalFunctionDetails,clientAuthenticationDataHttps);\n            functionAuthData.ifPresent(authData -> functionMetaDataBuilder.setFunctionAuthSpec(Function.FunctionAuthenticationSpec.newBuilder().setData(ByteString.copyFrom(authData.getData())).build()));\n          }\n catch (          Exception e) {\n            log.error(\"Error caching authentication data for {} {}/{}/{}\",ComponentTypeUtils.toString(componentType),tenant,namespace,sinkName,e);\n            throw new RestException(Response.Status.INTERNAL_SERVER_ERROR,String.format(\"Error caching authentication data for %s %s:- %s\",ComponentTypeUtils.toString(componentType),sinkName,e.getMessage()));\n          }\n        }\n      }\n);\n    }\n    Function.PackageLocationMetaData.Builder packageLocationMetaDataBuilder;\n    try {\n      packageLocationMetaDataBuilder=getFunctionPackageLocation(functionMetaDataBuilder.build(),sinkPkgUrl,fileDetail,componentPackageFile);\n    }\n catch (    Exception e) {\n      log.error(\"Failed process {} {}/{}/{} package: \",ComponentTypeUtils.toString(componentType),tenant,namespace,sinkName,e);\n      throw new RestException(Response.Status.INTERNAL_SERVER_ERROR,e.getMessage());\n    }\n    functionMetaDataBuilder.setPackageLocation(packageLocationMetaDataBuilder);\n    updateRequest(null,functionMetaDataBuilder.build());\n  }\n  finally {\n    if (componentPackageFile != null && componentPackageFile.exists()) {\n      if (sinkPkgUrl == null || !sinkPkgUrl.startsWith(Utils.FILE)) {\n        componentPackageFile.delete();\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 864,
      "astHeight" : 23
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 176,
        "startColumnNumber" : 24,
        "endLineNumber" : 176,
        "endColumnNumber" : 119
      },
      "nodeContext" : "!isFunctionCodeBuiltin(functionDetails) && (componentPackageFile == null || fileDetail == null)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.apache.pulsar.functions.worker.rest.api.FormDataContentDisposition"
  }, {
    "nodeContext" : "fileDetail",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 229,
      "startColumnNumber" : 36,
      "endLineNumber" : 229,
      "endColumnNumber" : 46
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 129,
        "startLineNumber" : 228,
        "startColumnNumber" : 49,
        "endLineNumber" : 229,
        "endColumnNumber" : 69
      },
      "nodeContext" : "getFunctionPackageLocation(functionMetaDataBuilder.build(),sinkPkgUrl,fileDetail,componentPackageFile)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 162,
        "startLineNumber" : 228,
        "startColumnNumber" : 16,
        "endLineNumber" : 229,
        "endColumnNumber" : 69
      },
      "nodeContext" : "packageLocationMetaDataBuilder=getFunctionPackageLocation(functionMetaDataBuilder.build(),sinkPkgUrl,fileDetail,componentPackageFile)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 163,
        "startLineNumber" : 228,
        "startColumnNumber" : 16,
        "endLineNumber" : 229,
        "endColumnNumber" : 70
      },
      "nodeContext" : "packageLocationMetaDataBuilder=getFunctionPackageLocation(functionMetaDataBuilder.build(),sinkPkgUrl,fileDetail,componentPackageFile);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 195,
        "startLineNumber" : 227,
        "startColumnNumber" : 16,
        "endLineNumber" : 230,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  packageLocationMetaDataBuilder=getFunctionPackageLocation(functionMetaDataBuilder.build(),sinkPkgUrl,fileDetail,componentPackageFile);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 474,
        "startLineNumber" : 227,
        "startColumnNumber" : 12,
        "endLineNumber" : 233,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  packageLocationMetaDataBuilder=getFunctionPackageLocation(functionMetaDataBuilder.build(),sinkPkgUrl,fileDetail,componentPackageFile);\n}\n catch (Exception e) {\n  log.error(\"Failed process {} {}/{}/{} package: \",ComponentTypeUtils.toString(componentType),tenant,namespace,sinkName,e);\n  throw new RestException(Response.Status.INTERNAL_SERVER_ERROR,e.getMessage());\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 44,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5202,
        "startLineNumber" : 151,
        "startColumnNumber" : 12,
        "endLineNumber" : 237,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    if (isPkgUrlProvided) {\n      if (hasPackageTypePrefix(sinkPkgUrl)) {\n        componentPackageFile=downloadPackageFile(sinkPkgUrl);\n      }\n else {\n        if (!Utils.isFunctionPackageUrlSupported(sinkPkgUrl)) {\n          throw new IllegalArgumentException(\"Function Package url is not valid. supported url (http/https/file)\");\n        }\n        try {\n          componentPackageFile=FunctionCommon.extractFileFromPkgURL(sinkPkgUrl);\n        }\n catch (        Exception e) {\n          throw new IllegalArgumentException(String.format(\"Encountered error \\\"%s\\\" when getting %s package from %s\",e.getMessage(),ComponentTypeUtils.toString(componentType),sinkPkgUrl));\n        }\n      }\n      functionDetails=validateUpdateRequestParams(tenant,namespace,sinkName,sinkConfig,componentPackageFile);\n    }\n else {\n      if (uploadedInputStream != null) {\n        componentPackageFile=WorkerUtils.dumpToTmpFile(uploadedInputStream);\n      }\n      functionDetails=validateUpdateRequestParams(tenant,namespace,sinkName,sinkConfig,componentPackageFile);\n      if (!isFunctionCodeBuiltin(functionDetails) && (componentPackageFile == null || fileDetail == null)) {\n        throw new IllegalArgumentException(ComponentTypeUtils.toString(componentType) + \" Package is not provided\");\n      }\n    }\n  }\n catch (  Exception e) {\n    log.error(\"Invalid register {} request @ /{}/{}/{}\",ComponentTypeUtils.toString(componentType),tenant,namespace,sinkName,e);\n    throw new RestException(Response.Status.BAD_REQUEST,e.getMessage());\n  }\n  try {\n    worker().getFunctionRuntimeManager().getRuntimeFactory().doAdmissionChecks(functionDetails);\n  }\n catch (  Exception e) {\n    log.error(\"{} {}/{}/{} cannot be admitted by the runtime factory\",ComponentTypeUtils.toString(componentType),tenant,namespace,sinkName);\n    throw new RestException(Response.Status.BAD_REQUEST,String.format(\"%s %s cannot be admitted:- %s\",ComponentTypeUtils.toString(componentType),sinkName,e.getMessage()));\n  }\n  Function.FunctionMetaData.Builder functionMetaDataBuilder=Function.FunctionMetaData.newBuilder().setFunctionDetails(functionDetails).setCreateTime(System.currentTimeMillis()).setVersion(0);\n  if (worker().getWorkerConfig().isAuthenticationEnabled()) {\n    Function.FunctionDetails finalFunctionDetails=functionDetails;\n    worker().getFunctionRuntimeManager().getRuntimeFactory().getAuthProvider().ifPresent(functionAuthProvider -> {\n      if (clientAuthenticationDataHttps != null) {\n        try {\n          Optional<FunctionAuthData> functionAuthData=functionAuthProvider.cacheAuthData(finalFunctionDetails,clientAuthenticationDataHttps);\n          functionAuthData.ifPresent(authData -> functionMetaDataBuilder.setFunctionAuthSpec(Function.FunctionAuthenticationSpec.newBuilder().setData(ByteString.copyFrom(authData.getData())).build()));\n        }\n catch (        Exception e) {\n          log.error(\"Error caching authentication data for {} {}/{}/{}\",ComponentTypeUtils.toString(componentType),tenant,namespace,sinkName,e);\n          throw new RestException(Response.Status.INTERNAL_SERVER_ERROR,String.format(\"Error caching authentication data for %s %s:- %s\",ComponentTypeUtils.toString(componentType),sinkName,e.getMessage()));\n        }\n      }\n    }\n);\n  }\n  Function.PackageLocationMetaData.Builder packageLocationMetaDataBuilder;\n  try {\n    packageLocationMetaDataBuilder=getFunctionPackageLocation(functionMetaDataBuilder.build(),sinkPkgUrl,fileDetail,componentPackageFile);\n  }\n catch (  Exception e) {\n    log.error(\"Failed process {} {}/{}/{} package: \",ComponentTypeUtils.toString(componentType),tenant,namespace,sinkName,e);\n    throw new RestException(Response.Status.INTERNAL_SERVER_ERROR,e.getMessage());\n  }\n  functionMetaDataBuilder.setPackageLocation(packageLocationMetaDataBuilder);\n  updateRequest(null,functionMetaDataBuilder.build());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 407,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5470,
        "startLineNumber" : 151,
        "startColumnNumber" : 8,
        "endLineNumber" : 243,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  try {\n    if (isPkgUrlProvided) {\n      if (hasPackageTypePrefix(sinkPkgUrl)) {\n        componentPackageFile=downloadPackageFile(sinkPkgUrl);\n      }\n else {\n        if (!Utils.isFunctionPackageUrlSupported(sinkPkgUrl)) {\n          throw new IllegalArgumentException(\"Function Package url is not valid. supported url (http/https/file)\");\n        }\n        try {\n          componentPackageFile=FunctionCommon.extractFileFromPkgURL(sinkPkgUrl);\n        }\n catch (        Exception e) {\n          throw new IllegalArgumentException(String.format(\"Encountered error \\\"%s\\\" when getting %s package from %s\",e.getMessage(),ComponentTypeUtils.toString(componentType),sinkPkgUrl));\n        }\n      }\n      functionDetails=validateUpdateRequestParams(tenant,namespace,sinkName,sinkConfig,componentPackageFile);\n    }\n else {\n      if (uploadedInputStream != null) {\n        componentPackageFile=WorkerUtils.dumpToTmpFile(uploadedInputStream);\n      }\n      functionDetails=validateUpdateRequestParams(tenant,namespace,sinkName,sinkConfig,componentPackageFile);\n      if (!isFunctionCodeBuiltin(functionDetails) && (componentPackageFile == null || fileDetail == null)) {\n        throw new IllegalArgumentException(ComponentTypeUtils.toString(componentType) + \" Package is not provided\");\n      }\n    }\n  }\n catch (  Exception e) {\n    log.error(\"Invalid register {} request @ /{}/{}/{}\",ComponentTypeUtils.toString(componentType),tenant,namespace,sinkName,e);\n    throw new RestException(Response.Status.BAD_REQUEST,e.getMessage());\n  }\n  try {\n    worker().getFunctionRuntimeManager().getRuntimeFactory().doAdmissionChecks(functionDetails);\n  }\n catch (  Exception e) {\n    log.error(\"{} {}/{}/{} cannot be admitted by the runtime factory\",ComponentTypeUtils.toString(componentType),tenant,namespace,sinkName);\n    throw new RestException(Response.Status.BAD_REQUEST,String.format(\"%s %s cannot be admitted:- %s\",ComponentTypeUtils.toString(componentType),sinkName,e.getMessage()));\n  }\n  Function.FunctionMetaData.Builder functionMetaDataBuilder=Function.FunctionMetaData.newBuilder().setFunctionDetails(functionDetails).setCreateTime(System.currentTimeMillis()).setVersion(0);\n  if (worker().getWorkerConfig().isAuthenticationEnabled()) {\n    Function.FunctionDetails finalFunctionDetails=functionDetails;\n    worker().getFunctionRuntimeManager().getRuntimeFactory().getAuthProvider().ifPresent(functionAuthProvider -> {\n      if (clientAuthenticationDataHttps != null) {\n        try {\n          Optional<FunctionAuthData> functionAuthData=functionAuthProvider.cacheAuthData(finalFunctionDetails,clientAuthenticationDataHttps);\n          functionAuthData.ifPresent(authData -> functionMetaDataBuilder.setFunctionAuthSpec(Function.FunctionAuthenticationSpec.newBuilder().setData(ByteString.copyFrom(authData.getData())).build()));\n        }\n catch (        Exception e) {\n          log.error(\"Error caching authentication data for {} {}/{}/{}\",ComponentTypeUtils.toString(componentType),tenant,namespace,sinkName,e);\n          throw new RestException(Response.Status.INTERNAL_SERVER_ERROR,String.format(\"Error caching authentication data for %s %s:- %s\",ComponentTypeUtils.toString(componentType),sinkName,e.getMessage()));\n        }\n      }\n    }\n);\n  }\n  Function.PackageLocationMetaData.Builder packageLocationMetaDataBuilder;\n  try {\n    packageLocationMetaDataBuilder=getFunctionPackageLocation(functionMetaDataBuilder.build(),sinkPkgUrl,fileDetail,componentPackageFile);\n  }\n catch (  Exception e) {\n    log.error(\"Failed process {} {}/{}/{} package: \",ComponentTypeUtils.toString(componentType),tenant,namespace,sinkName,e);\n    throw new RestException(Response.Status.INTERNAL_SERVER_ERROR,e.getMessage());\n  }\n  functionMetaDataBuilder.setPackageLocation(packageLocationMetaDataBuilder);\n  updateRequest(null,functionMetaDataBuilder.build());\n}\n  finally {\n  if (componentPackageFile != null && componentPackageFile.exists()) {\n    if (sinkPkgUrl == null || !sinkPkgUrl.startsWith(Utils.FILE)) {\n      componentPackageFile.delete();\n    }\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 435,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 9202,
        "startLineNumber" : 85,
        "startColumnNumber" : 84,
        "endLineNumber" : 244,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (!isWorkerServiceAvailable()) {\n    throwUnavailableException();\n  }\n  if (tenant == null) {\n    throw new RestException(Response.Status.BAD_REQUEST,\"Tenant is not provided\");\n  }\n  if (namespace == null) {\n    throw new RestException(Response.Status.BAD_REQUEST,\"Namespace is not provided\");\n  }\n  if (sinkName == null) {\n    throw new RestException(Response.Status.BAD_REQUEST,\"Sink name is not provided\");\n  }\n  if (sinkConfig == null) {\n    throw new RestException(Response.Status.BAD_REQUEST,\"Sink config is not provided\");\n  }\n  try {\n    if (!isAuthorizedRole(tenant,namespace,clientRole,clientAuthenticationDataHttps)) {\n      log.warn(\"{}/{}/{} Client [{}] is not authorized to register {}\",tenant,namespace,sinkName,clientRole,ComponentTypeUtils.toString(componentType));\n      throw new RestException(Response.Status.UNAUTHORIZED,\"Client is not authorized to perform operation\");\n    }\n  }\n catch (  PulsarAdminException e) {\n    log.error(\"{}/{}/{} Failed to authorize [{}]\",tenant,namespace,sinkName,e);\n    throw new RestException(Response.Status.INTERNAL_SERVER_ERROR,e.getMessage());\n  }\n  try {\n    worker().getBrokerAdmin().tenants().getTenantInfo(tenant);\n    String qualifiedNamespace=tenant + \"/\" + namespace;\n    List<String> namespaces=worker().getBrokerAdmin().namespaces().getNamespaces(tenant);\n    if (namespaces != null && !namespaces.contains(qualifiedNamespace)) {\n      String qualifiedNamespaceWithCluster=String.format(\"%s/%s/%s\",tenant,worker().getWorkerConfig().getPulsarFunctionsCluster(),namespace);\n      if (namespaces != null && !namespaces.contains(qualifiedNamespaceWithCluster)) {\n        log.error(\"{}/{}/{} Namespace {} does not exist\",tenant,namespace,sinkName,namespace);\n        throw new RestException(Response.Status.BAD_REQUEST,\"Namespace does not exist\");\n      }\n    }\n  }\n catch (  PulsarAdminException.NotAuthorizedException e) {\n    log.error(\"{}/{}/{} Client [{}] is not authorized to operate {} on tenant\",tenant,namespace,sinkName,clientRole,ComponentTypeUtils.toString(componentType));\n    throw new RestException(Response.Status.UNAUTHORIZED,\"Client is not authorized to perform operation\");\n  }\ncatch (  PulsarAdminException.NotFoundException e) {\n    log.error(\"{}/{}/{} Tenant {} does not exist\",tenant,namespace,sinkName,tenant);\n    throw new RestException(Response.Status.BAD_REQUEST,\"Tenant does not exist\");\n  }\ncatch (  PulsarAdminException e) {\n    log.error(\"{}/{}/{} Issues getting tenant data\",tenant,namespace,sinkName,e);\n    throw new RestException(Response.Status.INTERNAL_SERVER_ERROR,e.getMessage());\n  }\n  FunctionMetaDataManager functionMetaDataManager=worker().getFunctionMetaDataManager();\n  if (functionMetaDataManager.containsFunction(tenant,namespace,sinkName)) {\n    log.error(\"{} {}/{}/{} already exists\",ComponentTypeUtils.toString(componentType),tenant,namespace,sinkName);\n    throw new RestException(Response.Status.BAD_REQUEST,String.format(\"%s %s already exists\",ComponentTypeUtils.toString(componentType),sinkName));\n  }\n  Function.FunctionDetails functionDetails=null;\n  boolean isPkgUrlProvided=isNotBlank(sinkPkgUrl);\n  File componentPackageFile=null;\n  try {\n    try {\n      if (isPkgUrlProvided) {\n        if (hasPackageTypePrefix(sinkPkgUrl)) {\n          componentPackageFile=downloadPackageFile(sinkPkgUrl);\n        }\n else {\n          if (!Utils.isFunctionPackageUrlSupported(sinkPkgUrl)) {\n            throw new IllegalArgumentException(\"Function Package url is not valid. supported url (http/https/file)\");\n          }\n          try {\n            componentPackageFile=FunctionCommon.extractFileFromPkgURL(sinkPkgUrl);\n          }\n catch (          Exception e) {\n            throw new IllegalArgumentException(String.format(\"Encountered error \\\"%s\\\" when getting %s package from %s\",e.getMessage(),ComponentTypeUtils.toString(componentType),sinkPkgUrl));\n          }\n        }\n        functionDetails=validateUpdateRequestParams(tenant,namespace,sinkName,sinkConfig,componentPackageFile);\n      }\n else {\n        if (uploadedInputStream != null) {\n          componentPackageFile=WorkerUtils.dumpToTmpFile(uploadedInputStream);\n        }\n        functionDetails=validateUpdateRequestParams(tenant,namespace,sinkName,sinkConfig,componentPackageFile);\n        if (!isFunctionCodeBuiltin(functionDetails) && (componentPackageFile == null || fileDetail == null)) {\n          throw new IllegalArgumentException(ComponentTypeUtils.toString(componentType) + \" Package is not provided\");\n        }\n      }\n    }\n catch (    Exception e) {\n      log.error(\"Invalid register {} request @ /{}/{}/{}\",ComponentTypeUtils.toString(componentType),tenant,namespace,sinkName,e);\n      throw new RestException(Response.Status.BAD_REQUEST,e.getMessage());\n    }\n    try {\n      worker().getFunctionRuntimeManager().getRuntimeFactory().doAdmissionChecks(functionDetails);\n    }\n catch (    Exception e) {\n      log.error(\"{} {}/{}/{} cannot be admitted by the runtime factory\",ComponentTypeUtils.toString(componentType),tenant,namespace,sinkName);\n      throw new RestException(Response.Status.BAD_REQUEST,String.format(\"%s %s cannot be admitted:- %s\",ComponentTypeUtils.toString(componentType),sinkName,e.getMessage()));\n    }\n    Function.FunctionMetaData.Builder functionMetaDataBuilder=Function.FunctionMetaData.newBuilder().setFunctionDetails(functionDetails).setCreateTime(System.currentTimeMillis()).setVersion(0);\n    if (worker().getWorkerConfig().isAuthenticationEnabled()) {\n      Function.FunctionDetails finalFunctionDetails=functionDetails;\n      worker().getFunctionRuntimeManager().getRuntimeFactory().getAuthProvider().ifPresent(functionAuthProvider -> {\n        if (clientAuthenticationDataHttps != null) {\n          try {\n            Optional<FunctionAuthData> functionAuthData=functionAuthProvider.cacheAuthData(finalFunctionDetails,clientAuthenticationDataHttps);\n            functionAuthData.ifPresent(authData -> functionMetaDataBuilder.setFunctionAuthSpec(Function.FunctionAuthenticationSpec.newBuilder().setData(ByteString.copyFrom(authData.getData())).build()));\n          }\n catch (          Exception e) {\n            log.error(\"Error caching authentication data for {} {}/{}/{}\",ComponentTypeUtils.toString(componentType),tenant,namespace,sinkName,e);\n            throw new RestException(Response.Status.INTERNAL_SERVER_ERROR,String.format(\"Error caching authentication data for %s %s:- %s\",ComponentTypeUtils.toString(componentType),sinkName,e.getMessage()));\n          }\n        }\n      }\n);\n    }\n    Function.PackageLocationMetaData.Builder packageLocationMetaDataBuilder;\n    try {\n      packageLocationMetaDataBuilder=getFunctionPackageLocation(functionMetaDataBuilder.build(),sinkPkgUrl,fileDetail,componentPackageFile);\n    }\n catch (    Exception e) {\n      log.error(\"Failed process {} {}/{}/{} package: \",ComponentTypeUtils.toString(componentType),tenant,namespace,sinkName,e);\n      throw new RestException(Response.Status.INTERNAL_SERVER_ERROR,e.getMessage());\n    }\n    functionMetaDataBuilder.setPackageLocation(packageLocationMetaDataBuilder);\n    updateRequest(null,functionMetaDataBuilder.build());\n  }\n  finally {\n    if (componentPackageFile != null && componentPackageFile.exists()) {\n      if (sinkPkgUrl == null || !sinkPkgUrl.startsWith(Utils.FILE)) {\n        componentPackageFile.delete();\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 814,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 9759,
        "startLineNumber" : 76,
        "startColumnNumber" : 4,
        "endLineNumber" : 244,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void registerSink(final String tenant,final String namespace,final String sinkName,final InputStream uploadedInputStream,final FormDataContentDisposition fileDetail,final String sinkPkgUrl,final SinkConfig sinkConfig,final String clientRole,AuthenticationDataHttps clientAuthenticationDataHttps){\n  if (!isWorkerServiceAvailable()) {\n    throwUnavailableException();\n  }\n  if (tenant == null) {\n    throw new RestException(Response.Status.BAD_REQUEST,\"Tenant is not provided\");\n  }\n  if (namespace == null) {\n    throw new RestException(Response.Status.BAD_REQUEST,\"Namespace is not provided\");\n  }\n  if (sinkName == null) {\n    throw new RestException(Response.Status.BAD_REQUEST,\"Sink name is not provided\");\n  }\n  if (sinkConfig == null) {\n    throw new RestException(Response.Status.BAD_REQUEST,\"Sink config is not provided\");\n  }\n  try {\n    if (!isAuthorizedRole(tenant,namespace,clientRole,clientAuthenticationDataHttps)) {\n      log.warn(\"{}/{}/{} Client [{}] is not authorized to register {}\",tenant,namespace,sinkName,clientRole,ComponentTypeUtils.toString(componentType));\n      throw new RestException(Response.Status.UNAUTHORIZED,\"Client is not authorized to perform operation\");\n    }\n  }\n catch (  PulsarAdminException e) {\n    log.error(\"{}/{}/{} Failed to authorize [{}]\",tenant,namespace,sinkName,e);\n    throw new RestException(Response.Status.INTERNAL_SERVER_ERROR,e.getMessage());\n  }\n  try {\n    worker().getBrokerAdmin().tenants().getTenantInfo(tenant);\n    String qualifiedNamespace=tenant + \"/\" + namespace;\n    List<String> namespaces=worker().getBrokerAdmin().namespaces().getNamespaces(tenant);\n    if (namespaces != null && !namespaces.contains(qualifiedNamespace)) {\n      String qualifiedNamespaceWithCluster=String.format(\"%s/%s/%s\",tenant,worker().getWorkerConfig().getPulsarFunctionsCluster(),namespace);\n      if (namespaces != null && !namespaces.contains(qualifiedNamespaceWithCluster)) {\n        log.error(\"{}/{}/{} Namespace {} does not exist\",tenant,namespace,sinkName,namespace);\n        throw new RestException(Response.Status.BAD_REQUEST,\"Namespace does not exist\");\n      }\n    }\n  }\n catch (  PulsarAdminException.NotAuthorizedException e) {\n    log.error(\"{}/{}/{} Client [{}] is not authorized to operate {} on tenant\",tenant,namespace,sinkName,clientRole,ComponentTypeUtils.toString(componentType));\n    throw new RestException(Response.Status.UNAUTHORIZED,\"Client is not authorized to perform operation\");\n  }\ncatch (  PulsarAdminException.NotFoundException e) {\n    log.error(\"{}/{}/{} Tenant {} does not exist\",tenant,namespace,sinkName,tenant);\n    throw new RestException(Response.Status.BAD_REQUEST,\"Tenant does not exist\");\n  }\ncatch (  PulsarAdminException e) {\n    log.error(\"{}/{}/{} Issues getting tenant data\",tenant,namespace,sinkName,e);\n    throw new RestException(Response.Status.INTERNAL_SERVER_ERROR,e.getMessage());\n  }\n  FunctionMetaDataManager functionMetaDataManager=worker().getFunctionMetaDataManager();\n  if (functionMetaDataManager.containsFunction(tenant,namespace,sinkName)) {\n    log.error(\"{} {}/{}/{} already exists\",ComponentTypeUtils.toString(componentType),tenant,namespace,sinkName);\n    throw new RestException(Response.Status.BAD_REQUEST,String.format(\"%s %s already exists\",ComponentTypeUtils.toString(componentType),sinkName));\n  }\n  Function.FunctionDetails functionDetails=null;\n  boolean isPkgUrlProvided=isNotBlank(sinkPkgUrl);\n  File componentPackageFile=null;\n  try {\n    try {\n      if (isPkgUrlProvided) {\n        if (hasPackageTypePrefix(sinkPkgUrl)) {\n          componentPackageFile=downloadPackageFile(sinkPkgUrl);\n        }\n else {\n          if (!Utils.isFunctionPackageUrlSupported(sinkPkgUrl)) {\n            throw new IllegalArgumentException(\"Function Package url is not valid. supported url (http/https/file)\");\n          }\n          try {\n            componentPackageFile=FunctionCommon.extractFileFromPkgURL(sinkPkgUrl);\n          }\n catch (          Exception e) {\n            throw new IllegalArgumentException(String.format(\"Encountered error \\\"%s\\\" when getting %s package from %s\",e.getMessage(),ComponentTypeUtils.toString(componentType),sinkPkgUrl));\n          }\n        }\n        functionDetails=validateUpdateRequestParams(tenant,namespace,sinkName,sinkConfig,componentPackageFile);\n      }\n else {\n        if (uploadedInputStream != null) {\n          componentPackageFile=WorkerUtils.dumpToTmpFile(uploadedInputStream);\n        }\n        functionDetails=validateUpdateRequestParams(tenant,namespace,sinkName,sinkConfig,componentPackageFile);\n        if (!isFunctionCodeBuiltin(functionDetails) && (componentPackageFile == null || fileDetail == null)) {\n          throw new IllegalArgumentException(ComponentTypeUtils.toString(componentType) + \" Package is not provided\");\n        }\n      }\n    }\n catch (    Exception e) {\n      log.error(\"Invalid register {} request @ /{}/{}/{}\",ComponentTypeUtils.toString(componentType),tenant,namespace,sinkName,e);\n      throw new RestException(Response.Status.BAD_REQUEST,e.getMessage());\n    }\n    try {\n      worker().getFunctionRuntimeManager().getRuntimeFactory().doAdmissionChecks(functionDetails);\n    }\n catch (    Exception e) {\n      log.error(\"{} {}/{}/{} cannot be admitted by the runtime factory\",ComponentTypeUtils.toString(componentType),tenant,namespace,sinkName);\n      throw new RestException(Response.Status.BAD_REQUEST,String.format(\"%s %s cannot be admitted:- %s\",ComponentTypeUtils.toString(componentType),sinkName,e.getMessage()));\n    }\n    Function.FunctionMetaData.Builder functionMetaDataBuilder=Function.FunctionMetaData.newBuilder().setFunctionDetails(functionDetails).setCreateTime(System.currentTimeMillis()).setVersion(0);\n    if (worker().getWorkerConfig().isAuthenticationEnabled()) {\n      Function.FunctionDetails finalFunctionDetails=functionDetails;\n      worker().getFunctionRuntimeManager().getRuntimeFactory().getAuthProvider().ifPresent(functionAuthProvider -> {\n        if (clientAuthenticationDataHttps != null) {\n          try {\n            Optional<FunctionAuthData> functionAuthData=functionAuthProvider.cacheAuthData(finalFunctionDetails,clientAuthenticationDataHttps);\n            functionAuthData.ifPresent(authData -> functionMetaDataBuilder.setFunctionAuthSpec(Function.FunctionAuthenticationSpec.newBuilder().setData(ByteString.copyFrom(authData.getData())).build()));\n          }\n catch (          Exception e) {\n            log.error(\"Error caching authentication data for {} {}/{}/{}\",ComponentTypeUtils.toString(componentType),tenant,namespace,sinkName,e);\n            throw new RestException(Response.Status.INTERNAL_SERVER_ERROR,String.format(\"Error caching authentication data for %s %s:- %s\",ComponentTypeUtils.toString(componentType),sinkName,e.getMessage()));\n          }\n        }\n      }\n);\n    }\n    Function.PackageLocationMetaData.Builder packageLocationMetaDataBuilder;\n    try {\n      packageLocationMetaDataBuilder=getFunctionPackageLocation(functionMetaDataBuilder.build(),sinkPkgUrl,fileDetail,componentPackageFile);\n    }\n catch (    Exception e) {\n      log.error(\"Failed process {} {}/{}/{} package: \",ComponentTypeUtils.toString(componentType),tenant,namespace,sinkName,e);\n      throw new RestException(Response.Status.INTERNAL_SERVER_ERROR,e.getMessage());\n    }\n    functionMetaDataBuilder.setPackageLocation(packageLocationMetaDataBuilder);\n    updateRequest(null,functionMetaDataBuilder.build());\n  }\n  finally {\n    if (componentPackageFile != null && componentPackageFile.exists()) {\n      if (sinkPkgUrl == null || !sinkPkgUrl.startsWith(Utils.FILE)) {\n        componentPackageFile.delete();\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 864,
      "astHeight" : 23
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 129,
        "startLineNumber" : 228,
        "startColumnNumber" : 49,
        "endLineNumber" : 229,
        "endColumnNumber" : 69
      },
      "nodeContext" : "getFunctionPackageLocation(functionMetaDataBuilder.build(),sinkPkgUrl,fileDetail,componentPackageFile)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.apache.pulsar.functions.worker.rest.api.FormDataContentDisposition"
  } ],
  "positionList" : [ {
    "charLength" : 10,
    "startLineNumber" : 176,
    "startColumnNumber" : 100,
    "endLineNumber" : 176,
    "endColumnNumber" : 110
  }, {
    "charLength" : 10,
    "startLineNumber" : 229,
    "startColumnNumber" : 36,
    "endLineNumber" : 229,
    "endColumnNumber" : 46
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 9
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 5
  } ]
}