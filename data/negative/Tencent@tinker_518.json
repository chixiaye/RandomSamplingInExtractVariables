{
  "id" : 518,
  "expression" : "modZipEntry == null",
  "projectName" : "Tencent@tinker",
  "commitID" : "df9e1d29420d53a650ab73569d828a22e3cfe728",
  "filePath" : "/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/util/Utils.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "modZipEntry == null",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 187,
      "startColumnNumber" : 20,
      "endLineNumber" : 187,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 258,
        "startLineNumber" : 187,
        "startColumnNumber" : 16,
        "endLineNumber" : 191,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (modZipEntry == null) {\n  throw new TinkerPatchException(String.format(\"can't found add resource file %s from new apk file %s\",name,config.mNewApkFile.getAbsolutePath()));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 19,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 434,
        "startLineNumber" : 185,
        "startColumnNumber" : 44,
        "endLineNumber" : 193,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  TinkerZipEntry modZipEntry=newApk.getEntry(name);\n  if (modZipEntry == null) {\n    throw new TinkerPatchException(String.format(\"can't found add resource file %s from new apk file %s\",name,config.mNewApkFile.getAbsolutePath()));\n  }\n  TinkerZipUtil.extractTinkerEntry(newApk,modZipEntry,out);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 36,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 466,
        "startLineNumber" : 185,
        "startColumnNumber" : 12,
        "endLineNumber" : 193,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (String name : modifiedSet) {\n  TinkerZipEntry modZipEntry=newApk.getEntry(name);\n  if (modZipEntry == null) {\n    throw new TinkerPatchException(String.format(\"can't found add resource file %s from new apk file %s\",name,config.mNewApkFile.getAbsolutePath()));\n  }\n  TinkerZipUtil.extractTinkerEntry(newApk,modZipEntry,out);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 42,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3398,
        "startLineNumber" : 128,
        "startColumnNumber" : 12,
        "endLineNumber" : 194,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  oldApk=new TinkerZipFile(config.mOldApkFile);\n  newApk=new TinkerZipFile(newZipFile);\n  out=new TinkerZipOutputStream(new BufferedOutputStream(new FileOutputStream(output)));\n  final Enumeration<? extends TinkerZipEntry> entries=oldApk.entries();\n  while (entries.hasMoreElements()) {\n    TinkerZipEntry zipEntry=entries.nextElement();\n    if (zipEntry == null) {\n      throw new TinkerPatchException(String.format(\"zipEntry is null when get from oldApk\"));\n    }\n    String name=zipEntry.getName();\n    if (!TinkerZipUtil.validateZipEntryName(output.getParentFile(),name)) {\n      throw new IOException(\"Bad ZipEntry name: \" + name);\n    }\n    if (Utils.checkFileInPattern(config.mResFilePattern,name)) {\n      if (!deletedSet.contains(name) && !modifiedSet.contains(name) && !largeModifiedSet.contains(name)&& !name.equals(TypedValue.RES_MANIFEST)) {\n        TinkerZipUtil.extractTinkerEntry(oldApk,zipEntry,out);\n      }\n    }\n  }\n  TinkerZipEntry manifestZipEntry=oldApk.getEntry(TypedValue.RES_MANIFEST);\n  if (manifestZipEntry == null) {\n    throw new TinkerPatchException(String.format(\"can't found resource file %s from old apk file %s\",TypedValue.RES_MANIFEST,config.mOldApkFile.getAbsolutePath()));\n  }\n  TinkerZipUtil.extractTinkerEntry(oldApk,manifestZipEntry,out);\n  for (  String name : largeModifiedSet) {\n    TinkerZipEntry largeZipEntry=oldApk.getEntry(name);\n    if (largeZipEntry == null) {\n      throw new TinkerPatchException(String.format(\"can't found resource file %s from old apk file %s\",name,config.mOldApkFile.getAbsolutePath()));\n    }\n    ResDiffDecoder.LargeModeInfo largeModeInfo=largeModifiedMap.get(name);\n    TinkerZipUtil.extractLargeModifyFile(largeZipEntry,largeModeInfo.path,largeModeInfo.crc,out);\n  }\n  for (  String name : addedSet) {\n    TinkerZipEntry addZipEntry=newApk.getEntry(name);\n    if (addZipEntry == null) {\n      throw new TinkerPatchException(String.format(\"can't found add resource file %s from new apk file %s\",name,config.mNewApkFile.getAbsolutePath()));\n    }\n    TinkerZipUtil.extractTinkerEntry(newApk,addZipEntry,out);\n  }\n  for (  String name : modifiedSet) {\n    TinkerZipEntry modZipEntry=newApk.getEntry(name);\n    if (modZipEntry == null) {\n      throw new TinkerPatchException(String.format(\"can't found add resource file %s from new apk file %s\",name,config.mNewApkFile.getAbsolutePath()));\n    }\n    TinkerZipUtil.extractTinkerEntry(newApk,modZipEntry,out);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 316,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3548,
        "startLineNumber" : 128,
        "startColumnNumber" : 8,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  oldApk=new TinkerZipFile(config.mOldApkFile);\n  newApk=new TinkerZipFile(newZipFile);\n  out=new TinkerZipOutputStream(new BufferedOutputStream(new FileOutputStream(output)));\n  final Enumeration<? extends TinkerZipEntry> entries=oldApk.entries();\n  while (entries.hasMoreElements()) {\n    TinkerZipEntry zipEntry=entries.nextElement();\n    if (zipEntry == null) {\n      throw new TinkerPatchException(String.format(\"zipEntry is null when get from oldApk\"));\n    }\n    String name=zipEntry.getName();\n    if (!TinkerZipUtil.validateZipEntryName(output.getParentFile(),name)) {\n      throw new IOException(\"Bad ZipEntry name: \" + name);\n    }\n    if (Utils.checkFileInPattern(config.mResFilePattern,name)) {\n      if (!deletedSet.contains(name) && !modifiedSet.contains(name) && !largeModifiedSet.contains(name)&& !name.equals(TypedValue.RES_MANIFEST)) {\n        TinkerZipUtil.extractTinkerEntry(oldApk,zipEntry,out);\n      }\n    }\n  }\n  TinkerZipEntry manifestZipEntry=oldApk.getEntry(TypedValue.RES_MANIFEST);\n  if (manifestZipEntry == null) {\n    throw new TinkerPatchException(String.format(\"can't found resource file %s from old apk file %s\",TypedValue.RES_MANIFEST,config.mOldApkFile.getAbsolutePath()));\n  }\n  TinkerZipUtil.extractTinkerEntry(oldApk,manifestZipEntry,out);\n  for (  String name : largeModifiedSet) {\n    TinkerZipEntry largeZipEntry=oldApk.getEntry(name);\n    if (largeZipEntry == null) {\n      throw new TinkerPatchException(String.format(\"can't found resource file %s from old apk file %s\",name,config.mOldApkFile.getAbsolutePath()));\n    }\n    ResDiffDecoder.LargeModeInfo largeModeInfo=largeModifiedMap.get(name);\n    TinkerZipUtil.extractLargeModifyFile(largeZipEntry,largeModeInfo.path,largeModeInfo.crc,out);\n  }\n  for (  String name : addedSet) {\n    TinkerZipEntry addZipEntry=newApk.getEntry(name);\n    if (addZipEntry == null) {\n      throw new TinkerPatchException(String.format(\"can't found add resource file %s from new apk file %s\",name,config.mNewApkFile.getAbsolutePath()));\n    }\n    TinkerZipUtil.extractTinkerEntry(newApk,addZipEntry,out);\n  }\n  for (  String name : modifiedSet) {\n    TinkerZipEntry modZipEntry=newApk.getEntry(name);\n    if (modZipEntry == null) {\n      throw new TinkerPatchException(String.format(\"can't found add resource file %s from new apk file %s\",name,config.mNewApkFile.getAbsolutePath()));\n    }\n    TinkerZipUtil.extractTinkerEntry(newApk,modZipEntry,out);\n  }\n}\n  finally {\n  IOHelper.closeQuietly(out);\n  IOHelper.closeQuietly(oldApk);\n  IOHelper.closeQuietly(newApk);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 333,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3716,
        "startLineNumber" : 123,
        "startColumnNumber" : 155,
        "endLineNumber" : 200,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  TinkerZipFile oldApk=null;\n  TinkerZipFile newApk=null;\n  TinkerZipOutputStream out=null;\n  try {\n    oldApk=new TinkerZipFile(config.mOldApkFile);\n    newApk=new TinkerZipFile(newZipFile);\n    out=new TinkerZipOutputStream(new BufferedOutputStream(new FileOutputStream(output)));\n    final Enumeration<? extends TinkerZipEntry> entries=oldApk.entries();\n    while (entries.hasMoreElements()) {\n      TinkerZipEntry zipEntry=entries.nextElement();\n      if (zipEntry == null) {\n        throw new TinkerPatchException(String.format(\"zipEntry is null when get from oldApk\"));\n      }\n      String name=zipEntry.getName();\n      if (!TinkerZipUtil.validateZipEntryName(output.getParentFile(),name)) {\n        throw new IOException(\"Bad ZipEntry name: \" + name);\n      }\n      if (Utils.checkFileInPattern(config.mResFilePattern,name)) {\n        if (!deletedSet.contains(name) && !modifiedSet.contains(name) && !largeModifiedSet.contains(name)&& !name.equals(TypedValue.RES_MANIFEST)) {\n          TinkerZipUtil.extractTinkerEntry(oldApk,zipEntry,out);\n        }\n      }\n    }\n    TinkerZipEntry manifestZipEntry=oldApk.getEntry(TypedValue.RES_MANIFEST);\n    if (manifestZipEntry == null) {\n      throw new TinkerPatchException(String.format(\"can't found resource file %s from old apk file %s\",TypedValue.RES_MANIFEST,config.mOldApkFile.getAbsolutePath()));\n    }\n    TinkerZipUtil.extractTinkerEntry(oldApk,manifestZipEntry,out);\n    for (    String name : largeModifiedSet) {\n      TinkerZipEntry largeZipEntry=oldApk.getEntry(name);\n      if (largeZipEntry == null) {\n        throw new TinkerPatchException(String.format(\"can't found resource file %s from old apk file %s\",name,config.mOldApkFile.getAbsolutePath()));\n      }\n      ResDiffDecoder.LargeModeInfo largeModeInfo=largeModifiedMap.get(name);\n      TinkerZipUtil.extractLargeModifyFile(largeZipEntry,largeModeInfo.path,largeModeInfo.crc,out);\n    }\n    for (    String name : addedSet) {\n      TinkerZipEntry addZipEntry=newApk.getEntry(name);\n      if (addZipEntry == null) {\n        throw new TinkerPatchException(String.format(\"can't found add resource file %s from new apk file %s\",name,config.mNewApkFile.getAbsolutePath()));\n      }\n      TinkerZipUtil.extractTinkerEntry(newApk,addZipEntry,out);\n    }\n    for (    String name : modifiedSet) {\n      TinkerZipEntry modZipEntry=newApk.getEntry(name);\n      if (modZipEntry == null) {\n        throw new TinkerPatchException(String.format(\"can't found add resource file %s from new apk file %s\",name,config.mNewApkFile.getAbsolutePath()));\n      }\n      TinkerZipUtil.extractTinkerEntry(newApk,modZipEntry,out);\n    }\n  }\n  finally {\n    IOHelper.closeQuietly(out);\n    IOHelper.closeQuietly(oldApk);\n    IOHelper.closeQuietly(newApk);\n  }\n  return MD5.getMD5(output);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 357,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4086,
        "startLineNumber" : 121,
        "startColumnNumber" : 4,
        "endLineNumber" : 200,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static String genResOutputFile(File output,File newZipFile,Configuration config,ArrayList<String> addedSet,ArrayList<String> modifiedSet,ArrayList<String> deletedSet,ArrayList<String> largeModifiedSet,HashMap<String,ResDiffDecoder.LargeModeInfo> largeModifiedMap) throws IOException {\n  TinkerZipFile oldApk=null;\n  TinkerZipFile newApk=null;\n  TinkerZipOutputStream out=null;\n  try {\n    oldApk=new TinkerZipFile(config.mOldApkFile);\n    newApk=new TinkerZipFile(newZipFile);\n    out=new TinkerZipOutputStream(new BufferedOutputStream(new FileOutputStream(output)));\n    final Enumeration<? extends TinkerZipEntry> entries=oldApk.entries();\n    while (entries.hasMoreElements()) {\n      TinkerZipEntry zipEntry=entries.nextElement();\n      if (zipEntry == null) {\n        throw new TinkerPatchException(String.format(\"zipEntry is null when get from oldApk\"));\n      }\n      String name=zipEntry.getName();\n      if (!TinkerZipUtil.validateZipEntryName(output.getParentFile(),name)) {\n        throw new IOException(\"Bad ZipEntry name: \" + name);\n      }\n      if (Utils.checkFileInPattern(config.mResFilePattern,name)) {\n        if (!deletedSet.contains(name) && !modifiedSet.contains(name) && !largeModifiedSet.contains(name)&& !name.equals(TypedValue.RES_MANIFEST)) {\n          TinkerZipUtil.extractTinkerEntry(oldApk,zipEntry,out);\n        }\n      }\n    }\n    TinkerZipEntry manifestZipEntry=oldApk.getEntry(TypedValue.RES_MANIFEST);\n    if (manifestZipEntry == null) {\n      throw new TinkerPatchException(String.format(\"can't found resource file %s from old apk file %s\",TypedValue.RES_MANIFEST,config.mOldApkFile.getAbsolutePath()));\n    }\n    TinkerZipUtil.extractTinkerEntry(oldApk,manifestZipEntry,out);\n    for (    String name : largeModifiedSet) {\n      TinkerZipEntry largeZipEntry=oldApk.getEntry(name);\n      if (largeZipEntry == null) {\n        throw new TinkerPatchException(String.format(\"can't found resource file %s from old apk file %s\",name,config.mOldApkFile.getAbsolutePath()));\n      }\n      ResDiffDecoder.LargeModeInfo largeModeInfo=largeModifiedMap.get(name);\n      TinkerZipUtil.extractLargeModifyFile(largeZipEntry,largeModeInfo.path,largeModeInfo.crc,out);\n    }\n    for (    String name : addedSet) {\n      TinkerZipEntry addZipEntry=newApk.getEntry(name);\n      if (addZipEntry == null) {\n        throw new TinkerPatchException(String.format(\"can't found add resource file %s from new apk file %s\",name,config.mNewApkFile.getAbsolutePath()));\n      }\n      TinkerZipUtil.extractTinkerEntry(newApk,addZipEntry,out);\n    }\n    for (    String name : modifiedSet) {\n      TinkerZipEntry modZipEntry=newApk.getEntry(name);\n      if (modZipEntry == null) {\n        throw new TinkerPatchException(String.format(\"can't found add resource file %s from new apk file %s\",name,config.mNewApkFile.getAbsolutePath()));\n      }\n      TinkerZipUtil.extractTinkerEntry(newApk,modZipEntry,out);\n    }\n  }\n  finally {\n    IOHelper.closeQuietly(out);\n    IOHelper.closeQuietly(oldApk);\n    IOHelper.closeQuietly(newApk);\n  }\n  return MD5.getMD5(output);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 416,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 258,
        "startLineNumber" : 187,
        "startColumnNumber" : 16,
        "endLineNumber" : 191,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (modZipEntry == null) {\n  throw new TinkerPatchException(String.format(\"can't found add resource file %s from new apk file %s\",name,config.mNewApkFile.getAbsolutePath()));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 19,
      "astHeight" : 8
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 19,
    "startLineNumber" : 187,
    "startColumnNumber" : 20,
    "endLineNumber" : 187,
    "endColumnNumber" : 39
  } ],
  "layoutRelationDataList" : [ ]
}