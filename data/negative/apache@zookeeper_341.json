{
  "id" : 341,
  "expression" : "zooKeeper.state",
  "projectName" : "apache@zookeeper",
  "commitID" : "1a85483357106cf0993080a56ddd5c1e2644100c",
  "filePath" : "zookeeper/java/src/com/yahoo/zookeeper/ClientCnxn.java",
  "occurrences" : 5,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "zooKeeper.state",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 652,
      "startColumnNumber" : 19,
      "endLineNumber" : 652,
      "endColumnNumber" : 34
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,expression]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 652,
        "startColumnNumber" : 19,
        "endLineNumber" : 652,
        "endColumnNumber" : 44
      },
      "nodeContext" : "zooKeeper.state.isAlive()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3596,
        "startLineNumber" : 652,
        "startColumnNumber" : 12,
        "endLineNumber" : 730,
        "endColumnNumber" : 13
      },
      "nodeContext" : "while (zooKeeper.state.isAlive()) {\n  try {\n    if (sockKey == null) {\n      startConnect();\n      lastSend=now;\n      lastHeard=now;\n    }\n    int idleRecv=(int)(now - lastHeard);\n    int idleSend=(int)(now - lastSend);\n    int to=readTimeout - idleRecv;\n    if (zooKeeper.state != States.CONNECTED) {\n      to=connectTimeout - idleRecv;\n    }\n    if (to <= 0) {\n      throw new IOException(\"TIMED OUT\");\n    }\n    if (zooKeeper.state == States.CONNECTED) {\n      int timeToNextPing=readTimeout / 2 - idleSend;\n      if (timeToNextPing <= 0) {\n        sendPing();\n        lastSend=now;\n        enableWrite();\n      }\n else {\n        if (timeToNextPing < to) {\n          to=timeToNextPing;\n        }\n      }\n    }\n    selector.select(to);\n    Set<SelectionKey> selected;\nsynchronized (this) {\n      selected=selector.selectedKeys();\n    }\n    now=System.currentTimeMillis();\n    for (    SelectionKey k : selected) {\n      SocketChannel sc=((SocketChannel)k.channel());\n      if ((k.readyOps() & SelectionKey.OP_CONNECT) != 0) {\n        if (sc.finishConnect()) {\n          zooKeeper.state=States.CONNECTED;\n          lastHeard=now;\n          lastSend=now;\n          primeConnection(k);\n        }\n      }\n else       if ((k.readyOps() & (SelectionKey.OP_READ | SelectionKey.OP_WRITE)) != 0) {\n        if (outgoingQueue.size() > 0) {\n          lastSend=now;\n        }\n        if (doIO()) {\n          lastHeard=now;\n        }\n      }\n    }\n    if (zooKeeper.state == States.CONNECTED) {\n      if (outgoingQueue.size() > 0) {\n        enableWrite();\n      }\n else {\n        disableWrite();\n      }\n    }\n    selected.clear();\n  }\n catch (  Exception e) {\n    LOG.warn(\"Closing: \",e);\n    cleanup();\n    if (zooKeeper.state.isAlive()) {\n      waitingEvents.add(new WatcherEvent(Event.EventNone,Event.KeeperStateDisconnected,null));\n    }\n    now=System.currentTimeMillis();\n    lastHeard=now;\n    lastSend=now;\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 317,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3869,
        "startLineNumber" : 648,
        "startColumnNumber" : 26,
        "endLineNumber" : 734,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  long now=System.currentTimeMillis();\n  long lastHeard=now;\n  long lastSend=now;\n  while (zooKeeper.state.isAlive()) {\n    try {\n      if (sockKey == null) {\n        startConnect();\n        lastSend=now;\n        lastHeard=now;\n      }\n      int idleRecv=(int)(now - lastHeard);\n      int idleSend=(int)(now - lastSend);\n      int to=readTimeout - idleRecv;\n      if (zooKeeper.state != States.CONNECTED) {\n        to=connectTimeout - idleRecv;\n      }\n      if (to <= 0) {\n        throw new IOException(\"TIMED OUT\");\n      }\n      if (zooKeeper.state == States.CONNECTED) {\n        int timeToNextPing=readTimeout / 2 - idleSend;\n        if (timeToNextPing <= 0) {\n          sendPing();\n          lastSend=now;\n          enableWrite();\n        }\n else {\n          if (timeToNextPing < to) {\n            to=timeToNextPing;\n          }\n        }\n      }\n      selector.select(to);\n      Set<SelectionKey> selected;\nsynchronized (this) {\n        selected=selector.selectedKeys();\n      }\n      now=System.currentTimeMillis();\n      for (      SelectionKey k : selected) {\n        SocketChannel sc=((SocketChannel)k.channel());\n        if ((k.readyOps() & SelectionKey.OP_CONNECT) != 0) {\n          if (sc.finishConnect()) {\n            zooKeeper.state=States.CONNECTED;\n            lastHeard=now;\n            lastSend=now;\n            primeConnection(k);\n          }\n        }\n else         if ((k.readyOps() & (SelectionKey.OP_READ | SelectionKey.OP_WRITE)) != 0) {\n          if (outgoingQueue.size() > 0) {\n            lastSend=now;\n          }\n          if (doIO()) {\n            lastHeard=now;\n          }\n        }\n      }\n      if (zooKeeper.state == States.CONNECTED) {\n        if (outgoingQueue.size() > 0) {\n          enableWrite();\n        }\n else {\n          disableWrite();\n        }\n      }\n      selected.clear();\n    }\n catch (    Exception e) {\n      LOG.warn(\"Closing: \",e);\n      cleanup();\n      if (zooKeeper.state.isAlive()) {\n        waitingEvents.add(new WatcherEvent(Event.EventNone,Event.KeeperStateDisconnected,null));\n      }\n      now=System.currentTimeMillis();\n      lastHeard=now;\n      lastSend=now;\n    }\n  }\n  cleanup();\n  ZooLog.logTextTraceMessage(\"SendThread exitedloop.\",ZooLog.textTraceMask);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 346,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3905,
        "startLineNumber" : 647,
        "startColumnNumber" : 8,
        "endLineNumber" : 734,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override public void run(){\n  long now=System.currentTimeMillis();\n  long lastHeard=now;\n  long lastSend=now;\n  while (zooKeeper.state.isAlive()) {\n    try {\n      if (sockKey == null) {\n        startConnect();\n        lastSend=now;\n        lastHeard=now;\n      }\n      int idleRecv=(int)(now - lastHeard);\n      int idleSend=(int)(now - lastSend);\n      int to=readTimeout - idleRecv;\n      if (zooKeeper.state != States.CONNECTED) {\n        to=connectTimeout - idleRecv;\n      }\n      if (to <= 0) {\n        throw new IOException(\"TIMED OUT\");\n      }\n      if (zooKeeper.state == States.CONNECTED) {\n        int timeToNextPing=readTimeout / 2 - idleSend;\n        if (timeToNextPing <= 0) {\n          sendPing();\n          lastSend=now;\n          enableWrite();\n        }\n else {\n          if (timeToNextPing < to) {\n            to=timeToNextPing;\n          }\n        }\n      }\n      selector.select(to);\n      Set<SelectionKey> selected;\nsynchronized (this) {\n        selected=selector.selectedKeys();\n      }\n      now=System.currentTimeMillis();\n      for (      SelectionKey k : selected) {\n        SocketChannel sc=((SocketChannel)k.channel());\n        if ((k.readyOps() & SelectionKey.OP_CONNECT) != 0) {\n          if (sc.finishConnect()) {\n            zooKeeper.state=States.CONNECTED;\n            lastHeard=now;\n            lastSend=now;\n            primeConnection(k);\n          }\n        }\n else         if ((k.readyOps() & (SelectionKey.OP_READ | SelectionKey.OP_WRITE)) != 0) {\n          if (outgoingQueue.size() > 0) {\n            lastSend=now;\n          }\n          if (doIO()) {\n            lastHeard=now;\n          }\n        }\n      }\n      if (zooKeeper.state == States.CONNECTED) {\n        if (outgoingQueue.size() > 0) {\n          enableWrite();\n        }\n else {\n          disableWrite();\n        }\n      }\n      selected.clear();\n    }\n catch (    Exception e) {\n      LOG.warn(\"Closing: \",e);\n      cleanup();\n      if (zooKeeper.state.isAlive()) {\n        waitingEvents.add(new WatcherEvent(Event.EventNone,Event.KeeperStateDisconnected,null));\n      }\n      now=System.currentTimeMillis();\n      lastHeard=now;\n      lastSend=now;\n    }\n  }\n  cleanup();\n  ZooLog.logTextTraceMessage(\"SendThread exitedloop.\",ZooLog.textTraceMask);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 352,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,expression]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 652,
        "startColumnNumber" : 19,
        "endLineNumber" : 652,
        "endColumnNumber" : 44
      },
      "nodeContext" : "zooKeeper.state.isAlive()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "com.yahoo.zookeeper.ZooKeeper.States"
  }, {
    "nodeContext" : "zooKeeper.state",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 662,
      "startColumnNumber" : 24,
      "endLineNumber" : 662,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 662,
        "startColumnNumber" : 24,
        "endLineNumber" : 662,
        "endColumnNumber" : 59
      },
      "nodeContext" : "zooKeeper.state != States.CONNECTED",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 120,
        "startLineNumber" : 662,
        "startColumnNumber" : 20,
        "endLineNumber" : 664,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (zooKeeper.state != States.CONNECTED) {\n  to=connectTimeout - idleRecv;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3059,
        "startLineNumber" : 653,
        "startColumnNumber" : 20,
        "endLineNumber" : 718,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  if (sockKey == null) {\n    startConnect();\n    lastSend=now;\n    lastHeard=now;\n  }\n  int idleRecv=(int)(now - lastHeard);\n  int idleSend=(int)(now - lastSend);\n  int to=readTimeout - idleRecv;\n  if (zooKeeper.state != States.CONNECTED) {\n    to=connectTimeout - idleRecv;\n  }\n  if (to <= 0) {\n    throw new IOException(\"TIMED OUT\");\n  }\n  if (zooKeeper.state == States.CONNECTED) {\n    int timeToNextPing=readTimeout / 2 - idleSend;\n    if (timeToNextPing <= 0) {\n      sendPing();\n      lastSend=now;\n      enableWrite();\n    }\n else {\n      if (timeToNextPing < to) {\n        to=timeToNextPing;\n      }\n    }\n  }\n  selector.select(to);\n  Set<SelectionKey> selected;\nsynchronized (this) {\n    selected=selector.selectedKeys();\n  }\n  now=System.currentTimeMillis();\n  for (  SelectionKey k : selected) {\n    SocketChannel sc=((SocketChannel)k.channel());\n    if ((k.readyOps() & SelectionKey.OP_CONNECT) != 0) {\n      if (sc.finishConnect()) {\n        zooKeeper.state=States.CONNECTED;\n        lastHeard=now;\n        lastSend=now;\n        primeConnection(k);\n      }\n    }\n else     if ((k.readyOps() & (SelectionKey.OP_READ | SelectionKey.OP_WRITE)) != 0) {\n      if (outgoingQueue.size() > 0) {\n        lastSend=now;\n      }\n      if (doIO()) {\n        lastHeard=now;\n      }\n    }\n  }\n  if (zooKeeper.state == States.CONNECTED) {\n    if (outgoingQueue.size() > 0) {\n      enableWrite();\n    }\n else {\n      disableWrite();\n    }\n  }\n  selected.clear();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 259,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3530,
        "startLineNumber" : 653,
        "startColumnNumber" : 16,
        "endLineNumber" : 729,
        "endColumnNumber" : 17
      },
      "nodeContext" : "try {\n  if (sockKey == null) {\n    startConnect();\n    lastSend=now;\n    lastHeard=now;\n  }\n  int idleRecv=(int)(now - lastHeard);\n  int idleSend=(int)(now - lastSend);\n  int to=readTimeout - idleRecv;\n  if (zooKeeper.state != States.CONNECTED) {\n    to=connectTimeout - idleRecv;\n  }\n  if (to <= 0) {\n    throw new IOException(\"TIMED OUT\");\n  }\n  if (zooKeeper.state == States.CONNECTED) {\n    int timeToNextPing=readTimeout / 2 - idleSend;\n    if (timeToNextPing <= 0) {\n      sendPing();\n      lastSend=now;\n      enableWrite();\n    }\n else {\n      if (timeToNextPing < to) {\n        to=timeToNextPing;\n      }\n    }\n  }\n  selector.select(to);\n  Set<SelectionKey> selected;\nsynchronized (this) {\n    selected=selector.selectedKeys();\n  }\n  now=System.currentTimeMillis();\n  for (  SelectionKey k : selected) {\n    SocketChannel sc=((SocketChannel)k.channel());\n    if ((k.readyOps() & SelectionKey.OP_CONNECT) != 0) {\n      if (sc.finishConnect()) {\n        zooKeeper.state=States.CONNECTED;\n        lastHeard=now;\n        lastSend=now;\n        primeConnection(k);\n      }\n    }\n else     if ((k.readyOps() & (SelectionKey.OP_READ | SelectionKey.OP_WRITE)) != 0) {\n      if (outgoingQueue.size() > 0) {\n        lastSend=now;\n      }\n      if (doIO()) {\n        lastHeard=now;\n      }\n    }\n  }\n  if (zooKeeper.state == States.CONNECTED) {\n    if (outgoingQueue.size() > 0) {\n      enableWrite();\n    }\n else {\n      disableWrite();\n    }\n  }\n  selected.clear();\n}\n catch (Exception e) {\n  LOG.warn(\"Closing: \",e);\n  cleanup();\n  if (zooKeeper.state.isAlive()) {\n    waitingEvents.add(new WatcherEvent(Event.EventNone,Event.KeeperStateDisconnected,null));\n  }\n  now=System.currentTimeMillis();\n  lastHeard=now;\n  lastSend=now;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 310,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 3562,
        "startLineNumber" : 652,
        "startColumnNumber" : 46,
        "endLineNumber" : 730,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  try {\n    if (sockKey == null) {\n      startConnect();\n      lastSend=now;\n      lastHeard=now;\n    }\n    int idleRecv=(int)(now - lastHeard);\n    int idleSend=(int)(now - lastSend);\n    int to=readTimeout - idleRecv;\n    if (zooKeeper.state != States.CONNECTED) {\n      to=connectTimeout - idleRecv;\n    }\n    if (to <= 0) {\n      throw new IOException(\"TIMED OUT\");\n    }\n    if (zooKeeper.state == States.CONNECTED) {\n      int timeToNextPing=readTimeout / 2 - idleSend;\n      if (timeToNextPing <= 0) {\n        sendPing();\n        lastSend=now;\n        enableWrite();\n      }\n else {\n        if (timeToNextPing < to) {\n          to=timeToNextPing;\n        }\n      }\n    }\n    selector.select(to);\n    Set<SelectionKey> selected;\nsynchronized (this) {\n      selected=selector.selectedKeys();\n    }\n    now=System.currentTimeMillis();\n    for (    SelectionKey k : selected) {\n      SocketChannel sc=((SocketChannel)k.channel());\n      if ((k.readyOps() & SelectionKey.OP_CONNECT) != 0) {\n        if (sc.finishConnect()) {\n          zooKeeper.state=States.CONNECTED;\n          lastHeard=now;\n          lastSend=now;\n          primeConnection(k);\n        }\n      }\n else       if ((k.readyOps() & (SelectionKey.OP_READ | SelectionKey.OP_WRITE)) != 0) {\n        if (outgoingQueue.size() > 0) {\n          lastSend=now;\n        }\n        if (doIO()) {\n          lastHeard=now;\n        }\n      }\n    }\n    if (zooKeeper.state == States.CONNECTED) {\n      if (outgoingQueue.size() > 0) {\n        enableWrite();\n      }\n else {\n        disableWrite();\n      }\n    }\n    selected.clear();\n  }\n catch (  Exception e) {\n    LOG.warn(\"Closing: \",e);\n    cleanup();\n    if (zooKeeper.state.isAlive()) {\n      waitingEvents.add(new WatcherEvent(Event.EventNone,Event.KeeperStateDisconnected,null));\n    }\n    now=System.currentTimeMillis();\n    lastHeard=now;\n    lastSend=now;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 311,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3596,
        "startLineNumber" : 652,
        "startColumnNumber" : 12,
        "endLineNumber" : 730,
        "endColumnNumber" : 13
      },
      "nodeContext" : "while (zooKeeper.state.isAlive()) {\n  try {\n    if (sockKey == null) {\n      startConnect();\n      lastSend=now;\n      lastHeard=now;\n    }\n    int idleRecv=(int)(now - lastHeard);\n    int idleSend=(int)(now - lastSend);\n    int to=readTimeout - idleRecv;\n    if (zooKeeper.state != States.CONNECTED) {\n      to=connectTimeout - idleRecv;\n    }\n    if (to <= 0) {\n      throw new IOException(\"TIMED OUT\");\n    }\n    if (zooKeeper.state == States.CONNECTED) {\n      int timeToNextPing=readTimeout / 2 - idleSend;\n      if (timeToNextPing <= 0) {\n        sendPing();\n        lastSend=now;\n        enableWrite();\n      }\n else {\n        if (timeToNextPing < to) {\n          to=timeToNextPing;\n        }\n      }\n    }\n    selector.select(to);\n    Set<SelectionKey> selected;\nsynchronized (this) {\n      selected=selector.selectedKeys();\n    }\n    now=System.currentTimeMillis();\n    for (    SelectionKey k : selected) {\n      SocketChannel sc=((SocketChannel)k.channel());\n      if ((k.readyOps() & SelectionKey.OP_CONNECT) != 0) {\n        if (sc.finishConnect()) {\n          zooKeeper.state=States.CONNECTED;\n          lastHeard=now;\n          lastSend=now;\n          primeConnection(k);\n        }\n      }\n else       if ((k.readyOps() & (SelectionKey.OP_READ | SelectionKey.OP_WRITE)) != 0) {\n        if (outgoingQueue.size() > 0) {\n          lastSend=now;\n        }\n        if (doIO()) {\n          lastHeard=now;\n        }\n      }\n    }\n    if (zooKeeper.state == States.CONNECTED) {\n      if (outgoingQueue.size() > 0) {\n        enableWrite();\n      }\n else {\n        disableWrite();\n      }\n    }\n    selected.clear();\n  }\n catch (  Exception e) {\n    LOG.warn(\"Closing: \",e);\n    cleanup();\n    if (zooKeeper.state.isAlive()) {\n      waitingEvents.add(new WatcherEvent(Event.EventNone,Event.KeeperStateDisconnected,null));\n    }\n    now=System.currentTimeMillis();\n    lastHeard=now;\n    lastSend=now;\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 317,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3869,
        "startLineNumber" : 648,
        "startColumnNumber" : 26,
        "endLineNumber" : 734,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  long now=System.currentTimeMillis();\n  long lastHeard=now;\n  long lastSend=now;\n  while (zooKeeper.state.isAlive()) {\n    try {\n      if (sockKey == null) {\n        startConnect();\n        lastSend=now;\n        lastHeard=now;\n      }\n      int idleRecv=(int)(now - lastHeard);\n      int idleSend=(int)(now - lastSend);\n      int to=readTimeout - idleRecv;\n      if (zooKeeper.state != States.CONNECTED) {\n        to=connectTimeout - idleRecv;\n      }\n      if (to <= 0) {\n        throw new IOException(\"TIMED OUT\");\n      }\n      if (zooKeeper.state == States.CONNECTED) {\n        int timeToNextPing=readTimeout / 2 - idleSend;\n        if (timeToNextPing <= 0) {\n          sendPing();\n          lastSend=now;\n          enableWrite();\n        }\n else {\n          if (timeToNextPing < to) {\n            to=timeToNextPing;\n          }\n        }\n      }\n      selector.select(to);\n      Set<SelectionKey> selected;\nsynchronized (this) {\n        selected=selector.selectedKeys();\n      }\n      now=System.currentTimeMillis();\n      for (      SelectionKey k : selected) {\n        SocketChannel sc=((SocketChannel)k.channel());\n        if ((k.readyOps() & SelectionKey.OP_CONNECT) != 0) {\n          if (sc.finishConnect()) {\n            zooKeeper.state=States.CONNECTED;\n            lastHeard=now;\n            lastSend=now;\n            primeConnection(k);\n          }\n        }\n else         if ((k.readyOps() & (SelectionKey.OP_READ | SelectionKey.OP_WRITE)) != 0) {\n          if (outgoingQueue.size() > 0) {\n            lastSend=now;\n          }\n          if (doIO()) {\n            lastHeard=now;\n          }\n        }\n      }\n      if (zooKeeper.state == States.CONNECTED) {\n        if (outgoingQueue.size() > 0) {\n          enableWrite();\n        }\n else {\n          disableWrite();\n        }\n      }\n      selected.clear();\n    }\n catch (    Exception e) {\n      LOG.warn(\"Closing: \",e);\n      cleanup();\n      if (zooKeeper.state.isAlive()) {\n        waitingEvents.add(new WatcherEvent(Event.EventNone,Event.KeeperStateDisconnected,null));\n      }\n      now=System.currentTimeMillis();\n      lastHeard=now;\n      lastSend=now;\n    }\n  }\n  cleanup();\n  ZooLog.logTextTraceMessage(\"SendThread exitedloop.\",ZooLog.textTraceMask);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 346,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3905,
        "startLineNumber" : 647,
        "startColumnNumber" : 8,
        "endLineNumber" : 734,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override public void run(){\n  long now=System.currentTimeMillis();\n  long lastHeard=now;\n  long lastSend=now;\n  while (zooKeeper.state.isAlive()) {\n    try {\n      if (sockKey == null) {\n        startConnect();\n        lastSend=now;\n        lastHeard=now;\n      }\n      int idleRecv=(int)(now - lastHeard);\n      int idleSend=(int)(now - lastSend);\n      int to=readTimeout - idleRecv;\n      if (zooKeeper.state != States.CONNECTED) {\n        to=connectTimeout - idleRecv;\n      }\n      if (to <= 0) {\n        throw new IOException(\"TIMED OUT\");\n      }\n      if (zooKeeper.state == States.CONNECTED) {\n        int timeToNextPing=readTimeout / 2 - idleSend;\n        if (timeToNextPing <= 0) {\n          sendPing();\n          lastSend=now;\n          enableWrite();\n        }\n else {\n          if (timeToNextPing < to) {\n            to=timeToNextPing;\n          }\n        }\n      }\n      selector.select(to);\n      Set<SelectionKey> selected;\nsynchronized (this) {\n        selected=selector.selectedKeys();\n      }\n      now=System.currentTimeMillis();\n      for (      SelectionKey k : selected) {\n        SocketChannel sc=((SocketChannel)k.channel());\n        if ((k.readyOps() & SelectionKey.OP_CONNECT) != 0) {\n          if (sc.finishConnect()) {\n            zooKeeper.state=States.CONNECTED;\n            lastHeard=now;\n            lastSend=now;\n            primeConnection(k);\n          }\n        }\n else         if ((k.readyOps() & (SelectionKey.OP_READ | SelectionKey.OP_WRITE)) != 0) {\n          if (outgoingQueue.size() > 0) {\n            lastSend=now;\n          }\n          if (doIO()) {\n            lastHeard=now;\n          }\n        }\n      }\n      if (zooKeeper.state == States.CONNECTED) {\n        if (outgoingQueue.size() > 0) {\n          enableWrite();\n        }\n else {\n          disableWrite();\n        }\n      }\n      selected.clear();\n    }\n catch (    Exception e) {\n      LOG.warn(\"Closing: \",e);\n      cleanup();\n      if (zooKeeper.state.isAlive()) {\n        waitingEvents.add(new WatcherEvent(Event.EventNone,Event.KeeperStateDisconnected,null));\n      }\n      now=System.currentTimeMillis();\n      lastHeard=now;\n      lastSend=now;\n    }\n  }\n  cleanup();\n  ZooLog.logTextTraceMessage(\"SendThread exitedloop.\",ZooLog.textTraceMask);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 352,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 662,
        "startColumnNumber" : 24,
        "endLineNumber" : 662,
        "endColumnNumber" : 59
      },
      "nodeContext" : "zooKeeper.state != States.CONNECTED",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "com.yahoo.zookeeper.ZooKeeper.States"
  }, {
    "nodeContext" : "zooKeeper.state",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 668,
      "startColumnNumber" : 24,
      "endLineNumber" : 668,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 668,
        "startColumnNumber" : 24,
        "endLineNumber" : 668,
        "endColumnNumber" : 59
      },
      "nodeContext" : "zooKeeper.state == States.CONNECTED",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 510,
        "startLineNumber" : 668,
        "startColumnNumber" : 20,
        "endLineNumber" : 679,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (zooKeeper.state == States.CONNECTED) {\n  int timeToNextPing=readTimeout / 2 - idleSend;\n  if (timeToNextPing <= 0) {\n    sendPing();\n    lastSend=now;\n    enableWrite();\n  }\n else {\n    if (timeToNextPing < to) {\n      to=timeToNextPing;\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 43,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3059,
        "startLineNumber" : 653,
        "startColumnNumber" : 20,
        "endLineNumber" : 718,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  if (sockKey == null) {\n    startConnect();\n    lastSend=now;\n    lastHeard=now;\n  }\n  int idleRecv=(int)(now - lastHeard);\n  int idleSend=(int)(now - lastSend);\n  int to=readTimeout - idleRecv;\n  if (zooKeeper.state != States.CONNECTED) {\n    to=connectTimeout - idleRecv;\n  }\n  if (to <= 0) {\n    throw new IOException(\"TIMED OUT\");\n  }\n  if (zooKeeper.state == States.CONNECTED) {\n    int timeToNextPing=readTimeout / 2 - idleSend;\n    if (timeToNextPing <= 0) {\n      sendPing();\n      lastSend=now;\n      enableWrite();\n    }\n else {\n      if (timeToNextPing < to) {\n        to=timeToNextPing;\n      }\n    }\n  }\n  selector.select(to);\n  Set<SelectionKey> selected;\nsynchronized (this) {\n    selected=selector.selectedKeys();\n  }\n  now=System.currentTimeMillis();\n  for (  SelectionKey k : selected) {\n    SocketChannel sc=((SocketChannel)k.channel());\n    if ((k.readyOps() & SelectionKey.OP_CONNECT) != 0) {\n      if (sc.finishConnect()) {\n        zooKeeper.state=States.CONNECTED;\n        lastHeard=now;\n        lastSend=now;\n        primeConnection(k);\n      }\n    }\n else     if ((k.readyOps() & (SelectionKey.OP_READ | SelectionKey.OP_WRITE)) != 0) {\n      if (outgoingQueue.size() > 0) {\n        lastSend=now;\n      }\n      if (doIO()) {\n        lastHeard=now;\n      }\n    }\n  }\n  if (zooKeeper.state == States.CONNECTED) {\n    if (outgoingQueue.size() > 0) {\n      enableWrite();\n    }\n else {\n      disableWrite();\n    }\n  }\n  selected.clear();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 259,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3530,
        "startLineNumber" : 653,
        "startColumnNumber" : 16,
        "endLineNumber" : 729,
        "endColumnNumber" : 17
      },
      "nodeContext" : "try {\n  if (sockKey == null) {\n    startConnect();\n    lastSend=now;\n    lastHeard=now;\n  }\n  int idleRecv=(int)(now - lastHeard);\n  int idleSend=(int)(now - lastSend);\n  int to=readTimeout - idleRecv;\n  if (zooKeeper.state != States.CONNECTED) {\n    to=connectTimeout - idleRecv;\n  }\n  if (to <= 0) {\n    throw new IOException(\"TIMED OUT\");\n  }\n  if (zooKeeper.state == States.CONNECTED) {\n    int timeToNextPing=readTimeout / 2 - idleSend;\n    if (timeToNextPing <= 0) {\n      sendPing();\n      lastSend=now;\n      enableWrite();\n    }\n else {\n      if (timeToNextPing < to) {\n        to=timeToNextPing;\n      }\n    }\n  }\n  selector.select(to);\n  Set<SelectionKey> selected;\nsynchronized (this) {\n    selected=selector.selectedKeys();\n  }\n  now=System.currentTimeMillis();\n  for (  SelectionKey k : selected) {\n    SocketChannel sc=((SocketChannel)k.channel());\n    if ((k.readyOps() & SelectionKey.OP_CONNECT) != 0) {\n      if (sc.finishConnect()) {\n        zooKeeper.state=States.CONNECTED;\n        lastHeard=now;\n        lastSend=now;\n        primeConnection(k);\n      }\n    }\n else     if ((k.readyOps() & (SelectionKey.OP_READ | SelectionKey.OP_WRITE)) != 0) {\n      if (outgoingQueue.size() > 0) {\n        lastSend=now;\n      }\n      if (doIO()) {\n        lastHeard=now;\n      }\n    }\n  }\n  if (zooKeeper.state == States.CONNECTED) {\n    if (outgoingQueue.size() > 0) {\n      enableWrite();\n    }\n else {\n      disableWrite();\n    }\n  }\n  selected.clear();\n}\n catch (Exception e) {\n  LOG.warn(\"Closing: \",e);\n  cleanup();\n  if (zooKeeper.state.isAlive()) {\n    waitingEvents.add(new WatcherEvent(Event.EventNone,Event.KeeperStateDisconnected,null));\n  }\n  now=System.currentTimeMillis();\n  lastHeard=now;\n  lastSend=now;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 310,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 3562,
        "startLineNumber" : 652,
        "startColumnNumber" : 46,
        "endLineNumber" : 730,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  try {\n    if (sockKey == null) {\n      startConnect();\n      lastSend=now;\n      lastHeard=now;\n    }\n    int idleRecv=(int)(now - lastHeard);\n    int idleSend=(int)(now - lastSend);\n    int to=readTimeout - idleRecv;\n    if (zooKeeper.state != States.CONNECTED) {\n      to=connectTimeout - idleRecv;\n    }\n    if (to <= 0) {\n      throw new IOException(\"TIMED OUT\");\n    }\n    if (zooKeeper.state == States.CONNECTED) {\n      int timeToNextPing=readTimeout / 2 - idleSend;\n      if (timeToNextPing <= 0) {\n        sendPing();\n        lastSend=now;\n        enableWrite();\n      }\n else {\n        if (timeToNextPing < to) {\n          to=timeToNextPing;\n        }\n      }\n    }\n    selector.select(to);\n    Set<SelectionKey> selected;\nsynchronized (this) {\n      selected=selector.selectedKeys();\n    }\n    now=System.currentTimeMillis();\n    for (    SelectionKey k : selected) {\n      SocketChannel sc=((SocketChannel)k.channel());\n      if ((k.readyOps() & SelectionKey.OP_CONNECT) != 0) {\n        if (sc.finishConnect()) {\n          zooKeeper.state=States.CONNECTED;\n          lastHeard=now;\n          lastSend=now;\n          primeConnection(k);\n        }\n      }\n else       if ((k.readyOps() & (SelectionKey.OP_READ | SelectionKey.OP_WRITE)) != 0) {\n        if (outgoingQueue.size() > 0) {\n          lastSend=now;\n        }\n        if (doIO()) {\n          lastHeard=now;\n        }\n      }\n    }\n    if (zooKeeper.state == States.CONNECTED) {\n      if (outgoingQueue.size() > 0) {\n        enableWrite();\n      }\n else {\n        disableWrite();\n      }\n    }\n    selected.clear();\n  }\n catch (  Exception e) {\n    LOG.warn(\"Closing: \",e);\n    cleanup();\n    if (zooKeeper.state.isAlive()) {\n      waitingEvents.add(new WatcherEvent(Event.EventNone,Event.KeeperStateDisconnected,null));\n    }\n    now=System.currentTimeMillis();\n    lastHeard=now;\n    lastSend=now;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 311,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3596,
        "startLineNumber" : 652,
        "startColumnNumber" : 12,
        "endLineNumber" : 730,
        "endColumnNumber" : 13
      },
      "nodeContext" : "while (zooKeeper.state.isAlive()) {\n  try {\n    if (sockKey == null) {\n      startConnect();\n      lastSend=now;\n      lastHeard=now;\n    }\n    int idleRecv=(int)(now - lastHeard);\n    int idleSend=(int)(now - lastSend);\n    int to=readTimeout - idleRecv;\n    if (zooKeeper.state != States.CONNECTED) {\n      to=connectTimeout - idleRecv;\n    }\n    if (to <= 0) {\n      throw new IOException(\"TIMED OUT\");\n    }\n    if (zooKeeper.state == States.CONNECTED) {\n      int timeToNextPing=readTimeout / 2 - idleSend;\n      if (timeToNextPing <= 0) {\n        sendPing();\n        lastSend=now;\n        enableWrite();\n      }\n else {\n        if (timeToNextPing < to) {\n          to=timeToNextPing;\n        }\n      }\n    }\n    selector.select(to);\n    Set<SelectionKey> selected;\nsynchronized (this) {\n      selected=selector.selectedKeys();\n    }\n    now=System.currentTimeMillis();\n    for (    SelectionKey k : selected) {\n      SocketChannel sc=((SocketChannel)k.channel());\n      if ((k.readyOps() & SelectionKey.OP_CONNECT) != 0) {\n        if (sc.finishConnect()) {\n          zooKeeper.state=States.CONNECTED;\n          lastHeard=now;\n          lastSend=now;\n          primeConnection(k);\n        }\n      }\n else       if ((k.readyOps() & (SelectionKey.OP_READ | SelectionKey.OP_WRITE)) != 0) {\n        if (outgoingQueue.size() > 0) {\n          lastSend=now;\n        }\n        if (doIO()) {\n          lastHeard=now;\n        }\n      }\n    }\n    if (zooKeeper.state == States.CONNECTED) {\n      if (outgoingQueue.size() > 0) {\n        enableWrite();\n      }\n else {\n        disableWrite();\n      }\n    }\n    selected.clear();\n  }\n catch (  Exception e) {\n    LOG.warn(\"Closing: \",e);\n    cleanup();\n    if (zooKeeper.state.isAlive()) {\n      waitingEvents.add(new WatcherEvent(Event.EventNone,Event.KeeperStateDisconnected,null));\n    }\n    now=System.currentTimeMillis();\n    lastHeard=now;\n    lastSend=now;\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 317,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3869,
        "startLineNumber" : 648,
        "startColumnNumber" : 26,
        "endLineNumber" : 734,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  long now=System.currentTimeMillis();\n  long lastHeard=now;\n  long lastSend=now;\n  while (zooKeeper.state.isAlive()) {\n    try {\n      if (sockKey == null) {\n        startConnect();\n        lastSend=now;\n        lastHeard=now;\n      }\n      int idleRecv=(int)(now - lastHeard);\n      int idleSend=(int)(now - lastSend);\n      int to=readTimeout - idleRecv;\n      if (zooKeeper.state != States.CONNECTED) {\n        to=connectTimeout - idleRecv;\n      }\n      if (to <= 0) {\n        throw new IOException(\"TIMED OUT\");\n      }\n      if (zooKeeper.state == States.CONNECTED) {\n        int timeToNextPing=readTimeout / 2 - idleSend;\n        if (timeToNextPing <= 0) {\n          sendPing();\n          lastSend=now;\n          enableWrite();\n        }\n else {\n          if (timeToNextPing < to) {\n            to=timeToNextPing;\n          }\n        }\n      }\n      selector.select(to);\n      Set<SelectionKey> selected;\nsynchronized (this) {\n        selected=selector.selectedKeys();\n      }\n      now=System.currentTimeMillis();\n      for (      SelectionKey k : selected) {\n        SocketChannel sc=((SocketChannel)k.channel());\n        if ((k.readyOps() & SelectionKey.OP_CONNECT) != 0) {\n          if (sc.finishConnect()) {\n            zooKeeper.state=States.CONNECTED;\n            lastHeard=now;\n            lastSend=now;\n            primeConnection(k);\n          }\n        }\n else         if ((k.readyOps() & (SelectionKey.OP_READ | SelectionKey.OP_WRITE)) != 0) {\n          if (outgoingQueue.size() > 0) {\n            lastSend=now;\n          }\n          if (doIO()) {\n            lastHeard=now;\n          }\n        }\n      }\n      if (zooKeeper.state == States.CONNECTED) {\n        if (outgoingQueue.size() > 0) {\n          enableWrite();\n        }\n else {\n          disableWrite();\n        }\n      }\n      selected.clear();\n    }\n catch (    Exception e) {\n      LOG.warn(\"Closing: \",e);\n      cleanup();\n      if (zooKeeper.state.isAlive()) {\n        waitingEvents.add(new WatcherEvent(Event.EventNone,Event.KeeperStateDisconnected,null));\n      }\n      now=System.currentTimeMillis();\n      lastHeard=now;\n      lastSend=now;\n    }\n  }\n  cleanup();\n  ZooLog.logTextTraceMessage(\"SendThread exitedloop.\",ZooLog.textTraceMask);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 346,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3905,
        "startLineNumber" : 647,
        "startColumnNumber" : 8,
        "endLineNumber" : 734,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override public void run(){\n  long now=System.currentTimeMillis();\n  long lastHeard=now;\n  long lastSend=now;\n  while (zooKeeper.state.isAlive()) {\n    try {\n      if (sockKey == null) {\n        startConnect();\n        lastSend=now;\n        lastHeard=now;\n      }\n      int idleRecv=(int)(now - lastHeard);\n      int idleSend=(int)(now - lastSend);\n      int to=readTimeout - idleRecv;\n      if (zooKeeper.state != States.CONNECTED) {\n        to=connectTimeout - idleRecv;\n      }\n      if (to <= 0) {\n        throw new IOException(\"TIMED OUT\");\n      }\n      if (zooKeeper.state == States.CONNECTED) {\n        int timeToNextPing=readTimeout / 2 - idleSend;\n        if (timeToNextPing <= 0) {\n          sendPing();\n          lastSend=now;\n          enableWrite();\n        }\n else {\n          if (timeToNextPing < to) {\n            to=timeToNextPing;\n          }\n        }\n      }\n      selector.select(to);\n      Set<SelectionKey> selected;\nsynchronized (this) {\n        selected=selector.selectedKeys();\n      }\n      now=System.currentTimeMillis();\n      for (      SelectionKey k : selected) {\n        SocketChannel sc=((SocketChannel)k.channel());\n        if ((k.readyOps() & SelectionKey.OP_CONNECT) != 0) {\n          if (sc.finishConnect()) {\n            zooKeeper.state=States.CONNECTED;\n            lastHeard=now;\n            lastSend=now;\n            primeConnection(k);\n          }\n        }\n else         if ((k.readyOps() & (SelectionKey.OP_READ | SelectionKey.OP_WRITE)) != 0) {\n          if (outgoingQueue.size() > 0) {\n            lastSend=now;\n          }\n          if (doIO()) {\n            lastHeard=now;\n          }\n        }\n      }\n      if (zooKeeper.state == States.CONNECTED) {\n        if (outgoingQueue.size() > 0) {\n          enableWrite();\n        }\n else {\n          disableWrite();\n        }\n      }\n      selected.clear();\n    }\n catch (    Exception e) {\n      LOG.warn(\"Closing: \",e);\n      cleanup();\n      if (zooKeeper.state.isAlive()) {\n        waitingEvents.add(new WatcherEvent(Event.EventNone,Event.KeeperStateDisconnected,null));\n      }\n      now=System.currentTimeMillis();\n      lastHeard=now;\n      lastSend=now;\n    }\n  }\n  cleanup();\n  ZooLog.logTextTraceMessage(\"SendThread exitedloop.\",ZooLog.textTraceMask);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 352,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 668,
        "startColumnNumber" : 24,
        "endLineNumber" : 668,
        "endColumnNumber" : 59
      },
      "nodeContext" : "zooKeeper.state == States.CONNECTED",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "com.yahoo.zookeeper.ZooKeeper.States"
  }, {
    "nodeContext" : "zooKeeper.state",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 710,
      "startColumnNumber" : 24,
      "endLineNumber" : 710,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 710,
        "startColumnNumber" : 24,
        "endLineNumber" : 710,
        "endColumnNumber" : 59
      },
      "nodeContext" : "zooKeeper.state == States.CONNECTED",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 266,
        "startLineNumber" : 710,
        "startColumnNumber" : 20,
        "endLineNumber" : 716,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (zooKeeper.state == States.CONNECTED) {\n  if (outgoingQueue.size() > 0) {\n    enableWrite();\n  }\n else {\n    disableWrite();\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 23,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3059,
        "startLineNumber" : 653,
        "startColumnNumber" : 20,
        "endLineNumber" : 718,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  if (sockKey == null) {\n    startConnect();\n    lastSend=now;\n    lastHeard=now;\n  }\n  int idleRecv=(int)(now - lastHeard);\n  int idleSend=(int)(now - lastSend);\n  int to=readTimeout - idleRecv;\n  if (zooKeeper.state != States.CONNECTED) {\n    to=connectTimeout - idleRecv;\n  }\n  if (to <= 0) {\n    throw new IOException(\"TIMED OUT\");\n  }\n  if (zooKeeper.state == States.CONNECTED) {\n    int timeToNextPing=readTimeout / 2 - idleSend;\n    if (timeToNextPing <= 0) {\n      sendPing();\n      lastSend=now;\n      enableWrite();\n    }\n else {\n      if (timeToNextPing < to) {\n        to=timeToNextPing;\n      }\n    }\n  }\n  selector.select(to);\n  Set<SelectionKey> selected;\nsynchronized (this) {\n    selected=selector.selectedKeys();\n  }\n  now=System.currentTimeMillis();\n  for (  SelectionKey k : selected) {\n    SocketChannel sc=((SocketChannel)k.channel());\n    if ((k.readyOps() & SelectionKey.OP_CONNECT) != 0) {\n      if (sc.finishConnect()) {\n        zooKeeper.state=States.CONNECTED;\n        lastHeard=now;\n        lastSend=now;\n        primeConnection(k);\n      }\n    }\n else     if ((k.readyOps() & (SelectionKey.OP_READ | SelectionKey.OP_WRITE)) != 0) {\n      if (outgoingQueue.size() > 0) {\n        lastSend=now;\n      }\n      if (doIO()) {\n        lastHeard=now;\n      }\n    }\n  }\n  if (zooKeeper.state == States.CONNECTED) {\n    if (outgoingQueue.size() > 0) {\n      enableWrite();\n    }\n else {\n      disableWrite();\n    }\n  }\n  selected.clear();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 259,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3530,
        "startLineNumber" : 653,
        "startColumnNumber" : 16,
        "endLineNumber" : 729,
        "endColumnNumber" : 17
      },
      "nodeContext" : "try {\n  if (sockKey == null) {\n    startConnect();\n    lastSend=now;\n    lastHeard=now;\n  }\n  int idleRecv=(int)(now - lastHeard);\n  int idleSend=(int)(now - lastSend);\n  int to=readTimeout - idleRecv;\n  if (zooKeeper.state != States.CONNECTED) {\n    to=connectTimeout - idleRecv;\n  }\n  if (to <= 0) {\n    throw new IOException(\"TIMED OUT\");\n  }\n  if (zooKeeper.state == States.CONNECTED) {\n    int timeToNextPing=readTimeout / 2 - idleSend;\n    if (timeToNextPing <= 0) {\n      sendPing();\n      lastSend=now;\n      enableWrite();\n    }\n else {\n      if (timeToNextPing < to) {\n        to=timeToNextPing;\n      }\n    }\n  }\n  selector.select(to);\n  Set<SelectionKey> selected;\nsynchronized (this) {\n    selected=selector.selectedKeys();\n  }\n  now=System.currentTimeMillis();\n  for (  SelectionKey k : selected) {\n    SocketChannel sc=((SocketChannel)k.channel());\n    if ((k.readyOps() & SelectionKey.OP_CONNECT) != 0) {\n      if (sc.finishConnect()) {\n        zooKeeper.state=States.CONNECTED;\n        lastHeard=now;\n        lastSend=now;\n        primeConnection(k);\n      }\n    }\n else     if ((k.readyOps() & (SelectionKey.OP_READ | SelectionKey.OP_WRITE)) != 0) {\n      if (outgoingQueue.size() > 0) {\n        lastSend=now;\n      }\n      if (doIO()) {\n        lastHeard=now;\n      }\n    }\n  }\n  if (zooKeeper.state == States.CONNECTED) {\n    if (outgoingQueue.size() > 0) {\n      enableWrite();\n    }\n else {\n      disableWrite();\n    }\n  }\n  selected.clear();\n}\n catch (Exception e) {\n  LOG.warn(\"Closing: \",e);\n  cleanup();\n  if (zooKeeper.state.isAlive()) {\n    waitingEvents.add(new WatcherEvent(Event.EventNone,Event.KeeperStateDisconnected,null));\n  }\n  now=System.currentTimeMillis();\n  lastHeard=now;\n  lastSend=now;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 310,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 3562,
        "startLineNumber" : 652,
        "startColumnNumber" : 46,
        "endLineNumber" : 730,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  try {\n    if (sockKey == null) {\n      startConnect();\n      lastSend=now;\n      lastHeard=now;\n    }\n    int idleRecv=(int)(now - lastHeard);\n    int idleSend=(int)(now - lastSend);\n    int to=readTimeout - idleRecv;\n    if (zooKeeper.state != States.CONNECTED) {\n      to=connectTimeout - idleRecv;\n    }\n    if (to <= 0) {\n      throw new IOException(\"TIMED OUT\");\n    }\n    if (zooKeeper.state == States.CONNECTED) {\n      int timeToNextPing=readTimeout / 2 - idleSend;\n      if (timeToNextPing <= 0) {\n        sendPing();\n        lastSend=now;\n        enableWrite();\n      }\n else {\n        if (timeToNextPing < to) {\n          to=timeToNextPing;\n        }\n      }\n    }\n    selector.select(to);\n    Set<SelectionKey> selected;\nsynchronized (this) {\n      selected=selector.selectedKeys();\n    }\n    now=System.currentTimeMillis();\n    for (    SelectionKey k : selected) {\n      SocketChannel sc=((SocketChannel)k.channel());\n      if ((k.readyOps() & SelectionKey.OP_CONNECT) != 0) {\n        if (sc.finishConnect()) {\n          zooKeeper.state=States.CONNECTED;\n          lastHeard=now;\n          lastSend=now;\n          primeConnection(k);\n        }\n      }\n else       if ((k.readyOps() & (SelectionKey.OP_READ | SelectionKey.OP_WRITE)) != 0) {\n        if (outgoingQueue.size() > 0) {\n          lastSend=now;\n        }\n        if (doIO()) {\n          lastHeard=now;\n        }\n      }\n    }\n    if (zooKeeper.state == States.CONNECTED) {\n      if (outgoingQueue.size() > 0) {\n        enableWrite();\n      }\n else {\n        disableWrite();\n      }\n    }\n    selected.clear();\n  }\n catch (  Exception e) {\n    LOG.warn(\"Closing: \",e);\n    cleanup();\n    if (zooKeeper.state.isAlive()) {\n      waitingEvents.add(new WatcherEvent(Event.EventNone,Event.KeeperStateDisconnected,null));\n    }\n    now=System.currentTimeMillis();\n    lastHeard=now;\n    lastSend=now;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 311,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3596,
        "startLineNumber" : 652,
        "startColumnNumber" : 12,
        "endLineNumber" : 730,
        "endColumnNumber" : 13
      },
      "nodeContext" : "while (zooKeeper.state.isAlive()) {\n  try {\n    if (sockKey == null) {\n      startConnect();\n      lastSend=now;\n      lastHeard=now;\n    }\n    int idleRecv=(int)(now - lastHeard);\n    int idleSend=(int)(now - lastSend);\n    int to=readTimeout - idleRecv;\n    if (zooKeeper.state != States.CONNECTED) {\n      to=connectTimeout - idleRecv;\n    }\n    if (to <= 0) {\n      throw new IOException(\"TIMED OUT\");\n    }\n    if (zooKeeper.state == States.CONNECTED) {\n      int timeToNextPing=readTimeout / 2 - idleSend;\n      if (timeToNextPing <= 0) {\n        sendPing();\n        lastSend=now;\n        enableWrite();\n      }\n else {\n        if (timeToNextPing < to) {\n          to=timeToNextPing;\n        }\n      }\n    }\n    selector.select(to);\n    Set<SelectionKey> selected;\nsynchronized (this) {\n      selected=selector.selectedKeys();\n    }\n    now=System.currentTimeMillis();\n    for (    SelectionKey k : selected) {\n      SocketChannel sc=((SocketChannel)k.channel());\n      if ((k.readyOps() & SelectionKey.OP_CONNECT) != 0) {\n        if (sc.finishConnect()) {\n          zooKeeper.state=States.CONNECTED;\n          lastHeard=now;\n          lastSend=now;\n          primeConnection(k);\n        }\n      }\n else       if ((k.readyOps() & (SelectionKey.OP_READ | SelectionKey.OP_WRITE)) != 0) {\n        if (outgoingQueue.size() > 0) {\n          lastSend=now;\n        }\n        if (doIO()) {\n          lastHeard=now;\n        }\n      }\n    }\n    if (zooKeeper.state == States.CONNECTED) {\n      if (outgoingQueue.size() > 0) {\n        enableWrite();\n      }\n else {\n        disableWrite();\n      }\n    }\n    selected.clear();\n  }\n catch (  Exception e) {\n    LOG.warn(\"Closing: \",e);\n    cleanup();\n    if (zooKeeper.state.isAlive()) {\n      waitingEvents.add(new WatcherEvent(Event.EventNone,Event.KeeperStateDisconnected,null));\n    }\n    now=System.currentTimeMillis();\n    lastHeard=now;\n    lastSend=now;\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 317,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3869,
        "startLineNumber" : 648,
        "startColumnNumber" : 26,
        "endLineNumber" : 734,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  long now=System.currentTimeMillis();\n  long lastHeard=now;\n  long lastSend=now;\n  while (zooKeeper.state.isAlive()) {\n    try {\n      if (sockKey == null) {\n        startConnect();\n        lastSend=now;\n        lastHeard=now;\n      }\n      int idleRecv=(int)(now - lastHeard);\n      int idleSend=(int)(now - lastSend);\n      int to=readTimeout - idleRecv;\n      if (zooKeeper.state != States.CONNECTED) {\n        to=connectTimeout - idleRecv;\n      }\n      if (to <= 0) {\n        throw new IOException(\"TIMED OUT\");\n      }\n      if (zooKeeper.state == States.CONNECTED) {\n        int timeToNextPing=readTimeout / 2 - idleSend;\n        if (timeToNextPing <= 0) {\n          sendPing();\n          lastSend=now;\n          enableWrite();\n        }\n else {\n          if (timeToNextPing < to) {\n            to=timeToNextPing;\n          }\n        }\n      }\n      selector.select(to);\n      Set<SelectionKey> selected;\nsynchronized (this) {\n        selected=selector.selectedKeys();\n      }\n      now=System.currentTimeMillis();\n      for (      SelectionKey k : selected) {\n        SocketChannel sc=((SocketChannel)k.channel());\n        if ((k.readyOps() & SelectionKey.OP_CONNECT) != 0) {\n          if (sc.finishConnect()) {\n            zooKeeper.state=States.CONNECTED;\n            lastHeard=now;\n            lastSend=now;\n            primeConnection(k);\n          }\n        }\n else         if ((k.readyOps() & (SelectionKey.OP_READ | SelectionKey.OP_WRITE)) != 0) {\n          if (outgoingQueue.size() > 0) {\n            lastSend=now;\n          }\n          if (doIO()) {\n            lastHeard=now;\n          }\n        }\n      }\n      if (zooKeeper.state == States.CONNECTED) {\n        if (outgoingQueue.size() > 0) {\n          enableWrite();\n        }\n else {\n          disableWrite();\n        }\n      }\n      selected.clear();\n    }\n catch (    Exception e) {\n      LOG.warn(\"Closing: \",e);\n      cleanup();\n      if (zooKeeper.state.isAlive()) {\n        waitingEvents.add(new WatcherEvent(Event.EventNone,Event.KeeperStateDisconnected,null));\n      }\n      now=System.currentTimeMillis();\n      lastHeard=now;\n      lastSend=now;\n    }\n  }\n  cleanup();\n  ZooLog.logTextTraceMessage(\"SendThread exitedloop.\",ZooLog.textTraceMask);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 346,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3905,
        "startLineNumber" : 647,
        "startColumnNumber" : 8,
        "endLineNumber" : 734,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override public void run(){\n  long now=System.currentTimeMillis();\n  long lastHeard=now;\n  long lastSend=now;\n  while (zooKeeper.state.isAlive()) {\n    try {\n      if (sockKey == null) {\n        startConnect();\n        lastSend=now;\n        lastHeard=now;\n      }\n      int idleRecv=(int)(now - lastHeard);\n      int idleSend=(int)(now - lastSend);\n      int to=readTimeout - idleRecv;\n      if (zooKeeper.state != States.CONNECTED) {\n        to=connectTimeout - idleRecv;\n      }\n      if (to <= 0) {\n        throw new IOException(\"TIMED OUT\");\n      }\n      if (zooKeeper.state == States.CONNECTED) {\n        int timeToNextPing=readTimeout / 2 - idleSend;\n        if (timeToNextPing <= 0) {\n          sendPing();\n          lastSend=now;\n          enableWrite();\n        }\n else {\n          if (timeToNextPing < to) {\n            to=timeToNextPing;\n          }\n        }\n      }\n      selector.select(to);\n      Set<SelectionKey> selected;\nsynchronized (this) {\n        selected=selector.selectedKeys();\n      }\n      now=System.currentTimeMillis();\n      for (      SelectionKey k : selected) {\n        SocketChannel sc=((SocketChannel)k.channel());\n        if ((k.readyOps() & SelectionKey.OP_CONNECT) != 0) {\n          if (sc.finishConnect()) {\n            zooKeeper.state=States.CONNECTED;\n            lastHeard=now;\n            lastSend=now;\n            primeConnection(k);\n          }\n        }\n else         if ((k.readyOps() & (SelectionKey.OP_READ | SelectionKey.OP_WRITE)) != 0) {\n          if (outgoingQueue.size() > 0) {\n            lastSend=now;\n          }\n          if (doIO()) {\n            lastHeard=now;\n          }\n        }\n      }\n      if (zooKeeper.state == States.CONNECTED) {\n        if (outgoingQueue.size() > 0) {\n          enableWrite();\n        }\n else {\n          disableWrite();\n        }\n      }\n      selected.clear();\n    }\n catch (    Exception e) {\n      LOG.warn(\"Closing: \",e);\n      cleanup();\n      if (zooKeeper.state.isAlive()) {\n        waitingEvents.add(new WatcherEvent(Event.EventNone,Event.KeeperStateDisconnected,null));\n      }\n      now=System.currentTimeMillis();\n      lastHeard=now;\n      lastSend=now;\n    }\n  }\n  cleanup();\n  ZooLog.logTextTraceMessage(\"SendThread exitedloop.\",ZooLog.textTraceMask);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 352,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 710,
        "startColumnNumber" : 24,
        "endLineNumber" : 710,
        "endColumnNumber" : 59
      },
      "nodeContext" : "zooKeeper.state == States.CONNECTED",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "com.yahoo.zookeeper.ZooKeeper.States"
  }, {
    "nodeContext" : "zooKeeper.state",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 721,
      "startColumnNumber" : 24,
      "endLineNumber" : 721,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 721,
        "startColumnNumber" : 24,
        "endLineNumber" : 721,
        "endColumnNumber" : 49
      },
      "nodeContext" : "zooKeeper.state.isAlive()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 201,
        "startLineNumber" : 721,
        "startColumnNumber" : 20,
        "endLineNumber" : 724,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (zooKeeper.state.isAlive()) {\n  waitingEvents.add(new WatcherEvent(Event.EventNone,Event.KeeperStateDisconnected,null));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 21,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 446,
        "startLineNumber" : 718,
        "startColumnNumber" : 38,
        "endLineNumber" : 729,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  LOG.warn(\"Closing: \",e);\n  cleanup();\n  if (zooKeeper.state.isAlive()) {\n    waitingEvents.add(new WatcherEvent(Event.EventNone,Event.KeeperStateDisconnected,null));\n  }\n  now=System.currentTimeMillis();\n  lastHeard=now;\n  lastSend=now;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 45,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 466,
        "startLineNumber" : 718,
        "startColumnNumber" : 18,
        "endLineNumber" : 729,
        "endColumnNumber" : 17
      },
      "nodeContext" : "catch (Exception e) {\n  LOG.warn(\"Closing: \",e);\n  cleanup();\n  if (zooKeeper.state.isAlive()) {\n    waitingEvents.add(new WatcherEvent(Event.EventNone,Event.KeeperStateDisconnected,null));\n  }\n  now=System.currentTimeMillis();\n  lastHeard=now;\n  lastSend=now;\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 50,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3530,
        "startLineNumber" : 653,
        "startColumnNumber" : 16,
        "endLineNumber" : 729,
        "endColumnNumber" : 17
      },
      "nodeContext" : "try {\n  if (sockKey == null) {\n    startConnect();\n    lastSend=now;\n    lastHeard=now;\n  }\n  int idleRecv=(int)(now - lastHeard);\n  int idleSend=(int)(now - lastSend);\n  int to=readTimeout - idleRecv;\n  if (zooKeeper.state != States.CONNECTED) {\n    to=connectTimeout - idleRecv;\n  }\n  if (to <= 0) {\n    throw new IOException(\"TIMED OUT\");\n  }\n  if (zooKeeper.state == States.CONNECTED) {\n    int timeToNextPing=readTimeout / 2 - idleSend;\n    if (timeToNextPing <= 0) {\n      sendPing();\n      lastSend=now;\n      enableWrite();\n    }\n else {\n      if (timeToNextPing < to) {\n        to=timeToNextPing;\n      }\n    }\n  }\n  selector.select(to);\n  Set<SelectionKey> selected;\nsynchronized (this) {\n    selected=selector.selectedKeys();\n  }\n  now=System.currentTimeMillis();\n  for (  SelectionKey k : selected) {\n    SocketChannel sc=((SocketChannel)k.channel());\n    if ((k.readyOps() & SelectionKey.OP_CONNECT) != 0) {\n      if (sc.finishConnect()) {\n        zooKeeper.state=States.CONNECTED;\n        lastHeard=now;\n        lastSend=now;\n        primeConnection(k);\n      }\n    }\n else     if ((k.readyOps() & (SelectionKey.OP_READ | SelectionKey.OP_WRITE)) != 0) {\n      if (outgoingQueue.size() > 0) {\n        lastSend=now;\n      }\n      if (doIO()) {\n        lastHeard=now;\n      }\n    }\n  }\n  if (zooKeeper.state == States.CONNECTED) {\n    if (outgoingQueue.size() > 0) {\n      enableWrite();\n    }\n else {\n      disableWrite();\n    }\n  }\n  selected.clear();\n}\n catch (Exception e) {\n  LOG.warn(\"Closing: \",e);\n  cleanup();\n  if (zooKeeper.state.isAlive()) {\n    waitingEvents.add(new WatcherEvent(Event.EventNone,Event.KeeperStateDisconnected,null));\n  }\n  now=System.currentTimeMillis();\n  lastHeard=now;\n  lastSend=now;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 310,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 3562,
        "startLineNumber" : 652,
        "startColumnNumber" : 46,
        "endLineNumber" : 730,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  try {\n    if (sockKey == null) {\n      startConnect();\n      lastSend=now;\n      lastHeard=now;\n    }\n    int idleRecv=(int)(now - lastHeard);\n    int idleSend=(int)(now - lastSend);\n    int to=readTimeout - idleRecv;\n    if (zooKeeper.state != States.CONNECTED) {\n      to=connectTimeout - idleRecv;\n    }\n    if (to <= 0) {\n      throw new IOException(\"TIMED OUT\");\n    }\n    if (zooKeeper.state == States.CONNECTED) {\n      int timeToNextPing=readTimeout / 2 - idleSend;\n      if (timeToNextPing <= 0) {\n        sendPing();\n        lastSend=now;\n        enableWrite();\n      }\n else {\n        if (timeToNextPing < to) {\n          to=timeToNextPing;\n        }\n      }\n    }\n    selector.select(to);\n    Set<SelectionKey> selected;\nsynchronized (this) {\n      selected=selector.selectedKeys();\n    }\n    now=System.currentTimeMillis();\n    for (    SelectionKey k : selected) {\n      SocketChannel sc=((SocketChannel)k.channel());\n      if ((k.readyOps() & SelectionKey.OP_CONNECT) != 0) {\n        if (sc.finishConnect()) {\n          zooKeeper.state=States.CONNECTED;\n          lastHeard=now;\n          lastSend=now;\n          primeConnection(k);\n        }\n      }\n else       if ((k.readyOps() & (SelectionKey.OP_READ | SelectionKey.OP_WRITE)) != 0) {\n        if (outgoingQueue.size() > 0) {\n          lastSend=now;\n        }\n        if (doIO()) {\n          lastHeard=now;\n        }\n      }\n    }\n    if (zooKeeper.state == States.CONNECTED) {\n      if (outgoingQueue.size() > 0) {\n        enableWrite();\n      }\n else {\n        disableWrite();\n      }\n    }\n    selected.clear();\n  }\n catch (  Exception e) {\n    LOG.warn(\"Closing: \",e);\n    cleanup();\n    if (zooKeeper.state.isAlive()) {\n      waitingEvents.add(new WatcherEvent(Event.EventNone,Event.KeeperStateDisconnected,null));\n    }\n    now=System.currentTimeMillis();\n    lastHeard=now;\n    lastSend=now;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 311,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3596,
        "startLineNumber" : 652,
        "startColumnNumber" : 12,
        "endLineNumber" : 730,
        "endColumnNumber" : 13
      },
      "nodeContext" : "while (zooKeeper.state.isAlive()) {\n  try {\n    if (sockKey == null) {\n      startConnect();\n      lastSend=now;\n      lastHeard=now;\n    }\n    int idleRecv=(int)(now - lastHeard);\n    int idleSend=(int)(now - lastSend);\n    int to=readTimeout - idleRecv;\n    if (zooKeeper.state != States.CONNECTED) {\n      to=connectTimeout - idleRecv;\n    }\n    if (to <= 0) {\n      throw new IOException(\"TIMED OUT\");\n    }\n    if (zooKeeper.state == States.CONNECTED) {\n      int timeToNextPing=readTimeout / 2 - idleSend;\n      if (timeToNextPing <= 0) {\n        sendPing();\n        lastSend=now;\n        enableWrite();\n      }\n else {\n        if (timeToNextPing < to) {\n          to=timeToNextPing;\n        }\n      }\n    }\n    selector.select(to);\n    Set<SelectionKey> selected;\nsynchronized (this) {\n      selected=selector.selectedKeys();\n    }\n    now=System.currentTimeMillis();\n    for (    SelectionKey k : selected) {\n      SocketChannel sc=((SocketChannel)k.channel());\n      if ((k.readyOps() & SelectionKey.OP_CONNECT) != 0) {\n        if (sc.finishConnect()) {\n          zooKeeper.state=States.CONNECTED;\n          lastHeard=now;\n          lastSend=now;\n          primeConnection(k);\n        }\n      }\n else       if ((k.readyOps() & (SelectionKey.OP_READ | SelectionKey.OP_WRITE)) != 0) {\n        if (outgoingQueue.size() > 0) {\n          lastSend=now;\n        }\n        if (doIO()) {\n          lastHeard=now;\n        }\n      }\n    }\n    if (zooKeeper.state == States.CONNECTED) {\n      if (outgoingQueue.size() > 0) {\n        enableWrite();\n      }\n else {\n        disableWrite();\n      }\n    }\n    selected.clear();\n  }\n catch (  Exception e) {\n    LOG.warn(\"Closing: \",e);\n    cleanup();\n    if (zooKeeper.state.isAlive()) {\n      waitingEvents.add(new WatcherEvent(Event.EventNone,Event.KeeperStateDisconnected,null));\n    }\n    now=System.currentTimeMillis();\n    lastHeard=now;\n    lastSend=now;\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 317,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3869,
        "startLineNumber" : 648,
        "startColumnNumber" : 26,
        "endLineNumber" : 734,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  long now=System.currentTimeMillis();\n  long lastHeard=now;\n  long lastSend=now;\n  while (zooKeeper.state.isAlive()) {\n    try {\n      if (sockKey == null) {\n        startConnect();\n        lastSend=now;\n        lastHeard=now;\n      }\n      int idleRecv=(int)(now - lastHeard);\n      int idleSend=(int)(now - lastSend);\n      int to=readTimeout - idleRecv;\n      if (zooKeeper.state != States.CONNECTED) {\n        to=connectTimeout - idleRecv;\n      }\n      if (to <= 0) {\n        throw new IOException(\"TIMED OUT\");\n      }\n      if (zooKeeper.state == States.CONNECTED) {\n        int timeToNextPing=readTimeout / 2 - idleSend;\n        if (timeToNextPing <= 0) {\n          sendPing();\n          lastSend=now;\n          enableWrite();\n        }\n else {\n          if (timeToNextPing < to) {\n            to=timeToNextPing;\n          }\n        }\n      }\n      selector.select(to);\n      Set<SelectionKey> selected;\nsynchronized (this) {\n        selected=selector.selectedKeys();\n      }\n      now=System.currentTimeMillis();\n      for (      SelectionKey k : selected) {\n        SocketChannel sc=((SocketChannel)k.channel());\n        if ((k.readyOps() & SelectionKey.OP_CONNECT) != 0) {\n          if (sc.finishConnect()) {\n            zooKeeper.state=States.CONNECTED;\n            lastHeard=now;\n            lastSend=now;\n            primeConnection(k);\n          }\n        }\n else         if ((k.readyOps() & (SelectionKey.OP_READ | SelectionKey.OP_WRITE)) != 0) {\n          if (outgoingQueue.size() > 0) {\n            lastSend=now;\n          }\n          if (doIO()) {\n            lastHeard=now;\n          }\n        }\n      }\n      if (zooKeeper.state == States.CONNECTED) {\n        if (outgoingQueue.size() > 0) {\n          enableWrite();\n        }\n else {\n          disableWrite();\n        }\n      }\n      selected.clear();\n    }\n catch (    Exception e) {\n      LOG.warn(\"Closing: \",e);\n      cleanup();\n      if (zooKeeper.state.isAlive()) {\n        waitingEvents.add(new WatcherEvent(Event.EventNone,Event.KeeperStateDisconnected,null));\n      }\n      now=System.currentTimeMillis();\n      lastHeard=now;\n      lastSend=now;\n    }\n  }\n  cleanup();\n  ZooLog.logTextTraceMessage(\"SendThread exitedloop.\",ZooLog.textTraceMask);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 346,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3905,
        "startLineNumber" : 647,
        "startColumnNumber" : 8,
        "endLineNumber" : 734,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override public void run(){\n  long now=System.currentTimeMillis();\n  long lastHeard=now;\n  long lastSend=now;\n  while (zooKeeper.state.isAlive()) {\n    try {\n      if (sockKey == null) {\n        startConnect();\n        lastSend=now;\n        lastHeard=now;\n      }\n      int idleRecv=(int)(now - lastHeard);\n      int idleSend=(int)(now - lastSend);\n      int to=readTimeout - idleRecv;\n      if (zooKeeper.state != States.CONNECTED) {\n        to=connectTimeout - idleRecv;\n      }\n      if (to <= 0) {\n        throw new IOException(\"TIMED OUT\");\n      }\n      if (zooKeeper.state == States.CONNECTED) {\n        int timeToNextPing=readTimeout / 2 - idleSend;\n        if (timeToNextPing <= 0) {\n          sendPing();\n          lastSend=now;\n          enableWrite();\n        }\n else {\n          if (timeToNextPing < to) {\n            to=timeToNextPing;\n          }\n        }\n      }\n      selector.select(to);\n      Set<SelectionKey> selected;\nsynchronized (this) {\n        selected=selector.selectedKeys();\n      }\n      now=System.currentTimeMillis();\n      for (      SelectionKey k : selected) {\n        SocketChannel sc=((SocketChannel)k.channel());\n        if ((k.readyOps() & SelectionKey.OP_CONNECT) != 0) {\n          if (sc.finishConnect()) {\n            zooKeeper.state=States.CONNECTED;\n            lastHeard=now;\n            lastSend=now;\n            primeConnection(k);\n          }\n        }\n else         if ((k.readyOps() & (SelectionKey.OP_READ | SelectionKey.OP_WRITE)) != 0) {\n          if (outgoingQueue.size() > 0) {\n            lastSend=now;\n          }\n          if (doIO()) {\n            lastHeard=now;\n          }\n        }\n      }\n      if (zooKeeper.state == States.CONNECTED) {\n        if (outgoingQueue.size() > 0) {\n          enableWrite();\n        }\n else {\n          disableWrite();\n        }\n      }\n      selected.clear();\n    }\n catch (    Exception e) {\n      LOG.warn(\"Closing: \",e);\n      cleanup();\n      if (zooKeeper.state.isAlive()) {\n        waitingEvents.add(new WatcherEvent(Event.EventNone,Event.KeeperStateDisconnected,null));\n      }\n      now=System.currentTimeMillis();\n      lastHeard=now;\n      lastSend=now;\n    }\n  }\n  cleanup();\n  ZooLog.logTextTraceMessage(\"SendThread exitedloop.\",ZooLog.textTraceMask);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 352,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 721,
        "startColumnNumber" : 24,
        "endLineNumber" : 721,
        "endColumnNumber" : 49
      },
      "nodeContext" : "zooKeeper.state.isAlive()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "com.yahoo.zookeeper.ZooKeeper.States"
  } ],
  "positionList" : [ {
    "charLength" : 15,
    "startLineNumber" : 652,
    "startColumnNumber" : 19,
    "endLineNumber" : 652,
    "endColumnNumber" : 34
  }, {
    "charLength" : 15,
    "startLineNumber" : 662,
    "startColumnNumber" : 24,
    "endLineNumber" : 662,
    "endColumnNumber" : 39
  }, {
    "charLength" : 15,
    "startLineNumber" : 668,
    "startColumnNumber" : 24,
    "endLineNumber" : 668,
    "endColumnNumber" : 39
  }, {
    "charLength" : 15,
    "startLineNumber" : 710,
    "startColumnNumber" : 24,
    "endLineNumber" : 710,
    "endColumnNumber" : 39
  }, {
    "charLength" : 15,
    "startLineNumber" : 721,
    "startColumnNumber" : 24,
    "endLineNumber" : 721,
    "endColumnNumber" : 39
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 4
  } ]
}