{
  "id" : 237,
  "expression" : "method.isConstructor()",
  "projectName" : "skylot@jadx",
  "commitID" : "72b2663949555b03aeb864775d84f163b91bcea7",
  "filePath" : "jadx-core/src/main/java/jadx/core/dex/visitors/SimplifyVisitor.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "method.isConstructor()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 22,
      "startLineNumber" : 209,
      "startColumnNumber" : 40,
      "endLineNumber" : 209,
      "endColumnNumber" : 62
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 209,
        "startColumnNumber" : 13,
        "endLineNumber" : 209,
        "endColumnNumber" : 62
      },
      "nodeContext" : "node.getArgsCount() < 2 && method.isConstructor()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 209,
        "startColumnNumber" : 13,
        "endLineNumber" : 209,
        "endColumnNumber" : 99
      },
      "nodeContext" : "node.getArgsCount() < 2 && method.isConstructor() || method.getName().equals(\"append\")",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 209,
        "startColumnNumber" : 12,
        "endLineNumber" : 209,
        "endColumnNumber" : 100
      },
      "nodeContext" : "(node.getArgsCount() < 2 && method.isConstructor() || method.getName().equals(\"append\"))",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 89,
        "startLineNumber" : 209,
        "startColumnNumber" : 11,
        "endLineNumber" : 209,
        "endColumnNumber" : 100
      },
      "nodeContext" : "!(node.getArgsCount() < 2 && method.isConstructor() || method.getName().equals(\"append\"))",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 18,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 304,
        "startLineNumber" : 209,
        "startColumnNumber" : 7,
        "endLineNumber" : 213,
        "endColumnNumber" : 8
      },
      "nodeContext" : "if (!(node.getArgsCount() < 2 && method.isConstructor() || method.getName().equals(\"append\"))) {\n  return null;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 22,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 572,
        "startLineNumber" : 206,
        "startColumnNumber" : 37,
        "endLineNumber" : 216,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  InsnNode node=chain.get(argInd);\n  MethodInfo method=((CallMthInterface)node).getCallMth();\n  if (!(node.getArgsCount() < 2 && method.isConstructor() || method.getName().equals(\"append\"))) {\n    return null;\n  }\n  concatInsn.addArg(node.getArg(1));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 52,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 603,
        "startLineNumber" : 206,
        "startColumnNumber" : 6,
        "endLineNumber" : 216,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (; argInd < len; argInd++) {\n  InsnNode node=chain.get(argInd);\n  MethodInfo method=((CallMthInterface)node).getCallMth();\n  if (!(node.getArgsCount() < 2 && method.isConstructor() || method.getName().equals(\"append\"))) {\n    return null;\n  }\n  concatInsn.addArg(node.getArg(1));\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 58,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1702,
        "startLineNumber" : 181,
        "startColumnNumber" : 82,
        "endLineNumber" : 219,
        "endColumnNumber" : 6
      },
      "nodeContext" : "{\n  int len=chain.size(), argInd=1;\n  InsnNode concatInsn=new InsnNode(InsnType.STR_CONCAT,len - 1);\n  InsnNode argInsn;\n  if (constrIndex > 0) {\n    InsnWrapArg iwa;\n    if (constrIndex == 2 && (argInsn=chain.get(1)).getType() == InsnType.INVOKE && ((InvokeNode)argInsn).getCallMth().getName().compareTo(\"valueOf\") == 0) {\n      iwa=(InsnWrapArg)argInsn.getArg(0);\n      argInd=3;\n    }\n else {\n      InsnNode firstNode=chain.get(0);\n      if (firstNode instanceof ConstStringNode) {\n        ConstStringNode csn=(ConstStringNode)firstNode;\n        iwa=new InsnWrapArg(csn);\n        argInd=2;\n      }\n else {\n        return null;\n      }\n    }\n    concatInsn.addArg(iwa);\n  }\n  for (; argInd < len; argInd++) {\n    InsnNode node=chain.get(argInd);\n    MethodInfo method=((CallMthInterface)node).getCallMth();\n    if (!(node.getArgsCount() < 2 && method.isConstructor() || method.getName().equals(\"append\"))) {\n      return null;\n    }\n    concatInsn.addArg(node.getArg(1));\n  }\n  concatInsn.setResult(insn.getResult());\n  return concatInsn;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 199,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1779,
        "startLineNumber" : 181,
        "startColumnNumber" : 5,
        "endLineNumber" : 219,
        "endColumnNumber" : 6
      },
      "nodeContext" : "if (constr.getClassType().getFullName().equals(Consts.CLASS_STRING_BUILDER)) {\n  int len=chain.size(), argInd=1;\n  InsnNode concatInsn=new InsnNode(InsnType.STR_CONCAT,len - 1);\n  InsnNode argInsn;\n  if (constrIndex > 0) {\n    InsnWrapArg iwa;\n    if (constrIndex == 2 && (argInsn=chain.get(1)).getType() == InsnType.INVOKE && ((InvokeNode)argInsn).getCallMth().getName().compareTo(\"valueOf\") == 0) {\n      iwa=(InsnWrapArg)argInsn.getArg(0);\n      argInd=3;\n    }\n else {\n      InsnNode firstNode=chain.get(0);\n      if (firstNode instanceof ConstStringNode) {\n        ConstStringNode csn=(ConstStringNode)firstNode;\n        iwa=new InsnWrapArg(csn);\n        argInd=2;\n      }\n else {\n        return null;\n      }\n    }\n    concatInsn.addArg(iwa);\n  }\n  for (; argInd < len; argInd++) {\n    InsnNode node=chain.get(argInd);\n    MethodInfo method=((CallMthInterface)node).getCallMth();\n    if (!(node.getArgsCount() < 2 && method.isConstructor() || method.getName().equals(\"append\"))) {\n      return null;\n    }\n    concatInsn.addArg(node.getArg(1));\n  }\n  concatInsn.setResult(insn.getResult());\n  return concatInsn;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 210,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1964,
        "startLineNumber" : 179,
        "startColumnNumber" : 27,
        "endLineNumber" : 220,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ConstructorInsn constr=(ConstructorInsn)chain.get(constrIndex);\n  if (constr.getClassType().getFullName().equals(Consts.CLASS_STRING_BUILDER)) {\n    int len=chain.size(), argInd=1;\n    InsnNode concatInsn=new InsnNode(InsnType.STR_CONCAT,len - 1);\n    InsnNode argInsn;\n    if (constrIndex > 0) {\n      InsnWrapArg iwa;\n      if (constrIndex == 2 && (argInsn=chain.get(1)).getType() == InsnType.INVOKE && ((InvokeNode)argInsn).getCallMth().getName().compareTo(\"valueOf\") == 0) {\n        iwa=(InsnWrapArg)argInsn.getArg(0);\n        argInd=3;\n      }\n else {\n        InsnNode firstNode=chain.get(0);\n        if (firstNode instanceof ConstStringNode) {\n          ConstStringNode csn=(ConstStringNode)firstNode;\n          iwa=new InsnWrapArg(csn);\n          argInd=2;\n        }\n else {\n          return null;\n        }\n      }\n      concatInsn.addArg(iwa);\n    }\n    for (; argInd < len; argInd++) {\n      InsnNode node=chain.get(argInd);\n      MethodInfo method=((CallMthInterface)node).getCallMth();\n      if (!(node.getArgsCount() < 2 && method.isConstructor() || method.getName().equals(\"append\"))) {\n        return null;\n      }\n      concatInsn.addArg(node.getArg(1));\n    }\n    concatInsn.setResult(insn.getResult());\n    return concatInsn;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 223,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1987,
        "startLineNumber" : 179,
        "startColumnNumber" : 4,
        "endLineNumber" : 220,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (constrIndex != -1) {\n  ConstructorInsn constr=(ConstructorInsn)chain.get(constrIndex);\n  if (constr.getClassType().getFullName().equals(Consts.CLASS_STRING_BUILDER)) {\n    int len=chain.size(), argInd=1;\n    InsnNode concatInsn=new InsnNode(InsnType.STR_CONCAT,len - 1);\n    InsnNode argInsn;\n    if (constrIndex > 0) {\n      InsnWrapArg iwa;\n      if (constrIndex == 2 && (argInsn=chain.get(1)).getType() == InsnType.INVOKE && ((InvokeNode)argInsn).getCallMth().getName().compareTo(\"valueOf\") == 0) {\n        iwa=(InsnWrapArg)argInsn.getArg(0);\n        argInd=3;\n      }\n else {\n        InsnNode firstNode=chain.get(0);\n        if (firstNode instanceof ConstStringNode) {\n          ConstStringNode csn=(ConstStringNode)firstNode;\n          iwa=new InsnWrapArg(csn);\n          argInd=2;\n        }\n else {\n          return null;\n        }\n      }\n      concatInsn.addArg(iwa);\n    }\n    for (; argInd < len; argInd++) {\n      InsnNode node=chain.get(argInd);\n      MethodInfo method=((CallMthInterface)node).getCallMth();\n      if (!(node.getArgsCount() < 2 && method.isConstructor() || method.getName().equals(\"append\"))) {\n        return null;\n      }\n      concatInsn.addArg(node.getArg(1));\n    }\n    concatInsn.setResult(insn.getResult());\n    return concatInsn;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 228,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2829,
        "startLineNumber" : 162,
        "startColumnNumber" : 7,
        "endLineNumber" : 221,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  List<InsnNode> chain=flattenInsnChain(insn);\n  int constrIndex=-1;\n  if (chain.size() > 1 && chain.get(0).getType() == InsnType.CONSTRUCTOR) {\n    constrIndex=0;\n  }\n else   if (chain.size() > 2 && chain.get(1).getType() == InsnType.CONSTRUCTOR) {\n    constrIndex=1;\n  }\n else   if (chain.size() > 3 && chain.get(2).getType() == InsnType.CONSTRUCTOR) {\n    constrIndex=2;\n  }\n  if (constrIndex != -1) {\n    ConstructorInsn constr=(ConstructorInsn)chain.get(constrIndex);\n    if (constr.getClassType().getFullName().equals(Consts.CLASS_STRING_BUILDER)) {\n      int len=chain.size(), argInd=1;\n      InsnNode concatInsn=new InsnNode(InsnType.STR_CONCAT,len - 1);\n      InsnNode argInsn;\n      if (constrIndex > 0) {\n        InsnWrapArg iwa;\n        if (constrIndex == 2 && (argInsn=chain.get(1)).getType() == InsnType.INVOKE && ((InvokeNode)argInsn).getCallMth().getName().compareTo(\"valueOf\") == 0) {\n          iwa=(InsnWrapArg)argInsn.getArg(0);\n          argInd=3;\n        }\n else {\n          InsnNode firstNode=chain.get(0);\n          if (firstNode instanceof ConstStringNode) {\n            ConstStringNode csn=(ConstStringNode)firstNode;\n            iwa=new InsnWrapArg(csn);\n            argInd=2;\n          }\n else {\n            return null;\n          }\n        }\n        concatInsn.addArg(iwa);\n      }\n      for (; argInd < len; argInd++) {\n        InsnNode node=chain.get(argInd);\n        MethodInfo method=((CallMthInterface)node).getCallMth();\n        if (!(node.getArgsCount() < 2 && method.isConstructor() || method.getName().equals(\"append\"))) {\n          return null;\n        }\n        concatInsn.addArg(node.getArg(1));\n      }\n      concatInsn.setResult(insn.getResult());\n      return concatInsn;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 312,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2939,
        "startLineNumber" : 162,
        "startColumnNumber" : 3,
        "endLineNumber" : 223,
        "endColumnNumber" : 4
      },
      "nodeContext" : "try {\n  List<InsnNode> chain=flattenInsnChain(insn);\n  int constrIndex=-1;\n  if (chain.size() > 1 && chain.get(0).getType() == InsnType.CONSTRUCTOR) {\n    constrIndex=0;\n  }\n else   if (chain.size() > 2 && chain.get(1).getType() == InsnType.CONSTRUCTOR) {\n    constrIndex=1;\n  }\n else   if (chain.size() > 3 && chain.get(2).getType() == InsnType.CONSTRUCTOR) {\n    constrIndex=2;\n  }\n  if (constrIndex != -1) {\n    ConstructorInsn constr=(ConstructorInsn)chain.get(constrIndex);\n    if (constr.getClassType().getFullName().equals(Consts.CLASS_STRING_BUILDER)) {\n      int len=chain.size(), argInd=1;\n      InsnNode concatInsn=new InsnNode(InsnType.STR_CONCAT,len - 1);\n      InsnNode argInsn;\n      if (constrIndex > 0) {\n        InsnWrapArg iwa;\n        if (constrIndex == 2 && (argInsn=chain.get(1)).getType() == InsnType.INVOKE && ((InvokeNode)argInsn).getCallMth().getName().compareTo(\"valueOf\") == 0) {\n          iwa=(InsnWrapArg)argInsn.getArg(0);\n          argInd=3;\n        }\n else {\n          InsnNode firstNode=chain.get(0);\n          if (firstNode instanceof ConstStringNode) {\n            ConstStringNode csn=(ConstStringNode)firstNode;\n            iwa=new InsnWrapArg(csn);\n            argInd=2;\n          }\n else {\n            return null;\n          }\n        }\n        concatInsn.addArg(iwa);\n      }\n      for (; argInd < len; argInd++) {\n        InsnNode node=chain.get(argInd);\n        MethodInfo method=((CallMthInterface)node).getCallMth();\n        if (!(node.getArgsCount() < 2 && method.isConstructor() || method.getName().equals(\"append\"))) {\n          return null;\n        }\n        concatInsn.addArg(node.getArg(1));\n      }\n      concatInsn.setResult(insn.getResult());\n      return concatInsn;\n    }\n  }\n}\n catch (Exception e) {\n  LOG.warn(\"Can't convert string concatenation: {} insn: {}\",mth,insn,e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 327,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2948,
        "startLineNumber" : 161,
        "startColumnNumber" : 36,
        "endLineNumber" : 224,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  try {\n    List<InsnNode> chain=flattenInsnChain(insn);\n    int constrIndex=-1;\n    if (chain.size() > 1 && chain.get(0).getType() == InsnType.CONSTRUCTOR) {\n      constrIndex=0;\n    }\n else     if (chain.size() > 2 && chain.get(1).getType() == InsnType.CONSTRUCTOR) {\n      constrIndex=1;\n    }\n else     if (chain.size() > 3 && chain.get(2).getType() == InsnType.CONSTRUCTOR) {\n      constrIndex=2;\n    }\n    if (constrIndex != -1) {\n      ConstructorInsn constr=(ConstructorInsn)chain.get(constrIndex);\n      if (constr.getClassType().getFullName().equals(Consts.CLASS_STRING_BUILDER)) {\n        int len=chain.size(), argInd=1;\n        InsnNode concatInsn=new InsnNode(InsnType.STR_CONCAT,len - 1);\n        InsnNode argInsn;\n        if (constrIndex > 0) {\n          InsnWrapArg iwa;\n          if (constrIndex == 2 && (argInsn=chain.get(1)).getType() == InsnType.INVOKE && ((InvokeNode)argInsn).getCallMth().getName().compareTo(\"valueOf\") == 0) {\n            iwa=(InsnWrapArg)argInsn.getArg(0);\n            argInd=3;\n          }\n else {\n            InsnNode firstNode=chain.get(0);\n            if (firstNode instanceof ConstStringNode) {\n              ConstStringNode csn=(ConstStringNode)firstNode;\n              iwa=new InsnWrapArg(csn);\n              argInd=2;\n            }\n else {\n              return null;\n            }\n          }\n          concatInsn.addArg(iwa);\n        }\n        for (; argInd < len; argInd++) {\n          InsnNode node=chain.get(argInd);\n          MethodInfo method=((CallMthInterface)node).getCallMth();\n          if (!(node.getArgsCount() < 2 && method.isConstructor() || method.getName().equals(\"append\"))) {\n            return null;\n          }\n          concatInsn.addArg(node.getArg(1));\n        }\n        concatInsn.setResult(insn.getResult());\n        return concatInsn;\n      }\n    }\n  }\n catch (  Exception e) {\n    LOG.warn(\"Can't convert string concatenation: {} insn: {}\",mth,insn,e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 328,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3127,
        "startLineNumber" : 159,
        "startColumnNumber" : 2,
        "endLineNumber" : 224,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (callMth.getDeclClass().getFullName().equals(Consts.CLASS_STRING_BUILDER) && callMth.getShortId().equals(Consts.MTH_TOSTRING_SIGNATURE) && insn.getArg(0).isInsnWrap()) {\n  try {\n    List<InsnNode> chain=flattenInsnChain(insn);\n    int constrIndex=-1;\n    if (chain.size() > 1 && chain.get(0).getType() == InsnType.CONSTRUCTOR) {\n      constrIndex=0;\n    }\n else     if (chain.size() > 2 && chain.get(1).getType() == InsnType.CONSTRUCTOR) {\n      constrIndex=1;\n    }\n else     if (chain.size() > 3 && chain.get(2).getType() == InsnType.CONSTRUCTOR) {\n      constrIndex=2;\n    }\n    if (constrIndex != -1) {\n      ConstructorInsn constr=(ConstructorInsn)chain.get(constrIndex);\n      if (constr.getClassType().getFullName().equals(Consts.CLASS_STRING_BUILDER)) {\n        int len=chain.size(), argInd=1;\n        InsnNode concatInsn=new InsnNode(InsnType.STR_CONCAT,len - 1);\n        InsnNode argInsn;\n        if (constrIndex > 0) {\n          InsnWrapArg iwa;\n          if (constrIndex == 2 && (argInsn=chain.get(1)).getType() == InsnType.INVOKE && ((InvokeNode)argInsn).getCallMth().getName().compareTo(\"valueOf\") == 0) {\n            iwa=(InsnWrapArg)argInsn.getArg(0);\n            argInd=3;\n          }\n else {\n            InsnNode firstNode=chain.get(0);\n            if (firstNode instanceof ConstStringNode) {\n              ConstStringNode csn=(ConstStringNode)firstNode;\n              iwa=new InsnWrapArg(csn);\n              argInd=2;\n            }\n else {\n              return null;\n            }\n          }\n          concatInsn.addArg(iwa);\n        }\n        for (; argInd < len; argInd++) {\n          InsnNode node=chain.get(argInd);\n          MethodInfo method=((CallMthInterface)node).getCallMth();\n          if (!(node.getArgsCount() < 2 && method.isConstructor() || method.getName().equals(\"append\"))) {\n            return null;\n          }\n          concatInsn.addArg(node.getArg(1));\n        }\n        concatInsn.setResult(insn.getResult());\n        return concatInsn;\n      }\n    }\n  }\n catch (  Exception e) {\n    LOG.warn(\"Can't convert string concatenation: {} insn: {}\",mth,insn,e);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 354,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3338,
        "startLineNumber" : 154,
        "startColumnNumber" : 70,
        "endLineNumber" : 226,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  MethodInfo callMth=((InvokeNode)insn).getCallMth();\n  if (callMth.getDeclClass().getFullName().equals(Consts.CLASS_STRING_BUILDER) && callMth.getShortId().equals(Consts.MTH_TOSTRING_SIGNATURE) && insn.getArg(0).isInsnWrap()) {\n    try {\n      List<InsnNode> chain=flattenInsnChain(insn);\n      int constrIndex=-1;\n      if (chain.size() > 1 && chain.get(0).getType() == InsnType.CONSTRUCTOR) {\n        constrIndex=0;\n      }\n else       if (chain.size() > 2 && chain.get(1).getType() == InsnType.CONSTRUCTOR) {\n        constrIndex=1;\n      }\n else       if (chain.size() > 3 && chain.get(2).getType() == InsnType.CONSTRUCTOR) {\n        constrIndex=2;\n      }\n      if (constrIndex != -1) {\n        ConstructorInsn constr=(ConstructorInsn)chain.get(constrIndex);\n        if (constr.getClassType().getFullName().equals(Consts.CLASS_STRING_BUILDER)) {\n          int len=chain.size(), argInd=1;\n          InsnNode concatInsn=new InsnNode(InsnType.STR_CONCAT,len - 1);\n          InsnNode argInsn;\n          if (constrIndex > 0) {\n            InsnWrapArg iwa;\n            if (constrIndex == 2 && (argInsn=chain.get(1)).getType() == InsnType.INVOKE && ((InvokeNode)argInsn).getCallMth().getName().compareTo(\"valueOf\") == 0) {\n              iwa=(InsnWrapArg)argInsn.getArg(0);\n              argInd=3;\n            }\n else {\n              InsnNode firstNode=chain.get(0);\n              if (firstNode instanceof ConstStringNode) {\n                ConstStringNode csn=(ConstStringNode)firstNode;\n                iwa=new InsnWrapArg(csn);\n                argInd=2;\n              }\n else {\n                return null;\n              }\n            }\n            concatInsn.addArg(iwa);\n          }\n          for (; argInd < len; argInd++) {\n            InsnNode node=chain.get(argInd);\n            MethodInfo method=((CallMthInterface)node).getCallMth();\n            if (!(node.getArgsCount() < 2 && method.isConstructor() || method.getName().equals(\"append\"))) {\n              return null;\n            }\n            concatInsn.addArg(node.getArg(1));\n          }\n          concatInsn.setResult(insn.getResult());\n          return concatInsn;\n        }\n      }\n    }\n catch (    Exception e) {\n      LOG.warn(\"Can't convert string concatenation: {} insn: {}\",mth,insn,e);\n    }\n  }\n  return null;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 369,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3711,
        "startLineNumber" : 145,
        "startColumnNumber" : 1,
        "endLineNumber" : 226,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Simplify chains of calls to StringBuilder#append() plus constructor of StringBuilder. Those chains are usually automatically generated by the Java compiler when you create String concatenations like <code>\"text \" + 1 + \" text\"</code>.\n * @param mth\n * @param insn\n * @return\n */\nprivate static InsnNode convertInvoke(MethodNode mth,InsnNode insn){\n  MethodInfo callMth=((InvokeNode)insn).getCallMth();\n  if (callMth.getDeclClass().getFullName().equals(Consts.CLASS_STRING_BUILDER) && callMth.getShortId().equals(Consts.MTH_TOSTRING_SIGNATURE) && insn.getArg(0).isInsnWrap()) {\n    try {\n      List<InsnNode> chain=flattenInsnChain(insn);\n      int constrIndex=-1;\n      if (chain.size() > 1 && chain.get(0).getType() == InsnType.CONSTRUCTOR) {\n        constrIndex=0;\n      }\n else       if (chain.size() > 2 && chain.get(1).getType() == InsnType.CONSTRUCTOR) {\n        constrIndex=1;\n      }\n else       if (chain.size() > 3 && chain.get(2).getType() == InsnType.CONSTRUCTOR) {\n        constrIndex=2;\n      }\n      if (constrIndex != -1) {\n        ConstructorInsn constr=(ConstructorInsn)chain.get(constrIndex);\n        if (constr.getClassType().getFullName().equals(Consts.CLASS_STRING_BUILDER)) {\n          int len=chain.size(), argInd=1;\n          InsnNode concatInsn=new InsnNode(InsnType.STR_CONCAT,len - 1);\n          InsnNode argInsn;\n          if (constrIndex > 0) {\n            InsnWrapArg iwa;\n            if (constrIndex == 2 && (argInsn=chain.get(1)).getType() == InsnType.INVOKE && ((InvokeNode)argInsn).getCallMth().getName().compareTo(\"valueOf\") == 0) {\n              iwa=(InsnWrapArg)argInsn.getArg(0);\n              argInd=3;\n            }\n else {\n              InsnNode firstNode=chain.get(0);\n              if (firstNode instanceof ConstStringNode) {\n                ConstStringNode csn=(ConstStringNode)firstNode;\n                iwa=new InsnWrapArg(csn);\n                argInd=2;\n              }\n else {\n                return null;\n              }\n            }\n            concatInsn.addArg(iwa);\n          }\n          for (; argInd < len; argInd++) {\n            InsnNode node=chain.get(argInd);\n            MethodInfo method=((CallMthInterface)node).getCallMth();\n            if (!(node.getArgsCount() < 2 && method.isConstructor() || method.getName().equals(\"append\"))) {\n              return null;\n            }\n            concatInsn.addArg(node.getArg(1));\n          }\n          concatInsn.setResult(insn.getResult());\n          return concatInsn;\n        }\n      }\n    }\n catch (    Exception e) {\n      LOG.warn(\"Can't convert string concatenation: {} insn: {}\",mth,insn,e);\n    }\n  }\n  return null;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 384,
      "astHeight" : 22
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 89,
        "startLineNumber" : 209,
        "startColumnNumber" : 11,
        "endLineNumber" : 209,
        "endColumnNumber" : 100
      },
      "nodeContext" : "!(node.getArgsCount() < 2 && method.isConstructor() || method.getName().equals(\"append\"))",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 18,
      "astHeight" : 7
    },
    "tokenLength" : 2,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 22,
    "startLineNumber" : 209,
    "startColumnNumber" : 40,
    "endLineNumber" : 209,
    "endColumnNumber" : 62
  } ],
  "layoutRelationDataList" : [ ]
}