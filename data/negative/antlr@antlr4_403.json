{
  "id" : 403,
  "expression" : "LexerActionType",
  "projectName" : "antlr@antlr4",
  "commitID" : "f2b93e550cd912be3973743d09206db98f4092c9",
  "filePath" : "/runtime/Java/src/org/antlr/v4/runtime/atn/ATNSerializer.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "LexerActionType",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 521,
      "startColumnNumber" : 33,
      "endLineNumber" : 521,
      "endColumnNumber" : 48
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,array]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 521,
        "startColumnNumber" : 33,
        "endLineNumber" : 521,
        "endColumnNumber" : 57
      },
      "nodeContext" : "LexerActionType.values()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 521,
        "startColumnNumber" : 33,
        "endLineNumber" : 521,
        "endColumnNumber" : 91
      },
      "nodeContext" : "LexerActionType.values()[ATNDeserializer.toInt(data[p++])]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 521,
        "startColumnNumber" : 20,
        "endLineNumber" : 521,
        "endColumnNumber" : 91
      },
      "nodeContext" : "actionType=LexerActionType.values()[ATNDeserializer.toInt(data[p++])]",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 521,
        "startColumnNumber" : 4,
        "endLineNumber" : 521,
        "endColumnNumber" : 92
      },
      "nodeContext" : "LexerActionType actionType=LexerActionType.values()[ATNDeserializer.toInt(data[p++])];\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 16,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 203,
        "startLineNumber" : 520,
        "startColumnNumber" : 46,
        "endLineNumber" : 524,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  LexerActionType actionType=LexerActionType.values()[ATNDeserializer.toInt(data[p++])];\n  int data1=ATNDeserializer.toInt(data[p++]);\n  int data2=ATNDeserializer.toInt(data[p++]);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 39,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 246,
        "startLineNumber" : 520,
        "startColumnNumber" : 3,
        "endLineNumber" : 524,
        "endColumnNumber" : 4
      },
      "nodeContext" : "for (int i=0; i < lexerActionCount; i++) {\n  LexerActionType actionType=LexerActionType.values()[ATNDeserializer.toInt(data[p++])];\n  int data1=ATNDeserializer.toInt(data[p++]);\n  int data2=ATNDeserializer.toInt(data[p++]);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 50,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 645,
        "startLineNumber" : 513,
        "startColumnNumber" : 40,
        "endLineNumber" : 525,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int lexerActionCount=ATNDeserializer.toInt(data[p++]);\n  for (int i=0; i < lexerActionCount; i++) {\n    LexerActionType actionType=LexerActionType.values()[ATNDeserializer.toInt(data[p++])];\n    int data1=ATNDeserializer.toInt(data[p++]);\n    int data2=ATNDeserializer.toInt(data[p++]);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 62,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 683,
        "startLineNumber" : 513,
        "startColumnNumber" : 2,
        "endLineNumber" : 525,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (atn.grammarType == ATNType.LEXER) {\n  int lexerActionCount=ATNDeserializer.toInt(data[p++]);\n  for (int i=0; i < lexerActionCount; i++) {\n    LexerActionType actionType=LexerActionType.values()[ATNDeserializer.toInt(data[p++])];\n    int data1=ATNDeserializer.toInt(data[p++]);\n    int data2=ATNDeserializer.toInt(data[p++]);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 70,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5312,
        "startLineNumber" : 412,
        "startColumnNumber" : 35,
        "endLineNumber" : 527,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  data=data.clone();\n  for (int i=1; i < data.length; i++) {\n    data[i]=(char)(data[i] - 2);\n  }\n  StringBuilder buf=new StringBuilder();\n  int p=0;\n  int version=ATNDeserializer.toInt(data[p++]);\n  if (version != ATNDeserializer.SERIALIZED_VERSION) {\n    String reason=String.format(\"Could not deserialize ATN with version %d (expected %d).\",version,ATNDeserializer.SERIALIZED_VERSION);\n    throw new UnsupportedOperationException(new InvalidClassException(ATN.class.getName(),reason));\n  }\n  UUID uuid=ATNDeserializer.toUUID(data,p);\n  p+=8;\n  if (!uuid.equals(ATNDeserializer.SERIALIZED_UUID)) {\n    String reason=String.format(Locale.getDefault(),\"Could not deserialize ATN with UUID %s (expected %s).\",uuid,ATNDeserializer.SERIALIZED_UUID);\n    throw new UnsupportedOperationException(new InvalidClassException(ATN.class.getName(),reason));\n  }\n  p++;\n  int maxType=ATNDeserializer.toInt(data[p++]);\n  buf.append(\"max type \").append(maxType).append(\"\\n\");\n  int nstates=ATNDeserializer.toInt(data[p++]);\n  for (int i=0; i < nstates; i++) {\n    int stype=ATNDeserializer.toInt(data[p++]);\n    if (stype == ATNState.INVALID_TYPE)     continue;\n    int ruleIndex=ATNDeserializer.toInt(data[p++]);\n    if (ruleIndex == Character.MAX_VALUE) {\n      ruleIndex=-1;\n    }\n    String arg=\"\";\n    if (stype == ATNState.LOOP_END) {\n      int loopBackStateNumber=ATNDeserializer.toInt(data[p++]);\n      arg=\" \" + loopBackStateNumber;\n    }\n else     if (stype == ATNState.PLUS_BLOCK_START || stype == ATNState.STAR_BLOCK_START || stype == ATNState.BLOCK_START) {\n      int endStateNumber=ATNDeserializer.toInt(data[p++]);\n      arg=\" \" + endStateNumber;\n    }\n    buf.append(i).append(\":\").append(ATNState.serializationNames.get(stype)).append(\" \").append(ruleIndex).append(arg).append(\"\\n\");\n  }\n  int numNonGreedyStates=ATNDeserializer.toInt(data[p++]);\n  for (int i=0; i < numNonGreedyStates; i++) {\n    int stateNumber=ATNDeserializer.toInt(data[p++]);\n  }\n  int numPrecedenceStates=ATNDeserializer.toInt(data[p++]);\n  for (int i=0; i < numPrecedenceStates; i++) {\n    int stateNumber=ATNDeserializer.toInt(data[p++]);\n  }\n  int nrules=ATNDeserializer.toInt(data[p++]);\n  for (int i=0; i < nrules; i++) {\n    int s=ATNDeserializer.toInt(data[p++]);\n    if (atn.grammarType == ATNType.LEXER) {\n      int arg1=ATNDeserializer.toInt(data[p++]);\n      buf.append(\"rule \").append(i).append(\":\").append(s).append(\" \").append(arg1).append('\\n');\n    }\n else {\n      buf.append(\"rule \").append(i).append(\":\").append(s).append('\\n');\n    }\n  }\n  int nmodes=ATNDeserializer.toInt(data[p++]);\n  for (int i=0; i < nmodes; i++) {\n    int s=ATNDeserializer.toInt(data[p++]);\n    buf.append(\"mode \").append(i).append(\":\").append(s).append('\\n');\n  }\n  int numBMPSets=ATNDeserializer.toInt(data[p++]);\n  p=appendSets(buf,data,p,numBMPSets,0,ATNDeserializer.getUnicodeDeserializer(ATNDeserializer.UnicodeDeserializingMode.UNICODE_BMP));\n  int numSMPSets=ATNDeserializer.toInt(data[p++]);\n  p=appendSets(buf,data,p,numSMPSets,numBMPSets,ATNDeserializer.getUnicodeDeserializer(ATNDeserializer.UnicodeDeserializingMode.UNICODE_SMP));\n  int nedges=ATNDeserializer.toInt(data[p++]);\n  for (int i=0; i < nedges; i++) {\n    int src=ATNDeserializer.toInt(data[p]);\n    int trg=ATNDeserializer.toInt(data[p + 1]);\n    int ttype=ATNDeserializer.toInt(data[p + 2]);\n    int arg1=ATNDeserializer.toInt(data[p + 3]);\n    int arg2=ATNDeserializer.toInt(data[p + 4]);\n    int arg3=ATNDeserializer.toInt(data[p + 5]);\n    buf.append(src).append(\"->\").append(trg).append(\" \").append(Transition.serializationNames.get(ttype)).append(\" \").append(arg1).append(\",\").append(arg2).append(\",\").append(arg3).append(\"\\n\");\n    p+=6;\n  }\n  int ndecisions=ATNDeserializer.toInt(data[p++]);\n  for (int i=0; i < ndecisions; i++) {\n    int s=ATNDeserializer.toInt(data[p++]);\n    buf.append(i).append(\":\").append(s).append(\"\\n\");\n  }\n  if (atn.grammarType == ATNType.LEXER) {\n    int lexerActionCount=ATNDeserializer.toInt(data[p++]);\n    for (int i=0; i < lexerActionCount; i++) {\n      LexerActionType actionType=LexerActionType.values()[ATNDeserializer.toInt(data[p++])];\n      int data1=ATNDeserializer.toInt(data[p++]);\n      int data2=ATNDeserializer.toInt(data[p++]);\n    }\n  }\n  return buf.toString();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 860,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5346,
        "startLineNumber" : 412,
        "startColumnNumber" : 1,
        "endLineNumber" : 527,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public String decode(char[] data){\n  data=data.clone();\n  for (int i=1; i < data.length; i++) {\n    data[i]=(char)(data[i] - 2);\n  }\n  StringBuilder buf=new StringBuilder();\n  int p=0;\n  int version=ATNDeserializer.toInt(data[p++]);\n  if (version != ATNDeserializer.SERIALIZED_VERSION) {\n    String reason=String.format(\"Could not deserialize ATN with version %d (expected %d).\",version,ATNDeserializer.SERIALIZED_VERSION);\n    throw new UnsupportedOperationException(new InvalidClassException(ATN.class.getName(),reason));\n  }\n  UUID uuid=ATNDeserializer.toUUID(data,p);\n  p+=8;\n  if (!uuid.equals(ATNDeserializer.SERIALIZED_UUID)) {\n    String reason=String.format(Locale.getDefault(),\"Could not deserialize ATN with UUID %s (expected %s).\",uuid,ATNDeserializer.SERIALIZED_UUID);\n    throw new UnsupportedOperationException(new InvalidClassException(ATN.class.getName(),reason));\n  }\n  p++;\n  int maxType=ATNDeserializer.toInt(data[p++]);\n  buf.append(\"max type \").append(maxType).append(\"\\n\");\n  int nstates=ATNDeserializer.toInt(data[p++]);\n  for (int i=0; i < nstates; i++) {\n    int stype=ATNDeserializer.toInt(data[p++]);\n    if (stype == ATNState.INVALID_TYPE)     continue;\n    int ruleIndex=ATNDeserializer.toInt(data[p++]);\n    if (ruleIndex == Character.MAX_VALUE) {\n      ruleIndex=-1;\n    }\n    String arg=\"\";\n    if (stype == ATNState.LOOP_END) {\n      int loopBackStateNumber=ATNDeserializer.toInt(data[p++]);\n      arg=\" \" + loopBackStateNumber;\n    }\n else     if (stype == ATNState.PLUS_BLOCK_START || stype == ATNState.STAR_BLOCK_START || stype == ATNState.BLOCK_START) {\n      int endStateNumber=ATNDeserializer.toInt(data[p++]);\n      arg=\" \" + endStateNumber;\n    }\n    buf.append(i).append(\":\").append(ATNState.serializationNames.get(stype)).append(\" \").append(ruleIndex).append(arg).append(\"\\n\");\n  }\n  int numNonGreedyStates=ATNDeserializer.toInt(data[p++]);\n  for (int i=0; i < numNonGreedyStates; i++) {\n    int stateNumber=ATNDeserializer.toInt(data[p++]);\n  }\n  int numPrecedenceStates=ATNDeserializer.toInt(data[p++]);\n  for (int i=0; i < numPrecedenceStates; i++) {\n    int stateNumber=ATNDeserializer.toInt(data[p++]);\n  }\n  int nrules=ATNDeserializer.toInt(data[p++]);\n  for (int i=0; i < nrules; i++) {\n    int s=ATNDeserializer.toInt(data[p++]);\n    if (atn.grammarType == ATNType.LEXER) {\n      int arg1=ATNDeserializer.toInt(data[p++]);\n      buf.append(\"rule \").append(i).append(\":\").append(s).append(\" \").append(arg1).append('\\n');\n    }\n else {\n      buf.append(\"rule \").append(i).append(\":\").append(s).append('\\n');\n    }\n  }\n  int nmodes=ATNDeserializer.toInt(data[p++]);\n  for (int i=0; i < nmodes; i++) {\n    int s=ATNDeserializer.toInt(data[p++]);\n    buf.append(\"mode \").append(i).append(\":\").append(s).append('\\n');\n  }\n  int numBMPSets=ATNDeserializer.toInt(data[p++]);\n  p=appendSets(buf,data,p,numBMPSets,0,ATNDeserializer.getUnicodeDeserializer(ATNDeserializer.UnicodeDeserializingMode.UNICODE_BMP));\n  int numSMPSets=ATNDeserializer.toInt(data[p++]);\n  p=appendSets(buf,data,p,numSMPSets,numBMPSets,ATNDeserializer.getUnicodeDeserializer(ATNDeserializer.UnicodeDeserializingMode.UNICODE_SMP));\n  int nedges=ATNDeserializer.toInt(data[p++]);\n  for (int i=0; i < nedges; i++) {\n    int src=ATNDeserializer.toInt(data[p]);\n    int trg=ATNDeserializer.toInt(data[p + 1]);\n    int ttype=ATNDeserializer.toInt(data[p + 2]);\n    int arg1=ATNDeserializer.toInt(data[p + 3]);\n    int arg2=ATNDeserializer.toInt(data[p + 4]);\n    int arg3=ATNDeserializer.toInt(data[p + 5]);\n    buf.append(src).append(\"->\").append(trg).append(\" \").append(Transition.serializationNames.get(ttype)).append(\" \").append(arg1).append(\",\").append(arg2).append(\",\").append(arg3).append(\"\\n\");\n    p+=6;\n  }\n  int ndecisions=ATNDeserializer.toInt(data[p++]);\n  for (int i=0; i < ndecisions; i++) {\n    int s=ATNDeserializer.toInt(data[p++]);\n    buf.append(i).append(\":\").append(s).append(\"\\n\");\n  }\n  if (atn.grammarType == ATNType.LEXER) {\n    int lexerActionCount=ATNDeserializer.toInt(data[p++]);\n    for (int i=0; i < lexerActionCount; i++) {\n      LexerActionType actionType=LexerActionType.values()[ATNDeserializer.toInt(data[p++])];\n      int data1=ATNDeserializer.toInt(data[p++]);\n      int data2=ATNDeserializer.toInt(data[p++]);\n    }\n  }\n  return buf.toString();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 870,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 521,
        "startColumnNumber" : 4,
        "endLineNumber" : 521,
        "endColumnNumber" : 92
      },
      "nodeContext" : "LexerActionType actionType=LexerActionType.values()[ATNDeserializer.toInt(data[p++])];\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 16,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "org.antlr.v4.runtime.atn.LexerActionType"
  } ],
  "positionList" : [ {
    "charLength" : 15,
    "startLineNumber" : 521,
    "startColumnNumber" : 33,
    "endLineNumber" : 521,
    "endColumnNumber" : 48
  } ],
  "layoutRelationDataList" : [ ]
}