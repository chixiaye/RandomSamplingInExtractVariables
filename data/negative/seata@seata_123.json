{
  "id" : 123,
  "expression" : "byteBuffer",
  "projectName" : "seata@seata",
  "commitID" : "42d41623178ab076b11b27a0f049ac3ed7f1a9dc",
  "filePath" : "/server/src/main/java/io/seata/server/session/BranchSession.java",
  "occurrences" : 19,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "byteBuffer",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 297,
      "startColumnNumber" : 8,
      "endLineNumber" : 297,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 297,
        "startColumnNumber" : 8,
        "endLineNumber" : 297,
        "endColumnNumber" : 26
      },
      "nodeContext" : "byteBuffer.clear()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 297,
        "startColumnNumber" : 8,
        "endLineNumber" : 297,
        "endColumnNumber" : 27
      },
      "nodeContext" : "byteBuffer.clear();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2553,
        "startLineNumber" : 261,
        "startColumnNumber" : 27,
        "endLineNumber" : 335,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  byte[] resourceIdBytes=resourceId != null ? resourceId.getBytes() : null;\n  byte[] lockKeyBytes=lockKey != null ? lockKey.getBytes() : null;\n  byte[] clientIdBytes=clientId != null ? clientId.getBytes() : null;\n  byte[] applicationDataBytes=applicationData != null ? applicationData.getBytes() : null;\n  int size=calBranchSessionSize(resourceIdBytes,lockKeyBytes,clientIdBytes,applicationDataBytes);\n  if (size > MAX_BRANCH_SESSION_SIZE) {\n    if (lockKeyBytes == null) {\n      throw new RuntimeException(\"branch session size exceeded, size : \" + size + \" maxBranchSessionSize : \"+ MAX_BRANCH_SESSION_SIZE);\n    }\n    try {\n      size-=lockKeyBytes.length;\n      lockKeyBytes=CompressUtil.compress(lockKeyBytes);\n    }\n catch (    IOException e) {\n      LOGGER.error(\"compress lockKey error\",e);\n    }\n finally {\n      size+=lockKeyBytes.length;\n    }\n    if (size > MAX_BRANCH_SESSION_SIZE) {\n      throw new RuntimeException(\"compress branch session size exceeded, compressSize : \" + size + \" maxBranchSessionSize : \"+ MAX_BRANCH_SESSION_SIZE);\n    }\n  }\n  ByteBuffer byteBuffer=byteBufferThreadLocal.get();\n  byteBuffer.clear();\n  byteBuffer.putLong(transactionId);\n  byteBuffer.putLong(branchId);\n  if (null != resourceIdBytes) {\n    byteBuffer.putInt(resourceIdBytes.length);\n    byteBuffer.put(resourceIdBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  if (null != lockKeyBytes) {\n    byteBuffer.putInt(lockKeyBytes.length);\n    byteBuffer.put(lockKeyBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  if (null != clientIdBytes) {\n    byteBuffer.putShort((short)clientIdBytes.length);\n    byteBuffer.put(clientIdBytes);\n  }\n else {\n    byteBuffer.putShort((short)0);\n  }\n  if (null != applicationDataBytes) {\n    byteBuffer.putInt(applicationDataBytes.length);\n    byteBuffer.put(applicationDataBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  byteBuffer.put((byte)status.getCode());\n  byteBuffer.flip();\n  byte[] result=new byte[byteBuffer.limit()];\n  byteBuffer.get(result);\n  return result;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 285,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2590,
        "startLineNumber" : 260,
        "startColumnNumber" : 4,
        "endLineNumber" : 335,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public byte[] encode(){\n  byte[] resourceIdBytes=resourceId != null ? resourceId.getBytes() : null;\n  byte[] lockKeyBytes=lockKey != null ? lockKey.getBytes() : null;\n  byte[] clientIdBytes=clientId != null ? clientId.getBytes() : null;\n  byte[] applicationDataBytes=applicationData != null ? applicationData.getBytes() : null;\n  int size=calBranchSessionSize(resourceIdBytes,lockKeyBytes,clientIdBytes,applicationDataBytes);\n  if (size > MAX_BRANCH_SESSION_SIZE) {\n    if (lockKeyBytes == null) {\n      throw new RuntimeException(\"branch session size exceeded, size : \" + size + \" maxBranchSessionSize : \"+ MAX_BRANCH_SESSION_SIZE);\n    }\n    try {\n      size-=lockKeyBytes.length;\n      lockKeyBytes=CompressUtil.compress(lockKeyBytes);\n    }\n catch (    IOException e) {\n      LOGGER.error(\"compress lockKey error\",e);\n    }\n finally {\n      size+=lockKeyBytes.length;\n    }\n    if (size > MAX_BRANCH_SESSION_SIZE) {\n      throw new RuntimeException(\"compress branch session size exceeded, compressSize : \" + size + \" maxBranchSessionSize : \"+ MAX_BRANCH_SESSION_SIZE);\n    }\n  }\n  ByteBuffer byteBuffer=byteBufferThreadLocal.get();\n  byteBuffer.clear();\n  byteBuffer.putLong(transactionId);\n  byteBuffer.putLong(branchId);\n  if (null != resourceIdBytes) {\n    byteBuffer.putInt(resourceIdBytes.length);\n    byteBuffer.put(resourceIdBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  if (null != lockKeyBytes) {\n    byteBuffer.putInt(lockKeyBytes.length);\n    byteBuffer.put(lockKeyBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  if (null != clientIdBytes) {\n    byteBuffer.putShort((short)clientIdBytes.length);\n    byteBuffer.put(clientIdBytes);\n  }\n else {\n    byteBuffer.putShort((short)0);\n  }\n  if (null != applicationDataBytes) {\n    byteBuffer.putInt(applicationDataBytes.length);\n    byteBuffer.put(applicationDataBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  byteBuffer.put((byte)status.getCode());\n  byteBuffer.flip();\n  byte[] result=new byte[byteBuffer.limit()];\n  byteBuffer.get(result);\n  return result;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 293,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 297,
        "startColumnNumber" : 8,
        "endLineNumber" : 297,
        "endColumnNumber" : 27
      },
      "nodeContext" : "byteBuffer.clear();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.nio.ByteBuffer"
  }, {
    "nodeContext" : "byteBuffer",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 299,
      "startColumnNumber" : 8,
      "endLineNumber" : 299,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 299,
        "startColumnNumber" : 8,
        "endLineNumber" : 299,
        "endColumnNumber" : 41
      },
      "nodeContext" : "byteBuffer.putLong(transactionId)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 299,
        "startColumnNumber" : 8,
        "endLineNumber" : 299,
        "endColumnNumber" : 42
      },
      "nodeContext" : "byteBuffer.putLong(transactionId);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2553,
        "startLineNumber" : 261,
        "startColumnNumber" : 27,
        "endLineNumber" : 335,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  byte[] resourceIdBytes=resourceId != null ? resourceId.getBytes() : null;\n  byte[] lockKeyBytes=lockKey != null ? lockKey.getBytes() : null;\n  byte[] clientIdBytes=clientId != null ? clientId.getBytes() : null;\n  byte[] applicationDataBytes=applicationData != null ? applicationData.getBytes() : null;\n  int size=calBranchSessionSize(resourceIdBytes,lockKeyBytes,clientIdBytes,applicationDataBytes);\n  if (size > MAX_BRANCH_SESSION_SIZE) {\n    if (lockKeyBytes == null) {\n      throw new RuntimeException(\"branch session size exceeded, size : \" + size + \" maxBranchSessionSize : \"+ MAX_BRANCH_SESSION_SIZE);\n    }\n    try {\n      size-=lockKeyBytes.length;\n      lockKeyBytes=CompressUtil.compress(lockKeyBytes);\n    }\n catch (    IOException e) {\n      LOGGER.error(\"compress lockKey error\",e);\n    }\n finally {\n      size+=lockKeyBytes.length;\n    }\n    if (size > MAX_BRANCH_SESSION_SIZE) {\n      throw new RuntimeException(\"compress branch session size exceeded, compressSize : \" + size + \" maxBranchSessionSize : \"+ MAX_BRANCH_SESSION_SIZE);\n    }\n  }\n  ByteBuffer byteBuffer=byteBufferThreadLocal.get();\n  byteBuffer.clear();\n  byteBuffer.putLong(transactionId);\n  byteBuffer.putLong(branchId);\n  if (null != resourceIdBytes) {\n    byteBuffer.putInt(resourceIdBytes.length);\n    byteBuffer.put(resourceIdBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  if (null != lockKeyBytes) {\n    byteBuffer.putInt(lockKeyBytes.length);\n    byteBuffer.put(lockKeyBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  if (null != clientIdBytes) {\n    byteBuffer.putShort((short)clientIdBytes.length);\n    byteBuffer.put(clientIdBytes);\n  }\n else {\n    byteBuffer.putShort((short)0);\n  }\n  if (null != applicationDataBytes) {\n    byteBuffer.putInt(applicationDataBytes.length);\n    byteBuffer.put(applicationDataBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  byteBuffer.put((byte)status.getCode());\n  byteBuffer.flip();\n  byte[] result=new byte[byteBuffer.limit()];\n  byteBuffer.get(result);\n  return result;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 285,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2590,
        "startLineNumber" : 260,
        "startColumnNumber" : 4,
        "endLineNumber" : 335,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public byte[] encode(){\n  byte[] resourceIdBytes=resourceId != null ? resourceId.getBytes() : null;\n  byte[] lockKeyBytes=lockKey != null ? lockKey.getBytes() : null;\n  byte[] clientIdBytes=clientId != null ? clientId.getBytes() : null;\n  byte[] applicationDataBytes=applicationData != null ? applicationData.getBytes() : null;\n  int size=calBranchSessionSize(resourceIdBytes,lockKeyBytes,clientIdBytes,applicationDataBytes);\n  if (size > MAX_BRANCH_SESSION_SIZE) {\n    if (lockKeyBytes == null) {\n      throw new RuntimeException(\"branch session size exceeded, size : \" + size + \" maxBranchSessionSize : \"+ MAX_BRANCH_SESSION_SIZE);\n    }\n    try {\n      size-=lockKeyBytes.length;\n      lockKeyBytes=CompressUtil.compress(lockKeyBytes);\n    }\n catch (    IOException e) {\n      LOGGER.error(\"compress lockKey error\",e);\n    }\n finally {\n      size+=lockKeyBytes.length;\n    }\n    if (size > MAX_BRANCH_SESSION_SIZE) {\n      throw new RuntimeException(\"compress branch session size exceeded, compressSize : \" + size + \" maxBranchSessionSize : \"+ MAX_BRANCH_SESSION_SIZE);\n    }\n  }\n  ByteBuffer byteBuffer=byteBufferThreadLocal.get();\n  byteBuffer.clear();\n  byteBuffer.putLong(transactionId);\n  byteBuffer.putLong(branchId);\n  if (null != resourceIdBytes) {\n    byteBuffer.putInt(resourceIdBytes.length);\n    byteBuffer.put(resourceIdBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  if (null != lockKeyBytes) {\n    byteBuffer.putInt(lockKeyBytes.length);\n    byteBuffer.put(lockKeyBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  if (null != clientIdBytes) {\n    byteBuffer.putShort((short)clientIdBytes.length);\n    byteBuffer.put(clientIdBytes);\n  }\n else {\n    byteBuffer.putShort((short)0);\n  }\n  if (null != applicationDataBytes) {\n    byteBuffer.putInt(applicationDataBytes.length);\n    byteBuffer.put(applicationDataBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  byteBuffer.put((byte)status.getCode());\n  byteBuffer.flip();\n  byte[] result=new byte[byteBuffer.limit()];\n  byteBuffer.get(result);\n  return result;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 293,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 299,
        "startColumnNumber" : 8,
        "endLineNumber" : 299,
        "endColumnNumber" : 42
      },
      "nodeContext" : "byteBuffer.putLong(transactionId);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.nio.ByteBuffer"
  }, {
    "nodeContext" : "byteBuffer",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 300,
      "startColumnNumber" : 8,
      "endLineNumber" : 300,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 300,
        "startColumnNumber" : 8,
        "endLineNumber" : 300,
        "endColumnNumber" : 36
      },
      "nodeContext" : "byteBuffer.putLong(branchId)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 300,
        "startColumnNumber" : 8,
        "endLineNumber" : 300,
        "endColumnNumber" : 37
      },
      "nodeContext" : "byteBuffer.putLong(branchId);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2553,
        "startLineNumber" : 261,
        "startColumnNumber" : 27,
        "endLineNumber" : 335,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  byte[] resourceIdBytes=resourceId != null ? resourceId.getBytes() : null;\n  byte[] lockKeyBytes=lockKey != null ? lockKey.getBytes() : null;\n  byte[] clientIdBytes=clientId != null ? clientId.getBytes() : null;\n  byte[] applicationDataBytes=applicationData != null ? applicationData.getBytes() : null;\n  int size=calBranchSessionSize(resourceIdBytes,lockKeyBytes,clientIdBytes,applicationDataBytes);\n  if (size > MAX_BRANCH_SESSION_SIZE) {\n    if (lockKeyBytes == null) {\n      throw new RuntimeException(\"branch session size exceeded, size : \" + size + \" maxBranchSessionSize : \"+ MAX_BRANCH_SESSION_SIZE);\n    }\n    try {\n      size-=lockKeyBytes.length;\n      lockKeyBytes=CompressUtil.compress(lockKeyBytes);\n    }\n catch (    IOException e) {\n      LOGGER.error(\"compress lockKey error\",e);\n    }\n finally {\n      size+=lockKeyBytes.length;\n    }\n    if (size > MAX_BRANCH_SESSION_SIZE) {\n      throw new RuntimeException(\"compress branch session size exceeded, compressSize : \" + size + \" maxBranchSessionSize : \"+ MAX_BRANCH_SESSION_SIZE);\n    }\n  }\n  ByteBuffer byteBuffer=byteBufferThreadLocal.get();\n  byteBuffer.clear();\n  byteBuffer.putLong(transactionId);\n  byteBuffer.putLong(branchId);\n  if (null != resourceIdBytes) {\n    byteBuffer.putInt(resourceIdBytes.length);\n    byteBuffer.put(resourceIdBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  if (null != lockKeyBytes) {\n    byteBuffer.putInt(lockKeyBytes.length);\n    byteBuffer.put(lockKeyBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  if (null != clientIdBytes) {\n    byteBuffer.putShort((short)clientIdBytes.length);\n    byteBuffer.put(clientIdBytes);\n  }\n else {\n    byteBuffer.putShort((short)0);\n  }\n  if (null != applicationDataBytes) {\n    byteBuffer.putInt(applicationDataBytes.length);\n    byteBuffer.put(applicationDataBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  byteBuffer.put((byte)status.getCode());\n  byteBuffer.flip();\n  byte[] result=new byte[byteBuffer.limit()];\n  byteBuffer.get(result);\n  return result;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 285,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2590,
        "startLineNumber" : 260,
        "startColumnNumber" : 4,
        "endLineNumber" : 335,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public byte[] encode(){\n  byte[] resourceIdBytes=resourceId != null ? resourceId.getBytes() : null;\n  byte[] lockKeyBytes=lockKey != null ? lockKey.getBytes() : null;\n  byte[] clientIdBytes=clientId != null ? clientId.getBytes() : null;\n  byte[] applicationDataBytes=applicationData != null ? applicationData.getBytes() : null;\n  int size=calBranchSessionSize(resourceIdBytes,lockKeyBytes,clientIdBytes,applicationDataBytes);\n  if (size > MAX_BRANCH_SESSION_SIZE) {\n    if (lockKeyBytes == null) {\n      throw new RuntimeException(\"branch session size exceeded, size : \" + size + \" maxBranchSessionSize : \"+ MAX_BRANCH_SESSION_SIZE);\n    }\n    try {\n      size-=lockKeyBytes.length;\n      lockKeyBytes=CompressUtil.compress(lockKeyBytes);\n    }\n catch (    IOException e) {\n      LOGGER.error(\"compress lockKey error\",e);\n    }\n finally {\n      size+=lockKeyBytes.length;\n    }\n    if (size > MAX_BRANCH_SESSION_SIZE) {\n      throw new RuntimeException(\"compress branch session size exceeded, compressSize : \" + size + \" maxBranchSessionSize : \"+ MAX_BRANCH_SESSION_SIZE);\n    }\n  }\n  ByteBuffer byteBuffer=byteBufferThreadLocal.get();\n  byteBuffer.clear();\n  byteBuffer.putLong(transactionId);\n  byteBuffer.putLong(branchId);\n  if (null != resourceIdBytes) {\n    byteBuffer.putInt(resourceIdBytes.length);\n    byteBuffer.put(resourceIdBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  if (null != lockKeyBytes) {\n    byteBuffer.putInt(lockKeyBytes.length);\n    byteBuffer.put(lockKeyBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  if (null != clientIdBytes) {\n    byteBuffer.putShort((short)clientIdBytes.length);\n    byteBuffer.put(clientIdBytes);\n  }\n else {\n    byteBuffer.putShort((short)0);\n  }\n  if (null != applicationDataBytes) {\n    byteBuffer.putInt(applicationDataBytes.length);\n    byteBuffer.put(applicationDataBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  byteBuffer.put((byte)status.getCode());\n  byteBuffer.flip();\n  byte[] result=new byte[byteBuffer.limit()];\n  byteBuffer.get(result);\n  return result;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 293,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 300,
        "startColumnNumber" : 8,
        "endLineNumber" : 300,
        "endColumnNumber" : 37
      },
      "nodeContext" : "byteBuffer.putLong(branchId);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.nio.ByteBuffer"
  }, {
    "nodeContext" : "byteBuffer",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 303,
      "startColumnNumber" : 12,
      "endLineNumber" : 303,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 303,
        "startColumnNumber" : 12,
        "endLineNumber" : 303,
        "endColumnNumber" : 53
      },
      "nodeContext" : "byteBuffer.putInt(resourceIdBytes.length)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 303,
        "startColumnNumber" : 12,
        "endLineNumber" : 303,
        "endColumnNumber" : 54
      },
      "nodeContext" : "byteBuffer.putInt(resourceIdBytes.length);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 111,
        "startLineNumber" : 302,
        "startColumnNumber" : 37,
        "endLineNumber" : 305,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  byteBuffer.putInt(resourceIdBytes.length);\n  byteBuffer.put(resourceIdBytes);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 191,
        "startLineNumber" : 302,
        "startColumnNumber" : 8,
        "endLineNumber" : 307,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (null != resourceIdBytes) {\n  byteBuffer.putInt(resourceIdBytes.length);\n  byteBuffer.put(resourceIdBytes);\n}\n else {\n  byteBuffer.putInt(0);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 23,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2553,
        "startLineNumber" : 261,
        "startColumnNumber" : 27,
        "endLineNumber" : 335,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  byte[] resourceIdBytes=resourceId != null ? resourceId.getBytes() : null;\n  byte[] lockKeyBytes=lockKey != null ? lockKey.getBytes() : null;\n  byte[] clientIdBytes=clientId != null ? clientId.getBytes() : null;\n  byte[] applicationDataBytes=applicationData != null ? applicationData.getBytes() : null;\n  int size=calBranchSessionSize(resourceIdBytes,lockKeyBytes,clientIdBytes,applicationDataBytes);\n  if (size > MAX_BRANCH_SESSION_SIZE) {\n    if (lockKeyBytes == null) {\n      throw new RuntimeException(\"branch session size exceeded, size : \" + size + \" maxBranchSessionSize : \"+ MAX_BRANCH_SESSION_SIZE);\n    }\n    try {\n      size-=lockKeyBytes.length;\n      lockKeyBytes=CompressUtil.compress(lockKeyBytes);\n    }\n catch (    IOException e) {\n      LOGGER.error(\"compress lockKey error\",e);\n    }\n finally {\n      size+=lockKeyBytes.length;\n    }\n    if (size > MAX_BRANCH_SESSION_SIZE) {\n      throw new RuntimeException(\"compress branch session size exceeded, compressSize : \" + size + \" maxBranchSessionSize : \"+ MAX_BRANCH_SESSION_SIZE);\n    }\n  }\n  ByteBuffer byteBuffer=byteBufferThreadLocal.get();\n  byteBuffer.clear();\n  byteBuffer.putLong(transactionId);\n  byteBuffer.putLong(branchId);\n  if (null != resourceIdBytes) {\n    byteBuffer.putInt(resourceIdBytes.length);\n    byteBuffer.put(resourceIdBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  if (null != lockKeyBytes) {\n    byteBuffer.putInt(lockKeyBytes.length);\n    byteBuffer.put(lockKeyBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  if (null != clientIdBytes) {\n    byteBuffer.putShort((short)clientIdBytes.length);\n    byteBuffer.put(clientIdBytes);\n  }\n else {\n    byteBuffer.putShort((short)0);\n  }\n  if (null != applicationDataBytes) {\n    byteBuffer.putInt(applicationDataBytes.length);\n    byteBuffer.put(applicationDataBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  byteBuffer.put((byte)status.getCode());\n  byteBuffer.flip();\n  byte[] result=new byte[byteBuffer.limit()];\n  byteBuffer.get(result);\n  return result;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 285,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2590,
        "startLineNumber" : 260,
        "startColumnNumber" : 4,
        "endLineNumber" : 335,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public byte[] encode(){\n  byte[] resourceIdBytes=resourceId != null ? resourceId.getBytes() : null;\n  byte[] lockKeyBytes=lockKey != null ? lockKey.getBytes() : null;\n  byte[] clientIdBytes=clientId != null ? clientId.getBytes() : null;\n  byte[] applicationDataBytes=applicationData != null ? applicationData.getBytes() : null;\n  int size=calBranchSessionSize(resourceIdBytes,lockKeyBytes,clientIdBytes,applicationDataBytes);\n  if (size > MAX_BRANCH_SESSION_SIZE) {\n    if (lockKeyBytes == null) {\n      throw new RuntimeException(\"branch session size exceeded, size : \" + size + \" maxBranchSessionSize : \"+ MAX_BRANCH_SESSION_SIZE);\n    }\n    try {\n      size-=lockKeyBytes.length;\n      lockKeyBytes=CompressUtil.compress(lockKeyBytes);\n    }\n catch (    IOException e) {\n      LOGGER.error(\"compress lockKey error\",e);\n    }\n finally {\n      size+=lockKeyBytes.length;\n    }\n    if (size > MAX_BRANCH_SESSION_SIZE) {\n      throw new RuntimeException(\"compress branch session size exceeded, compressSize : \" + size + \" maxBranchSessionSize : \"+ MAX_BRANCH_SESSION_SIZE);\n    }\n  }\n  ByteBuffer byteBuffer=byteBufferThreadLocal.get();\n  byteBuffer.clear();\n  byteBuffer.putLong(transactionId);\n  byteBuffer.putLong(branchId);\n  if (null != resourceIdBytes) {\n    byteBuffer.putInt(resourceIdBytes.length);\n    byteBuffer.put(resourceIdBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  if (null != lockKeyBytes) {\n    byteBuffer.putInt(lockKeyBytes.length);\n    byteBuffer.put(lockKeyBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  if (null != clientIdBytes) {\n    byteBuffer.putShort((short)clientIdBytes.length);\n    byteBuffer.put(clientIdBytes);\n  }\n else {\n    byteBuffer.putShort((short)0);\n  }\n  if (null != applicationDataBytes) {\n    byteBuffer.putInt(applicationDataBytes.length);\n    byteBuffer.put(applicationDataBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  byteBuffer.put((byte)status.getCode());\n  byteBuffer.flip();\n  byte[] result=new byte[byteBuffer.limit()];\n  byteBuffer.get(result);\n  return result;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 293,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 303,
        "startColumnNumber" : 12,
        "endLineNumber" : 303,
        "endColumnNumber" : 54
      },
      "nodeContext" : "byteBuffer.putInt(resourceIdBytes.length);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.nio.ByteBuffer"
  }, {
    "nodeContext" : "byteBuffer",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 304,
      "startColumnNumber" : 12,
      "endLineNumber" : 304,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 304,
        "startColumnNumber" : 12,
        "endLineNumber" : 304,
        "endColumnNumber" : 43
      },
      "nodeContext" : "byteBuffer.put(resourceIdBytes)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 304,
        "startColumnNumber" : 12,
        "endLineNumber" : 304,
        "endColumnNumber" : 44
      },
      "nodeContext" : "byteBuffer.put(resourceIdBytes);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 111,
        "startLineNumber" : 302,
        "startColumnNumber" : 37,
        "endLineNumber" : 305,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  byteBuffer.putInt(resourceIdBytes.length);\n  byteBuffer.put(resourceIdBytes);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 191,
        "startLineNumber" : 302,
        "startColumnNumber" : 8,
        "endLineNumber" : 307,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (null != resourceIdBytes) {\n  byteBuffer.putInt(resourceIdBytes.length);\n  byteBuffer.put(resourceIdBytes);\n}\n else {\n  byteBuffer.putInt(0);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 23,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2553,
        "startLineNumber" : 261,
        "startColumnNumber" : 27,
        "endLineNumber" : 335,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  byte[] resourceIdBytes=resourceId != null ? resourceId.getBytes() : null;\n  byte[] lockKeyBytes=lockKey != null ? lockKey.getBytes() : null;\n  byte[] clientIdBytes=clientId != null ? clientId.getBytes() : null;\n  byte[] applicationDataBytes=applicationData != null ? applicationData.getBytes() : null;\n  int size=calBranchSessionSize(resourceIdBytes,lockKeyBytes,clientIdBytes,applicationDataBytes);\n  if (size > MAX_BRANCH_SESSION_SIZE) {\n    if (lockKeyBytes == null) {\n      throw new RuntimeException(\"branch session size exceeded, size : \" + size + \" maxBranchSessionSize : \"+ MAX_BRANCH_SESSION_SIZE);\n    }\n    try {\n      size-=lockKeyBytes.length;\n      lockKeyBytes=CompressUtil.compress(lockKeyBytes);\n    }\n catch (    IOException e) {\n      LOGGER.error(\"compress lockKey error\",e);\n    }\n finally {\n      size+=lockKeyBytes.length;\n    }\n    if (size > MAX_BRANCH_SESSION_SIZE) {\n      throw new RuntimeException(\"compress branch session size exceeded, compressSize : \" + size + \" maxBranchSessionSize : \"+ MAX_BRANCH_SESSION_SIZE);\n    }\n  }\n  ByteBuffer byteBuffer=byteBufferThreadLocal.get();\n  byteBuffer.clear();\n  byteBuffer.putLong(transactionId);\n  byteBuffer.putLong(branchId);\n  if (null != resourceIdBytes) {\n    byteBuffer.putInt(resourceIdBytes.length);\n    byteBuffer.put(resourceIdBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  if (null != lockKeyBytes) {\n    byteBuffer.putInt(lockKeyBytes.length);\n    byteBuffer.put(lockKeyBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  if (null != clientIdBytes) {\n    byteBuffer.putShort((short)clientIdBytes.length);\n    byteBuffer.put(clientIdBytes);\n  }\n else {\n    byteBuffer.putShort((short)0);\n  }\n  if (null != applicationDataBytes) {\n    byteBuffer.putInt(applicationDataBytes.length);\n    byteBuffer.put(applicationDataBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  byteBuffer.put((byte)status.getCode());\n  byteBuffer.flip();\n  byte[] result=new byte[byteBuffer.limit()];\n  byteBuffer.get(result);\n  return result;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 285,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2590,
        "startLineNumber" : 260,
        "startColumnNumber" : 4,
        "endLineNumber" : 335,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public byte[] encode(){\n  byte[] resourceIdBytes=resourceId != null ? resourceId.getBytes() : null;\n  byte[] lockKeyBytes=lockKey != null ? lockKey.getBytes() : null;\n  byte[] clientIdBytes=clientId != null ? clientId.getBytes() : null;\n  byte[] applicationDataBytes=applicationData != null ? applicationData.getBytes() : null;\n  int size=calBranchSessionSize(resourceIdBytes,lockKeyBytes,clientIdBytes,applicationDataBytes);\n  if (size > MAX_BRANCH_SESSION_SIZE) {\n    if (lockKeyBytes == null) {\n      throw new RuntimeException(\"branch session size exceeded, size : \" + size + \" maxBranchSessionSize : \"+ MAX_BRANCH_SESSION_SIZE);\n    }\n    try {\n      size-=lockKeyBytes.length;\n      lockKeyBytes=CompressUtil.compress(lockKeyBytes);\n    }\n catch (    IOException e) {\n      LOGGER.error(\"compress lockKey error\",e);\n    }\n finally {\n      size+=lockKeyBytes.length;\n    }\n    if (size > MAX_BRANCH_SESSION_SIZE) {\n      throw new RuntimeException(\"compress branch session size exceeded, compressSize : \" + size + \" maxBranchSessionSize : \"+ MAX_BRANCH_SESSION_SIZE);\n    }\n  }\n  ByteBuffer byteBuffer=byteBufferThreadLocal.get();\n  byteBuffer.clear();\n  byteBuffer.putLong(transactionId);\n  byteBuffer.putLong(branchId);\n  if (null != resourceIdBytes) {\n    byteBuffer.putInt(resourceIdBytes.length);\n    byteBuffer.put(resourceIdBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  if (null != lockKeyBytes) {\n    byteBuffer.putInt(lockKeyBytes.length);\n    byteBuffer.put(lockKeyBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  if (null != clientIdBytes) {\n    byteBuffer.putShort((short)clientIdBytes.length);\n    byteBuffer.put(clientIdBytes);\n  }\n else {\n    byteBuffer.putShort((short)0);\n  }\n  if (null != applicationDataBytes) {\n    byteBuffer.putInt(applicationDataBytes.length);\n    byteBuffer.put(applicationDataBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  byteBuffer.put((byte)status.getCode());\n  byteBuffer.flip();\n  byte[] result=new byte[byteBuffer.limit()];\n  byteBuffer.get(result);\n  return result;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 293,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 304,
        "startColumnNumber" : 12,
        "endLineNumber" : 304,
        "endColumnNumber" : 44
      },
      "nodeContext" : "byteBuffer.put(resourceIdBytes);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.nio.ByteBuffer"
  }, {
    "nodeContext" : "byteBuffer",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 306,
      "startColumnNumber" : 12,
      "endLineNumber" : 306,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 306,
        "startColumnNumber" : 12,
        "endLineNumber" : 306,
        "endColumnNumber" : 32
      },
      "nodeContext" : "byteBuffer.putInt(0)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 306,
        "startColumnNumber" : 12,
        "endLineNumber" : 306,
        "endColumnNumber" : 33
      },
      "nodeContext" : "byteBuffer.putInt(0);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 305,
        "startColumnNumber" : 15,
        "endLineNumber" : 307,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  byteBuffer.putInt(0);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 191,
        "startLineNumber" : 302,
        "startColumnNumber" : 8,
        "endLineNumber" : 307,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (null != resourceIdBytes) {\n  byteBuffer.putInt(resourceIdBytes.length);\n  byteBuffer.put(resourceIdBytes);\n}\n else {\n  byteBuffer.putInt(0);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 23,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2553,
        "startLineNumber" : 261,
        "startColumnNumber" : 27,
        "endLineNumber" : 335,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  byte[] resourceIdBytes=resourceId != null ? resourceId.getBytes() : null;\n  byte[] lockKeyBytes=lockKey != null ? lockKey.getBytes() : null;\n  byte[] clientIdBytes=clientId != null ? clientId.getBytes() : null;\n  byte[] applicationDataBytes=applicationData != null ? applicationData.getBytes() : null;\n  int size=calBranchSessionSize(resourceIdBytes,lockKeyBytes,clientIdBytes,applicationDataBytes);\n  if (size > MAX_BRANCH_SESSION_SIZE) {\n    if (lockKeyBytes == null) {\n      throw new RuntimeException(\"branch session size exceeded, size : \" + size + \" maxBranchSessionSize : \"+ MAX_BRANCH_SESSION_SIZE);\n    }\n    try {\n      size-=lockKeyBytes.length;\n      lockKeyBytes=CompressUtil.compress(lockKeyBytes);\n    }\n catch (    IOException e) {\n      LOGGER.error(\"compress lockKey error\",e);\n    }\n finally {\n      size+=lockKeyBytes.length;\n    }\n    if (size > MAX_BRANCH_SESSION_SIZE) {\n      throw new RuntimeException(\"compress branch session size exceeded, compressSize : \" + size + \" maxBranchSessionSize : \"+ MAX_BRANCH_SESSION_SIZE);\n    }\n  }\n  ByteBuffer byteBuffer=byteBufferThreadLocal.get();\n  byteBuffer.clear();\n  byteBuffer.putLong(transactionId);\n  byteBuffer.putLong(branchId);\n  if (null != resourceIdBytes) {\n    byteBuffer.putInt(resourceIdBytes.length);\n    byteBuffer.put(resourceIdBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  if (null != lockKeyBytes) {\n    byteBuffer.putInt(lockKeyBytes.length);\n    byteBuffer.put(lockKeyBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  if (null != clientIdBytes) {\n    byteBuffer.putShort((short)clientIdBytes.length);\n    byteBuffer.put(clientIdBytes);\n  }\n else {\n    byteBuffer.putShort((short)0);\n  }\n  if (null != applicationDataBytes) {\n    byteBuffer.putInt(applicationDataBytes.length);\n    byteBuffer.put(applicationDataBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  byteBuffer.put((byte)status.getCode());\n  byteBuffer.flip();\n  byte[] result=new byte[byteBuffer.limit()];\n  byteBuffer.get(result);\n  return result;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 285,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2590,
        "startLineNumber" : 260,
        "startColumnNumber" : 4,
        "endLineNumber" : 335,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public byte[] encode(){\n  byte[] resourceIdBytes=resourceId != null ? resourceId.getBytes() : null;\n  byte[] lockKeyBytes=lockKey != null ? lockKey.getBytes() : null;\n  byte[] clientIdBytes=clientId != null ? clientId.getBytes() : null;\n  byte[] applicationDataBytes=applicationData != null ? applicationData.getBytes() : null;\n  int size=calBranchSessionSize(resourceIdBytes,lockKeyBytes,clientIdBytes,applicationDataBytes);\n  if (size > MAX_BRANCH_SESSION_SIZE) {\n    if (lockKeyBytes == null) {\n      throw new RuntimeException(\"branch session size exceeded, size : \" + size + \" maxBranchSessionSize : \"+ MAX_BRANCH_SESSION_SIZE);\n    }\n    try {\n      size-=lockKeyBytes.length;\n      lockKeyBytes=CompressUtil.compress(lockKeyBytes);\n    }\n catch (    IOException e) {\n      LOGGER.error(\"compress lockKey error\",e);\n    }\n finally {\n      size+=lockKeyBytes.length;\n    }\n    if (size > MAX_BRANCH_SESSION_SIZE) {\n      throw new RuntimeException(\"compress branch session size exceeded, compressSize : \" + size + \" maxBranchSessionSize : \"+ MAX_BRANCH_SESSION_SIZE);\n    }\n  }\n  ByteBuffer byteBuffer=byteBufferThreadLocal.get();\n  byteBuffer.clear();\n  byteBuffer.putLong(transactionId);\n  byteBuffer.putLong(branchId);\n  if (null != resourceIdBytes) {\n    byteBuffer.putInt(resourceIdBytes.length);\n    byteBuffer.put(resourceIdBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  if (null != lockKeyBytes) {\n    byteBuffer.putInt(lockKeyBytes.length);\n    byteBuffer.put(lockKeyBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  if (null != clientIdBytes) {\n    byteBuffer.putShort((short)clientIdBytes.length);\n    byteBuffer.put(clientIdBytes);\n  }\n else {\n    byteBuffer.putShort((short)0);\n  }\n  if (null != applicationDataBytes) {\n    byteBuffer.putInt(applicationDataBytes.length);\n    byteBuffer.put(applicationDataBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  byteBuffer.put((byte)status.getCode());\n  byteBuffer.flip();\n  byte[] result=new byte[byteBuffer.limit()];\n  byteBuffer.get(result);\n  return result;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 293,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 306,
        "startColumnNumber" : 12,
        "endLineNumber" : 306,
        "endColumnNumber" : 33
      },
      "nodeContext" : "byteBuffer.putInt(0);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.nio.ByteBuffer"
  }, {
    "nodeContext" : "byteBuffer",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 310,
      "startColumnNumber" : 12,
      "endLineNumber" : 310,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 310,
        "startColumnNumber" : 12,
        "endLineNumber" : 310,
        "endColumnNumber" : 50
      },
      "nodeContext" : "byteBuffer.putInt(lockKeyBytes.length)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 310,
        "startColumnNumber" : 12,
        "endLineNumber" : 310,
        "endColumnNumber" : 51
      },
      "nodeContext" : "byteBuffer.putInt(lockKeyBytes.length);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 105,
        "startLineNumber" : 309,
        "startColumnNumber" : 34,
        "endLineNumber" : 312,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  byteBuffer.putInt(lockKeyBytes.length);\n  byteBuffer.put(lockKeyBytes);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 182,
        "startLineNumber" : 309,
        "startColumnNumber" : 8,
        "endLineNumber" : 314,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (null != lockKeyBytes) {\n  byteBuffer.putInt(lockKeyBytes.length);\n  byteBuffer.put(lockKeyBytes);\n}\n else {\n  byteBuffer.putInt(0);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 23,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2553,
        "startLineNumber" : 261,
        "startColumnNumber" : 27,
        "endLineNumber" : 335,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  byte[] resourceIdBytes=resourceId != null ? resourceId.getBytes() : null;\n  byte[] lockKeyBytes=lockKey != null ? lockKey.getBytes() : null;\n  byte[] clientIdBytes=clientId != null ? clientId.getBytes() : null;\n  byte[] applicationDataBytes=applicationData != null ? applicationData.getBytes() : null;\n  int size=calBranchSessionSize(resourceIdBytes,lockKeyBytes,clientIdBytes,applicationDataBytes);\n  if (size > MAX_BRANCH_SESSION_SIZE) {\n    if (lockKeyBytes == null) {\n      throw new RuntimeException(\"branch session size exceeded, size : \" + size + \" maxBranchSessionSize : \"+ MAX_BRANCH_SESSION_SIZE);\n    }\n    try {\n      size-=lockKeyBytes.length;\n      lockKeyBytes=CompressUtil.compress(lockKeyBytes);\n    }\n catch (    IOException e) {\n      LOGGER.error(\"compress lockKey error\",e);\n    }\n finally {\n      size+=lockKeyBytes.length;\n    }\n    if (size > MAX_BRANCH_SESSION_SIZE) {\n      throw new RuntimeException(\"compress branch session size exceeded, compressSize : \" + size + \" maxBranchSessionSize : \"+ MAX_BRANCH_SESSION_SIZE);\n    }\n  }\n  ByteBuffer byteBuffer=byteBufferThreadLocal.get();\n  byteBuffer.clear();\n  byteBuffer.putLong(transactionId);\n  byteBuffer.putLong(branchId);\n  if (null != resourceIdBytes) {\n    byteBuffer.putInt(resourceIdBytes.length);\n    byteBuffer.put(resourceIdBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  if (null != lockKeyBytes) {\n    byteBuffer.putInt(lockKeyBytes.length);\n    byteBuffer.put(lockKeyBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  if (null != clientIdBytes) {\n    byteBuffer.putShort((short)clientIdBytes.length);\n    byteBuffer.put(clientIdBytes);\n  }\n else {\n    byteBuffer.putShort((short)0);\n  }\n  if (null != applicationDataBytes) {\n    byteBuffer.putInt(applicationDataBytes.length);\n    byteBuffer.put(applicationDataBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  byteBuffer.put((byte)status.getCode());\n  byteBuffer.flip();\n  byte[] result=new byte[byteBuffer.limit()];\n  byteBuffer.get(result);\n  return result;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 285,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2590,
        "startLineNumber" : 260,
        "startColumnNumber" : 4,
        "endLineNumber" : 335,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public byte[] encode(){\n  byte[] resourceIdBytes=resourceId != null ? resourceId.getBytes() : null;\n  byte[] lockKeyBytes=lockKey != null ? lockKey.getBytes() : null;\n  byte[] clientIdBytes=clientId != null ? clientId.getBytes() : null;\n  byte[] applicationDataBytes=applicationData != null ? applicationData.getBytes() : null;\n  int size=calBranchSessionSize(resourceIdBytes,lockKeyBytes,clientIdBytes,applicationDataBytes);\n  if (size > MAX_BRANCH_SESSION_SIZE) {\n    if (lockKeyBytes == null) {\n      throw new RuntimeException(\"branch session size exceeded, size : \" + size + \" maxBranchSessionSize : \"+ MAX_BRANCH_SESSION_SIZE);\n    }\n    try {\n      size-=lockKeyBytes.length;\n      lockKeyBytes=CompressUtil.compress(lockKeyBytes);\n    }\n catch (    IOException e) {\n      LOGGER.error(\"compress lockKey error\",e);\n    }\n finally {\n      size+=lockKeyBytes.length;\n    }\n    if (size > MAX_BRANCH_SESSION_SIZE) {\n      throw new RuntimeException(\"compress branch session size exceeded, compressSize : \" + size + \" maxBranchSessionSize : \"+ MAX_BRANCH_SESSION_SIZE);\n    }\n  }\n  ByteBuffer byteBuffer=byteBufferThreadLocal.get();\n  byteBuffer.clear();\n  byteBuffer.putLong(transactionId);\n  byteBuffer.putLong(branchId);\n  if (null != resourceIdBytes) {\n    byteBuffer.putInt(resourceIdBytes.length);\n    byteBuffer.put(resourceIdBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  if (null != lockKeyBytes) {\n    byteBuffer.putInt(lockKeyBytes.length);\n    byteBuffer.put(lockKeyBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  if (null != clientIdBytes) {\n    byteBuffer.putShort((short)clientIdBytes.length);\n    byteBuffer.put(clientIdBytes);\n  }\n else {\n    byteBuffer.putShort((short)0);\n  }\n  if (null != applicationDataBytes) {\n    byteBuffer.putInt(applicationDataBytes.length);\n    byteBuffer.put(applicationDataBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  byteBuffer.put((byte)status.getCode());\n  byteBuffer.flip();\n  byte[] result=new byte[byteBuffer.limit()];\n  byteBuffer.get(result);\n  return result;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 293,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 310,
        "startColumnNumber" : 12,
        "endLineNumber" : 310,
        "endColumnNumber" : 51
      },
      "nodeContext" : "byteBuffer.putInt(lockKeyBytes.length);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.nio.ByteBuffer"
  }, {
    "nodeContext" : "byteBuffer",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 311,
      "startColumnNumber" : 12,
      "endLineNumber" : 311,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 311,
        "startColumnNumber" : 12,
        "endLineNumber" : 311,
        "endColumnNumber" : 40
      },
      "nodeContext" : "byteBuffer.put(lockKeyBytes)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 311,
        "startColumnNumber" : 12,
        "endLineNumber" : 311,
        "endColumnNumber" : 41
      },
      "nodeContext" : "byteBuffer.put(lockKeyBytes);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 105,
        "startLineNumber" : 309,
        "startColumnNumber" : 34,
        "endLineNumber" : 312,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  byteBuffer.putInt(lockKeyBytes.length);\n  byteBuffer.put(lockKeyBytes);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 182,
        "startLineNumber" : 309,
        "startColumnNumber" : 8,
        "endLineNumber" : 314,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (null != lockKeyBytes) {\n  byteBuffer.putInt(lockKeyBytes.length);\n  byteBuffer.put(lockKeyBytes);\n}\n else {\n  byteBuffer.putInt(0);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 23,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2553,
        "startLineNumber" : 261,
        "startColumnNumber" : 27,
        "endLineNumber" : 335,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  byte[] resourceIdBytes=resourceId != null ? resourceId.getBytes() : null;\n  byte[] lockKeyBytes=lockKey != null ? lockKey.getBytes() : null;\n  byte[] clientIdBytes=clientId != null ? clientId.getBytes() : null;\n  byte[] applicationDataBytes=applicationData != null ? applicationData.getBytes() : null;\n  int size=calBranchSessionSize(resourceIdBytes,lockKeyBytes,clientIdBytes,applicationDataBytes);\n  if (size > MAX_BRANCH_SESSION_SIZE) {\n    if (lockKeyBytes == null) {\n      throw new RuntimeException(\"branch session size exceeded, size : \" + size + \" maxBranchSessionSize : \"+ MAX_BRANCH_SESSION_SIZE);\n    }\n    try {\n      size-=lockKeyBytes.length;\n      lockKeyBytes=CompressUtil.compress(lockKeyBytes);\n    }\n catch (    IOException e) {\n      LOGGER.error(\"compress lockKey error\",e);\n    }\n finally {\n      size+=lockKeyBytes.length;\n    }\n    if (size > MAX_BRANCH_SESSION_SIZE) {\n      throw new RuntimeException(\"compress branch session size exceeded, compressSize : \" + size + \" maxBranchSessionSize : \"+ MAX_BRANCH_SESSION_SIZE);\n    }\n  }\n  ByteBuffer byteBuffer=byteBufferThreadLocal.get();\n  byteBuffer.clear();\n  byteBuffer.putLong(transactionId);\n  byteBuffer.putLong(branchId);\n  if (null != resourceIdBytes) {\n    byteBuffer.putInt(resourceIdBytes.length);\n    byteBuffer.put(resourceIdBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  if (null != lockKeyBytes) {\n    byteBuffer.putInt(lockKeyBytes.length);\n    byteBuffer.put(lockKeyBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  if (null != clientIdBytes) {\n    byteBuffer.putShort((short)clientIdBytes.length);\n    byteBuffer.put(clientIdBytes);\n  }\n else {\n    byteBuffer.putShort((short)0);\n  }\n  if (null != applicationDataBytes) {\n    byteBuffer.putInt(applicationDataBytes.length);\n    byteBuffer.put(applicationDataBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  byteBuffer.put((byte)status.getCode());\n  byteBuffer.flip();\n  byte[] result=new byte[byteBuffer.limit()];\n  byteBuffer.get(result);\n  return result;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 285,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2590,
        "startLineNumber" : 260,
        "startColumnNumber" : 4,
        "endLineNumber" : 335,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public byte[] encode(){\n  byte[] resourceIdBytes=resourceId != null ? resourceId.getBytes() : null;\n  byte[] lockKeyBytes=lockKey != null ? lockKey.getBytes() : null;\n  byte[] clientIdBytes=clientId != null ? clientId.getBytes() : null;\n  byte[] applicationDataBytes=applicationData != null ? applicationData.getBytes() : null;\n  int size=calBranchSessionSize(resourceIdBytes,lockKeyBytes,clientIdBytes,applicationDataBytes);\n  if (size > MAX_BRANCH_SESSION_SIZE) {\n    if (lockKeyBytes == null) {\n      throw new RuntimeException(\"branch session size exceeded, size : \" + size + \" maxBranchSessionSize : \"+ MAX_BRANCH_SESSION_SIZE);\n    }\n    try {\n      size-=lockKeyBytes.length;\n      lockKeyBytes=CompressUtil.compress(lockKeyBytes);\n    }\n catch (    IOException e) {\n      LOGGER.error(\"compress lockKey error\",e);\n    }\n finally {\n      size+=lockKeyBytes.length;\n    }\n    if (size > MAX_BRANCH_SESSION_SIZE) {\n      throw new RuntimeException(\"compress branch session size exceeded, compressSize : \" + size + \" maxBranchSessionSize : \"+ MAX_BRANCH_SESSION_SIZE);\n    }\n  }\n  ByteBuffer byteBuffer=byteBufferThreadLocal.get();\n  byteBuffer.clear();\n  byteBuffer.putLong(transactionId);\n  byteBuffer.putLong(branchId);\n  if (null != resourceIdBytes) {\n    byteBuffer.putInt(resourceIdBytes.length);\n    byteBuffer.put(resourceIdBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  if (null != lockKeyBytes) {\n    byteBuffer.putInt(lockKeyBytes.length);\n    byteBuffer.put(lockKeyBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  if (null != clientIdBytes) {\n    byteBuffer.putShort((short)clientIdBytes.length);\n    byteBuffer.put(clientIdBytes);\n  }\n else {\n    byteBuffer.putShort((short)0);\n  }\n  if (null != applicationDataBytes) {\n    byteBuffer.putInt(applicationDataBytes.length);\n    byteBuffer.put(applicationDataBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  byteBuffer.put((byte)status.getCode());\n  byteBuffer.flip();\n  byte[] result=new byte[byteBuffer.limit()];\n  byteBuffer.get(result);\n  return result;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 293,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 311,
        "startColumnNumber" : 12,
        "endLineNumber" : 311,
        "endColumnNumber" : 41
      },
      "nodeContext" : "byteBuffer.put(lockKeyBytes);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.nio.ByteBuffer"
  }, {
    "nodeContext" : "byteBuffer",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 313,
      "startColumnNumber" : 12,
      "endLineNumber" : 313,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 313,
        "startColumnNumber" : 12,
        "endLineNumber" : 313,
        "endColumnNumber" : 32
      },
      "nodeContext" : "byteBuffer.putInt(0)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 313,
        "startColumnNumber" : 12,
        "endLineNumber" : 313,
        "endColumnNumber" : 33
      },
      "nodeContext" : "byteBuffer.putInt(0);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 312,
        "startColumnNumber" : 15,
        "endLineNumber" : 314,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  byteBuffer.putInt(0);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 182,
        "startLineNumber" : 309,
        "startColumnNumber" : 8,
        "endLineNumber" : 314,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (null != lockKeyBytes) {\n  byteBuffer.putInt(lockKeyBytes.length);\n  byteBuffer.put(lockKeyBytes);\n}\n else {\n  byteBuffer.putInt(0);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 23,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2553,
        "startLineNumber" : 261,
        "startColumnNumber" : 27,
        "endLineNumber" : 335,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  byte[] resourceIdBytes=resourceId != null ? resourceId.getBytes() : null;\n  byte[] lockKeyBytes=lockKey != null ? lockKey.getBytes() : null;\n  byte[] clientIdBytes=clientId != null ? clientId.getBytes() : null;\n  byte[] applicationDataBytes=applicationData != null ? applicationData.getBytes() : null;\n  int size=calBranchSessionSize(resourceIdBytes,lockKeyBytes,clientIdBytes,applicationDataBytes);\n  if (size > MAX_BRANCH_SESSION_SIZE) {\n    if (lockKeyBytes == null) {\n      throw new RuntimeException(\"branch session size exceeded, size : \" + size + \" maxBranchSessionSize : \"+ MAX_BRANCH_SESSION_SIZE);\n    }\n    try {\n      size-=lockKeyBytes.length;\n      lockKeyBytes=CompressUtil.compress(lockKeyBytes);\n    }\n catch (    IOException e) {\n      LOGGER.error(\"compress lockKey error\",e);\n    }\n finally {\n      size+=lockKeyBytes.length;\n    }\n    if (size > MAX_BRANCH_SESSION_SIZE) {\n      throw new RuntimeException(\"compress branch session size exceeded, compressSize : \" + size + \" maxBranchSessionSize : \"+ MAX_BRANCH_SESSION_SIZE);\n    }\n  }\n  ByteBuffer byteBuffer=byteBufferThreadLocal.get();\n  byteBuffer.clear();\n  byteBuffer.putLong(transactionId);\n  byteBuffer.putLong(branchId);\n  if (null != resourceIdBytes) {\n    byteBuffer.putInt(resourceIdBytes.length);\n    byteBuffer.put(resourceIdBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  if (null != lockKeyBytes) {\n    byteBuffer.putInt(lockKeyBytes.length);\n    byteBuffer.put(lockKeyBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  if (null != clientIdBytes) {\n    byteBuffer.putShort((short)clientIdBytes.length);\n    byteBuffer.put(clientIdBytes);\n  }\n else {\n    byteBuffer.putShort((short)0);\n  }\n  if (null != applicationDataBytes) {\n    byteBuffer.putInt(applicationDataBytes.length);\n    byteBuffer.put(applicationDataBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  byteBuffer.put((byte)status.getCode());\n  byteBuffer.flip();\n  byte[] result=new byte[byteBuffer.limit()];\n  byteBuffer.get(result);\n  return result;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 285,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2590,
        "startLineNumber" : 260,
        "startColumnNumber" : 4,
        "endLineNumber" : 335,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public byte[] encode(){\n  byte[] resourceIdBytes=resourceId != null ? resourceId.getBytes() : null;\n  byte[] lockKeyBytes=lockKey != null ? lockKey.getBytes() : null;\n  byte[] clientIdBytes=clientId != null ? clientId.getBytes() : null;\n  byte[] applicationDataBytes=applicationData != null ? applicationData.getBytes() : null;\n  int size=calBranchSessionSize(resourceIdBytes,lockKeyBytes,clientIdBytes,applicationDataBytes);\n  if (size > MAX_BRANCH_SESSION_SIZE) {\n    if (lockKeyBytes == null) {\n      throw new RuntimeException(\"branch session size exceeded, size : \" + size + \" maxBranchSessionSize : \"+ MAX_BRANCH_SESSION_SIZE);\n    }\n    try {\n      size-=lockKeyBytes.length;\n      lockKeyBytes=CompressUtil.compress(lockKeyBytes);\n    }\n catch (    IOException e) {\n      LOGGER.error(\"compress lockKey error\",e);\n    }\n finally {\n      size+=lockKeyBytes.length;\n    }\n    if (size > MAX_BRANCH_SESSION_SIZE) {\n      throw new RuntimeException(\"compress branch session size exceeded, compressSize : \" + size + \" maxBranchSessionSize : \"+ MAX_BRANCH_SESSION_SIZE);\n    }\n  }\n  ByteBuffer byteBuffer=byteBufferThreadLocal.get();\n  byteBuffer.clear();\n  byteBuffer.putLong(transactionId);\n  byteBuffer.putLong(branchId);\n  if (null != resourceIdBytes) {\n    byteBuffer.putInt(resourceIdBytes.length);\n    byteBuffer.put(resourceIdBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  if (null != lockKeyBytes) {\n    byteBuffer.putInt(lockKeyBytes.length);\n    byteBuffer.put(lockKeyBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  if (null != clientIdBytes) {\n    byteBuffer.putShort((short)clientIdBytes.length);\n    byteBuffer.put(clientIdBytes);\n  }\n else {\n    byteBuffer.putShort((short)0);\n  }\n  if (null != applicationDataBytes) {\n    byteBuffer.putInt(applicationDataBytes.length);\n    byteBuffer.put(applicationDataBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  byteBuffer.put((byte)status.getCode());\n  byteBuffer.flip();\n  byte[] result=new byte[byteBuffer.limit()];\n  byteBuffer.get(result);\n  return result;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 293,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 313,
        "startColumnNumber" : 12,
        "endLineNumber" : 313,
        "endColumnNumber" : 33
      },
      "nodeContext" : "byteBuffer.putInt(0);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.nio.ByteBuffer"
  }, {
    "nodeContext" : "byteBuffer",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 317,
      "startColumnNumber" : 12,
      "endLineNumber" : 317,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 317,
        "startColumnNumber" : 12,
        "endLineNumber" : 317,
        "endColumnNumber" : 60
      },
      "nodeContext" : "byteBuffer.putShort((short)clientIdBytes.length)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 317,
        "startColumnNumber" : 12,
        "endLineNumber" : 317,
        "endColumnNumber" : 61
      },
      "nodeContext" : "byteBuffer.putShort((short)clientIdBytes.length);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 116,
        "startLineNumber" : 316,
        "startColumnNumber" : 35,
        "endLineNumber" : 319,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  byteBuffer.putShort((short)clientIdBytes.length);\n  byteBuffer.put(clientIdBytes);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 203,
        "startLineNumber" : 316,
        "startColumnNumber" : 8,
        "endLineNumber" : 321,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (null != clientIdBytes) {\n  byteBuffer.putShort((short)clientIdBytes.length);\n  byteBuffer.put(clientIdBytes);\n}\n else {\n  byteBuffer.putShort((short)0);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 27,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2553,
        "startLineNumber" : 261,
        "startColumnNumber" : 27,
        "endLineNumber" : 335,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  byte[] resourceIdBytes=resourceId != null ? resourceId.getBytes() : null;\n  byte[] lockKeyBytes=lockKey != null ? lockKey.getBytes() : null;\n  byte[] clientIdBytes=clientId != null ? clientId.getBytes() : null;\n  byte[] applicationDataBytes=applicationData != null ? applicationData.getBytes() : null;\n  int size=calBranchSessionSize(resourceIdBytes,lockKeyBytes,clientIdBytes,applicationDataBytes);\n  if (size > MAX_BRANCH_SESSION_SIZE) {\n    if (lockKeyBytes == null) {\n      throw new RuntimeException(\"branch session size exceeded, size : \" + size + \" maxBranchSessionSize : \"+ MAX_BRANCH_SESSION_SIZE);\n    }\n    try {\n      size-=lockKeyBytes.length;\n      lockKeyBytes=CompressUtil.compress(lockKeyBytes);\n    }\n catch (    IOException e) {\n      LOGGER.error(\"compress lockKey error\",e);\n    }\n finally {\n      size+=lockKeyBytes.length;\n    }\n    if (size > MAX_BRANCH_SESSION_SIZE) {\n      throw new RuntimeException(\"compress branch session size exceeded, compressSize : \" + size + \" maxBranchSessionSize : \"+ MAX_BRANCH_SESSION_SIZE);\n    }\n  }\n  ByteBuffer byteBuffer=byteBufferThreadLocal.get();\n  byteBuffer.clear();\n  byteBuffer.putLong(transactionId);\n  byteBuffer.putLong(branchId);\n  if (null != resourceIdBytes) {\n    byteBuffer.putInt(resourceIdBytes.length);\n    byteBuffer.put(resourceIdBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  if (null != lockKeyBytes) {\n    byteBuffer.putInt(lockKeyBytes.length);\n    byteBuffer.put(lockKeyBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  if (null != clientIdBytes) {\n    byteBuffer.putShort((short)clientIdBytes.length);\n    byteBuffer.put(clientIdBytes);\n  }\n else {\n    byteBuffer.putShort((short)0);\n  }\n  if (null != applicationDataBytes) {\n    byteBuffer.putInt(applicationDataBytes.length);\n    byteBuffer.put(applicationDataBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  byteBuffer.put((byte)status.getCode());\n  byteBuffer.flip();\n  byte[] result=new byte[byteBuffer.limit()];\n  byteBuffer.get(result);\n  return result;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 285,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2590,
        "startLineNumber" : 260,
        "startColumnNumber" : 4,
        "endLineNumber" : 335,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public byte[] encode(){\n  byte[] resourceIdBytes=resourceId != null ? resourceId.getBytes() : null;\n  byte[] lockKeyBytes=lockKey != null ? lockKey.getBytes() : null;\n  byte[] clientIdBytes=clientId != null ? clientId.getBytes() : null;\n  byte[] applicationDataBytes=applicationData != null ? applicationData.getBytes() : null;\n  int size=calBranchSessionSize(resourceIdBytes,lockKeyBytes,clientIdBytes,applicationDataBytes);\n  if (size > MAX_BRANCH_SESSION_SIZE) {\n    if (lockKeyBytes == null) {\n      throw new RuntimeException(\"branch session size exceeded, size : \" + size + \" maxBranchSessionSize : \"+ MAX_BRANCH_SESSION_SIZE);\n    }\n    try {\n      size-=lockKeyBytes.length;\n      lockKeyBytes=CompressUtil.compress(lockKeyBytes);\n    }\n catch (    IOException e) {\n      LOGGER.error(\"compress lockKey error\",e);\n    }\n finally {\n      size+=lockKeyBytes.length;\n    }\n    if (size > MAX_BRANCH_SESSION_SIZE) {\n      throw new RuntimeException(\"compress branch session size exceeded, compressSize : \" + size + \" maxBranchSessionSize : \"+ MAX_BRANCH_SESSION_SIZE);\n    }\n  }\n  ByteBuffer byteBuffer=byteBufferThreadLocal.get();\n  byteBuffer.clear();\n  byteBuffer.putLong(transactionId);\n  byteBuffer.putLong(branchId);\n  if (null != resourceIdBytes) {\n    byteBuffer.putInt(resourceIdBytes.length);\n    byteBuffer.put(resourceIdBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  if (null != lockKeyBytes) {\n    byteBuffer.putInt(lockKeyBytes.length);\n    byteBuffer.put(lockKeyBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  if (null != clientIdBytes) {\n    byteBuffer.putShort((short)clientIdBytes.length);\n    byteBuffer.put(clientIdBytes);\n  }\n else {\n    byteBuffer.putShort((short)0);\n  }\n  if (null != applicationDataBytes) {\n    byteBuffer.putInt(applicationDataBytes.length);\n    byteBuffer.put(applicationDataBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  byteBuffer.put((byte)status.getCode());\n  byteBuffer.flip();\n  byte[] result=new byte[byteBuffer.limit()];\n  byteBuffer.get(result);\n  return result;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 293,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 317,
        "startColumnNumber" : 12,
        "endLineNumber" : 317,
        "endColumnNumber" : 61
      },
      "nodeContext" : "byteBuffer.putShort((short)clientIdBytes.length);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.nio.ByteBuffer"
  }, {
    "nodeContext" : "byteBuffer",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 318,
      "startColumnNumber" : 12,
      "endLineNumber" : 318,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 318,
        "startColumnNumber" : 12,
        "endLineNumber" : 318,
        "endColumnNumber" : 41
      },
      "nodeContext" : "byteBuffer.put(clientIdBytes)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 318,
        "startColumnNumber" : 12,
        "endLineNumber" : 318,
        "endColumnNumber" : 42
      },
      "nodeContext" : "byteBuffer.put(clientIdBytes);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 116,
        "startLineNumber" : 316,
        "startColumnNumber" : 35,
        "endLineNumber" : 319,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  byteBuffer.putShort((short)clientIdBytes.length);\n  byteBuffer.put(clientIdBytes);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 203,
        "startLineNumber" : 316,
        "startColumnNumber" : 8,
        "endLineNumber" : 321,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (null != clientIdBytes) {\n  byteBuffer.putShort((short)clientIdBytes.length);\n  byteBuffer.put(clientIdBytes);\n}\n else {\n  byteBuffer.putShort((short)0);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 27,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2553,
        "startLineNumber" : 261,
        "startColumnNumber" : 27,
        "endLineNumber" : 335,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  byte[] resourceIdBytes=resourceId != null ? resourceId.getBytes() : null;\n  byte[] lockKeyBytes=lockKey != null ? lockKey.getBytes() : null;\n  byte[] clientIdBytes=clientId != null ? clientId.getBytes() : null;\n  byte[] applicationDataBytes=applicationData != null ? applicationData.getBytes() : null;\n  int size=calBranchSessionSize(resourceIdBytes,lockKeyBytes,clientIdBytes,applicationDataBytes);\n  if (size > MAX_BRANCH_SESSION_SIZE) {\n    if (lockKeyBytes == null) {\n      throw new RuntimeException(\"branch session size exceeded, size : \" + size + \" maxBranchSessionSize : \"+ MAX_BRANCH_SESSION_SIZE);\n    }\n    try {\n      size-=lockKeyBytes.length;\n      lockKeyBytes=CompressUtil.compress(lockKeyBytes);\n    }\n catch (    IOException e) {\n      LOGGER.error(\"compress lockKey error\",e);\n    }\n finally {\n      size+=lockKeyBytes.length;\n    }\n    if (size > MAX_BRANCH_SESSION_SIZE) {\n      throw new RuntimeException(\"compress branch session size exceeded, compressSize : \" + size + \" maxBranchSessionSize : \"+ MAX_BRANCH_SESSION_SIZE);\n    }\n  }\n  ByteBuffer byteBuffer=byteBufferThreadLocal.get();\n  byteBuffer.clear();\n  byteBuffer.putLong(transactionId);\n  byteBuffer.putLong(branchId);\n  if (null != resourceIdBytes) {\n    byteBuffer.putInt(resourceIdBytes.length);\n    byteBuffer.put(resourceIdBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  if (null != lockKeyBytes) {\n    byteBuffer.putInt(lockKeyBytes.length);\n    byteBuffer.put(lockKeyBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  if (null != clientIdBytes) {\n    byteBuffer.putShort((short)clientIdBytes.length);\n    byteBuffer.put(clientIdBytes);\n  }\n else {\n    byteBuffer.putShort((short)0);\n  }\n  if (null != applicationDataBytes) {\n    byteBuffer.putInt(applicationDataBytes.length);\n    byteBuffer.put(applicationDataBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  byteBuffer.put((byte)status.getCode());\n  byteBuffer.flip();\n  byte[] result=new byte[byteBuffer.limit()];\n  byteBuffer.get(result);\n  return result;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 285,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2590,
        "startLineNumber" : 260,
        "startColumnNumber" : 4,
        "endLineNumber" : 335,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public byte[] encode(){\n  byte[] resourceIdBytes=resourceId != null ? resourceId.getBytes() : null;\n  byte[] lockKeyBytes=lockKey != null ? lockKey.getBytes() : null;\n  byte[] clientIdBytes=clientId != null ? clientId.getBytes() : null;\n  byte[] applicationDataBytes=applicationData != null ? applicationData.getBytes() : null;\n  int size=calBranchSessionSize(resourceIdBytes,lockKeyBytes,clientIdBytes,applicationDataBytes);\n  if (size > MAX_BRANCH_SESSION_SIZE) {\n    if (lockKeyBytes == null) {\n      throw new RuntimeException(\"branch session size exceeded, size : \" + size + \" maxBranchSessionSize : \"+ MAX_BRANCH_SESSION_SIZE);\n    }\n    try {\n      size-=lockKeyBytes.length;\n      lockKeyBytes=CompressUtil.compress(lockKeyBytes);\n    }\n catch (    IOException e) {\n      LOGGER.error(\"compress lockKey error\",e);\n    }\n finally {\n      size+=lockKeyBytes.length;\n    }\n    if (size > MAX_BRANCH_SESSION_SIZE) {\n      throw new RuntimeException(\"compress branch session size exceeded, compressSize : \" + size + \" maxBranchSessionSize : \"+ MAX_BRANCH_SESSION_SIZE);\n    }\n  }\n  ByteBuffer byteBuffer=byteBufferThreadLocal.get();\n  byteBuffer.clear();\n  byteBuffer.putLong(transactionId);\n  byteBuffer.putLong(branchId);\n  if (null != resourceIdBytes) {\n    byteBuffer.putInt(resourceIdBytes.length);\n    byteBuffer.put(resourceIdBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  if (null != lockKeyBytes) {\n    byteBuffer.putInt(lockKeyBytes.length);\n    byteBuffer.put(lockKeyBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  if (null != clientIdBytes) {\n    byteBuffer.putShort((short)clientIdBytes.length);\n    byteBuffer.put(clientIdBytes);\n  }\n else {\n    byteBuffer.putShort((short)0);\n  }\n  if (null != applicationDataBytes) {\n    byteBuffer.putInt(applicationDataBytes.length);\n    byteBuffer.put(applicationDataBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  byteBuffer.put((byte)status.getCode());\n  byteBuffer.flip();\n  byte[] result=new byte[byteBuffer.limit()];\n  byteBuffer.get(result);\n  return result;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 293,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 318,
        "startColumnNumber" : 12,
        "endLineNumber" : 318,
        "endColumnNumber" : 42
      },
      "nodeContext" : "byteBuffer.put(clientIdBytes);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.nio.ByteBuffer"
  }, {
    "nodeContext" : "byteBuffer",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 320,
      "startColumnNumber" : 12,
      "endLineNumber" : 320,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 320,
        "startColumnNumber" : 12,
        "endLineNumber" : 320,
        "endColumnNumber" : 41
      },
      "nodeContext" : "byteBuffer.putShort((short)0)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 320,
        "startColumnNumber" : 12,
        "endLineNumber" : 320,
        "endColumnNumber" : 42
      },
      "nodeContext" : "byteBuffer.putShort((short)0);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 319,
        "startColumnNumber" : 15,
        "endLineNumber" : 321,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  byteBuffer.putShort((short)0);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 203,
        "startLineNumber" : 316,
        "startColumnNumber" : 8,
        "endLineNumber" : 321,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (null != clientIdBytes) {\n  byteBuffer.putShort((short)clientIdBytes.length);\n  byteBuffer.put(clientIdBytes);\n}\n else {\n  byteBuffer.putShort((short)0);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 27,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2553,
        "startLineNumber" : 261,
        "startColumnNumber" : 27,
        "endLineNumber" : 335,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  byte[] resourceIdBytes=resourceId != null ? resourceId.getBytes() : null;\n  byte[] lockKeyBytes=lockKey != null ? lockKey.getBytes() : null;\n  byte[] clientIdBytes=clientId != null ? clientId.getBytes() : null;\n  byte[] applicationDataBytes=applicationData != null ? applicationData.getBytes() : null;\n  int size=calBranchSessionSize(resourceIdBytes,lockKeyBytes,clientIdBytes,applicationDataBytes);\n  if (size > MAX_BRANCH_SESSION_SIZE) {\n    if (lockKeyBytes == null) {\n      throw new RuntimeException(\"branch session size exceeded, size : \" + size + \" maxBranchSessionSize : \"+ MAX_BRANCH_SESSION_SIZE);\n    }\n    try {\n      size-=lockKeyBytes.length;\n      lockKeyBytes=CompressUtil.compress(lockKeyBytes);\n    }\n catch (    IOException e) {\n      LOGGER.error(\"compress lockKey error\",e);\n    }\n finally {\n      size+=lockKeyBytes.length;\n    }\n    if (size > MAX_BRANCH_SESSION_SIZE) {\n      throw new RuntimeException(\"compress branch session size exceeded, compressSize : \" + size + \" maxBranchSessionSize : \"+ MAX_BRANCH_SESSION_SIZE);\n    }\n  }\n  ByteBuffer byteBuffer=byteBufferThreadLocal.get();\n  byteBuffer.clear();\n  byteBuffer.putLong(transactionId);\n  byteBuffer.putLong(branchId);\n  if (null != resourceIdBytes) {\n    byteBuffer.putInt(resourceIdBytes.length);\n    byteBuffer.put(resourceIdBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  if (null != lockKeyBytes) {\n    byteBuffer.putInt(lockKeyBytes.length);\n    byteBuffer.put(lockKeyBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  if (null != clientIdBytes) {\n    byteBuffer.putShort((short)clientIdBytes.length);\n    byteBuffer.put(clientIdBytes);\n  }\n else {\n    byteBuffer.putShort((short)0);\n  }\n  if (null != applicationDataBytes) {\n    byteBuffer.putInt(applicationDataBytes.length);\n    byteBuffer.put(applicationDataBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  byteBuffer.put((byte)status.getCode());\n  byteBuffer.flip();\n  byte[] result=new byte[byteBuffer.limit()];\n  byteBuffer.get(result);\n  return result;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 285,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2590,
        "startLineNumber" : 260,
        "startColumnNumber" : 4,
        "endLineNumber" : 335,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public byte[] encode(){\n  byte[] resourceIdBytes=resourceId != null ? resourceId.getBytes() : null;\n  byte[] lockKeyBytes=lockKey != null ? lockKey.getBytes() : null;\n  byte[] clientIdBytes=clientId != null ? clientId.getBytes() : null;\n  byte[] applicationDataBytes=applicationData != null ? applicationData.getBytes() : null;\n  int size=calBranchSessionSize(resourceIdBytes,lockKeyBytes,clientIdBytes,applicationDataBytes);\n  if (size > MAX_BRANCH_SESSION_SIZE) {\n    if (lockKeyBytes == null) {\n      throw new RuntimeException(\"branch session size exceeded, size : \" + size + \" maxBranchSessionSize : \"+ MAX_BRANCH_SESSION_SIZE);\n    }\n    try {\n      size-=lockKeyBytes.length;\n      lockKeyBytes=CompressUtil.compress(lockKeyBytes);\n    }\n catch (    IOException e) {\n      LOGGER.error(\"compress lockKey error\",e);\n    }\n finally {\n      size+=lockKeyBytes.length;\n    }\n    if (size > MAX_BRANCH_SESSION_SIZE) {\n      throw new RuntimeException(\"compress branch session size exceeded, compressSize : \" + size + \" maxBranchSessionSize : \"+ MAX_BRANCH_SESSION_SIZE);\n    }\n  }\n  ByteBuffer byteBuffer=byteBufferThreadLocal.get();\n  byteBuffer.clear();\n  byteBuffer.putLong(transactionId);\n  byteBuffer.putLong(branchId);\n  if (null != resourceIdBytes) {\n    byteBuffer.putInt(resourceIdBytes.length);\n    byteBuffer.put(resourceIdBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  if (null != lockKeyBytes) {\n    byteBuffer.putInt(lockKeyBytes.length);\n    byteBuffer.put(lockKeyBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  if (null != clientIdBytes) {\n    byteBuffer.putShort((short)clientIdBytes.length);\n    byteBuffer.put(clientIdBytes);\n  }\n else {\n    byteBuffer.putShort((short)0);\n  }\n  if (null != applicationDataBytes) {\n    byteBuffer.putInt(applicationDataBytes.length);\n    byteBuffer.put(applicationDataBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  byteBuffer.put((byte)status.getCode());\n  byteBuffer.flip();\n  byte[] result=new byte[byteBuffer.limit()];\n  byteBuffer.get(result);\n  return result;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 293,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 320,
        "startColumnNumber" : 12,
        "endLineNumber" : 320,
        "endColumnNumber" : 42
      },
      "nodeContext" : "byteBuffer.putShort((short)0);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.nio.ByteBuffer"
  }, {
    "nodeContext" : "byteBuffer",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 324,
      "startColumnNumber" : 12,
      "endLineNumber" : 324,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 324,
        "startColumnNumber" : 12,
        "endLineNumber" : 324,
        "endColumnNumber" : 58
      },
      "nodeContext" : "byteBuffer.putInt(applicationDataBytes.length)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 324,
        "startColumnNumber" : 12,
        "endLineNumber" : 324,
        "endColumnNumber" : 59
      },
      "nodeContext" : "byteBuffer.putInt(applicationDataBytes.length);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 121,
        "startLineNumber" : 323,
        "startColumnNumber" : 42,
        "endLineNumber" : 326,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  byteBuffer.putInt(applicationDataBytes.length);\n  byteBuffer.put(applicationDataBytes);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 206,
        "startLineNumber" : 323,
        "startColumnNumber" : 8,
        "endLineNumber" : 328,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (null != applicationDataBytes) {\n  byteBuffer.putInt(applicationDataBytes.length);\n  byteBuffer.put(applicationDataBytes);\n}\n else {\n  byteBuffer.putInt(0);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 23,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2553,
        "startLineNumber" : 261,
        "startColumnNumber" : 27,
        "endLineNumber" : 335,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  byte[] resourceIdBytes=resourceId != null ? resourceId.getBytes() : null;\n  byte[] lockKeyBytes=lockKey != null ? lockKey.getBytes() : null;\n  byte[] clientIdBytes=clientId != null ? clientId.getBytes() : null;\n  byte[] applicationDataBytes=applicationData != null ? applicationData.getBytes() : null;\n  int size=calBranchSessionSize(resourceIdBytes,lockKeyBytes,clientIdBytes,applicationDataBytes);\n  if (size > MAX_BRANCH_SESSION_SIZE) {\n    if (lockKeyBytes == null) {\n      throw new RuntimeException(\"branch session size exceeded, size : \" + size + \" maxBranchSessionSize : \"+ MAX_BRANCH_SESSION_SIZE);\n    }\n    try {\n      size-=lockKeyBytes.length;\n      lockKeyBytes=CompressUtil.compress(lockKeyBytes);\n    }\n catch (    IOException e) {\n      LOGGER.error(\"compress lockKey error\",e);\n    }\n finally {\n      size+=lockKeyBytes.length;\n    }\n    if (size > MAX_BRANCH_SESSION_SIZE) {\n      throw new RuntimeException(\"compress branch session size exceeded, compressSize : \" + size + \" maxBranchSessionSize : \"+ MAX_BRANCH_SESSION_SIZE);\n    }\n  }\n  ByteBuffer byteBuffer=byteBufferThreadLocal.get();\n  byteBuffer.clear();\n  byteBuffer.putLong(transactionId);\n  byteBuffer.putLong(branchId);\n  if (null != resourceIdBytes) {\n    byteBuffer.putInt(resourceIdBytes.length);\n    byteBuffer.put(resourceIdBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  if (null != lockKeyBytes) {\n    byteBuffer.putInt(lockKeyBytes.length);\n    byteBuffer.put(lockKeyBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  if (null != clientIdBytes) {\n    byteBuffer.putShort((short)clientIdBytes.length);\n    byteBuffer.put(clientIdBytes);\n  }\n else {\n    byteBuffer.putShort((short)0);\n  }\n  if (null != applicationDataBytes) {\n    byteBuffer.putInt(applicationDataBytes.length);\n    byteBuffer.put(applicationDataBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  byteBuffer.put((byte)status.getCode());\n  byteBuffer.flip();\n  byte[] result=new byte[byteBuffer.limit()];\n  byteBuffer.get(result);\n  return result;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 285,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2590,
        "startLineNumber" : 260,
        "startColumnNumber" : 4,
        "endLineNumber" : 335,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public byte[] encode(){\n  byte[] resourceIdBytes=resourceId != null ? resourceId.getBytes() : null;\n  byte[] lockKeyBytes=lockKey != null ? lockKey.getBytes() : null;\n  byte[] clientIdBytes=clientId != null ? clientId.getBytes() : null;\n  byte[] applicationDataBytes=applicationData != null ? applicationData.getBytes() : null;\n  int size=calBranchSessionSize(resourceIdBytes,lockKeyBytes,clientIdBytes,applicationDataBytes);\n  if (size > MAX_BRANCH_SESSION_SIZE) {\n    if (lockKeyBytes == null) {\n      throw new RuntimeException(\"branch session size exceeded, size : \" + size + \" maxBranchSessionSize : \"+ MAX_BRANCH_SESSION_SIZE);\n    }\n    try {\n      size-=lockKeyBytes.length;\n      lockKeyBytes=CompressUtil.compress(lockKeyBytes);\n    }\n catch (    IOException e) {\n      LOGGER.error(\"compress lockKey error\",e);\n    }\n finally {\n      size+=lockKeyBytes.length;\n    }\n    if (size > MAX_BRANCH_SESSION_SIZE) {\n      throw new RuntimeException(\"compress branch session size exceeded, compressSize : \" + size + \" maxBranchSessionSize : \"+ MAX_BRANCH_SESSION_SIZE);\n    }\n  }\n  ByteBuffer byteBuffer=byteBufferThreadLocal.get();\n  byteBuffer.clear();\n  byteBuffer.putLong(transactionId);\n  byteBuffer.putLong(branchId);\n  if (null != resourceIdBytes) {\n    byteBuffer.putInt(resourceIdBytes.length);\n    byteBuffer.put(resourceIdBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  if (null != lockKeyBytes) {\n    byteBuffer.putInt(lockKeyBytes.length);\n    byteBuffer.put(lockKeyBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  if (null != clientIdBytes) {\n    byteBuffer.putShort((short)clientIdBytes.length);\n    byteBuffer.put(clientIdBytes);\n  }\n else {\n    byteBuffer.putShort((short)0);\n  }\n  if (null != applicationDataBytes) {\n    byteBuffer.putInt(applicationDataBytes.length);\n    byteBuffer.put(applicationDataBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  byteBuffer.put((byte)status.getCode());\n  byteBuffer.flip();\n  byte[] result=new byte[byteBuffer.limit()];\n  byteBuffer.get(result);\n  return result;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 293,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 324,
        "startColumnNumber" : 12,
        "endLineNumber" : 324,
        "endColumnNumber" : 59
      },
      "nodeContext" : "byteBuffer.putInt(applicationDataBytes.length);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.nio.ByteBuffer"
  }, {
    "nodeContext" : "byteBuffer",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 325,
      "startColumnNumber" : 12,
      "endLineNumber" : 325,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 325,
        "startColumnNumber" : 12,
        "endLineNumber" : 325,
        "endColumnNumber" : 48
      },
      "nodeContext" : "byteBuffer.put(applicationDataBytes)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 325,
        "startColumnNumber" : 12,
        "endLineNumber" : 325,
        "endColumnNumber" : 49
      },
      "nodeContext" : "byteBuffer.put(applicationDataBytes);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 121,
        "startLineNumber" : 323,
        "startColumnNumber" : 42,
        "endLineNumber" : 326,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  byteBuffer.putInt(applicationDataBytes.length);\n  byteBuffer.put(applicationDataBytes);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 206,
        "startLineNumber" : 323,
        "startColumnNumber" : 8,
        "endLineNumber" : 328,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (null != applicationDataBytes) {\n  byteBuffer.putInt(applicationDataBytes.length);\n  byteBuffer.put(applicationDataBytes);\n}\n else {\n  byteBuffer.putInt(0);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 23,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2553,
        "startLineNumber" : 261,
        "startColumnNumber" : 27,
        "endLineNumber" : 335,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  byte[] resourceIdBytes=resourceId != null ? resourceId.getBytes() : null;\n  byte[] lockKeyBytes=lockKey != null ? lockKey.getBytes() : null;\n  byte[] clientIdBytes=clientId != null ? clientId.getBytes() : null;\n  byte[] applicationDataBytes=applicationData != null ? applicationData.getBytes() : null;\n  int size=calBranchSessionSize(resourceIdBytes,lockKeyBytes,clientIdBytes,applicationDataBytes);\n  if (size > MAX_BRANCH_SESSION_SIZE) {\n    if (lockKeyBytes == null) {\n      throw new RuntimeException(\"branch session size exceeded, size : \" + size + \" maxBranchSessionSize : \"+ MAX_BRANCH_SESSION_SIZE);\n    }\n    try {\n      size-=lockKeyBytes.length;\n      lockKeyBytes=CompressUtil.compress(lockKeyBytes);\n    }\n catch (    IOException e) {\n      LOGGER.error(\"compress lockKey error\",e);\n    }\n finally {\n      size+=lockKeyBytes.length;\n    }\n    if (size > MAX_BRANCH_SESSION_SIZE) {\n      throw new RuntimeException(\"compress branch session size exceeded, compressSize : \" + size + \" maxBranchSessionSize : \"+ MAX_BRANCH_SESSION_SIZE);\n    }\n  }\n  ByteBuffer byteBuffer=byteBufferThreadLocal.get();\n  byteBuffer.clear();\n  byteBuffer.putLong(transactionId);\n  byteBuffer.putLong(branchId);\n  if (null != resourceIdBytes) {\n    byteBuffer.putInt(resourceIdBytes.length);\n    byteBuffer.put(resourceIdBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  if (null != lockKeyBytes) {\n    byteBuffer.putInt(lockKeyBytes.length);\n    byteBuffer.put(lockKeyBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  if (null != clientIdBytes) {\n    byteBuffer.putShort((short)clientIdBytes.length);\n    byteBuffer.put(clientIdBytes);\n  }\n else {\n    byteBuffer.putShort((short)0);\n  }\n  if (null != applicationDataBytes) {\n    byteBuffer.putInt(applicationDataBytes.length);\n    byteBuffer.put(applicationDataBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  byteBuffer.put((byte)status.getCode());\n  byteBuffer.flip();\n  byte[] result=new byte[byteBuffer.limit()];\n  byteBuffer.get(result);\n  return result;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 285,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2590,
        "startLineNumber" : 260,
        "startColumnNumber" : 4,
        "endLineNumber" : 335,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public byte[] encode(){\n  byte[] resourceIdBytes=resourceId != null ? resourceId.getBytes() : null;\n  byte[] lockKeyBytes=lockKey != null ? lockKey.getBytes() : null;\n  byte[] clientIdBytes=clientId != null ? clientId.getBytes() : null;\n  byte[] applicationDataBytes=applicationData != null ? applicationData.getBytes() : null;\n  int size=calBranchSessionSize(resourceIdBytes,lockKeyBytes,clientIdBytes,applicationDataBytes);\n  if (size > MAX_BRANCH_SESSION_SIZE) {\n    if (lockKeyBytes == null) {\n      throw new RuntimeException(\"branch session size exceeded, size : \" + size + \" maxBranchSessionSize : \"+ MAX_BRANCH_SESSION_SIZE);\n    }\n    try {\n      size-=lockKeyBytes.length;\n      lockKeyBytes=CompressUtil.compress(lockKeyBytes);\n    }\n catch (    IOException e) {\n      LOGGER.error(\"compress lockKey error\",e);\n    }\n finally {\n      size+=lockKeyBytes.length;\n    }\n    if (size > MAX_BRANCH_SESSION_SIZE) {\n      throw new RuntimeException(\"compress branch session size exceeded, compressSize : \" + size + \" maxBranchSessionSize : \"+ MAX_BRANCH_SESSION_SIZE);\n    }\n  }\n  ByteBuffer byteBuffer=byteBufferThreadLocal.get();\n  byteBuffer.clear();\n  byteBuffer.putLong(transactionId);\n  byteBuffer.putLong(branchId);\n  if (null != resourceIdBytes) {\n    byteBuffer.putInt(resourceIdBytes.length);\n    byteBuffer.put(resourceIdBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  if (null != lockKeyBytes) {\n    byteBuffer.putInt(lockKeyBytes.length);\n    byteBuffer.put(lockKeyBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  if (null != clientIdBytes) {\n    byteBuffer.putShort((short)clientIdBytes.length);\n    byteBuffer.put(clientIdBytes);\n  }\n else {\n    byteBuffer.putShort((short)0);\n  }\n  if (null != applicationDataBytes) {\n    byteBuffer.putInt(applicationDataBytes.length);\n    byteBuffer.put(applicationDataBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  byteBuffer.put((byte)status.getCode());\n  byteBuffer.flip();\n  byte[] result=new byte[byteBuffer.limit()];\n  byteBuffer.get(result);\n  return result;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 293,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 325,
        "startColumnNumber" : 12,
        "endLineNumber" : 325,
        "endColumnNumber" : 49
      },
      "nodeContext" : "byteBuffer.put(applicationDataBytes);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.nio.ByteBuffer"
  }, {
    "nodeContext" : "byteBuffer",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 327,
      "startColumnNumber" : 12,
      "endLineNumber" : 327,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 327,
        "startColumnNumber" : 12,
        "endLineNumber" : 327,
        "endColumnNumber" : 32
      },
      "nodeContext" : "byteBuffer.putInt(0)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 327,
        "startColumnNumber" : 12,
        "endLineNumber" : 327,
        "endColumnNumber" : 33
      },
      "nodeContext" : "byteBuffer.putInt(0);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 326,
        "startColumnNumber" : 15,
        "endLineNumber" : 328,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  byteBuffer.putInt(0);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 206,
        "startLineNumber" : 323,
        "startColumnNumber" : 8,
        "endLineNumber" : 328,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (null != applicationDataBytes) {\n  byteBuffer.putInt(applicationDataBytes.length);\n  byteBuffer.put(applicationDataBytes);\n}\n else {\n  byteBuffer.putInt(0);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 23,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2553,
        "startLineNumber" : 261,
        "startColumnNumber" : 27,
        "endLineNumber" : 335,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  byte[] resourceIdBytes=resourceId != null ? resourceId.getBytes() : null;\n  byte[] lockKeyBytes=lockKey != null ? lockKey.getBytes() : null;\n  byte[] clientIdBytes=clientId != null ? clientId.getBytes() : null;\n  byte[] applicationDataBytes=applicationData != null ? applicationData.getBytes() : null;\n  int size=calBranchSessionSize(resourceIdBytes,lockKeyBytes,clientIdBytes,applicationDataBytes);\n  if (size > MAX_BRANCH_SESSION_SIZE) {\n    if (lockKeyBytes == null) {\n      throw new RuntimeException(\"branch session size exceeded, size : \" + size + \" maxBranchSessionSize : \"+ MAX_BRANCH_SESSION_SIZE);\n    }\n    try {\n      size-=lockKeyBytes.length;\n      lockKeyBytes=CompressUtil.compress(lockKeyBytes);\n    }\n catch (    IOException e) {\n      LOGGER.error(\"compress lockKey error\",e);\n    }\n finally {\n      size+=lockKeyBytes.length;\n    }\n    if (size > MAX_BRANCH_SESSION_SIZE) {\n      throw new RuntimeException(\"compress branch session size exceeded, compressSize : \" + size + \" maxBranchSessionSize : \"+ MAX_BRANCH_SESSION_SIZE);\n    }\n  }\n  ByteBuffer byteBuffer=byteBufferThreadLocal.get();\n  byteBuffer.clear();\n  byteBuffer.putLong(transactionId);\n  byteBuffer.putLong(branchId);\n  if (null != resourceIdBytes) {\n    byteBuffer.putInt(resourceIdBytes.length);\n    byteBuffer.put(resourceIdBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  if (null != lockKeyBytes) {\n    byteBuffer.putInt(lockKeyBytes.length);\n    byteBuffer.put(lockKeyBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  if (null != clientIdBytes) {\n    byteBuffer.putShort((short)clientIdBytes.length);\n    byteBuffer.put(clientIdBytes);\n  }\n else {\n    byteBuffer.putShort((short)0);\n  }\n  if (null != applicationDataBytes) {\n    byteBuffer.putInt(applicationDataBytes.length);\n    byteBuffer.put(applicationDataBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  byteBuffer.put((byte)status.getCode());\n  byteBuffer.flip();\n  byte[] result=new byte[byteBuffer.limit()];\n  byteBuffer.get(result);\n  return result;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 285,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2590,
        "startLineNumber" : 260,
        "startColumnNumber" : 4,
        "endLineNumber" : 335,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public byte[] encode(){\n  byte[] resourceIdBytes=resourceId != null ? resourceId.getBytes() : null;\n  byte[] lockKeyBytes=lockKey != null ? lockKey.getBytes() : null;\n  byte[] clientIdBytes=clientId != null ? clientId.getBytes() : null;\n  byte[] applicationDataBytes=applicationData != null ? applicationData.getBytes() : null;\n  int size=calBranchSessionSize(resourceIdBytes,lockKeyBytes,clientIdBytes,applicationDataBytes);\n  if (size > MAX_BRANCH_SESSION_SIZE) {\n    if (lockKeyBytes == null) {\n      throw new RuntimeException(\"branch session size exceeded, size : \" + size + \" maxBranchSessionSize : \"+ MAX_BRANCH_SESSION_SIZE);\n    }\n    try {\n      size-=lockKeyBytes.length;\n      lockKeyBytes=CompressUtil.compress(lockKeyBytes);\n    }\n catch (    IOException e) {\n      LOGGER.error(\"compress lockKey error\",e);\n    }\n finally {\n      size+=lockKeyBytes.length;\n    }\n    if (size > MAX_BRANCH_SESSION_SIZE) {\n      throw new RuntimeException(\"compress branch session size exceeded, compressSize : \" + size + \" maxBranchSessionSize : \"+ MAX_BRANCH_SESSION_SIZE);\n    }\n  }\n  ByteBuffer byteBuffer=byteBufferThreadLocal.get();\n  byteBuffer.clear();\n  byteBuffer.putLong(transactionId);\n  byteBuffer.putLong(branchId);\n  if (null != resourceIdBytes) {\n    byteBuffer.putInt(resourceIdBytes.length);\n    byteBuffer.put(resourceIdBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  if (null != lockKeyBytes) {\n    byteBuffer.putInt(lockKeyBytes.length);\n    byteBuffer.put(lockKeyBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  if (null != clientIdBytes) {\n    byteBuffer.putShort((short)clientIdBytes.length);\n    byteBuffer.put(clientIdBytes);\n  }\n else {\n    byteBuffer.putShort((short)0);\n  }\n  if (null != applicationDataBytes) {\n    byteBuffer.putInt(applicationDataBytes.length);\n    byteBuffer.put(applicationDataBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  byteBuffer.put((byte)status.getCode());\n  byteBuffer.flip();\n  byte[] result=new byte[byteBuffer.limit()];\n  byteBuffer.get(result);\n  return result;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 293,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 327,
        "startColumnNumber" : 12,
        "endLineNumber" : 327,
        "endColumnNumber" : 33
      },
      "nodeContext" : "byteBuffer.putInt(0);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.nio.ByteBuffer"
  }, {
    "nodeContext" : "byteBuffer",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 330,
      "startColumnNumber" : 8,
      "endLineNumber" : 330,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 330,
        "startColumnNumber" : 8,
        "endLineNumber" : 330,
        "endColumnNumber" : 46
      },
      "nodeContext" : "byteBuffer.put((byte)status.getCode())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 330,
        "startColumnNumber" : 8,
        "endLineNumber" : 330,
        "endColumnNumber" : 47
      },
      "nodeContext" : "byteBuffer.put((byte)status.getCode());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2553,
        "startLineNumber" : 261,
        "startColumnNumber" : 27,
        "endLineNumber" : 335,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  byte[] resourceIdBytes=resourceId != null ? resourceId.getBytes() : null;\n  byte[] lockKeyBytes=lockKey != null ? lockKey.getBytes() : null;\n  byte[] clientIdBytes=clientId != null ? clientId.getBytes() : null;\n  byte[] applicationDataBytes=applicationData != null ? applicationData.getBytes() : null;\n  int size=calBranchSessionSize(resourceIdBytes,lockKeyBytes,clientIdBytes,applicationDataBytes);\n  if (size > MAX_BRANCH_SESSION_SIZE) {\n    if (lockKeyBytes == null) {\n      throw new RuntimeException(\"branch session size exceeded, size : \" + size + \" maxBranchSessionSize : \"+ MAX_BRANCH_SESSION_SIZE);\n    }\n    try {\n      size-=lockKeyBytes.length;\n      lockKeyBytes=CompressUtil.compress(lockKeyBytes);\n    }\n catch (    IOException e) {\n      LOGGER.error(\"compress lockKey error\",e);\n    }\n finally {\n      size+=lockKeyBytes.length;\n    }\n    if (size > MAX_BRANCH_SESSION_SIZE) {\n      throw new RuntimeException(\"compress branch session size exceeded, compressSize : \" + size + \" maxBranchSessionSize : \"+ MAX_BRANCH_SESSION_SIZE);\n    }\n  }\n  ByteBuffer byteBuffer=byteBufferThreadLocal.get();\n  byteBuffer.clear();\n  byteBuffer.putLong(transactionId);\n  byteBuffer.putLong(branchId);\n  if (null != resourceIdBytes) {\n    byteBuffer.putInt(resourceIdBytes.length);\n    byteBuffer.put(resourceIdBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  if (null != lockKeyBytes) {\n    byteBuffer.putInt(lockKeyBytes.length);\n    byteBuffer.put(lockKeyBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  if (null != clientIdBytes) {\n    byteBuffer.putShort((short)clientIdBytes.length);\n    byteBuffer.put(clientIdBytes);\n  }\n else {\n    byteBuffer.putShort((short)0);\n  }\n  if (null != applicationDataBytes) {\n    byteBuffer.putInt(applicationDataBytes.length);\n    byteBuffer.put(applicationDataBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  byteBuffer.put((byte)status.getCode());\n  byteBuffer.flip();\n  byte[] result=new byte[byteBuffer.limit()];\n  byteBuffer.get(result);\n  return result;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 285,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2590,
        "startLineNumber" : 260,
        "startColumnNumber" : 4,
        "endLineNumber" : 335,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public byte[] encode(){\n  byte[] resourceIdBytes=resourceId != null ? resourceId.getBytes() : null;\n  byte[] lockKeyBytes=lockKey != null ? lockKey.getBytes() : null;\n  byte[] clientIdBytes=clientId != null ? clientId.getBytes() : null;\n  byte[] applicationDataBytes=applicationData != null ? applicationData.getBytes() : null;\n  int size=calBranchSessionSize(resourceIdBytes,lockKeyBytes,clientIdBytes,applicationDataBytes);\n  if (size > MAX_BRANCH_SESSION_SIZE) {\n    if (lockKeyBytes == null) {\n      throw new RuntimeException(\"branch session size exceeded, size : \" + size + \" maxBranchSessionSize : \"+ MAX_BRANCH_SESSION_SIZE);\n    }\n    try {\n      size-=lockKeyBytes.length;\n      lockKeyBytes=CompressUtil.compress(lockKeyBytes);\n    }\n catch (    IOException e) {\n      LOGGER.error(\"compress lockKey error\",e);\n    }\n finally {\n      size+=lockKeyBytes.length;\n    }\n    if (size > MAX_BRANCH_SESSION_SIZE) {\n      throw new RuntimeException(\"compress branch session size exceeded, compressSize : \" + size + \" maxBranchSessionSize : \"+ MAX_BRANCH_SESSION_SIZE);\n    }\n  }\n  ByteBuffer byteBuffer=byteBufferThreadLocal.get();\n  byteBuffer.clear();\n  byteBuffer.putLong(transactionId);\n  byteBuffer.putLong(branchId);\n  if (null != resourceIdBytes) {\n    byteBuffer.putInt(resourceIdBytes.length);\n    byteBuffer.put(resourceIdBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  if (null != lockKeyBytes) {\n    byteBuffer.putInt(lockKeyBytes.length);\n    byteBuffer.put(lockKeyBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  if (null != clientIdBytes) {\n    byteBuffer.putShort((short)clientIdBytes.length);\n    byteBuffer.put(clientIdBytes);\n  }\n else {\n    byteBuffer.putShort((short)0);\n  }\n  if (null != applicationDataBytes) {\n    byteBuffer.putInt(applicationDataBytes.length);\n    byteBuffer.put(applicationDataBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  byteBuffer.put((byte)status.getCode());\n  byteBuffer.flip();\n  byte[] result=new byte[byteBuffer.limit()];\n  byteBuffer.get(result);\n  return result;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 293,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 330,
        "startColumnNumber" : 8,
        "endLineNumber" : 330,
        "endColumnNumber" : 47
      },
      "nodeContext" : "byteBuffer.put((byte)status.getCode());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.nio.ByteBuffer"
  }, {
    "nodeContext" : "byteBuffer",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 331,
      "startColumnNumber" : 8,
      "endLineNumber" : 331,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 331,
        "startColumnNumber" : 8,
        "endLineNumber" : 331,
        "endColumnNumber" : 25
      },
      "nodeContext" : "byteBuffer.flip()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 331,
        "startColumnNumber" : 8,
        "endLineNumber" : 331,
        "endColumnNumber" : 26
      },
      "nodeContext" : "byteBuffer.flip();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2553,
        "startLineNumber" : 261,
        "startColumnNumber" : 27,
        "endLineNumber" : 335,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  byte[] resourceIdBytes=resourceId != null ? resourceId.getBytes() : null;\n  byte[] lockKeyBytes=lockKey != null ? lockKey.getBytes() : null;\n  byte[] clientIdBytes=clientId != null ? clientId.getBytes() : null;\n  byte[] applicationDataBytes=applicationData != null ? applicationData.getBytes() : null;\n  int size=calBranchSessionSize(resourceIdBytes,lockKeyBytes,clientIdBytes,applicationDataBytes);\n  if (size > MAX_BRANCH_SESSION_SIZE) {\n    if (lockKeyBytes == null) {\n      throw new RuntimeException(\"branch session size exceeded, size : \" + size + \" maxBranchSessionSize : \"+ MAX_BRANCH_SESSION_SIZE);\n    }\n    try {\n      size-=lockKeyBytes.length;\n      lockKeyBytes=CompressUtil.compress(lockKeyBytes);\n    }\n catch (    IOException e) {\n      LOGGER.error(\"compress lockKey error\",e);\n    }\n finally {\n      size+=lockKeyBytes.length;\n    }\n    if (size > MAX_BRANCH_SESSION_SIZE) {\n      throw new RuntimeException(\"compress branch session size exceeded, compressSize : \" + size + \" maxBranchSessionSize : \"+ MAX_BRANCH_SESSION_SIZE);\n    }\n  }\n  ByteBuffer byteBuffer=byteBufferThreadLocal.get();\n  byteBuffer.clear();\n  byteBuffer.putLong(transactionId);\n  byteBuffer.putLong(branchId);\n  if (null != resourceIdBytes) {\n    byteBuffer.putInt(resourceIdBytes.length);\n    byteBuffer.put(resourceIdBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  if (null != lockKeyBytes) {\n    byteBuffer.putInt(lockKeyBytes.length);\n    byteBuffer.put(lockKeyBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  if (null != clientIdBytes) {\n    byteBuffer.putShort((short)clientIdBytes.length);\n    byteBuffer.put(clientIdBytes);\n  }\n else {\n    byteBuffer.putShort((short)0);\n  }\n  if (null != applicationDataBytes) {\n    byteBuffer.putInt(applicationDataBytes.length);\n    byteBuffer.put(applicationDataBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  byteBuffer.put((byte)status.getCode());\n  byteBuffer.flip();\n  byte[] result=new byte[byteBuffer.limit()];\n  byteBuffer.get(result);\n  return result;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 285,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2590,
        "startLineNumber" : 260,
        "startColumnNumber" : 4,
        "endLineNumber" : 335,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public byte[] encode(){\n  byte[] resourceIdBytes=resourceId != null ? resourceId.getBytes() : null;\n  byte[] lockKeyBytes=lockKey != null ? lockKey.getBytes() : null;\n  byte[] clientIdBytes=clientId != null ? clientId.getBytes() : null;\n  byte[] applicationDataBytes=applicationData != null ? applicationData.getBytes() : null;\n  int size=calBranchSessionSize(resourceIdBytes,lockKeyBytes,clientIdBytes,applicationDataBytes);\n  if (size > MAX_BRANCH_SESSION_SIZE) {\n    if (lockKeyBytes == null) {\n      throw new RuntimeException(\"branch session size exceeded, size : \" + size + \" maxBranchSessionSize : \"+ MAX_BRANCH_SESSION_SIZE);\n    }\n    try {\n      size-=lockKeyBytes.length;\n      lockKeyBytes=CompressUtil.compress(lockKeyBytes);\n    }\n catch (    IOException e) {\n      LOGGER.error(\"compress lockKey error\",e);\n    }\n finally {\n      size+=lockKeyBytes.length;\n    }\n    if (size > MAX_BRANCH_SESSION_SIZE) {\n      throw new RuntimeException(\"compress branch session size exceeded, compressSize : \" + size + \" maxBranchSessionSize : \"+ MAX_BRANCH_SESSION_SIZE);\n    }\n  }\n  ByteBuffer byteBuffer=byteBufferThreadLocal.get();\n  byteBuffer.clear();\n  byteBuffer.putLong(transactionId);\n  byteBuffer.putLong(branchId);\n  if (null != resourceIdBytes) {\n    byteBuffer.putInt(resourceIdBytes.length);\n    byteBuffer.put(resourceIdBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  if (null != lockKeyBytes) {\n    byteBuffer.putInt(lockKeyBytes.length);\n    byteBuffer.put(lockKeyBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  if (null != clientIdBytes) {\n    byteBuffer.putShort((short)clientIdBytes.length);\n    byteBuffer.put(clientIdBytes);\n  }\n else {\n    byteBuffer.putShort((short)0);\n  }\n  if (null != applicationDataBytes) {\n    byteBuffer.putInt(applicationDataBytes.length);\n    byteBuffer.put(applicationDataBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  byteBuffer.put((byte)status.getCode());\n  byteBuffer.flip();\n  byte[] result=new byte[byteBuffer.limit()];\n  byteBuffer.get(result);\n  return result;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 293,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 331,
        "startColumnNumber" : 8,
        "endLineNumber" : 331,
        "endColumnNumber" : 26
      },
      "nodeContext" : "byteBuffer.flip();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.nio.ByteBuffer"
  }, {
    "nodeContext" : "byteBuffer",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 332,
      "startColumnNumber" : 33,
      "endLineNumber" : 332,
      "endColumnNumber" : 43
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ArrayCreation,dimensions]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 332,
        "startColumnNumber" : 33,
        "endLineNumber" : 332,
        "endColumnNumber" : 51
      },
      "nodeContext" : "byteBuffer.limit()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 332,
        "startColumnNumber" : 24,
        "endLineNumber" : 332,
        "endColumnNumber" : 52
      },
      "nodeContext" : "new byte[byteBuffer.limit()]",
      "nodeType" : "ArrayCreation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 332,
        "startColumnNumber" : 15,
        "endLineNumber" : 332,
        "endColumnNumber" : 52
      },
      "nodeContext" : "result=new byte[byteBuffer.limit()]",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 332,
        "startColumnNumber" : 8,
        "endLineNumber" : 332,
        "endColumnNumber" : 53
      },
      "nodeContext" : "byte[] result=new byte[byteBuffer.limit()];\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2553,
        "startLineNumber" : 261,
        "startColumnNumber" : 27,
        "endLineNumber" : 335,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  byte[] resourceIdBytes=resourceId != null ? resourceId.getBytes() : null;\n  byte[] lockKeyBytes=lockKey != null ? lockKey.getBytes() : null;\n  byte[] clientIdBytes=clientId != null ? clientId.getBytes() : null;\n  byte[] applicationDataBytes=applicationData != null ? applicationData.getBytes() : null;\n  int size=calBranchSessionSize(resourceIdBytes,lockKeyBytes,clientIdBytes,applicationDataBytes);\n  if (size > MAX_BRANCH_SESSION_SIZE) {\n    if (lockKeyBytes == null) {\n      throw new RuntimeException(\"branch session size exceeded, size : \" + size + \" maxBranchSessionSize : \"+ MAX_BRANCH_SESSION_SIZE);\n    }\n    try {\n      size-=lockKeyBytes.length;\n      lockKeyBytes=CompressUtil.compress(lockKeyBytes);\n    }\n catch (    IOException e) {\n      LOGGER.error(\"compress lockKey error\",e);\n    }\n finally {\n      size+=lockKeyBytes.length;\n    }\n    if (size > MAX_BRANCH_SESSION_SIZE) {\n      throw new RuntimeException(\"compress branch session size exceeded, compressSize : \" + size + \" maxBranchSessionSize : \"+ MAX_BRANCH_SESSION_SIZE);\n    }\n  }\n  ByteBuffer byteBuffer=byteBufferThreadLocal.get();\n  byteBuffer.clear();\n  byteBuffer.putLong(transactionId);\n  byteBuffer.putLong(branchId);\n  if (null != resourceIdBytes) {\n    byteBuffer.putInt(resourceIdBytes.length);\n    byteBuffer.put(resourceIdBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  if (null != lockKeyBytes) {\n    byteBuffer.putInt(lockKeyBytes.length);\n    byteBuffer.put(lockKeyBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  if (null != clientIdBytes) {\n    byteBuffer.putShort((short)clientIdBytes.length);\n    byteBuffer.put(clientIdBytes);\n  }\n else {\n    byteBuffer.putShort((short)0);\n  }\n  if (null != applicationDataBytes) {\n    byteBuffer.putInt(applicationDataBytes.length);\n    byteBuffer.put(applicationDataBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  byteBuffer.put((byte)status.getCode());\n  byteBuffer.flip();\n  byte[] result=new byte[byteBuffer.limit()];\n  byteBuffer.get(result);\n  return result;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 285,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2590,
        "startLineNumber" : 260,
        "startColumnNumber" : 4,
        "endLineNumber" : 335,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public byte[] encode(){\n  byte[] resourceIdBytes=resourceId != null ? resourceId.getBytes() : null;\n  byte[] lockKeyBytes=lockKey != null ? lockKey.getBytes() : null;\n  byte[] clientIdBytes=clientId != null ? clientId.getBytes() : null;\n  byte[] applicationDataBytes=applicationData != null ? applicationData.getBytes() : null;\n  int size=calBranchSessionSize(resourceIdBytes,lockKeyBytes,clientIdBytes,applicationDataBytes);\n  if (size > MAX_BRANCH_SESSION_SIZE) {\n    if (lockKeyBytes == null) {\n      throw new RuntimeException(\"branch session size exceeded, size : \" + size + \" maxBranchSessionSize : \"+ MAX_BRANCH_SESSION_SIZE);\n    }\n    try {\n      size-=lockKeyBytes.length;\n      lockKeyBytes=CompressUtil.compress(lockKeyBytes);\n    }\n catch (    IOException e) {\n      LOGGER.error(\"compress lockKey error\",e);\n    }\n finally {\n      size+=lockKeyBytes.length;\n    }\n    if (size > MAX_BRANCH_SESSION_SIZE) {\n      throw new RuntimeException(\"compress branch session size exceeded, compressSize : \" + size + \" maxBranchSessionSize : \"+ MAX_BRANCH_SESSION_SIZE);\n    }\n  }\n  ByteBuffer byteBuffer=byteBufferThreadLocal.get();\n  byteBuffer.clear();\n  byteBuffer.putLong(transactionId);\n  byteBuffer.putLong(branchId);\n  if (null != resourceIdBytes) {\n    byteBuffer.putInt(resourceIdBytes.length);\n    byteBuffer.put(resourceIdBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  if (null != lockKeyBytes) {\n    byteBuffer.putInt(lockKeyBytes.length);\n    byteBuffer.put(lockKeyBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  if (null != clientIdBytes) {\n    byteBuffer.putShort((short)clientIdBytes.length);\n    byteBuffer.put(clientIdBytes);\n  }\n else {\n    byteBuffer.putShort((short)0);\n  }\n  if (null != applicationDataBytes) {\n    byteBuffer.putInt(applicationDataBytes.length);\n    byteBuffer.put(applicationDataBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  byteBuffer.put((byte)status.getCode());\n  byteBuffer.flip();\n  byte[] result=new byte[byteBuffer.limit()];\n  byteBuffer.get(result);\n  return result;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 293,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 332,
        "startColumnNumber" : 8,
        "endLineNumber" : 332,
        "endColumnNumber" : 53
      },
      "nodeContext" : "byte[] result=new byte[byteBuffer.limit()];\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.nio.ByteBuffer"
  }, {
    "nodeContext" : "byteBuffer",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 333,
      "startColumnNumber" : 8,
      "endLineNumber" : 333,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 333,
        "startColumnNumber" : 8,
        "endLineNumber" : 333,
        "endColumnNumber" : 30
      },
      "nodeContext" : "byteBuffer.get(result)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 333,
        "startColumnNumber" : 8,
        "endLineNumber" : 333,
        "endColumnNumber" : 31
      },
      "nodeContext" : "byteBuffer.get(result);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2553,
        "startLineNumber" : 261,
        "startColumnNumber" : 27,
        "endLineNumber" : 335,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  byte[] resourceIdBytes=resourceId != null ? resourceId.getBytes() : null;\n  byte[] lockKeyBytes=lockKey != null ? lockKey.getBytes() : null;\n  byte[] clientIdBytes=clientId != null ? clientId.getBytes() : null;\n  byte[] applicationDataBytes=applicationData != null ? applicationData.getBytes() : null;\n  int size=calBranchSessionSize(resourceIdBytes,lockKeyBytes,clientIdBytes,applicationDataBytes);\n  if (size > MAX_BRANCH_SESSION_SIZE) {\n    if (lockKeyBytes == null) {\n      throw new RuntimeException(\"branch session size exceeded, size : \" + size + \" maxBranchSessionSize : \"+ MAX_BRANCH_SESSION_SIZE);\n    }\n    try {\n      size-=lockKeyBytes.length;\n      lockKeyBytes=CompressUtil.compress(lockKeyBytes);\n    }\n catch (    IOException e) {\n      LOGGER.error(\"compress lockKey error\",e);\n    }\n finally {\n      size+=lockKeyBytes.length;\n    }\n    if (size > MAX_BRANCH_SESSION_SIZE) {\n      throw new RuntimeException(\"compress branch session size exceeded, compressSize : \" + size + \" maxBranchSessionSize : \"+ MAX_BRANCH_SESSION_SIZE);\n    }\n  }\n  ByteBuffer byteBuffer=byteBufferThreadLocal.get();\n  byteBuffer.clear();\n  byteBuffer.putLong(transactionId);\n  byteBuffer.putLong(branchId);\n  if (null != resourceIdBytes) {\n    byteBuffer.putInt(resourceIdBytes.length);\n    byteBuffer.put(resourceIdBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  if (null != lockKeyBytes) {\n    byteBuffer.putInt(lockKeyBytes.length);\n    byteBuffer.put(lockKeyBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  if (null != clientIdBytes) {\n    byteBuffer.putShort((short)clientIdBytes.length);\n    byteBuffer.put(clientIdBytes);\n  }\n else {\n    byteBuffer.putShort((short)0);\n  }\n  if (null != applicationDataBytes) {\n    byteBuffer.putInt(applicationDataBytes.length);\n    byteBuffer.put(applicationDataBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  byteBuffer.put((byte)status.getCode());\n  byteBuffer.flip();\n  byte[] result=new byte[byteBuffer.limit()];\n  byteBuffer.get(result);\n  return result;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 285,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2590,
        "startLineNumber" : 260,
        "startColumnNumber" : 4,
        "endLineNumber" : 335,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public byte[] encode(){\n  byte[] resourceIdBytes=resourceId != null ? resourceId.getBytes() : null;\n  byte[] lockKeyBytes=lockKey != null ? lockKey.getBytes() : null;\n  byte[] clientIdBytes=clientId != null ? clientId.getBytes() : null;\n  byte[] applicationDataBytes=applicationData != null ? applicationData.getBytes() : null;\n  int size=calBranchSessionSize(resourceIdBytes,lockKeyBytes,clientIdBytes,applicationDataBytes);\n  if (size > MAX_BRANCH_SESSION_SIZE) {\n    if (lockKeyBytes == null) {\n      throw new RuntimeException(\"branch session size exceeded, size : \" + size + \" maxBranchSessionSize : \"+ MAX_BRANCH_SESSION_SIZE);\n    }\n    try {\n      size-=lockKeyBytes.length;\n      lockKeyBytes=CompressUtil.compress(lockKeyBytes);\n    }\n catch (    IOException e) {\n      LOGGER.error(\"compress lockKey error\",e);\n    }\n finally {\n      size+=lockKeyBytes.length;\n    }\n    if (size > MAX_BRANCH_SESSION_SIZE) {\n      throw new RuntimeException(\"compress branch session size exceeded, compressSize : \" + size + \" maxBranchSessionSize : \"+ MAX_BRANCH_SESSION_SIZE);\n    }\n  }\n  ByteBuffer byteBuffer=byteBufferThreadLocal.get();\n  byteBuffer.clear();\n  byteBuffer.putLong(transactionId);\n  byteBuffer.putLong(branchId);\n  if (null != resourceIdBytes) {\n    byteBuffer.putInt(resourceIdBytes.length);\n    byteBuffer.put(resourceIdBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  if (null != lockKeyBytes) {\n    byteBuffer.putInt(lockKeyBytes.length);\n    byteBuffer.put(lockKeyBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  if (null != clientIdBytes) {\n    byteBuffer.putShort((short)clientIdBytes.length);\n    byteBuffer.put(clientIdBytes);\n  }\n else {\n    byteBuffer.putShort((short)0);\n  }\n  if (null != applicationDataBytes) {\n    byteBuffer.putInt(applicationDataBytes.length);\n    byteBuffer.put(applicationDataBytes);\n  }\n else {\n    byteBuffer.putInt(0);\n  }\n  byteBuffer.put((byte)status.getCode());\n  byteBuffer.flip();\n  byte[] result=new byte[byteBuffer.limit()];\n  byteBuffer.get(result);\n  return result;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 293,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 333,
        "startColumnNumber" : 8,
        "endLineNumber" : 333,
        "endColumnNumber" : 31
      },
      "nodeContext" : "byteBuffer.get(result);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.nio.ByteBuffer"
  } ],
  "positionList" : [ {
    "charLength" : 10,
    "startLineNumber" : 297,
    "startColumnNumber" : 8,
    "endLineNumber" : 297,
    "endColumnNumber" : 18
  }, {
    "charLength" : 10,
    "startLineNumber" : 299,
    "startColumnNumber" : 8,
    "endLineNumber" : 299,
    "endColumnNumber" : 18
  }, {
    "charLength" : 10,
    "startLineNumber" : 300,
    "startColumnNumber" : 8,
    "endLineNumber" : 300,
    "endColumnNumber" : 18
  }, {
    "charLength" : 10,
    "startLineNumber" : 303,
    "startColumnNumber" : 12,
    "endLineNumber" : 303,
    "endColumnNumber" : 22
  }, {
    "charLength" : 10,
    "startLineNumber" : 304,
    "startColumnNumber" : 12,
    "endLineNumber" : 304,
    "endColumnNumber" : 22
  }, {
    "charLength" : 10,
    "startLineNumber" : 306,
    "startColumnNumber" : 12,
    "endLineNumber" : 306,
    "endColumnNumber" : 22
  }, {
    "charLength" : 10,
    "startLineNumber" : 310,
    "startColumnNumber" : 12,
    "endLineNumber" : 310,
    "endColumnNumber" : 22
  }, {
    "charLength" : 10,
    "startLineNumber" : 311,
    "startColumnNumber" : 12,
    "endLineNumber" : 311,
    "endColumnNumber" : 22
  }, {
    "charLength" : 10,
    "startLineNumber" : 313,
    "startColumnNumber" : 12,
    "endLineNumber" : 313,
    "endColumnNumber" : 22
  }, {
    "charLength" : 10,
    "startLineNumber" : 317,
    "startColumnNumber" : 12,
    "endLineNumber" : 317,
    "endColumnNumber" : 22
  }, {
    "charLength" : 10,
    "startLineNumber" : 318,
    "startColumnNumber" : 12,
    "endLineNumber" : 318,
    "endColumnNumber" : 22
  }, {
    "charLength" : 10,
    "startLineNumber" : 320,
    "startColumnNumber" : 12,
    "endLineNumber" : 320,
    "endColumnNumber" : 22
  }, {
    "charLength" : 10,
    "startLineNumber" : 324,
    "startColumnNumber" : 12,
    "endLineNumber" : 324,
    "endColumnNumber" : 22
  }, {
    "charLength" : 10,
    "startLineNumber" : 325,
    "startColumnNumber" : 12,
    "endLineNumber" : 325,
    "endColumnNumber" : 22
  }, {
    "charLength" : 10,
    "startLineNumber" : 327,
    "startColumnNumber" : 12,
    "endLineNumber" : 327,
    "endColumnNumber" : 22
  }, {
    "charLength" : 10,
    "startLineNumber" : 330,
    "startColumnNumber" : 8,
    "endLineNumber" : 330,
    "endColumnNumber" : 18
  }, {
    "charLength" : 10,
    "startLineNumber" : 331,
    "startColumnNumber" : 8,
    "endLineNumber" : 331,
    "endColumnNumber" : 18
  }, {
    "charLength" : 10,
    "startLineNumber" : 332,
    "startColumnNumber" : 33,
    "endLineNumber" : 332,
    "endColumnNumber" : 43
  }, {
    "charLength" : 10,
    "startLineNumber" : 333,
    "startColumnNumber" : 8,
    "endLineNumber" : 333,
    "endColumnNumber" : 18
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 18,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 18,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 18,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 18,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 18,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 18,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 18,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 18,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 18,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 18,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 18,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 18,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 18,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 18,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 18,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 18,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 18,
    "secondKey" : 17,
    "layout" : 2
  } ]
}