{
  "id" : 283,
  "expression" : "false",
  "projectName" : "Tencent@tinker",
  "commitID" : "8e8108e5cf1668bc4a4e33c5ac971e61f44a590d",
  "filePath" : "tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/patch/UpgradePatch.java",
  "occurrences" : 16,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "false",
    "nodeType" : "BooleanLiteral",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 52,
      "startColumnNumber" : 19,
      "endLineNumber" : 52,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 52,
        "startColumnNumber" : 12,
        "endLineNumber" : 52,
        "endColumnNumber" : 25
      },
      "nodeContext" : "return false;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 123,
        "startLineNumber" : 50,
        "startColumnNumber" : 110,
        "endLineNumber" : 53,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch is disabled, just return\");\n  return false;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 225,
        "startLineNumber" : 50,
        "startColumnNumber" : 8,
        "endLineNumber" : 53,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!manager.isTinkerEnabled() || !ShareTinkerInternals.isTinkerEnableWithSharedPreferences(context)) {\n  TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch is disabled, just return\");\n  return false;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 20,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7821,
        "startLineNumber" : 45,
        "startColumnNumber" : 92,
        "endLineNumber" : 195,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Tinker manager=Tinker.with(context);\n  final File patchFile=new File(tempPatchPath);\n  if (!manager.isTinkerEnabled() || !ShareTinkerInternals.isTinkerEnableWithSharedPreferences(context)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch is disabled, just return\");\n    return false;\n  }\n  if (!SharePatchFileUtil.isLegalFile(patchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch file is not found, just return\");\n    return false;\n  }\n  ShareSecurityCheck signatureCheck=new ShareSecurityCheck(context);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(context,manager.getTinkerFlags(),patchFile,signatureCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchPackageCheckFail\");\n    manager.getPatchReporter().onPatchPackageCheckFail(patchFile,returnCode);\n    return false;\n  }\n  String patchMd5=SharePatchFileUtil.getMD5(patchFile);\n  if (patchMd5 == null) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch md5 is null, just return\");\n    return false;\n  }\n  patchResult.patchVersion=patchMd5;\n  TinkerLog.i(TAG,\"UpgradePatch tryPatch:patchMd5:%s\",patchMd5);\n  final String patchDirectory=manager.getPatchDirectory().getAbsolutePath();\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectory);\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectory);\n  final Map<String,String> pkgProps=signatureCheck.getPackagePropertiesIfPresent();\n  if (pkgProps == null) {\n    TinkerLog.e(TAG,\"UpgradePatch packageProperties is null, do we process a valid patch apk ?\");\n    return false;\n  }\n  final String isProtectedAppStr=pkgProps.get(ShareConstants.PKGMETA_KEY_IS_PROTECTED_APP);\n  final boolean isProtectedApp=(isProtectedAppStr != null && !isProtectedAppStr.isEmpty() && !\"0\".equals(isProtectedAppStr));\n  SharePatchInfo oldInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  SharePatchInfo newInfo;\n  if (oldInfo != null) {\n    if (oldInfo.oldVersion == null || oldInfo.newVersion == null || oldInfo.oatDir == null) {\n      TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchInfoCorrupted\");\n      manager.getPatchReporter().onPatchInfoCorrupted(patchFile,oldInfo.oldVersion,oldInfo.newVersion);\n      return false;\n    }\n    if (!SharePatchFileUtil.checkIfMd5Valid(patchMd5)) {\n      TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchVersionCheckFail md5 %s is valid\",patchMd5);\n      manager.getPatchReporter().onPatchVersionCheckFail(patchFile,oldInfo,patchMd5);\n      return false;\n    }\n    final boolean usingInterpret=oldInfo.oatDir.equals(ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    if (!usingInterpret && !ShareTinkerInternals.isNullOrNil(oldInfo.newVersion) && oldInfo.newVersion.equals(patchMd5)&& !oldInfo.isRemoveNewVersion) {\n      TinkerLog.e(TAG,\"patch already applied, md5: %s\",patchMd5);\n      UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n      return true;\n    }\n    final String finalOatDir=usingInterpret ? ShareConstants.CHANING_DEX_OPTIMIZE_PATH : oldInfo.oatDir;\n    newInfo=new SharePatchInfo(oldInfo.oldVersion,patchMd5,isProtectedApp,false,Build.FINGERPRINT,finalOatDir);\n  }\n else {\n    newInfo=new SharePatchInfo(\"\",patchMd5,isProtectedApp,false,Build.FINGERPRINT,ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH);\n  }\n  final String patchName=SharePatchFileUtil.getPatchVersionDirectory(patchMd5);\n  final String patchVersionDirectory=patchDirectory + \"/\" + patchName;\n  TinkerLog.i(TAG,\"UpgradePatch tryPatch:patchVersionDirectory:%s\",patchVersionDirectory);\n  File destPatchFile=new File(patchVersionDirectory + \"/\" + SharePatchFileUtil.getPatchVersionFile(patchMd5));\n  try {\n    if (!patchMd5.equals(SharePatchFileUtil.getMD5(destPatchFile))) {\n      SharePatchFileUtil.copyFileUsingStream(patchFile,destPatchFile);\n      TinkerLog.w(TAG,\"UpgradePatch copy patch file, src file: %s size: %d, dest file: %s size:%d\",patchFile.getAbsolutePath(),patchFile.length(),destPatchFile.getAbsolutePath(),destPatchFile.length());\n    }\n  }\n catch (  IOException e) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:copy patch file fail from %s to %s\",patchFile.getPath(),destPatchFile.getPath());\n    manager.getPatchReporter().onPatchTypeExtractFail(patchFile,destPatchFile,patchFile.getName(),ShareConstants.TYPE_PATCH_FILE);\n    return false;\n  }\n  if (!DexDiffPatchInternal.tryRecoverDexFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch dex failed\");\n    return false;\n  }\n  if (!ArkHotDiffPatchInternal.tryRecoverArkHotLibrary(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    return false;\n  }\n  if (!BsDiffPatchInternal.tryRecoverLibraryFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch library failed\");\n    return false;\n  }\n  if (!ResDiffPatchInternal.tryRecoverResourceFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch resource failed\");\n    return false;\n  }\n  if (!DexDiffPatchInternal.waitAndCheckDexOptFile(patchFile,manager)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, check dex opt file failed\");\n    return false;\n  }\n  if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,newInfo,patchInfoLockFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, rewrite patch info failed\");\n    manager.getPatchReporter().onPatchInfoCorrupted(patchFile,newInfo.oldVersion,newInfo.newVersion);\n    return false;\n  }\n  UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n  TinkerLog.w(TAG,\"UpgradePatch tryPatch: done, it is ok\");\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 651,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7923,
        "startLineNumber" : 44,
        "startColumnNumber" : 4,
        "endLineNumber" : 195,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public boolean tryPatch(Context context,String tempPatchPath,PatchResult patchResult){\n  Tinker manager=Tinker.with(context);\n  final File patchFile=new File(tempPatchPath);\n  if (!manager.isTinkerEnabled() || !ShareTinkerInternals.isTinkerEnableWithSharedPreferences(context)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch is disabled, just return\");\n    return false;\n  }\n  if (!SharePatchFileUtil.isLegalFile(patchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch file is not found, just return\");\n    return false;\n  }\n  ShareSecurityCheck signatureCheck=new ShareSecurityCheck(context);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(context,manager.getTinkerFlags(),patchFile,signatureCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchPackageCheckFail\");\n    manager.getPatchReporter().onPatchPackageCheckFail(patchFile,returnCode);\n    return false;\n  }\n  String patchMd5=SharePatchFileUtil.getMD5(patchFile);\n  if (patchMd5 == null) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch md5 is null, just return\");\n    return false;\n  }\n  patchResult.patchVersion=patchMd5;\n  TinkerLog.i(TAG,\"UpgradePatch tryPatch:patchMd5:%s\",patchMd5);\n  final String patchDirectory=manager.getPatchDirectory().getAbsolutePath();\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectory);\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectory);\n  final Map<String,String> pkgProps=signatureCheck.getPackagePropertiesIfPresent();\n  if (pkgProps == null) {\n    TinkerLog.e(TAG,\"UpgradePatch packageProperties is null, do we process a valid patch apk ?\");\n    return false;\n  }\n  final String isProtectedAppStr=pkgProps.get(ShareConstants.PKGMETA_KEY_IS_PROTECTED_APP);\n  final boolean isProtectedApp=(isProtectedAppStr != null && !isProtectedAppStr.isEmpty() && !\"0\".equals(isProtectedAppStr));\n  SharePatchInfo oldInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  SharePatchInfo newInfo;\n  if (oldInfo != null) {\n    if (oldInfo.oldVersion == null || oldInfo.newVersion == null || oldInfo.oatDir == null) {\n      TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchInfoCorrupted\");\n      manager.getPatchReporter().onPatchInfoCorrupted(patchFile,oldInfo.oldVersion,oldInfo.newVersion);\n      return false;\n    }\n    if (!SharePatchFileUtil.checkIfMd5Valid(patchMd5)) {\n      TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchVersionCheckFail md5 %s is valid\",patchMd5);\n      manager.getPatchReporter().onPatchVersionCheckFail(patchFile,oldInfo,patchMd5);\n      return false;\n    }\n    final boolean usingInterpret=oldInfo.oatDir.equals(ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    if (!usingInterpret && !ShareTinkerInternals.isNullOrNil(oldInfo.newVersion) && oldInfo.newVersion.equals(patchMd5)&& !oldInfo.isRemoveNewVersion) {\n      TinkerLog.e(TAG,\"patch already applied, md5: %s\",patchMd5);\n      UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n      return true;\n    }\n    final String finalOatDir=usingInterpret ? ShareConstants.CHANING_DEX_OPTIMIZE_PATH : oldInfo.oatDir;\n    newInfo=new SharePatchInfo(oldInfo.oldVersion,patchMd5,isProtectedApp,false,Build.FINGERPRINT,finalOatDir);\n  }\n else {\n    newInfo=new SharePatchInfo(\"\",patchMd5,isProtectedApp,false,Build.FINGERPRINT,ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH);\n  }\n  final String patchName=SharePatchFileUtil.getPatchVersionDirectory(patchMd5);\n  final String patchVersionDirectory=patchDirectory + \"/\" + patchName;\n  TinkerLog.i(TAG,\"UpgradePatch tryPatch:patchVersionDirectory:%s\",patchVersionDirectory);\n  File destPatchFile=new File(patchVersionDirectory + \"/\" + SharePatchFileUtil.getPatchVersionFile(patchMd5));\n  try {\n    if (!patchMd5.equals(SharePatchFileUtil.getMD5(destPatchFile))) {\n      SharePatchFileUtil.copyFileUsingStream(patchFile,destPatchFile);\n      TinkerLog.w(TAG,\"UpgradePatch copy patch file, src file: %s size: %d, dest file: %s size:%d\",patchFile.getAbsolutePath(),patchFile.length(),destPatchFile.getAbsolutePath(),destPatchFile.length());\n    }\n  }\n catch (  IOException e) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:copy patch file fail from %s to %s\",patchFile.getPath(),destPatchFile.getPath());\n    manager.getPatchReporter().onPatchTypeExtractFail(patchFile,destPatchFile,patchFile.getName(),ShareConstants.TYPE_PATCH_FILE);\n    return false;\n  }\n  if (!DexDiffPatchInternal.tryRecoverDexFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch dex failed\");\n    return false;\n  }\n  if (!ArkHotDiffPatchInternal.tryRecoverArkHotLibrary(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    return false;\n  }\n  if (!BsDiffPatchInternal.tryRecoverLibraryFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch library failed\");\n    return false;\n  }\n  if (!ResDiffPatchInternal.tryRecoverResourceFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch resource failed\");\n    return false;\n  }\n  if (!DexDiffPatchInternal.waitAndCheckDexOptFile(patchFile,manager)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, check dex opt file failed\");\n    return false;\n  }\n  if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,newInfo,patchInfoLockFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, rewrite patch info failed\");\n    manager.getPatchReporter().onPatchInfoCorrupted(patchFile,newInfo.oldVersion,newInfo.newVersion);\n    return false;\n  }\n  UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n  TinkerLog.w(TAG,\"UpgradePatch tryPatch: done, it is ok\");\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 669,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 52,
        "startColumnNumber" : 12,
        "endLineNumber" : 52,
        "endColumnNumber" : 25
      },
      "nodeContext" : "return false;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "boolean"
  }, {
    "nodeContext" : "false",
    "nodeType" : "BooleanLiteral",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 57,
      "startColumnNumber" : 19,
      "endLineNumber" : 57,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 57,
        "startColumnNumber" : 12,
        "endLineNumber" : 57,
        "endColumnNumber" : 25
      },
      "nodeContext" : "return false;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 129,
        "startLineNumber" : 55,
        "startColumnNumber" : 56,
        "endLineNumber" : 58,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch file is not found, just return\");\n  return false;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 177,
        "startLineNumber" : 55,
        "startColumnNumber" : 8,
        "endLineNumber" : 58,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!SharePatchFileUtil.isLegalFile(patchFile)) {\n  TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch file is not found, just return\");\n  return false;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7821,
        "startLineNumber" : 45,
        "startColumnNumber" : 92,
        "endLineNumber" : 195,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Tinker manager=Tinker.with(context);\n  final File patchFile=new File(tempPatchPath);\n  if (!manager.isTinkerEnabled() || !ShareTinkerInternals.isTinkerEnableWithSharedPreferences(context)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch is disabled, just return\");\n    return false;\n  }\n  if (!SharePatchFileUtil.isLegalFile(patchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch file is not found, just return\");\n    return false;\n  }\n  ShareSecurityCheck signatureCheck=new ShareSecurityCheck(context);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(context,manager.getTinkerFlags(),patchFile,signatureCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchPackageCheckFail\");\n    manager.getPatchReporter().onPatchPackageCheckFail(patchFile,returnCode);\n    return false;\n  }\n  String patchMd5=SharePatchFileUtil.getMD5(patchFile);\n  if (patchMd5 == null) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch md5 is null, just return\");\n    return false;\n  }\n  patchResult.patchVersion=patchMd5;\n  TinkerLog.i(TAG,\"UpgradePatch tryPatch:patchMd5:%s\",patchMd5);\n  final String patchDirectory=manager.getPatchDirectory().getAbsolutePath();\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectory);\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectory);\n  final Map<String,String> pkgProps=signatureCheck.getPackagePropertiesIfPresent();\n  if (pkgProps == null) {\n    TinkerLog.e(TAG,\"UpgradePatch packageProperties is null, do we process a valid patch apk ?\");\n    return false;\n  }\n  final String isProtectedAppStr=pkgProps.get(ShareConstants.PKGMETA_KEY_IS_PROTECTED_APP);\n  final boolean isProtectedApp=(isProtectedAppStr != null && !isProtectedAppStr.isEmpty() && !\"0\".equals(isProtectedAppStr));\n  SharePatchInfo oldInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  SharePatchInfo newInfo;\n  if (oldInfo != null) {\n    if (oldInfo.oldVersion == null || oldInfo.newVersion == null || oldInfo.oatDir == null) {\n      TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchInfoCorrupted\");\n      manager.getPatchReporter().onPatchInfoCorrupted(patchFile,oldInfo.oldVersion,oldInfo.newVersion);\n      return false;\n    }\n    if (!SharePatchFileUtil.checkIfMd5Valid(patchMd5)) {\n      TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchVersionCheckFail md5 %s is valid\",patchMd5);\n      manager.getPatchReporter().onPatchVersionCheckFail(patchFile,oldInfo,patchMd5);\n      return false;\n    }\n    final boolean usingInterpret=oldInfo.oatDir.equals(ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    if (!usingInterpret && !ShareTinkerInternals.isNullOrNil(oldInfo.newVersion) && oldInfo.newVersion.equals(patchMd5)&& !oldInfo.isRemoveNewVersion) {\n      TinkerLog.e(TAG,\"patch already applied, md5: %s\",patchMd5);\n      UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n      return true;\n    }\n    final String finalOatDir=usingInterpret ? ShareConstants.CHANING_DEX_OPTIMIZE_PATH : oldInfo.oatDir;\n    newInfo=new SharePatchInfo(oldInfo.oldVersion,patchMd5,isProtectedApp,false,Build.FINGERPRINT,finalOatDir);\n  }\n else {\n    newInfo=new SharePatchInfo(\"\",patchMd5,isProtectedApp,false,Build.FINGERPRINT,ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH);\n  }\n  final String patchName=SharePatchFileUtil.getPatchVersionDirectory(patchMd5);\n  final String patchVersionDirectory=patchDirectory + \"/\" + patchName;\n  TinkerLog.i(TAG,\"UpgradePatch tryPatch:patchVersionDirectory:%s\",patchVersionDirectory);\n  File destPatchFile=new File(patchVersionDirectory + \"/\" + SharePatchFileUtil.getPatchVersionFile(patchMd5));\n  try {\n    if (!patchMd5.equals(SharePatchFileUtil.getMD5(destPatchFile))) {\n      SharePatchFileUtil.copyFileUsingStream(patchFile,destPatchFile);\n      TinkerLog.w(TAG,\"UpgradePatch copy patch file, src file: %s size: %d, dest file: %s size:%d\",patchFile.getAbsolutePath(),patchFile.length(),destPatchFile.getAbsolutePath(),destPatchFile.length());\n    }\n  }\n catch (  IOException e) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:copy patch file fail from %s to %s\",patchFile.getPath(),destPatchFile.getPath());\n    manager.getPatchReporter().onPatchTypeExtractFail(patchFile,destPatchFile,patchFile.getName(),ShareConstants.TYPE_PATCH_FILE);\n    return false;\n  }\n  if (!DexDiffPatchInternal.tryRecoverDexFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch dex failed\");\n    return false;\n  }\n  if (!ArkHotDiffPatchInternal.tryRecoverArkHotLibrary(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    return false;\n  }\n  if (!BsDiffPatchInternal.tryRecoverLibraryFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch library failed\");\n    return false;\n  }\n  if (!ResDiffPatchInternal.tryRecoverResourceFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch resource failed\");\n    return false;\n  }\n  if (!DexDiffPatchInternal.waitAndCheckDexOptFile(patchFile,manager)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, check dex opt file failed\");\n    return false;\n  }\n  if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,newInfo,patchInfoLockFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, rewrite patch info failed\");\n    manager.getPatchReporter().onPatchInfoCorrupted(patchFile,newInfo.oldVersion,newInfo.newVersion);\n    return false;\n  }\n  UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n  TinkerLog.w(TAG,\"UpgradePatch tryPatch: done, it is ok\");\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 651,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7923,
        "startLineNumber" : 44,
        "startColumnNumber" : 4,
        "endLineNumber" : 195,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public boolean tryPatch(Context context,String tempPatchPath,PatchResult patchResult){\n  Tinker manager=Tinker.with(context);\n  final File patchFile=new File(tempPatchPath);\n  if (!manager.isTinkerEnabled() || !ShareTinkerInternals.isTinkerEnableWithSharedPreferences(context)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch is disabled, just return\");\n    return false;\n  }\n  if (!SharePatchFileUtil.isLegalFile(patchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch file is not found, just return\");\n    return false;\n  }\n  ShareSecurityCheck signatureCheck=new ShareSecurityCheck(context);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(context,manager.getTinkerFlags(),patchFile,signatureCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchPackageCheckFail\");\n    manager.getPatchReporter().onPatchPackageCheckFail(patchFile,returnCode);\n    return false;\n  }\n  String patchMd5=SharePatchFileUtil.getMD5(patchFile);\n  if (patchMd5 == null) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch md5 is null, just return\");\n    return false;\n  }\n  patchResult.patchVersion=patchMd5;\n  TinkerLog.i(TAG,\"UpgradePatch tryPatch:patchMd5:%s\",patchMd5);\n  final String patchDirectory=manager.getPatchDirectory().getAbsolutePath();\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectory);\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectory);\n  final Map<String,String> pkgProps=signatureCheck.getPackagePropertiesIfPresent();\n  if (pkgProps == null) {\n    TinkerLog.e(TAG,\"UpgradePatch packageProperties is null, do we process a valid patch apk ?\");\n    return false;\n  }\n  final String isProtectedAppStr=pkgProps.get(ShareConstants.PKGMETA_KEY_IS_PROTECTED_APP);\n  final boolean isProtectedApp=(isProtectedAppStr != null && !isProtectedAppStr.isEmpty() && !\"0\".equals(isProtectedAppStr));\n  SharePatchInfo oldInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  SharePatchInfo newInfo;\n  if (oldInfo != null) {\n    if (oldInfo.oldVersion == null || oldInfo.newVersion == null || oldInfo.oatDir == null) {\n      TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchInfoCorrupted\");\n      manager.getPatchReporter().onPatchInfoCorrupted(patchFile,oldInfo.oldVersion,oldInfo.newVersion);\n      return false;\n    }\n    if (!SharePatchFileUtil.checkIfMd5Valid(patchMd5)) {\n      TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchVersionCheckFail md5 %s is valid\",patchMd5);\n      manager.getPatchReporter().onPatchVersionCheckFail(patchFile,oldInfo,patchMd5);\n      return false;\n    }\n    final boolean usingInterpret=oldInfo.oatDir.equals(ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    if (!usingInterpret && !ShareTinkerInternals.isNullOrNil(oldInfo.newVersion) && oldInfo.newVersion.equals(patchMd5)&& !oldInfo.isRemoveNewVersion) {\n      TinkerLog.e(TAG,\"patch already applied, md5: %s\",patchMd5);\n      UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n      return true;\n    }\n    final String finalOatDir=usingInterpret ? ShareConstants.CHANING_DEX_OPTIMIZE_PATH : oldInfo.oatDir;\n    newInfo=new SharePatchInfo(oldInfo.oldVersion,patchMd5,isProtectedApp,false,Build.FINGERPRINT,finalOatDir);\n  }\n else {\n    newInfo=new SharePatchInfo(\"\",patchMd5,isProtectedApp,false,Build.FINGERPRINT,ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH);\n  }\n  final String patchName=SharePatchFileUtil.getPatchVersionDirectory(patchMd5);\n  final String patchVersionDirectory=patchDirectory + \"/\" + patchName;\n  TinkerLog.i(TAG,\"UpgradePatch tryPatch:patchVersionDirectory:%s\",patchVersionDirectory);\n  File destPatchFile=new File(patchVersionDirectory + \"/\" + SharePatchFileUtil.getPatchVersionFile(patchMd5));\n  try {\n    if (!patchMd5.equals(SharePatchFileUtil.getMD5(destPatchFile))) {\n      SharePatchFileUtil.copyFileUsingStream(patchFile,destPatchFile);\n      TinkerLog.w(TAG,\"UpgradePatch copy patch file, src file: %s size: %d, dest file: %s size:%d\",patchFile.getAbsolutePath(),patchFile.length(),destPatchFile.getAbsolutePath(),destPatchFile.length());\n    }\n  }\n catch (  IOException e) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:copy patch file fail from %s to %s\",patchFile.getPath(),destPatchFile.getPath());\n    manager.getPatchReporter().onPatchTypeExtractFail(patchFile,destPatchFile,patchFile.getName(),ShareConstants.TYPE_PATCH_FILE);\n    return false;\n  }\n  if (!DexDiffPatchInternal.tryRecoverDexFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch dex failed\");\n    return false;\n  }\n  if (!ArkHotDiffPatchInternal.tryRecoverArkHotLibrary(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    return false;\n  }\n  if (!BsDiffPatchInternal.tryRecoverLibraryFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch library failed\");\n    return false;\n  }\n  if (!ResDiffPatchInternal.tryRecoverResourceFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch resource failed\");\n    return false;\n  }\n  if (!DexDiffPatchInternal.waitAndCheckDexOptFile(patchFile,manager)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, check dex opt file failed\");\n    return false;\n  }\n  if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,newInfo,patchInfoLockFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, rewrite patch info failed\");\n    manager.getPatchReporter().onPatchInfoCorrupted(patchFile,newInfo.oldVersion,newInfo.newVersion);\n    return false;\n  }\n  UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n  TinkerLog.w(TAG,\"UpgradePatch tryPatch: done, it is ok\");\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 669,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 57,
        "startColumnNumber" : 12,
        "endLineNumber" : 57,
        "endColumnNumber" : 25
      },
      "nodeContext" : "return false;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "boolean"
  }, {
    "nodeContext" : "false",
    "nodeType" : "BooleanLiteral",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 66,
      "startColumnNumber" : 19,
      "endLineNumber" : 66,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 66,
        "startColumnNumber" : 12,
        "endLineNumber" : 66,
        "endColumnNumber" : 25
      },
      "nodeContext" : "return false;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 203,
        "startLineNumber" : 63,
        "startColumnNumber" : 65,
        "endLineNumber" : 67,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchPackageCheckFail\");\n  manager.getPatchReporter().onPatchPackageCheckFail(patchFile,returnCode);\n  return false;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 260,
        "startLineNumber" : 63,
        "startColumnNumber" : 8,
        "endLineNumber" : 67,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n  TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchPackageCheckFail\");\n  manager.getPatchReporter().onPatchPackageCheckFail(patchFile,returnCode);\n  return false;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 23,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7821,
        "startLineNumber" : 45,
        "startColumnNumber" : 92,
        "endLineNumber" : 195,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Tinker manager=Tinker.with(context);\n  final File patchFile=new File(tempPatchPath);\n  if (!manager.isTinkerEnabled() || !ShareTinkerInternals.isTinkerEnableWithSharedPreferences(context)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch is disabled, just return\");\n    return false;\n  }\n  if (!SharePatchFileUtil.isLegalFile(patchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch file is not found, just return\");\n    return false;\n  }\n  ShareSecurityCheck signatureCheck=new ShareSecurityCheck(context);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(context,manager.getTinkerFlags(),patchFile,signatureCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchPackageCheckFail\");\n    manager.getPatchReporter().onPatchPackageCheckFail(patchFile,returnCode);\n    return false;\n  }\n  String patchMd5=SharePatchFileUtil.getMD5(patchFile);\n  if (patchMd5 == null) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch md5 is null, just return\");\n    return false;\n  }\n  patchResult.patchVersion=patchMd5;\n  TinkerLog.i(TAG,\"UpgradePatch tryPatch:patchMd5:%s\",patchMd5);\n  final String patchDirectory=manager.getPatchDirectory().getAbsolutePath();\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectory);\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectory);\n  final Map<String,String> pkgProps=signatureCheck.getPackagePropertiesIfPresent();\n  if (pkgProps == null) {\n    TinkerLog.e(TAG,\"UpgradePatch packageProperties is null, do we process a valid patch apk ?\");\n    return false;\n  }\n  final String isProtectedAppStr=pkgProps.get(ShareConstants.PKGMETA_KEY_IS_PROTECTED_APP);\n  final boolean isProtectedApp=(isProtectedAppStr != null && !isProtectedAppStr.isEmpty() && !\"0\".equals(isProtectedAppStr));\n  SharePatchInfo oldInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  SharePatchInfo newInfo;\n  if (oldInfo != null) {\n    if (oldInfo.oldVersion == null || oldInfo.newVersion == null || oldInfo.oatDir == null) {\n      TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchInfoCorrupted\");\n      manager.getPatchReporter().onPatchInfoCorrupted(patchFile,oldInfo.oldVersion,oldInfo.newVersion);\n      return false;\n    }\n    if (!SharePatchFileUtil.checkIfMd5Valid(patchMd5)) {\n      TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchVersionCheckFail md5 %s is valid\",patchMd5);\n      manager.getPatchReporter().onPatchVersionCheckFail(patchFile,oldInfo,patchMd5);\n      return false;\n    }\n    final boolean usingInterpret=oldInfo.oatDir.equals(ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    if (!usingInterpret && !ShareTinkerInternals.isNullOrNil(oldInfo.newVersion) && oldInfo.newVersion.equals(patchMd5)&& !oldInfo.isRemoveNewVersion) {\n      TinkerLog.e(TAG,\"patch already applied, md5: %s\",patchMd5);\n      UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n      return true;\n    }\n    final String finalOatDir=usingInterpret ? ShareConstants.CHANING_DEX_OPTIMIZE_PATH : oldInfo.oatDir;\n    newInfo=new SharePatchInfo(oldInfo.oldVersion,patchMd5,isProtectedApp,false,Build.FINGERPRINT,finalOatDir);\n  }\n else {\n    newInfo=new SharePatchInfo(\"\",patchMd5,isProtectedApp,false,Build.FINGERPRINT,ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH);\n  }\n  final String patchName=SharePatchFileUtil.getPatchVersionDirectory(patchMd5);\n  final String patchVersionDirectory=patchDirectory + \"/\" + patchName;\n  TinkerLog.i(TAG,\"UpgradePatch tryPatch:patchVersionDirectory:%s\",patchVersionDirectory);\n  File destPatchFile=new File(patchVersionDirectory + \"/\" + SharePatchFileUtil.getPatchVersionFile(patchMd5));\n  try {\n    if (!patchMd5.equals(SharePatchFileUtil.getMD5(destPatchFile))) {\n      SharePatchFileUtil.copyFileUsingStream(patchFile,destPatchFile);\n      TinkerLog.w(TAG,\"UpgradePatch copy patch file, src file: %s size: %d, dest file: %s size:%d\",patchFile.getAbsolutePath(),patchFile.length(),destPatchFile.getAbsolutePath(),destPatchFile.length());\n    }\n  }\n catch (  IOException e) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:copy patch file fail from %s to %s\",patchFile.getPath(),destPatchFile.getPath());\n    manager.getPatchReporter().onPatchTypeExtractFail(patchFile,destPatchFile,patchFile.getName(),ShareConstants.TYPE_PATCH_FILE);\n    return false;\n  }\n  if (!DexDiffPatchInternal.tryRecoverDexFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch dex failed\");\n    return false;\n  }\n  if (!ArkHotDiffPatchInternal.tryRecoverArkHotLibrary(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    return false;\n  }\n  if (!BsDiffPatchInternal.tryRecoverLibraryFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch library failed\");\n    return false;\n  }\n  if (!ResDiffPatchInternal.tryRecoverResourceFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch resource failed\");\n    return false;\n  }\n  if (!DexDiffPatchInternal.waitAndCheckDexOptFile(patchFile,manager)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, check dex opt file failed\");\n    return false;\n  }\n  if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,newInfo,patchInfoLockFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, rewrite patch info failed\");\n    manager.getPatchReporter().onPatchInfoCorrupted(patchFile,newInfo.oldVersion,newInfo.newVersion);\n    return false;\n  }\n  UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n  TinkerLog.w(TAG,\"UpgradePatch tryPatch: done, it is ok\");\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 651,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7923,
        "startLineNumber" : 44,
        "startColumnNumber" : 4,
        "endLineNumber" : 195,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public boolean tryPatch(Context context,String tempPatchPath,PatchResult patchResult){\n  Tinker manager=Tinker.with(context);\n  final File patchFile=new File(tempPatchPath);\n  if (!manager.isTinkerEnabled() || !ShareTinkerInternals.isTinkerEnableWithSharedPreferences(context)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch is disabled, just return\");\n    return false;\n  }\n  if (!SharePatchFileUtil.isLegalFile(patchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch file is not found, just return\");\n    return false;\n  }\n  ShareSecurityCheck signatureCheck=new ShareSecurityCheck(context);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(context,manager.getTinkerFlags(),patchFile,signatureCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchPackageCheckFail\");\n    manager.getPatchReporter().onPatchPackageCheckFail(patchFile,returnCode);\n    return false;\n  }\n  String patchMd5=SharePatchFileUtil.getMD5(patchFile);\n  if (patchMd5 == null) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch md5 is null, just return\");\n    return false;\n  }\n  patchResult.patchVersion=patchMd5;\n  TinkerLog.i(TAG,\"UpgradePatch tryPatch:patchMd5:%s\",patchMd5);\n  final String patchDirectory=manager.getPatchDirectory().getAbsolutePath();\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectory);\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectory);\n  final Map<String,String> pkgProps=signatureCheck.getPackagePropertiesIfPresent();\n  if (pkgProps == null) {\n    TinkerLog.e(TAG,\"UpgradePatch packageProperties is null, do we process a valid patch apk ?\");\n    return false;\n  }\n  final String isProtectedAppStr=pkgProps.get(ShareConstants.PKGMETA_KEY_IS_PROTECTED_APP);\n  final boolean isProtectedApp=(isProtectedAppStr != null && !isProtectedAppStr.isEmpty() && !\"0\".equals(isProtectedAppStr));\n  SharePatchInfo oldInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  SharePatchInfo newInfo;\n  if (oldInfo != null) {\n    if (oldInfo.oldVersion == null || oldInfo.newVersion == null || oldInfo.oatDir == null) {\n      TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchInfoCorrupted\");\n      manager.getPatchReporter().onPatchInfoCorrupted(patchFile,oldInfo.oldVersion,oldInfo.newVersion);\n      return false;\n    }\n    if (!SharePatchFileUtil.checkIfMd5Valid(patchMd5)) {\n      TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchVersionCheckFail md5 %s is valid\",patchMd5);\n      manager.getPatchReporter().onPatchVersionCheckFail(patchFile,oldInfo,patchMd5);\n      return false;\n    }\n    final boolean usingInterpret=oldInfo.oatDir.equals(ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    if (!usingInterpret && !ShareTinkerInternals.isNullOrNil(oldInfo.newVersion) && oldInfo.newVersion.equals(patchMd5)&& !oldInfo.isRemoveNewVersion) {\n      TinkerLog.e(TAG,\"patch already applied, md5: %s\",patchMd5);\n      UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n      return true;\n    }\n    final String finalOatDir=usingInterpret ? ShareConstants.CHANING_DEX_OPTIMIZE_PATH : oldInfo.oatDir;\n    newInfo=new SharePatchInfo(oldInfo.oldVersion,patchMd5,isProtectedApp,false,Build.FINGERPRINT,finalOatDir);\n  }\n else {\n    newInfo=new SharePatchInfo(\"\",patchMd5,isProtectedApp,false,Build.FINGERPRINT,ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH);\n  }\n  final String patchName=SharePatchFileUtil.getPatchVersionDirectory(patchMd5);\n  final String patchVersionDirectory=patchDirectory + \"/\" + patchName;\n  TinkerLog.i(TAG,\"UpgradePatch tryPatch:patchVersionDirectory:%s\",patchVersionDirectory);\n  File destPatchFile=new File(patchVersionDirectory + \"/\" + SharePatchFileUtil.getPatchVersionFile(patchMd5));\n  try {\n    if (!patchMd5.equals(SharePatchFileUtil.getMD5(destPatchFile))) {\n      SharePatchFileUtil.copyFileUsingStream(patchFile,destPatchFile);\n      TinkerLog.w(TAG,\"UpgradePatch copy patch file, src file: %s size: %d, dest file: %s size:%d\",patchFile.getAbsolutePath(),patchFile.length(),destPatchFile.getAbsolutePath(),destPatchFile.length());\n    }\n  }\n catch (  IOException e) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:copy patch file fail from %s to %s\",patchFile.getPath(),destPatchFile.getPath());\n    manager.getPatchReporter().onPatchTypeExtractFail(patchFile,destPatchFile,patchFile.getName(),ShareConstants.TYPE_PATCH_FILE);\n    return false;\n  }\n  if (!DexDiffPatchInternal.tryRecoverDexFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch dex failed\");\n    return false;\n  }\n  if (!ArkHotDiffPatchInternal.tryRecoverArkHotLibrary(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    return false;\n  }\n  if (!BsDiffPatchInternal.tryRecoverLibraryFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch library failed\");\n    return false;\n  }\n  if (!ResDiffPatchInternal.tryRecoverResourceFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch resource failed\");\n    return false;\n  }\n  if (!DexDiffPatchInternal.waitAndCheckDexOptFile(patchFile,manager)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, check dex opt file failed\");\n    return false;\n  }\n  if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,newInfo,patchInfoLockFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, rewrite patch info failed\");\n    manager.getPatchReporter().onPatchInfoCorrupted(patchFile,newInfo.oldVersion,newInfo.newVersion);\n    return false;\n  }\n  UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n  TinkerLog.w(TAG,\"UpgradePatch tryPatch: done, it is ok\");\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 669,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 66,
        "startColumnNumber" : 12,
        "endLineNumber" : 66,
        "endColumnNumber" : 25
      },
      "nodeContext" : "return false;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "boolean"
  }, {
    "nodeContext" : "false",
    "nodeType" : "BooleanLiteral",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 72,
      "startColumnNumber" : 19,
      "endLineNumber" : 72,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 72,
        "startColumnNumber" : 12,
        "endLineNumber" : 72,
        "endColumnNumber" : 25
      },
      "nodeContext" : "return false;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 123,
        "startLineNumber" : 70,
        "startColumnNumber" : 30,
        "endLineNumber" : 73,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch md5 is null, just return\");\n  return false;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 145,
        "startLineNumber" : 70,
        "startColumnNumber" : 8,
        "endLineNumber" : 73,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (patchMd5 == null) {\n  TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch md5 is null, just return\");\n  return false;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7821,
        "startLineNumber" : 45,
        "startColumnNumber" : 92,
        "endLineNumber" : 195,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Tinker manager=Tinker.with(context);\n  final File patchFile=new File(tempPatchPath);\n  if (!manager.isTinkerEnabled() || !ShareTinkerInternals.isTinkerEnableWithSharedPreferences(context)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch is disabled, just return\");\n    return false;\n  }\n  if (!SharePatchFileUtil.isLegalFile(patchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch file is not found, just return\");\n    return false;\n  }\n  ShareSecurityCheck signatureCheck=new ShareSecurityCheck(context);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(context,manager.getTinkerFlags(),patchFile,signatureCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchPackageCheckFail\");\n    manager.getPatchReporter().onPatchPackageCheckFail(patchFile,returnCode);\n    return false;\n  }\n  String patchMd5=SharePatchFileUtil.getMD5(patchFile);\n  if (patchMd5 == null) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch md5 is null, just return\");\n    return false;\n  }\n  patchResult.patchVersion=patchMd5;\n  TinkerLog.i(TAG,\"UpgradePatch tryPatch:patchMd5:%s\",patchMd5);\n  final String patchDirectory=manager.getPatchDirectory().getAbsolutePath();\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectory);\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectory);\n  final Map<String,String> pkgProps=signatureCheck.getPackagePropertiesIfPresent();\n  if (pkgProps == null) {\n    TinkerLog.e(TAG,\"UpgradePatch packageProperties is null, do we process a valid patch apk ?\");\n    return false;\n  }\n  final String isProtectedAppStr=pkgProps.get(ShareConstants.PKGMETA_KEY_IS_PROTECTED_APP);\n  final boolean isProtectedApp=(isProtectedAppStr != null && !isProtectedAppStr.isEmpty() && !\"0\".equals(isProtectedAppStr));\n  SharePatchInfo oldInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  SharePatchInfo newInfo;\n  if (oldInfo != null) {\n    if (oldInfo.oldVersion == null || oldInfo.newVersion == null || oldInfo.oatDir == null) {\n      TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchInfoCorrupted\");\n      manager.getPatchReporter().onPatchInfoCorrupted(patchFile,oldInfo.oldVersion,oldInfo.newVersion);\n      return false;\n    }\n    if (!SharePatchFileUtil.checkIfMd5Valid(patchMd5)) {\n      TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchVersionCheckFail md5 %s is valid\",patchMd5);\n      manager.getPatchReporter().onPatchVersionCheckFail(patchFile,oldInfo,patchMd5);\n      return false;\n    }\n    final boolean usingInterpret=oldInfo.oatDir.equals(ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    if (!usingInterpret && !ShareTinkerInternals.isNullOrNil(oldInfo.newVersion) && oldInfo.newVersion.equals(patchMd5)&& !oldInfo.isRemoveNewVersion) {\n      TinkerLog.e(TAG,\"patch already applied, md5: %s\",patchMd5);\n      UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n      return true;\n    }\n    final String finalOatDir=usingInterpret ? ShareConstants.CHANING_DEX_OPTIMIZE_PATH : oldInfo.oatDir;\n    newInfo=new SharePatchInfo(oldInfo.oldVersion,patchMd5,isProtectedApp,false,Build.FINGERPRINT,finalOatDir);\n  }\n else {\n    newInfo=new SharePatchInfo(\"\",patchMd5,isProtectedApp,false,Build.FINGERPRINT,ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH);\n  }\n  final String patchName=SharePatchFileUtil.getPatchVersionDirectory(patchMd5);\n  final String patchVersionDirectory=patchDirectory + \"/\" + patchName;\n  TinkerLog.i(TAG,\"UpgradePatch tryPatch:patchVersionDirectory:%s\",patchVersionDirectory);\n  File destPatchFile=new File(patchVersionDirectory + \"/\" + SharePatchFileUtil.getPatchVersionFile(patchMd5));\n  try {\n    if (!patchMd5.equals(SharePatchFileUtil.getMD5(destPatchFile))) {\n      SharePatchFileUtil.copyFileUsingStream(patchFile,destPatchFile);\n      TinkerLog.w(TAG,\"UpgradePatch copy patch file, src file: %s size: %d, dest file: %s size:%d\",patchFile.getAbsolutePath(),patchFile.length(),destPatchFile.getAbsolutePath(),destPatchFile.length());\n    }\n  }\n catch (  IOException e) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:copy patch file fail from %s to %s\",patchFile.getPath(),destPatchFile.getPath());\n    manager.getPatchReporter().onPatchTypeExtractFail(patchFile,destPatchFile,patchFile.getName(),ShareConstants.TYPE_PATCH_FILE);\n    return false;\n  }\n  if (!DexDiffPatchInternal.tryRecoverDexFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch dex failed\");\n    return false;\n  }\n  if (!ArkHotDiffPatchInternal.tryRecoverArkHotLibrary(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    return false;\n  }\n  if (!BsDiffPatchInternal.tryRecoverLibraryFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch library failed\");\n    return false;\n  }\n  if (!ResDiffPatchInternal.tryRecoverResourceFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch resource failed\");\n    return false;\n  }\n  if (!DexDiffPatchInternal.waitAndCheckDexOptFile(patchFile,manager)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, check dex opt file failed\");\n    return false;\n  }\n  if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,newInfo,patchInfoLockFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, rewrite patch info failed\");\n    manager.getPatchReporter().onPatchInfoCorrupted(patchFile,newInfo.oldVersion,newInfo.newVersion);\n    return false;\n  }\n  UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n  TinkerLog.w(TAG,\"UpgradePatch tryPatch: done, it is ok\");\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 651,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7923,
        "startLineNumber" : 44,
        "startColumnNumber" : 4,
        "endLineNumber" : 195,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public boolean tryPatch(Context context,String tempPatchPath,PatchResult patchResult){\n  Tinker manager=Tinker.with(context);\n  final File patchFile=new File(tempPatchPath);\n  if (!manager.isTinkerEnabled() || !ShareTinkerInternals.isTinkerEnableWithSharedPreferences(context)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch is disabled, just return\");\n    return false;\n  }\n  if (!SharePatchFileUtil.isLegalFile(patchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch file is not found, just return\");\n    return false;\n  }\n  ShareSecurityCheck signatureCheck=new ShareSecurityCheck(context);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(context,manager.getTinkerFlags(),patchFile,signatureCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchPackageCheckFail\");\n    manager.getPatchReporter().onPatchPackageCheckFail(patchFile,returnCode);\n    return false;\n  }\n  String patchMd5=SharePatchFileUtil.getMD5(patchFile);\n  if (patchMd5 == null) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch md5 is null, just return\");\n    return false;\n  }\n  patchResult.patchVersion=patchMd5;\n  TinkerLog.i(TAG,\"UpgradePatch tryPatch:patchMd5:%s\",patchMd5);\n  final String patchDirectory=manager.getPatchDirectory().getAbsolutePath();\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectory);\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectory);\n  final Map<String,String> pkgProps=signatureCheck.getPackagePropertiesIfPresent();\n  if (pkgProps == null) {\n    TinkerLog.e(TAG,\"UpgradePatch packageProperties is null, do we process a valid patch apk ?\");\n    return false;\n  }\n  final String isProtectedAppStr=pkgProps.get(ShareConstants.PKGMETA_KEY_IS_PROTECTED_APP);\n  final boolean isProtectedApp=(isProtectedAppStr != null && !isProtectedAppStr.isEmpty() && !\"0\".equals(isProtectedAppStr));\n  SharePatchInfo oldInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  SharePatchInfo newInfo;\n  if (oldInfo != null) {\n    if (oldInfo.oldVersion == null || oldInfo.newVersion == null || oldInfo.oatDir == null) {\n      TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchInfoCorrupted\");\n      manager.getPatchReporter().onPatchInfoCorrupted(patchFile,oldInfo.oldVersion,oldInfo.newVersion);\n      return false;\n    }\n    if (!SharePatchFileUtil.checkIfMd5Valid(patchMd5)) {\n      TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchVersionCheckFail md5 %s is valid\",patchMd5);\n      manager.getPatchReporter().onPatchVersionCheckFail(patchFile,oldInfo,patchMd5);\n      return false;\n    }\n    final boolean usingInterpret=oldInfo.oatDir.equals(ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    if (!usingInterpret && !ShareTinkerInternals.isNullOrNil(oldInfo.newVersion) && oldInfo.newVersion.equals(patchMd5)&& !oldInfo.isRemoveNewVersion) {\n      TinkerLog.e(TAG,\"patch already applied, md5: %s\",patchMd5);\n      UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n      return true;\n    }\n    final String finalOatDir=usingInterpret ? ShareConstants.CHANING_DEX_OPTIMIZE_PATH : oldInfo.oatDir;\n    newInfo=new SharePatchInfo(oldInfo.oldVersion,patchMd5,isProtectedApp,false,Build.FINGERPRINT,finalOatDir);\n  }\n else {\n    newInfo=new SharePatchInfo(\"\",patchMd5,isProtectedApp,false,Build.FINGERPRINT,ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH);\n  }\n  final String patchName=SharePatchFileUtil.getPatchVersionDirectory(patchMd5);\n  final String patchVersionDirectory=patchDirectory + \"/\" + patchName;\n  TinkerLog.i(TAG,\"UpgradePatch tryPatch:patchVersionDirectory:%s\",patchVersionDirectory);\n  File destPatchFile=new File(patchVersionDirectory + \"/\" + SharePatchFileUtil.getPatchVersionFile(patchMd5));\n  try {\n    if (!patchMd5.equals(SharePatchFileUtil.getMD5(destPatchFile))) {\n      SharePatchFileUtil.copyFileUsingStream(patchFile,destPatchFile);\n      TinkerLog.w(TAG,\"UpgradePatch copy patch file, src file: %s size: %d, dest file: %s size:%d\",patchFile.getAbsolutePath(),patchFile.length(),destPatchFile.getAbsolutePath(),destPatchFile.length());\n    }\n  }\n catch (  IOException e) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:copy patch file fail from %s to %s\",patchFile.getPath(),destPatchFile.getPath());\n    manager.getPatchReporter().onPatchTypeExtractFail(patchFile,destPatchFile,patchFile.getName(),ShareConstants.TYPE_PATCH_FILE);\n    return false;\n  }\n  if (!DexDiffPatchInternal.tryRecoverDexFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch dex failed\");\n    return false;\n  }\n  if (!ArkHotDiffPatchInternal.tryRecoverArkHotLibrary(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    return false;\n  }\n  if (!BsDiffPatchInternal.tryRecoverLibraryFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch library failed\");\n    return false;\n  }\n  if (!ResDiffPatchInternal.tryRecoverResourceFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch resource failed\");\n    return false;\n  }\n  if (!DexDiffPatchInternal.waitAndCheckDexOptFile(patchFile,manager)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, check dex opt file failed\");\n    return false;\n  }\n  if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,newInfo,patchInfoLockFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, rewrite patch info failed\");\n    manager.getPatchReporter().onPatchInfoCorrupted(patchFile,newInfo.oldVersion,newInfo.newVersion);\n    return false;\n  }\n  UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n  TinkerLog.w(TAG,\"UpgradePatch tryPatch: done, it is ok\");\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 669,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 72,
        "startColumnNumber" : 12,
        "endLineNumber" : 72,
        "endColumnNumber" : 25
      },
      "nodeContext" : "return false;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "boolean"
  }, {
    "nodeContext" : "false",
    "nodeType" : "BooleanLiteral",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 88,
      "startColumnNumber" : 19,
      "endLineNumber" : 88,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 88,
        "startColumnNumber" : 12,
        "endLineNumber" : 88,
        "endColumnNumber" : 25
      },
      "nodeContext" : "return false;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 144,
        "startLineNumber" : 86,
        "startColumnNumber" : 30,
        "endLineNumber" : 89,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  TinkerLog.e(TAG,\"UpgradePatch packageProperties is null, do we process a valid patch apk ?\");\n  return false;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 166,
        "startLineNumber" : 86,
        "startColumnNumber" : 8,
        "endLineNumber" : 89,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (pkgProps == null) {\n  TinkerLog.e(TAG,\"UpgradePatch packageProperties is null, do we process a valid patch apk ?\");\n  return false;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7821,
        "startLineNumber" : 45,
        "startColumnNumber" : 92,
        "endLineNumber" : 195,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Tinker manager=Tinker.with(context);\n  final File patchFile=new File(tempPatchPath);\n  if (!manager.isTinkerEnabled() || !ShareTinkerInternals.isTinkerEnableWithSharedPreferences(context)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch is disabled, just return\");\n    return false;\n  }\n  if (!SharePatchFileUtil.isLegalFile(patchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch file is not found, just return\");\n    return false;\n  }\n  ShareSecurityCheck signatureCheck=new ShareSecurityCheck(context);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(context,manager.getTinkerFlags(),patchFile,signatureCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchPackageCheckFail\");\n    manager.getPatchReporter().onPatchPackageCheckFail(patchFile,returnCode);\n    return false;\n  }\n  String patchMd5=SharePatchFileUtil.getMD5(patchFile);\n  if (patchMd5 == null) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch md5 is null, just return\");\n    return false;\n  }\n  patchResult.patchVersion=patchMd5;\n  TinkerLog.i(TAG,\"UpgradePatch tryPatch:patchMd5:%s\",patchMd5);\n  final String patchDirectory=manager.getPatchDirectory().getAbsolutePath();\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectory);\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectory);\n  final Map<String,String> pkgProps=signatureCheck.getPackagePropertiesIfPresent();\n  if (pkgProps == null) {\n    TinkerLog.e(TAG,\"UpgradePatch packageProperties is null, do we process a valid patch apk ?\");\n    return false;\n  }\n  final String isProtectedAppStr=pkgProps.get(ShareConstants.PKGMETA_KEY_IS_PROTECTED_APP);\n  final boolean isProtectedApp=(isProtectedAppStr != null && !isProtectedAppStr.isEmpty() && !\"0\".equals(isProtectedAppStr));\n  SharePatchInfo oldInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  SharePatchInfo newInfo;\n  if (oldInfo != null) {\n    if (oldInfo.oldVersion == null || oldInfo.newVersion == null || oldInfo.oatDir == null) {\n      TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchInfoCorrupted\");\n      manager.getPatchReporter().onPatchInfoCorrupted(patchFile,oldInfo.oldVersion,oldInfo.newVersion);\n      return false;\n    }\n    if (!SharePatchFileUtil.checkIfMd5Valid(patchMd5)) {\n      TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchVersionCheckFail md5 %s is valid\",patchMd5);\n      manager.getPatchReporter().onPatchVersionCheckFail(patchFile,oldInfo,patchMd5);\n      return false;\n    }\n    final boolean usingInterpret=oldInfo.oatDir.equals(ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    if (!usingInterpret && !ShareTinkerInternals.isNullOrNil(oldInfo.newVersion) && oldInfo.newVersion.equals(patchMd5)&& !oldInfo.isRemoveNewVersion) {\n      TinkerLog.e(TAG,\"patch already applied, md5: %s\",patchMd5);\n      UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n      return true;\n    }\n    final String finalOatDir=usingInterpret ? ShareConstants.CHANING_DEX_OPTIMIZE_PATH : oldInfo.oatDir;\n    newInfo=new SharePatchInfo(oldInfo.oldVersion,patchMd5,isProtectedApp,false,Build.FINGERPRINT,finalOatDir);\n  }\n else {\n    newInfo=new SharePatchInfo(\"\",patchMd5,isProtectedApp,false,Build.FINGERPRINT,ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH);\n  }\n  final String patchName=SharePatchFileUtil.getPatchVersionDirectory(patchMd5);\n  final String patchVersionDirectory=patchDirectory + \"/\" + patchName;\n  TinkerLog.i(TAG,\"UpgradePatch tryPatch:patchVersionDirectory:%s\",patchVersionDirectory);\n  File destPatchFile=new File(patchVersionDirectory + \"/\" + SharePatchFileUtil.getPatchVersionFile(patchMd5));\n  try {\n    if (!patchMd5.equals(SharePatchFileUtil.getMD5(destPatchFile))) {\n      SharePatchFileUtil.copyFileUsingStream(patchFile,destPatchFile);\n      TinkerLog.w(TAG,\"UpgradePatch copy patch file, src file: %s size: %d, dest file: %s size:%d\",patchFile.getAbsolutePath(),patchFile.length(),destPatchFile.getAbsolutePath(),destPatchFile.length());\n    }\n  }\n catch (  IOException e) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:copy patch file fail from %s to %s\",patchFile.getPath(),destPatchFile.getPath());\n    manager.getPatchReporter().onPatchTypeExtractFail(patchFile,destPatchFile,patchFile.getName(),ShareConstants.TYPE_PATCH_FILE);\n    return false;\n  }\n  if (!DexDiffPatchInternal.tryRecoverDexFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch dex failed\");\n    return false;\n  }\n  if (!ArkHotDiffPatchInternal.tryRecoverArkHotLibrary(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    return false;\n  }\n  if (!BsDiffPatchInternal.tryRecoverLibraryFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch library failed\");\n    return false;\n  }\n  if (!ResDiffPatchInternal.tryRecoverResourceFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch resource failed\");\n    return false;\n  }\n  if (!DexDiffPatchInternal.waitAndCheckDexOptFile(patchFile,manager)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, check dex opt file failed\");\n    return false;\n  }\n  if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,newInfo,patchInfoLockFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, rewrite patch info failed\");\n    manager.getPatchReporter().onPatchInfoCorrupted(patchFile,newInfo.oldVersion,newInfo.newVersion);\n    return false;\n  }\n  UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n  TinkerLog.w(TAG,\"UpgradePatch tryPatch: done, it is ok\");\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 651,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7923,
        "startLineNumber" : 44,
        "startColumnNumber" : 4,
        "endLineNumber" : 195,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public boolean tryPatch(Context context,String tempPatchPath,PatchResult patchResult){\n  Tinker manager=Tinker.with(context);\n  final File patchFile=new File(tempPatchPath);\n  if (!manager.isTinkerEnabled() || !ShareTinkerInternals.isTinkerEnableWithSharedPreferences(context)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch is disabled, just return\");\n    return false;\n  }\n  if (!SharePatchFileUtil.isLegalFile(patchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch file is not found, just return\");\n    return false;\n  }\n  ShareSecurityCheck signatureCheck=new ShareSecurityCheck(context);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(context,manager.getTinkerFlags(),patchFile,signatureCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchPackageCheckFail\");\n    manager.getPatchReporter().onPatchPackageCheckFail(patchFile,returnCode);\n    return false;\n  }\n  String patchMd5=SharePatchFileUtil.getMD5(patchFile);\n  if (patchMd5 == null) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch md5 is null, just return\");\n    return false;\n  }\n  patchResult.patchVersion=patchMd5;\n  TinkerLog.i(TAG,\"UpgradePatch tryPatch:patchMd5:%s\",patchMd5);\n  final String patchDirectory=manager.getPatchDirectory().getAbsolutePath();\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectory);\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectory);\n  final Map<String,String> pkgProps=signatureCheck.getPackagePropertiesIfPresent();\n  if (pkgProps == null) {\n    TinkerLog.e(TAG,\"UpgradePatch packageProperties is null, do we process a valid patch apk ?\");\n    return false;\n  }\n  final String isProtectedAppStr=pkgProps.get(ShareConstants.PKGMETA_KEY_IS_PROTECTED_APP);\n  final boolean isProtectedApp=(isProtectedAppStr != null && !isProtectedAppStr.isEmpty() && !\"0\".equals(isProtectedAppStr));\n  SharePatchInfo oldInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  SharePatchInfo newInfo;\n  if (oldInfo != null) {\n    if (oldInfo.oldVersion == null || oldInfo.newVersion == null || oldInfo.oatDir == null) {\n      TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchInfoCorrupted\");\n      manager.getPatchReporter().onPatchInfoCorrupted(patchFile,oldInfo.oldVersion,oldInfo.newVersion);\n      return false;\n    }\n    if (!SharePatchFileUtil.checkIfMd5Valid(patchMd5)) {\n      TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchVersionCheckFail md5 %s is valid\",patchMd5);\n      manager.getPatchReporter().onPatchVersionCheckFail(patchFile,oldInfo,patchMd5);\n      return false;\n    }\n    final boolean usingInterpret=oldInfo.oatDir.equals(ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    if (!usingInterpret && !ShareTinkerInternals.isNullOrNil(oldInfo.newVersion) && oldInfo.newVersion.equals(patchMd5)&& !oldInfo.isRemoveNewVersion) {\n      TinkerLog.e(TAG,\"patch already applied, md5: %s\",patchMd5);\n      UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n      return true;\n    }\n    final String finalOatDir=usingInterpret ? ShareConstants.CHANING_DEX_OPTIMIZE_PATH : oldInfo.oatDir;\n    newInfo=new SharePatchInfo(oldInfo.oldVersion,patchMd5,isProtectedApp,false,Build.FINGERPRINT,finalOatDir);\n  }\n else {\n    newInfo=new SharePatchInfo(\"\",patchMd5,isProtectedApp,false,Build.FINGERPRINT,ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH);\n  }\n  final String patchName=SharePatchFileUtil.getPatchVersionDirectory(patchMd5);\n  final String patchVersionDirectory=patchDirectory + \"/\" + patchName;\n  TinkerLog.i(TAG,\"UpgradePatch tryPatch:patchVersionDirectory:%s\",patchVersionDirectory);\n  File destPatchFile=new File(patchVersionDirectory + \"/\" + SharePatchFileUtil.getPatchVersionFile(patchMd5));\n  try {\n    if (!patchMd5.equals(SharePatchFileUtil.getMD5(destPatchFile))) {\n      SharePatchFileUtil.copyFileUsingStream(patchFile,destPatchFile);\n      TinkerLog.w(TAG,\"UpgradePatch copy patch file, src file: %s size: %d, dest file: %s size:%d\",patchFile.getAbsolutePath(),patchFile.length(),destPatchFile.getAbsolutePath(),destPatchFile.length());\n    }\n  }\n catch (  IOException e) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:copy patch file fail from %s to %s\",patchFile.getPath(),destPatchFile.getPath());\n    manager.getPatchReporter().onPatchTypeExtractFail(patchFile,destPatchFile,patchFile.getName(),ShareConstants.TYPE_PATCH_FILE);\n    return false;\n  }\n  if (!DexDiffPatchInternal.tryRecoverDexFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch dex failed\");\n    return false;\n  }\n  if (!ArkHotDiffPatchInternal.tryRecoverArkHotLibrary(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    return false;\n  }\n  if (!BsDiffPatchInternal.tryRecoverLibraryFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch library failed\");\n    return false;\n  }\n  if (!ResDiffPatchInternal.tryRecoverResourceFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch resource failed\");\n    return false;\n  }\n  if (!DexDiffPatchInternal.waitAndCheckDexOptFile(patchFile,manager)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, check dex opt file failed\");\n    return false;\n  }\n  if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,newInfo,patchInfoLockFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, rewrite patch info failed\");\n    manager.getPatchReporter().onPatchInfoCorrupted(patchFile,newInfo.oldVersion,newInfo.newVersion);\n    return false;\n  }\n  UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n  TinkerLog.w(TAG,\"UpgradePatch tryPatch: done, it is ok\");\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 669,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 88,
        "startColumnNumber" : 12,
        "endLineNumber" : 88,
        "endColumnNumber" : 25
      },
      "nodeContext" : "return false;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "boolean"
  }, {
    "nodeContext" : "false",
    "nodeType" : "BooleanLiteral",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 104,
      "startColumnNumber" : 23,
      "endLineNumber" : 104,
      "endColumnNumber" : 28
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 104,
        "startColumnNumber" : 16,
        "endLineNumber" : 104,
        "endColumnNumber" : 29
      },
      "nodeContext" : "return false;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 241,
        "startLineNumber" : 101,
        "startColumnNumber" : 100,
        "endLineNumber" : 105,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchInfoCorrupted\");\n  manager.getPatchReporter().onPatchInfoCorrupted(patchFile,oldInfo.oldVersion,oldInfo.newVersion);\n  return false;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 22,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 329,
        "startLineNumber" : 101,
        "startColumnNumber" : 12,
        "endLineNumber" : 105,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (oldInfo.oldVersion == null || oldInfo.newVersion == null || oldInfo.oatDir == null) {\n  TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchInfoCorrupted\");\n  manager.getPatchReporter().onPatchInfoCorrupted(patchFile,oldInfo.oldVersion,oldInfo.newVersion);\n  return false;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 40,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1652,
        "startLineNumber" : 100,
        "startColumnNumber" : 29,
        "endLineNumber" : 127,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (oldInfo.oldVersion == null || oldInfo.newVersion == null || oldInfo.oatDir == null) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchInfoCorrupted\");\n    manager.getPatchReporter().onPatchInfoCorrupted(patchFile,oldInfo.oldVersion,oldInfo.newVersion);\n    return false;\n  }\n  if (!SharePatchFileUtil.checkIfMd5Valid(patchMd5)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchVersionCheckFail md5 %s is valid\",patchMd5);\n    manager.getPatchReporter().onPatchVersionCheckFail(patchFile,oldInfo,patchMd5);\n    return false;\n  }\n  final boolean usingInterpret=oldInfo.oatDir.equals(ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n  if (!usingInterpret && !ShareTinkerInternals.isNullOrNil(oldInfo.newVersion) && oldInfo.newVersion.equals(patchMd5)&& !oldInfo.isRemoveNewVersion) {\n    TinkerLog.e(TAG,\"patch already applied, md5: %s\",patchMd5);\n    UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n    return true;\n  }\n  final String finalOatDir=usingInterpret ? ShareConstants.CHANING_DEX_OPTIMIZE_PATH : oldInfo.oatDir;\n  newInfo=new SharePatchInfo(oldInfo.oldVersion,patchMd5,isProtectedApp,false,Build.FINGERPRINT,finalOatDir);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 148,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1830,
        "startLineNumber" : 100,
        "startColumnNumber" : 8,
        "endLineNumber" : 129,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (oldInfo != null) {\n  if (oldInfo.oldVersion == null || oldInfo.newVersion == null || oldInfo.oatDir == null) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchInfoCorrupted\");\n    manager.getPatchReporter().onPatchInfoCorrupted(patchFile,oldInfo.oldVersion,oldInfo.newVersion);\n    return false;\n  }\n  if (!SharePatchFileUtil.checkIfMd5Valid(patchMd5)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchVersionCheckFail md5 %s is valid\",patchMd5);\n    manager.getPatchReporter().onPatchVersionCheckFail(patchFile,oldInfo,patchMd5);\n    return false;\n  }\n  final boolean usingInterpret=oldInfo.oatDir.equals(ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n  if (!usingInterpret && !ShareTinkerInternals.isNullOrNil(oldInfo.newVersion) && oldInfo.newVersion.equals(patchMd5)&& !oldInfo.isRemoveNewVersion) {\n    TinkerLog.e(TAG,\"patch already applied, md5: %s\",patchMd5);\n    UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n    return true;\n  }\n  final String finalOatDir=usingInterpret ? ShareConstants.CHANING_DEX_OPTIMIZE_PATH : oldInfo.oatDir;\n  newInfo=new SharePatchInfo(oldInfo.oldVersion,patchMd5,isProtectedApp,false,Build.FINGERPRINT,finalOatDir);\n}\n else {\n  newInfo=new SharePatchInfo(\"\",patchMd5,isProtectedApp,false,Build.FINGERPRINT,ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 169,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7821,
        "startLineNumber" : 45,
        "startColumnNumber" : 92,
        "endLineNumber" : 195,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Tinker manager=Tinker.with(context);\n  final File patchFile=new File(tempPatchPath);\n  if (!manager.isTinkerEnabled() || !ShareTinkerInternals.isTinkerEnableWithSharedPreferences(context)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch is disabled, just return\");\n    return false;\n  }\n  if (!SharePatchFileUtil.isLegalFile(patchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch file is not found, just return\");\n    return false;\n  }\n  ShareSecurityCheck signatureCheck=new ShareSecurityCheck(context);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(context,manager.getTinkerFlags(),patchFile,signatureCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchPackageCheckFail\");\n    manager.getPatchReporter().onPatchPackageCheckFail(patchFile,returnCode);\n    return false;\n  }\n  String patchMd5=SharePatchFileUtil.getMD5(patchFile);\n  if (patchMd5 == null) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch md5 is null, just return\");\n    return false;\n  }\n  patchResult.patchVersion=patchMd5;\n  TinkerLog.i(TAG,\"UpgradePatch tryPatch:patchMd5:%s\",patchMd5);\n  final String patchDirectory=manager.getPatchDirectory().getAbsolutePath();\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectory);\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectory);\n  final Map<String,String> pkgProps=signatureCheck.getPackagePropertiesIfPresent();\n  if (pkgProps == null) {\n    TinkerLog.e(TAG,\"UpgradePatch packageProperties is null, do we process a valid patch apk ?\");\n    return false;\n  }\n  final String isProtectedAppStr=pkgProps.get(ShareConstants.PKGMETA_KEY_IS_PROTECTED_APP);\n  final boolean isProtectedApp=(isProtectedAppStr != null && !isProtectedAppStr.isEmpty() && !\"0\".equals(isProtectedAppStr));\n  SharePatchInfo oldInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  SharePatchInfo newInfo;\n  if (oldInfo != null) {\n    if (oldInfo.oldVersion == null || oldInfo.newVersion == null || oldInfo.oatDir == null) {\n      TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchInfoCorrupted\");\n      manager.getPatchReporter().onPatchInfoCorrupted(patchFile,oldInfo.oldVersion,oldInfo.newVersion);\n      return false;\n    }\n    if (!SharePatchFileUtil.checkIfMd5Valid(patchMd5)) {\n      TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchVersionCheckFail md5 %s is valid\",patchMd5);\n      manager.getPatchReporter().onPatchVersionCheckFail(patchFile,oldInfo,patchMd5);\n      return false;\n    }\n    final boolean usingInterpret=oldInfo.oatDir.equals(ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    if (!usingInterpret && !ShareTinkerInternals.isNullOrNil(oldInfo.newVersion) && oldInfo.newVersion.equals(patchMd5)&& !oldInfo.isRemoveNewVersion) {\n      TinkerLog.e(TAG,\"patch already applied, md5: %s\",patchMd5);\n      UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n      return true;\n    }\n    final String finalOatDir=usingInterpret ? ShareConstants.CHANING_DEX_OPTIMIZE_PATH : oldInfo.oatDir;\n    newInfo=new SharePatchInfo(oldInfo.oldVersion,patchMd5,isProtectedApp,false,Build.FINGERPRINT,finalOatDir);\n  }\n else {\n    newInfo=new SharePatchInfo(\"\",patchMd5,isProtectedApp,false,Build.FINGERPRINT,ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH);\n  }\n  final String patchName=SharePatchFileUtil.getPatchVersionDirectory(patchMd5);\n  final String patchVersionDirectory=patchDirectory + \"/\" + patchName;\n  TinkerLog.i(TAG,\"UpgradePatch tryPatch:patchVersionDirectory:%s\",patchVersionDirectory);\n  File destPatchFile=new File(patchVersionDirectory + \"/\" + SharePatchFileUtil.getPatchVersionFile(patchMd5));\n  try {\n    if (!patchMd5.equals(SharePatchFileUtil.getMD5(destPatchFile))) {\n      SharePatchFileUtil.copyFileUsingStream(patchFile,destPatchFile);\n      TinkerLog.w(TAG,\"UpgradePatch copy patch file, src file: %s size: %d, dest file: %s size:%d\",patchFile.getAbsolutePath(),patchFile.length(),destPatchFile.getAbsolutePath(),destPatchFile.length());\n    }\n  }\n catch (  IOException e) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:copy patch file fail from %s to %s\",patchFile.getPath(),destPatchFile.getPath());\n    manager.getPatchReporter().onPatchTypeExtractFail(patchFile,destPatchFile,patchFile.getName(),ShareConstants.TYPE_PATCH_FILE);\n    return false;\n  }\n  if (!DexDiffPatchInternal.tryRecoverDexFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch dex failed\");\n    return false;\n  }\n  if (!ArkHotDiffPatchInternal.tryRecoverArkHotLibrary(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    return false;\n  }\n  if (!BsDiffPatchInternal.tryRecoverLibraryFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch library failed\");\n    return false;\n  }\n  if (!ResDiffPatchInternal.tryRecoverResourceFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch resource failed\");\n    return false;\n  }\n  if (!DexDiffPatchInternal.waitAndCheckDexOptFile(patchFile,manager)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, check dex opt file failed\");\n    return false;\n  }\n  if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,newInfo,patchInfoLockFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, rewrite patch info failed\");\n    manager.getPatchReporter().onPatchInfoCorrupted(patchFile,newInfo.oldVersion,newInfo.newVersion);\n    return false;\n  }\n  UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n  TinkerLog.w(TAG,\"UpgradePatch tryPatch: done, it is ok\");\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 651,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7923,
        "startLineNumber" : 44,
        "startColumnNumber" : 4,
        "endLineNumber" : 195,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public boolean tryPatch(Context context,String tempPatchPath,PatchResult patchResult){\n  Tinker manager=Tinker.with(context);\n  final File patchFile=new File(tempPatchPath);\n  if (!manager.isTinkerEnabled() || !ShareTinkerInternals.isTinkerEnableWithSharedPreferences(context)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch is disabled, just return\");\n    return false;\n  }\n  if (!SharePatchFileUtil.isLegalFile(patchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch file is not found, just return\");\n    return false;\n  }\n  ShareSecurityCheck signatureCheck=new ShareSecurityCheck(context);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(context,manager.getTinkerFlags(),patchFile,signatureCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchPackageCheckFail\");\n    manager.getPatchReporter().onPatchPackageCheckFail(patchFile,returnCode);\n    return false;\n  }\n  String patchMd5=SharePatchFileUtil.getMD5(patchFile);\n  if (patchMd5 == null) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch md5 is null, just return\");\n    return false;\n  }\n  patchResult.patchVersion=patchMd5;\n  TinkerLog.i(TAG,\"UpgradePatch tryPatch:patchMd5:%s\",patchMd5);\n  final String patchDirectory=manager.getPatchDirectory().getAbsolutePath();\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectory);\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectory);\n  final Map<String,String> pkgProps=signatureCheck.getPackagePropertiesIfPresent();\n  if (pkgProps == null) {\n    TinkerLog.e(TAG,\"UpgradePatch packageProperties is null, do we process a valid patch apk ?\");\n    return false;\n  }\n  final String isProtectedAppStr=pkgProps.get(ShareConstants.PKGMETA_KEY_IS_PROTECTED_APP);\n  final boolean isProtectedApp=(isProtectedAppStr != null && !isProtectedAppStr.isEmpty() && !\"0\".equals(isProtectedAppStr));\n  SharePatchInfo oldInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  SharePatchInfo newInfo;\n  if (oldInfo != null) {\n    if (oldInfo.oldVersion == null || oldInfo.newVersion == null || oldInfo.oatDir == null) {\n      TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchInfoCorrupted\");\n      manager.getPatchReporter().onPatchInfoCorrupted(patchFile,oldInfo.oldVersion,oldInfo.newVersion);\n      return false;\n    }\n    if (!SharePatchFileUtil.checkIfMd5Valid(patchMd5)) {\n      TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchVersionCheckFail md5 %s is valid\",patchMd5);\n      manager.getPatchReporter().onPatchVersionCheckFail(patchFile,oldInfo,patchMd5);\n      return false;\n    }\n    final boolean usingInterpret=oldInfo.oatDir.equals(ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    if (!usingInterpret && !ShareTinkerInternals.isNullOrNil(oldInfo.newVersion) && oldInfo.newVersion.equals(patchMd5)&& !oldInfo.isRemoveNewVersion) {\n      TinkerLog.e(TAG,\"patch already applied, md5: %s\",patchMd5);\n      UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n      return true;\n    }\n    final String finalOatDir=usingInterpret ? ShareConstants.CHANING_DEX_OPTIMIZE_PATH : oldInfo.oatDir;\n    newInfo=new SharePatchInfo(oldInfo.oldVersion,patchMd5,isProtectedApp,false,Build.FINGERPRINT,finalOatDir);\n  }\n else {\n    newInfo=new SharePatchInfo(\"\",patchMd5,isProtectedApp,false,Build.FINGERPRINT,ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH);\n  }\n  final String patchName=SharePatchFileUtil.getPatchVersionDirectory(patchMd5);\n  final String patchVersionDirectory=patchDirectory + \"/\" + patchName;\n  TinkerLog.i(TAG,\"UpgradePatch tryPatch:patchVersionDirectory:%s\",patchVersionDirectory);\n  File destPatchFile=new File(patchVersionDirectory + \"/\" + SharePatchFileUtil.getPatchVersionFile(patchMd5));\n  try {\n    if (!patchMd5.equals(SharePatchFileUtil.getMD5(destPatchFile))) {\n      SharePatchFileUtil.copyFileUsingStream(patchFile,destPatchFile);\n      TinkerLog.w(TAG,\"UpgradePatch copy patch file, src file: %s size: %d, dest file: %s size:%d\",patchFile.getAbsolutePath(),patchFile.length(),destPatchFile.getAbsolutePath(),destPatchFile.length());\n    }\n  }\n catch (  IOException e) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:copy patch file fail from %s to %s\",patchFile.getPath(),destPatchFile.getPath());\n    manager.getPatchReporter().onPatchTypeExtractFail(patchFile,destPatchFile,patchFile.getName(),ShareConstants.TYPE_PATCH_FILE);\n    return false;\n  }\n  if (!DexDiffPatchInternal.tryRecoverDexFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch dex failed\");\n    return false;\n  }\n  if (!ArkHotDiffPatchInternal.tryRecoverArkHotLibrary(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    return false;\n  }\n  if (!BsDiffPatchInternal.tryRecoverLibraryFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch library failed\");\n    return false;\n  }\n  if (!ResDiffPatchInternal.tryRecoverResourceFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch resource failed\");\n    return false;\n  }\n  if (!DexDiffPatchInternal.waitAndCheckDexOptFile(patchFile,manager)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, check dex opt file failed\");\n    return false;\n  }\n  if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,newInfo,patchInfoLockFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, rewrite patch info failed\");\n    manager.getPatchReporter().onPatchInfoCorrupted(patchFile,newInfo.oldVersion,newInfo.newVersion);\n    return false;\n  }\n  UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n  TinkerLog.w(TAG,\"UpgradePatch tryPatch: done, it is ok\");\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 669,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 104,
        "startColumnNumber" : 16,
        "endLineNumber" : 104,
        "endColumnNumber" : 29
      },
      "nodeContext" : "return false;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "boolean"
  }, {
    "nodeContext" : "false",
    "nodeType" : "BooleanLiteral",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 110,
      "startColumnNumber" : 23,
      "endLineNumber" : 110,
      "endColumnNumber" : 28
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 110,
        "startColumnNumber" : 16,
        "endLineNumber" : 110,
        "endColumnNumber" : 29
      },
      "nodeContext" : "return false;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 252,
        "startLineNumber" : 107,
        "startColumnNumber" : 63,
        "endLineNumber" : 111,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchVersionCheckFail md5 %s is valid\",patchMd5);\n  manager.getPatchReporter().onPatchVersionCheckFail(patchFile,oldInfo,patchMd5);\n  return false;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 19,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 303,
        "startLineNumber" : 107,
        "startColumnNumber" : 12,
        "endLineNumber" : 111,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (!SharePatchFileUtil.checkIfMd5Valid(patchMd5)) {\n  TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchVersionCheckFail md5 %s is valid\",patchMd5);\n  manager.getPatchReporter().onPatchVersionCheckFail(patchFile,oldInfo,patchMd5);\n  return false;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 25,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1652,
        "startLineNumber" : 100,
        "startColumnNumber" : 29,
        "endLineNumber" : 127,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (oldInfo.oldVersion == null || oldInfo.newVersion == null || oldInfo.oatDir == null) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchInfoCorrupted\");\n    manager.getPatchReporter().onPatchInfoCorrupted(patchFile,oldInfo.oldVersion,oldInfo.newVersion);\n    return false;\n  }\n  if (!SharePatchFileUtil.checkIfMd5Valid(patchMd5)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchVersionCheckFail md5 %s is valid\",patchMd5);\n    manager.getPatchReporter().onPatchVersionCheckFail(patchFile,oldInfo,patchMd5);\n    return false;\n  }\n  final boolean usingInterpret=oldInfo.oatDir.equals(ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n  if (!usingInterpret && !ShareTinkerInternals.isNullOrNil(oldInfo.newVersion) && oldInfo.newVersion.equals(patchMd5)&& !oldInfo.isRemoveNewVersion) {\n    TinkerLog.e(TAG,\"patch already applied, md5: %s\",patchMd5);\n    UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n    return true;\n  }\n  final String finalOatDir=usingInterpret ? ShareConstants.CHANING_DEX_OPTIMIZE_PATH : oldInfo.oatDir;\n  newInfo=new SharePatchInfo(oldInfo.oldVersion,patchMd5,isProtectedApp,false,Build.FINGERPRINT,finalOatDir);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 148,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1830,
        "startLineNumber" : 100,
        "startColumnNumber" : 8,
        "endLineNumber" : 129,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (oldInfo != null) {\n  if (oldInfo.oldVersion == null || oldInfo.newVersion == null || oldInfo.oatDir == null) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchInfoCorrupted\");\n    manager.getPatchReporter().onPatchInfoCorrupted(patchFile,oldInfo.oldVersion,oldInfo.newVersion);\n    return false;\n  }\n  if (!SharePatchFileUtil.checkIfMd5Valid(patchMd5)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchVersionCheckFail md5 %s is valid\",patchMd5);\n    manager.getPatchReporter().onPatchVersionCheckFail(patchFile,oldInfo,patchMd5);\n    return false;\n  }\n  final boolean usingInterpret=oldInfo.oatDir.equals(ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n  if (!usingInterpret && !ShareTinkerInternals.isNullOrNil(oldInfo.newVersion) && oldInfo.newVersion.equals(patchMd5)&& !oldInfo.isRemoveNewVersion) {\n    TinkerLog.e(TAG,\"patch already applied, md5: %s\",patchMd5);\n    UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n    return true;\n  }\n  final String finalOatDir=usingInterpret ? ShareConstants.CHANING_DEX_OPTIMIZE_PATH : oldInfo.oatDir;\n  newInfo=new SharePatchInfo(oldInfo.oldVersion,patchMd5,isProtectedApp,false,Build.FINGERPRINT,finalOatDir);\n}\n else {\n  newInfo=new SharePatchInfo(\"\",patchMd5,isProtectedApp,false,Build.FINGERPRINT,ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 169,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7821,
        "startLineNumber" : 45,
        "startColumnNumber" : 92,
        "endLineNumber" : 195,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Tinker manager=Tinker.with(context);\n  final File patchFile=new File(tempPatchPath);\n  if (!manager.isTinkerEnabled() || !ShareTinkerInternals.isTinkerEnableWithSharedPreferences(context)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch is disabled, just return\");\n    return false;\n  }\n  if (!SharePatchFileUtil.isLegalFile(patchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch file is not found, just return\");\n    return false;\n  }\n  ShareSecurityCheck signatureCheck=new ShareSecurityCheck(context);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(context,manager.getTinkerFlags(),patchFile,signatureCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchPackageCheckFail\");\n    manager.getPatchReporter().onPatchPackageCheckFail(patchFile,returnCode);\n    return false;\n  }\n  String patchMd5=SharePatchFileUtil.getMD5(patchFile);\n  if (patchMd5 == null) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch md5 is null, just return\");\n    return false;\n  }\n  patchResult.patchVersion=patchMd5;\n  TinkerLog.i(TAG,\"UpgradePatch tryPatch:patchMd5:%s\",patchMd5);\n  final String patchDirectory=manager.getPatchDirectory().getAbsolutePath();\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectory);\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectory);\n  final Map<String,String> pkgProps=signatureCheck.getPackagePropertiesIfPresent();\n  if (pkgProps == null) {\n    TinkerLog.e(TAG,\"UpgradePatch packageProperties is null, do we process a valid patch apk ?\");\n    return false;\n  }\n  final String isProtectedAppStr=pkgProps.get(ShareConstants.PKGMETA_KEY_IS_PROTECTED_APP);\n  final boolean isProtectedApp=(isProtectedAppStr != null && !isProtectedAppStr.isEmpty() && !\"0\".equals(isProtectedAppStr));\n  SharePatchInfo oldInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  SharePatchInfo newInfo;\n  if (oldInfo != null) {\n    if (oldInfo.oldVersion == null || oldInfo.newVersion == null || oldInfo.oatDir == null) {\n      TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchInfoCorrupted\");\n      manager.getPatchReporter().onPatchInfoCorrupted(patchFile,oldInfo.oldVersion,oldInfo.newVersion);\n      return false;\n    }\n    if (!SharePatchFileUtil.checkIfMd5Valid(patchMd5)) {\n      TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchVersionCheckFail md5 %s is valid\",patchMd5);\n      manager.getPatchReporter().onPatchVersionCheckFail(patchFile,oldInfo,patchMd5);\n      return false;\n    }\n    final boolean usingInterpret=oldInfo.oatDir.equals(ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    if (!usingInterpret && !ShareTinkerInternals.isNullOrNil(oldInfo.newVersion) && oldInfo.newVersion.equals(patchMd5)&& !oldInfo.isRemoveNewVersion) {\n      TinkerLog.e(TAG,\"patch already applied, md5: %s\",patchMd5);\n      UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n      return true;\n    }\n    final String finalOatDir=usingInterpret ? ShareConstants.CHANING_DEX_OPTIMIZE_PATH : oldInfo.oatDir;\n    newInfo=new SharePatchInfo(oldInfo.oldVersion,patchMd5,isProtectedApp,false,Build.FINGERPRINT,finalOatDir);\n  }\n else {\n    newInfo=new SharePatchInfo(\"\",patchMd5,isProtectedApp,false,Build.FINGERPRINT,ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH);\n  }\n  final String patchName=SharePatchFileUtil.getPatchVersionDirectory(patchMd5);\n  final String patchVersionDirectory=patchDirectory + \"/\" + patchName;\n  TinkerLog.i(TAG,\"UpgradePatch tryPatch:patchVersionDirectory:%s\",patchVersionDirectory);\n  File destPatchFile=new File(patchVersionDirectory + \"/\" + SharePatchFileUtil.getPatchVersionFile(patchMd5));\n  try {\n    if (!patchMd5.equals(SharePatchFileUtil.getMD5(destPatchFile))) {\n      SharePatchFileUtil.copyFileUsingStream(patchFile,destPatchFile);\n      TinkerLog.w(TAG,\"UpgradePatch copy patch file, src file: %s size: %d, dest file: %s size:%d\",patchFile.getAbsolutePath(),patchFile.length(),destPatchFile.getAbsolutePath(),destPatchFile.length());\n    }\n  }\n catch (  IOException e) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:copy patch file fail from %s to %s\",patchFile.getPath(),destPatchFile.getPath());\n    manager.getPatchReporter().onPatchTypeExtractFail(patchFile,destPatchFile,patchFile.getName(),ShareConstants.TYPE_PATCH_FILE);\n    return false;\n  }\n  if (!DexDiffPatchInternal.tryRecoverDexFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch dex failed\");\n    return false;\n  }\n  if (!ArkHotDiffPatchInternal.tryRecoverArkHotLibrary(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    return false;\n  }\n  if (!BsDiffPatchInternal.tryRecoverLibraryFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch library failed\");\n    return false;\n  }\n  if (!ResDiffPatchInternal.tryRecoverResourceFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch resource failed\");\n    return false;\n  }\n  if (!DexDiffPatchInternal.waitAndCheckDexOptFile(patchFile,manager)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, check dex opt file failed\");\n    return false;\n  }\n  if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,newInfo,patchInfoLockFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, rewrite patch info failed\");\n    manager.getPatchReporter().onPatchInfoCorrupted(patchFile,newInfo.oldVersion,newInfo.newVersion);\n    return false;\n  }\n  UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n  TinkerLog.w(TAG,\"UpgradePatch tryPatch: done, it is ok\");\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 651,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7923,
        "startLineNumber" : 44,
        "startColumnNumber" : 4,
        "endLineNumber" : 195,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public boolean tryPatch(Context context,String tempPatchPath,PatchResult patchResult){\n  Tinker manager=Tinker.with(context);\n  final File patchFile=new File(tempPatchPath);\n  if (!manager.isTinkerEnabled() || !ShareTinkerInternals.isTinkerEnableWithSharedPreferences(context)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch is disabled, just return\");\n    return false;\n  }\n  if (!SharePatchFileUtil.isLegalFile(patchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch file is not found, just return\");\n    return false;\n  }\n  ShareSecurityCheck signatureCheck=new ShareSecurityCheck(context);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(context,manager.getTinkerFlags(),patchFile,signatureCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchPackageCheckFail\");\n    manager.getPatchReporter().onPatchPackageCheckFail(patchFile,returnCode);\n    return false;\n  }\n  String patchMd5=SharePatchFileUtil.getMD5(patchFile);\n  if (patchMd5 == null) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch md5 is null, just return\");\n    return false;\n  }\n  patchResult.patchVersion=patchMd5;\n  TinkerLog.i(TAG,\"UpgradePatch tryPatch:patchMd5:%s\",patchMd5);\n  final String patchDirectory=manager.getPatchDirectory().getAbsolutePath();\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectory);\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectory);\n  final Map<String,String> pkgProps=signatureCheck.getPackagePropertiesIfPresent();\n  if (pkgProps == null) {\n    TinkerLog.e(TAG,\"UpgradePatch packageProperties is null, do we process a valid patch apk ?\");\n    return false;\n  }\n  final String isProtectedAppStr=pkgProps.get(ShareConstants.PKGMETA_KEY_IS_PROTECTED_APP);\n  final boolean isProtectedApp=(isProtectedAppStr != null && !isProtectedAppStr.isEmpty() && !\"0\".equals(isProtectedAppStr));\n  SharePatchInfo oldInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  SharePatchInfo newInfo;\n  if (oldInfo != null) {\n    if (oldInfo.oldVersion == null || oldInfo.newVersion == null || oldInfo.oatDir == null) {\n      TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchInfoCorrupted\");\n      manager.getPatchReporter().onPatchInfoCorrupted(patchFile,oldInfo.oldVersion,oldInfo.newVersion);\n      return false;\n    }\n    if (!SharePatchFileUtil.checkIfMd5Valid(patchMd5)) {\n      TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchVersionCheckFail md5 %s is valid\",patchMd5);\n      manager.getPatchReporter().onPatchVersionCheckFail(patchFile,oldInfo,patchMd5);\n      return false;\n    }\n    final boolean usingInterpret=oldInfo.oatDir.equals(ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    if (!usingInterpret && !ShareTinkerInternals.isNullOrNil(oldInfo.newVersion) && oldInfo.newVersion.equals(patchMd5)&& !oldInfo.isRemoveNewVersion) {\n      TinkerLog.e(TAG,\"patch already applied, md5: %s\",patchMd5);\n      UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n      return true;\n    }\n    final String finalOatDir=usingInterpret ? ShareConstants.CHANING_DEX_OPTIMIZE_PATH : oldInfo.oatDir;\n    newInfo=new SharePatchInfo(oldInfo.oldVersion,patchMd5,isProtectedApp,false,Build.FINGERPRINT,finalOatDir);\n  }\n else {\n    newInfo=new SharePatchInfo(\"\",patchMd5,isProtectedApp,false,Build.FINGERPRINT,ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH);\n  }\n  final String patchName=SharePatchFileUtil.getPatchVersionDirectory(patchMd5);\n  final String patchVersionDirectory=patchDirectory + \"/\" + patchName;\n  TinkerLog.i(TAG,\"UpgradePatch tryPatch:patchVersionDirectory:%s\",patchVersionDirectory);\n  File destPatchFile=new File(patchVersionDirectory + \"/\" + SharePatchFileUtil.getPatchVersionFile(patchMd5));\n  try {\n    if (!patchMd5.equals(SharePatchFileUtil.getMD5(destPatchFile))) {\n      SharePatchFileUtil.copyFileUsingStream(patchFile,destPatchFile);\n      TinkerLog.w(TAG,\"UpgradePatch copy patch file, src file: %s size: %d, dest file: %s size:%d\",patchFile.getAbsolutePath(),patchFile.length(),destPatchFile.getAbsolutePath(),destPatchFile.length());\n    }\n  }\n catch (  IOException e) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:copy patch file fail from %s to %s\",patchFile.getPath(),destPatchFile.getPath());\n    manager.getPatchReporter().onPatchTypeExtractFail(patchFile,destPatchFile,patchFile.getName(),ShareConstants.TYPE_PATCH_FILE);\n    return false;\n  }\n  if (!DexDiffPatchInternal.tryRecoverDexFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch dex failed\");\n    return false;\n  }\n  if (!ArkHotDiffPatchInternal.tryRecoverArkHotLibrary(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    return false;\n  }\n  if (!BsDiffPatchInternal.tryRecoverLibraryFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch library failed\");\n    return false;\n  }\n  if (!ResDiffPatchInternal.tryRecoverResourceFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch resource failed\");\n    return false;\n  }\n  if (!DexDiffPatchInternal.waitAndCheckDexOptFile(patchFile,manager)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, check dex opt file failed\");\n    return false;\n  }\n  if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,newInfo,patchInfoLockFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, rewrite patch info failed\");\n    manager.getPatchReporter().onPatchInfoCorrupted(patchFile,newInfo.oldVersion,newInfo.newVersion);\n    return false;\n  }\n  UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n  TinkerLog.w(TAG,\"UpgradePatch tryPatch: done, it is ok\");\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 669,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 110,
        "startColumnNumber" : 16,
        "endLineNumber" : 110,
        "endColumnNumber" : 29
      },
      "nodeContext" : "return false;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "boolean"
  }, {
    "nodeContext" : "false",
    "nodeType" : "BooleanLiteral",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 126,
      "startColumnNumber" : 87,
      "endLineNumber" : 126,
      "endColumnNumber" : 92
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 103,
        "startLineNumber" : 126,
        "startColumnNumber" : 22,
        "endLineNumber" : 126,
        "endColumnNumber" : 125
      },
      "nodeContext" : "new SharePatchInfo(oldInfo.oldVersion,patchMd5,isProtectedApp,false,Build.FINGERPRINT,finalOatDir)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 13,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 113,
        "startLineNumber" : 126,
        "startColumnNumber" : 12,
        "endLineNumber" : 126,
        "endColumnNumber" : 125
      },
      "nodeContext" : "newInfo=new SharePatchInfo(oldInfo.oldVersion,patchMd5,isProtectedApp,false,Build.FINGERPRINT,finalOatDir)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 15,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 114,
        "startLineNumber" : 126,
        "startColumnNumber" : 12,
        "endLineNumber" : 126,
        "endColumnNumber" : 126
      },
      "nodeContext" : "newInfo=new SharePatchInfo(oldInfo.oldVersion,patchMd5,isProtectedApp,false,Build.FINGERPRINT,finalOatDir);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1652,
        "startLineNumber" : 100,
        "startColumnNumber" : 29,
        "endLineNumber" : 127,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (oldInfo.oldVersion == null || oldInfo.newVersion == null || oldInfo.oatDir == null) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchInfoCorrupted\");\n    manager.getPatchReporter().onPatchInfoCorrupted(patchFile,oldInfo.oldVersion,oldInfo.newVersion);\n    return false;\n  }\n  if (!SharePatchFileUtil.checkIfMd5Valid(patchMd5)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchVersionCheckFail md5 %s is valid\",patchMd5);\n    manager.getPatchReporter().onPatchVersionCheckFail(patchFile,oldInfo,patchMd5);\n    return false;\n  }\n  final boolean usingInterpret=oldInfo.oatDir.equals(ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n  if (!usingInterpret && !ShareTinkerInternals.isNullOrNil(oldInfo.newVersion) && oldInfo.newVersion.equals(patchMd5)&& !oldInfo.isRemoveNewVersion) {\n    TinkerLog.e(TAG,\"patch already applied, md5: %s\",patchMd5);\n    UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n    return true;\n  }\n  final String finalOatDir=usingInterpret ? ShareConstants.CHANING_DEX_OPTIMIZE_PATH : oldInfo.oatDir;\n  newInfo=new SharePatchInfo(oldInfo.oldVersion,patchMd5,isProtectedApp,false,Build.FINGERPRINT,finalOatDir);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 148,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1830,
        "startLineNumber" : 100,
        "startColumnNumber" : 8,
        "endLineNumber" : 129,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (oldInfo != null) {\n  if (oldInfo.oldVersion == null || oldInfo.newVersion == null || oldInfo.oatDir == null) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchInfoCorrupted\");\n    manager.getPatchReporter().onPatchInfoCorrupted(patchFile,oldInfo.oldVersion,oldInfo.newVersion);\n    return false;\n  }\n  if (!SharePatchFileUtil.checkIfMd5Valid(patchMd5)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchVersionCheckFail md5 %s is valid\",patchMd5);\n    manager.getPatchReporter().onPatchVersionCheckFail(patchFile,oldInfo,patchMd5);\n    return false;\n  }\n  final boolean usingInterpret=oldInfo.oatDir.equals(ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n  if (!usingInterpret && !ShareTinkerInternals.isNullOrNil(oldInfo.newVersion) && oldInfo.newVersion.equals(patchMd5)&& !oldInfo.isRemoveNewVersion) {\n    TinkerLog.e(TAG,\"patch already applied, md5: %s\",patchMd5);\n    UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n    return true;\n  }\n  final String finalOatDir=usingInterpret ? ShareConstants.CHANING_DEX_OPTIMIZE_PATH : oldInfo.oatDir;\n  newInfo=new SharePatchInfo(oldInfo.oldVersion,patchMd5,isProtectedApp,false,Build.FINGERPRINT,finalOatDir);\n}\n else {\n  newInfo=new SharePatchInfo(\"\",patchMd5,isProtectedApp,false,Build.FINGERPRINT,ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 169,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7821,
        "startLineNumber" : 45,
        "startColumnNumber" : 92,
        "endLineNumber" : 195,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Tinker manager=Tinker.with(context);\n  final File patchFile=new File(tempPatchPath);\n  if (!manager.isTinkerEnabled() || !ShareTinkerInternals.isTinkerEnableWithSharedPreferences(context)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch is disabled, just return\");\n    return false;\n  }\n  if (!SharePatchFileUtil.isLegalFile(patchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch file is not found, just return\");\n    return false;\n  }\n  ShareSecurityCheck signatureCheck=new ShareSecurityCheck(context);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(context,manager.getTinkerFlags(),patchFile,signatureCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchPackageCheckFail\");\n    manager.getPatchReporter().onPatchPackageCheckFail(patchFile,returnCode);\n    return false;\n  }\n  String patchMd5=SharePatchFileUtil.getMD5(patchFile);\n  if (patchMd5 == null) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch md5 is null, just return\");\n    return false;\n  }\n  patchResult.patchVersion=patchMd5;\n  TinkerLog.i(TAG,\"UpgradePatch tryPatch:patchMd5:%s\",patchMd5);\n  final String patchDirectory=manager.getPatchDirectory().getAbsolutePath();\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectory);\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectory);\n  final Map<String,String> pkgProps=signatureCheck.getPackagePropertiesIfPresent();\n  if (pkgProps == null) {\n    TinkerLog.e(TAG,\"UpgradePatch packageProperties is null, do we process a valid patch apk ?\");\n    return false;\n  }\n  final String isProtectedAppStr=pkgProps.get(ShareConstants.PKGMETA_KEY_IS_PROTECTED_APP);\n  final boolean isProtectedApp=(isProtectedAppStr != null && !isProtectedAppStr.isEmpty() && !\"0\".equals(isProtectedAppStr));\n  SharePatchInfo oldInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  SharePatchInfo newInfo;\n  if (oldInfo != null) {\n    if (oldInfo.oldVersion == null || oldInfo.newVersion == null || oldInfo.oatDir == null) {\n      TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchInfoCorrupted\");\n      manager.getPatchReporter().onPatchInfoCorrupted(patchFile,oldInfo.oldVersion,oldInfo.newVersion);\n      return false;\n    }\n    if (!SharePatchFileUtil.checkIfMd5Valid(patchMd5)) {\n      TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchVersionCheckFail md5 %s is valid\",patchMd5);\n      manager.getPatchReporter().onPatchVersionCheckFail(patchFile,oldInfo,patchMd5);\n      return false;\n    }\n    final boolean usingInterpret=oldInfo.oatDir.equals(ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    if (!usingInterpret && !ShareTinkerInternals.isNullOrNil(oldInfo.newVersion) && oldInfo.newVersion.equals(patchMd5)&& !oldInfo.isRemoveNewVersion) {\n      TinkerLog.e(TAG,\"patch already applied, md5: %s\",patchMd5);\n      UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n      return true;\n    }\n    final String finalOatDir=usingInterpret ? ShareConstants.CHANING_DEX_OPTIMIZE_PATH : oldInfo.oatDir;\n    newInfo=new SharePatchInfo(oldInfo.oldVersion,patchMd5,isProtectedApp,false,Build.FINGERPRINT,finalOatDir);\n  }\n else {\n    newInfo=new SharePatchInfo(\"\",patchMd5,isProtectedApp,false,Build.FINGERPRINT,ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH);\n  }\n  final String patchName=SharePatchFileUtil.getPatchVersionDirectory(patchMd5);\n  final String patchVersionDirectory=patchDirectory + \"/\" + patchName;\n  TinkerLog.i(TAG,\"UpgradePatch tryPatch:patchVersionDirectory:%s\",patchVersionDirectory);\n  File destPatchFile=new File(patchVersionDirectory + \"/\" + SharePatchFileUtil.getPatchVersionFile(patchMd5));\n  try {\n    if (!patchMd5.equals(SharePatchFileUtil.getMD5(destPatchFile))) {\n      SharePatchFileUtil.copyFileUsingStream(patchFile,destPatchFile);\n      TinkerLog.w(TAG,\"UpgradePatch copy patch file, src file: %s size: %d, dest file: %s size:%d\",patchFile.getAbsolutePath(),patchFile.length(),destPatchFile.getAbsolutePath(),destPatchFile.length());\n    }\n  }\n catch (  IOException e) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:copy patch file fail from %s to %s\",patchFile.getPath(),destPatchFile.getPath());\n    manager.getPatchReporter().onPatchTypeExtractFail(patchFile,destPatchFile,patchFile.getName(),ShareConstants.TYPE_PATCH_FILE);\n    return false;\n  }\n  if (!DexDiffPatchInternal.tryRecoverDexFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch dex failed\");\n    return false;\n  }\n  if (!ArkHotDiffPatchInternal.tryRecoverArkHotLibrary(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    return false;\n  }\n  if (!BsDiffPatchInternal.tryRecoverLibraryFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch library failed\");\n    return false;\n  }\n  if (!ResDiffPatchInternal.tryRecoverResourceFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch resource failed\");\n    return false;\n  }\n  if (!DexDiffPatchInternal.waitAndCheckDexOptFile(patchFile,manager)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, check dex opt file failed\");\n    return false;\n  }\n  if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,newInfo,patchInfoLockFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, rewrite patch info failed\");\n    manager.getPatchReporter().onPatchInfoCorrupted(patchFile,newInfo.oldVersion,newInfo.newVersion);\n    return false;\n  }\n  UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n  TinkerLog.w(TAG,\"UpgradePatch tryPatch: done, it is ok\");\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 651,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7923,
        "startLineNumber" : 44,
        "startColumnNumber" : 4,
        "endLineNumber" : 195,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public boolean tryPatch(Context context,String tempPatchPath,PatchResult patchResult){\n  Tinker manager=Tinker.with(context);\n  final File patchFile=new File(tempPatchPath);\n  if (!manager.isTinkerEnabled() || !ShareTinkerInternals.isTinkerEnableWithSharedPreferences(context)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch is disabled, just return\");\n    return false;\n  }\n  if (!SharePatchFileUtil.isLegalFile(patchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch file is not found, just return\");\n    return false;\n  }\n  ShareSecurityCheck signatureCheck=new ShareSecurityCheck(context);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(context,manager.getTinkerFlags(),patchFile,signatureCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchPackageCheckFail\");\n    manager.getPatchReporter().onPatchPackageCheckFail(patchFile,returnCode);\n    return false;\n  }\n  String patchMd5=SharePatchFileUtil.getMD5(patchFile);\n  if (patchMd5 == null) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch md5 is null, just return\");\n    return false;\n  }\n  patchResult.patchVersion=patchMd5;\n  TinkerLog.i(TAG,\"UpgradePatch tryPatch:patchMd5:%s\",patchMd5);\n  final String patchDirectory=manager.getPatchDirectory().getAbsolutePath();\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectory);\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectory);\n  final Map<String,String> pkgProps=signatureCheck.getPackagePropertiesIfPresent();\n  if (pkgProps == null) {\n    TinkerLog.e(TAG,\"UpgradePatch packageProperties is null, do we process a valid patch apk ?\");\n    return false;\n  }\n  final String isProtectedAppStr=pkgProps.get(ShareConstants.PKGMETA_KEY_IS_PROTECTED_APP);\n  final boolean isProtectedApp=(isProtectedAppStr != null && !isProtectedAppStr.isEmpty() && !\"0\".equals(isProtectedAppStr));\n  SharePatchInfo oldInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  SharePatchInfo newInfo;\n  if (oldInfo != null) {\n    if (oldInfo.oldVersion == null || oldInfo.newVersion == null || oldInfo.oatDir == null) {\n      TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchInfoCorrupted\");\n      manager.getPatchReporter().onPatchInfoCorrupted(patchFile,oldInfo.oldVersion,oldInfo.newVersion);\n      return false;\n    }\n    if (!SharePatchFileUtil.checkIfMd5Valid(patchMd5)) {\n      TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchVersionCheckFail md5 %s is valid\",patchMd5);\n      manager.getPatchReporter().onPatchVersionCheckFail(patchFile,oldInfo,patchMd5);\n      return false;\n    }\n    final boolean usingInterpret=oldInfo.oatDir.equals(ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    if (!usingInterpret && !ShareTinkerInternals.isNullOrNil(oldInfo.newVersion) && oldInfo.newVersion.equals(patchMd5)&& !oldInfo.isRemoveNewVersion) {\n      TinkerLog.e(TAG,\"patch already applied, md5: %s\",patchMd5);\n      UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n      return true;\n    }\n    final String finalOatDir=usingInterpret ? ShareConstants.CHANING_DEX_OPTIMIZE_PATH : oldInfo.oatDir;\n    newInfo=new SharePatchInfo(oldInfo.oldVersion,patchMd5,isProtectedApp,false,Build.FINGERPRINT,finalOatDir);\n  }\n else {\n    newInfo=new SharePatchInfo(\"\",patchMd5,isProtectedApp,false,Build.FINGERPRINT,ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH);\n  }\n  final String patchName=SharePatchFileUtil.getPatchVersionDirectory(patchMd5);\n  final String patchVersionDirectory=patchDirectory + \"/\" + patchName;\n  TinkerLog.i(TAG,\"UpgradePatch tryPatch:patchVersionDirectory:%s\",patchVersionDirectory);\n  File destPatchFile=new File(patchVersionDirectory + \"/\" + SharePatchFileUtil.getPatchVersionFile(patchMd5));\n  try {\n    if (!patchMd5.equals(SharePatchFileUtil.getMD5(destPatchFile))) {\n      SharePatchFileUtil.copyFileUsingStream(patchFile,destPatchFile);\n      TinkerLog.w(TAG,\"UpgradePatch copy patch file, src file: %s size: %d, dest file: %s size:%d\",patchFile.getAbsolutePath(),patchFile.length(),destPatchFile.getAbsolutePath(),destPatchFile.length());\n    }\n  }\n catch (  IOException e) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:copy patch file fail from %s to %s\",patchFile.getPath(),destPatchFile.getPath());\n    manager.getPatchReporter().onPatchTypeExtractFail(patchFile,destPatchFile,patchFile.getName(),ShareConstants.TYPE_PATCH_FILE);\n    return false;\n  }\n  if (!DexDiffPatchInternal.tryRecoverDexFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch dex failed\");\n    return false;\n  }\n  if (!ArkHotDiffPatchInternal.tryRecoverArkHotLibrary(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    return false;\n  }\n  if (!BsDiffPatchInternal.tryRecoverLibraryFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch library failed\");\n    return false;\n  }\n  if (!ResDiffPatchInternal.tryRecoverResourceFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch resource failed\");\n    return false;\n  }\n  if (!DexDiffPatchInternal.waitAndCheckDexOptFile(patchFile,manager)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, check dex opt file failed\");\n    return false;\n  }\n  if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,newInfo,patchInfoLockFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, rewrite patch info failed\");\n    manager.getPatchReporter().onPatchInfoCorrupted(patchFile,newInfo.oldVersion,newInfo.newVersion);\n    return false;\n  }\n  UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n  TinkerLog.w(TAG,\"UpgradePatch tryPatch: done, it is ok\");\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 669,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 114,
        "startLineNumber" : 126,
        "startColumnNumber" : 12,
        "endLineNumber" : 126,
        "endColumnNumber" : 126
      },
      "nodeContext" : "newInfo=new SharePatchInfo(oldInfo.oldVersion,patchMd5,isProtectedApp,false,Build.FINGERPRINT,finalOatDir);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "boolean"
  }, {
    "nodeContext" : "false",
    "nodeType" : "BooleanLiteral",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 128,
      "startColumnNumber" : 71,
      "endLineNumber" : 128,
      "endColumnNumber" : 76
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 116,
        "startLineNumber" : 128,
        "startColumnNumber" : 22,
        "endLineNumber" : 128,
        "endColumnNumber" : 138
      },
      "nodeContext" : "new SharePatchInfo(\"\",patchMd5,isProtectedApp,false,Build.FINGERPRINT,ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 13,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 126,
        "startLineNumber" : 128,
        "startColumnNumber" : 12,
        "endLineNumber" : 128,
        "endColumnNumber" : 138
      },
      "nodeContext" : "newInfo=new SharePatchInfo(\"\",patchMd5,isProtectedApp,false,Build.FINGERPRINT,ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 15,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 127,
        "startLineNumber" : 128,
        "startColumnNumber" : 12,
        "endLineNumber" : 128,
        "endColumnNumber" : 139
      },
      "nodeContext" : "newInfo=new SharePatchInfo(\"\",patchMd5,isProtectedApp,false,Build.FINGERPRINT,ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 151,
        "startLineNumber" : 127,
        "startColumnNumber" : 15,
        "endLineNumber" : 129,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  newInfo=new SharePatchInfo(\"\",patchMd5,isProtectedApp,false,Build.FINGERPRINT,ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1830,
        "startLineNumber" : 100,
        "startColumnNumber" : 8,
        "endLineNumber" : 129,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (oldInfo != null) {\n  if (oldInfo.oldVersion == null || oldInfo.newVersion == null || oldInfo.oatDir == null) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchInfoCorrupted\");\n    manager.getPatchReporter().onPatchInfoCorrupted(patchFile,oldInfo.oldVersion,oldInfo.newVersion);\n    return false;\n  }\n  if (!SharePatchFileUtil.checkIfMd5Valid(patchMd5)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchVersionCheckFail md5 %s is valid\",patchMd5);\n    manager.getPatchReporter().onPatchVersionCheckFail(patchFile,oldInfo,patchMd5);\n    return false;\n  }\n  final boolean usingInterpret=oldInfo.oatDir.equals(ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n  if (!usingInterpret && !ShareTinkerInternals.isNullOrNil(oldInfo.newVersion) && oldInfo.newVersion.equals(patchMd5)&& !oldInfo.isRemoveNewVersion) {\n    TinkerLog.e(TAG,\"patch already applied, md5: %s\",patchMd5);\n    UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n    return true;\n  }\n  final String finalOatDir=usingInterpret ? ShareConstants.CHANING_DEX_OPTIMIZE_PATH : oldInfo.oatDir;\n  newInfo=new SharePatchInfo(oldInfo.oldVersion,patchMd5,isProtectedApp,false,Build.FINGERPRINT,finalOatDir);\n}\n else {\n  newInfo=new SharePatchInfo(\"\",patchMd5,isProtectedApp,false,Build.FINGERPRINT,ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 169,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7821,
        "startLineNumber" : 45,
        "startColumnNumber" : 92,
        "endLineNumber" : 195,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Tinker manager=Tinker.with(context);\n  final File patchFile=new File(tempPatchPath);\n  if (!manager.isTinkerEnabled() || !ShareTinkerInternals.isTinkerEnableWithSharedPreferences(context)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch is disabled, just return\");\n    return false;\n  }\n  if (!SharePatchFileUtil.isLegalFile(patchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch file is not found, just return\");\n    return false;\n  }\n  ShareSecurityCheck signatureCheck=new ShareSecurityCheck(context);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(context,manager.getTinkerFlags(),patchFile,signatureCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchPackageCheckFail\");\n    manager.getPatchReporter().onPatchPackageCheckFail(patchFile,returnCode);\n    return false;\n  }\n  String patchMd5=SharePatchFileUtil.getMD5(patchFile);\n  if (patchMd5 == null) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch md5 is null, just return\");\n    return false;\n  }\n  patchResult.patchVersion=patchMd5;\n  TinkerLog.i(TAG,\"UpgradePatch tryPatch:patchMd5:%s\",patchMd5);\n  final String patchDirectory=manager.getPatchDirectory().getAbsolutePath();\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectory);\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectory);\n  final Map<String,String> pkgProps=signatureCheck.getPackagePropertiesIfPresent();\n  if (pkgProps == null) {\n    TinkerLog.e(TAG,\"UpgradePatch packageProperties is null, do we process a valid patch apk ?\");\n    return false;\n  }\n  final String isProtectedAppStr=pkgProps.get(ShareConstants.PKGMETA_KEY_IS_PROTECTED_APP);\n  final boolean isProtectedApp=(isProtectedAppStr != null && !isProtectedAppStr.isEmpty() && !\"0\".equals(isProtectedAppStr));\n  SharePatchInfo oldInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  SharePatchInfo newInfo;\n  if (oldInfo != null) {\n    if (oldInfo.oldVersion == null || oldInfo.newVersion == null || oldInfo.oatDir == null) {\n      TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchInfoCorrupted\");\n      manager.getPatchReporter().onPatchInfoCorrupted(patchFile,oldInfo.oldVersion,oldInfo.newVersion);\n      return false;\n    }\n    if (!SharePatchFileUtil.checkIfMd5Valid(patchMd5)) {\n      TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchVersionCheckFail md5 %s is valid\",patchMd5);\n      manager.getPatchReporter().onPatchVersionCheckFail(patchFile,oldInfo,patchMd5);\n      return false;\n    }\n    final boolean usingInterpret=oldInfo.oatDir.equals(ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    if (!usingInterpret && !ShareTinkerInternals.isNullOrNil(oldInfo.newVersion) && oldInfo.newVersion.equals(patchMd5)&& !oldInfo.isRemoveNewVersion) {\n      TinkerLog.e(TAG,\"patch already applied, md5: %s\",patchMd5);\n      UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n      return true;\n    }\n    final String finalOatDir=usingInterpret ? ShareConstants.CHANING_DEX_OPTIMIZE_PATH : oldInfo.oatDir;\n    newInfo=new SharePatchInfo(oldInfo.oldVersion,patchMd5,isProtectedApp,false,Build.FINGERPRINT,finalOatDir);\n  }\n else {\n    newInfo=new SharePatchInfo(\"\",patchMd5,isProtectedApp,false,Build.FINGERPRINT,ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH);\n  }\n  final String patchName=SharePatchFileUtil.getPatchVersionDirectory(patchMd5);\n  final String patchVersionDirectory=patchDirectory + \"/\" + patchName;\n  TinkerLog.i(TAG,\"UpgradePatch tryPatch:patchVersionDirectory:%s\",patchVersionDirectory);\n  File destPatchFile=new File(patchVersionDirectory + \"/\" + SharePatchFileUtil.getPatchVersionFile(patchMd5));\n  try {\n    if (!patchMd5.equals(SharePatchFileUtil.getMD5(destPatchFile))) {\n      SharePatchFileUtil.copyFileUsingStream(patchFile,destPatchFile);\n      TinkerLog.w(TAG,\"UpgradePatch copy patch file, src file: %s size: %d, dest file: %s size:%d\",patchFile.getAbsolutePath(),patchFile.length(),destPatchFile.getAbsolutePath(),destPatchFile.length());\n    }\n  }\n catch (  IOException e) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:copy patch file fail from %s to %s\",patchFile.getPath(),destPatchFile.getPath());\n    manager.getPatchReporter().onPatchTypeExtractFail(patchFile,destPatchFile,patchFile.getName(),ShareConstants.TYPE_PATCH_FILE);\n    return false;\n  }\n  if (!DexDiffPatchInternal.tryRecoverDexFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch dex failed\");\n    return false;\n  }\n  if (!ArkHotDiffPatchInternal.tryRecoverArkHotLibrary(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    return false;\n  }\n  if (!BsDiffPatchInternal.tryRecoverLibraryFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch library failed\");\n    return false;\n  }\n  if (!ResDiffPatchInternal.tryRecoverResourceFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch resource failed\");\n    return false;\n  }\n  if (!DexDiffPatchInternal.waitAndCheckDexOptFile(patchFile,manager)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, check dex opt file failed\");\n    return false;\n  }\n  if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,newInfo,patchInfoLockFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, rewrite patch info failed\");\n    manager.getPatchReporter().onPatchInfoCorrupted(patchFile,newInfo.oldVersion,newInfo.newVersion);\n    return false;\n  }\n  UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n  TinkerLog.w(TAG,\"UpgradePatch tryPatch: done, it is ok\");\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 651,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7923,
        "startLineNumber" : 44,
        "startColumnNumber" : 4,
        "endLineNumber" : 195,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public boolean tryPatch(Context context,String tempPatchPath,PatchResult patchResult){\n  Tinker manager=Tinker.with(context);\n  final File patchFile=new File(tempPatchPath);\n  if (!manager.isTinkerEnabled() || !ShareTinkerInternals.isTinkerEnableWithSharedPreferences(context)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch is disabled, just return\");\n    return false;\n  }\n  if (!SharePatchFileUtil.isLegalFile(patchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch file is not found, just return\");\n    return false;\n  }\n  ShareSecurityCheck signatureCheck=new ShareSecurityCheck(context);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(context,manager.getTinkerFlags(),patchFile,signatureCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchPackageCheckFail\");\n    manager.getPatchReporter().onPatchPackageCheckFail(patchFile,returnCode);\n    return false;\n  }\n  String patchMd5=SharePatchFileUtil.getMD5(patchFile);\n  if (patchMd5 == null) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch md5 is null, just return\");\n    return false;\n  }\n  patchResult.patchVersion=patchMd5;\n  TinkerLog.i(TAG,\"UpgradePatch tryPatch:patchMd5:%s\",patchMd5);\n  final String patchDirectory=manager.getPatchDirectory().getAbsolutePath();\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectory);\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectory);\n  final Map<String,String> pkgProps=signatureCheck.getPackagePropertiesIfPresent();\n  if (pkgProps == null) {\n    TinkerLog.e(TAG,\"UpgradePatch packageProperties is null, do we process a valid patch apk ?\");\n    return false;\n  }\n  final String isProtectedAppStr=pkgProps.get(ShareConstants.PKGMETA_KEY_IS_PROTECTED_APP);\n  final boolean isProtectedApp=(isProtectedAppStr != null && !isProtectedAppStr.isEmpty() && !\"0\".equals(isProtectedAppStr));\n  SharePatchInfo oldInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  SharePatchInfo newInfo;\n  if (oldInfo != null) {\n    if (oldInfo.oldVersion == null || oldInfo.newVersion == null || oldInfo.oatDir == null) {\n      TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchInfoCorrupted\");\n      manager.getPatchReporter().onPatchInfoCorrupted(patchFile,oldInfo.oldVersion,oldInfo.newVersion);\n      return false;\n    }\n    if (!SharePatchFileUtil.checkIfMd5Valid(patchMd5)) {\n      TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchVersionCheckFail md5 %s is valid\",patchMd5);\n      manager.getPatchReporter().onPatchVersionCheckFail(patchFile,oldInfo,patchMd5);\n      return false;\n    }\n    final boolean usingInterpret=oldInfo.oatDir.equals(ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    if (!usingInterpret && !ShareTinkerInternals.isNullOrNil(oldInfo.newVersion) && oldInfo.newVersion.equals(patchMd5)&& !oldInfo.isRemoveNewVersion) {\n      TinkerLog.e(TAG,\"patch already applied, md5: %s\",patchMd5);\n      UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n      return true;\n    }\n    final String finalOatDir=usingInterpret ? ShareConstants.CHANING_DEX_OPTIMIZE_PATH : oldInfo.oatDir;\n    newInfo=new SharePatchInfo(oldInfo.oldVersion,patchMd5,isProtectedApp,false,Build.FINGERPRINT,finalOatDir);\n  }\n else {\n    newInfo=new SharePatchInfo(\"\",patchMd5,isProtectedApp,false,Build.FINGERPRINT,ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH);\n  }\n  final String patchName=SharePatchFileUtil.getPatchVersionDirectory(patchMd5);\n  final String patchVersionDirectory=patchDirectory + \"/\" + patchName;\n  TinkerLog.i(TAG,\"UpgradePatch tryPatch:patchVersionDirectory:%s\",patchVersionDirectory);\n  File destPatchFile=new File(patchVersionDirectory + \"/\" + SharePatchFileUtil.getPatchVersionFile(patchMd5));\n  try {\n    if (!patchMd5.equals(SharePatchFileUtil.getMD5(destPatchFile))) {\n      SharePatchFileUtil.copyFileUsingStream(patchFile,destPatchFile);\n      TinkerLog.w(TAG,\"UpgradePatch copy patch file, src file: %s size: %d, dest file: %s size:%d\",patchFile.getAbsolutePath(),patchFile.length(),destPatchFile.getAbsolutePath(),destPatchFile.length());\n    }\n  }\n catch (  IOException e) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:copy patch file fail from %s to %s\",patchFile.getPath(),destPatchFile.getPath());\n    manager.getPatchReporter().onPatchTypeExtractFail(patchFile,destPatchFile,patchFile.getName(),ShareConstants.TYPE_PATCH_FILE);\n    return false;\n  }\n  if (!DexDiffPatchInternal.tryRecoverDexFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch dex failed\");\n    return false;\n  }\n  if (!ArkHotDiffPatchInternal.tryRecoverArkHotLibrary(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    return false;\n  }\n  if (!BsDiffPatchInternal.tryRecoverLibraryFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch library failed\");\n    return false;\n  }\n  if (!ResDiffPatchInternal.tryRecoverResourceFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch resource failed\");\n    return false;\n  }\n  if (!DexDiffPatchInternal.waitAndCheckDexOptFile(patchFile,manager)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, check dex opt file failed\");\n    return false;\n  }\n  if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,newInfo,patchInfoLockFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, rewrite patch info failed\");\n    manager.getPatchReporter().onPatchInfoCorrupted(patchFile,newInfo.oldVersion,newInfo.newVersion);\n    return false;\n  }\n  UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n  TinkerLog.w(TAG,\"UpgradePatch tryPatch: done, it is ok\");\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 669,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 127,
        "startLineNumber" : 128,
        "startColumnNumber" : 12,
        "endLineNumber" : 128,
        "endColumnNumber" : 139
      },
      "nodeContext" : "newInfo=new SharePatchInfo(\"\",patchMd5,isProtectedApp,false,Build.FINGERPRINT,ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "boolean"
  }, {
    "nodeContext" : "false",
    "nodeType" : "BooleanLiteral",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 153,
      "startColumnNumber" : 19,
      "endLineNumber" : 153,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 153,
        "startColumnNumber" : 12,
        "endLineNumber" : 153,
        "endColumnNumber" : 25
      },
      "nodeContext" : "return false;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 315,
        "startLineNumber" : 150,
        "startColumnNumber" : 32,
        "endLineNumber" : 154,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  TinkerLog.e(TAG,\"UpgradePatch tryPatch:copy patch file fail from %s to %s\",patchFile.getPath(),destPatchFile.getPath());\n  manager.getPatchReporter().onPatchTypeExtractFail(patchFile,destPatchFile,patchFile.getName(),ShareConstants.TYPE_PATCH_FILE);\n  return false;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 29,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 337,
        "startLineNumber" : 150,
        "startColumnNumber" : 10,
        "endLineNumber" : 154,
        "endColumnNumber" : 9
      },
      "nodeContext" : "catch (IOException e) {\n  TinkerLog.e(TAG,\"UpgradePatch tryPatch:copy patch file fail from %s to %s\",patchFile.getPath(),destPatchFile.getPath());\n  manager.getPatchReporter().onPatchTypeExtractFail(patchFile,destPatchFile,patchFile.getName(),ShareConstants.TYPE_PATCH_FILE);\n  return false;\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 34,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 796,
        "startLineNumber" : 143,
        "startColumnNumber" : 8,
        "endLineNumber" : 154,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  if (!patchMd5.equals(SharePatchFileUtil.getMD5(destPatchFile))) {\n    SharePatchFileUtil.copyFileUsingStream(patchFile,destPatchFile);\n    TinkerLog.w(TAG,\"UpgradePatch copy patch file, src file: %s size: %d, dest file: %s size:%d\",patchFile.getAbsolutePath(),patchFile.length(),destPatchFile.getAbsolutePath(),destPatchFile.length());\n  }\n}\n catch (IOException e) {\n  TinkerLog.e(TAG,\"UpgradePatch tryPatch:copy patch file fail from %s to %s\",patchFile.getPath(),destPatchFile.getPath());\n  manager.getPatchReporter().onPatchTypeExtractFail(patchFile,destPatchFile,patchFile.getName(),ShareConstants.TYPE_PATCH_FILE);\n  return false;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 70,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7821,
        "startLineNumber" : 45,
        "startColumnNumber" : 92,
        "endLineNumber" : 195,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Tinker manager=Tinker.with(context);\n  final File patchFile=new File(tempPatchPath);\n  if (!manager.isTinkerEnabled() || !ShareTinkerInternals.isTinkerEnableWithSharedPreferences(context)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch is disabled, just return\");\n    return false;\n  }\n  if (!SharePatchFileUtil.isLegalFile(patchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch file is not found, just return\");\n    return false;\n  }\n  ShareSecurityCheck signatureCheck=new ShareSecurityCheck(context);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(context,manager.getTinkerFlags(),patchFile,signatureCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchPackageCheckFail\");\n    manager.getPatchReporter().onPatchPackageCheckFail(patchFile,returnCode);\n    return false;\n  }\n  String patchMd5=SharePatchFileUtil.getMD5(patchFile);\n  if (patchMd5 == null) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch md5 is null, just return\");\n    return false;\n  }\n  patchResult.patchVersion=patchMd5;\n  TinkerLog.i(TAG,\"UpgradePatch tryPatch:patchMd5:%s\",patchMd5);\n  final String patchDirectory=manager.getPatchDirectory().getAbsolutePath();\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectory);\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectory);\n  final Map<String,String> pkgProps=signatureCheck.getPackagePropertiesIfPresent();\n  if (pkgProps == null) {\n    TinkerLog.e(TAG,\"UpgradePatch packageProperties is null, do we process a valid patch apk ?\");\n    return false;\n  }\n  final String isProtectedAppStr=pkgProps.get(ShareConstants.PKGMETA_KEY_IS_PROTECTED_APP);\n  final boolean isProtectedApp=(isProtectedAppStr != null && !isProtectedAppStr.isEmpty() && !\"0\".equals(isProtectedAppStr));\n  SharePatchInfo oldInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  SharePatchInfo newInfo;\n  if (oldInfo != null) {\n    if (oldInfo.oldVersion == null || oldInfo.newVersion == null || oldInfo.oatDir == null) {\n      TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchInfoCorrupted\");\n      manager.getPatchReporter().onPatchInfoCorrupted(patchFile,oldInfo.oldVersion,oldInfo.newVersion);\n      return false;\n    }\n    if (!SharePatchFileUtil.checkIfMd5Valid(patchMd5)) {\n      TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchVersionCheckFail md5 %s is valid\",patchMd5);\n      manager.getPatchReporter().onPatchVersionCheckFail(patchFile,oldInfo,patchMd5);\n      return false;\n    }\n    final boolean usingInterpret=oldInfo.oatDir.equals(ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    if (!usingInterpret && !ShareTinkerInternals.isNullOrNil(oldInfo.newVersion) && oldInfo.newVersion.equals(patchMd5)&& !oldInfo.isRemoveNewVersion) {\n      TinkerLog.e(TAG,\"patch already applied, md5: %s\",patchMd5);\n      UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n      return true;\n    }\n    final String finalOatDir=usingInterpret ? ShareConstants.CHANING_DEX_OPTIMIZE_PATH : oldInfo.oatDir;\n    newInfo=new SharePatchInfo(oldInfo.oldVersion,patchMd5,isProtectedApp,false,Build.FINGERPRINT,finalOatDir);\n  }\n else {\n    newInfo=new SharePatchInfo(\"\",patchMd5,isProtectedApp,false,Build.FINGERPRINT,ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH);\n  }\n  final String patchName=SharePatchFileUtil.getPatchVersionDirectory(patchMd5);\n  final String patchVersionDirectory=patchDirectory + \"/\" + patchName;\n  TinkerLog.i(TAG,\"UpgradePatch tryPatch:patchVersionDirectory:%s\",patchVersionDirectory);\n  File destPatchFile=new File(patchVersionDirectory + \"/\" + SharePatchFileUtil.getPatchVersionFile(patchMd5));\n  try {\n    if (!patchMd5.equals(SharePatchFileUtil.getMD5(destPatchFile))) {\n      SharePatchFileUtil.copyFileUsingStream(patchFile,destPatchFile);\n      TinkerLog.w(TAG,\"UpgradePatch copy patch file, src file: %s size: %d, dest file: %s size:%d\",patchFile.getAbsolutePath(),patchFile.length(),destPatchFile.getAbsolutePath(),destPatchFile.length());\n    }\n  }\n catch (  IOException e) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:copy patch file fail from %s to %s\",patchFile.getPath(),destPatchFile.getPath());\n    manager.getPatchReporter().onPatchTypeExtractFail(patchFile,destPatchFile,patchFile.getName(),ShareConstants.TYPE_PATCH_FILE);\n    return false;\n  }\n  if (!DexDiffPatchInternal.tryRecoverDexFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch dex failed\");\n    return false;\n  }\n  if (!ArkHotDiffPatchInternal.tryRecoverArkHotLibrary(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    return false;\n  }\n  if (!BsDiffPatchInternal.tryRecoverLibraryFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch library failed\");\n    return false;\n  }\n  if (!ResDiffPatchInternal.tryRecoverResourceFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch resource failed\");\n    return false;\n  }\n  if (!DexDiffPatchInternal.waitAndCheckDexOptFile(patchFile,manager)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, check dex opt file failed\");\n    return false;\n  }\n  if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,newInfo,patchInfoLockFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, rewrite patch info failed\");\n    manager.getPatchReporter().onPatchInfoCorrupted(patchFile,newInfo.oldVersion,newInfo.newVersion);\n    return false;\n  }\n  UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n  TinkerLog.w(TAG,\"UpgradePatch tryPatch: done, it is ok\");\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 651,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7923,
        "startLineNumber" : 44,
        "startColumnNumber" : 4,
        "endLineNumber" : 195,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public boolean tryPatch(Context context,String tempPatchPath,PatchResult patchResult){\n  Tinker manager=Tinker.with(context);\n  final File patchFile=new File(tempPatchPath);\n  if (!manager.isTinkerEnabled() || !ShareTinkerInternals.isTinkerEnableWithSharedPreferences(context)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch is disabled, just return\");\n    return false;\n  }\n  if (!SharePatchFileUtil.isLegalFile(patchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch file is not found, just return\");\n    return false;\n  }\n  ShareSecurityCheck signatureCheck=new ShareSecurityCheck(context);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(context,manager.getTinkerFlags(),patchFile,signatureCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchPackageCheckFail\");\n    manager.getPatchReporter().onPatchPackageCheckFail(patchFile,returnCode);\n    return false;\n  }\n  String patchMd5=SharePatchFileUtil.getMD5(patchFile);\n  if (patchMd5 == null) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch md5 is null, just return\");\n    return false;\n  }\n  patchResult.patchVersion=patchMd5;\n  TinkerLog.i(TAG,\"UpgradePatch tryPatch:patchMd5:%s\",patchMd5);\n  final String patchDirectory=manager.getPatchDirectory().getAbsolutePath();\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectory);\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectory);\n  final Map<String,String> pkgProps=signatureCheck.getPackagePropertiesIfPresent();\n  if (pkgProps == null) {\n    TinkerLog.e(TAG,\"UpgradePatch packageProperties is null, do we process a valid patch apk ?\");\n    return false;\n  }\n  final String isProtectedAppStr=pkgProps.get(ShareConstants.PKGMETA_KEY_IS_PROTECTED_APP);\n  final boolean isProtectedApp=(isProtectedAppStr != null && !isProtectedAppStr.isEmpty() && !\"0\".equals(isProtectedAppStr));\n  SharePatchInfo oldInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  SharePatchInfo newInfo;\n  if (oldInfo != null) {\n    if (oldInfo.oldVersion == null || oldInfo.newVersion == null || oldInfo.oatDir == null) {\n      TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchInfoCorrupted\");\n      manager.getPatchReporter().onPatchInfoCorrupted(patchFile,oldInfo.oldVersion,oldInfo.newVersion);\n      return false;\n    }\n    if (!SharePatchFileUtil.checkIfMd5Valid(patchMd5)) {\n      TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchVersionCheckFail md5 %s is valid\",patchMd5);\n      manager.getPatchReporter().onPatchVersionCheckFail(patchFile,oldInfo,patchMd5);\n      return false;\n    }\n    final boolean usingInterpret=oldInfo.oatDir.equals(ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    if (!usingInterpret && !ShareTinkerInternals.isNullOrNil(oldInfo.newVersion) && oldInfo.newVersion.equals(patchMd5)&& !oldInfo.isRemoveNewVersion) {\n      TinkerLog.e(TAG,\"patch already applied, md5: %s\",patchMd5);\n      UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n      return true;\n    }\n    final String finalOatDir=usingInterpret ? ShareConstants.CHANING_DEX_OPTIMIZE_PATH : oldInfo.oatDir;\n    newInfo=new SharePatchInfo(oldInfo.oldVersion,patchMd5,isProtectedApp,false,Build.FINGERPRINT,finalOatDir);\n  }\n else {\n    newInfo=new SharePatchInfo(\"\",patchMd5,isProtectedApp,false,Build.FINGERPRINT,ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH);\n  }\n  final String patchName=SharePatchFileUtil.getPatchVersionDirectory(patchMd5);\n  final String patchVersionDirectory=patchDirectory + \"/\" + patchName;\n  TinkerLog.i(TAG,\"UpgradePatch tryPatch:patchVersionDirectory:%s\",patchVersionDirectory);\n  File destPatchFile=new File(patchVersionDirectory + \"/\" + SharePatchFileUtil.getPatchVersionFile(patchMd5));\n  try {\n    if (!patchMd5.equals(SharePatchFileUtil.getMD5(destPatchFile))) {\n      SharePatchFileUtil.copyFileUsingStream(patchFile,destPatchFile);\n      TinkerLog.w(TAG,\"UpgradePatch copy patch file, src file: %s size: %d, dest file: %s size:%d\",patchFile.getAbsolutePath(),patchFile.length(),destPatchFile.getAbsolutePath(),destPatchFile.length());\n    }\n  }\n catch (  IOException e) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:copy patch file fail from %s to %s\",patchFile.getPath(),destPatchFile.getPath());\n    manager.getPatchReporter().onPatchTypeExtractFail(patchFile,destPatchFile,patchFile.getName(),ShareConstants.TYPE_PATCH_FILE);\n    return false;\n  }\n  if (!DexDiffPatchInternal.tryRecoverDexFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch dex failed\");\n    return false;\n  }\n  if (!ArkHotDiffPatchInternal.tryRecoverArkHotLibrary(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    return false;\n  }\n  if (!BsDiffPatchInternal.tryRecoverLibraryFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch library failed\");\n    return false;\n  }\n  if (!ResDiffPatchInternal.tryRecoverResourceFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch resource failed\");\n    return false;\n  }\n  if (!DexDiffPatchInternal.waitAndCheckDexOptFile(patchFile,manager)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, check dex opt file failed\");\n    return false;\n  }\n  if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,newInfo,patchInfoLockFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, rewrite patch info failed\");\n    manager.getPatchReporter().onPatchInfoCorrupted(patchFile,newInfo.oldVersion,newInfo.newVersion);\n    return false;\n  }\n  UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n  TinkerLog.w(TAG,\"UpgradePatch tryPatch: done, it is ok\");\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 669,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 153,
        "startColumnNumber" : 12,
        "endLineNumber" : 153,
        "endColumnNumber" : 25
      },
      "nodeContext" : "return false;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "boolean"
  }, {
    "nodeContext" : "false",
    "nodeType" : "BooleanLiteral",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 159,
      "startColumnNumber" : 19,
      "endLineNumber" : 159,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 159,
        "startColumnNumber" : 12,
        "endLineNumber" : 159,
        "endColumnNumber" : 25
      },
      "nodeContext" : "return false;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 132,
        "startLineNumber" : 157,
        "startColumnNumber" : 126,
        "endLineNumber" : 160,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch dex failed\");\n  return false;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 250,
        "startLineNumber" : 157,
        "startColumnNumber" : 8,
        "endLineNumber" : 160,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!DexDiffPatchInternal.tryRecoverDexFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n  TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch dex failed\");\n  return false;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 19,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7821,
        "startLineNumber" : 45,
        "startColumnNumber" : 92,
        "endLineNumber" : 195,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Tinker manager=Tinker.with(context);\n  final File patchFile=new File(tempPatchPath);\n  if (!manager.isTinkerEnabled() || !ShareTinkerInternals.isTinkerEnableWithSharedPreferences(context)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch is disabled, just return\");\n    return false;\n  }\n  if (!SharePatchFileUtil.isLegalFile(patchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch file is not found, just return\");\n    return false;\n  }\n  ShareSecurityCheck signatureCheck=new ShareSecurityCheck(context);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(context,manager.getTinkerFlags(),patchFile,signatureCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchPackageCheckFail\");\n    manager.getPatchReporter().onPatchPackageCheckFail(patchFile,returnCode);\n    return false;\n  }\n  String patchMd5=SharePatchFileUtil.getMD5(patchFile);\n  if (patchMd5 == null) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch md5 is null, just return\");\n    return false;\n  }\n  patchResult.patchVersion=patchMd5;\n  TinkerLog.i(TAG,\"UpgradePatch tryPatch:patchMd5:%s\",patchMd5);\n  final String patchDirectory=manager.getPatchDirectory().getAbsolutePath();\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectory);\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectory);\n  final Map<String,String> pkgProps=signatureCheck.getPackagePropertiesIfPresent();\n  if (pkgProps == null) {\n    TinkerLog.e(TAG,\"UpgradePatch packageProperties is null, do we process a valid patch apk ?\");\n    return false;\n  }\n  final String isProtectedAppStr=pkgProps.get(ShareConstants.PKGMETA_KEY_IS_PROTECTED_APP);\n  final boolean isProtectedApp=(isProtectedAppStr != null && !isProtectedAppStr.isEmpty() && !\"0\".equals(isProtectedAppStr));\n  SharePatchInfo oldInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  SharePatchInfo newInfo;\n  if (oldInfo != null) {\n    if (oldInfo.oldVersion == null || oldInfo.newVersion == null || oldInfo.oatDir == null) {\n      TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchInfoCorrupted\");\n      manager.getPatchReporter().onPatchInfoCorrupted(patchFile,oldInfo.oldVersion,oldInfo.newVersion);\n      return false;\n    }\n    if (!SharePatchFileUtil.checkIfMd5Valid(patchMd5)) {\n      TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchVersionCheckFail md5 %s is valid\",patchMd5);\n      manager.getPatchReporter().onPatchVersionCheckFail(patchFile,oldInfo,patchMd5);\n      return false;\n    }\n    final boolean usingInterpret=oldInfo.oatDir.equals(ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    if (!usingInterpret && !ShareTinkerInternals.isNullOrNil(oldInfo.newVersion) && oldInfo.newVersion.equals(patchMd5)&& !oldInfo.isRemoveNewVersion) {\n      TinkerLog.e(TAG,\"patch already applied, md5: %s\",patchMd5);\n      UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n      return true;\n    }\n    final String finalOatDir=usingInterpret ? ShareConstants.CHANING_DEX_OPTIMIZE_PATH : oldInfo.oatDir;\n    newInfo=new SharePatchInfo(oldInfo.oldVersion,patchMd5,isProtectedApp,false,Build.FINGERPRINT,finalOatDir);\n  }\n else {\n    newInfo=new SharePatchInfo(\"\",patchMd5,isProtectedApp,false,Build.FINGERPRINT,ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH);\n  }\n  final String patchName=SharePatchFileUtil.getPatchVersionDirectory(patchMd5);\n  final String patchVersionDirectory=patchDirectory + \"/\" + patchName;\n  TinkerLog.i(TAG,\"UpgradePatch tryPatch:patchVersionDirectory:%s\",patchVersionDirectory);\n  File destPatchFile=new File(patchVersionDirectory + \"/\" + SharePatchFileUtil.getPatchVersionFile(patchMd5));\n  try {\n    if (!patchMd5.equals(SharePatchFileUtil.getMD5(destPatchFile))) {\n      SharePatchFileUtil.copyFileUsingStream(patchFile,destPatchFile);\n      TinkerLog.w(TAG,\"UpgradePatch copy patch file, src file: %s size: %d, dest file: %s size:%d\",patchFile.getAbsolutePath(),patchFile.length(),destPatchFile.getAbsolutePath(),destPatchFile.length());\n    }\n  }\n catch (  IOException e) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:copy patch file fail from %s to %s\",patchFile.getPath(),destPatchFile.getPath());\n    manager.getPatchReporter().onPatchTypeExtractFail(patchFile,destPatchFile,patchFile.getName(),ShareConstants.TYPE_PATCH_FILE);\n    return false;\n  }\n  if (!DexDiffPatchInternal.tryRecoverDexFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch dex failed\");\n    return false;\n  }\n  if (!ArkHotDiffPatchInternal.tryRecoverArkHotLibrary(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    return false;\n  }\n  if (!BsDiffPatchInternal.tryRecoverLibraryFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch library failed\");\n    return false;\n  }\n  if (!ResDiffPatchInternal.tryRecoverResourceFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch resource failed\");\n    return false;\n  }\n  if (!DexDiffPatchInternal.waitAndCheckDexOptFile(patchFile,manager)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, check dex opt file failed\");\n    return false;\n  }\n  if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,newInfo,patchInfoLockFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, rewrite patch info failed\");\n    manager.getPatchReporter().onPatchInfoCorrupted(patchFile,newInfo.oldVersion,newInfo.newVersion);\n    return false;\n  }\n  UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n  TinkerLog.w(TAG,\"UpgradePatch tryPatch: done, it is ok\");\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 651,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7923,
        "startLineNumber" : 44,
        "startColumnNumber" : 4,
        "endLineNumber" : 195,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public boolean tryPatch(Context context,String tempPatchPath,PatchResult patchResult){\n  Tinker manager=Tinker.with(context);\n  final File patchFile=new File(tempPatchPath);\n  if (!manager.isTinkerEnabled() || !ShareTinkerInternals.isTinkerEnableWithSharedPreferences(context)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch is disabled, just return\");\n    return false;\n  }\n  if (!SharePatchFileUtil.isLegalFile(patchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch file is not found, just return\");\n    return false;\n  }\n  ShareSecurityCheck signatureCheck=new ShareSecurityCheck(context);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(context,manager.getTinkerFlags(),patchFile,signatureCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchPackageCheckFail\");\n    manager.getPatchReporter().onPatchPackageCheckFail(patchFile,returnCode);\n    return false;\n  }\n  String patchMd5=SharePatchFileUtil.getMD5(patchFile);\n  if (patchMd5 == null) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch md5 is null, just return\");\n    return false;\n  }\n  patchResult.patchVersion=patchMd5;\n  TinkerLog.i(TAG,\"UpgradePatch tryPatch:patchMd5:%s\",patchMd5);\n  final String patchDirectory=manager.getPatchDirectory().getAbsolutePath();\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectory);\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectory);\n  final Map<String,String> pkgProps=signatureCheck.getPackagePropertiesIfPresent();\n  if (pkgProps == null) {\n    TinkerLog.e(TAG,\"UpgradePatch packageProperties is null, do we process a valid patch apk ?\");\n    return false;\n  }\n  final String isProtectedAppStr=pkgProps.get(ShareConstants.PKGMETA_KEY_IS_PROTECTED_APP);\n  final boolean isProtectedApp=(isProtectedAppStr != null && !isProtectedAppStr.isEmpty() && !\"0\".equals(isProtectedAppStr));\n  SharePatchInfo oldInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  SharePatchInfo newInfo;\n  if (oldInfo != null) {\n    if (oldInfo.oldVersion == null || oldInfo.newVersion == null || oldInfo.oatDir == null) {\n      TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchInfoCorrupted\");\n      manager.getPatchReporter().onPatchInfoCorrupted(patchFile,oldInfo.oldVersion,oldInfo.newVersion);\n      return false;\n    }\n    if (!SharePatchFileUtil.checkIfMd5Valid(patchMd5)) {\n      TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchVersionCheckFail md5 %s is valid\",patchMd5);\n      manager.getPatchReporter().onPatchVersionCheckFail(patchFile,oldInfo,patchMd5);\n      return false;\n    }\n    final boolean usingInterpret=oldInfo.oatDir.equals(ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    if (!usingInterpret && !ShareTinkerInternals.isNullOrNil(oldInfo.newVersion) && oldInfo.newVersion.equals(patchMd5)&& !oldInfo.isRemoveNewVersion) {\n      TinkerLog.e(TAG,\"patch already applied, md5: %s\",patchMd5);\n      UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n      return true;\n    }\n    final String finalOatDir=usingInterpret ? ShareConstants.CHANING_DEX_OPTIMIZE_PATH : oldInfo.oatDir;\n    newInfo=new SharePatchInfo(oldInfo.oldVersion,patchMd5,isProtectedApp,false,Build.FINGERPRINT,finalOatDir);\n  }\n else {\n    newInfo=new SharePatchInfo(\"\",patchMd5,isProtectedApp,false,Build.FINGERPRINT,ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH);\n  }\n  final String patchName=SharePatchFileUtil.getPatchVersionDirectory(patchMd5);\n  final String patchVersionDirectory=patchDirectory + \"/\" + patchName;\n  TinkerLog.i(TAG,\"UpgradePatch tryPatch:patchVersionDirectory:%s\",patchVersionDirectory);\n  File destPatchFile=new File(patchVersionDirectory + \"/\" + SharePatchFileUtil.getPatchVersionFile(patchMd5));\n  try {\n    if (!patchMd5.equals(SharePatchFileUtil.getMD5(destPatchFile))) {\n      SharePatchFileUtil.copyFileUsingStream(patchFile,destPatchFile);\n      TinkerLog.w(TAG,\"UpgradePatch copy patch file, src file: %s size: %d, dest file: %s size:%d\",patchFile.getAbsolutePath(),patchFile.length(),destPatchFile.getAbsolutePath(),destPatchFile.length());\n    }\n  }\n catch (  IOException e) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:copy patch file fail from %s to %s\",patchFile.getPath(),destPatchFile.getPath());\n    manager.getPatchReporter().onPatchTypeExtractFail(patchFile,destPatchFile,patchFile.getName(),ShareConstants.TYPE_PATCH_FILE);\n    return false;\n  }\n  if (!DexDiffPatchInternal.tryRecoverDexFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch dex failed\");\n    return false;\n  }\n  if (!ArkHotDiffPatchInternal.tryRecoverArkHotLibrary(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    return false;\n  }\n  if (!BsDiffPatchInternal.tryRecoverLibraryFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch library failed\");\n    return false;\n  }\n  if (!ResDiffPatchInternal.tryRecoverResourceFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch resource failed\");\n    return false;\n  }\n  if (!DexDiffPatchInternal.waitAndCheckDexOptFile(patchFile,manager)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, check dex opt file failed\");\n    return false;\n  }\n  if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,newInfo,patchInfoLockFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, rewrite patch info failed\");\n    manager.getPatchReporter().onPatchInfoCorrupted(patchFile,newInfo.oldVersion,newInfo.newVersion);\n    return false;\n  }\n  UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n  TinkerLog.w(TAG,\"UpgradePatch tryPatch: done, it is ok\");\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 669,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 159,
        "startColumnNumber" : 12,
        "endLineNumber" : 159,
        "endColumnNumber" : 25
      },
      "nodeContext" : "return false;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "boolean"
  }, {
    "nodeContext" : "false",
    "nodeType" : "BooleanLiteral",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 164,
      "startColumnNumber" : 19,
      "endLineNumber" : 164,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 164,
        "startColumnNumber" : 12,
        "endLineNumber" : 164,
        "endColumnNumber" : 25
      },
      "nodeContext" : "return false;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 163,
        "startColumnNumber" : 64,
        "endLineNumber" : 165,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  return false;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 3,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 179,
        "startLineNumber" : 162,
        "startColumnNumber" : 8,
        "endLineNumber" : 165,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!ArkHotDiffPatchInternal.tryRecoverArkHotLibrary(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n  return false;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7821,
        "startLineNumber" : 45,
        "startColumnNumber" : 92,
        "endLineNumber" : 195,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Tinker manager=Tinker.with(context);\n  final File patchFile=new File(tempPatchPath);\n  if (!manager.isTinkerEnabled() || !ShareTinkerInternals.isTinkerEnableWithSharedPreferences(context)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch is disabled, just return\");\n    return false;\n  }\n  if (!SharePatchFileUtil.isLegalFile(patchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch file is not found, just return\");\n    return false;\n  }\n  ShareSecurityCheck signatureCheck=new ShareSecurityCheck(context);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(context,manager.getTinkerFlags(),patchFile,signatureCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchPackageCheckFail\");\n    manager.getPatchReporter().onPatchPackageCheckFail(patchFile,returnCode);\n    return false;\n  }\n  String patchMd5=SharePatchFileUtil.getMD5(patchFile);\n  if (patchMd5 == null) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch md5 is null, just return\");\n    return false;\n  }\n  patchResult.patchVersion=patchMd5;\n  TinkerLog.i(TAG,\"UpgradePatch tryPatch:patchMd5:%s\",patchMd5);\n  final String patchDirectory=manager.getPatchDirectory().getAbsolutePath();\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectory);\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectory);\n  final Map<String,String> pkgProps=signatureCheck.getPackagePropertiesIfPresent();\n  if (pkgProps == null) {\n    TinkerLog.e(TAG,\"UpgradePatch packageProperties is null, do we process a valid patch apk ?\");\n    return false;\n  }\n  final String isProtectedAppStr=pkgProps.get(ShareConstants.PKGMETA_KEY_IS_PROTECTED_APP);\n  final boolean isProtectedApp=(isProtectedAppStr != null && !isProtectedAppStr.isEmpty() && !\"0\".equals(isProtectedAppStr));\n  SharePatchInfo oldInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  SharePatchInfo newInfo;\n  if (oldInfo != null) {\n    if (oldInfo.oldVersion == null || oldInfo.newVersion == null || oldInfo.oatDir == null) {\n      TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchInfoCorrupted\");\n      manager.getPatchReporter().onPatchInfoCorrupted(patchFile,oldInfo.oldVersion,oldInfo.newVersion);\n      return false;\n    }\n    if (!SharePatchFileUtil.checkIfMd5Valid(patchMd5)) {\n      TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchVersionCheckFail md5 %s is valid\",patchMd5);\n      manager.getPatchReporter().onPatchVersionCheckFail(patchFile,oldInfo,patchMd5);\n      return false;\n    }\n    final boolean usingInterpret=oldInfo.oatDir.equals(ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    if (!usingInterpret && !ShareTinkerInternals.isNullOrNil(oldInfo.newVersion) && oldInfo.newVersion.equals(patchMd5)&& !oldInfo.isRemoveNewVersion) {\n      TinkerLog.e(TAG,\"patch already applied, md5: %s\",patchMd5);\n      UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n      return true;\n    }\n    final String finalOatDir=usingInterpret ? ShareConstants.CHANING_DEX_OPTIMIZE_PATH : oldInfo.oatDir;\n    newInfo=new SharePatchInfo(oldInfo.oldVersion,patchMd5,isProtectedApp,false,Build.FINGERPRINT,finalOatDir);\n  }\n else {\n    newInfo=new SharePatchInfo(\"\",patchMd5,isProtectedApp,false,Build.FINGERPRINT,ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH);\n  }\n  final String patchName=SharePatchFileUtil.getPatchVersionDirectory(patchMd5);\n  final String patchVersionDirectory=patchDirectory + \"/\" + patchName;\n  TinkerLog.i(TAG,\"UpgradePatch tryPatch:patchVersionDirectory:%s\",patchVersionDirectory);\n  File destPatchFile=new File(patchVersionDirectory + \"/\" + SharePatchFileUtil.getPatchVersionFile(patchMd5));\n  try {\n    if (!patchMd5.equals(SharePatchFileUtil.getMD5(destPatchFile))) {\n      SharePatchFileUtil.copyFileUsingStream(patchFile,destPatchFile);\n      TinkerLog.w(TAG,\"UpgradePatch copy patch file, src file: %s size: %d, dest file: %s size:%d\",patchFile.getAbsolutePath(),patchFile.length(),destPatchFile.getAbsolutePath(),destPatchFile.length());\n    }\n  }\n catch (  IOException e) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:copy patch file fail from %s to %s\",patchFile.getPath(),destPatchFile.getPath());\n    manager.getPatchReporter().onPatchTypeExtractFail(patchFile,destPatchFile,patchFile.getName(),ShareConstants.TYPE_PATCH_FILE);\n    return false;\n  }\n  if (!DexDiffPatchInternal.tryRecoverDexFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch dex failed\");\n    return false;\n  }\n  if (!ArkHotDiffPatchInternal.tryRecoverArkHotLibrary(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    return false;\n  }\n  if (!BsDiffPatchInternal.tryRecoverLibraryFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch library failed\");\n    return false;\n  }\n  if (!ResDiffPatchInternal.tryRecoverResourceFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch resource failed\");\n    return false;\n  }\n  if (!DexDiffPatchInternal.waitAndCheckDexOptFile(patchFile,manager)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, check dex opt file failed\");\n    return false;\n  }\n  if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,newInfo,patchInfoLockFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, rewrite patch info failed\");\n    manager.getPatchReporter().onPatchInfoCorrupted(patchFile,newInfo.oldVersion,newInfo.newVersion);\n    return false;\n  }\n  UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n  TinkerLog.w(TAG,\"UpgradePatch tryPatch: done, it is ok\");\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 651,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7923,
        "startLineNumber" : 44,
        "startColumnNumber" : 4,
        "endLineNumber" : 195,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public boolean tryPatch(Context context,String tempPatchPath,PatchResult patchResult){\n  Tinker manager=Tinker.with(context);\n  final File patchFile=new File(tempPatchPath);\n  if (!manager.isTinkerEnabled() || !ShareTinkerInternals.isTinkerEnableWithSharedPreferences(context)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch is disabled, just return\");\n    return false;\n  }\n  if (!SharePatchFileUtil.isLegalFile(patchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch file is not found, just return\");\n    return false;\n  }\n  ShareSecurityCheck signatureCheck=new ShareSecurityCheck(context);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(context,manager.getTinkerFlags(),patchFile,signatureCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchPackageCheckFail\");\n    manager.getPatchReporter().onPatchPackageCheckFail(patchFile,returnCode);\n    return false;\n  }\n  String patchMd5=SharePatchFileUtil.getMD5(patchFile);\n  if (patchMd5 == null) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch md5 is null, just return\");\n    return false;\n  }\n  patchResult.patchVersion=patchMd5;\n  TinkerLog.i(TAG,\"UpgradePatch tryPatch:patchMd5:%s\",patchMd5);\n  final String patchDirectory=manager.getPatchDirectory().getAbsolutePath();\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectory);\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectory);\n  final Map<String,String> pkgProps=signatureCheck.getPackagePropertiesIfPresent();\n  if (pkgProps == null) {\n    TinkerLog.e(TAG,\"UpgradePatch packageProperties is null, do we process a valid patch apk ?\");\n    return false;\n  }\n  final String isProtectedAppStr=pkgProps.get(ShareConstants.PKGMETA_KEY_IS_PROTECTED_APP);\n  final boolean isProtectedApp=(isProtectedAppStr != null && !isProtectedAppStr.isEmpty() && !\"0\".equals(isProtectedAppStr));\n  SharePatchInfo oldInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  SharePatchInfo newInfo;\n  if (oldInfo != null) {\n    if (oldInfo.oldVersion == null || oldInfo.newVersion == null || oldInfo.oatDir == null) {\n      TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchInfoCorrupted\");\n      manager.getPatchReporter().onPatchInfoCorrupted(patchFile,oldInfo.oldVersion,oldInfo.newVersion);\n      return false;\n    }\n    if (!SharePatchFileUtil.checkIfMd5Valid(patchMd5)) {\n      TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchVersionCheckFail md5 %s is valid\",patchMd5);\n      manager.getPatchReporter().onPatchVersionCheckFail(patchFile,oldInfo,patchMd5);\n      return false;\n    }\n    final boolean usingInterpret=oldInfo.oatDir.equals(ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    if (!usingInterpret && !ShareTinkerInternals.isNullOrNil(oldInfo.newVersion) && oldInfo.newVersion.equals(patchMd5)&& !oldInfo.isRemoveNewVersion) {\n      TinkerLog.e(TAG,\"patch already applied, md5: %s\",patchMd5);\n      UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n      return true;\n    }\n    final String finalOatDir=usingInterpret ? ShareConstants.CHANING_DEX_OPTIMIZE_PATH : oldInfo.oatDir;\n    newInfo=new SharePatchInfo(oldInfo.oldVersion,patchMd5,isProtectedApp,false,Build.FINGERPRINT,finalOatDir);\n  }\n else {\n    newInfo=new SharePatchInfo(\"\",patchMd5,isProtectedApp,false,Build.FINGERPRINT,ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH);\n  }\n  final String patchName=SharePatchFileUtil.getPatchVersionDirectory(patchMd5);\n  final String patchVersionDirectory=patchDirectory + \"/\" + patchName;\n  TinkerLog.i(TAG,\"UpgradePatch tryPatch:patchVersionDirectory:%s\",patchVersionDirectory);\n  File destPatchFile=new File(patchVersionDirectory + \"/\" + SharePatchFileUtil.getPatchVersionFile(patchMd5));\n  try {\n    if (!patchMd5.equals(SharePatchFileUtil.getMD5(destPatchFile))) {\n      SharePatchFileUtil.copyFileUsingStream(patchFile,destPatchFile);\n      TinkerLog.w(TAG,\"UpgradePatch copy patch file, src file: %s size: %d, dest file: %s size:%d\",patchFile.getAbsolutePath(),patchFile.length(),destPatchFile.getAbsolutePath(),destPatchFile.length());\n    }\n  }\n catch (  IOException e) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:copy patch file fail from %s to %s\",patchFile.getPath(),destPatchFile.getPath());\n    manager.getPatchReporter().onPatchTypeExtractFail(patchFile,destPatchFile,patchFile.getName(),ShareConstants.TYPE_PATCH_FILE);\n    return false;\n  }\n  if (!DexDiffPatchInternal.tryRecoverDexFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch dex failed\");\n    return false;\n  }\n  if (!ArkHotDiffPatchInternal.tryRecoverArkHotLibrary(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    return false;\n  }\n  if (!BsDiffPatchInternal.tryRecoverLibraryFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch library failed\");\n    return false;\n  }\n  if (!ResDiffPatchInternal.tryRecoverResourceFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch resource failed\");\n    return false;\n  }\n  if (!DexDiffPatchInternal.waitAndCheckDexOptFile(patchFile,manager)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, check dex opt file failed\");\n    return false;\n  }\n  if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,newInfo,patchInfoLockFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, rewrite patch info failed\");\n    manager.getPatchReporter().onPatchInfoCorrupted(patchFile,newInfo.oldVersion,newInfo.newVersion);\n    return false;\n  }\n  UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n  TinkerLog.w(TAG,\"UpgradePatch tryPatch: done, it is ok\");\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 669,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 164,
        "startColumnNumber" : 12,
        "endLineNumber" : 164,
        "endColumnNumber" : 25
      },
      "nodeContext" : "return false;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "boolean"
  }, {
    "nodeContext" : "false",
    "nodeType" : "BooleanLiteral",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 169,
      "startColumnNumber" : 19,
      "endLineNumber" : 169,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 169,
        "startColumnNumber" : 12,
        "endLineNumber" : 169,
        "endColumnNumber" : 25
      },
      "nodeContext" : "return false;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 136,
        "startLineNumber" : 167,
        "startColumnNumber" : 129,
        "endLineNumber" : 170,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch library failed\");\n  return false;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 257,
        "startLineNumber" : 167,
        "startColumnNumber" : 8,
        "endLineNumber" : 170,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!BsDiffPatchInternal.tryRecoverLibraryFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n  TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch library failed\");\n  return false;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 19,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7821,
        "startLineNumber" : 45,
        "startColumnNumber" : 92,
        "endLineNumber" : 195,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Tinker manager=Tinker.with(context);\n  final File patchFile=new File(tempPatchPath);\n  if (!manager.isTinkerEnabled() || !ShareTinkerInternals.isTinkerEnableWithSharedPreferences(context)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch is disabled, just return\");\n    return false;\n  }\n  if (!SharePatchFileUtil.isLegalFile(patchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch file is not found, just return\");\n    return false;\n  }\n  ShareSecurityCheck signatureCheck=new ShareSecurityCheck(context);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(context,manager.getTinkerFlags(),patchFile,signatureCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchPackageCheckFail\");\n    manager.getPatchReporter().onPatchPackageCheckFail(patchFile,returnCode);\n    return false;\n  }\n  String patchMd5=SharePatchFileUtil.getMD5(patchFile);\n  if (patchMd5 == null) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch md5 is null, just return\");\n    return false;\n  }\n  patchResult.patchVersion=patchMd5;\n  TinkerLog.i(TAG,\"UpgradePatch tryPatch:patchMd5:%s\",patchMd5);\n  final String patchDirectory=manager.getPatchDirectory().getAbsolutePath();\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectory);\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectory);\n  final Map<String,String> pkgProps=signatureCheck.getPackagePropertiesIfPresent();\n  if (pkgProps == null) {\n    TinkerLog.e(TAG,\"UpgradePatch packageProperties is null, do we process a valid patch apk ?\");\n    return false;\n  }\n  final String isProtectedAppStr=pkgProps.get(ShareConstants.PKGMETA_KEY_IS_PROTECTED_APP);\n  final boolean isProtectedApp=(isProtectedAppStr != null && !isProtectedAppStr.isEmpty() && !\"0\".equals(isProtectedAppStr));\n  SharePatchInfo oldInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  SharePatchInfo newInfo;\n  if (oldInfo != null) {\n    if (oldInfo.oldVersion == null || oldInfo.newVersion == null || oldInfo.oatDir == null) {\n      TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchInfoCorrupted\");\n      manager.getPatchReporter().onPatchInfoCorrupted(patchFile,oldInfo.oldVersion,oldInfo.newVersion);\n      return false;\n    }\n    if (!SharePatchFileUtil.checkIfMd5Valid(patchMd5)) {\n      TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchVersionCheckFail md5 %s is valid\",patchMd5);\n      manager.getPatchReporter().onPatchVersionCheckFail(patchFile,oldInfo,patchMd5);\n      return false;\n    }\n    final boolean usingInterpret=oldInfo.oatDir.equals(ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    if (!usingInterpret && !ShareTinkerInternals.isNullOrNil(oldInfo.newVersion) && oldInfo.newVersion.equals(patchMd5)&& !oldInfo.isRemoveNewVersion) {\n      TinkerLog.e(TAG,\"patch already applied, md5: %s\",patchMd5);\n      UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n      return true;\n    }\n    final String finalOatDir=usingInterpret ? ShareConstants.CHANING_DEX_OPTIMIZE_PATH : oldInfo.oatDir;\n    newInfo=new SharePatchInfo(oldInfo.oldVersion,patchMd5,isProtectedApp,false,Build.FINGERPRINT,finalOatDir);\n  }\n else {\n    newInfo=new SharePatchInfo(\"\",patchMd5,isProtectedApp,false,Build.FINGERPRINT,ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH);\n  }\n  final String patchName=SharePatchFileUtil.getPatchVersionDirectory(patchMd5);\n  final String patchVersionDirectory=patchDirectory + \"/\" + patchName;\n  TinkerLog.i(TAG,\"UpgradePatch tryPatch:patchVersionDirectory:%s\",patchVersionDirectory);\n  File destPatchFile=new File(patchVersionDirectory + \"/\" + SharePatchFileUtil.getPatchVersionFile(patchMd5));\n  try {\n    if (!patchMd5.equals(SharePatchFileUtil.getMD5(destPatchFile))) {\n      SharePatchFileUtil.copyFileUsingStream(patchFile,destPatchFile);\n      TinkerLog.w(TAG,\"UpgradePatch copy patch file, src file: %s size: %d, dest file: %s size:%d\",patchFile.getAbsolutePath(),patchFile.length(),destPatchFile.getAbsolutePath(),destPatchFile.length());\n    }\n  }\n catch (  IOException e) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:copy patch file fail from %s to %s\",patchFile.getPath(),destPatchFile.getPath());\n    manager.getPatchReporter().onPatchTypeExtractFail(patchFile,destPatchFile,patchFile.getName(),ShareConstants.TYPE_PATCH_FILE);\n    return false;\n  }\n  if (!DexDiffPatchInternal.tryRecoverDexFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch dex failed\");\n    return false;\n  }\n  if (!ArkHotDiffPatchInternal.tryRecoverArkHotLibrary(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    return false;\n  }\n  if (!BsDiffPatchInternal.tryRecoverLibraryFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch library failed\");\n    return false;\n  }\n  if (!ResDiffPatchInternal.tryRecoverResourceFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch resource failed\");\n    return false;\n  }\n  if (!DexDiffPatchInternal.waitAndCheckDexOptFile(patchFile,manager)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, check dex opt file failed\");\n    return false;\n  }\n  if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,newInfo,patchInfoLockFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, rewrite patch info failed\");\n    manager.getPatchReporter().onPatchInfoCorrupted(patchFile,newInfo.oldVersion,newInfo.newVersion);\n    return false;\n  }\n  UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n  TinkerLog.w(TAG,\"UpgradePatch tryPatch: done, it is ok\");\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 651,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7923,
        "startLineNumber" : 44,
        "startColumnNumber" : 4,
        "endLineNumber" : 195,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public boolean tryPatch(Context context,String tempPatchPath,PatchResult patchResult){\n  Tinker manager=Tinker.with(context);\n  final File patchFile=new File(tempPatchPath);\n  if (!manager.isTinkerEnabled() || !ShareTinkerInternals.isTinkerEnableWithSharedPreferences(context)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch is disabled, just return\");\n    return false;\n  }\n  if (!SharePatchFileUtil.isLegalFile(patchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch file is not found, just return\");\n    return false;\n  }\n  ShareSecurityCheck signatureCheck=new ShareSecurityCheck(context);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(context,manager.getTinkerFlags(),patchFile,signatureCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchPackageCheckFail\");\n    manager.getPatchReporter().onPatchPackageCheckFail(patchFile,returnCode);\n    return false;\n  }\n  String patchMd5=SharePatchFileUtil.getMD5(patchFile);\n  if (patchMd5 == null) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch md5 is null, just return\");\n    return false;\n  }\n  patchResult.patchVersion=patchMd5;\n  TinkerLog.i(TAG,\"UpgradePatch tryPatch:patchMd5:%s\",patchMd5);\n  final String patchDirectory=manager.getPatchDirectory().getAbsolutePath();\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectory);\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectory);\n  final Map<String,String> pkgProps=signatureCheck.getPackagePropertiesIfPresent();\n  if (pkgProps == null) {\n    TinkerLog.e(TAG,\"UpgradePatch packageProperties is null, do we process a valid patch apk ?\");\n    return false;\n  }\n  final String isProtectedAppStr=pkgProps.get(ShareConstants.PKGMETA_KEY_IS_PROTECTED_APP);\n  final boolean isProtectedApp=(isProtectedAppStr != null && !isProtectedAppStr.isEmpty() && !\"0\".equals(isProtectedAppStr));\n  SharePatchInfo oldInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  SharePatchInfo newInfo;\n  if (oldInfo != null) {\n    if (oldInfo.oldVersion == null || oldInfo.newVersion == null || oldInfo.oatDir == null) {\n      TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchInfoCorrupted\");\n      manager.getPatchReporter().onPatchInfoCorrupted(patchFile,oldInfo.oldVersion,oldInfo.newVersion);\n      return false;\n    }\n    if (!SharePatchFileUtil.checkIfMd5Valid(patchMd5)) {\n      TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchVersionCheckFail md5 %s is valid\",patchMd5);\n      manager.getPatchReporter().onPatchVersionCheckFail(patchFile,oldInfo,patchMd5);\n      return false;\n    }\n    final boolean usingInterpret=oldInfo.oatDir.equals(ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    if (!usingInterpret && !ShareTinkerInternals.isNullOrNil(oldInfo.newVersion) && oldInfo.newVersion.equals(patchMd5)&& !oldInfo.isRemoveNewVersion) {\n      TinkerLog.e(TAG,\"patch already applied, md5: %s\",patchMd5);\n      UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n      return true;\n    }\n    final String finalOatDir=usingInterpret ? ShareConstants.CHANING_DEX_OPTIMIZE_PATH : oldInfo.oatDir;\n    newInfo=new SharePatchInfo(oldInfo.oldVersion,patchMd5,isProtectedApp,false,Build.FINGERPRINT,finalOatDir);\n  }\n else {\n    newInfo=new SharePatchInfo(\"\",patchMd5,isProtectedApp,false,Build.FINGERPRINT,ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH);\n  }\n  final String patchName=SharePatchFileUtil.getPatchVersionDirectory(patchMd5);\n  final String patchVersionDirectory=patchDirectory + \"/\" + patchName;\n  TinkerLog.i(TAG,\"UpgradePatch tryPatch:patchVersionDirectory:%s\",patchVersionDirectory);\n  File destPatchFile=new File(patchVersionDirectory + \"/\" + SharePatchFileUtil.getPatchVersionFile(patchMd5));\n  try {\n    if (!patchMd5.equals(SharePatchFileUtil.getMD5(destPatchFile))) {\n      SharePatchFileUtil.copyFileUsingStream(patchFile,destPatchFile);\n      TinkerLog.w(TAG,\"UpgradePatch copy patch file, src file: %s size: %d, dest file: %s size:%d\",patchFile.getAbsolutePath(),patchFile.length(),destPatchFile.getAbsolutePath(),destPatchFile.length());\n    }\n  }\n catch (  IOException e) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:copy patch file fail from %s to %s\",patchFile.getPath(),destPatchFile.getPath());\n    manager.getPatchReporter().onPatchTypeExtractFail(patchFile,destPatchFile,patchFile.getName(),ShareConstants.TYPE_PATCH_FILE);\n    return false;\n  }\n  if (!DexDiffPatchInternal.tryRecoverDexFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch dex failed\");\n    return false;\n  }\n  if (!ArkHotDiffPatchInternal.tryRecoverArkHotLibrary(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    return false;\n  }\n  if (!BsDiffPatchInternal.tryRecoverLibraryFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch library failed\");\n    return false;\n  }\n  if (!ResDiffPatchInternal.tryRecoverResourceFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch resource failed\");\n    return false;\n  }\n  if (!DexDiffPatchInternal.waitAndCheckDexOptFile(patchFile,manager)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, check dex opt file failed\");\n    return false;\n  }\n  if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,newInfo,patchInfoLockFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, rewrite patch info failed\");\n    manager.getPatchReporter().onPatchInfoCorrupted(patchFile,newInfo.oldVersion,newInfo.newVersion);\n    return false;\n  }\n  UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n  TinkerLog.w(TAG,\"UpgradePatch tryPatch: done, it is ok\");\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 669,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 169,
        "startColumnNumber" : 12,
        "endLineNumber" : 169,
        "endColumnNumber" : 25
      },
      "nodeContext" : "return false;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "boolean"
  }, {
    "nodeContext" : "false",
    "nodeType" : "BooleanLiteral",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 174,
      "startColumnNumber" : 19,
      "endLineNumber" : 174,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 174,
        "startColumnNumber" : 12,
        "endLineNumber" : 174,
        "endColumnNumber" : 25
      },
      "nodeContext" : "return false;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 137,
        "startLineNumber" : 172,
        "startColumnNumber" : 131,
        "endLineNumber" : 175,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch resource failed\");\n  return false;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 260,
        "startLineNumber" : 172,
        "startColumnNumber" : 8,
        "endLineNumber" : 175,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!ResDiffPatchInternal.tryRecoverResourceFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n  TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch resource failed\");\n  return false;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 19,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7821,
        "startLineNumber" : 45,
        "startColumnNumber" : 92,
        "endLineNumber" : 195,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Tinker manager=Tinker.with(context);\n  final File patchFile=new File(tempPatchPath);\n  if (!manager.isTinkerEnabled() || !ShareTinkerInternals.isTinkerEnableWithSharedPreferences(context)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch is disabled, just return\");\n    return false;\n  }\n  if (!SharePatchFileUtil.isLegalFile(patchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch file is not found, just return\");\n    return false;\n  }\n  ShareSecurityCheck signatureCheck=new ShareSecurityCheck(context);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(context,manager.getTinkerFlags(),patchFile,signatureCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchPackageCheckFail\");\n    manager.getPatchReporter().onPatchPackageCheckFail(patchFile,returnCode);\n    return false;\n  }\n  String patchMd5=SharePatchFileUtil.getMD5(patchFile);\n  if (patchMd5 == null) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch md5 is null, just return\");\n    return false;\n  }\n  patchResult.patchVersion=patchMd5;\n  TinkerLog.i(TAG,\"UpgradePatch tryPatch:patchMd5:%s\",patchMd5);\n  final String patchDirectory=manager.getPatchDirectory().getAbsolutePath();\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectory);\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectory);\n  final Map<String,String> pkgProps=signatureCheck.getPackagePropertiesIfPresent();\n  if (pkgProps == null) {\n    TinkerLog.e(TAG,\"UpgradePatch packageProperties is null, do we process a valid patch apk ?\");\n    return false;\n  }\n  final String isProtectedAppStr=pkgProps.get(ShareConstants.PKGMETA_KEY_IS_PROTECTED_APP);\n  final boolean isProtectedApp=(isProtectedAppStr != null && !isProtectedAppStr.isEmpty() && !\"0\".equals(isProtectedAppStr));\n  SharePatchInfo oldInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  SharePatchInfo newInfo;\n  if (oldInfo != null) {\n    if (oldInfo.oldVersion == null || oldInfo.newVersion == null || oldInfo.oatDir == null) {\n      TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchInfoCorrupted\");\n      manager.getPatchReporter().onPatchInfoCorrupted(patchFile,oldInfo.oldVersion,oldInfo.newVersion);\n      return false;\n    }\n    if (!SharePatchFileUtil.checkIfMd5Valid(patchMd5)) {\n      TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchVersionCheckFail md5 %s is valid\",patchMd5);\n      manager.getPatchReporter().onPatchVersionCheckFail(patchFile,oldInfo,patchMd5);\n      return false;\n    }\n    final boolean usingInterpret=oldInfo.oatDir.equals(ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    if (!usingInterpret && !ShareTinkerInternals.isNullOrNil(oldInfo.newVersion) && oldInfo.newVersion.equals(patchMd5)&& !oldInfo.isRemoveNewVersion) {\n      TinkerLog.e(TAG,\"patch already applied, md5: %s\",patchMd5);\n      UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n      return true;\n    }\n    final String finalOatDir=usingInterpret ? ShareConstants.CHANING_DEX_OPTIMIZE_PATH : oldInfo.oatDir;\n    newInfo=new SharePatchInfo(oldInfo.oldVersion,patchMd5,isProtectedApp,false,Build.FINGERPRINT,finalOatDir);\n  }\n else {\n    newInfo=new SharePatchInfo(\"\",patchMd5,isProtectedApp,false,Build.FINGERPRINT,ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH);\n  }\n  final String patchName=SharePatchFileUtil.getPatchVersionDirectory(patchMd5);\n  final String patchVersionDirectory=patchDirectory + \"/\" + patchName;\n  TinkerLog.i(TAG,\"UpgradePatch tryPatch:patchVersionDirectory:%s\",patchVersionDirectory);\n  File destPatchFile=new File(patchVersionDirectory + \"/\" + SharePatchFileUtil.getPatchVersionFile(patchMd5));\n  try {\n    if (!patchMd5.equals(SharePatchFileUtil.getMD5(destPatchFile))) {\n      SharePatchFileUtil.copyFileUsingStream(patchFile,destPatchFile);\n      TinkerLog.w(TAG,\"UpgradePatch copy patch file, src file: %s size: %d, dest file: %s size:%d\",patchFile.getAbsolutePath(),patchFile.length(),destPatchFile.getAbsolutePath(),destPatchFile.length());\n    }\n  }\n catch (  IOException e) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:copy patch file fail from %s to %s\",patchFile.getPath(),destPatchFile.getPath());\n    manager.getPatchReporter().onPatchTypeExtractFail(patchFile,destPatchFile,patchFile.getName(),ShareConstants.TYPE_PATCH_FILE);\n    return false;\n  }\n  if (!DexDiffPatchInternal.tryRecoverDexFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch dex failed\");\n    return false;\n  }\n  if (!ArkHotDiffPatchInternal.tryRecoverArkHotLibrary(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    return false;\n  }\n  if (!BsDiffPatchInternal.tryRecoverLibraryFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch library failed\");\n    return false;\n  }\n  if (!ResDiffPatchInternal.tryRecoverResourceFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch resource failed\");\n    return false;\n  }\n  if (!DexDiffPatchInternal.waitAndCheckDexOptFile(patchFile,manager)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, check dex opt file failed\");\n    return false;\n  }\n  if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,newInfo,patchInfoLockFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, rewrite patch info failed\");\n    manager.getPatchReporter().onPatchInfoCorrupted(patchFile,newInfo.oldVersion,newInfo.newVersion);\n    return false;\n  }\n  UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n  TinkerLog.w(TAG,\"UpgradePatch tryPatch: done, it is ok\");\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 651,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7923,
        "startLineNumber" : 44,
        "startColumnNumber" : 4,
        "endLineNumber" : 195,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public boolean tryPatch(Context context,String tempPatchPath,PatchResult patchResult){\n  Tinker manager=Tinker.with(context);\n  final File patchFile=new File(tempPatchPath);\n  if (!manager.isTinkerEnabled() || !ShareTinkerInternals.isTinkerEnableWithSharedPreferences(context)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch is disabled, just return\");\n    return false;\n  }\n  if (!SharePatchFileUtil.isLegalFile(patchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch file is not found, just return\");\n    return false;\n  }\n  ShareSecurityCheck signatureCheck=new ShareSecurityCheck(context);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(context,manager.getTinkerFlags(),patchFile,signatureCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchPackageCheckFail\");\n    manager.getPatchReporter().onPatchPackageCheckFail(patchFile,returnCode);\n    return false;\n  }\n  String patchMd5=SharePatchFileUtil.getMD5(patchFile);\n  if (patchMd5 == null) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch md5 is null, just return\");\n    return false;\n  }\n  patchResult.patchVersion=patchMd5;\n  TinkerLog.i(TAG,\"UpgradePatch tryPatch:patchMd5:%s\",patchMd5);\n  final String patchDirectory=manager.getPatchDirectory().getAbsolutePath();\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectory);\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectory);\n  final Map<String,String> pkgProps=signatureCheck.getPackagePropertiesIfPresent();\n  if (pkgProps == null) {\n    TinkerLog.e(TAG,\"UpgradePatch packageProperties is null, do we process a valid patch apk ?\");\n    return false;\n  }\n  final String isProtectedAppStr=pkgProps.get(ShareConstants.PKGMETA_KEY_IS_PROTECTED_APP);\n  final boolean isProtectedApp=(isProtectedAppStr != null && !isProtectedAppStr.isEmpty() && !\"0\".equals(isProtectedAppStr));\n  SharePatchInfo oldInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  SharePatchInfo newInfo;\n  if (oldInfo != null) {\n    if (oldInfo.oldVersion == null || oldInfo.newVersion == null || oldInfo.oatDir == null) {\n      TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchInfoCorrupted\");\n      manager.getPatchReporter().onPatchInfoCorrupted(patchFile,oldInfo.oldVersion,oldInfo.newVersion);\n      return false;\n    }\n    if (!SharePatchFileUtil.checkIfMd5Valid(patchMd5)) {\n      TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchVersionCheckFail md5 %s is valid\",patchMd5);\n      manager.getPatchReporter().onPatchVersionCheckFail(patchFile,oldInfo,patchMd5);\n      return false;\n    }\n    final boolean usingInterpret=oldInfo.oatDir.equals(ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    if (!usingInterpret && !ShareTinkerInternals.isNullOrNil(oldInfo.newVersion) && oldInfo.newVersion.equals(patchMd5)&& !oldInfo.isRemoveNewVersion) {\n      TinkerLog.e(TAG,\"patch already applied, md5: %s\",patchMd5);\n      UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n      return true;\n    }\n    final String finalOatDir=usingInterpret ? ShareConstants.CHANING_DEX_OPTIMIZE_PATH : oldInfo.oatDir;\n    newInfo=new SharePatchInfo(oldInfo.oldVersion,patchMd5,isProtectedApp,false,Build.FINGERPRINT,finalOatDir);\n  }\n else {\n    newInfo=new SharePatchInfo(\"\",patchMd5,isProtectedApp,false,Build.FINGERPRINT,ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH);\n  }\n  final String patchName=SharePatchFileUtil.getPatchVersionDirectory(patchMd5);\n  final String patchVersionDirectory=patchDirectory + \"/\" + patchName;\n  TinkerLog.i(TAG,\"UpgradePatch tryPatch:patchVersionDirectory:%s\",patchVersionDirectory);\n  File destPatchFile=new File(patchVersionDirectory + \"/\" + SharePatchFileUtil.getPatchVersionFile(patchMd5));\n  try {\n    if (!patchMd5.equals(SharePatchFileUtil.getMD5(destPatchFile))) {\n      SharePatchFileUtil.copyFileUsingStream(patchFile,destPatchFile);\n      TinkerLog.w(TAG,\"UpgradePatch copy patch file, src file: %s size: %d, dest file: %s size:%d\",patchFile.getAbsolutePath(),patchFile.length(),destPatchFile.getAbsolutePath(),destPatchFile.length());\n    }\n  }\n catch (  IOException e) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:copy patch file fail from %s to %s\",patchFile.getPath(),destPatchFile.getPath());\n    manager.getPatchReporter().onPatchTypeExtractFail(patchFile,destPatchFile,patchFile.getName(),ShareConstants.TYPE_PATCH_FILE);\n    return false;\n  }\n  if (!DexDiffPatchInternal.tryRecoverDexFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch dex failed\");\n    return false;\n  }\n  if (!ArkHotDiffPatchInternal.tryRecoverArkHotLibrary(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    return false;\n  }\n  if (!BsDiffPatchInternal.tryRecoverLibraryFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch library failed\");\n    return false;\n  }\n  if (!ResDiffPatchInternal.tryRecoverResourceFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch resource failed\");\n    return false;\n  }\n  if (!DexDiffPatchInternal.waitAndCheckDexOptFile(patchFile,manager)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, check dex opt file failed\");\n    return false;\n  }\n  if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,newInfo,patchInfoLockFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, rewrite patch info failed\");\n    manager.getPatchReporter().onPatchInfoCorrupted(patchFile,newInfo.oldVersion,newInfo.newVersion);\n    return false;\n  }\n  UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n  TinkerLog.w(TAG,\"UpgradePatch tryPatch: done, it is ok\");\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 669,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 174,
        "startColumnNumber" : 12,
        "endLineNumber" : 174,
        "endColumnNumber" : 25
      },
      "nodeContext" : "return false;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "boolean"
  }, {
    "nodeContext" : "false",
    "nodeType" : "BooleanLiteral",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 180,
      "startColumnNumber" : 19,
      "endLineNumber" : 180,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 180,
        "startColumnNumber" : 12,
        "endLineNumber" : 180,
        "endColumnNumber" : 25
      },
      "nodeContext" : "return false;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 137,
        "startLineNumber" : 178,
        "startColumnNumber" : 78,
        "endLineNumber" : 181,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, check dex opt file failed\");\n  return false;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 207,
        "startLineNumber" : 178,
        "startColumnNumber" : 8,
        "endLineNumber" : 181,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!DexDiffPatchInternal.waitAndCheckDexOptFile(patchFile,manager)) {\n  TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, check dex opt file failed\");\n  return false;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7821,
        "startLineNumber" : 45,
        "startColumnNumber" : 92,
        "endLineNumber" : 195,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Tinker manager=Tinker.with(context);\n  final File patchFile=new File(tempPatchPath);\n  if (!manager.isTinkerEnabled() || !ShareTinkerInternals.isTinkerEnableWithSharedPreferences(context)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch is disabled, just return\");\n    return false;\n  }\n  if (!SharePatchFileUtil.isLegalFile(patchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch file is not found, just return\");\n    return false;\n  }\n  ShareSecurityCheck signatureCheck=new ShareSecurityCheck(context);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(context,manager.getTinkerFlags(),patchFile,signatureCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchPackageCheckFail\");\n    manager.getPatchReporter().onPatchPackageCheckFail(patchFile,returnCode);\n    return false;\n  }\n  String patchMd5=SharePatchFileUtil.getMD5(patchFile);\n  if (patchMd5 == null) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch md5 is null, just return\");\n    return false;\n  }\n  patchResult.patchVersion=patchMd5;\n  TinkerLog.i(TAG,\"UpgradePatch tryPatch:patchMd5:%s\",patchMd5);\n  final String patchDirectory=manager.getPatchDirectory().getAbsolutePath();\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectory);\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectory);\n  final Map<String,String> pkgProps=signatureCheck.getPackagePropertiesIfPresent();\n  if (pkgProps == null) {\n    TinkerLog.e(TAG,\"UpgradePatch packageProperties is null, do we process a valid patch apk ?\");\n    return false;\n  }\n  final String isProtectedAppStr=pkgProps.get(ShareConstants.PKGMETA_KEY_IS_PROTECTED_APP);\n  final boolean isProtectedApp=(isProtectedAppStr != null && !isProtectedAppStr.isEmpty() && !\"0\".equals(isProtectedAppStr));\n  SharePatchInfo oldInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  SharePatchInfo newInfo;\n  if (oldInfo != null) {\n    if (oldInfo.oldVersion == null || oldInfo.newVersion == null || oldInfo.oatDir == null) {\n      TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchInfoCorrupted\");\n      manager.getPatchReporter().onPatchInfoCorrupted(patchFile,oldInfo.oldVersion,oldInfo.newVersion);\n      return false;\n    }\n    if (!SharePatchFileUtil.checkIfMd5Valid(patchMd5)) {\n      TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchVersionCheckFail md5 %s is valid\",patchMd5);\n      manager.getPatchReporter().onPatchVersionCheckFail(patchFile,oldInfo,patchMd5);\n      return false;\n    }\n    final boolean usingInterpret=oldInfo.oatDir.equals(ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    if (!usingInterpret && !ShareTinkerInternals.isNullOrNil(oldInfo.newVersion) && oldInfo.newVersion.equals(patchMd5)&& !oldInfo.isRemoveNewVersion) {\n      TinkerLog.e(TAG,\"patch already applied, md5: %s\",patchMd5);\n      UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n      return true;\n    }\n    final String finalOatDir=usingInterpret ? ShareConstants.CHANING_DEX_OPTIMIZE_PATH : oldInfo.oatDir;\n    newInfo=new SharePatchInfo(oldInfo.oldVersion,patchMd5,isProtectedApp,false,Build.FINGERPRINT,finalOatDir);\n  }\n else {\n    newInfo=new SharePatchInfo(\"\",patchMd5,isProtectedApp,false,Build.FINGERPRINT,ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH);\n  }\n  final String patchName=SharePatchFileUtil.getPatchVersionDirectory(patchMd5);\n  final String patchVersionDirectory=patchDirectory + \"/\" + patchName;\n  TinkerLog.i(TAG,\"UpgradePatch tryPatch:patchVersionDirectory:%s\",patchVersionDirectory);\n  File destPatchFile=new File(patchVersionDirectory + \"/\" + SharePatchFileUtil.getPatchVersionFile(patchMd5));\n  try {\n    if (!patchMd5.equals(SharePatchFileUtil.getMD5(destPatchFile))) {\n      SharePatchFileUtil.copyFileUsingStream(patchFile,destPatchFile);\n      TinkerLog.w(TAG,\"UpgradePatch copy patch file, src file: %s size: %d, dest file: %s size:%d\",patchFile.getAbsolutePath(),patchFile.length(),destPatchFile.getAbsolutePath(),destPatchFile.length());\n    }\n  }\n catch (  IOException e) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:copy patch file fail from %s to %s\",patchFile.getPath(),destPatchFile.getPath());\n    manager.getPatchReporter().onPatchTypeExtractFail(patchFile,destPatchFile,patchFile.getName(),ShareConstants.TYPE_PATCH_FILE);\n    return false;\n  }\n  if (!DexDiffPatchInternal.tryRecoverDexFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch dex failed\");\n    return false;\n  }\n  if (!ArkHotDiffPatchInternal.tryRecoverArkHotLibrary(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    return false;\n  }\n  if (!BsDiffPatchInternal.tryRecoverLibraryFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch library failed\");\n    return false;\n  }\n  if (!ResDiffPatchInternal.tryRecoverResourceFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch resource failed\");\n    return false;\n  }\n  if (!DexDiffPatchInternal.waitAndCheckDexOptFile(patchFile,manager)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, check dex opt file failed\");\n    return false;\n  }\n  if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,newInfo,patchInfoLockFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, rewrite patch info failed\");\n    manager.getPatchReporter().onPatchInfoCorrupted(patchFile,newInfo.oldVersion,newInfo.newVersion);\n    return false;\n  }\n  UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n  TinkerLog.w(TAG,\"UpgradePatch tryPatch: done, it is ok\");\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 651,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7923,
        "startLineNumber" : 44,
        "startColumnNumber" : 4,
        "endLineNumber" : 195,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public boolean tryPatch(Context context,String tempPatchPath,PatchResult patchResult){\n  Tinker manager=Tinker.with(context);\n  final File patchFile=new File(tempPatchPath);\n  if (!manager.isTinkerEnabled() || !ShareTinkerInternals.isTinkerEnableWithSharedPreferences(context)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch is disabled, just return\");\n    return false;\n  }\n  if (!SharePatchFileUtil.isLegalFile(patchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch file is not found, just return\");\n    return false;\n  }\n  ShareSecurityCheck signatureCheck=new ShareSecurityCheck(context);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(context,manager.getTinkerFlags(),patchFile,signatureCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchPackageCheckFail\");\n    manager.getPatchReporter().onPatchPackageCheckFail(patchFile,returnCode);\n    return false;\n  }\n  String patchMd5=SharePatchFileUtil.getMD5(patchFile);\n  if (patchMd5 == null) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch md5 is null, just return\");\n    return false;\n  }\n  patchResult.patchVersion=patchMd5;\n  TinkerLog.i(TAG,\"UpgradePatch tryPatch:patchMd5:%s\",patchMd5);\n  final String patchDirectory=manager.getPatchDirectory().getAbsolutePath();\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectory);\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectory);\n  final Map<String,String> pkgProps=signatureCheck.getPackagePropertiesIfPresent();\n  if (pkgProps == null) {\n    TinkerLog.e(TAG,\"UpgradePatch packageProperties is null, do we process a valid patch apk ?\");\n    return false;\n  }\n  final String isProtectedAppStr=pkgProps.get(ShareConstants.PKGMETA_KEY_IS_PROTECTED_APP);\n  final boolean isProtectedApp=(isProtectedAppStr != null && !isProtectedAppStr.isEmpty() && !\"0\".equals(isProtectedAppStr));\n  SharePatchInfo oldInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  SharePatchInfo newInfo;\n  if (oldInfo != null) {\n    if (oldInfo.oldVersion == null || oldInfo.newVersion == null || oldInfo.oatDir == null) {\n      TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchInfoCorrupted\");\n      manager.getPatchReporter().onPatchInfoCorrupted(patchFile,oldInfo.oldVersion,oldInfo.newVersion);\n      return false;\n    }\n    if (!SharePatchFileUtil.checkIfMd5Valid(patchMd5)) {\n      TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchVersionCheckFail md5 %s is valid\",patchMd5);\n      manager.getPatchReporter().onPatchVersionCheckFail(patchFile,oldInfo,patchMd5);\n      return false;\n    }\n    final boolean usingInterpret=oldInfo.oatDir.equals(ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    if (!usingInterpret && !ShareTinkerInternals.isNullOrNil(oldInfo.newVersion) && oldInfo.newVersion.equals(patchMd5)&& !oldInfo.isRemoveNewVersion) {\n      TinkerLog.e(TAG,\"patch already applied, md5: %s\",patchMd5);\n      UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n      return true;\n    }\n    final String finalOatDir=usingInterpret ? ShareConstants.CHANING_DEX_OPTIMIZE_PATH : oldInfo.oatDir;\n    newInfo=new SharePatchInfo(oldInfo.oldVersion,patchMd5,isProtectedApp,false,Build.FINGERPRINT,finalOatDir);\n  }\n else {\n    newInfo=new SharePatchInfo(\"\",patchMd5,isProtectedApp,false,Build.FINGERPRINT,ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH);\n  }\n  final String patchName=SharePatchFileUtil.getPatchVersionDirectory(patchMd5);\n  final String patchVersionDirectory=patchDirectory + \"/\" + patchName;\n  TinkerLog.i(TAG,\"UpgradePatch tryPatch:patchVersionDirectory:%s\",patchVersionDirectory);\n  File destPatchFile=new File(patchVersionDirectory + \"/\" + SharePatchFileUtil.getPatchVersionFile(patchMd5));\n  try {\n    if (!patchMd5.equals(SharePatchFileUtil.getMD5(destPatchFile))) {\n      SharePatchFileUtil.copyFileUsingStream(patchFile,destPatchFile);\n      TinkerLog.w(TAG,\"UpgradePatch copy patch file, src file: %s size: %d, dest file: %s size:%d\",patchFile.getAbsolutePath(),patchFile.length(),destPatchFile.getAbsolutePath(),destPatchFile.length());\n    }\n  }\n catch (  IOException e) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:copy patch file fail from %s to %s\",patchFile.getPath(),destPatchFile.getPath());\n    manager.getPatchReporter().onPatchTypeExtractFail(patchFile,destPatchFile,patchFile.getName(),ShareConstants.TYPE_PATCH_FILE);\n    return false;\n  }\n  if (!DexDiffPatchInternal.tryRecoverDexFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch dex failed\");\n    return false;\n  }\n  if (!ArkHotDiffPatchInternal.tryRecoverArkHotLibrary(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    return false;\n  }\n  if (!BsDiffPatchInternal.tryRecoverLibraryFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch library failed\");\n    return false;\n  }\n  if (!ResDiffPatchInternal.tryRecoverResourceFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch resource failed\");\n    return false;\n  }\n  if (!DexDiffPatchInternal.waitAndCheckDexOptFile(patchFile,manager)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, check dex opt file failed\");\n    return false;\n  }\n  if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,newInfo,patchInfoLockFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, rewrite patch info failed\");\n    manager.getPatchReporter().onPatchInfoCorrupted(patchFile,newInfo.oldVersion,newInfo.newVersion);\n    return false;\n  }\n  UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n  TinkerLog.w(TAG,\"UpgradePatch tryPatch: done, it is ok\");\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 669,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 180,
        "startColumnNumber" : 12,
        "endLineNumber" : 180,
        "endColumnNumber" : 25
      },
      "nodeContext" : "return false;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "boolean"
  }, {
    "nodeContext" : "false",
    "nodeType" : "BooleanLiteral",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 186,
      "startColumnNumber" : 19,
      "endLineNumber" : 186,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 186,
        "startColumnNumber" : 12,
        "endLineNumber" : 186,
        "endColumnNumber" : 25
      },
      "nodeContext" : "return false;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 249,
        "startLineNumber" : 183,
        "startColumnNumber" : 101,
        "endLineNumber" : 187,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, rewrite patch info failed\");\n  manager.getPatchReporter().onPatchInfoCorrupted(patchFile,newInfo.oldVersion,newInfo.newVersion);\n  return false;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 22,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 342,
        "startLineNumber" : 183,
        "startColumnNumber" : 8,
        "endLineNumber" : 187,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,newInfo,patchInfoLockFile)) {\n  TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, rewrite patch info failed\");\n  manager.getPatchReporter().onPatchInfoCorrupted(patchFile,newInfo.oldVersion,newInfo.newVersion);\n  return false;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 30,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7821,
        "startLineNumber" : 45,
        "startColumnNumber" : 92,
        "endLineNumber" : 195,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Tinker manager=Tinker.with(context);\n  final File patchFile=new File(tempPatchPath);\n  if (!manager.isTinkerEnabled() || !ShareTinkerInternals.isTinkerEnableWithSharedPreferences(context)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch is disabled, just return\");\n    return false;\n  }\n  if (!SharePatchFileUtil.isLegalFile(patchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch file is not found, just return\");\n    return false;\n  }\n  ShareSecurityCheck signatureCheck=new ShareSecurityCheck(context);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(context,manager.getTinkerFlags(),patchFile,signatureCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchPackageCheckFail\");\n    manager.getPatchReporter().onPatchPackageCheckFail(patchFile,returnCode);\n    return false;\n  }\n  String patchMd5=SharePatchFileUtil.getMD5(patchFile);\n  if (patchMd5 == null) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch md5 is null, just return\");\n    return false;\n  }\n  patchResult.patchVersion=patchMd5;\n  TinkerLog.i(TAG,\"UpgradePatch tryPatch:patchMd5:%s\",patchMd5);\n  final String patchDirectory=manager.getPatchDirectory().getAbsolutePath();\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectory);\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectory);\n  final Map<String,String> pkgProps=signatureCheck.getPackagePropertiesIfPresent();\n  if (pkgProps == null) {\n    TinkerLog.e(TAG,\"UpgradePatch packageProperties is null, do we process a valid patch apk ?\");\n    return false;\n  }\n  final String isProtectedAppStr=pkgProps.get(ShareConstants.PKGMETA_KEY_IS_PROTECTED_APP);\n  final boolean isProtectedApp=(isProtectedAppStr != null && !isProtectedAppStr.isEmpty() && !\"0\".equals(isProtectedAppStr));\n  SharePatchInfo oldInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  SharePatchInfo newInfo;\n  if (oldInfo != null) {\n    if (oldInfo.oldVersion == null || oldInfo.newVersion == null || oldInfo.oatDir == null) {\n      TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchInfoCorrupted\");\n      manager.getPatchReporter().onPatchInfoCorrupted(patchFile,oldInfo.oldVersion,oldInfo.newVersion);\n      return false;\n    }\n    if (!SharePatchFileUtil.checkIfMd5Valid(patchMd5)) {\n      TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchVersionCheckFail md5 %s is valid\",patchMd5);\n      manager.getPatchReporter().onPatchVersionCheckFail(patchFile,oldInfo,patchMd5);\n      return false;\n    }\n    final boolean usingInterpret=oldInfo.oatDir.equals(ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    if (!usingInterpret && !ShareTinkerInternals.isNullOrNil(oldInfo.newVersion) && oldInfo.newVersion.equals(patchMd5)&& !oldInfo.isRemoveNewVersion) {\n      TinkerLog.e(TAG,\"patch already applied, md5: %s\",patchMd5);\n      UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n      return true;\n    }\n    final String finalOatDir=usingInterpret ? ShareConstants.CHANING_DEX_OPTIMIZE_PATH : oldInfo.oatDir;\n    newInfo=new SharePatchInfo(oldInfo.oldVersion,patchMd5,isProtectedApp,false,Build.FINGERPRINT,finalOatDir);\n  }\n else {\n    newInfo=new SharePatchInfo(\"\",patchMd5,isProtectedApp,false,Build.FINGERPRINT,ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH);\n  }\n  final String patchName=SharePatchFileUtil.getPatchVersionDirectory(patchMd5);\n  final String patchVersionDirectory=patchDirectory + \"/\" + patchName;\n  TinkerLog.i(TAG,\"UpgradePatch tryPatch:patchVersionDirectory:%s\",patchVersionDirectory);\n  File destPatchFile=new File(patchVersionDirectory + \"/\" + SharePatchFileUtil.getPatchVersionFile(patchMd5));\n  try {\n    if (!patchMd5.equals(SharePatchFileUtil.getMD5(destPatchFile))) {\n      SharePatchFileUtil.copyFileUsingStream(patchFile,destPatchFile);\n      TinkerLog.w(TAG,\"UpgradePatch copy patch file, src file: %s size: %d, dest file: %s size:%d\",patchFile.getAbsolutePath(),patchFile.length(),destPatchFile.getAbsolutePath(),destPatchFile.length());\n    }\n  }\n catch (  IOException e) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:copy patch file fail from %s to %s\",patchFile.getPath(),destPatchFile.getPath());\n    manager.getPatchReporter().onPatchTypeExtractFail(patchFile,destPatchFile,patchFile.getName(),ShareConstants.TYPE_PATCH_FILE);\n    return false;\n  }\n  if (!DexDiffPatchInternal.tryRecoverDexFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch dex failed\");\n    return false;\n  }\n  if (!ArkHotDiffPatchInternal.tryRecoverArkHotLibrary(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    return false;\n  }\n  if (!BsDiffPatchInternal.tryRecoverLibraryFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch library failed\");\n    return false;\n  }\n  if (!ResDiffPatchInternal.tryRecoverResourceFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch resource failed\");\n    return false;\n  }\n  if (!DexDiffPatchInternal.waitAndCheckDexOptFile(patchFile,manager)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, check dex opt file failed\");\n    return false;\n  }\n  if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,newInfo,patchInfoLockFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, rewrite patch info failed\");\n    manager.getPatchReporter().onPatchInfoCorrupted(patchFile,newInfo.oldVersion,newInfo.newVersion);\n    return false;\n  }\n  UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n  TinkerLog.w(TAG,\"UpgradePatch tryPatch: done, it is ok\");\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 651,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7923,
        "startLineNumber" : 44,
        "startColumnNumber" : 4,
        "endLineNumber" : 195,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public boolean tryPatch(Context context,String tempPatchPath,PatchResult patchResult){\n  Tinker manager=Tinker.with(context);\n  final File patchFile=new File(tempPatchPath);\n  if (!manager.isTinkerEnabled() || !ShareTinkerInternals.isTinkerEnableWithSharedPreferences(context)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch is disabled, just return\");\n    return false;\n  }\n  if (!SharePatchFileUtil.isLegalFile(patchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch file is not found, just return\");\n    return false;\n  }\n  ShareSecurityCheck signatureCheck=new ShareSecurityCheck(context);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(context,manager.getTinkerFlags(),patchFile,signatureCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchPackageCheckFail\");\n    manager.getPatchReporter().onPatchPackageCheckFail(patchFile,returnCode);\n    return false;\n  }\n  String patchMd5=SharePatchFileUtil.getMD5(patchFile);\n  if (patchMd5 == null) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch md5 is null, just return\");\n    return false;\n  }\n  patchResult.patchVersion=patchMd5;\n  TinkerLog.i(TAG,\"UpgradePatch tryPatch:patchMd5:%s\",patchMd5);\n  final String patchDirectory=manager.getPatchDirectory().getAbsolutePath();\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectory);\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectory);\n  final Map<String,String> pkgProps=signatureCheck.getPackagePropertiesIfPresent();\n  if (pkgProps == null) {\n    TinkerLog.e(TAG,\"UpgradePatch packageProperties is null, do we process a valid patch apk ?\");\n    return false;\n  }\n  final String isProtectedAppStr=pkgProps.get(ShareConstants.PKGMETA_KEY_IS_PROTECTED_APP);\n  final boolean isProtectedApp=(isProtectedAppStr != null && !isProtectedAppStr.isEmpty() && !\"0\".equals(isProtectedAppStr));\n  SharePatchInfo oldInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  SharePatchInfo newInfo;\n  if (oldInfo != null) {\n    if (oldInfo.oldVersion == null || oldInfo.newVersion == null || oldInfo.oatDir == null) {\n      TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchInfoCorrupted\");\n      manager.getPatchReporter().onPatchInfoCorrupted(patchFile,oldInfo.oldVersion,oldInfo.newVersion);\n      return false;\n    }\n    if (!SharePatchFileUtil.checkIfMd5Valid(patchMd5)) {\n      TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchVersionCheckFail md5 %s is valid\",patchMd5);\n      manager.getPatchReporter().onPatchVersionCheckFail(patchFile,oldInfo,patchMd5);\n      return false;\n    }\n    final boolean usingInterpret=oldInfo.oatDir.equals(ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    if (!usingInterpret && !ShareTinkerInternals.isNullOrNil(oldInfo.newVersion) && oldInfo.newVersion.equals(patchMd5)&& !oldInfo.isRemoveNewVersion) {\n      TinkerLog.e(TAG,\"patch already applied, md5: %s\",patchMd5);\n      UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n      return true;\n    }\n    final String finalOatDir=usingInterpret ? ShareConstants.CHANING_DEX_OPTIMIZE_PATH : oldInfo.oatDir;\n    newInfo=new SharePatchInfo(oldInfo.oldVersion,patchMd5,isProtectedApp,false,Build.FINGERPRINT,finalOatDir);\n  }\n else {\n    newInfo=new SharePatchInfo(\"\",patchMd5,isProtectedApp,false,Build.FINGERPRINT,ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH);\n  }\n  final String patchName=SharePatchFileUtil.getPatchVersionDirectory(patchMd5);\n  final String patchVersionDirectory=patchDirectory + \"/\" + patchName;\n  TinkerLog.i(TAG,\"UpgradePatch tryPatch:patchVersionDirectory:%s\",patchVersionDirectory);\n  File destPatchFile=new File(patchVersionDirectory + \"/\" + SharePatchFileUtil.getPatchVersionFile(patchMd5));\n  try {\n    if (!patchMd5.equals(SharePatchFileUtil.getMD5(destPatchFile))) {\n      SharePatchFileUtil.copyFileUsingStream(patchFile,destPatchFile);\n      TinkerLog.w(TAG,\"UpgradePatch copy patch file, src file: %s size: %d, dest file: %s size:%d\",patchFile.getAbsolutePath(),patchFile.length(),destPatchFile.getAbsolutePath(),destPatchFile.length());\n    }\n  }\n catch (  IOException e) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:copy patch file fail from %s to %s\",patchFile.getPath(),destPatchFile.getPath());\n    manager.getPatchReporter().onPatchTypeExtractFail(patchFile,destPatchFile,patchFile.getName(),ShareConstants.TYPE_PATCH_FILE);\n    return false;\n  }\n  if (!DexDiffPatchInternal.tryRecoverDexFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch dex failed\");\n    return false;\n  }\n  if (!ArkHotDiffPatchInternal.tryRecoverArkHotLibrary(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    return false;\n  }\n  if (!BsDiffPatchInternal.tryRecoverLibraryFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch library failed\");\n    return false;\n  }\n  if (!ResDiffPatchInternal.tryRecoverResourceFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch resource failed\");\n    return false;\n  }\n  if (!DexDiffPatchInternal.waitAndCheckDexOptFile(patchFile,manager)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, check dex opt file failed\");\n    return false;\n  }\n  if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,newInfo,patchInfoLockFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, rewrite patch info failed\");\n    manager.getPatchReporter().onPatchInfoCorrupted(patchFile,newInfo.oldVersion,newInfo.newVersion);\n    return false;\n  }\n  UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n  TinkerLog.w(TAG,\"UpgradePatch tryPatch: done, it is ok\");\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 669,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 186,
        "startColumnNumber" : 12,
        "endLineNumber" : 186,
        "endColumnNumber" : 25
      },
      "nodeContext" : "return false;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 5,
    "startLineNumber" : 52,
    "startColumnNumber" : 19,
    "endLineNumber" : 52,
    "endColumnNumber" : 24
  }, {
    "charLength" : 5,
    "startLineNumber" : 57,
    "startColumnNumber" : 19,
    "endLineNumber" : 57,
    "endColumnNumber" : 24
  }, {
    "charLength" : 5,
    "startLineNumber" : 66,
    "startColumnNumber" : 19,
    "endLineNumber" : 66,
    "endColumnNumber" : 24
  }, {
    "charLength" : 5,
    "startLineNumber" : 72,
    "startColumnNumber" : 19,
    "endLineNumber" : 72,
    "endColumnNumber" : 24
  }, {
    "charLength" : 5,
    "startLineNumber" : 88,
    "startColumnNumber" : 19,
    "endLineNumber" : 88,
    "endColumnNumber" : 24
  }, {
    "charLength" : 5,
    "startLineNumber" : 104,
    "startColumnNumber" : 23,
    "endLineNumber" : 104,
    "endColumnNumber" : 28
  }, {
    "charLength" : 5,
    "startLineNumber" : 110,
    "startColumnNumber" : 23,
    "endLineNumber" : 110,
    "endColumnNumber" : 28
  }, {
    "charLength" : 5,
    "startLineNumber" : 126,
    "startColumnNumber" : 87,
    "endLineNumber" : 126,
    "endColumnNumber" : 92
  }, {
    "charLength" : 5,
    "startLineNumber" : 128,
    "startColumnNumber" : 71,
    "endLineNumber" : 128,
    "endColumnNumber" : 76
  }, {
    "charLength" : 5,
    "startLineNumber" : 153,
    "startColumnNumber" : 19,
    "endLineNumber" : 153,
    "endColumnNumber" : 24
  }, {
    "charLength" : 5,
    "startLineNumber" : 159,
    "startColumnNumber" : 19,
    "endLineNumber" : 159,
    "endColumnNumber" : 24
  }, {
    "charLength" : 5,
    "startLineNumber" : 164,
    "startColumnNumber" : 19,
    "endLineNumber" : 164,
    "endColumnNumber" : 24
  }, {
    "charLength" : 5,
    "startLineNumber" : 169,
    "startColumnNumber" : 19,
    "endLineNumber" : 169,
    "endColumnNumber" : 24
  }, {
    "charLength" : 5,
    "startLineNumber" : 174,
    "startColumnNumber" : 19,
    "endLineNumber" : 174,
    "endColumnNumber" : 24
  }, {
    "charLength" : 5,
    "startLineNumber" : 180,
    "startColumnNumber" : 19,
    "endLineNumber" : 180,
    "endColumnNumber" : 24
  }, {
    "charLength" : 5,
    "startLineNumber" : 186,
    "startColumnNumber" : 19,
    "endLineNumber" : 186,
    "endColumnNumber" : 24
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 14,
    "layout" : 3
  } ]
}