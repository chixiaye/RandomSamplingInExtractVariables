{
  "id" : 370,
  "expression" : "bit >= 0",
  "projectName" : "zxing@zxing",
  "commitID" : "1b0aed9c091717337b865955f58290450a3a9e3a",
  "filePath" : "/core/src/com/google/zxing/maxicode/decoder/BitMatrixParser.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "bit >= 0",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 82,
      "startColumnNumber" : 12,
      "endLineNumber" : 82,
      "endColumnNumber" : 20
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 82,
        "startColumnNumber" : 12,
        "endLineNumber" : 82,
        "endColumnNumber" : 43
      },
      "nodeContext" : "bit >= 0 && bitMatrix.get(x,y)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 108,
        "startLineNumber" : 82,
        "startColumnNumber" : 8,
        "endLineNumber" : 84,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (bit >= 0 && bitMatrix.get(x,y)) {\n  result[bit / 6]|=(byte)(1 << (5 - (bit % 6)));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 30,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 157,
        "startLineNumber" : 80,
        "startColumnNumber" : 38,
        "endLineNumber" : 85,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  int bit=bitnrRow[x];\n  if (bit >= 0 && bitMatrix.get(x,y)) {\n    result[bit / 6]|=(byte)(1 << (5 - (bit % 6)));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 38,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 189,
        "startLineNumber" : 80,
        "startColumnNumber" : 6,
        "endLineNumber" : 85,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int x=0; x < width; x++) {\n  int bit=bitnrRow[x];\n  if (bit >= 0 && bitMatrix.get(x,y)) {\n    result[bit / 6]|=(byte)(1 << (5 - (bit % 6)));\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 49,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 236,
        "startLineNumber" : 78,
        "startColumnNumber" : 37,
        "endLineNumber" : 86,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int[] bitnrRow=BITNR[y];\n  for (int x=0; x < width; x++) {\n    int bit=bitnrRow[x];\n    if (bit >= 0 && bitMatrix.get(x,y)) {\n      result[bit / 6]|=(byte)(1 << (5 - (bit % 6)));\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 59,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 269,
        "startLineNumber" : 78,
        "startColumnNumber" : 4,
        "endLineNumber" : 86,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int y=0; y < height; y++) {\n  int[] bitnrRow=BITNR[y];\n  for (int x=0; x < width; x++) {\n    int bit=bitnrRow[x];\n    if (bit >= 0 && bitMatrix.get(x,y)) {\n      result[bit / 6]|=(byte)(1 << (5 - (bit % 6)));\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 70,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 411,
        "startLineNumber" : 74,
        "startColumnNumber" : 25,
        "endLineNumber" : 88,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  byte[] result=new byte[144];\n  int height=bitMatrix.getHeight();\n  int width=bitMatrix.getWidth();\n  for (int y=0; y < height; y++) {\n    int[] bitnrRow=BITNR[y];\n    for (int x=0; x < width; x++) {\n      int bit=bitnrRow[x];\n      if (bit >= 0 && bitMatrix.get(x,y)) {\n        result[bit / 6]|=(byte)(1 << (5 - (bit % 6)));\n      }\n    }\n  }\n  return result;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 98,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 434,
        "startLineNumber" : 74,
        "startColumnNumber" : 2,
        "endLineNumber" : 88,
        "endColumnNumber" : 3
      },
      "nodeContext" : "byte[] readCodewords(){\n  byte[] result=new byte[144];\n  int height=bitMatrix.getHeight();\n  int width=bitMatrix.getWidth();\n  for (int y=0; y < height; y++) {\n    int[] bitnrRow=BITNR[y];\n    for (int x=0; x < width; x++) {\n      int bit=bitnrRow[x];\n      if (bit >= 0 && bitMatrix.get(x,y)) {\n        result[bit / 6]|=(byte)(1 << (5 - (bit % 6)));\n      }\n    }\n  }\n  return result;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 103,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 82,
        "startColumnNumber" : 12,
        "endLineNumber" : 82,
        "endColumnNumber" : 43
      },
      "nodeContext" : "bit >= 0 && bitMatrix.get(x,y)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 3
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 8,
    "startLineNumber" : 82,
    "startColumnNumber" : 12,
    "endLineNumber" : 82,
    "endColumnNumber" : 20
  } ],
  "layoutRelationDataList" : [ ]
}