{
  "id" : 249,
  "expression" : "firstEntry.getKey()",
  "projectName" : "google@guava",
  "commitID" : "0c40611d201488ee016fd132c90a636323f9f42c",
  "filePath" : "guava/src/com/google/common/collect/ImmutableSortedMap.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "firstEntry.getKey()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 393,
      "startColumnNumber" : 22,
      "endLineNumber" : 393,
      "endColumnNumber" : 41
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 393,
        "startColumnNumber" : 12,
        "endLineNumber" : 393,
        "endColumnNumber" : 41
      },
      "nodeContext" : "prevKey=firstEntry.getKey()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 393,
        "startColumnNumber" : 10,
        "endLineNumber" : 393,
        "endColumnNumber" : 42
      },
      "nodeContext" : "K prevKey=firstEntry.getKey();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1675,
        "startLineNumber" : 374,
        "startColumnNumber" : 15,
        "endLineNumber" : 409,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Arrays.sort(entryArray,0,size,new Comparator<@Nullable Entry<K,V>>(){\n    @Override public int compare(    @CheckForNull Entry<K,V> e1,    @CheckForNull Entry<K,V> e2){\n      requireNonNull(e1);\n      requireNonNull(e2);\n      return comparator.compare(e1.getKey(),e2.getKey());\n    }\n  }\n);\n  Entry<K,V> firstEntry=requireNonNull(entryArray[0]);\n  K prevKey=firstEntry.getKey();\n  keys[0]=prevKey;\n  values[0]=firstEntry.getValue();\n  checkEntryNotNull(keys[0],values[0]);\n  for (int i=1; i < size; i++) {\n    Entry<K,V> prevEntry=requireNonNull(entryArray[i - 1]);\n    Entry<K,V> entry=requireNonNull(entryArray[i]);\n    K key=entry.getKey();\n    V value=entry.getValue();\n    checkEntryNotNull(key,value);\n    keys[i]=key;\n    values[i]=value;\n    checkNoConflict(comparator.compare(prevKey,key) != 0,\"key\",prevEntry,entry);\n    prevKey=key;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 209,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 2195,
        "startLineNumber" : 363,
        "startColumnNumber" : 8,
        "endLineNumber" : 409,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (sameComparator) {\n  for (int i=0; i < size; i++) {\n    Entry<K,V> entry=requireNonNull(entryArray[i]);\n    Object key=entry.getKey();\n    Object value=entry.getValue();\n    checkEntryNotNull(key,value);\n    keys[i]=key;\n    values[i]=value;\n  }\n}\n else {\n  Arrays.sort(entryArray,0,size,new Comparator<@Nullable Entry<K,V>>(){\n    @Override public int compare(    @CheckForNull Entry<K,V> e1,    @CheckForNull Entry<K,V> e2){\n      requireNonNull(e1);\n      requireNonNull(e2);\n      return comparator.compare(e1.getKey(),e2.getKey());\n    }\n  }\n);\n  Entry<K,V> firstEntry=requireNonNull(entryArray[0]);\n  K prevKey=firstEntry.getKey();\n  keys[0]=prevKey;\n  values[0]=firstEntry.getValue();\n  checkEntryNotNull(keys[0],values[0]);\n  for (int i=1; i < size; i++) {\n    Entry<K,V> prevEntry=requireNonNull(entryArray[i - 1]);\n    Entry<K,V> entry=requireNonNull(entryArray[i]);\n    K key=entry.getKey();\n    V value=entry.getValue();\n    checkEntryNotNull(key,value);\n    keys[i]=key;\n    values[i]=value;\n    checkNoConflict(comparator.compare(prevKey,key) != 0,\"key\",prevEntry,entry);\n    prevKey=key;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 272,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2814,
        "startLineNumber" : 353,
        "startColumnNumber" : 4,
        "endLineNumber" : 413,
        "endColumnNumber" : 5
      },
      "nodeContext" : "switch (size) {\ncase 0:  return emptyMap(comparator);\ncase 1:Entry<K,V> onlyEntry=requireNonNull(entryArray[0]);\nreturn of(comparator,onlyEntry.getKey(),onlyEntry.getValue());\ndefault:Object[] keys=new Object[size];\nObject[] values=new Object[size];\nif (sameComparator) {\nfor (int i=0; i < size; i++) {\nEntry<K,V> entry=requireNonNull(entryArray[i]);\nObject key=entry.getKey();\nObject value=entry.getValue();\ncheckEntryNotNull(key,value);\nkeys[i]=key;\nvalues[i]=value;\n}\n}\n else {\nArrays.sort(entryArray,0,size,new Comparator<@Nullable Entry<K,V>>(){\n@Override public int compare(@CheckForNull Entry<K,V> e1,@CheckForNull Entry<K,V> e2){\nrequireNonNull(e1);\nrequireNonNull(e2);\nreturn comparator.compare(e1.getKey(),e2.getKey());\n}\n}\n);\nEntry<K,V> firstEntry=requireNonNull(entryArray[0]);\nK prevKey=firstEntry.getKey();\nkeys[0]=prevKey;\nvalues[0]=firstEntry.getValue();\ncheckEntryNotNull(keys[0],values[0]);\nfor (int i=1; i < size; i++) {\nEntry<K,V> prevEntry=requireNonNull(entryArray[i - 1]);\nEntry<K,V> entry=requireNonNull(entryArray[i]);\nK key=entry.getKey();\nV value=entry.getValue();\ncheckEntryNotNull(key,value);\nkeys[i]=key;\nvalues[i]=value;\ncheckNoConflict(comparator.compare(prevKey,key) != 0,\"key\",prevEntry,entry);\nprevKey=key;\n}\n}\nreturn new ImmutableSortedMap<>(new RegularImmutableSortedSet<K>(new RegularImmutableList<K>(keys),comparator),new RegularImmutableList<V>(values));\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 360,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2826,
        "startLineNumber" : 352,
        "startColumnNumber" : 16,
        "endLineNumber" : 414,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\nswitch (size) {\ncase 0:    return emptyMap(comparator);\ncase 1:  Entry<K,V> onlyEntry=requireNonNull(entryArray[0]);\nreturn of(comparator,onlyEntry.getKey(),onlyEntry.getValue());\ndefault:Object[] keys=new Object[size];\nObject[] values=new Object[size];\nif (sameComparator) {\nfor (int i=0; i < size; i++) {\nEntry<K,V> entry=requireNonNull(entryArray[i]);\nObject key=entry.getKey();\nObject value=entry.getValue();\ncheckEntryNotNull(key,value);\nkeys[i]=key;\nvalues[i]=value;\n}\n}\n else {\nArrays.sort(entryArray,0,size,new Comparator<@Nullable Entry<K,V>>(){\n@Override public int compare(@CheckForNull Entry<K,V> e1,@CheckForNull Entry<K,V> e2){\nrequireNonNull(e1);\nrequireNonNull(e2);\nreturn comparator.compare(e1.getKey(),e2.getKey());\n}\n}\n);\nEntry<K,V> firstEntry=requireNonNull(entryArray[0]);\nK prevKey=firstEntry.getKey();\nkeys[0]=prevKey;\nvalues[0]=firstEntry.getValue();\ncheckEntryNotNull(keys[0],values[0]);\nfor (int i=1; i < size; i++) {\nEntry<K,V> prevEntry=requireNonNull(entryArray[i - 1]);\nEntry<K,V> entry=requireNonNull(entryArray[i]);\nK key=entry.getKey();\nV value=entry.getValue();\ncheckEntryNotNull(key,value);\nkeys[i]=key;\nvalues[i]=value;\ncheckNoConflict(comparator.compare(prevKey,key) != 0,\"key\",prevEntry,entry);\nprevKey=key;\n}\n}\nreturn new ImmutableSortedMap<>(new RegularImmutableSortedSet<K>(new RegularImmutableList<K>(keys),comparator),new RegularImmutableList<V>(values));\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 361,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3024,
        "startLineNumber" : 348,
        "startColumnNumber" : 2,
        "endLineNumber" : 414,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private static <K,V>ImmutableSortedMap<K,V> fromEntries(final Comparator<? super K> comparator,boolean sameComparator,@Nullable Entry<K,V>[] entryArray,int size){\nswitch (size) {\ncase 0:    return emptyMap(comparator);\ncase 1:  Entry<K,V> onlyEntry=requireNonNull(entryArray[0]);\nreturn of(comparator,onlyEntry.getKey(),onlyEntry.getValue());\ndefault:Object[] keys=new Object[size];\nObject[] values=new Object[size];\nif (sameComparator) {\nfor (int i=0; i < size; i++) {\nEntry<K,V> entry=requireNonNull(entryArray[i]);\nObject key=entry.getKey();\nObject value=entry.getValue();\ncheckEntryNotNull(key,value);\nkeys[i]=key;\nvalues[i]=value;\n}\n}\n else {\nArrays.sort(entryArray,0,size,new Comparator<@Nullable Entry<K,V>>(){\n@Override public int compare(@CheckForNull Entry<K,V> e1,@CheckForNull Entry<K,V> e2){\nrequireNonNull(e1);\nrequireNonNull(e2);\nreturn comparator.compare(e1.getKey(),e2.getKey());\n}\n}\n);\nEntry<K,V> firstEntry=requireNonNull(entryArray[0]);\nK prevKey=firstEntry.getKey();\nkeys[0]=prevKey;\nvalues[0]=firstEntry.getValue();\ncheckEntryNotNull(keys[0],values[0]);\nfor (int i=1; i < size; i++) {\nEntry<K,V> prevEntry=requireNonNull(entryArray[i - 1]);\nEntry<K,V> entry=requireNonNull(entryArray[i]);\nK key=entry.getKey();\nV value=entry.getValue();\ncheckEntryNotNull(key,value);\nkeys[i]=key;\nvalues[i]=value;\ncheckNoConflict(comparator.compare(prevKey,key) != 0,\"key\",prevEntry,entry);\nprevKey=key;\n}\n}\nreturn new ImmutableSortedMap<>(new RegularImmutableSortedSet<K>(new RegularImmutableList<K>(keys),comparator),new RegularImmutableList<V>(values));\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 404,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 393,
        "startColumnNumber" : 10,
        "endLineNumber" : 393,
        "endColumnNumber" : 42
      },
      "nodeContext" : "K prevKey=firstEntry.getKey();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "K"
  } ],
  "positionList" : [ {
    "charLength" : 19,
    "startLineNumber" : 393,
    "startColumnNumber" : 22,
    "endLineNumber" : 393,
    "endColumnNumber" : 41
  } ],
  "layoutRelationDataList" : [ ]
}