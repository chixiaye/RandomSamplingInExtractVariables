{
  "id" : 70,
  "expression" : "r.length() - 2",
  "projectName" : "PhilJay@MPAndroidChart",
  "commitID" : "43046425fc2ed73d0d3f177759706116e02a9053",
  "filePath" : "/MPChartLib/src/com/github/mikephil/charting/utils/LargeValueFormatter.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "r.length() - 2",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 46,
      "startColumnNumber" : 31,
      "endLineNumber" : 46,
      "endColumnNumber" : 45
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 46,
        "startColumnNumber" : 16,
        "endLineNumber" : 46,
        "endColumnNumber" : 46
      },
      "nodeContext" : "r.substring(0,r.length() - 2)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 46,
        "startColumnNumber" : 16,
        "endLineNumber" : 46,
        "endColumnNumber" : 76
      },
      "nodeContext" : "r.substring(0,r.length() - 2) + r.substring(r.length() - 1)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 46,
        "startColumnNumber" : 12,
        "endLineNumber" : 46,
        "endColumnNumber" : 76
      },
      "nodeContext" : "r=r.substring(0,r.length() - 2) + r.substring(r.length() - 1)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 46,
        "startColumnNumber" : 12,
        "endLineNumber" : 46,
        "endColumnNumber" : 77
      },
      "nodeContext" : "r=r.substring(0,r.length() - 2) + r.substring(r.length() - 1);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 21,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 89,
        "startLineNumber" : 45,
        "startColumnNumber" : 71,
        "endLineNumber" : 47,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  r=r.substring(0,r.length() - 2) + r.substring(r.length() - 1);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 22,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 152,
        "startLineNumber" : 45,
        "startColumnNumber" : 8,
        "endLineNumber" : 47,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (r.length() > MAX_LENGTH || r.matches(\"[0-9]+\\\\.[a-z]\")) {\n  r=r.substring(0,r.length() - 2) + r.substring(r.length() - 1);\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 33,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 334,
        "startLineNumber" : 39,
        "startColumnNumber" : 45,
        "endLineNumber" : 50,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String r=mFormat.format(number);\n  r=r.replaceAll(\"E[0-9]\",SUFFIX[Character.getNumericValue(r.charAt(r.length() - 1)) / 3]);\n  while (r.length() > MAX_LENGTH || r.matches(\"[0-9]+\\\\.[a-z]\")) {\n    r=r.substring(0,r.length() - 2) + r.substring(r.length() - 1);\n  }\n  return r;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 67,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 523,
        "startLineNumber" : 35,
        "startColumnNumber" : 4,
        "endLineNumber" : 50,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Formats each number properly. Special thanks to Roman Gromov (https://github.com/romangromov) for this piece of code.\n */\nprivate String makePretty(double number){\n  String r=mFormat.format(number);\n  r=r.replaceAll(\"E[0-9]\",SUFFIX[Character.getNumericValue(r.charAt(r.length() - 1)) / 3]);\n  while (r.length() > MAX_LENGTH || r.matches(\"[0-9]+\\\\.[a-z]\")) {\n    r=r.substring(0,r.length() - 2) + r.substring(r.length() - 1);\n  }\n  return r;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 76,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 46,
        "startColumnNumber" : 12,
        "endLineNumber" : 46,
        "endColumnNumber" : 77
      },
      "nodeContext" : "r=r.substring(0,r.length() - 2) + r.substring(r.length() - 1);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 21,
      "astHeight" : 7
    },
    "tokenLength" : 4,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 14,
    "startLineNumber" : 46,
    "startColumnNumber" : 31,
    "endLineNumber" : 46,
    "endColumnNumber" : 45
  } ],
  "layoutRelationDataList" : [ ]
}