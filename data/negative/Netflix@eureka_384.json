{
  "id" : 384,
  "expression" : "Collections",
  "projectName" : "Netflix@eureka",
  "commitID" : "2f6d04dae7f6fca2a17e85fc53020e13272a79b2",
  "filePath" : "/eureka-core/src/test/java/com/netflix/eureka2/interests/IndexConcurrencyTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Collections",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 37,
      "startColumnNumber" : 16,
      "endLineNumber" : 37,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 37,
        "startColumnNumber" : 16,
        "endLineNumber" : 37,
        "endColumnNumber" : 77
      },
      "nodeContext" : "Collections.<ChangeNotification<InstanceInfo>>emptyIterator()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 111,
        "startLineNumber" : 36,
        "startColumnNumber" : 54,
        "endLineNumber" : 37,
        "endColumnNumber" : 78
      },
      "nodeContext" : "new InstanceInfoInitStateHolder(Collections.<ChangeNotification<InstanceInfo>>emptyIterator())",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 129,
        "startLineNumber" : 36,
        "startColumnNumber" : 36,
        "endLineNumber" : 37,
        "endColumnNumber" : 78
      },
      "nodeContext" : "initStateHolder=new InstanceInfoInitStateHolder(Collections.<ChangeNotification<InstanceInfo>>emptyIterator())",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 158,
        "startLineNumber" : 36,
        "startColumnNumber" : 8,
        "endLineNumber" : 37,
        "endColumnNumber" : 79
      },
      "nodeContext" : "InstanceInfoInitStateHolder initStateHolder=new InstanceInfoInitStateHolder(Collections.<ChangeNotification<InstanceInfo>>emptyIterator());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 16,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1961,
        "startLineNumber" : 33,
        "startColumnNumber" : 65,
        "endLineNumber" : 80,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  PublishSubject<ChangeNotification<InstanceInfo>> dataSource=PublishSubject.create();\n  InstanceInfoInitStateHolder initStateHolder=new InstanceInfoInitStateHolder(Collections.<ChangeNotification<InstanceInfo>>emptyIterator());\n  Index<InstanceInfo> index=Index.forInterest(Interests.forFullRegistry(),dataSource,initStateHolder);\n  for (int i=0; i < NOTIFICATIONS / 2; i++) {\n    InstanceInfo data=SampleInstanceInfo.DiscoveryServer.builder().withId(Integer.toString(i)).build();\n    dataSource.onNext(new ChangeNotification<InstanceInfo>(Kind.Add,data));\n  }\n  IndexSubscriber indexSubscriber=new IndexSubscriber(index);\n  indexSubscriber.start();\n  int id=NOTIFICATIONS / 2;\n  for (int i=0; i < NOTIFICATIONS / 2; i++) {\n    InstanceInfo data=SampleInstanceInfo.DiscoveryServer.builder().withId(Integer.toString(id)).build();\n    dataSource.onNext(new ChangeNotification<InstanceInfo>(Kind.Add,data));\n    id++;\n  }\n  indexSubscriber.join();\n  List<Integer> idxIds=indexSubscriber.getIds();\n  int[] matched=new int[NOTIFICATIONS];\n  Arrays.fill(matched,0,matched.length,0);\n  for (  Integer idxId : idxIds) {\n    int value=idxId;\n    matched[value]++;\n  }\n  int missed=0;\n  for (int i=0; i < matched.length; i++) {\n    if (matched[i] != 1) {\n      if (matched[i] == 0) {\n        missed++;\n      }\n    }\n  }\n  assertThat(missed,is(equalTo(0)));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 260,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2032,
        "startLineNumber" : 32,
        "startColumnNumber" : 4,
        "endLineNumber" : 80,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testRaceConditionsDoNotHappen() throws Exception {\n  PublishSubject<ChangeNotification<InstanceInfo>> dataSource=PublishSubject.create();\n  InstanceInfoInitStateHolder initStateHolder=new InstanceInfoInitStateHolder(Collections.<ChangeNotification<InstanceInfo>>emptyIterator());\n  Index<InstanceInfo> index=Index.forInterest(Interests.forFullRegistry(),dataSource,initStateHolder);\n  for (int i=0; i < NOTIFICATIONS / 2; i++) {\n    InstanceInfo data=SampleInstanceInfo.DiscoveryServer.builder().withId(Integer.toString(i)).build();\n    dataSource.onNext(new ChangeNotification<InstanceInfo>(Kind.Add,data));\n  }\n  IndexSubscriber indexSubscriber=new IndexSubscriber(index);\n  indexSubscriber.start();\n  int id=NOTIFICATIONS / 2;\n  for (int i=0; i < NOTIFICATIONS / 2; i++) {\n    InstanceInfo data=SampleInstanceInfo.DiscoveryServer.builder().withId(Integer.toString(id)).build();\n    dataSource.onNext(new ChangeNotification<InstanceInfo>(Kind.Add,data));\n    id++;\n  }\n  indexSubscriber.join();\n  List<Integer> idxIds=indexSubscriber.getIds();\n  int[] matched=new int[NOTIFICATIONS];\n  Arrays.fill(matched,0,matched.length,0);\n  for (  Integer idxId : idxIds) {\n    int value=idxId;\n    matched[value]++;\n  }\n  int missed=0;\n  for (int i=0; i < matched.length; i++) {\n    if (matched[i] != 1) {\n      if (matched[i] == 0) {\n        missed++;\n      }\n    }\n  }\n  assertThat(missed,is(equalTo(0)));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 268,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 37,
        "startColumnNumber" : 16,
        "endLineNumber" : 37,
        "endColumnNumber" : 77
      },
      "nodeContext" : "Collections.<ChangeNotification<InstanceInfo>>emptyIterator()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.util.Collections"
  } ],
  "positionList" : [ {
    "charLength" : 11,
    "startLineNumber" : 37,
    "startColumnNumber" : 16,
    "endLineNumber" : 37,
    "endColumnNumber" : 27
  } ],
  "layoutRelationDataList" : [ ]
}