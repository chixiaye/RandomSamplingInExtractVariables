{
  "id" : 194,
  "expression" : "runs / (0f + addresses.size())",
  "projectName" : "seata@seata",
  "commitID" : "42d41623178ab076b11b27a0f049ac3ed7f1a9dc",
  "filePath" : "/discovery/seata-discovery-core/src/test/java/io/seata/discovery/loadbalance/LoadBalanceTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "runs / (0f + addresses.size())",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 30,
      "startLineNumber" : 63,
      "startColumnNumber" : 51,
      "endLineNumber" : 63,
      "endColumnNumber" : 81
    },
    "astNodeNumber" : 8,
    "astHeight" : 5,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 63,
        "startColumnNumber" : 43,
        "endLineNumber" : 63,
        "endColumnNumber" : 81
      },
      "nodeContext" : "count - runs / (0f + addresses.size())",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 63,
        "startColumnNumber" : 34,
        "endLineNumber" : 63,
        "endColumnNumber" : 82
      },
      "nodeContext" : "Math.abs(count - runs / (0f + addresses.size()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 63,
        "startColumnNumber" : 34,
        "endLineNumber" : 63,
        "endColumnNumber" : 87
      },
      "nodeContext" : "Math.abs(count - runs / (0f + addresses.size())) < 1f",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 15,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 98,
        "startLineNumber" : 63,
        "startColumnNumber" : 12,
        "endLineNumber" : 63,
        "endColumnNumber" : 110
      },
      "nodeContext" : "Assertions.assertTrue(Math.abs(count - runs / (0f + addresses.size())) < 1f,\"abs diff shoud < 1\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 19,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 63,
        "startColumnNumber" : 12,
        "endLineNumber" : 63,
        "endColumnNumber" : 111
      },
      "nodeContext" : "Assertions.assertTrue(Math.abs(count - runs / (0f + addresses.size())) < 1f,\"abs diff shoud < 1\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 20,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 176,
        "startLineNumber" : 61,
        "startColumnNumber" : 59,
        "endLineNumber" : 64,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Long count=counter.get(address).get();\n  Assertions.assertTrue(Math.abs(count - runs / (0f + addresses.size())) < 1f,\"abs diff shoud < 1\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 32,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 227,
        "startLineNumber" : 61,
        "startColumnNumber" : 8,
        "endLineNumber" : 64,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (InetSocketAddress address : counter.keySet()) {\n  Long count=counter.get(address).get();\n  Assertions.assertTrue(Math.abs(count - runs / (0f + addresses.size())) < 1f,\"abs diff shoud < 1\");\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 40,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 388,
        "startLineNumber" : 58,
        "startColumnNumber" : 84,
        "endLineNumber" : 65,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int runs=10000;\n  Map<InetSocketAddress,AtomicLong> counter=getSelectedCounter(runs,addresses,new RoundRobinLoadBalance());\n  for (  InetSocketAddress address : counter.keySet()) {\n    Long count=counter.get(address).get();\n    Assertions.assertTrue(Math.abs(count - runs / (0f + addresses.size())) < 1f,\"abs diff shoud < 1\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 63,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 634,
        "startLineNumber" : 51,
        "startColumnNumber" : 4,
        "endLineNumber" : 65,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Test round robin load balance select.\n * @param addresses the addresses\n */\n@ParameterizedTest @MethodSource(\"addressProvider\") public void testRoundRobinLoadBalance_select(List<InetSocketAddress> addresses){\n  int runs=10000;\n  Map<InetSocketAddress,AtomicLong> counter=getSelectedCounter(runs,addresses,new RoundRobinLoadBalance());\n  for (  InetSocketAddress address : counter.keySet()) {\n    Long count=counter.get(address).get();\n    Assertions.assertTrue(Math.abs(count - runs / (0f + addresses.size())) < 1f,\"abs diff shoud < 1\");\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 80,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 63,
        "startColumnNumber" : 12,
        "endLineNumber" : 63,
        "endColumnNumber" : 111
      },
      "nodeContext" : "Assertions.assertTrue(Math.abs(count - runs / (0f + addresses.size())) < 1f,\"abs diff shoud < 1\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 20,
      "astHeight" : 10
    },
    "tokenLength" : 6,
    "type" : "float"
  } ],
  "positionList" : [ {
    "charLength" : 30,
    "startLineNumber" : 63,
    "startColumnNumber" : 51,
    "endLineNumber" : 63,
    "endColumnNumber" : 81
  } ],
  "layoutRelationDataList" : [ ]
}