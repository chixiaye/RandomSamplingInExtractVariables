{
  "id" : 108,
  "expression" : "remove(node.right,elem)",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/main/java/com/williamfiset/algorithms/datastructures/balancedtree/AVLTreeRecursiveOptimized.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "remove(node.right,elem)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 24,
      "startLineNumber" : 237,
      "startColumnNumber" : 26,
      "endLineNumber" : 237,
      "endColumnNumber" : 50
    },
    "astNodeNumber" : 6,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 237,
        "startColumnNumber" : 11,
        "endLineNumber" : 237,
        "endColumnNumber" : 50
      },
      "nodeContext" : "newRightNode=remove(node.right,elem)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 237,
        "startColumnNumber" : 6,
        "endLineNumber" : 237,
        "endColumnNumber" : 51
      },
      "nodeContext" : "Node newRightNode=remove(node.right,elem);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 183,
        "startLineNumber" : 236,
        "startColumnNumber" : 24,
        "endLineNumber" : 242,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Node newRightNode=remove(node.right,elem);\n  if (newRightNode == TOKEN)   return TOKEN;\n  node.right=newRightNode;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 24,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2039,
        "startLineNumber" : 236,
        "startColumnNumber" : 11,
        "endLineNumber" : 289,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (cmp > 0) {\n  Node newRightNode=remove(node.right,elem);\n  if (newRightNode == TOKEN)   return TOKEN;\n  node.right=newRightNode;\n}\n else {\n  if (node.left == null) {\n    return node.right;\n  }\n else   if (node.right == null) {\n    return node.left;\n  }\n else {\n    if (node.left.height > node.right.height) {\n      T successorValue=findMax(node.left);\n      node.value=successorValue;\n      Node replacement=remove(node.left,successorValue);\n      if (replacement == TOKEN)       return TOKEN;\n      node.left=replacement;\n    }\n else {\n      T successorValue=findMin(node.right);\n      node.value=successorValue;\n      Node replacement=remove(node.right,successorValue);\n      if (replacement == TOKEN)       return TOKEN;\n      node.right=replacement;\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 144,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2298,
        "startLineNumber" : 229,
        "startColumnNumber" : 4,
        "endLineNumber" : 289,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (cmp < 0) {\n  Node newLeftNode=remove(node.left,elem);\n  if (newLeftNode == TOKEN)   return TOKEN;\n  node.left=newLeftNode;\n}\n else if (cmp > 0) {\n  Node newRightNode=remove(node.right,elem);\n  if (newRightNode == TOKEN)   return TOKEN;\n  node.right=newRightNode;\n}\n else {\n  if (node.left == null) {\n    return node.right;\n  }\n else   if (node.right == null) {\n    return node.left;\n  }\n else {\n    if (node.left.height > node.right.height) {\n      T successorValue=findMax(node.left);\n      node.value=successorValue;\n      Node replacement=remove(node.left,successorValue);\n      if (replacement == TOKEN)       return TOKEN;\n      node.left=replacement;\n    }\n else {\n      T successorValue=findMin(node.right);\n      node.value=successorValue;\n      Node replacement=remove(node.right,successorValue);\n      if (replacement == TOKEN)       return TOKEN;\n      node.right=replacement;\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 172,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2672,
        "startLineNumber" : 220,
        "startColumnNumber" : 41,
        "endLineNumber" : 296,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (node == null)   return TOKEN;\n  int cmp=elem.compareTo(node.value);\n  if (cmp < 0) {\n    Node newLeftNode=remove(node.left,elem);\n    if (newLeftNode == TOKEN)     return TOKEN;\n    node.left=newLeftNode;\n  }\n else   if (cmp > 0) {\n    Node newRightNode=remove(node.right,elem);\n    if (newRightNode == TOKEN)     return TOKEN;\n    node.right=newRightNode;\n  }\n else {\n    if (node.left == null) {\n      return node.right;\n    }\n else     if (node.right == null) {\n      return node.left;\n    }\n else {\n      if (node.left.height > node.right.height) {\n        T successorValue=findMax(node.left);\n        node.value=successorValue;\n        Node replacement=remove(node.left,successorValue);\n        if (replacement == TOKEN)         return TOKEN;\n        node.left=replacement;\n      }\n else {\n        T successorValue=findMin(node.right);\n        node.value=successorValue;\n        Node replacement=remove(node.right,successorValue);\n        if (replacement == TOKEN)         return TOKEN;\n        node.right=replacement;\n      }\n    }\n  }\n  update(node);\n  return balance(node);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 197,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2711,
        "startLineNumber" : 220,
        "startColumnNumber" : 2,
        "endLineNumber" : 296,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private Node remove(Node node,T elem){\n  if (node == null)   return TOKEN;\n  int cmp=elem.compareTo(node.value);\n  if (cmp < 0) {\n    Node newLeftNode=remove(node.left,elem);\n    if (newLeftNode == TOKEN)     return TOKEN;\n    node.left=newLeftNode;\n  }\n else   if (cmp > 0) {\n    Node newRightNode=remove(node.right,elem);\n    if (newRightNode == TOKEN)     return TOKEN;\n    node.right=newRightNode;\n  }\n else {\n    if (node.left == null) {\n      return node.right;\n    }\n else     if (node.right == null) {\n      return node.left;\n    }\n else {\n      if (node.left.height > node.right.height) {\n        T successorValue=findMax(node.left);\n        node.value=successorValue;\n        Node replacement=remove(node.left,successorValue);\n        if (replacement == TOKEN)         return TOKEN;\n        node.left=replacement;\n      }\n else {\n        T successorValue=findMin(node.right);\n        node.value=successorValue;\n        Node replacement=remove(node.right,successorValue);\n        if (replacement == TOKEN)         return TOKEN;\n        node.right=replacement;\n      }\n    }\n  }\n  update(node);\n  return balance(node);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 210,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 237,
        "startColumnNumber" : 6,
        "endLineNumber" : 237,
        "endColumnNumber" : 51
      },
      "nodeContext" : "Node newRightNode=remove(node.right,elem);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 4,
    "type" : "com.williamfiset.algorithms.datastructures.balancedtree.AVLTreeRecursiveOptimized<T>.Node"
  } ],
  "positionList" : [ {
    "charLength" : 24,
    "startLineNumber" : 237,
    "startColumnNumber" : 26,
    "endLineNumber" : 237,
    "endColumnNumber" : 50
  } ],
  "layoutRelationDataList" : [ ]
}