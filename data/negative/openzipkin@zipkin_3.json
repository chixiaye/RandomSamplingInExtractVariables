{
  "id" : 3,
  "expression" : "spans.stream().filter(s -> (s.debug != null && s.debug) || this.sampler.test(s.traceId))",
  "projectName" : "openzipkin@zipkin",
  "commitID" : "130e2851e5a2a36886cee4c066fc050ec1df530c",
  "filePath" : "zipkin-java-server/src/main/java/io/zipkin/server/ZipkinSpanWriter.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "spans.stream().filter(s -> (s.debug != null && s.debug) || this.sampler.test(s.traceId))",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 159,
      "startLineNumber" : 36,
      "startColumnNumber" : 29,
      "endLineNumber" : 38,
      "endColumnNumber" : 82
    },
    "astNodeNumber" : 27,
    "astHeight" : 8,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 179,
        "startLineNumber" : 36,
        "startColumnNumber" : 29,
        "endLineNumber" : 39,
        "endColumnNumber" : 19
      },
      "nodeContext" : "spans.stream().filter(s -> (s.debug != null && s.debug) || this.sampler.test(s.traceId)).iterator()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 29,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 189,
        "startLineNumber" : 36,
        "startColumnNumber" : 19,
        "endLineNumber" : 39,
        "endColumnNumber" : 19
      },
      "nodeContext" : "sampled=spans.stream().filter(s -> (s.debug != null && s.debug) || this.sampler.test(s.traceId)).iterator()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 31,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 205,
        "startLineNumber" : 36,
        "startColumnNumber" : 4,
        "endLineNumber" : 39,
        "endColumnNumber" : 20
      },
      "nodeContext" : "Iterator<Span> sampled=spans.stream().filter(s -> (s.debug != null && s.debug) || this.sampler.test(s.traceId)).iterator();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 37,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 247,
        "startLineNumber" : 35,
        "startColumnNumber" : 59,
        "endLineNumber" : 42,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Iterator<Span> sampled=spans.stream().filter(s -> (s.debug != null && s.debug) || this.sampler.test(s.traceId)).iterator();\n  spanStore.accept(sampled);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 43,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 398,
        "startLineNumber" : 31,
        "startColumnNumber" : 2,
        "endLineNumber" : 42,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Asynchronously writes spans to storage, subject to sampling policy.\n */\n@Async public void write(SpanStore spanStore,List<Span> spans){\n  Iterator<Span> sampled=spans.stream().filter(s -> (s.debug != null && s.debug) || this.sampler.test(s.traceId)).iterator();\n  spanStore.accept(sampled);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 61,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 179,
        "startLineNumber" : 36,
        "startColumnNumber" : 29,
        "endLineNumber" : 39,
        "endColumnNumber" : 19
      },
      "nodeContext" : "spans.stream().filter(s -> (s.debug != null && s.debug) || this.sampler.test(s.traceId)).iterator()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 29,
      "astHeight" : 9
    },
    "tokenLength" : 17,
    "type" : "java.util.stream.Stream<io.zipkin.Span>"
  } ],
  "positionList" : [ {
    "charLength" : 159,
    "startLineNumber" : 36,
    "startColumnNumber" : 29,
    "endLineNumber" : 38,
    "endColumnNumber" : 82
  } ],
  "layoutRelationDataList" : [ ]
}