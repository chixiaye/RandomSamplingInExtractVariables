{
  "id" : 357,
  "expression" : "\"exampleBuilder.with(\\\"key1\\\", \\\"val1\\\")\"",
  "projectName" : "mockito@mockito",
  "commitID" : "7f036eb9ed79444adcec3a6c635870222b109e50",
  "filePath" : "/src/test/java/org/mockitousage/verification/VerifyPrintsAllInvocationsOnErrorTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"exampleBuilder.with(\\\"key1\\\", \\\"val1\\\")\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 41,
      "startLineNumber" : 25,
      "startColumnNumber" : 47,
      "endLineNumber" : 25,
      "endColumnNumber" : 88
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 25,
        "startColumnNumber" : 12,
        "endLineNumber" : 25,
        "endColumnNumber" : 89
      },
      "nodeContext" : "assertThat(e).hasMessageContaining(\"exampleBuilder.with(\\\"key1\\\", \\\"val1\\\")\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 25,
        "startColumnNumber" : 12,
        "endLineNumber" : 25,
        "endColumnNumber" : 90
      },
      "nodeContext" : "assertThat(e).hasMessageContaining(\"exampleBuilder.with(\\\"key1\\\", \\\"val1\\\")\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 195,
        "startLineNumber" : 24,
        "startColumnNumber" : 42,
        "endLineNumber" : 27,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  assertThat(e).hasMessageContaining(\"exampleBuilder.with(\\\"key1\\\", \\\"val1\\\")\");\n  assertThat(e).hasMessageContaining(\"exampleBuilder.with(\\\"key2\\\", \\\"val2\\\"\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 227,
        "startLineNumber" : 24,
        "startColumnNumber" : 10,
        "endLineNumber" : 27,
        "endColumnNumber" : 9
      },
      "nodeContext" : "catch (ArgumentsAreDifferent e) {\n  assertThat(e).hasMessageContaining(\"exampleBuilder.with(\\\"key1\\\", \\\"val1\\\")\");\n  assertThat(e).hasMessageContaining(\"exampleBuilder.with(\\\"key2\\\", \\\"val2\\\"\");\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 334,
        "startLineNumber" : 21,
        "startColumnNumber" : 8,
        "endLineNumber" : 27,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  Mockito.verify(mockBuilder).with(\"key1\",\"wrongValue\");\n  fail();\n}\n catch (ArgumentsAreDifferent e) {\n  assertThat(e).hasMessageContaining(\"exampleBuilder.with(\\\"key1\\\", \\\"val1\\\")\");\n  assertThat(e).hasMessageContaining(\"exampleBuilder.with(\\\"key2\\\", \\\"val2\\\"\");\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 34,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 512,
        "startLineNumber" : 17,
        "startColumnNumber" : 51,
        "endLineNumber" : 28,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ExampleBuilder mockBuilder=Mockito.mock(ExampleBuilder.class);\n  mockBuilder.with(\"key1\",\"val1\");\n  mockBuilder.with(\"key2\",\"val2\");\n  try {\n    Mockito.verify(mockBuilder).with(\"key1\",\"wrongValue\");\n    fail();\n  }\n catch (  ArgumentsAreDifferent e) {\n    assertThat(e).hasMessageContaining(\"exampleBuilder.with(\\\"key1\\\", \\\"val1\\\")\");\n    assertThat(e).hasMessageContaining(\"exampleBuilder.with(\\\"key2\\\", \\\"val2\\\"\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 58,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 570,
        "startLineNumber" : 16,
        "startColumnNumber" : 4,
        "endLineNumber" : 28,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void shouldPrintAllInvocationsOnError(){\n  ExampleBuilder mockBuilder=Mockito.mock(ExampleBuilder.class);\n  mockBuilder.with(\"key1\",\"val1\");\n  mockBuilder.with(\"key2\",\"val2\");\n  try {\n    Mockito.verify(mockBuilder).with(\"key1\",\"wrongValue\");\n    fail();\n  }\n catch (  ArgumentsAreDifferent e) {\n    assertThat(e).hasMessageContaining(\"exampleBuilder.with(\\\"key1\\\", \\\"val1\\\")\");\n    assertThat(e).hasMessageContaining(\"exampleBuilder.with(\\\"key2\\\", \\\"val2\\\"\");\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 64,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 25,
        "startColumnNumber" : 12,
        "endLineNumber" : 25,
        "endColumnNumber" : 90
      },
      "nodeContext" : "assertThat(e).hasMessageContaining(\"exampleBuilder.with(\\\"key1\\\", \\\"val1\\\")\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 4,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 41,
    "startLineNumber" : 25,
    "startColumnNumber" : 47,
    "endLineNumber" : 25,
    "endColumnNumber" : 88
  } ],
  "layoutRelationDataList" : [ ]
}