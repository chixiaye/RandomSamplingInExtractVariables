{
  "id" : 81,
  "expression" : "TIME_OUT",
  "projectName" : "seata@seata",
  "commitID" : "42d41623178ab076b11b27a0f049ac3ed7f1a9dc",
  "filePath" : "/tm/src/test/java/io/seata/tm/api/transaction/TransactionInfoTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "TIME_OUT",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 60,
      "startColumnNumber" : 54,
      "endLineNumber" : 60,
      "endColumnNumber" : 62
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 60,
        "startColumnNumber" : 8,
        "endLineNumber" : 60,
        "endColumnNumber" : 63
      },
      "nodeContext" : "assertThat(fromTxInfo.getTimeOut()).isEqualTo(TIME_OUT)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 60,
        "startColumnNumber" : 8,
        "endLineNumber" : 60,
        "endColumnNumber" : 64
      },
      "nodeContext" : "assertThat(fromTxInfo.getTimeOut()).isEqualTo(TIME_OUT);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1238,
        "startLineNumber" : 45,
        "startColumnNumber" : 42,
        "endLineNumber" : 70,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String fromJson=\"{\\n\" + \"\\t\\\"name\\\":\\\"\" + NAME + \"\\\",\\n\"+ \"\\t\\\"rollbackRules\\\":[{\\n\"+ \"\\t\\t\\\"exceptionName\\\":\\\"\"+ Exception.class.getName()+ \"\\\"\\n\"+ \"\\t},{\\n\"+ \"\\t\\t\\\"exceptionName\\\":\\\"\"+ IllegalArgumentException.class.getName()+ \"\\\"\\n\"+ \"\\t},{\\n\"+ \"\\t\\t\\\"exceptionName\\\":\\\"\"+ IO_EXCEPTION_SHORT_NAME+ \"\\\"\\n\"+ \"\\t},{\\n\"+ \"\\t\\t\\\"exceptionName\\\":\\\"\"+ NullPointerException.class.getName()+ \"\\\"\\n\"+ \"\\t}],\\n\"+ \"\\t\\\"timeOut\\\":30000\\n\"+ \"}\";\n  TransactionInfo fromTxInfo=JSON.parseObject(fromJson,TransactionInfo.class);\n  assertThat(fromTxInfo.getTimeOut()).isEqualTo(TIME_OUT);\n  assertThat(fromTxInfo.getName()).isEqualTo(NAME);\n  assertThat(fromTxInfo.getRollbackRules()).isEqualTo(getRollbackRules());\n  TransactionInfo toTxInfo=new TransactionInfo();\n  toTxInfo.setTimeOut(TIME_OUT);\n  toTxInfo.setName(NAME);\n  toTxInfo.setRollbackRules(getRollbackRules());\n  String toJson=JSON.toJSONString(toTxInfo,true);\n  assertThat(fromJson).isEqualTo(toJson);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 124,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1339,
        "startLineNumber" : 41,
        "startColumnNumber" : 4,
        "endLineNumber" : 70,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Test field get set from json.\n */\n@Test public void testFieldGetSetFromJson(){\n  String fromJson=\"{\\n\" + \"\\t\\\"name\\\":\\\"\" + NAME + \"\\\",\\n\"+ \"\\t\\\"rollbackRules\\\":[{\\n\"+ \"\\t\\t\\\"exceptionName\\\":\\\"\"+ Exception.class.getName()+ \"\\\"\\n\"+ \"\\t},{\\n\"+ \"\\t\\t\\\"exceptionName\\\":\\\"\"+ IllegalArgumentException.class.getName()+ \"\\\"\\n\"+ \"\\t},{\\n\"+ \"\\t\\t\\\"exceptionName\\\":\\\"\"+ IO_EXCEPTION_SHORT_NAME+ \"\\\"\\n\"+ \"\\t},{\\n\"+ \"\\t\\t\\\"exceptionName\\\":\\\"\"+ NullPointerException.class.getName()+ \"\\\"\\n\"+ \"\\t}],\\n\"+ \"\\t\\\"timeOut\\\":30000\\n\"+ \"}\";\n  TransactionInfo fromTxInfo=JSON.parseObject(fromJson,TransactionInfo.class);\n  assertThat(fromTxInfo.getTimeOut()).isEqualTo(TIME_OUT);\n  assertThat(fromTxInfo.getName()).isEqualTo(NAME);\n  assertThat(fromTxInfo.getRollbackRules()).isEqualTo(getRollbackRules());\n  TransactionInfo toTxInfo=new TransactionInfo();\n  toTxInfo.setTimeOut(TIME_OUT);\n  toTxInfo.setName(NAME);\n  toTxInfo.setRollbackRules(getRollbackRules());\n  String toJson=JSON.toJSONString(toTxInfo,true);\n  assertThat(fromJson).isEqualTo(toJson);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 131,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 60,
        "startColumnNumber" : 8,
        "endLineNumber" : 60,
        "endColumnNumber" : 64
      },
      "nodeContext" : "assertThat(fromTxInfo.getTimeOut()).isEqualTo(TIME_OUT);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "int"
  }, {
    "nodeContext" : "TIME_OUT",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 65,
      "startColumnNumber" : 28,
      "endLineNumber" : 65,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 65,
        "startColumnNumber" : 8,
        "endLineNumber" : 65,
        "endColumnNumber" : 37
      },
      "nodeContext" : "toTxInfo.setTimeOut(TIME_OUT)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 65,
        "startColumnNumber" : 8,
        "endLineNumber" : 65,
        "endColumnNumber" : 38
      },
      "nodeContext" : "toTxInfo.setTimeOut(TIME_OUT);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1238,
        "startLineNumber" : 45,
        "startColumnNumber" : 42,
        "endLineNumber" : 70,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String fromJson=\"{\\n\" + \"\\t\\\"name\\\":\\\"\" + NAME + \"\\\",\\n\"+ \"\\t\\\"rollbackRules\\\":[{\\n\"+ \"\\t\\t\\\"exceptionName\\\":\\\"\"+ Exception.class.getName()+ \"\\\"\\n\"+ \"\\t},{\\n\"+ \"\\t\\t\\\"exceptionName\\\":\\\"\"+ IllegalArgumentException.class.getName()+ \"\\\"\\n\"+ \"\\t},{\\n\"+ \"\\t\\t\\\"exceptionName\\\":\\\"\"+ IO_EXCEPTION_SHORT_NAME+ \"\\\"\\n\"+ \"\\t},{\\n\"+ \"\\t\\t\\\"exceptionName\\\":\\\"\"+ NullPointerException.class.getName()+ \"\\\"\\n\"+ \"\\t}],\\n\"+ \"\\t\\\"timeOut\\\":30000\\n\"+ \"}\";\n  TransactionInfo fromTxInfo=JSON.parseObject(fromJson,TransactionInfo.class);\n  assertThat(fromTxInfo.getTimeOut()).isEqualTo(TIME_OUT);\n  assertThat(fromTxInfo.getName()).isEqualTo(NAME);\n  assertThat(fromTxInfo.getRollbackRules()).isEqualTo(getRollbackRules());\n  TransactionInfo toTxInfo=new TransactionInfo();\n  toTxInfo.setTimeOut(TIME_OUT);\n  toTxInfo.setName(NAME);\n  toTxInfo.setRollbackRules(getRollbackRules());\n  String toJson=JSON.toJSONString(toTxInfo,true);\n  assertThat(fromJson).isEqualTo(toJson);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 124,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1339,
        "startLineNumber" : 41,
        "startColumnNumber" : 4,
        "endLineNumber" : 70,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Test field get set from json.\n */\n@Test public void testFieldGetSetFromJson(){\n  String fromJson=\"{\\n\" + \"\\t\\\"name\\\":\\\"\" + NAME + \"\\\",\\n\"+ \"\\t\\\"rollbackRules\\\":[{\\n\"+ \"\\t\\t\\\"exceptionName\\\":\\\"\"+ Exception.class.getName()+ \"\\\"\\n\"+ \"\\t},{\\n\"+ \"\\t\\t\\\"exceptionName\\\":\\\"\"+ IllegalArgumentException.class.getName()+ \"\\\"\\n\"+ \"\\t},{\\n\"+ \"\\t\\t\\\"exceptionName\\\":\\\"\"+ IO_EXCEPTION_SHORT_NAME+ \"\\\"\\n\"+ \"\\t},{\\n\"+ \"\\t\\t\\\"exceptionName\\\":\\\"\"+ NullPointerException.class.getName()+ \"\\\"\\n\"+ \"\\t}],\\n\"+ \"\\t\\\"timeOut\\\":30000\\n\"+ \"}\";\n  TransactionInfo fromTxInfo=JSON.parseObject(fromJson,TransactionInfo.class);\n  assertThat(fromTxInfo.getTimeOut()).isEqualTo(TIME_OUT);\n  assertThat(fromTxInfo.getName()).isEqualTo(NAME);\n  assertThat(fromTxInfo.getRollbackRules()).isEqualTo(getRollbackRules());\n  TransactionInfo toTxInfo=new TransactionInfo();\n  toTxInfo.setTimeOut(TIME_OUT);\n  toTxInfo.setName(NAME);\n  toTxInfo.setRollbackRules(getRollbackRules());\n  String toJson=JSON.toJSONString(toTxInfo,true);\n  assertThat(fromJson).isEqualTo(toJson);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 131,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 65,
        "startColumnNumber" : 8,
        "endLineNumber" : 65,
        "endColumnNumber" : 38
      },
      "nodeContext" : "toTxInfo.setTimeOut(TIME_OUT);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 8,
    "startLineNumber" : 60,
    "startColumnNumber" : 54,
    "endLineNumber" : 60,
    "endColumnNumber" : 62
  }, {
    "charLength" : 8,
    "startLineNumber" : 65,
    "startColumnNumber" : 28,
    "endLineNumber" : 65,
    "endColumnNumber" : 36
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}