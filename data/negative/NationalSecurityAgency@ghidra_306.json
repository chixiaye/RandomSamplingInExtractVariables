{
  "id" : 306,
  "expression" : "results",
  "projectName" : "NationalSecurityAgency@ghidra",
  "commitID" : "a54d0e28d652c48502551a88278808549aed5f98",
  "filePath" : "/Ghidra/Features/Base/src/main/java/ghidra/app/cmd/function/FunctionStackAnalysisCmd.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "results",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 345,
      "startColumnNumber" : 7,
      "endLineNumber" : 345,
      "endColumnNumber" : 14
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 345,
        "startColumnNumber" : 7,
        "endLineNumber" : 345,
        "endColumnNumber" : 21
      },
      "nodeContext" : "results.length",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 345,
        "startColumnNumber" : 7,
        "endLineNumber" : 345,
        "endColumnNumber" : 26
      },
      "nodeContext" : "results.length == 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 345,
        "startColumnNumber" : 7,
        "endLineNumber" : 345,
        "endColumnNumber" : 60
      },
      "nodeContext" : "results.length == 1 && results[0] instanceof Register",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 124,
        "startLineNumber" : 345,
        "startColumnNumber" : 3,
        "endLineNumber" : 347,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (results.length == 1 && results[0] instanceof Register) {\n  return ((Register)results[0]).getMinimumByteSize();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 24,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 184,
        "startLineNumber" : 343,
        "startColumnNumber" : 7,
        "endLineNumber" : 348,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Object results[]=instr.getResultObjects();\n  if (results.length == 1 && results[0] instanceof Register) {\n    return ((Register)results[0]).getMinimumByteSize();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 34,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 602,
        "startLineNumber" : 330,
        "startColumnNumber" : 2,
        "endLineNumber" : 348,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (instr.getProgram().getLanguage().supportsPcode()) {\n  PcodeOp[] pcode=instr.getPcode();\n  for (int i=pcode.length - 1; i >= 0; i--) {\n    if (pcode[i].getOpcode() == PcodeOp.LOAD) {\n      Varnode out=pcode[i].getOutput();\n      return out.getSize();\n    }\n    if (pcode[i].getOpcode() == PcodeOp.STORE) {\n      Varnode src=pcode[i].getInput(2);\n      return src.getSize();\n    }\n  }\n}\n else {\n  Object results[]=instr.getResultObjects();\n  if (results.length == 1 && results[0] instanceof Register) {\n    return ((Register)results[0]).getMinimumByteSize();\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 120,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 624,
        "startLineNumber" : 329,
        "startColumnNumber" : 56,
        "endLineNumber" : 350,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (instr.getProgram().getLanguage().supportsPcode()) {\n    PcodeOp[] pcode=instr.getPcode();\n    for (int i=pcode.length - 1; i >= 0; i--) {\n      if (pcode[i].getOpcode() == PcodeOp.LOAD) {\n        Varnode out=pcode[i].getOutput();\n        return out.getSize();\n      }\n      if (pcode[i].getOpcode() == PcodeOp.STORE) {\n        Varnode src=pcode[i].getInput(2);\n        return src.getSize();\n      }\n    }\n  }\n else {\n    Object results[]=instr.getResultObjects();\n    if (results.length == 1 && results[0] instanceof Register) {\n      return ((Register)results[0]).getMinimumByteSize();\n    }\n  }\n  return 0;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 123,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 929,
        "startLineNumber" : 321,
        "startColumnNumber" : 1,
        "endLineNumber" : 350,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Look at the result register to try and figure out stack access size.\n * @param instr instruction being analyzed\n * @param opIndex operand that has a stack reference.\n * @return size of value referenced on the stack\n */\nprivate int getRefSize(Instruction instr,int opIndex){\n  if (instr.getProgram().getLanguage().supportsPcode()) {\n    PcodeOp[] pcode=instr.getPcode();\n    for (int i=pcode.length - 1; i >= 0; i--) {\n      if (pcode[i].getOpcode() == PcodeOp.LOAD) {\n        Varnode out=pcode[i].getOutput();\n        return out.getSize();\n      }\n      if (pcode[i].getOpcode() == PcodeOp.STORE) {\n        Varnode src=pcode[i].getInput(2);\n        return src.getSize();\n      }\n    }\n  }\n else {\n    Object results[]=instr.getResultObjects();\n    if (results.length == 1 && results[0] instanceof Register) {\n      return ((Register)results[0]).getMinimumByteSize();\n    }\n  }\n  return 0;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 135,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 345,
        "startColumnNumber" : 7,
        "endLineNumber" : 345,
        "endColumnNumber" : 60
      },
      "nodeContext" : "results.length == 1 && results[0] instanceof Register",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 12,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.Object[]"
  }, {
    "nodeContext" : "results",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 345,
      "startColumnNumber" : 30,
      "endLineNumber" : 345,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InstanceofExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 345,
        "startColumnNumber" : 30,
        "endLineNumber" : 345,
        "endColumnNumber" : 40
      },
      "nodeContext" : "results[0]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 345,
        "startColumnNumber" : 30,
        "endLineNumber" : 345,
        "endColumnNumber" : 60
      },
      "nodeContext" : "results[0] instanceof Register",
      "nodeType" : "InstanceofExpression",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 345,
        "startColumnNumber" : 7,
        "endLineNumber" : 345,
        "endColumnNumber" : 60
      },
      "nodeContext" : "results.length == 1 && results[0] instanceof Register",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 124,
        "startLineNumber" : 345,
        "startColumnNumber" : 3,
        "endLineNumber" : 347,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (results.length == 1 && results[0] instanceof Register) {\n  return ((Register)results[0]).getMinimumByteSize();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 24,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 184,
        "startLineNumber" : 343,
        "startColumnNumber" : 7,
        "endLineNumber" : 348,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Object results[]=instr.getResultObjects();\n  if (results.length == 1 && results[0] instanceof Register) {\n    return ((Register)results[0]).getMinimumByteSize();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 34,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 602,
        "startLineNumber" : 330,
        "startColumnNumber" : 2,
        "endLineNumber" : 348,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (instr.getProgram().getLanguage().supportsPcode()) {\n  PcodeOp[] pcode=instr.getPcode();\n  for (int i=pcode.length - 1; i >= 0; i--) {\n    if (pcode[i].getOpcode() == PcodeOp.LOAD) {\n      Varnode out=pcode[i].getOutput();\n      return out.getSize();\n    }\n    if (pcode[i].getOpcode() == PcodeOp.STORE) {\n      Varnode src=pcode[i].getInput(2);\n      return src.getSize();\n    }\n  }\n}\n else {\n  Object results[]=instr.getResultObjects();\n  if (results.length == 1 && results[0] instanceof Register) {\n    return ((Register)results[0]).getMinimumByteSize();\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 120,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 624,
        "startLineNumber" : 329,
        "startColumnNumber" : 56,
        "endLineNumber" : 350,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (instr.getProgram().getLanguage().supportsPcode()) {\n    PcodeOp[] pcode=instr.getPcode();\n    for (int i=pcode.length - 1; i >= 0; i--) {\n      if (pcode[i].getOpcode() == PcodeOp.LOAD) {\n        Varnode out=pcode[i].getOutput();\n        return out.getSize();\n      }\n      if (pcode[i].getOpcode() == PcodeOp.STORE) {\n        Varnode src=pcode[i].getInput(2);\n        return src.getSize();\n      }\n    }\n  }\n else {\n    Object results[]=instr.getResultObjects();\n    if (results.length == 1 && results[0] instanceof Register) {\n      return ((Register)results[0]).getMinimumByteSize();\n    }\n  }\n  return 0;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 123,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 929,
        "startLineNumber" : 321,
        "startColumnNumber" : 1,
        "endLineNumber" : 350,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Look at the result register to try and figure out stack access size.\n * @param instr instruction being analyzed\n * @param opIndex operand that has a stack reference.\n * @return size of value referenced on the stack\n */\nprivate int getRefSize(Instruction instr,int opIndex){\n  if (instr.getProgram().getLanguage().supportsPcode()) {\n    PcodeOp[] pcode=instr.getPcode();\n    for (int i=pcode.length - 1; i >= 0; i--) {\n      if (pcode[i].getOpcode() == PcodeOp.LOAD) {\n        Varnode out=pcode[i].getOutput();\n        return out.getSize();\n      }\n      if (pcode[i].getOpcode() == PcodeOp.STORE) {\n        Varnode src=pcode[i].getInput(2);\n        return src.getSize();\n      }\n    }\n  }\n else {\n    Object results[]=instr.getResultObjects();\n    if (results.length == 1 && results[0] instanceof Register) {\n      return ((Register)results[0]).getMinimumByteSize();\n    }\n  }\n  return 0;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 135,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 345,
        "startColumnNumber" : 7,
        "endLineNumber" : 345,
        "endColumnNumber" : 60
      },
      "nodeContext" : "results.length == 1 && results[0] instanceof Register",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 12,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.Object[]"
  }, {
    "nodeContext" : "results",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 346,
      "startColumnNumber" : 23,
      "endLineNumber" : 346,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CastExpression,expression]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 346,
        "startColumnNumber" : 23,
        "endLineNumber" : 346,
        "endColumnNumber" : 33
      },
      "nodeContext" : "results[0]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 346,
        "startColumnNumber" : 12,
        "endLineNumber" : 346,
        "endColumnNumber" : 33
      },
      "nodeContext" : "(Register)results[0]",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 346,
        "startColumnNumber" : 11,
        "endLineNumber" : 346,
        "endColumnNumber" : 34
      },
      "nodeContext" : "((Register)results[0])",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 346,
        "startColumnNumber" : 11,
        "endLineNumber" : 346,
        "endColumnNumber" : 55
      },
      "nodeContext" : "((Register)results[0]).getMinimumByteSize()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 346,
        "startColumnNumber" : 4,
        "endLineNumber" : 346,
        "endColumnNumber" : 56
      },
      "nodeContext" : "return ((Register)results[0]).getMinimumByteSize();\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 345,
        "startColumnNumber" : 62,
        "endLineNumber" : 347,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  return ((Register)results[0]).getMinimumByteSize();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 11,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 124,
        "startLineNumber" : 345,
        "startColumnNumber" : 3,
        "endLineNumber" : 347,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (results.length == 1 && results[0] instanceof Register) {\n  return ((Register)results[0]).getMinimumByteSize();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 24,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 184,
        "startLineNumber" : 343,
        "startColumnNumber" : 7,
        "endLineNumber" : 348,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Object results[]=instr.getResultObjects();\n  if (results.length == 1 && results[0] instanceof Register) {\n    return ((Register)results[0]).getMinimumByteSize();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 34,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 602,
        "startLineNumber" : 330,
        "startColumnNumber" : 2,
        "endLineNumber" : 348,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (instr.getProgram().getLanguage().supportsPcode()) {\n  PcodeOp[] pcode=instr.getPcode();\n  for (int i=pcode.length - 1; i >= 0; i--) {\n    if (pcode[i].getOpcode() == PcodeOp.LOAD) {\n      Varnode out=pcode[i].getOutput();\n      return out.getSize();\n    }\n    if (pcode[i].getOpcode() == PcodeOp.STORE) {\n      Varnode src=pcode[i].getInput(2);\n      return src.getSize();\n    }\n  }\n}\n else {\n  Object results[]=instr.getResultObjects();\n  if (results.length == 1 && results[0] instanceof Register) {\n    return ((Register)results[0]).getMinimumByteSize();\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 120,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 624,
        "startLineNumber" : 329,
        "startColumnNumber" : 56,
        "endLineNumber" : 350,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (instr.getProgram().getLanguage().supportsPcode()) {\n    PcodeOp[] pcode=instr.getPcode();\n    for (int i=pcode.length - 1; i >= 0; i--) {\n      if (pcode[i].getOpcode() == PcodeOp.LOAD) {\n        Varnode out=pcode[i].getOutput();\n        return out.getSize();\n      }\n      if (pcode[i].getOpcode() == PcodeOp.STORE) {\n        Varnode src=pcode[i].getInput(2);\n        return src.getSize();\n      }\n    }\n  }\n else {\n    Object results[]=instr.getResultObjects();\n    if (results.length == 1 && results[0] instanceof Register) {\n      return ((Register)results[0]).getMinimumByteSize();\n    }\n  }\n  return 0;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 123,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 929,
        "startLineNumber" : 321,
        "startColumnNumber" : 1,
        "endLineNumber" : 350,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Look at the result register to try and figure out stack access size.\n * @param instr instruction being analyzed\n * @param opIndex operand that has a stack reference.\n * @return size of value referenced on the stack\n */\nprivate int getRefSize(Instruction instr,int opIndex){\n  if (instr.getProgram().getLanguage().supportsPcode()) {\n    PcodeOp[] pcode=instr.getPcode();\n    for (int i=pcode.length - 1; i >= 0; i--) {\n      if (pcode[i].getOpcode() == PcodeOp.LOAD) {\n        Varnode out=pcode[i].getOutput();\n        return out.getSize();\n      }\n      if (pcode[i].getOpcode() == PcodeOp.STORE) {\n        Varnode src=pcode[i].getInput(2);\n        return src.getSize();\n      }\n    }\n  }\n else {\n    Object results[]=instr.getResultObjects();\n    if (results.length == 1 && results[0] instanceof Register) {\n      return ((Register)results[0]).getMinimumByteSize();\n    }\n  }\n  return 0;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 135,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 346,
        "startColumnNumber" : 4,
        "endLineNumber" : 346,
        "endColumnNumber" : 56
      },
      "nodeContext" : "return ((Register)results[0]).getMinimumByteSize();\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 10,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.lang.Object[]"
  } ],
  "positionList" : [ {
    "charLength" : 7,
    "startLineNumber" : 345,
    "startColumnNumber" : 7,
    "endLineNumber" : 345,
    "endColumnNumber" : 14
  }, {
    "charLength" : 7,
    "startLineNumber" : 345,
    "startColumnNumber" : 30,
    "endLineNumber" : 345,
    "endColumnNumber" : 37
  }, {
    "charLength" : 7,
    "startLineNumber" : 346,
    "startColumnNumber" : 23,
    "endLineNumber" : 346,
    "endColumnNumber" : 30
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 6
  } ]
}