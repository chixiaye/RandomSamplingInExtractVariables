{
  "id" : 384,
  "expression" : "phaseHeat",
  "projectName" : "Anuken@Mindustry",
  "commitID" : "a7188c48845dd423fc9b58bc6bcf6797f6d25b46",
  "filePath" : "/core/src/mindustry/world/blocks/defense/MendProjector.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "phaseHeat",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 77,
      "startColumnNumber" : 40,
      "endLineNumber" : 77,
      "endColumnNumber" : 49
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 77,
        "startColumnNumber" : 24,
        "endLineNumber" : 77,
        "endColumnNumber" : 89
      },
      "nodeContext" : "Mathf.lerpDelta(phaseHeat,Mathf.num(cons.optionalValid()),0.1f)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 77,
        "startColumnNumber" : 12,
        "endLineNumber" : 77,
        "endColumnNumber" : 89
      },
      "nodeContext" : "phaseHeat=Mathf.lerpDelta(phaseHeat,Mathf.num(cons.optionalValid()),0.1f)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 77,
        "startColumnNumber" : 12,
        "endLineNumber" : 77,
        "endColumnNumber" : 90
      },
      "nodeContext" : "phaseHeat=Mathf.lerpDelta(phaseHeat,Mathf.num(cons.optionalValid()),0.1f);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 942,
        "startLineNumber" : 72,
        "startColumnNumber" : 32,
        "endLineNumber" : 92,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  smoothEfficiency=Mathf.lerpDelta(smoothEfficiency,efficiency(),0.08f);\n  heat=Mathf.lerpDelta(heat,consValid() || cheating() ? 1f : 0f,0.08f);\n  charge+=heat * delta();\n  phaseHeat=Mathf.lerpDelta(phaseHeat,Mathf.num(cons.optionalValid()),0.1f);\n  if (cons.optionalValid() && timer(timerUse,useTime) && efficiency() > 0) {\n    consume();\n  }\n  if (charge >= reload) {\n    float realRange=range + phaseHeat * phaseRangeBoost;\n    charge=0f;\n    indexer.eachBlock(this,realRange,other -> other.damaged(),other -> {\n      other.heal(other.maxHealth() * (healPercent + phaseHeat * phaseBoost) / 100f * efficiency());\n      Fx.healBlockFull.at(other.x,other.y,other.block.size,Tmp.c1.set(baseColor).lerp(phaseColor,phaseHeat));\n    }\n);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 145,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 984,
        "startLineNumber" : 71,
        "startColumnNumber" : 8,
        "endLineNumber" : 92,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override public void updateTile(){\n  smoothEfficiency=Mathf.lerpDelta(smoothEfficiency,efficiency(),0.08f);\n  heat=Mathf.lerpDelta(heat,consValid() || cheating() ? 1f : 0f,0.08f);\n  charge+=heat * delta();\n  phaseHeat=Mathf.lerpDelta(phaseHeat,Mathf.num(cons.optionalValid()),0.1f);\n  if (cons.optionalValid() && timer(timerUse,useTime) && efficiency() > 0) {\n    consume();\n  }\n  if (charge >= reload) {\n    float realRange=range + phaseHeat * phaseRangeBoost;\n    charge=0f;\n    indexer.eachBlock(this,realRange,other -> other.damaged(),other -> {\n      other.heal(other.maxHealth() * (healPercent + phaseHeat * phaseBoost) / 100f * efficiency());\n      Fx.healBlockFull.at(other.x,other.y,other.block.size,Tmp.c1.set(baseColor).lerp(phaseColor,phaseHeat));\n    }\n);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 151,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 77,
        "startColumnNumber" : 12,
        "endLineNumber" : 77,
        "endColumnNumber" : 90
      },
      "nodeContext" : "phaseHeat=Mathf.lerpDelta(phaseHeat,Mathf.num(cons.optionalValid()),0.1f);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "float"
  }, {
    "nodeContext" : "phaseHeat",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 84,
      "startColumnNumber" : 42,
      "endLineNumber" : 84,
      "endColumnNumber" : 51
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 84,
        "startColumnNumber" : 42,
        "endLineNumber" : 84,
        "endColumnNumber" : 69
      },
      "nodeContext" : "phaseHeat * phaseRangeBoost",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 84,
        "startColumnNumber" : 34,
        "endLineNumber" : 84,
        "endColumnNumber" : 69
      },
      "nodeContext" : "range + phaseHeat * phaseRangeBoost",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 84,
        "startColumnNumber" : 22,
        "endLineNumber" : 84,
        "endColumnNumber" : 69
      },
      "nodeContext" : "realRange=range + phaseHeat * phaseRangeBoost",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 84,
        "startColumnNumber" : 16,
        "endLineNumber" : 84,
        "endColumnNumber" : 70
      },
      "nodeContext" : "float realRange=range + phaseHeat * phaseRangeBoost;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 466,
        "startLineNumber" : 83,
        "startColumnNumber" : 32,
        "endLineNumber" : 91,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  float realRange=range + phaseHeat * phaseRangeBoost;\n  charge=0f;\n  indexer.eachBlock(this,realRange,other -> other.damaged(),other -> {\n    other.heal(other.maxHealth() * (healPercent + phaseHeat * phaseBoost) / 100f * efficiency());\n    Fx.healBlockFull.at(other.x,other.y,other.block.size,Tmp.c1.set(baseColor).lerp(phaseColor,phaseHeat));\n  }\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 76,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 486,
        "startLineNumber" : 83,
        "startColumnNumber" : 12,
        "endLineNumber" : 91,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (charge >= reload) {\n  float realRange=range + phaseHeat * phaseRangeBoost;\n  charge=0f;\n  indexer.eachBlock(this,realRange,other -> other.damaged(),other -> {\n    other.heal(other.maxHealth() * (healPercent + phaseHeat * phaseBoost) / 100f * efficiency());\n    Fx.healBlockFull.at(other.x,other.y,other.block.size,Tmp.c1.set(baseColor).lerp(phaseColor,phaseHeat));\n  }\n);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 80,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 942,
        "startLineNumber" : 72,
        "startColumnNumber" : 32,
        "endLineNumber" : 92,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  smoothEfficiency=Mathf.lerpDelta(smoothEfficiency,efficiency(),0.08f);\n  heat=Mathf.lerpDelta(heat,consValid() || cheating() ? 1f : 0f,0.08f);\n  charge+=heat * delta();\n  phaseHeat=Mathf.lerpDelta(phaseHeat,Mathf.num(cons.optionalValid()),0.1f);\n  if (cons.optionalValid() && timer(timerUse,useTime) && efficiency() > 0) {\n    consume();\n  }\n  if (charge >= reload) {\n    float realRange=range + phaseHeat * phaseRangeBoost;\n    charge=0f;\n    indexer.eachBlock(this,realRange,other -> other.damaged(),other -> {\n      other.heal(other.maxHealth() * (healPercent + phaseHeat * phaseBoost) / 100f * efficiency());\n      Fx.healBlockFull.at(other.x,other.y,other.block.size,Tmp.c1.set(baseColor).lerp(phaseColor,phaseHeat));\n    }\n);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 145,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 984,
        "startLineNumber" : 71,
        "startColumnNumber" : 8,
        "endLineNumber" : 92,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override public void updateTile(){\n  smoothEfficiency=Mathf.lerpDelta(smoothEfficiency,efficiency(),0.08f);\n  heat=Mathf.lerpDelta(heat,consValid() || cheating() ? 1f : 0f,0.08f);\n  charge+=heat * delta();\n  phaseHeat=Mathf.lerpDelta(phaseHeat,Mathf.num(cons.optionalValid()),0.1f);\n  if (cons.optionalValid() && timer(timerUse,useTime) && efficiency() > 0) {\n    consume();\n  }\n  if (charge >= reload) {\n    float realRange=range + phaseHeat * phaseRangeBoost;\n    charge=0f;\n    indexer.eachBlock(this,realRange,other -> other.damaged(),other -> {\n      other.heal(other.maxHealth() * (healPercent + phaseHeat * phaseBoost) / 100f * efficiency());\n      Fx.healBlockFull.at(other.x,other.y,other.block.size,Tmp.c1.set(baseColor).lerp(phaseColor,phaseHeat));\n    }\n);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 151,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 84,
        "startColumnNumber" : 16,
        "endLineNumber" : 84,
        "endColumnNumber" : 70
      },
      "nodeContext" : "float realRange=range + phaseHeat * phaseRangeBoost;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "float"
  } ],
  "positionList" : [ {
    "charLength" : 9,
    "startLineNumber" : 77,
    "startColumnNumber" : 40,
    "endLineNumber" : 77,
    "endColumnNumber" : 49
  }, {
    "charLength" : 9,
    "startLineNumber" : 84,
    "startColumnNumber" : 42,
    "endLineNumber" : 84,
    "endColumnNumber" : 51
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 6
  } ]
}