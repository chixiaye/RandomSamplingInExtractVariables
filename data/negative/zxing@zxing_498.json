{
  "id" : 498,
  "expression" : "POINT_SIZE",
  "projectName" : "zxing@zxing",
  "commitID" : "6f5841d8bb70374fedfd6a336c19abd495e8f4ad",
  "filePath" : "android/src/com/google/zxing/client/android/ViewfinderView.java",
  "occurrences" : 6,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "POINT_SIZE",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 135,
      "startColumnNumber" : 30,
      "endLineNumber" : 135,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 181,
        "startLineNumber" : 133,
        "startColumnNumber" : 12,
        "endLineNumber" : 135,
        "endColumnNumber" : 48
      },
      "nodeContext" : "canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 25,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 182,
        "startLineNumber" : 133,
        "startColumnNumber" : 12,
        "endLineNumber" : 135,
        "endColumnNumber" : 49
      },
      "nodeContext" : "canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 26,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 208,
        "startLineNumber" : 132,
        "startColumnNumber" : 52,
        "endLineNumber" : 136,
        "endColumnNumber" : 11
      },
      "nodeContext" : "{\n  canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 27,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 250,
        "startLineNumber" : 132,
        "startColumnNumber" : 10,
        "endLineNumber" : 136,
        "endColumnNumber" : 11
      },
      "nodeContext" : "for (ResultPoint point : currentPossible) {\n  canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 33,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.SynchronizedStatement,body]",
      "nodePosition" : {
        "charLength" : 272,
        "startLineNumber" : 131,
        "startColumnNumber" : 39,
        "endLineNumber" : 137,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  for (  ResultPoint point : currentPossible) {\n    canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 34,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 303,
        "startLineNumber" : 131,
        "startColumnNumber" : 8,
        "endLineNumber" : 137,
        "endColumnNumber" : 9
      },
      "nodeContext" : "synchronized (currentPossible) {\n  for (  ResultPoint point : currentPossible) {\n    canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n  }\n}\n",
      "nodeType" : "SynchronizedStatement",
      "astNodeNumber" : 36,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 524,
        "startLineNumber" : 126,
        "startColumnNumber" : 13,
        "endLineNumber" : 138,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  possibleResultPoints=new ArrayList<ResultPoint>(5);\n  lastPossibleResultPoints=currentPossible;\n  paint.setAlpha(CURRENT_POINT_OPACITY);\n  paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n    for (    ResultPoint point : currentPossible) {\n      canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 61,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 611,
        "startLineNumber" : 124,
        "startColumnNumber" : 6,
        "endLineNumber" : 138,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (currentPossible.isEmpty()) {\n  lastPossibleResultPoints=null;\n}\n else {\n  possibleResultPoints=new ArrayList<ResultPoint>(5);\n  lastPossibleResultPoints=currentPossible;\n  paint.setAlpha(CURRENT_POINT_OPACITY);\n  paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n    for (    ResultPoint point : currentPossible) {\n      canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 70,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2709,
        "startLineNumber" : 100,
        "startColumnNumber" : 11,
        "endLineNumber" : 158,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  paint.setColor(frameColor);\n  canvas.drawRect(frame.left,frame.top,frame.right + 1,frame.top + 2,paint);\n  canvas.drawRect(frame.left,frame.top + 2,frame.left + 2,frame.bottom - 1,paint);\n  canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n  canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n  paint.setColor(laserColor);\n  paint.setAlpha(SCANNER_ALPHA[scannerAlpha]);\n  scannerAlpha=(scannerAlpha + 1) % SCANNER_ALPHA.length;\n  int middle=frame.height() / 2 + frame.top;\n  canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint);\n  Rect previewFrame=cameraManager.getFramingRectInPreview();\n  float scaleX=frame.width() / (float)previewFrame.width();\n  float scaleY=frame.height() / (float)previewFrame.height();\n  List<ResultPoint> currentPossible=possibleResultPoints;\n  List<ResultPoint> currentLast=lastPossibleResultPoints;\n  int frameLeft=frame.left;\n  int frameTop=frame.top;\n  if (currentPossible.isEmpty()) {\n    lastPossibleResultPoints=null;\n  }\n else {\n    possibleResultPoints=new ArrayList<ResultPoint>(5);\n    lastPossibleResultPoints=currentPossible;\n    paint.setAlpha(CURRENT_POINT_OPACITY);\n    paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n      for (      ResultPoint point : currentPossible) {\n        canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n      }\n    }\n  }\n  if (currentLast != null) {\n    paint.setAlpha(CURRENT_POINT_OPACITY / 2);\n    paint.setColor(resultPointColor);\nsynchronized (currentLast) {\n      for (      ResultPoint point : currentLast) {\n        canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE / 2,paint);\n      }\n    }\n  }\n  postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 368,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2919,
        "startLineNumber" : 96,
        "startColumnNumber" : 4,
        "endLineNumber" : 158,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (resultBitmap != null) {\n  paint.setAlpha(CURRENT_POINT_OPACITY);\n  canvas.drawBitmap(resultBitmap,null,frame,paint);\n}\n else {\n  paint.setColor(frameColor);\n  canvas.drawRect(frame.left,frame.top,frame.right + 1,frame.top + 2,paint);\n  canvas.drawRect(frame.left,frame.top + 2,frame.left + 2,frame.bottom - 1,paint);\n  canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n  canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n  paint.setColor(laserColor);\n  paint.setAlpha(SCANNER_ALPHA[scannerAlpha]);\n  scannerAlpha=(scannerAlpha + 1) % SCANNER_ALPHA.length;\n  int middle=frame.height() / 2 + frame.top;\n  canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint);\n  Rect previewFrame=cameraManager.getFramingRectInPreview();\n  float scaleX=frame.width() / (float)previewFrame.width();\n  float scaleY=frame.height() / (float)previewFrame.height();\n  List<ResultPoint> currentPossible=possibleResultPoints;\n  List<ResultPoint> currentLast=lastPossibleResultPoints;\n  int frameLeft=frame.left;\n  int frameTop=frame.top;\n  if (currentPossible.isEmpty()) {\n    lastPossibleResultPoints=null;\n  }\n else {\n    possibleResultPoints=new ArrayList<ResultPoint>(5);\n    lastPossibleResultPoints=currentPossible;\n    paint.setAlpha(CURRENT_POINT_OPACITY);\n    paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n      for (      ResultPoint point : currentPossible) {\n        canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n      }\n    }\n  }\n  if (currentLast != null) {\n    paint.setAlpha(CURRENT_POINT_OPACITY / 2);\n    paint.setColor(resultPointColor);\nsynchronized (currentLast) {\n      for (      ResultPoint point : currentLast) {\n        canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE / 2,paint);\n      }\n    }\n  }\n  postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 386,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3608,
        "startLineNumber" : 77,
        "startColumnNumber" : 36,
        "endLineNumber" : 159,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  CameraManager cameraManager=CameraManager.get();\n  if (cameraManager == null) {\n    return;\n  }\n  Rect frame=cameraManager.getFramingRect();\n  if (frame == null) {\n    return;\n  }\n  int width=canvas.getWidth();\n  int height=canvas.getHeight();\n  paint.setColor(resultBitmap != null ? resultColor : maskColor);\n  canvas.drawRect(0,0,width,frame.top,paint);\n  canvas.drawRect(0,frame.top,frame.left,frame.bottom + 1,paint);\n  canvas.drawRect(frame.right + 1,frame.top,width,frame.bottom + 1,paint);\n  canvas.drawRect(0,frame.bottom + 1,width,height,paint);\n  if (resultBitmap != null) {\n    paint.setAlpha(CURRENT_POINT_OPACITY);\n    canvas.drawBitmap(resultBitmap,null,frame,paint);\n  }\n else {\n    paint.setColor(frameColor);\n    canvas.drawRect(frame.left,frame.top,frame.right + 1,frame.top + 2,paint);\n    canvas.drawRect(frame.left,frame.top + 2,frame.left + 2,frame.bottom - 1,paint);\n    canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n    canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n    paint.setColor(laserColor);\n    paint.setAlpha(SCANNER_ALPHA[scannerAlpha]);\n    scannerAlpha=(scannerAlpha + 1) % SCANNER_ALPHA.length;\n    int middle=frame.height() / 2 + frame.top;\n    canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint);\n    Rect previewFrame=cameraManager.getFramingRectInPreview();\n    float scaleX=frame.width() / (float)previewFrame.width();\n    float scaleY=frame.height() / (float)previewFrame.height();\n    List<ResultPoint> currentPossible=possibleResultPoints;\n    List<ResultPoint> currentLast=lastPossibleResultPoints;\n    int frameLeft=frame.left;\n    int frameTop=frame.top;\n    if (currentPossible.isEmpty()) {\n      lastPossibleResultPoints=null;\n    }\n else {\n      possibleResultPoints=new ArrayList<ResultPoint>(5);\n      lastPossibleResultPoints=currentPossible;\n      paint.setAlpha(CURRENT_POINT_OPACITY);\n      paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n        for (        ResultPoint point : currentPossible) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n        }\n      }\n    }\n    if (currentLast != null) {\n      paint.setAlpha(CURRENT_POINT_OPACITY / 2);\n      paint.setColor(resultPointColor);\nsynchronized (currentLast) {\n        for (        ResultPoint point : currentLast) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE / 2,paint);\n        }\n      }\n    }\n    postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 499,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3654,
        "startLineNumber" : 76,
        "startColumnNumber" : 2,
        "endLineNumber" : 159,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public void onDraw(Canvas canvas){\n  CameraManager cameraManager=CameraManager.get();\n  if (cameraManager == null) {\n    return;\n  }\n  Rect frame=cameraManager.getFramingRect();\n  if (frame == null) {\n    return;\n  }\n  int width=canvas.getWidth();\n  int height=canvas.getHeight();\n  paint.setColor(resultBitmap != null ? resultColor : maskColor);\n  canvas.drawRect(0,0,width,frame.top,paint);\n  canvas.drawRect(0,frame.top,frame.left,frame.bottom + 1,paint);\n  canvas.drawRect(frame.right + 1,frame.top,width,frame.bottom + 1,paint);\n  canvas.drawRect(0,frame.bottom + 1,width,height,paint);\n  if (resultBitmap != null) {\n    paint.setAlpha(CURRENT_POINT_OPACITY);\n    canvas.drawBitmap(resultBitmap,null,frame,paint);\n  }\n else {\n    paint.setColor(frameColor);\n    canvas.drawRect(frame.left,frame.top,frame.right + 1,frame.top + 2,paint);\n    canvas.drawRect(frame.left,frame.top + 2,frame.left + 2,frame.bottom - 1,paint);\n    canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n    canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n    paint.setColor(laserColor);\n    paint.setAlpha(SCANNER_ALPHA[scannerAlpha]);\n    scannerAlpha=(scannerAlpha + 1) % SCANNER_ALPHA.length;\n    int middle=frame.height() / 2 + frame.top;\n    canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint);\n    Rect previewFrame=cameraManager.getFramingRectInPreview();\n    float scaleX=frame.width() / (float)previewFrame.width();\n    float scaleY=frame.height() / (float)previewFrame.height();\n    List<ResultPoint> currentPossible=possibleResultPoints;\n    List<ResultPoint> currentLast=lastPossibleResultPoints;\n    int frameLeft=frame.left;\n    int frameTop=frame.top;\n    if (currentPossible.isEmpty()) {\n      lastPossibleResultPoints=null;\n    }\n else {\n      possibleResultPoints=new ArrayList<ResultPoint>(5);\n      lastPossibleResultPoints=currentPossible;\n      paint.setAlpha(CURRENT_POINT_OPACITY);\n      paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n        for (        ResultPoint point : currentPossible) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n        }\n      }\n    }\n    if (currentLast != null) {\n      paint.setAlpha(CURRENT_POINT_OPACITY / 2);\n      paint.setColor(resultPointColor);\nsynchronized (currentLast) {\n        for (        ResultPoint point : currentLast) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE / 2,paint);\n        }\n      }\n    }\n    postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 509,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 181,
        "startLineNumber" : 133,
        "startColumnNumber" : 12,
        "endLineNumber" : 135,
        "endColumnNumber" : 48
      },
      "nodeContext" : "canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 25,
      "astHeight" : 7
    },
    "tokenLength" : 2,
    "type" : "int"
  }, {
    "nodeContext" : "POINT_SIZE",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 146,
      "startColumnNumber" : 30,
      "endLineNumber" : 146,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 146,
        "startColumnNumber" : 30,
        "endLineNumber" : 146,
        "endColumnNumber" : 44
      },
      "nodeContext" : "POINT_SIZE / 2",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 185,
        "startLineNumber" : 144,
        "startColumnNumber" : 12,
        "endLineNumber" : 146,
        "endColumnNumber" : 52
      },
      "nodeContext" : "canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE / 2,paint)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 27,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 186,
        "startLineNumber" : 144,
        "startColumnNumber" : 12,
        "endLineNumber" : 146,
        "endColumnNumber" : 53
      },
      "nodeContext" : "canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE / 2,paint);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 28,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 212,
        "startLineNumber" : 143,
        "startColumnNumber" : 48,
        "endLineNumber" : 147,
        "endColumnNumber" : 11
      },
      "nodeContext" : "{\n  canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE / 2,paint);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 29,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 250,
        "startLineNumber" : 143,
        "startColumnNumber" : 10,
        "endLineNumber" : 147,
        "endColumnNumber" : 11
      },
      "nodeContext" : "for (ResultPoint point : currentLast) {\n  canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE / 2,paint);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 35,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.SynchronizedStatement,body]",
      "nodePosition" : {
        "charLength" : 272,
        "startLineNumber" : 142,
        "startColumnNumber" : 35,
        "endLineNumber" : 148,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  for (  ResultPoint point : currentLast) {\n    canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE / 2,paint);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 36,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 299,
        "startLineNumber" : 142,
        "startColumnNumber" : 8,
        "endLineNumber" : 148,
        "endColumnNumber" : 9
      },
      "nodeContext" : "synchronized (currentLast) {\n  for (  ResultPoint point : currentLast) {\n    canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE / 2,paint);\n  }\n}\n",
      "nodeType" : "SynchronizedStatement",
      "astNodeNumber" : 38,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 410,
        "startLineNumber" : 139,
        "startColumnNumber" : 31,
        "endLineNumber" : 149,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  paint.setAlpha(CURRENT_POINT_OPACITY / 2);\n  paint.setColor(resultPointColor);\nsynchronized (currentLast) {\n    for (    ResultPoint point : currentLast) {\n      canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE / 2,paint);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 51,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 435,
        "startLineNumber" : 139,
        "startColumnNumber" : 6,
        "endLineNumber" : 149,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (currentLast != null) {\n  paint.setAlpha(CURRENT_POINT_OPACITY / 2);\n  paint.setColor(resultPointColor);\nsynchronized (currentLast) {\n    for (    ResultPoint point : currentLast) {\n      canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE / 2,paint);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 55,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2709,
        "startLineNumber" : 100,
        "startColumnNumber" : 11,
        "endLineNumber" : 158,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  paint.setColor(frameColor);\n  canvas.drawRect(frame.left,frame.top,frame.right + 1,frame.top + 2,paint);\n  canvas.drawRect(frame.left,frame.top + 2,frame.left + 2,frame.bottom - 1,paint);\n  canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n  canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n  paint.setColor(laserColor);\n  paint.setAlpha(SCANNER_ALPHA[scannerAlpha]);\n  scannerAlpha=(scannerAlpha + 1) % SCANNER_ALPHA.length;\n  int middle=frame.height() / 2 + frame.top;\n  canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint);\n  Rect previewFrame=cameraManager.getFramingRectInPreview();\n  float scaleX=frame.width() / (float)previewFrame.width();\n  float scaleY=frame.height() / (float)previewFrame.height();\n  List<ResultPoint> currentPossible=possibleResultPoints;\n  List<ResultPoint> currentLast=lastPossibleResultPoints;\n  int frameLeft=frame.left;\n  int frameTop=frame.top;\n  if (currentPossible.isEmpty()) {\n    lastPossibleResultPoints=null;\n  }\n else {\n    possibleResultPoints=new ArrayList<ResultPoint>(5);\n    lastPossibleResultPoints=currentPossible;\n    paint.setAlpha(CURRENT_POINT_OPACITY);\n    paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n      for (      ResultPoint point : currentPossible) {\n        canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n      }\n    }\n  }\n  if (currentLast != null) {\n    paint.setAlpha(CURRENT_POINT_OPACITY / 2);\n    paint.setColor(resultPointColor);\nsynchronized (currentLast) {\n      for (      ResultPoint point : currentLast) {\n        canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE / 2,paint);\n      }\n    }\n  }\n  postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 368,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2919,
        "startLineNumber" : 96,
        "startColumnNumber" : 4,
        "endLineNumber" : 158,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (resultBitmap != null) {\n  paint.setAlpha(CURRENT_POINT_OPACITY);\n  canvas.drawBitmap(resultBitmap,null,frame,paint);\n}\n else {\n  paint.setColor(frameColor);\n  canvas.drawRect(frame.left,frame.top,frame.right + 1,frame.top + 2,paint);\n  canvas.drawRect(frame.left,frame.top + 2,frame.left + 2,frame.bottom - 1,paint);\n  canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n  canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n  paint.setColor(laserColor);\n  paint.setAlpha(SCANNER_ALPHA[scannerAlpha]);\n  scannerAlpha=(scannerAlpha + 1) % SCANNER_ALPHA.length;\n  int middle=frame.height() / 2 + frame.top;\n  canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint);\n  Rect previewFrame=cameraManager.getFramingRectInPreview();\n  float scaleX=frame.width() / (float)previewFrame.width();\n  float scaleY=frame.height() / (float)previewFrame.height();\n  List<ResultPoint> currentPossible=possibleResultPoints;\n  List<ResultPoint> currentLast=lastPossibleResultPoints;\n  int frameLeft=frame.left;\n  int frameTop=frame.top;\n  if (currentPossible.isEmpty()) {\n    lastPossibleResultPoints=null;\n  }\n else {\n    possibleResultPoints=new ArrayList<ResultPoint>(5);\n    lastPossibleResultPoints=currentPossible;\n    paint.setAlpha(CURRENT_POINT_OPACITY);\n    paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n      for (      ResultPoint point : currentPossible) {\n        canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n      }\n    }\n  }\n  if (currentLast != null) {\n    paint.setAlpha(CURRENT_POINT_OPACITY / 2);\n    paint.setColor(resultPointColor);\nsynchronized (currentLast) {\n      for (      ResultPoint point : currentLast) {\n        canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE / 2,paint);\n      }\n    }\n  }\n  postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 386,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3608,
        "startLineNumber" : 77,
        "startColumnNumber" : 36,
        "endLineNumber" : 159,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  CameraManager cameraManager=CameraManager.get();\n  if (cameraManager == null) {\n    return;\n  }\n  Rect frame=cameraManager.getFramingRect();\n  if (frame == null) {\n    return;\n  }\n  int width=canvas.getWidth();\n  int height=canvas.getHeight();\n  paint.setColor(resultBitmap != null ? resultColor : maskColor);\n  canvas.drawRect(0,0,width,frame.top,paint);\n  canvas.drawRect(0,frame.top,frame.left,frame.bottom + 1,paint);\n  canvas.drawRect(frame.right + 1,frame.top,width,frame.bottom + 1,paint);\n  canvas.drawRect(0,frame.bottom + 1,width,height,paint);\n  if (resultBitmap != null) {\n    paint.setAlpha(CURRENT_POINT_OPACITY);\n    canvas.drawBitmap(resultBitmap,null,frame,paint);\n  }\n else {\n    paint.setColor(frameColor);\n    canvas.drawRect(frame.left,frame.top,frame.right + 1,frame.top + 2,paint);\n    canvas.drawRect(frame.left,frame.top + 2,frame.left + 2,frame.bottom - 1,paint);\n    canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n    canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n    paint.setColor(laserColor);\n    paint.setAlpha(SCANNER_ALPHA[scannerAlpha]);\n    scannerAlpha=(scannerAlpha + 1) % SCANNER_ALPHA.length;\n    int middle=frame.height() / 2 + frame.top;\n    canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint);\n    Rect previewFrame=cameraManager.getFramingRectInPreview();\n    float scaleX=frame.width() / (float)previewFrame.width();\n    float scaleY=frame.height() / (float)previewFrame.height();\n    List<ResultPoint> currentPossible=possibleResultPoints;\n    List<ResultPoint> currentLast=lastPossibleResultPoints;\n    int frameLeft=frame.left;\n    int frameTop=frame.top;\n    if (currentPossible.isEmpty()) {\n      lastPossibleResultPoints=null;\n    }\n else {\n      possibleResultPoints=new ArrayList<ResultPoint>(5);\n      lastPossibleResultPoints=currentPossible;\n      paint.setAlpha(CURRENT_POINT_OPACITY);\n      paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n        for (        ResultPoint point : currentPossible) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n        }\n      }\n    }\n    if (currentLast != null) {\n      paint.setAlpha(CURRENT_POINT_OPACITY / 2);\n      paint.setColor(resultPointColor);\nsynchronized (currentLast) {\n        for (        ResultPoint point : currentLast) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE / 2,paint);\n        }\n      }\n    }\n    postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 499,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3654,
        "startLineNumber" : 76,
        "startColumnNumber" : 2,
        "endLineNumber" : 159,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public void onDraw(Canvas canvas){\n  CameraManager cameraManager=CameraManager.get();\n  if (cameraManager == null) {\n    return;\n  }\n  Rect frame=cameraManager.getFramingRect();\n  if (frame == null) {\n    return;\n  }\n  int width=canvas.getWidth();\n  int height=canvas.getHeight();\n  paint.setColor(resultBitmap != null ? resultColor : maskColor);\n  canvas.drawRect(0,0,width,frame.top,paint);\n  canvas.drawRect(0,frame.top,frame.left,frame.bottom + 1,paint);\n  canvas.drawRect(frame.right + 1,frame.top,width,frame.bottom + 1,paint);\n  canvas.drawRect(0,frame.bottom + 1,width,height,paint);\n  if (resultBitmap != null) {\n    paint.setAlpha(CURRENT_POINT_OPACITY);\n    canvas.drawBitmap(resultBitmap,null,frame,paint);\n  }\n else {\n    paint.setColor(frameColor);\n    canvas.drawRect(frame.left,frame.top,frame.right + 1,frame.top + 2,paint);\n    canvas.drawRect(frame.left,frame.top + 2,frame.left + 2,frame.bottom - 1,paint);\n    canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n    canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n    paint.setColor(laserColor);\n    paint.setAlpha(SCANNER_ALPHA[scannerAlpha]);\n    scannerAlpha=(scannerAlpha + 1) % SCANNER_ALPHA.length;\n    int middle=frame.height() / 2 + frame.top;\n    canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint);\n    Rect previewFrame=cameraManager.getFramingRectInPreview();\n    float scaleX=frame.width() / (float)previewFrame.width();\n    float scaleY=frame.height() / (float)previewFrame.height();\n    List<ResultPoint> currentPossible=possibleResultPoints;\n    List<ResultPoint> currentLast=lastPossibleResultPoints;\n    int frameLeft=frame.left;\n    int frameTop=frame.top;\n    if (currentPossible.isEmpty()) {\n      lastPossibleResultPoints=null;\n    }\n else {\n      possibleResultPoints=new ArrayList<ResultPoint>(5);\n      lastPossibleResultPoints=currentPossible;\n      paint.setAlpha(CURRENT_POINT_OPACITY);\n      paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n        for (        ResultPoint point : currentPossible) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n        }\n      }\n    }\n    if (currentLast != null) {\n      paint.setAlpha(CURRENT_POINT_OPACITY / 2);\n      paint.setColor(resultPointColor);\nsynchronized (currentLast) {\n        for (        ResultPoint point : currentLast) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE / 2,paint);\n        }\n      }\n    }\n    postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 509,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 146,
        "startColumnNumber" : 30,
        "endLineNumber" : 146,
        "endColumnNumber" : 44
      },
      "nodeContext" : "POINT_SIZE / 2",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 2,
    "type" : "int"
  }, {
    "nodeContext" : "POINT_SIZE",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 154,
      "startColumnNumber" : 41,
      "endLineNumber" : 154,
      "endColumnNumber" : 51
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 154,
        "startColumnNumber" : 28,
        "endLineNumber" : 154,
        "endColumnNumber" : 51
      },
      "nodeContext" : "frame.left - POINT_SIZE",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 252,
        "startLineNumber" : 153,
        "startColumnNumber" : 6,
        "endLineNumber" : 157,
        "endColumnNumber" : 54
      },
      "nodeContext" : "postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 23,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 253,
        "startLineNumber" : 153,
        "startColumnNumber" : 6,
        "endLineNumber" : 157,
        "endColumnNumber" : 55
      },
      "nodeContext" : "postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 24,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2709,
        "startLineNumber" : 100,
        "startColumnNumber" : 11,
        "endLineNumber" : 158,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  paint.setColor(frameColor);\n  canvas.drawRect(frame.left,frame.top,frame.right + 1,frame.top + 2,paint);\n  canvas.drawRect(frame.left,frame.top + 2,frame.left + 2,frame.bottom - 1,paint);\n  canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n  canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n  paint.setColor(laserColor);\n  paint.setAlpha(SCANNER_ALPHA[scannerAlpha]);\n  scannerAlpha=(scannerAlpha + 1) % SCANNER_ALPHA.length;\n  int middle=frame.height() / 2 + frame.top;\n  canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint);\n  Rect previewFrame=cameraManager.getFramingRectInPreview();\n  float scaleX=frame.width() / (float)previewFrame.width();\n  float scaleY=frame.height() / (float)previewFrame.height();\n  List<ResultPoint> currentPossible=possibleResultPoints;\n  List<ResultPoint> currentLast=lastPossibleResultPoints;\n  int frameLeft=frame.left;\n  int frameTop=frame.top;\n  if (currentPossible.isEmpty()) {\n    lastPossibleResultPoints=null;\n  }\n else {\n    possibleResultPoints=new ArrayList<ResultPoint>(5);\n    lastPossibleResultPoints=currentPossible;\n    paint.setAlpha(CURRENT_POINT_OPACITY);\n    paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n      for (      ResultPoint point : currentPossible) {\n        canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n      }\n    }\n  }\n  if (currentLast != null) {\n    paint.setAlpha(CURRENT_POINT_OPACITY / 2);\n    paint.setColor(resultPointColor);\nsynchronized (currentLast) {\n      for (      ResultPoint point : currentLast) {\n        canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE / 2,paint);\n      }\n    }\n  }\n  postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 368,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2919,
        "startLineNumber" : 96,
        "startColumnNumber" : 4,
        "endLineNumber" : 158,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (resultBitmap != null) {\n  paint.setAlpha(CURRENT_POINT_OPACITY);\n  canvas.drawBitmap(resultBitmap,null,frame,paint);\n}\n else {\n  paint.setColor(frameColor);\n  canvas.drawRect(frame.left,frame.top,frame.right + 1,frame.top + 2,paint);\n  canvas.drawRect(frame.left,frame.top + 2,frame.left + 2,frame.bottom - 1,paint);\n  canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n  canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n  paint.setColor(laserColor);\n  paint.setAlpha(SCANNER_ALPHA[scannerAlpha]);\n  scannerAlpha=(scannerAlpha + 1) % SCANNER_ALPHA.length;\n  int middle=frame.height() / 2 + frame.top;\n  canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint);\n  Rect previewFrame=cameraManager.getFramingRectInPreview();\n  float scaleX=frame.width() / (float)previewFrame.width();\n  float scaleY=frame.height() / (float)previewFrame.height();\n  List<ResultPoint> currentPossible=possibleResultPoints;\n  List<ResultPoint> currentLast=lastPossibleResultPoints;\n  int frameLeft=frame.left;\n  int frameTop=frame.top;\n  if (currentPossible.isEmpty()) {\n    lastPossibleResultPoints=null;\n  }\n else {\n    possibleResultPoints=new ArrayList<ResultPoint>(5);\n    lastPossibleResultPoints=currentPossible;\n    paint.setAlpha(CURRENT_POINT_OPACITY);\n    paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n      for (      ResultPoint point : currentPossible) {\n        canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n      }\n    }\n  }\n  if (currentLast != null) {\n    paint.setAlpha(CURRENT_POINT_OPACITY / 2);\n    paint.setColor(resultPointColor);\nsynchronized (currentLast) {\n      for (      ResultPoint point : currentLast) {\n        canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE / 2,paint);\n      }\n    }\n  }\n  postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 386,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3608,
        "startLineNumber" : 77,
        "startColumnNumber" : 36,
        "endLineNumber" : 159,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  CameraManager cameraManager=CameraManager.get();\n  if (cameraManager == null) {\n    return;\n  }\n  Rect frame=cameraManager.getFramingRect();\n  if (frame == null) {\n    return;\n  }\n  int width=canvas.getWidth();\n  int height=canvas.getHeight();\n  paint.setColor(resultBitmap != null ? resultColor : maskColor);\n  canvas.drawRect(0,0,width,frame.top,paint);\n  canvas.drawRect(0,frame.top,frame.left,frame.bottom + 1,paint);\n  canvas.drawRect(frame.right + 1,frame.top,width,frame.bottom + 1,paint);\n  canvas.drawRect(0,frame.bottom + 1,width,height,paint);\n  if (resultBitmap != null) {\n    paint.setAlpha(CURRENT_POINT_OPACITY);\n    canvas.drawBitmap(resultBitmap,null,frame,paint);\n  }\n else {\n    paint.setColor(frameColor);\n    canvas.drawRect(frame.left,frame.top,frame.right + 1,frame.top + 2,paint);\n    canvas.drawRect(frame.left,frame.top + 2,frame.left + 2,frame.bottom - 1,paint);\n    canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n    canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n    paint.setColor(laserColor);\n    paint.setAlpha(SCANNER_ALPHA[scannerAlpha]);\n    scannerAlpha=(scannerAlpha + 1) % SCANNER_ALPHA.length;\n    int middle=frame.height() / 2 + frame.top;\n    canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint);\n    Rect previewFrame=cameraManager.getFramingRectInPreview();\n    float scaleX=frame.width() / (float)previewFrame.width();\n    float scaleY=frame.height() / (float)previewFrame.height();\n    List<ResultPoint> currentPossible=possibleResultPoints;\n    List<ResultPoint> currentLast=lastPossibleResultPoints;\n    int frameLeft=frame.left;\n    int frameTop=frame.top;\n    if (currentPossible.isEmpty()) {\n      lastPossibleResultPoints=null;\n    }\n else {\n      possibleResultPoints=new ArrayList<ResultPoint>(5);\n      lastPossibleResultPoints=currentPossible;\n      paint.setAlpha(CURRENT_POINT_OPACITY);\n      paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n        for (        ResultPoint point : currentPossible) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n        }\n      }\n    }\n    if (currentLast != null) {\n      paint.setAlpha(CURRENT_POINT_OPACITY / 2);\n      paint.setColor(resultPointColor);\nsynchronized (currentLast) {\n        for (        ResultPoint point : currentLast) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE / 2,paint);\n        }\n      }\n    }\n    postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 499,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3654,
        "startLineNumber" : 76,
        "startColumnNumber" : 2,
        "endLineNumber" : 159,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public void onDraw(Canvas canvas){\n  CameraManager cameraManager=CameraManager.get();\n  if (cameraManager == null) {\n    return;\n  }\n  Rect frame=cameraManager.getFramingRect();\n  if (frame == null) {\n    return;\n  }\n  int width=canvas.getWidth();\n  int height=canvas.getHeight();\n  paint.setColor(resultBitmap != null ? resultColor : maskColor);\n  canvas.drawRect(0,0,width,frame.top,paint);\n  canvas.drawRect(0,frame.top,frame.left,frame.bottom + 1,paint);\n  canvas.drawRect(frame.right + 1,frame.top,width,frame.bottom + 1,paint);\n  canvas.drawRect(0,frame.bottom + 1,width,height,paint);\n  if (resultBitmap != null) {\n    paint.setAlpha(CURRENT_POINT_OPACITY);\n    canvas.drawBitmap(resultBitmap,null,frame,paint);\n  }\n else {\n    paint.setColor(frameColor);\n    canvas.drawRect(frame.left,frame.top,frame.right + 1,frame.top + 2,paint);\n    canvas.drawRect(frame.left,frame.top + 2,frame.left + 2,frame.bottom - 1,paint);\n    canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n    canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n    paint.setColor(laserColor);\n    paint.setAlpha(SCANNER_ALPHA[scannerAlpha]);\n    scannerAlpha=(scannerAlpha + 1) % SCANNER_ALPHA.length;\n    int middle=frame.height() / 2 + frame.top;\n    canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint);\n    Rect previewFrame=cameraManager.getFramingRectInPreview();\n    float scaleX=frame.width() / (float)previewFrame.width();\n    float scaleY=frame.height() / (float)previewFrame.height();\n    List<ResultPoint> currentPossible=possibleResultPoints;\n    List<ResultPoint> currentLast=lastPossibleResultPoints;\n    int frameLeft=frame.left;\n    int frameTop=frame.top;\n    if (currentPossible.isEmpty()) {\n      lastPossibleResultPoints=null;\n    }\n else {\n      possibleResultPoints=new ArrayList<ResultPoint>(5);\n      lastPossibleResultPoints=currentPossible;\n      paint.setAlpha(CURRENT_POINT_OPACITY);\n      paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n        for (        ResultPoint point : currentPossible) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n        }\n      }\n    }\n    if (currentLast != null) {\n      paint.setAlpha(CURRENT_POINT_OPACITY / 2);\n      paint.setColor(resultPointColor);\nsynchronized (currentLast) {\n        for (        ResultPoint point : currentLast) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE / 2,paint);\n        }\n      }\n    }\n    postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 509,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 154,
        "startColumnNumber" : 28,
        "endLineNumber" : 154,
        "endColumnNumber" : 51
      },
      "nodeContext" : "frame.left - POINT_SIZE",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "int"
  }, {
    "nodeContext" : "POINT_SIZE",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 155,
      "startColumnNumber" : 40,
      "endLineNumber" : 155,
      "endColumnNumber" : 50
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 155,
        "startColumnNumber" : 28,
        "endLineNumber" : 155,
        "endColumnNumber" : 50
      },
      "nodeContext" : "frame.top - POINT_SIZE",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 252,
        "startLineNumber" : 153,
        "startColumnNumber" : 6,
        "endLineNumber" : 157,
        "endColumnNumber" : 54
      },
      "nodeContext" : "postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 23,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 253,
        "startLineNumber" : 153,
        "startColumnNumber" : 6,
        "endLineNumber" : 157,
        "endColumnNumber" : 55
      },
      "nodeContext" : "postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 24,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2709,
        "startLineNumber" : 100,
        "startColumnNumber" : 11,
        "endLineNumber" : 158,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  paint.setColor(frameColor);\n  canvas.drawRect(frame.left,frame.top,frame.right + 1,frame.top + 2,paint);\n  canvas.drawRect(frame.left,frame.top + 2,frame.left + 2,frame.bottom - 1,paint);\n  canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n  canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n  paint.setColor(laserColor);\n  paint.setAlpha(SCANNER_ALPHA[scannerAlpha]);\n  scannerAlpha=(scannerAlpha + 1) % SCANNER_ALPHA.length;\n  int middle=frame.height() / 2 + frame.top;\n  canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint);\n  Rect previewFrame=cameraManager.getFramingRectInPreview();\n  float scaleX=frame.width() / (float)previewFrame.width();\n  float scaleY=frame.height() / (float)previewFrame.height();\n  List<ResultPoint> currentPossible=possibleResultPoints;\n  List<ResultPoint> currentLast=lastPossibleResultPoints;\n  int frameLeft=frame.left;\n  int frameTop=frame.top;\n  if (currentPossible.isEmpty()) {\n    lastPossibleResultPoints=null;\n  }\n else {\n    possibleResultPoints=new ArrayList<ResultPoint>(5);\n    lastPossibleResultPoints=currentPossible;\n    paint.setAlpha(CURRENT_POINT_OPACITY);\n    paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n      for (      ResultPoint point : currentPossible) {\n        canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n      }\n    }\n  }\n  if (currentLast != null) {\n    paint.setAlpha(CURRENT_POINT_OPACITY / 2);\n    paint.setColor(resultPointColor);\nsynchronized (currentLast) {\n      for (      ResultPoint point : currentLast) {\n        canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE / 2,paint);\n      }\n    }\n  }\n  postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 368,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2919,
        "startLineNumber" : 96,
        "startColumnNumber" : 4,
        "endLineNumber" : 158,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (resultBitmap != null) {\n  paint.setAlpha(CURRENT_POINT_OPACITY);\n  canvas.drawBitmap(resultBitmap,null,frame,paint);\n}\n else {\n  paint.setColor(frameColor);\n  canvas.drawRect(frame.left,frame.top,frame.right + 1,frame.top + 2,paint);\n  canvas.drawRect(frame.left,frame.top + 2,frame.left + 2,frame.bottom - 1,paint);\n  canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n  canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n  paint.setColor(laserColor);\n  paint.setAlpha(SCANNER_ALPHA[scannerAlpha]);\n  scannerAlpha=(scannerAlpha + 1) % SCANNER_ALPHA.length;\n  int middle=frame.height() / 2 + frame.top;\n  canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint);\n  Rect previewFrame=cameraManager.getFramingRectInPreview();\n  float scaleX=frame.width() / (float)previewFrame.width();\n  float scaleY=frame.height() / (float)previewFrame.height();\n  List<ResultPoint> currentPossible=possibleResultPoints;\n  List<ResultPoint> currentLast=lastPossibleResultPoints;\n  int frameLeft=frame.left;\n  int frameTop=frame.top;\n  if (currentPossible.isEmpty()) {\n    lastPossibleResultPoints=null;\n  }\n else {\n    possibleResultPoints=new ArrayList<ResultPoint>(5);\n    lastPossibleResultPoints=currentPossible;\n    paint.setAlpha(CURRENT_POINT_OPACITY);\n    paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n      for (      ResultPoint point : currentPossible) {\n        canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n      }\n    }\n  }\n  if (currentLast != null) {\n    paint.setAlpha(CURRENT_POINT_OPACITY / 2);\n    paint.setColor(resultPointColor);\nsynchronized (currentLast) {\n      for (      ResultPoint point : currentLast) {\n        canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE / 2,paint);\n      }\n    }\n  }\n  postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 386,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3608,
        "startLineNumber" : 77,
        "startColumnNumber" : 36,
        "endLineNumber" : 159,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  CameraManager cameraManager=CameraManager.get();\n  if (cameraManager == null) {\n    return;\n  }\n  Rect frame=cameraManager.getFramingRect();\n  if (frame == null) {\n    return;\n  }\n  int width=canvas.getWidth();\n  int height=canvas.getHeight();\n  paint.setColor(resultBitmap != null ? resultColor : maskColor);\n  canvas.drawRect(0,0,width,frame.top,paint);\n  canvas.drawRect(0,frame.top,frame.left,frame.bottom + 1,paint);\n  canvas.drawRect(frame.right + 1,frame.top,width,frame.bottom + 1,paint);\n  canvas.drawRect(0,frame.bottom + 1,width,height,paint);\n  if (resultBitmap != null) {\n    paint.setAlpha(CURRENT_POINT_OPACITY);\n    canvas.drawBitmap(resultBitmap,null,frame,paint);\n  }\n else {\n    paint.setColor(frameColor);\n    canvas.drawRect(frame.left,frame.top,frame.right + 1,frame.top + 2,paint);\n    canvas.drawRect(frame.left,frame.top + 2,frame.left + 2,frame.bottom - 1,paint);\n    canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n    canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n    paint.setColor(laserColor);\n    paint.setAlpha(SCANNER_ALPHA[scannerAlpha]);\n    scannerAlpha=(scannerAlpha + 1) % SCANNER_ALPHA.length;\n    int middle=frame.height() / 2 + frame.top;\n    canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint);\n    Rect previewFrame=cameraManager.getFramingRectInPreview();\n    float scaleX=frame.width() / (float)previewFrame.width();\n    float scaleY=frame.height() / (float)previewFrame.height();\n    List<ResultPoint> currentPossible=possibleResultPoints;\n    List<ResultPoint> currentLast=lastPossibleResultPoints;\n    int frameLeft=frame.left;\n    int frameTop=frame.top;\n    if (currentPossible.isEmpty()) {\n      lastPossibleResultPoints=null;\n    }\n else {\n      possibleResultPoints=new ArrayList<ResultPoint>(5);\n      lastPossibleResultPoints=currentPossible;\n      paint.setAlpha(CURRENT_POINT_OPACITY);\n      paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n        for (        ResultPoint point : currentPossible) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n        }\n      }\n    }\n    if (currentLast != null) {\n      paint.setAlpha(CURRENT_POINT_OPACITY / 2);\n      paint.setColor(resultPointColor);\nsynchronized (currentLast) {\n        for (        ResultPoint point : currentLast) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE / 2,paint);\n        }\n      }\n    }\n    postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 499,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3654,
        "startLineNumber" : 76,
        "startColumnNumber" : 2,
        "endLineNumber" : 159,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public void onDraw(Canvas canvas){\n  CameraManager cameraManager=CameraManager.get();\n  if (cameraManager == null) {\n    return;\n  }\n  Rect frame=cameraManager.getFramingRect();\n  if (frame == null) {\n    return;\n  }\n  int width=canvas.getWidth();\n  int height=canvas.getHeight();\n  paint.setColor(resultBitmap != null ? resultColor : maskColor);\n  canvas.drawRect(0,0,width,frame.top,paint);\n  canvas.drawRect(0,frame.top,frame.left,frame.bottom + 1,paint);\n  canvas.drawRect(frame.right + 1,frame.top,width,frame.bottom + 1,paint);\n  canvas.drawRect(0,frame.bottom + 1,width,height,paint);\n  if (resultBitmap != null) {\n    paint.setAlpha(CURRENT_POINT_OPACITY);\n    canvas.drawBitmap(resultBitmap,null,frame,paint);\n  }\n else {\n    paint.setColor(frameColor);\n    canvas.drawRect(frame.left,frame.top,frame.right + 1,frame.top + 2,paint);\n    canvas.drawRect(frame.left,frame.top + 2,frame.left + 2,frame.bottom - 1,paint);\n    canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n    canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n    paint.setColor(laserColor);\n    paint.setAlpha(SCANNER_ALPHA[scannerAlpha]);\n    scannerAlpha=(scannerAlpha + 1) % SCANNER_ALPHA.length;\n    int middle=frame.height() / 2 + frame.top;\n    canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint);\n    Rect previewFrame=cameraManager.getFramingRectInPreview();\n    float scaleX=frame.width() / (float)previewFrame.width();\n    float scaleY=frame.height() / (float)previewFrame.height();\n    List<ResultPoint> currentPossible=possibleResultPoints;\n    List<ResultPoint> currentLast=lastPossibleResultPoints;\n    int frameLeft=frame.left;\n    int frameTop=frame.top;\n    if (currentPossible.isEmpty()) {\n      lastPossibleResultPoints=null;\n    }\n else {\n      possibleResultPoints=new ArrayList<ResultPoint>(5);\n      lastPossibleResultPoints=currentPossible;\n      paint.setAlpha(CURRENT_POINT_OPACITY);\n      paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n        for (        ResultPoint point : currentPossible) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n        }\n      }\n    }\n    if (currentLast != null) {\n      paint.setAlpha(CURRENT_POINT_OPACITY / 2);\n      paint.setColor(resultPointColor);\nsynchronized (currentLast) {\n        for (        ResultPoint point : currentLast) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE / 2,paint);\n        }\n      }\n    }\n    postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 509,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 155,
        "startColumnNumber" : 28,
        "endLineNumber" : 155,
        "endColumnNumber" : 50
      },
      "nodeContext" : "frame.top - POINT_SIZE",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "int"
  }, {
    "nodeContext" : "POINT_SIZE",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 156,
      "startColumnNumber" : 42,
      "endLineNumber" : 156,
      "endColumnNumber" : 52
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 156,
        "startColumnNumber" : 28,
        "endLineNumber" : 156,
        "endColumnNumber" : 52
      },
      "nodeContext" : "frame.right + POINT_SIZE",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 252,
        "startLineNumber" : 153,
        "startColumnNumber" : 6,
        "endLineNumber" : 157,
        "endColumnNumber" : 54
      },
      "nodeContext" : "postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 23,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 253,
        "startLineNumber" : 153,
        "startColumnNumber" : 6,
        "endLineNumber" : 157,
        "endColumnNumber" : 55
      },
      "nodeContext" : "postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 24,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2709,
        "startLineNumber" : 100,
        "startColumnNumber" : 11,
        "endLineNumber" : 158,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  paint.setColor(frameColor);\n  canvas.drawRect(frame.left,frame.top,frame.right + 1,frame.top + 2,paint);\n  canvas.drawRect(frame.left,frame.top + 2,frame.left + 2,frame.bottom - 1,paint);\n  canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n  canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n  paint.setColor(laserColor);\n  paint.setAlpha(SCANNER_ALPHA[scannerAlpha]);\n  scannerAlpha=(scannerAlpha + 1) % SCANNER_ALPHA.length;\n  int middle=frame.height() / 2 + frame.top;\n  canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint);\n  Rect previewFrame=cameraManager.getFramingRectInPreview();\n  float scaleX=frame.width() / (float)previewFrame.width();\n  float scaleY=frame.height() / (float)previewFrame.height();\n  List<ResultPoint> currentPossible=possibleResultPoints;\n  List<ResultPoint> currentLast=lastPossibleResultPoints;\n  int frameLeft=frame.left;\n  int frameTop=frame.top;\n  if (currentPossible.isEmpty()) {\n    lastPossibleResultPoints=null;\n  }\n else {\n    possibleResultPoints=new ArrayList<ResultPoint>(5);\n    lastPossibleResultPoints=currentPossible;\n    paint.setAlpha(CURRENT_POINT_OPACITY);\n    paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n      for (      ResultPoint point : currentPossible) {\n        canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n      }\n    }\n  }\n  if (currentLast != null) {\n    paint.setAlpha(CURRENT_POINT_OPACITY / 2);\n    paint.setColor(resultPointColor);\nsynchronized (currentLast) {\n      for (      ResultPoint point : currentLast) {\n        canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE / 2,paint);\n      }\n    }\n  }\n  postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 368,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2919,
        "startLineNumber" : 96,
        "startColumnNumber" : 4,
        "endLineNumber" : 158,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (resultBitmap != null) {\n  paint.setAlpha(CURRENT_POINT_OPACITY);\n  canvas.drawBitmap(resultBitmap,null,frame,paint);\n}\n else {\n  paint.setColor(frameColor);\n  canvas.drawRect(frame.left,frame.top,frame.right + 1,frame.top + 2,paint);\n  canvas.drawRect(frame.left,frame.top + 2,frame.left + 2,frame.bottom - 1,paint);\n  canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n  canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n  paint.setColor(laserColor);\n  paint.setAlpha(SCANNER_ALPHA[scannerAlpha]);\n  scannerAlpha=(scannerAlpha + 1) % SCANNER_ALPHA.length;\n  int middle=frame.height() / 2 + frame.top;\n  canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint);\n  Rect previewFrame=cameraManager.getFramingRectInPreview();\n  float scaleX=frame.width() / (float)previewFrame.width();\n  float scaleY=frame.height() / (float)previewFrame.height();\n  List<ResultPoint> currentPossible=possibleResultPoints;\n  List<ResultPoint> currentLast=lastPossibleResultPoints;\n  int frameLeft=frame.left;\n  int frameTop=frame.top;\n  if (currentPossible.isEmpty()) {\n    lastPossibleResultPoints=null;\n  }\n else {\n    possibleResultPoints=new ArrayList<ResultPoint>(5);\n    lastPossibleResultPoints=currentPossible;\n    paint.setAlpha(CURRENT_POINT_OPACITY);\n    paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n      for (      ResultPoint point : currentPossible) {\n        canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n      }\n    }\n  }\n  if (currentLast != null) {\n    paint.setAlpha(CURRENT_POINT_OPACITY / 2);\n    paint.setColor(resultPointColor);\nsynchronized (currentLast) {\n      for (      ResultPoint point : currentLast) {\n        canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE / 2,paint);\n      }\n    }\n  }\n  postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 386,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3608,
        "startLineNumber" : 77,
        "startColumnNumber" : 36,
        "endLineNumber" : 159,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  CameraManager cameraManager=CameraManager.get();\n  if (cameraManager == null) {\n    return;\n  }\n  Rect frame=cameraManager.getFramingRect();\n  if (frame == null) {\n    return;\n  }\n  int width=canvas.getWidth();\n  int height=canvas.getHeight();\n  paint.setColor(resultBitmap != null ? resultColor : maskColor);\n  canvas.drawRect(0,0,width,frame.top,paint);\n  canvas.drawRect(0,frame.top,frame.left,frame.bottom + 1,paint);\n  canvas.drawRect(frame.right + 1,frame.top,width,frame.bottom + 1,paint);\n  canvas.drawRect(0,frame.bottom + 1,width,height,paint);\n  if (resultBitmap != null) {\n    paint.setAlpha(CURRENT_POINT_OPACITY);\n    canvas.drawBitmap(resultBitmap,null,frame,paint);\n  }\n else {\n    paint.setColor(frameColor);\n    canvas.drawRect(frame.left,frame.top,frame.right + 1,frame.top + 2,paint);\n    canvas.drawRect(frame.left,frame.top + 2,frame.left + 2,frame.bottom - 1,paint);\n    canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n    canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n    paint.setColor(laserColor);\n    paint.setAlpha(SCANNER_ALPHA[scannerAlpha]);\n    scannerAlpha=(scannerAlpha + 1) % SCANNER_ALPHA.length;\n    int middle=frame.height() / 2 + frame.top;\n    canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint);\n    Rect previewFrame=cameraManager.getFramingRectInPreview();\n    float scaleX=frame.width() / (float)previewFrame.width();\n    float scaleY=frame.height() / (float)previewFrame.height();\n    List<ResultPoint> currentPossible=possibleResultPoints;\n    List<ResultPoint> currentLast=lastPossibleResultPoints;\n    int frameLeft=frame.left;\n    int frameTop=frame.top;\n    if (currentPossible.isEmpty()) {\n      lastPossibleResultPoints=null;\n    }\n else {\n      possibleResultPoints=new ArrayList<ResultPoint>(5);\n      lastPossibleResultPoints=currentPossible;\n      paint.setAlpha(CURRENT_POINT_OPACITY);\n      paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n        for (        ResultPoint point : currentPossible) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n        }\n      }\n    }\n    if (currentLast != null) {\n      paint.setAlpha(CURRENT_POINT_OPACITY / 2);\n      paint.setColor(resultPointColor);\nsynchronized (currentLast) {\n        for (        ResultPoint point : currentLast) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE / 2,paint);\n        }\n      }\n    }\n    postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 499,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3654,
        "startLineNumber" : 76,
        "startColumnNumber" : 2,
        "endLineNumber" : 159,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public void onDraw(Canvas canvas){\n  CameraManager cameraManager=CameraManager.get();\n  if (cameraManager == null) {\n    return;\n  }\n  Rect frame=cameraManager.getFramingRect();\n  if (frame == null) {\n    return;\n  }\n  int width=canvas.getWidth();\n  int height=canvas.getHeight();\n  paint.setColor(resultBitmap != null ? resultColor : maskColor);\n  canvas.drawRect(0,0,width,frame.top,paint);\n  canvas.drawRect(0,frame.top,frame.left,frame.bottom + 1,paint);\n  canvas.drawRect(frame.right + 1,frame.top,width,frame.bottom + 1,paint);\n  canvas.drawRect(0,frame.bottom + 1,width,height,paint);\n  if (resultBitmap != null) {\n    paint.setAlpha(CURRENT_POINT_OPACITY);\n    canvas.drawBitmap(resultBitmap,null,frame,paint);\n  }\n else {\n    paint.setColor(frameColor);\n    canvas.drawRect(frame.left,frame.top,frame.right + 1,frame.top + 2,paint);\n    canvas.drawRect(frame.left,frame.top + 2,frame.left + 2,frame.bottom - 1,paint);\n    canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n    canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n    paint.setColor(laserColor);\n    paint.setAlpha(SCANNER_ALPHA[scannerAlpha]);\n    scannerAlpha=(scannerAlpha + 1) % SCANNER_ALPHA.length;\n    int middle=frame.height() / 2 + frame.top;\n    canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint);\n    Rect previewFrame=cameraManager.getFramingRectInPreview();\n    float scaleX=frame.width() / (float)previewFrame.width();\n    float scaleY=frame.height() / (float)previewFrame.height();\n    List<ResultPoint> currentPossible=possibleResultPoints;\n    List<ResultPoint> currentLast=lastPossibleResultPoints;\n    int frameLeft=frame.left;\n    int frameTop=frame.top;\n    if (currentPossible.isEmpty()) {\n      lastPossibleResultPoints=null;\n    }\n else {\n      possibleResultPoints=new ArrayList<ResultPoint>(5);\n      lastPossibleResultPoints=currentPossible;\n      paint.setAlpha(CURRENT_POINT_OPACITY);\n      paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n        for (        ResultPoint point : currentPossible) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n        }\n      }\n    }\n    if (currentLast != null) {\n      paint.setAlpha(CURRENT_POINT_OPACITY / 2);\n      paint.setColor(resultPointColor);\nsynchronized (currentLast) {\n        for (        ResultPoint point : currentLast) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE / 2,paint);\n        }\n      }\n    }\n    postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 509,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 156,
        "startColumnNumber" : 28,
        "endLineNumber" : 156,
        "endColumnNumber" : 52
      },
      "nodeContext" : "frame.right + POINT_SIZE",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "int"
  }, {
    "nodeContext" : "POINT_SIZE",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 157,
      "startColumnNumber" : 43,
      "endLineNumber" : 157,
      "endColumnNumber" : 53
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 157,
        "startColumnNumber" : 28,
        "endLineNumber" : 157,
        "endColumnNumber" : 53
      },
      "nodeContext" : "frame.bottom + POINT_SIZE",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 252,
        "startLineNumber" : 153,
        "startColumnNumber" : 6,
        "endLineNumber" : 157,
        "endColumnNumber" : 54
      },
      "nodeContext" : "postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 23,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 253,
        "startLineNumber" : 153,
        "startColumnNumber" : 6,
        "endLineNumber" : 157,
        "endColumnNumber" : 55
      },
      "nodeContext" : "postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 24,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2709,
        "startLineNumber" : 100,
        "startColumnNumber" : 11,
        "endLineNumber" : 158,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  paint.setColor(frameColor);\n  canvas.drawRect(frame.left,frame.top,frame.right + 1,frame.top + 2,paint);\n  canvas.drawRect(frame.left,frame.top + 2,frame.left + 2,frame.bottom - 1,paint);\n  canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n  canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n  paint.setColor(laserColor);\n  paint.setAlpha(SCANNER_ALPHA[scannerAlpha]);\n  scannerAlpha=(scannerAlpha + 1) % SCANNER_ALPHA.length;\n  int middle=frame.height() / 2 + frame.top;\n  canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint);\n  Rect previewFrame=cameraManager.getFramingRectInPreview();\n  float scaleX=frame.width() / (float)previewFrame.width();\n  float scaleY=frame.height() / (float)previewFrame.height();\n  List<ResultPoint> currentPossible=possibleResultPoints;\n  List<ResultPoint> currentLast=lastPossibleResultPoints;\n  int frameLeft=frame.left;\n  int frameTop=frame.top;\n  if (currentPossible.isEmpty()) {\n    lastPossibleResultPoints=null;\n  }\n else {\n    possibleResultPoints=new ArrayList<ResultPoint>(5);\n    lastPossibleResultPoints=currentPossible;\n    paint.setAlpha(CURRENT_POINT_OPACITY);\n    paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n      for (      ResultPoint point : currentPossible) {\n        canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n      }\n    }\n  }\n  if (currentLast != null) {\n    paint.setAlpha(CURRENT_POINT_OPACITY / 2);\n    paint.setColor(resultPointColor);\nsynchronized (currentLast) {\n      for (      ResultPoint point : currentLast) {\n        canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE / 2,paint);\n      }\n    }\n  }\n  postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 368,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2919,
        "startLineNumber" : 96,
        "startColumnNumber" : 4,
        "endLineNumber" : 158,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (resultBitmap != null) {\n  paint.setAlpha(CURRENT_POINT_OPACITY);\n  canvas.drawBitmap(resultBitmap,null,frame,paint);\n}\n else {\n  paint.setColor(frameColor);\n  canvas.drawRect(frame.left,frame.top,frame.right + 1,frame.top + 2,paint);\n  canvas.drawRect(frame.left,frame.top + 2,frame.left + 2,frame.bottom - 1,paint);\n  canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n  canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n  paint.setColor(laserColor);\n  paint.setAlpha(SCANNER_ALPHA[scannerAlpha]);\n  scannerAlpha=(scannerAlpha + 1) % SCANNER_ALPHA.length;\n  int middle=frame.height() / 2 + frame.top;\n  canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint);\n  Rect previewFrame=cameraManager.getFramingRectInPreview();\n  float scaleX=frame.width() / (float)previewFrame.width();\n  float scaleY=frame.height() / (float)previewFrame.height();\n  List<ResultPoint> currentPossible=possibleResultPoints;\n  List<ResultPoint> currentLast=lastPossibleResultPoints;\n  int frameLeft=frame.left;\n  int frameTop=frame.top;\n  if (currentPossible.isEmpty()) {\n    lastPossibleResultPoints=null;\n  }\n else {\n    possibleResultPoints=new ArrayList<ResultPoint>(5);\n    lastPossibleResultPoints=currentPossible;\n    paint.setAlpha(CURRENT_POINT_OPACITY);\n    paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n      for (      ResultPoint point : currentPossible) {\n        canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n      }\n    }\n  }\n  if (currentLast != null) {\n    paint.setAlpha(CURRENT_POINT_OPACITY / 2);\n    paint.setColor(resultPointColor);\nsynchronized (currentLast) {\n      for (      ResultPoint point : currentLast) {\n        canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE / 2,paint);\n      }\n    }\n  }\n  postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 386,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3608,
        "startLineNumber" : 77,
        "startColumnNumber" : 36,
        "endLineNumber" : 159,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  CameraManager cameraManager=CameraManager.get();\n  if (cameraManager == null) {\n    return;\n  }\n  Rect frame=cameraManager.getFramingRect();\n  if (frame == null) {\n    return;\n  }\n  int width=canvas.getWidth();\n  int height=canvas.getHeight();\n  paint.setColor(resultBitmap != null ? resultColor : maskColor);\n  canvas.drawRect(0,0,width,frame.top,paint);\n  canvas.drawRect(0,frame.top,frame.left,frame.bottom + 1,paint);\n  canvas.drawRect(frame.right + 1,frame.top,width,frame.bottom + 1,paint);\n  canvas.drawRect(0,frame.bottom + 1,width,height,paint);\n  if (resultBitmap != null) {\n    paint.setAlpha(CURRENT_POINT_OPACITY);\n    canvas.drawBitmap(resultBitmap,null,frame,paint);\n  }\n else {\n    paint.setColor(frameColor);\n    canvas.drawRect(frame.left,frame.top,frame.right + 1,frame.top + 2,paint);\n    canvas.drawRect(frame.left,frame.top + 2,frame.left + 2,frame.bottom - 1,paint);\n    canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n    canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n    paint.setColor(laserColor);\n    paint.setAlpha(SCANNER_ALPHA[scannerAlpha]);\n    scannerAlpha=(scannerAlpha + 1) % SCANNER_ALPHA.length;\n    int middle=frame.height() / 2 + frame.top;\n    canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint);\n    Rect previewFrame=cameraManager.getFramingRectInPreview();\n    float scaleX=frame.width() / (float)previewFrame.width();\n    float scaleY=frame.height() / (float)previewFrame.height();\n    List<ResultPoint> currentPossible=possibleResultPoints;\n    List<ResultPoint> currentLast=lastPossibleResultPoints;\n    int frameLeft=frame.left;\n    int frameTop=frame.top;\n    if (currentPossible.isEmpty()) {\n      lastPossibleResultPoints=null;\n    }\n else {\n      possibleResultPoints=new ArrayList<ResultPoint>(5);\n      lastPossibleResultPoints=currentPossible;\n      paint.setAlpha(CURRENT_POINT_OPACITY);\n      paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n        for (        ResultPoint point : currentPossible) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n        }\n      }\n    }\n    if (currentLast != null) {\n      paint.setAlpha(CURRENT_POINT_OPACITY / 2);\n      paint.setColor(resultPointColor);\nsynchronized (currentLast) {\n        for (        ResultPoint point : currentLast) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE / 2,paint);\n        }\n      }\n    }\n    postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 499,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3654,
        "startLineNumber" : 76,
        "startColumnNumber" : 2,
        "endLineNumber" : 159,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public void onDraw(Canvas canvas){\n  CameraManager cameraManager=CameraManager.get();\n  if (cameraManager == null) {\n    return;\n  }\n  Rect frame=cameraManager.getFramingRect();\n  if (frame == null) {\n    return;\n  }\n  int width=canvas.getWidth();\n  int height=canvas.getHeight();\n  paint.setColor(resultBitmap != null ? resultColor : maskColor);\n  canvas.drawRect(0,0,width,frame.top,paint);\n  canvas.drawRect(0,frame.top,frame.left,frame.bottom + 1,paint);\n  canvas.drawRect(frame.right + 1,frame.top,width,frame.bottom + 1,paint);\n  canvas.drawRect(0,frame.bottom + 1,width,height,paint);\n  if (resultBitmap != null) {\n    paint.setAlpha(CURRENT_POINT_OPACITY);\n    canvas.drawBitmap(resultBitmap,null,frame,paint);\n  }\n else {\n    paint.setColor(frameColor);\n    canvas.drawRect(frame.left,frame.top,frame.right + 1,frame.top + 2,paint);\n    canvas.drawRect(frame.left,frame.top + 2,frame.left + 2,frame.bottom - 1,paint);\n    canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n    canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n    paint.setColor(laserColor);\n    paint.setAlpha(SCANNER_ALPHA[scannerAlpha]);\n    scannerAlpha=(scannerAlpha + 1) % SCANNER_ALPHA.length;\n    int middle=frame.height() / 2 + frame.top;\n    canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint);\n    Rect previewFrame=cameraManager.getFramingRectInPreview();\n    float scaleX=frame.width() / (float)previewFrame.width();\n    float scaleY=frame.height() / (float)previewFrame.height();\n    List<ResultPoint> currentPossible=possibleResultPoints;\n    List<ResultPoint> currentLast=lastPossibleResultPoints;\n    int frameLeft=frame.left;\n    int frameTop=frame.top;\n    if (currentPossible.isEmpty()) {\n      lastPossibleResultPoints=null;\n    }\n else {\n      possibleResultPoints=new ArrayList<ResultPoint>(5);\n      lastPossibleResultPoints=currentPossible;\n      paint.setAlpha(CURRENT_POINT_OPACITY);\n      paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n        for (        ResultPoint point : currentPossible) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n        }\n      }\n    }\n    if (currentLast != null) {\n      paint.setAlpha(CURRENT_POINT_OPACITY / 2);\n      paint.setColor(resultPointColor);\nsynchronized (currentLast) {\n        for (        ResultPoint point : currentLast) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE / 2,paint);\n        }\n      }\n    }\n    postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 509,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 157,
        "startColumnNumber" : 28,
        "endLineNumber" : 157,
        "endColumnNumber" : 53
      },
      "nodeContext" : "frame.bottom + POINT_SIZE",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 10,
    "startLineNumber" : 135,
    "startColumnNumber" : 30,
    "endLineNumber" : 135,
    "endColumnNumber" : 40
  }, {
    "charLength" : 10,
    "startLineNumber" : 146,
    "startColumnNumber" : 30,
    "endLineNumber" : 146,
    "endColumnNumber" : 40
  }, {
    "charLength" : 10,
    "startLineNumber" : 154,
    "startColumnNumber" : 41,
    "endLineNumber" : 154,
    "endColumnNumber" : 51
  }, {
    "charLength" : 10,
    "startLineNumber" : 155,
    "startColumnNumber" : 40,
    "endLineNumber" : 155,
    "endColumnNumber" : 50
  }, {
    "charLength" : 10,
    "startLineNumber" : 156,
    "startColumnNumber" : 42,
    "endLineNumber" : 156,
    "endColumnNumber" : 52
  }, {
    "charLength" : 10,
    "startLineNumber" : 157,
    "startColumnNumber" : 43,
    "endLineNumber" : 157,
    "endColumnNumber" : 53
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 8
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 8
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 8
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 9
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 9
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 9
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 9
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 9
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 1
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 1
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 1
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 1
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 1
  } ]
}