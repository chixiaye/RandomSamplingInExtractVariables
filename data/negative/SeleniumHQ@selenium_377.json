{
  "id" : 377,
  "expression" : "EventAttribute",
  "projectName" : "SeleniumHQ@selenium",
  "commitID" : "738dd0ee18a142d3fe69fc5f16889ac770188c93",
  "filePath" : "java/server/src/org/openqa/selenium/grid/sessionmap/jdbc/JdbcBackedSessionMap.java",
  "occurrences" : 7,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "EventAttribute",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 177,
      "startColumnNumber" : 45,
      "endLineNumber" : 177,
      "endColumnNumber" : 59
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 177,
        "startColumnNumber" : 45,
        "endLineNumber" : 177,
        "endColumnNumber" : 78
      },
      "nodeContext" : "EventAttribute.setValue(\"select\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 177,
        "startColumnNumber" : 8,
        "endLineNumber" : 177,
        "endColumnNumber" : 79
      },
      "nodeContext" : "attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 177,
        "startColumnNumber" : 8,
        "endLineNumber" : 177,
        "endColumnNumber" : 80
      },
      "nodeContext" : "attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2406,
        "startLineNumber" : 173,
        "startColumnNumber" : 67,
        "endLineNumber" : 225,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  String statementStr=statement.toString();\n  span.setAttribute(DATABASE_STATEMENT,statementStr);\n  span.setAttribute(DATABASE_OPERATION,\"select\");\n  attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n  attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n  try (ResultSet sessions=statement.executeQuery()){\n    if (!sessions.next()) {\n      NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.NOT_FOUND);\n      EXCEPTION.accept(attributeMap,exception);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw exception;\n    }\n    rawUri=sessions.getString(SESSION_URI_COL);\n    String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n    caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n  }\n   CAPABILITIES_EVENT.accept(attributeMap,caps);\n  try {\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n    uri=new URI(rawUri);\n  }\n catch (  URISyntaxException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.INTERNAL);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n  }\n  span.addEvent(\"Retrieved session from the database\",attributeMap);\n  return new Session(id,uri,caps);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 262,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2930,
        "startLineNumber" : 173,
        "startColumnNumber" : 6,
        "endLineNumber" : 233,
        "endColumnNumber" : 7
      },
      "nodeContext" : "try (PreparedStatement statement=readSessionStatement(id)){\n  String statementStr=statement.toString();\n  span.setAttribute(DATABASE_STATEMENT,statementStr);\n  span.setAttribute(DATABASE_OPERATION,\"select\");\n  attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n  attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n  try (ResultSet sessions=statement.executeQuery()){\n    if (!sessions.next()) {\n      NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.NOT_FOUND);\n      EXCEPTION.accept(attributeMap,exception);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw exception;\n    }\n    rawUri=sessions.getString(SESSION_URI_COL);\n    String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n    caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n  }\n   CAPABILITIES_EVENT.accept(attributeMap,caps);\n  try {\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n    uri=new URI(rawUri);\n  }\n catch (  URISyntaxException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.INTERNAL);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n  }\n  span.addEvent(\"Retrieved session from the database\",attributeMap);\n  return new Session(id,uri,caps);\n}\n catch (SQLException e) {\n  span.setAttribute(\"error\",true);\n  span.setStatus(Status.CANCELLED);\n  EXCEPTION.accept(attributeMap,e);\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  throw new JdbcException(e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 328,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3112,
        "startLineNumber" : 167,
        "startColumnNumber" : 62,
        "endLineNumber" : 234,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SESSION_ID.accept(span,id);\n  SESSION_ID_EVENT.accept(attributeMap,id);\n  setCommonSpanAttributes(span);\n  setCommonEventAttributes(attributeMap);\n  try (PreparedStatement statement=readSessionStatement(id)){\n    String statementStr=statement.toString();\n    span.setAttribute(DATABASE_STATEMENT,statementStr);\n    span.setAttribute(DATABASE_OPERATION,\"select\");\n    attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n    attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n    try (ResultSet sessions=statement.executeQuery()){\n      if (!sessions.next()) {\n        NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n        span.setAttribute(\"error\",true);\n        span.setStatus(Status.NOT_FOUND);\n        EXCEPTION.accept(attributeMap,exception);\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw exception;\n      }\n      rawUri=sessions.getString(SESSION_URI_COL);\n      String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n      caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n    }\n     CAPABILITIES_EVENT.accept(attributeMap,caps);\n    try {\n      attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n      uri=new URI(rawUri);\n    }\n catch (    URISyntaxException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.INTERNAL);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n    }\n    span.addEvent(\"Retrieved session from the database\",attributeMap);\n    return new Session(id,uri,caps);\n  }\n catch (  SQLException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.CANCELLED);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new JdbcException(e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 349,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3230,
        "startLineNumber" : 166,
        "startColumnNumber" : 4,
        "endLineNumber" : 234,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try (Span span=tracer.getCurrentContext().createSpan(\"SELECT * from  sessions_map where session_ids = ?\")){\n  SESSION_ID.accept(span,id);\n  SESSION_ID_EVENT.accept(attributeMap,id);\n  setCommonSpanAttributes(span);\n  setCommonEventAttributes(attributeMap);\n  try (PreparedStatement statement=readSessionStatement(id)){\n    String statementStr=statement.toString();\n    span.setAttribute(DATABASE_STATEMENT,statementStr);\n    span.setAttribute(DATABASE_OPERATION,\"select\");\n    attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n    attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n    try (ResultSet sessions=statement.executeQuery()){\n      if (!sessions.next()) {\n        NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n        span.setAttribute(\"error\",true);\n        span.setStatus(Status.NOT_FOUND);\n        EXCEPTION.accept(attributeMap,exception);\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw exception;\n      }\n      rawUri=sessions.getString(SESSION_URI_COL);\n      String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n      caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n    }\n     CAPABILITIES_EVENT.accept(attributeMap,caps);\n    try {\n      attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n      uri=new URI(rawUri);\n    }\n catch (    URISyntaxException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.INTERNAL);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n    }\n    span.addEvent(\"Retrieved session from the database\",attributeMap);\n    return new Session(id,uri,caps);\n  }\n catch (  SQLException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.CANCELLED);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new JdbcException(e);\n  }\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 361,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3426,
        "startLineNumber" : 158,
        "startColumnNumber" : 65,
        "endLineNumber" : 235,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Require.nonNull(\"Session ID\",id);\n  URI uri=null;\n  Capabilities caps=null;\n  String rawUri=null;\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  try (Span span=tracer.getCurrentContext().createSpan(\"SELECT * from  sessions_map where session_ids = ?\")){\n    SESSION_ID.accept(span,id);\n    SESSION_ID_EVENT.accept(attributeMap,id);\n    setCommonSpanAttributes(span);\n    setCommonEventAttributes(attributeMap);\n    try (PreparedStatement statement=readSessionStatement(id)){\n      String statementStr=statement.toString();\n      span.setAttribute(DATABASE_STATEMENT,statementStr);\n      span.setAttribute(DATABASE_OPERATION,\"select\");\n      attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n      attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n      try (ResultSet sessions=statement.executeQuery()){\n        if (!sessions.next()) {\n          NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n          span.setAttribute(\"error\",true);\n          span.setStatus(Status.NOT_FOUND);\n          EXCEPTION.accept(attributeMap,exception);\n          attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n          span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n          throw exception;\n        }\n        rawUri=sessions.getString(SESSION_URI_COL);\n        String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n        caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n      }\n       CAPABILITIES_EVENT.accept(attributeMap,caps);\n      try {\n        attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n        uri=new URI(rawUri);\n      }\n catch (      URISyntaxException e) {\n        span.setAttribute(\"error\",true);\n        span.setStatus(Status.INTERNAL);\n        EXCEPTION.accept(attributeMap,e);\n        attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n      }\n      span.addEvent(\"Retrieved session from the database\",attributeMap);\n      return new Session(id,uri,caps);\n    }\n catch (    SQLException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.CANCELLED);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new JdbcException(e);\n    }\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 400,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3501,
        "startLineNumber" : 157,
        "startColumnNumber" : 2,
        "endLineNumber" : 235,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public Session get(SessionId id) throws NoSuchSessionException {\n  Require.nonNull(\"Session ID\",id);\n  URI uri=null;\n  Capabilities caps=null;\n  String rawUri=null;\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  try (Span span=tracer.getCurrentContext().createSpan(\"SELECT * from  sessions_map where session_ids = ?\")){\n    SESSION_ID.accept(span,id);\n    SESSION_ID_EVENT.accept(attributeMap,id);\n    setCommonSpanAttributes(span);\n    setCommonEventAttributes(attributeMap);\n    try (PreparedStatement statement=readSessionStatement(id)){\n      String statementStr=statement.toString();\n      span.setAttribute(DATABASE_STATEMENT,statementStr);\n      span.setAttribute(DATABASE_OPERATION,\"select\");\n      attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n      attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n      try (ResultSet sessions=statement.executeQuery()){\n        if (!sessions.next()) {\n          NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n          span.setAttribute(\"error\",true);\n          span.setStatus(Status.NOT_FOUND);\n          EXCEPTION.accept(attributeMap,exception);\n          attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n          span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n          throw exception;\n        }\n        rawUri=sessions.getString(SESSION_URI_COL);\n        String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n        caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n      }\n       CAPABILITIES_EVENT.accept(attributeMap,caps);\n      try {\n        attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n        uri=new URI(rawUri);\n      }\n catch (      URISyntaxException e) {\n        span.setAttribute(\"error\",true);\n        span.setStatus(Status.INTERNAL);\n        EXCEPTION.accept(attributeMap,e);\n        attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n      }\n      span.addEvent(\"Retrieved session from the database\",attributeMap);\n      return new Session(id,uri,caps);\n    }\n catch (    SQLException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.CANCELLED);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new JdbcException(e);\n    }\n  }\n }\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 413,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 177,
        "startColumnNumber" : 8,
        "endLineNumber" : 177,
        "endColumnNumber" : 80
      },
      "nodeContext" : "attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.openqa.selenium.remote.tracing.EventAttribute"
  }, {
    "nodeContext" : "EventAttribute",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 178,
      "startColumnNumber" : 45,
      "endLineNumber" : 178,
      "endColumnNumber" : 59
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 178,
        "startColumnNumber" : 45,
        "endLineNumber" : 178,
        "endColumnNumber" : 82
      },
      "nodeContext" : "EventAttribute.setValue(statementStr)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 178,
        "startColumnNumber" : 8,
        "endLineNumber" : 178,
        "endColumnNumber" : 83
      },
      "nodeContext" : "attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 178,
        "startColumnNumber" : 8,
        "endLineNumber" : 178,
        "endColumnNumber" : 84
      },
      "nodeContext" : "attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2406,
        "startLineNumber" : 173,
        "startColumnNumber" : 67,
        "endLineNumber" : 225,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  String statementStr=statement.toString();\n  span.setAttribute(DATABASE_STATEMENT,statementStr);\n  span.setAttribute(DATABASE_OPERATION,\"select\");\n  attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n  attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n  try (ResultSet sessions=statement.executeQuery()){\n    if (!sessions.next()) {\n      NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.NOT_FOUND);\n      EXCEPTION.accept(attributeMap,exception);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw exception;\n    }\n    rawUri=sessions.getString(SESSION_URI_COL);\n    String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n    caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n  }\n   CAPABILITIES_EVENT.accept(attributeMap,caps);\n  try {\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n    uri=new URI(rawUri);\n  }\n catch (  URISyntaxException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.INTERNAL);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n  }\n  span.addEvent(\"Retrieved session from the database\",attributeMap);\n  return new Session(id,uri,caps);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 262,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2930,
        "startLineNumber" : 173,
        "startColumnNumber" : 6,
        "endLineNumber" : 233,
        "endColumnNumber" : 7
      },
      "nodeContext" : "try (PreparedStatement statement=readSessionStatement(id)){\n  String statementStr=statement.toString();\n  span.setAttribute(DATABASE_STATEMENT,statementStr);\n  span.setAttribute(DATABASE_OPERATION,\"select\");\n  attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n  attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n  try (ResultSet sessions=statement.executeQuery()){\n    if (!sessions.next()) {\n      NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.NOT_FOUND);\n      EXCEPTION.accept(attributeMap,exception);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw exception;\n    }\n    rawUri=sessions.getString(SESSION_URI_COL);\n    String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n    caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n  }\n   CAPABILITIES_EVENT.accept(attributeMap,caps);\n  try {\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n    uri=new URI(rawUri);\n  }\n catch (  URISyntaxException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.INTERNAL);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n  }\n  span.addEvent(\"Retrieved session from the database\",attributeMap);\n  return new Session(id,uri,caps);\n}\n catch (SQLException e) {\n  span.setAttribute(\"error\",true);\n  span.setStatus(Status.CANCELLED);\n  EXCEPTION.accept(attributeMap,e);\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  throw new JdbcException(e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 328,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3112,
        "startLineNumber" : 167,
        "startColumnNumber" : 62,
        "endLineNumber" : 234,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SESSION_ID.accept(span,id);\n  SESSION_ID_EVENT.accept(attributeMap,id);\n  setCommonSpanAttributes(span);\n  setCommonEventAttributes(attributeMap);\n  try (PreparedStatement statement=readSessionStatement(id)){\n    String statementStr=statement.toString();\n    span.setAttribute(DATABASE_STATEMENT,statementStr);\n    span.setAttribute(DATABASE_OPERATION,\"select\");\n    attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n    attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n    try (ResultSet sessions=statement.executeQuery()){\n      if (!sessions.next()) {\n        NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n        span.setAttribute(\"error\",true);\n        span.setStatus(Status.NOT_FOUND);\n        EXCEPTION.accept(attributeMap,exception);\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw exception;\n      }\n      rawUri=sessions.getString(SESSION_URI_COL);\n      String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n      caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n    }\n     CAPABILITIES_EVENT.accept(attributeMap,caps);\n    try {\n      attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n      uri=new URI(rawUri);\n    }\n catch (    URISyntaxException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.INTERNAL);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n    }\n    span.addEvent(\"Retrieved session from the database\",attributeMap);\n    return new Session(id,uri,caps);\n  }\n catch (  SQLException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.CANCELLED);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new JdbcException(e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 349,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3230,
        "startLineNumber" : 166,
        "startColumnNumber" : 4,
        "endLineNumber" : 234,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try (Span span=tracer.getCurrentContext().createSpan(\"SELECT * from  sessions_map where session_ids = ?\")){\n  SESSION_ID.accept(span,id);\n  SESSION_ID_EVENT.accept(attributeMap,id);\n  setCommonSpanAttributes(span);\n  setCommonEventAttributes(attributeMap);\n  try (PreparedStatement statement=readSessionStatement(id)){\n    String statementStr=statement.toString();\n    span.setAttribute(DATABASE_STATEMENT,statementStr);\n    span.setAttribute(DATABASE_OPERATION,\"select\");\n    attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n    attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n    try (ResultSet sessions=statement.executeQuery()){\n      if (!sessions.next()) {\n        NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n        span.setAttribute(\"error\",true);\n        span.setStatus(Status.NOT_FOUND);\n        EXCEPTION.accept(attributeMap,exception);\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw exception;\n      }\n      rawUri=sessions.getString(SESSION_URI_COL);\n      String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n      caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n    }\n     CAPABILITIES_EVENT.accept(attributeMap,caps);\n    try {\n      attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n      uri=new URI(rawUri);\n    }\n catch (    URISyntaxException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.INTERNAL);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n    }\n    span.addEvent(\"Retrieved session from the database\",attributeMap);\n    return new Session(id,uri,caps);\n  }\n catch (  SQLException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.CANCELLED);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new JdbcException(e);\n  }\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 361,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3426,
        "startLineNumber" : 158,
        "startColumnNumber" : 65,
        "endLineNumber" : 235,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Require.nonNull(\"Session ID\",id);\n  URI uri=null;\n  Capabilities caps=null;\n  String rawUri=null;\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  try (Span span=tracer.getCurrentContext().createSpan(\"SELECT * from  sessions_map where session_ids = ?\")){\n    SESSION_ID.accept(span,id);\n    SESSION_ID_EVENT.accept(attributeMap,id);\n    setCommonSpanAttributes(span);\n    setCommonEventAttributes(attributeMap);\n    try (PreparedStatement statement=readSessionStatement(id)){\n      String statementStr=statement.toString();\n      span.setAttribute(DATABASE_STATEMENT,statementStr);\n      span.setAttribute(DATABASE_OPERATION,\"select\");\n      attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n      attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n      try (ResultSet sessions=statement.executeQuery()){\n        if (!sessions.next()) {\n          NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n          span.setAttribute(\"error\",true);\n          span.setStatus(Status.NOT_FOUND);\n          EXCEPTION.accept(attributeMap,exception);\n          attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n          span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n          throw exception;\n        }\n        rawUri=sessions.getString(SESSION_URI_COL);\n        String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n        caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n      }\n       CAPABILITIES_EVENT.accept(attributeMap,caps);\n      try {\n        attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n        uri=new URI(rawUri);\n      }\n catch (      URISyntaxException e) {\n        span.setAttribute(\"error\",true);\n        span.setStatus(Status.INTERNAL);\n        EXCEPTION.accept(attributeMap,e);\n        attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n      }\n      span.addEvent(\"Retrieved session from the database\",attributeMap);\n      return new Session(id,uri,caps);\n    }\n catch (    SQLException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.CANCELLED);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new JdbcException(e);\n    }\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 400,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3501,
        "startLineNumber" : 157,
        "startColumnNumber" : 2,
        "endLineNumber" : 235,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public Session get(SessionId id) throws NoSuchSessionException {\n  Require.nonNull(\"Session ID\",id);\n  URI uri=null;\n  Capabilities caps=null;\n  String rawUri=null;\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  try (Span span=tracer.getCurrentContext().createSpan(\"SELECT * from  sessions_map where session_ids = ?\")){\n    SESSION_ID.accept(span,id);\n    SESSION_ID_EVENT.accept(attributeMap,id);\n    setCommonSpanAttributes(span);\n    setCommonEventAttributes(attributeMap);\n    try (PreparedStatement statement=readSessionStatement(id)){\n      String statementStr=statement.toString();\n      span.setAttribute(DATABASE_STATEMENT,statementStr);\n      span.setAttribute(DATABASE_OPERATION,\"select\");\n      attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n      attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n      try (ResultSet sessions=statement.executeQuery()){\n        if (!sessions.next()) {\n          NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n          span.setAttribute(\"error\",true);\n          span.setStatus(Status.NOT_FOUND);\n          EXCEPTION.accept(attributeMap,exception);\n          attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n          span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n          throw exception;\n        }\n        rawUri=sessions.getString(SESSION_URI_COL);\n        String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n        caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n      }\n       CAPABILITIES_EVENT.accept(attributeMap,caps);\n      try {\n        attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n        uri=new URI(rawUri);\n      }\n catch (      URISyntaxException e) {\n        span.setAttribute(\"error\",true);\n        span.setStatus(Status.INTERNAL);\n        EXCEPTION.accept(attributeMap,e);\n        attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n      }\n      span.addEvent(\"Retrieved session from the database\",attributeMap);\n      return new Session(id,uri,caps);\n    }\n catch (    SQLException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.CANCELLED);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new JdbcException(e);\n    }\n  }\n }\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 413,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 178,
        "startColumnNumber" : 8,
        "endLineNumber" : 178,
        "endColumnNumber" : 84
      },
      "nodeContext" : "attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.openqa.selenium.remote.tracing.EventAttribute"
  }, {
    "nodeContext" : "EventAttribute",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 189,
      "startColumnNumber" : 29,
      "endLineNumber" : 189,
      "endColumnNumber" : 43
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 167,
        "startLineNumber" : 189,
        "startColumnNumber" : 29,
        "endLineNumber" : 191,
        "endColumnNumber" : 51
      },
      "nodeContext" : "EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 255,
        "startLineNumber" : 188,
        "startColumnNumber" : 12,
        "endLineNumber" : 191,
        "endColumnNumber" : 52
      },
      "nodeContext" : "attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 256,
        "startLineNumber" : 188,
        "startColumnNumber" : 12,
        "endLineNumber" : 191,
        "endColumnNumber" : 53
      },
      "nodeContext" : "attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 673,
        "startLineNumber" : 181,
        "startColumnNumber" : 32,
        "endLineNumber" : 195,
        "endColumnNumber" : 11
      },
      "nodeContext" : "{\n  NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n  span.setAttribute(\"error\",true);\n  span.setStatus(Status.NOT_FOUND);\n  EXCEPTION.accept(attributeMap,exception);\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  throw exception;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 58,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 695,
        "startLineNumber" : 181,
        "startColumnNumber" : 10,
        "endLineNumber" : 195,
        "endColumnNumber" : 11
      },
      "nodeContext" : "if (!sessions.next()) {\n  NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n  span.setAttribute(\"error\",true);\n  span.setStatus(Status.NOT_FOUND);\n  EXCEPTION.accept(attributeMap,exception);\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  throw exception;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 63,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1006,
        "startLineNumber" : 180,
        "startColumnNumber" : 60,
        "endLineNumber" : 204,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (!sessions.next()) {\n    NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.NOT_FOUND);\n    EXCEPTION.accept(attributeMap,exception);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw exception;\n  }\n  rawUri=sessions.getString(SESSION_URI_COL);\n  String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n  caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 97,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1058,
        "startLineNumber" : 180,
        "startColumnNumber" : 8,
        "endLineNumber" : 204,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try (ResultSet sessions=statement.executeQuery()){\n  if (!sessions.next()) {\n    NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.NOT_FOUND);\n    EXCEPTION.accept(attributeMap,exception);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw exception;\n  }\n  rawUri=sessions.getString(SESSION_URI_COL);\n  String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n  caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 106,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2406,
        "startLineNumber" : 173,
        "startColumnNumber" : 67,
        "endLineNumber" : 225,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  String statementStr=statement.toString();\n  span.setAttribute(DATABASE_STATEMENT,statementStr);\n  span.setAttribute(DATABASE_OPERATION,\"select\");\n  attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n  attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n  try (ResultSet sessions=statement.executeQuery()){\n    if (!sessions.next()) {\n      NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.NOT_FOUND);\n      EXCEPTION.accept(attributeMap,exception);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw exception;\n    }\n    rawUri=sessions.getString(SESSION_URI_COL);\n    String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n    caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n  }\n   CAPABILITIES_EVENT.accept(attributeMap,caps);\n  try {\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n    uri=new URI(rawUri);\n  }\n catch (  URISyntaxException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.INTERNAL);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n  }\n  span.addEvent(\"Retrieved session from the database\",attributeMap);\n  return new Session(id,uri,caps);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 262,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2930,
        "startLineNumber" : 173,
        "startColumnNumber" : 6,
        "endLineNumber" : 233,
        "endColumnNumber" : 7
      },
      "nodeContext" : "try (PreparedStatement statement=readSessionStatement(id)){\n  String statementStr=statement.toString();\n  span.setAttribute(DATABASE_STATEMENT,statementStr);\n  span.setAttribute(DATABASE_OPERATION,\"select\");\n  attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n  attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n  try (ResultSet sessions=statement.executeQuery()){\n    if (!sessions.next()) {\n      NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.NOT_FOUND);\n      EXCEPTION.accept(attributeMap,exception);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw exception;\n    }\n    rawUri=sessions.getString(SESSION_URI_COL);\n    String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n    caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n  }\n   CAPABILITIES_EVENT.accept(attributeMap,caps);\n  try {\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n    uri=new URI(rawUri);\n  }\n catch (  URISyntaxException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.INTERNAL);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n  }\n  span.addEvent(\"Retrieved session from the database\",attributeMap);\n  return new Session(id,uri,caps);\n}\n catch (SQLException e) {\n  span.setAttribute(\"error\",true);\n  span.setStatus(Status.CANCELLED);\n  EXCEPTION.accept(attributeMap,e);\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  throw new JdbcException(e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 328,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3112,
        "startLineNumber" : 167,
        "startColumnNumber" : 62,
        "endLineNumber" : 234,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SESSION_ID.accept(span,id);\n  SESSION_ID_EVENT.accept(attributeMap,id);\n  setCommonSpanAttributes(span);\n  setCommonEventAttributes(attributeMap);\n  try (PreparedStatement statement=readSessionStatement(id)){\n    String statementStr=statement.toString();\n    span.setAttribute(DATABASE_STATEMENT,statementStr);\n    span.setAttribute(DATABASE_OPERATION,\"select\");\n    attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n    attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n    try (ResultSet sessions=statement.executeQuery()){\n      if (!sessions.next()) {\n        NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n        span.setAttribute(\"error\",true);\n        span.setStatus(Status.NOT_FOUND);\n        EXCEPTION.accept(attributeMap,exception);\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw exception;\n      }\n      rawUri=sessions.getString(SESSION_URI_COL);\n      String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n      caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n    }\n     CAPABILITIES_EVENT.accept(attributeMap,caps);\n    try {\n      attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n      uri=new URI(rawUri);\n    }\n catch (    URISyntaxException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.INTERNAL);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n    }\n    span.addEvent(\"Retrieved session from the database\",attributeMap);\n    return new Session(id,uri,caps);\n  }\n catch (  SQLException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.CANCELLED);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new JdbcException(e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 349,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3230,
        "startLineNumber" : 166,
        "startColumnNumber" : 4,
        "endLineNumber" : 234,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try (Span span=tracer.getCurrentContext().createSpan(\"SELECT * from  sessions_map where session_ids = ?\")){\n  SESSION_ID.accept(span,id);\n  SESSION_ID_EVENT.accept(attributeMap,id);\n  setCommonSpanAttributes(span);\n  setCommonEventAttributes(attributeMap);\n  try (PreparedStatement statement=readSessionStatement(id)){\n    String statementStr=statement.toString();\n    span.setAttribute(DATABASE_STATEMENT,statementStr);\n    span.setAttribute(DATABASE_OPERATION,\"select\");\n    attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n    attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n    try (ResultSet sessions=statement.executeQuery()){\n      if (!sessions.next()) {\n        NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n        span.setAttribute(\"error\",true);\n        span.setStatus(Status.NOT_FOUND);\n        EXCEPTION.accept(attributeMap,exception);\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw exception;\n      }\n      rawUri=sessions.getString(SESSION_URI_COL);\n      String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n      caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n    }\n     CAPABILITIES_EVENT.accept(attributeMap,caps);\n    try {\n      attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n      uri=new URI(rawUri);\n    }\n catch (    URISyntaxException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.INTERNAL);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n    }\n    span.addEvent(\"Retrieved session from the database\",attributeMap);\n    return new Session(id,uri,caps);\n  }\n catch (  SQLException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.CANCELLED);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new JdbcException(e);\n  }\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 361,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3426,
        "startLineNumber" : 158,
        "startColumnNumber" : 65,
        "endLineNumber" : 235,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Require.nonNull(\"Session ID\",id);\n  URI uri=null;\n  Capabilities caps=null;\n  String rawUri=null;\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  try (Span span=tracer.getCurrentContext().createSpan(\"SELECT * from  sessions_map where session_ids = ?\")){\n    SESSION_ID.accept(span,id);\n    SESSION_ID_EVENT.accept(attributeMap,id);\n    setCommonSpanAttributes(span);\n    setCommonEventAttributes(attributeMap);\n    try (PreparedStatement statement=readSessionStatement(id)){\n      String statementStr=statement.toString();\n      span.setAttribute(DATABASE_STATEMENT,statementStr);\n      span.setAttribute(DATABASE_OPERATION,\"select\");\n      attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n      attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n      try (ResultSet sessions=statement.executeQuery()){\n        if (!sessions.next()) {\n          NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n          span.setAttribute(\"error\",true);\n          span.setStatus(Status.NOT_FOUND);\n          EXCEPTION.accept(attributeMap,exception);\n          attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n          span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n          throw exception;\n        }\n        rawUri=sessions.getString(SESSION_URI_COL);\n        String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n        caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n      }\n       CAPABILITIES_EVENT.accept(attributeMap,caps);\n      try {\n        attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n        uri=new URI(rawUri);\n      }\n catch (      URISyntaxException e) {\n        span.setAttribute(\"error\",true);\n        span.setStatus(Status.INTERNAL);\n        EXCEPTION.accept(attributeMap,e);\n        attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n      }\n      span.addEvent(\"Retrieved session from the database\",attributeMap);\n      return new Session(id,uri,caps);\n    }\n catch (    SQLException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.CANCELLED);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new JdbcException(e);\n    }\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 400,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3501,
        "startLineNumber" : 157,
        "startColumnNumber" : 2,
        "endLineNumber" : 235,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public Session get(SessionId id) throws NoSuchSessionException {\n  Require.nonNull(\"Session ID\",id);\n  URI uri=null;\n  Capabilities caps=null;\n  String rawUri=null;\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  try (Span span=tracer.getCurrentContext().createSpan(\"SELECT * from  sessions_map where session_ids = ?\")){\n    SESSION_ID.accept(span,id);\n    SESSION_ID_EVENT.accept(attributeMap,id);\n    setCommonSpanAttributes(span);\n    setCommonEventAttributes(attributeMap);\n    try (PreparedStatement statement=readSessionStatement(id)){\n      String statementStr=statement.toString();\n      span.setAttribute(DATABASE_STATEMENT,statementStr);\n      span.setAttribute(DATABASE_OPERATION,\"select\");\n      attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n      attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n      try (ResultSet sessions=statement.executeQuery()){\n        if (!sessions.next()) {\n          NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n          span.setAttribute(\"error\",true);\n          span.setStatus(Status.NOT_FOUND);\n          EXCEPTION.accept(attributeMap,exception);\n          attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n          span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n          throw exception;\n        }\n        rawUri=sessions.getString(SESSION_URI_COL);\n        String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n        caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n      }\n       CAPABILITIES_EVENT.accept(attributeMap,caps);\n      try {\n        attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n        uri=new URI(rawUri);\n      }\n catch (      URISyntaxException e) {\n        span.setAttribute(\"error\",true);\n        span.setStatus(Status.INTERNAL);\n        EXCEPTION.accept(attributeMap,e);\n        attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n      }\n      span.addEvent(\"Retrieved session from the database\",attributeMap);\n      return new Session(id,uri,caps);\n    }\n catch (    SQLException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.CANCELLED);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new JdbcException(e);\n    }\n  }\n }\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 413,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 167,
        "startLineNumber" : 189,
        "startColumnNumber" : 29,
        "endLineNumber" : 191,
        "endColumnNumber" : 51
      },
      "nodeContext" : "EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.openqa.selenium.remote.tracing.EventAttribute"
  }, {
    "nodeContext" : "EventAttribute",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 208,
      "startColumnNumber" : 62,
      "endLineNumber" : 208,
      "endColumnNumber" : 76
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 208,
        "startColumnNumber" : 62,
        "endLineNumber" : 208,
        "endColumnNumber" : 93
      },
      "nodeContext" : "EventAttribute.setValue(rawUri)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 208,
        "startColumnNumber" : 10,
        "endLineNumber" : 208,
        "endColumnNumber" : 94
      },
      "nodeContext" : "attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 208,
        "startColumnNumber" : 10,
        "endLineNumber" : 208,
        "endColumnNumber" : 95
      },
      "nodeContext" : "attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 140,
        "startLineNumber" : 207,
        "startColumnNumber" : 12,
        "endLineNumber" : 210,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n  uri=new URI(rawUri);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 808,
        "startLineNumber" : 207,
        "startColumnNumber" : 8,
        "endLineNumber" : 221,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n  uri=new URI(rawUri);\n}\n catch (URISyntaxException e) {\n  span.setAttribute(\"error\",true);\n  span.setStatus(Status.INTERNAL);\n  EXCEPTION.accept(attributeMap,e);\n  attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 98,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2406,
        "startLineNumber" : 173,
        "startColumnNumber" : 67,
        "endLineNumber" : 225,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  String statementStr=statement.toString();\n  span.setAttribute(DATABASE_STATEMENT,statementStr);\n  span.setAttribute(DATABASE_OPERATION,\"select\");\n  attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n  attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n  try (ResultSet sessions=statement.executeQuery()){\n    if (!sessions.next()) {\n      NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.NOT_FOUND);\n      EXCEPTION.accept(attributeMap,exception);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw exception;\n    }\n    rawUri=sessions.getString(SESSION_URI_COL);\n    String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n    caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n  }\n   CAPABILITIES_EVENT.accept(attributeMap,caps);\n  try {\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n    uri=new URI(rawUri);\n  }\n catch (  URISyntaxException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.INTERNAL);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n  }\n  span.addEvent(\"Retrieved session from the database\",attributeMap);\n  return new Session(id,uri,caps);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 262,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2930,
        "startLineNumber" : 173,
        "startColumnNumber" : 6,
        "endLineNumber" : 233,
        "endColumnNumber" : 7
      },
      "nodeContext" : "try (PreparedStatement statement=readSessionStatement(id)){\n  String statementStr=statement.toString();\n  span.setAttribute(DATABASE_STATEMENT,statementStr);\n  span.setAttribute(DATABASE_OPERATION,\"select\");\n  attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n  attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n  try (ResultSet sessions=statement.executeQuery()){\n    if (!sessions.next()) {\n      NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.NOT_FOUND);\n      EXCEPTION.accept(attributeMap,exception);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw exception;\n    }\n    rawUri=sessions.getString(SESSION_URI_COL);\n    String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n    caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n  }\n   CAPABILITIES_EVENT.accept(attributeMap,caps);\n  try {\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n    uri=new URI(rawUri);\n  }\n catch (  URISyntaxException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.INTERNAL);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n  }\n  span.addEvent(\"Retrieved session from the database\",attributeMap);\n  return new Session(id,uri,caps);\n}\n catch (SQLException e) {\n  span.setAttribute(\"error\",true);\n  span.setStatus(Status.CANCELLED);\n  EXCEPTION.accept(attributeMap,e);\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  throw new JdbcException(e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 328,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3112,
        "startLineNumber" : 167,
        "startColumnNumber" : 62,
        "endLineNumber" : 234,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SESSION_ID.accept(span,id);\n  SESSION_ID_EVENT.accept(attributeMap,id);\n  setCommonSpanAttributes(span);\n  setCommonEventAttributes(attributeMap);\n  try (PreparedStatement statement=readSessionStatement(id)){\n    String statementStr=statement.toString();\n    span.setAttribute(DATABASE_STATEMENT,statementStr);\n    span.setAttribute(DATABASE_OPERATION,\"select\");\n    attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n    attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n    try (ResultSet sessions=statement.executeQuery()){\n      if (!sessions.next()) {\n        NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n        span.setAttribute(\"error\",true);\n        span.setStatus(Status.NOT_FOUND);\n        EXCEPTION.accept(attributeMap,exception);\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw exception;\n      }\n      rawUri=sessions.getString(SESSION_URI_COL);\n      String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n      caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n    }\n     CAPABILITIES_EVENT.accept(attributeMap,caps);\n    try {\n      attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n      uri=new URI(rawUri);\n    }\n catch (    URISyntaxException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.INTERNAL);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n    }\n    span.addEvent(\"Retrieved session from the database\",attributeMap);\n    return new Session(id,uri,caps);\n  }\n catch (  SQLException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.CANCELLED);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new JdbcException(e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 349,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3230,
        "startLineNumber" : 166,
        "startColumnNumber" : 4,
        "endLineNumber" : 234,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try (Span span=tracer.getCurrentContext().createSpan(\"SELECT * from  sessions_map where session_ids = ?\")){\n  SESSION_ID.accept(span,id);\n  SESSION_ID_EVENT.accept(attributeMap,id);\n  setCommonSpanAttributes(span);\n  setCommonEventAttributes(attributeMap);\n  try (PreparedStatement statement=readSessionStatement(id)){\n    String statementStr=statement.toString();\n    span.setAttribute(DATABASE_STATEMENT,statementStr);\n    span.setAttribute(DATABASE_OPERATION,\"select\");\n    attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n    attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n    try (ResultSet sessions=statement.executeQuery()){\n      if (!sessions.next()) {\n        NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n        span.setAttribute(\"error\",true);\n        span.setStatus(Status.NOT_FOUND);\n        EXCEPTION.accept(attributeMap,exception);\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw exception;\n      }\n      rawUri=sessions.getString(SESSION_URI_COL);\n      String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n      caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n    }\n     CAPABILITIES_EVENT.accept(attributeMap,caps);\n    try {\n      attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n      uri=new URI(rawUri);\n    }\n catch (    URISyntaxException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.INTERNAL);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n    }\n    span.addEvent(\"Retrieved session from the database\",attributeMap);\n    return new Session(id,uri,caps);\n  }\n catch (  SQLException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.CANCELLED);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new JdbcException(e);\n  }\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 361,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3426,
        "startLineNumber" : 158,
        "startColumnNumber" : 65,
        "endLineNumber" : 235,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Require.nonNull(\"Session ID\",id);\n  URI uri=null;\n  Capabilities caps=null;\n  String rawUri=null;\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  try (Span span=tracer.getCurrentContext().createSpan(\"SELECT * from  sessions_map where session_ids = ?\")){\n    SESSION_ID.accept(span,id);\n    SESSION_ID_EVENT.accept(attributeMap,id);\n    setCommonSpanAttributes(span);\n    setCommonEventAttributes(attributeMap);\n    try (PreparedStatement statement=readSessionStatement(id)){\n      String statementStr=statement.toString();\n      span.setAttribute(DATABASE_STATEMENT,statementStr);\n      span.setAttribute(DATABASE_OPERATION,\"select\");\n      attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n      attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n      try (ResultSet sessions=statement.executeQuery()){\n        if (!sessions.next()) {\n          NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n          span.setAttribute(\"error\",true);\n          span.setStatus(Status.NOT_FOUND);\n          EXCEPTION.accept(attributeMap,exception);\n          attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n          span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n          throw exception;\n        }\n        rawUri=sessions.getString(SESSION_URI_COL);\n        String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n        caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n      }\n       CAPABILITIES_EVENT.accept(attributeMap,caps);\n      try {\n        attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n        uri=new URI(rawUri);\n      }\n catch (      URISyntaxException e) {\n        span.setAttribute(\"error\",true);\n        span.setStatus(Status.INTERNAL);\n        EXCEPTION.accept(attributeMap,e);\n        attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n      }\n      span.addEvent(\"Retrieved session from the database\",attributeMap);\n      return new Session(id,uri,caps);\n    }\n catch (    SQLException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.CANCELLED);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new JdbcException(e);\n    }\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 400,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3501,
        "startLineNumber" : 157,
        "startColumnNumber" : 2,
        "endLineNumber" : 235,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public Session get(SessionId id) throws NoSuchSessionException {\n  Require.nonNull(\"Session ID\",id);\n  URI uri=null;\n  Capabilities caps=null;\n  String rawUri=null;\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  try (Span span=tracer.getCurrentContext().createSpan(\"SELECT * from  sessions_map where session_ids = ?\")){\n    SESSION_ID.accept(span,id);\n    SESSION_ID_EVENT.accept(attributeMap,id);\n    setCommonSpanAttributes(span);\n    setCommonEventAttributes(attributeMap);\n    try (PreparedStatement statement=readSessionStatement(id)){\n      String statementStr=statement.toString();\n      span.setAttribute(DATABASE_STATEMENT,statementStr);\n      span.setAttribute(DATABASE_OPERATION,\"select\");\n      attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n      attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n      try (ResultSet sessions=statement.executeQuery()){\n        if (!sessions.next()) {\n          NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n          span.setAttribute(\"error\",true);\n          span.setStatus(Status.NOT_FOUND);\n          EXCEPTION.accept(attributeMap,exception);\n          attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n          span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n          throw exception;\n        }\n        rawUri=sessions.getString(SESSION_URI_COL);\n        String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n        caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n      }\n       CAPABILITIES_EVENT.accept(attributeMap,caps);\n      try {\n        attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n        uri=new URI(rawUri);\n      }\n catch (      URISyntaxException e) {\n        span.setAttribute(\"error\",true);\n        span.setStatus(Status.INTERNAL);\n        EXCEPTION.accept(attributeMap,e);\n        attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n      }\n      span.addEvent(\"Retrieved session from the database\",attributeMap);\n      return new Session(id,uri,caps);\n    }\n catch (    SQLException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.CANCELLED);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new JdbcException(e);\n    }\n  }\n }\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 413,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 208,
        "startColumnNumber" : 10,
        "endLineNumber" : 208,
        "endColumnNumber" : 95
      },
      "nodeContext" : "attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.openqa.selenium.remote.tracing.EventAttribute"
  }, {
    "nodeContext" : "EventAttribute",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 214,
      "startColumnNumber" : 62,
      "endLineNumber" : 214,
      "endColumnNumber" : 76
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 214,
        "startColumnNumber" : 62,
        "endLineNumber" : 214,
        "endColumnNumber" : 93
      },
      "nodeContext" : "EventAttribute.setValue(rawUri)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 214,
        "startColumnNumber" : 10,
        "endLineNumber" : 214,
        "endColumnNumber" : 94
      },
      "nodeContext" : "attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 214,
        "startColumnNumber" : 10,
        "endLineNumber" : 214,
        "endColumnNumber" : 95
      },
      "nodeContext" : "attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 634,
        "startLineNumber" : 210,
        "startColumnNumber" : 39,
        "endLineNumber" : 221,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  span.setAttribute(\"error\",true);\n  span.setStatus(Status.INTERNAL);\n  EXCEPTION.accept(attributeMap,e);\n  attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 71,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 663,
        "startLineNumber" : 210,
        "startColumnNumber" : 10,
        "endLineNumber" : 221,
        "endColumnNumber" : 9
      },
      "nodeContext" : "catch (URISyntaxException e) {\n  span.setAttribute(\"error\",true);\n  span.setStatus(Status.INTERNAL);\n  EXCEPTION.accept(attributeMap,e);\n  attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 76,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 808,
        "startLineNumber" : 207,
        "startColumnNumber" : 8,
        "endLineNumber" : 221,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n  uri=new URI(rawUri);\n}\n catch (URISyntaxException e) {\n  span.setAttribute(\"error\",true);\n  span.setStatus(Status.INTERNAL);\n  EXCEPTION.accept(attributeMap,e);\n  attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 98,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2406,
        "startLineNumber" : 173,
        "startColumnNumber" : 67,
        "endLineNumber" : 225,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  String statementStr=statement.toString();\n  span.setAttribute(DATABASE_STATEMENT,statementStr);\n  span.setAttribute(DATABASE_OPERATION,\"select\");\n  attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n  attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n  try (ResultSet sessions=statement.executeQuery()){\n    if (!sessions.next()) {\n      NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.NOT_FOUND);\n      EXCEPTION.accept(attributeMap,exception);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw exception;\n    }\n    rawUri=sessions.getString(SESSION_URI_COL);\n    String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n    caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n  }\n   CAPABILITIES_EVENT.accept(attributeMap,caps);\n  try {\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n    uri=new URI(rawUri);\n  }\n catch (  URISyntaxException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.INTERNAL);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n  }\n  span.addEvent(\"Retrieved session from the database\",attributeMap);\n  return new Session(id,uri,caps);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 262,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2930,
        "startLineNumber" : 173,
        "startColumnNumber" : 6,
        "endLineNumber" : 233,
        "endColumnNumber" : 7
      },
      "nodeContext" : "try (PreparedStatement statement=readSessionStatement(id)){\n  String statementStr=statement.toString();\n  span.setAttribute(DATABASE_STATEMENT,statementStr);\n  span.setAttribute(DATABASE_OPERATION,\"select\");\n  attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n  attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n  try (ResultSet sessions=statement.executeQuery()){\n    if (!sessions.next()) {\n      NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.NOT_FOUND);\n      EXCEPTION.accept(attributeMap,exception);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw exception;\n    }\n    rawUri=sessions.getString(SESSION_URI_COL);\n    String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n    caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n  }\n   CAPABILITIES_EVENT.accept(attributeMap,caps);\n  try {\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n    uri=new URI(rawUri);\n  }\n catch (  URISyntaxException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.INTERNAL);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n  }\n  span.addEvent(\"Retrieved session from the database\",attributeMap);\n  return new Session(id,uri,caps);\n}\n catch (SQLException e) {\n  span.setAttribute(\"error\",true);\n  span.setStatus(Status.CANCELLED);\n  EXCEPTION.accept(attributeMap,e);\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  throw new JdbcException(e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 328,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3112,
        "startLineNumber" : 167,
        "startColumnNumber" : 62,
        "endLineNumber" : 234,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SESSION_ID.accept(span,id);\n  SESSION_ID_EVENT.accept(attributeMap,id);\n  setCommonSpanAttributes(span);\n  setCommonEventAttributes(attributeMap);\n  try (PreparedStatement statement=readSessionStatement(id)){\n    String statementStr=statement.toString();\n    span.setAttribute(DATABASE_STATEMENT,statementStr);\n    span.setAttribute(DATABASE_OPERATION,\"select\");\n    attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n    attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n    try (ResultSet sessions=statement.executeQuery()){\n      if (!sessions.next()) {\n        NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n        span.setAttribute(\"error\",true);\n        span.setStatus(Status.NOT_FOUND);\n        EXCEPTION.accept(attributeMap,exception);\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw exception;\n      }\n      rawUri=sessions.getString(SESSION_URI_COL);\n      String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n      caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n    }\n     CAPABILITIES_EVENT.accept(attributeMap,caps);\n    try {\n      attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n      uri=new URI(rawUri);\n    }\n catch (    URISyntaxException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.INTERNAL);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n    }\n    span.addEvent(\"Retrieved session from the database\",attributeMap);\n    return new Session(id,uri,caps);\n  }\n catch (  SQLException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.CANCELLED);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new JdbcException(e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 349,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3230,
        "startLineNumber" : 166,
        "startColumnNumber" : 4,
        "endLineNumber" : 234,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try (Span span=tracer.getCurrentContext().createSpan(\"SELECT * from  sessions_map where session_ids = ?\")){\n  SESSION_ID.accept(span,id);\n  SESSION_ID_EVENT.accept(attributeMap,id);\n  setCommonSpanAttributes(span);\n  setCommonEventAttributes(attributeMap);\n  try (PreparedStatement statement=readSessionStatement(id)){\n    String statementStr=statement.toString();\n    span.setAttribute(DATABASE_STATEMENT,statementStr);\n    span.setAttribute(DATABASE_OPERATION,\"select\");\n    attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n    attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n    try (ResultSet sessions=statement.executeQuery()){\n      if (!sessions.next()) {\n        NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n        span.setAttribute(\"error\",true);\n        span.setStatus(Status.NOT_FOUND);\n        EXCEPTION.accept(attributeMap,exception);\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw exception;\n      }\n      rawUri=sessions.getString(SESSION_URI_COL);\n      String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n      caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n    }\n     CAPABILITIES_EVENT.accept(attributeMap,caps);\n    try {\n      attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n      uri=new URI(rawUri);\n    }\n catch (    URISyntaxException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.INTERNAL);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n    }\n    span.addEvent(\"Retrieved session from the database\",attributeMap);\n    return new Session(id,uri,caps);\n  }\n catch (  SQLException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.CANCELLED);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new JdbcException(e);\n  }\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 361,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3426,
        "startLineNumber" : 158,
        "startColumnNumber" : 65,
        "endLineNumber" : 235,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Require.nonNull(\"Session ID\",id);\n  URI uri=null;\n  Capabilities caps=null;\n  String rawUri=null;\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  try (Span span=tracer.getCurrentContext().createSpan(\"SELECT * from  sessions_map where session_ids = ?\")){\n    SESSION_ID.accept(span,id);\n    SESSION_ID_EVENT.accept(attributeMap,id);\n    setCommonSpanAttributes(span);\n    setCommonEventAttributes(attributeMap);\n    try (PreparedStatement statement=readSessionStatement(id)){\n      String statementStr=statement.toString();\n      span.setAttribute(DATABASE_STATEMENT,statementStr);\n      span.setAttribute(DATABASE_OPERATION,\"select\");\n      attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n      attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n      try (ResultSet sessions=statement.executeQuery()){\n        if (!sessions.next()) {\n          NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n          span.setAttribute(\"error\",true);\n          span.setStatus(Status.NOT_FOUND);\n          EXCEPTION.accept(attributeMap,exception);\n          attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n          span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n          throw exception;\n        }\n        rawUri=sessions.getString(SESSION_URI_COL);\n        String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n        caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n      }\n       CAPABILITIES_EVENT.accept(attributeMap,caps);\n      try {\n        attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n        uri=new URI(rawUri);\n      }\n catch (      URISyntaxException e) {\n        span.setAttribute(\"error\",true);\n        span.setStatus(Status.INTERNAL);\n        EXCEPTION.accept(attributeMap,e);\n        attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n      }\n      span.addEvent(\"Retrieved session from the database\",attributeMap);\n      return new Session(id,uri,caps);\n    }\n catch (    SQLException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.CANCELLED);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new JdbcException(e);\n    }\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 400,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3501,
        "startLineNumber" : 157,
        "startColumnNumber" : 2,
        "endLineNumber" : 235,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public Session get(SessionId id) throws NoSuchSessionException {\n  Require.nonNull(\"Session ID\",id);\n  URI uri=null;\n  Capabilities caps=null;\n  String rawUri=null;\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  try (Span span=tracer.getCurrentContext().createSpan(\"SELECT * from  sessions_map where session_ids = ?\")){\n    SESSION_ID.accept(span,id);\n    SESSION_ID_EVENT.accept(attributeMap,id);\n    setCommonSpanAttributes(span);\n    setCommonEventAttributes(attributeMap);\n    try (PreparedStatement statement=readSessionStatement(id)){\n      String statementStr=statement.toString();\n      span.setAttribute(DATABASE_STATEMENT,statementStr);\n      span.setAttribute(DATABASE_OPERATION,\"select\");\n      attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n      attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n      try (ResultSet sessions=statement.executeQuery()){\n        if (!sessions.next()) {\n          NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n          span.setAttribute(\"error\",true);\n          span.setStatus(Status.NOT_FOUND);\n          EXCEPTION.accept(attributeMap,exception);\n          attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n          span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n          throw exception;\n        }\n        rawUri=sessions.getString(SESSION_URI_COL);\n        String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n        caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n      }\n       CAPABILITIES_EVENT.accept(attributeMap,caps);\n      try {\n        attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n        uri=new URI(rawUri);\n      }\n catch (      URISyntaxException e) {\n        span.setAttribute(\"error\",true);\n        span.setStatus(Status.INTERNAL);\n        EXCEPTION.accept(attributeMap,e);\n        attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n      }\n      span.addEvent(\"Retrieved session from the database\",attributeMap);\n      return new Session(id,uri,caps);\n    }\n catch (    SQLException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.CANCELLED);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new JdbcException(e);\n    }\n  }\n }\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 413,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 214,
        "startColumnNumber" : 10,
        "endLineNumber" : 214,
        "endColumnNumber" : 95
      },
      "nodeContext" : "attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.openqa.selenium.remote.tracing.EventAttribute"
  }, {
    "nodeContext" : "EventAttribute",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 216,
      "startColumnNumber" : 27,
      "endLineNumber" : 216,
      "endColumnNumber" : 41
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 216,
        "startColumnNumber" : 27,
        "endLineNumber" : 216,
        "endColumnNumber" : 108
      },
      "nodeContext" : "EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 167,
        "startLineNumber" : 215,
        "startColumnNumber" : 10,
        "endLineNumber" : 216,
        "endColumnNumber" : 109
      },
      "nodeContext" : "attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 168,
        "startLineNumber" : 215,
        "startColumnNumber" : 10,
        "endLineNumber" : 216,
        "endColumnNumber" : 110
      },
      "nodeContext" : "attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 634,
        "startLineNumber" : 210,
        "startColumnNumber" : 39,
        "endLineNumber" : 221,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  span.setAttribute(\"error\",true);\n  span.setStatus(Status.INTERNAL);\n  EXCEPTION.accept(attributeMap,e);\n  attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 71,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 663,
        "startLineNumber" : 210,
        "startColumnNumber" : 10,
        "endLineNumber" : 221,
        "endColumnNumber" : 9
      },
      "nodeContext" : "catch (URISyntaxException e) {\n  span.setAttribute(\"error\",true);\n  span.setStatus(Status.INTERNAL);\n  EXCEPTION.accept(attributeMap,e);\n  attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 76,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 808,
        "startLineNumber" : 207,
        "startColumnNumber" : 8,
        "endLineNumber" : 221,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n  uri=new URI(rawUri);\n}\n catch (URISyntaxException e) {\n  span.setAttribute(\"error\",true);\n  span.setStatus(Status.INTERNAL);\n  EXCEPTION.accept(attributeMap,e);\n  attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 98,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2406,
        "startLineNumber" : 173,
        "startColumnNumber" : 67,
        "endLineNumber" : 225,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  String statementStr=statement.toString();\n  span.setAttribute(DATABASE_STATEMENT,statementStr);\n  span.setAttribute(DATABASE_OPERATION,\"select\");\n  attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n  attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n  try (ResultSet sessions=statement.executeQuery()){\n    if (!sessions.next()) {\n      NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.NOT_FOUND);\n      EXCEPTION.accept(attributeMap,exception);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw exception;\n    }\n    rawUri=sessions.getString(SESSION_URI_COL);\n    String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n    caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n  }\n   CAPABILITIES_EVENT.accept(attributeMap,caps);\n  try {\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n    uri=new URI(rawUri);\n  }\n catch (  URISyntaxException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.INTERNAL);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n  }\n  span.addEvent(\"Retrieved session from the database\",attributeMap);\n  return new Session(id,uri,caps);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 262,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2930,
        "startLineNumber" : 173,
        "startColumnNumber" : 6,
        "endLineNumber" : 233,
        "endColumnNumber" : 7
      },
      "nodeContext" : "try (PreparedStatement statement=readSessionStatement(id)){\n  String statementStr=statement.toString();\n  span.setAttribute(DATABASE_STATEMENT,statementStr);\n  span.setAttribute(DATABASE_OPERATION,\"select\");\n  attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n  attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n  try (ResultSet sessions=statement.executeQuery()){\n    if (!sessions.next()) {\n      NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.NOT_FOUND);\n      EXCEPTION.accept(attributeMap,exception);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw exception;\n    }\n    rawUri=sessions.getString(SESSION_URI_COL);\n    String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n    caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n  }\n   CAPABILITIES_EVENT.accept(attributeMap,caps);\n  try {\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n    uri=new URI(rawUri);\n  }\n catch (  URISyntaxException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.INTERNAL);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n  }\n  span.addEvent(\"Retrieved session from the database\",attributeMap);\n  return new Session(id,uri,caps);\n}\n catch (SQLException e) {\n  span.setAttribute(\"error\",true);\n  span.setStatus(Status.CANCELLED);\n  EXCEPTION.accept(attributeMap,e);\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  throw new JdbcException(e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 328,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3112,
        "startLineNumber" : 167,
        "startColumnNumber" : 62,
        "endLineNumber" : 234,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SESSION_ID.accept(span,id);\n  SESSION_ID_EVENT.accept(attributeMap,id);\n  setCommonSpanAttributes(span);\n  setCommonEventAttributes(attributeMap);\n  try (PreparedStatement statement=readSessionStatement(id)){\n    String statementStr=statement.toString();\n    span.setAttribute(DATABASE_STATEMENT,statementStr);\n    span.setAttribute(DATABASE_OPERATION,\"select\");\n    attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n    attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n    try (ResultSet sessions=statement.executeQuery()){\n      if (!sessions.next()) {\n        NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n        span.setAttribute(\"error\",true);\n        span.setStatus(Status.NOT_FOUND);\n        EXCEPTION.accept(attributeMap,exception);\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw exception;\n      }\n      rawUri=sessions.getString(SESSION_URI_COL);\n      String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n      caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n    }\n     CAPABILITIES_EVENT.accept(attributeMap,caps);\n    try {\n      attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n      uri=new URI(rawUri);\n    }\n catch (    URISyntaxException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.INTERNAL);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n    }\n    span.addEvent(\"Retrieved session from the database\",attributeMap);\n    return new Session(id,uri,caps);\n  }\n catch (  SQLException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.CANCELLED);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new JdbcException(e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 349,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3230,
        "startLineNumber" : 166,
        "startColumnNumber" : 4,
        "endLineNumber" : 234,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try (Span span=tracer.getCurrentContext().createSpan(\"SELECT * from  sessions_map where session_ids = ?\")){\n  SESSION_ID.accept(span,id);\n  SESSION_ID_EVENT.accept(attributeMap,id);\n  setCommonSpanAttributes(span);\n  setCommonEventAttributes(attributeMap);\n  try (PreparedStatement statement=readSessionStatement(id)){\n    String statementStr=statement.toString();\n    span.setAttribute(DATABASE_STATEMENT,statementStr);\n    span.setAttribute(DATABASE_OPERATION,\"select\");\n    attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n    attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n    try (ResultSet sessions=statement.executeQuery()){\n      if (!sessions.next()) {\n        NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n        span.setAttribute(\"error\",true);\n        span.setStatus(Status.NOT_FOUND);\n        EXCEPTION.accept(attributeMap,exception);\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw exception;\n      }\n      rawUri=sessions.getString(SESSION_URI_COL);\n      String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n      caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n    }\n     CAPABILITIES_EVENT.accept(attributeMap,caps);\n    try {\n      attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n      uri=new URI(rawUri);\n    }\n catch (    URISyntaxException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.INTERNAL);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n    }\n    span.addEvent(\"Retrieved session from the database\",attributeMap);\n    return new Session(id,uri,caps);\n  }\n catch (  SQLException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.CANCELLED);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new JdbcException(e);\n  }\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 361,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3426,
        "startLineNumber" : 158,
        "startColumnNumber" : 65,
        "endLineNumber" : 235,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Require.nonNull(\"Session ID\",id);\n  URI uri=null;\n  Capabilities caps=null;\n  String rawUri=null;\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  try (Span span=tracer.getCurrentContext().createSpan(\"SELECT * from  sessions_map where session_ids = ?\")){\n    SESSION_ID.accept(span,id);\n    SESSION_ID_EVENT.accept(attributeMap,id);\n    setCommonSpanAttributes(span);\n    setCommonEventAttributes(attributeMap);\n    try (PreparedStatement statement=readSessionStatement(id)){\n      String statementStr=statement.toString();\n      span.setAttribute(DATABASE_STATEMENT,statementStr);\n      span.setAttribute(DATABASE_OPERATION,\"select\");\n      attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n      attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n      try (ResultSet sessions=statement.executeQuery()){\n        if (!sessions.next()) {\n          NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n          span.setAttribute(\"error\",true);\n          span.setStatus(Status.NOT_FOUND);\n          EXCEPTION.accept(attributeMap,exception);\n          attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n          span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n          throw exception;\n        }\n        rawUri=sessions.getString(SESSION_URI_COL);\n        String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n        caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n      }\n       CAPABILITIES_EVENT.accept(attributeMap,caps);\n      try {\n        attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n        uri=new URI(rawUri);\n      }\n catch (      URISyntaxException e) {\n        span.setAttribute(\"error\",true);\n        span.setStatus(Status.INTERNAL);\n        EXCEPTION.accept(attributeMap,e);\n        attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n      }\n      span.addEvent(\"Retrieved session from the database\",attributeMap);\n      return new Session(id,uri,caps);\n    }\n catch (    SQLException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.CANCELLED);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new JdbcException(e);\n    }\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 400,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3501,
        "startLineNumber" : 157,
        "startColumnNumber" : 2,
        "endLineNumber" : 235,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public Session get(SessionId id) throws NoSuchSessionException {\n  Require.nonNull(\"Session ID\",id);\n  URI uri=null;\n  Capabilities caps=null;\n  String rawUri=null;\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  try (Span span=tracer.getCurrentContext().createSpan(\"SELECT * from  sessions_map where session_ids = ?\")){\n    SESSION_ID.accept(span,id);\n    SESSION_ID_EVENT.accept(attributeMap,id);\n    setCommonSpanAttributes(span);\n    setCommonEventAttributes(attributeMap);\n    try (PreparedStatement statement=readSessionStatement(id)){\n      String statementStr=statement.toString();\n      span.setAttribute(DATABASE_STATEMENT,statementStr);\n      span.setAttribute(DATABASE_OPERATION,\"select\");\n      attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n      attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n      try (ResultSet sessions=statement.executeQuery()){\n        if (!sessions.next()) {\n          NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n          span.setAttribute(\"error\",true);\n          span.setStatus(Status.NOT_FOUND);\n          EXCEPTION.accept(attributeMap,exception);\n          attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n          span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n          throw exception;\n        }\n        rawUri=sessions.getString(SESSION_URI_COL);\n        String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n        caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n      }\n       CAPABILITIES_EVENT.accept(attributeMap,caps);\n      try {\n        attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n        uri=new URI(rawUri);\n      }\n catch (      URISyntaxException e) {\n        span.setAttribute(\"error\",true);\n        span.setStatus(Status.INTERNAL);\n        EXCEPTION.accept(attributeMap,e);\n        attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n      }\n      span.addEvent(\"Retrieved session from the database\",attributeMap);\n      return new Session(id,uri,caps);\n    }\n catch (    SQLException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.CANCELLED);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new JdbcException(e);\n    }\n  }\n }\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 413,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 216,
        "startColumnNumber" : 27,
        "endLineNumber" : 216,
        "endColumnNumber" : 108
      },
      "nodeContext" : "EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.openqa.selenium.remote.tracing.EventAttribute"
  }, {
    "nodeContext" : "EventAttribute",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 230,
      "startColumnNumber" : 25,
      "endLineNumber" : 230,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 97,
        "startLineNumber" : 230,
        "startColumnNumber" : 25,
        "endLineNumber" : 230,
        "endColumnNumber" : 122
      },
      "nodeContext" : "EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 181,
        "startLineNumber" : 229,
        "startColumnNumber" : 8,
        "endLineNumber" : 230,
        "endColumnNumber" : 123
      },
      "nodeContext" : "attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 182,
        "startLineNumber" : 229,
        "startColumnNumber" : 8,
        "endLineNumber" : 230,
        "endColumnNumber" : 124
      },
      "nodeContext" : "attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 439,
        "startLineNumber" : 225,
        "startColumnNumber" : 31,
        "endLineNumber" : 233,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  span.setAttribute(\"error\",true);\n  span.setStatus(Status.CANCELLED);\n  EXCEPTION.accept(attributeMap,e);\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  throw new JdbcException(e);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 52,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 462,
        "startLineNumber" : 225,
        "startColumnNumber" : 8,
        "endLineNumber" : 233,
        "endColumnNumber" : 7
      },
      "nodeContext" : "catch (SQLException e) {\n  span.setAttribute(\"error\",true);\n  span.setStatus(Status.CANCELLED);\n  EXCEPTION.accept(attributeMap,e);\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  throw new JdbcException(e);\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 57,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2930,
        "startLineNumber" : 173,
        "startColumnNumber" : 6,
        "endLineNumber" : 233,
        "endColumnNumber" : 7
      },
      "nodeContext" : "try (PreparedStatement statement=readSessionStatement(id)){\n  String statementStr=statement.toString();\n  span.setAttribute(DATABASE_STATEMENT,statementStr);\n  span.setAttribute(DATABASE_OPERATION,\"select\");\n  attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n  attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n  try (ResultSet sessions=statement.executeQuery()){\n    if (!sessions.next()) {\n      NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.NOT_FOUND);\n      EXCEPTION.accept(attributeMap,exception);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw exception;\n    }\n    rawUri=sessions.getString(SESSION_URI_COL);\n    String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n    caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n  }\n   CAPABILITIES_EVENT.accept(attributeMap,caps);\n  try {\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n    uri=new URI(rawUri);\n  }\n catch (  URISyntaxException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.INTERNAL);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n  }\n  span.addEvent(\"Retrieved session from the database\",attributeMap);\n  return new Session(id,uri,caps);\n}\n catch (SQLException e) {\n  span.setAttribute(\"error\",true);\n  span.setStatus(Status.CANCELLED);\n  EXCEPTION.accept(attributeMap,e);\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  throw new JdbcException(e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 328,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3112,
        "startLineNumber" : 167,
        "startColumnNumber" : 62,
        "endLineNumber" : 234,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SESSION_ID.accept(span,id);\n  SESSION_ID_EVENT.accept(attributeMap,id);\n  setCommonSpanAttributes(span);\n  setCommonEventAttributes(attributeMap);\n  try (PreparedStatement statement=readSessionStatement(id)){\n    String statementStr=statement.toString();\n    span.setAttribute(DATABASE_STATEMENT,statementStr);\n    span.setAttribute(DATABASE_OPERATION,\"select\");\n    attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n    attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n    try (ResultSet sessions=statement.executeQuery()){\n      if (!sessions.next()) {\n        NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n        span.setAttribute(\"error\",true);\n        span.setStatus(Status.NOT_FOUND);\n        EXCEPTION.accept(attributeMap,exception);\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw exception;\n      }\n      rawUri=sessions.getString(SESSION_URI_COL);\n      String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n      caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n    }\n     CAPABILITIES_EVENT.accept(attributeMap,caps);\n    try {\n      attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n      uri=new URI(rawUri);\n    }\n catch (    URISyntaxException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.INTERNAL);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n    }\n    span.addEvent(\"Retrieved session from the database\",attributeMap);\n    return new Session(id,uri,caps);\n  }\n catch (  SQLException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.CANCELLED);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new JdbcException(e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 349,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3230,
        "startLineNumber" : 166,
        "startColumnNumber" : 4,
        "endLineNumber" : 234,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try (Span span=tracer.getCurrentContext().createSpan(\"SELECT * from  sessions_map where session_ids = ?\")){\n  SESSION_ID.accept(span,id);\n  SESSION_ID_EVENT.accept(attributeMap,id);\n  setCommonSpanAttributes(span);\n  setCommonEventAttributes(attributeMap);\n  try (PreparedStatement statement=readSessionStatement(id)){\n    String statementStr=statement.toString();\n    span.setAttribute(DATABASE_STATEMENT,statementStr);\n    span.setAttribute(DATABASE_OPERATION,\"select\");\n    attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n    attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n    try (ResultSet sessions=statement.executeQuery()){\n      if (!sessions.next()) {\n        NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n        span.setAttribute(\"error\",true);\n        span.setStatus(Status.NOT_FOUND);\n        EXCEPTION.accept(attributeMap,exception);\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw exception;\n      }\n      rawUri=sessions.getString(SESSION_URI_COL);\n      String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n      caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n    }\n     CAPABILITIES_EVENT.accept(attributeMap,caps);\n    try {\n      attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n      uri=new URI(rawUri);\n    }\n catch (    URISyntaxException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.INTERNAL);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n    }\n    span.addEvent(\"Retrieved session from the database\",attributeMap);\n    return new Session(id,uri,caps);\n  }\n catch (  SQLException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.CANCELLED);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new JdbcException(e);\n  }\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 361,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3426,
        "startLineNumber" : 158,
        "startColumnNumber" : 65,
        "endLineNumber" : 235,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Require.nonNull(\"Session ID\",id);\n  URI uri=null;\n  Capabilities caps=null;\n  String rawUri=null;\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  try (Span span=tracer.getCurrentContext().createSpan(\"SELECT * from  sessions_map where session_ids = ?\")){\n    SESSION_ID.accept(span,id);\n    SESSION_ID_EVENT.accept(attributeMap,id);\n    setCommonSpanAttributes(span);\n    setCommonEventAttributes(attributeMap);\n    try (PreparedStatement statement=readSessionStatement(id)){\n      String statementStr=statement.toString();\n      span.setAttribute(DATABASE_STATEMENT,statementStr);\n      span.setAttribute(DATABASE_OPERATION,\"select\");\n      attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n      attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n      try (ResultSet sessions=statement.executeQuery()){\n        if (!sessions.next()) {\n          NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n          span.setAttribute(\"error\",true);\n          span.setStatus(Status.NOT_FOUND);\n          EXCEPTION.accept(attributeMap,exception);\n          attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n          span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n          throw exception;\n        }\n        rawUri=sessions.getString(SESSION_URI_COL);\n        String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n        caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n      }\n       CAPABILITIES_EVENT.accept(attributeMap,caps);\n      try {\n        attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n        uri=new URI(rawUri);\n      }\n catch (      URISyntaxException e) {\n        span.setAttribute(\"error\",true);\n        span.setStatus(Status.INTERNAL);\n        EXCEPTION.accept(attributeMap,e);\n        attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n      }\n      span.addEvent(\"Retrieved session from the database\",attributeMap);\n      return new Session(id,uri,caps);\n    }\n catch (    SQLException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.CANCELLED);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new JdbcException(e);\n    }\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 400,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3501,
        "startLineNumber" : 157,
        "startColumnNumber" : 2,
        "endLineNumber" : 235,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public Session get(SessionId id) throws NoSuchSessionException {\n  Require.nonNull(\"Session ID\",id);\n  URI uri=null;\n  Capabilities caps=null;\n  String rawUri=null;\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  try (Span span=tracer.getCurrentContext().createSpan(\"SELECT * from  sessions_map where session_ids = ?\")){\n    SESSION_ID.accept(span,id);\n    SESSION_ID_EVENT.accept(attributeMap,id);\n    setCommonSpanAttributes(span);\n    setCommonEventAttributes(attributeMap);\n    try (PreparedStatement statement=readSessionStatement(id)){\n      String statementStr=statement.toString();\n      span.setAttribute(DATABASE_STATEMENT,statementStr);\n      span.setAttribute(DATABASE_OPERATION,\"select\");\n      attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n      attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statementStr));\n      try (ResultSet sessions=statement.executeQuery()){\n        if (!sessions.next()) {\n          NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n          span.setAttribute(\"error\",true);\n          span.setStatus(Status.NOT_FOUND);\n          EXCEPTION.accept(attributeMap,exception);\n          attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n          span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n          throw exception;\n        }\n        rawUri=sessions.getString(SESSION_URI_COL);\n        String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n        caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n      }\n       CAPABILITIES_EVENT.accept(attributeMap,caps);\n      try {\n        attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n        uri=new URI(rawUri);\n      }\n catch (      URISyntaxException e) {\n        span.setAttribute(\"error\",true);\n        span.setStatus(Status.INTERNAL);\n        EXCEPTION.accept(attributeMap,e);\n        attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n      }\n      span.addEvent(\"Retrieved session from the database\",attributeMap);\n      return new Session(id,uri,caps);\n    }\n catch (    SQLException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.CANCELLED);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new JdbcException(e);\n    }\n  }\n }\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 413,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 97,
        "startLineNumber" : 230,
        "startColumnNumber" : 25,
        "endLineNumber" : 230,
        "endColumnNumber" : 122
      },
      "nodeContext" : "EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.openqa.selenium.remote.tracing.EventAttribute"
  } ],
  "positionList" : [ {
    "charLength" : 14,
    "startLineNumber" : 177,
    "startColumnNumber" : 45,
    "endLineNumber" : 177,
    "endColumnNumber" : 59
  }, {
    "charLength" : 14,
    "startLineNumber" : 178,
    "startColumnNumber" : 45,
    "endLineNumber" : 178,
    "endColumnNumber" : 59
  }, {
    "charLength" : 14,
    "startLineNumber" : 189,
    "startColumnNumber" : 29,
    "endLineNumber" : 189,
    "endColumnNumber" : 43
  }, {
    "charLength" : 14,
    "startLineNumber" : 208,
    "startColumnNumber" : 62,
    "endLineNumber" : 208,
    "endColumnNumber" : 76
  }, {
    "charLength" : 14,
    "startLineNumber" : 214,
    "startColumnNumber" : 62,
    "endLineNumber" : 214,
    "endColumnNumber" : 76
  }, {
    "charLength" : 14,
    "startLineNumber" : 216,
    "startColumnNumber" : 27,
    "endLineNumber" : 216,
    "endColumnNumber" : 41
  }, {
    "charLength" : 14,
    "startLineNumber" : 230,
    "startColumnNumber" : 25,
    "endLineNumber" : 230,
    "endColumnNumber" : 39
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 8
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 7
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 5
  } ]
}