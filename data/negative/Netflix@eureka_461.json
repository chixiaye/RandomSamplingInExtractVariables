{
  "id" : 461,
  "expression" : "clientConfig",
  "projectName" : "Netflix@eureka",
  "commitID" : "295f257424f0952b17a6903940bbd4e2f2fced03",
  "filePath" : "eureka-client/src/main/java/com/netflix/discovery/DiscoveryClient.java",
  "occurrences" : 16,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "clientConfig",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 221,
      "startColumnNumber" : 45,
      "endLineNumber" : 221,
      "endColumnNumber" : 57
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 221,
        "startColumnNumber" : 45,
        "endLineNumber" : 221,
        "endColumnNumber" : 98
      },
      "nodeContext" : "clientConfig.getEurekaServiceUrlPollIntervalSeconds()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 281,
        "startLineNumber" : 220,
        "startColumnNumber" : 12,
        "endLineNumber" : 222,
        "endColumnNumber" : 117
      },
      "nodeContext" : "scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 282,
        "startLineNumber" : 220,
        "startColumnNumber" : 12,
        "endLineNumber" : 222,
        "endColumnNumber" : 118
      },
      "nodeContext" : "scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3965,
        "startLineNumber" : 211,
        "startColumnNumber" : 12,
        "endLineNumber" : 284,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n  clientConfig=config;\n  final String zone=getZone(myInfo);\n  eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n  scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n  localRegionApps.set(new Applications());\n  heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n  cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n  fetchRegistryGeneration=new AtomicLong(0);\n  if (myInfo != null) {\n    instanceInfo=myInfo;\n    appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n  }\n  String proxyHost=clientConfig.getProxyHost();\n  String proxyPort=clientConfig.getProxyPort();\n  discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n  discoveryApacheClient=discoveryJerseyClient.getClient();\n  ClientConfig cc=discoveryJerseyClient.getClientconfig();\n  remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n  AzToRegionMapper azToRegionMapper;\n  if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n    azToRegionMapper=new DNSBasedAzToRegionMapper();\n  }\n else {\n    azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n  }\n  if (null != remoteRegionsToFetch.get()) {\n    azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n  }\n  instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n  boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n  if (enableGZIPContentEncodingFilter) {\n    discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n  }\n  String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n  EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n  discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  if (proxyHost != null && proxyPort != null) {\n    cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 319,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4085,
        "startLineNumber" : 211,
        "startColumnNumber" : 8,
        "endLineNumber" : 286,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n  clientConfig=config;\n  final String zone=getZone(myInfo);\n  eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n  scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n  localRegionApps.set(new Applications());\n  heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n  cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n  fetchRegistryGeneration=new AtomicLong(0);\n  if (myInfo != null) {\n    instanceInfo=myInfo;\n    appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n  }\n  String proxyHost=clientConfig.getProxyHost();\n  String proxyPort=clientConfig.getProxyPort();\n  discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n  discoveryApacheClient=discoveryJerseyClient.getClient();\n  ClientConfig cc=discoveryJerseyClient.getClientconfig();\n  remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n  AzToRegionMapper azToRegionMapper;\n  if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n    azToRegionMapper=new DNSBasedAzToRegionMapper();\n  }\n else {\n    azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n  }\n  if (null != remoteRegionsToFetch.get()) {\n    azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n  }\n  instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n  boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n  if (enableGZIPContentEncodingFilter) {\n    discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n  }\n  String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n  EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n  discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  if (proxyHost != null && proxyPort != null) {\n    cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n  }\n}\n catch (Throwable e) {\n  throw new RuntimeException(\"Failed to initialize DiscoveryClient!\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 332,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5070,
        "startLineNumber" : 199,
        "startColumnNumber" : 109,
        "endLineNumber" : 301,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (args != null) {\n    healthCheckHandlerProvider=args.healthCheckHandlerProvider;\n    healthCheckCallbackProvider=args.healthCheckCallbackProvider;\n    eventBus=args.eventBus;\n  }\n else {\n    healthCheckCallbackProvider=null;\n    healthCheckHandlerProvider=null;\n    eventBus=null;\n  }\n  try {\n    scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n    clientConfig=config;\n    final String zone=getZone(myInfo);\n    eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n    scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n    localRegionApps.set(new Applications());\n    heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    fetchRegistryGeneration=new AtomicLong(0);\n    if (myInfo != null) {\n      instanceInfo=myInfo;\n      appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n    }\n    String proxyHost=clientConfig.getProxyHost();\n    String proxyPort=clientConfig.getProxyPort();\n    discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n    discoveryApacheClient=discoveryJerseyClient.getClient();\n    ClientConfig cc=discoveryJerseyClient.getClientconfig();\n    remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n    AzToRegionMapper azToRegionMapper;\n    if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n      azToRegionMapper=new DNSBasedAzToRegionMapper();\n    }\n else {\n      azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n    }\n    if (null != remoteRegionsToFetch.get()) {\n      azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n    }\n    instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n    boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n    if (enableGZIPContentEncodingFilter) {\n      discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n    }\n    String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n    EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n    discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n    if (proxyHost != null && proxyPort != null) {\n      cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n    }\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize DiscoveryClient!\",e);\n  }\n  if (clientConfig.shouldFetchRegistry() && !fetchRegistry(false)) {\n    fetchRegistryFromBackup();\n  }\n  initScheduledTasks();\n  try {\n    Monitors.registerObject(this);\n  }\n catch (  Throwable e) {\n    logger.warn(\"Cannot register timers\",e);\n  }\n  DiscoveryManager.getInstance().setDiscoveryClient(this);\n  DiscoveryManager.getInstance().setEurekaClientConfig(config);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 418,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5187,
        "startLineNumber" : 198,
        "startColumnNumber" : 4,
        "endLineNumber" : 301,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Inject public DiscoveryClient(InstanceInfo myInfo,EurekaClientConfig config,DiscoveryClientOptionalArgs args){\n  if (args != null) {\n    healthCheckHandlerProvider=args.healthCheckHandlerProvider;\n    healthCheckCallbackProvider=args.healthCheckCallbackProvider;\n    eventBus=args.eventBus;\n  }\n else {\n    healthCheckCallbackProvider=null;\n    healthCheckHandlerProvider=null;\n    eventBus=null;\n  }\n  try {\n    scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n    clientConfig=config;\n    final String zone=getZone(myInfo);\n    eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n    scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n    localRegionApps.set(new Applications());\n    heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    fetchRegistryGeneration=new AtomicLong(0);\n    if (myInfo != null) {\n      instanceInfo=myInfo;\n      appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n    }\n    String proxyHost=clientConfig.getProxyHost();\n    String proxyPort=clientConfig.getProxyPort();\n    discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n    discoveryApacheClient=discoveryJerseyClient.getClient();\n    ClientConfig cc=discoveryJerseyClient.getClientconfig();\n    remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n    AzToRegionMapper azToRegionMapper;\n    if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n      azToRegionMapper=new DNSBasedAzToRegionMapper();\n    }\n else {\n      azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n    }\n    if (null != remoteRegionsToFetch.get()) {\n      azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n    }\n    instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n    boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n    if (enableGZIPContentEncodingFilter) {\n      discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n    }\n    String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n    EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n    discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n    if (proxyHost != null && proxyPort != null) {\n      cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n    }\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize DiscoveryClient!\",e);\n  }\n  if (clientConfig.shouldFetchRegistry() && !fetchRegistry(false)) {\n    fetchRegistryFromBackup();\n  }\n  initScheduledTasks();\n  try {\n    Monitors.registerObject(this);\n  }\n catch (  Throwable e) {\n    logger.warn(\"Cannot register timers\",e);\n  }\n  DiscoveryManager.getInstance().setDiscoveryClient(this);\n  DiscoveryManager.getInstance().setEurekaClientConfig(config);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 435,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 221,
        "startColumnNumber" : 45,
        "endLineNumber" : 221,
        "endColumnNumber" : 98
      },
      "nodeContext" : "clientConfig.getEurekaServiceUrlPollIntervalSeconds()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.netflix.discovery.EurekaClientConfig"
  }, {
    "nodeContext" : "clientConfig",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 222,
      "startColumnNumber" : 45,
      "endLineNumber" : 222,
      "endColumnNumber" : 57
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 222,
        "startColumnNumber" : 45,
        "endLineNumber" : 222,
        "endColumnNumber" : 98
      },
      "nodeContext" : "clientConfig.getEurekaServiceUrlPollIntervalSeconds()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 281,
        "startLineNumber" : 220,
        "startColumnNumber" : 12,
        "endLineNumber" : 222,
        "endColumnNumber" : 117
      },
      "nodeContext" : "scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 282,
        "startLineNumber" : 220,
        "startColumnNumber" : 12,
        "endLineNumber" : 222,
        "endColumnNumber" : 118
      },
      "nodeContext" : "scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3965,
        "startLineNumber" : 211,
        "startColumnNumber" : 12,
        "endLineNumber" : 284,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n  clientConfig=config;\n  final String zone=getZone(myInfo);\n  eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n  scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n  localRegionApps.set(new Applications());\n  heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n  cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n  fetchRegistryGeneration=new AtomicLong(0);\n  if (myInfo != null) {\n    instanceInfo=myInfo;\n    appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n  }\n  String proxyHost=clientConfig.getProxyHost();\n  String proxyPort=clientConfig.getProxyPort();\n  discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n  discoveryApacheClient=discoveryJerseyClient.getClient();\n  ClientConfig cc=discoveryJerseyClient.getClientconfig();\n  remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n  AzToRegionMapper azToRegionMapper;\n  if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n    azToRegionMapper=new DNSBasedAzToRegionMapper();\n  }\n else {\n    azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n  }\n  if (null != remoteRegionsToFetch.get()) {\n    azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n  }\n  instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n  boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n  if (enableGZIPContentEncodingFilter) {\n    discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n  }\n  String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n  EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n  discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  if (proxyHost != null && proxyPort != null) {\n    cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 319,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4085,
        "startLineNumber" : 211,
        "startColumnNumber" : 8,
        "endLineNumber" : 286,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n  clientConfig=config;\n  final String zone=getZone(myInfo);\n  eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n  scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n  localRegionApps.set(new Applications());\n  heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n  cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n  fetchRegistryGeneration=new AtomicLong(0);\n  if (myInfo != null) {\n    instanceInfo=myInfo;\n    appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n  }\n  String proxyHost=clientConfig.getProxyHost();\n  String proxyPort=clientConfig.getProxyPort();\n  discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n  discoveryApacheClient=discoveryJerseyClient.getClient();\n  ClientConfig cc=discoveryJerseyClient.getClientconfig();\n  remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n  AzToRegionMapper azToRegionMapper;\n  if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n    azToRegionMapper=new DNSBasedAzToRegionMapper();\n  }\n else {\n    azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n  }\n  if (null != remoteRegionsToFetch.get()) {\n    azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n  }\n  instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n  boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n  if (enableGZIPContentEncodingFilter) {\n    discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n  }\n  String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n  EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n  discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  if (proxyHost != null && proxyPort != null) {\n    cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n  }\n}\n catch (Throwable e) {\n  throw new RuntimeException(\"Failed to initialize DiscoveryClient!\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 332,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5070,
        "startLineNumber" : 199,
        "startColumnNumber" : 109,
        "endLineNumber" : 301,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (args != null) {\n    healthCheckHandlerProvider=args.healthCheckHandlerProvider;\n    healthCheckCallbackProvider=args.healthCheckCallbackProvider;\n    eventBus=args.eventBus;\n  }\n else {\n    healthCheckCallbackProvider=null;\n    healthCheckHandlerProvider=null;\n    eventBus=null;\n  }\n  try {\n    scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n    clientConfig=config;\n    final String zone=getZone(myInfo);\n    eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n    scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n    localRegionApps.set(new Applications());\n    heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    fetchRegistryGeneration=new AtomicLong(0);\n    if (myInfo != null) {\n      instanceInfo=myInfo;\n      appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n    }\n    String proxyHost=clientConfig.getProxyHost();\n    String proxyPort=clientConfig.getProxyPort();\n    discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n    discoveryApacheClient=discoveryJerseyClient.getClient();\n    ClientConfig cc=discoveryJerseyClient.getClientconfig();\n    remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n    AzToRegionMapper azToRegionMapper;\n    if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n      azToRegionMapper=new DNSBasedAzToRegionMapper();\n    }\n else {\n      azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n    }\n    if (null != remoteRegionsToFetch.get()) {\n      azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n    }\n    instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n    boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n    if (enableGZIPContentEncodingFilter) {\n      discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n    }\n    String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n    EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n    discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n    if (proxyHost != null && proxyPort != null) {\n      cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n    }\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize DiscoveryClient!\",e);\n  }\n  if (clientConfig.shouldFetchRegistry() && !fetchRegistry(false)) {\n    fetchRegistryFromBackup();\n  }\n  initScheduledTasks();\n  try {\n    Monitors.registerObject(this);\n  }\n catch (  Throwable e) {\n    logger.warn(\"Cannot register timers\",e);\n  }\n  DiscoveryManager.getInstance().setDiscoveryClient(this);\n  DiscoveryManager.getInstance().setEurekaClientConfig(config);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 418,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5187,
        "startLineNumber" : 198,
        "startColumnNumber" : 4,
        "endLineNumber" : 301,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Inject public DiscoveryClient(InstanceInfo myInfo,EurekaClientConfig config,DiscoveryClientOptionalArgs args){\n  if (args != null) {\n    healthCheckHandlerProvider=args.healthCheckHandlerProvider;\n    healthCheckCallbackProvider=args.healthCheckCallbackProvider;\n    eventBus=args.eventBus;\n  }\n else {\n    healthCheckCallbackProvider=null;\n    healthCheckHandlerProvider=null;\n    eventBus=null;\n  }\n  try {\n    scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n    clientConfig=config;\n    final String zone=getZone(myInfo);\n    eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n    scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n    localRegionApps.set(new Applications());\n    heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    fetchRegistryGeneration=new AtomicLong(0);\n    if (myInfo != null) {\n      instanceInfo=myInfo;\n      appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n    }\n    String proxyHost=clientConfig.getProxyHost();\n    String proxyPort=clientConfig.getProxyPort();\n    discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n    discoveryApacheClient=discoveryJerseyClient.getClient();\n    ClientConfig cc=discoveryJerseyClient.getClientconfig();\n    remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n    AzToRegionMapper azToRegionMapper;\n    if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n      azToRegionMapper=new DNSBasedAzToRegionMapper();\n    }\n else {\n      azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n    }\n    if (null != remoteRegionsToFetch.get()) {\n      azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n    }\n    instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n    boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n    if (enableGZIPContentEncodingFilter) {\n      discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n    }\n    String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n    EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n    discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n    if (proxyHost != null && proxyPort != null) {\n      cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n    }\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize DiscoveryClient!\",e);\n  }\n  if (clientConfig.shouldFetchRegistry() && !fetchRegistry(false)) {\n    fetchRegistryFromBackup();\n  }\n  initScheduledTasks();\n  try {\n    Monitors.registerObject(this);\n  }\n catch (  Throwable e) {\n    logger.warn(\"Cannot register timers\",e);\n  }\n  DiscoveryManager.getInstance().setDiscoveryClient(this);\n  DiscoveryManager.getInstance().setEurekaClientConfig(config);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 435,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 222,
        "startColumnNumber" : 45,
        "endLineNumber" : 222,
        "endColumnNumber" : 98
      },
      "nodeContext" : "clientConfig.getEurekaServiceUrlPollIntervalSeconds()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.netflix.discovery.EurekaClientConfig"
  }, {
    "nodeContext" : "clientConfig",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 226,
      "startColumnNumber" : 23,
      "endLineNumber" : 226,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 226,
        "startColumnNumber" : 23,
        "endLineNumber" : 226,
        "endColumnNumber" : 72
      },
      "nodeContext" : "clientConfig.getHeartbeatExecutorThreadPoolSize()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 172,
        "startLineNumber" : 225,
        "startColumnNumber" : 32,
        "endLineNumber" : 227,
        "endColumnNumber" : 53
      },
      "nodeContext" : "new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>())",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 192,
        "startLineNumber" : 225,
        "startColumnNumber" : 12,
        "endLineNumber" : 227,
        "endColumnNumber" : 53
      },
      "nodeContext" : "heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>())",
      "nodeType" : "Assignment",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 193,
        "startLineNumber" : 225,
        "startColumnNumber" : 12,
        "endLineNumber" : 227,
        "endColumnNumber" : 54
      },
      "nodeContext" : "heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 20,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3965,
        "startLineNumber" : 211,
        "startColumnNumber" : 12,
        "endLineNumber" : 284,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n  clientConfig=config;\n  final String zone=getZone(myInfo);\n  eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n  scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n  localRegionApps.set(new Applications());\n  heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n  cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n  fetchRegistryGeneration=new AtomicLong(0);\n  if (myInfo != null) {\n    instanceInfo=myInfo;\n    appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n  }\n  String proxyHost=clientConfig.getProxyHost();\n  String proxyPort=clientConfig.getProxyPort();\n  discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n  discoveryApacheClient=discoveryJerseyClient.getClient();\n  ClientConfig cc=discoveryJerseyClient.getClientconfig();\n  remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n  AzToRegionMapper azToRegionMapper;\n  if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n    azToRegionMapper=new DNSBasedAzToRegionMapper();\n  }\n else {\n    azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n  }\n  if (null != remoteRegionsToFetch.get()) {\n    azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n  }\n  instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n  boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n  if (enableGZIPContentEncodingFilter) {\n    discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n  }\n  String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n  EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n  discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  if (proxyHost != null && proxyPort != null) {\n    cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 319,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4085,
        "startLineNumber" : 211,
        "startColumnNumber" : 8,
        "endLineNumber" : 286,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n  clientConfig=config;\n  final String zone=getZone(myInfo);\n  eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n  scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n  localRegionApps.set(new Applications());\n  heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n  cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n  fetchRegistryGeneration=new AtomicLong(0);\n  if (myInfo != null) {\n    instanceInfo=myInfo;\n    appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n  }\n  String proxyHost=clientConfig.getProxyHost();\n  String proxyPort=clientConfig.getProxyPort();\n  discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n  discoveryApacheClient=discoveryJerseyClient.getClient();\n  ClientConfig cc=discoveryJerseyClient.getClientconfig();\n  remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n  AzToRegionMapper azToRegionMapper;\n  if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n    azToRegionMapper=new DNSBasedAzToRegionMapper();\n  }\n else {\n    azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n  }\n  if (null != remoteRegionsToFetch.get()) {\n    azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n  }\n  instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n  boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n  if (enableGZIPContentEncodingFilter) {\n    discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n  }\n  String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n  EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n  discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  if (proxyHost != null && proxyPort != null) {\n    cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n  }\n}\n catch (Throwable e) {\n  throw new RuntimeException(\"Failed to initialize DiscoveryClient!\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 332,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5070,
        "startLineNumber" : 199,
        "startColumnNumber" : 109,
        "endLineNumber" : 301,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (args != null) {\n    healthCheckHandlerProvider=args.healthCheckHandlerProvider;\n    healthCheckCallbackProvider=args.healthCheckCallbackProvider;\n    eventBus=args.eventBus;\n  }\n else {\n    healthCheckCallbackProvider=null;\n    healthCheckHandlerProvider=null;\n    eventBus=null;\n  }\n  try {\n    scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n    clientConfig=config;\n    final String zone=getZone(myInfo);\n    eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n    scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n    localRegionApps.set(new Applications());\n    heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    fetchRegistryGeneration=new AtomicLong(0);\n    if (myInfo != null) {\n      instanceInfo=myInfo;\n      appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n    }\n    String proxyHost=clientConfig.getProxyHost();\n    String proxyPort=clientConfig.getProxyPort();\n    discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n    discoveryApacheClient=discoveryJerseyClient.getClient();\n    ClientConfig cc=discoveryJerseyClient.getClientconfig();\n    remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n    AzToRegionMapper azToRegionMapper;\n    if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n      azToRegionMapper=new DNSBasedAzToRegionMapper();\n    }\n else {\n      azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n    }\n    if (null != remoteRegionsToFetch.get()) {\n      azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n    }\n    instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n    boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n    if (enableGZIPContentEncodingFilter) {\n      discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n    }\n    String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n    EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n    discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n    if (proxyHost != null && proxyPort != null) {\n      cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n    }\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize DiscoveryClient!\",e);\n  }\n  if (clientConfig.shouldFetchRegistry() && !fetchRegistry(false)) {\n    fetchRegistryFromBackup();\n  }\n  initScheduledTasks();\n  try {\n    Monitors.registerObject(this);\n  }\n catch (  Throwable e) {\n    logger.warn(\"Cannot register timers\",e);\n  }\n  DiscoveryManager.getInstance().setDiscoveryClient(this);\n  DiscoveryManager.getInstance().setEurekaClientConfig(config);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 418,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5187,
        "startLineNumber" : 198,
        "startColumnNumber" : 4,
        "endLineNumber" : 301,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Inject public DiscoveryClient(InstanceInfo myInfo,EurekaClientConfig config,DiscoveryClientOptionalArgs args){\n  if (args != null) {\n    healthCheckHandlerProvider=args.healthCheckHandlerProvider;\n    healthCheckCallbackProvider=args.healthCheckCallbackProvider;\n    eventBus=args.eventBus;\n  }\n else {\n    healthCheckCallbackProvider=null;\n    healthCheckHandlerProvider=null;\n    eventBus=null;\n  }\n  try {\n    scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n    clientConfig=config;\n    final String zone=getZone(myInfo);\n    eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n    scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n    localRegionApps.set(new Applications());\n    heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    fetchRegistryGeneration=new AtomicLong(0);\n    if (myInfo != null) {\n      instanceInfo=myInfo;\n      appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n    }\n    String proxyHost=clientConfig.getProxyHost();\n    String proxyPort=clientConfig.getProxyPort();\n    discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n    discoveryApacheClient=discoveryJerseyClient.getClient();\n    ClientConfig cc=discoveryJerseyClient.getClientconfig();\n    remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n    AzToRegionMapper azToRegionMapper;\n    if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n      azToRegionMapper=new DNSBasedAzToRegionMapper();\n    }\n else {\n      azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n    }\n    if (null != remoteRegionsToFetch.get()) {\n      azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n    }\n    instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n    boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n    if (enableGZIPContentEncodingFilter) {\n      discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n    }\n    String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n    EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n    discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n    if (proxyHost != null && proxyPort != null) {\n      cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n    }\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize DiscoveryClient!\",e);\n  }\n  if (clientConfig.shouldFetchRegistry() && !fetchRegistry(false)) {\n    fetchRegistryFromBackup();\n  }\n  initScheduledTasks();\n  try {\n    Monitors.registerObject(this);\n  }\n catch (  Throwable e) {\n    logger.warn(\"Cannot register timers\",e);\n  }\n  DiscoveryManager.getInstance().setDiscoveryClient(this);\n  DiscoveryManager.getInstance().setEurekaClientConfig(config);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 435,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 226,
        "startColumnNumber" : 23,
        "endLineNumber" : 226,
        "endColumnNumber" : 72
      },
      "nodeContext" : "clientConfig.getHeartbeatExecutorThreadPoolSize()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.netflix.discovery.EurekaClientConfig"
  }, {
    "nodeContext" : "clientConfig",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 230,
      "startColumnNumber" : 23,
      "endLineNumber" : 230,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 230,
        "startColumnNumber" : 23,
        "endLineNumber" : 230,
        "endColumnNumber" : 75
      },
      "nodeContext" : "clientConfig.getCacheRefreshExecutorThreadPoolSize()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 175,
        "startLineNumber" : 229,
        "startColumnNumber" : 35,
        "endLineNumber" : 231,
        "endColumnNumber" : 53
      },
      "nodeContext" : "new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>())",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 198,
        "startLineNumber" : 229,
        "startColumnNumber" : 12,
        "endLineNumber" : 231,
        "endColumnNumber" : 53
      },
      "nodeContext" : "cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>())",
      "nodeType" : "Assignment",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 199,
        "startLineNumber" : 229,
        "startColumnNumber" : 12,
        "endLineNumber" : 231,
        "endColumnNumber" : 54
      },
      "nodeContext" : "cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 20,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3965,
        "startLineNumber" : 211,
        "startColumnNumber" : 12,
        "endLineNumber" : 284,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n  clientConfig=config;\n  final String zone=getZone(myInfo);\n  eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n  scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n  localRegionApps.set(new Applications());\n  heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n  cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n  fetchRegistryGeneration=new AtomicLong(0);\n  if (myInfo != null) {\n    instanceInfo=myInfo;\n    appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n  }\n  String proxyHost=clientConfig.getProxyHost();\n  String proxyPort=clientConfig.getProxyPort();\n  discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n  discoveryApacheClient=discoveryJerseyClient.getClient();\n  ClientConfig cc=discoveryJerseyClient.getClientconfig();\n  remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n  AzToRegionMapper azToRegionMapper;\n  if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n    azToRegionMapper=new DNSBasedAzToRegionMapper();\n  }\n else {\n    azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n  }\n  if (null != remoteRegionsToFetch.get()) {\n    azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n  }\n  instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n  boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n  if (enableGZIPContentEncodingFilter) {\n    discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n  }\n  String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n  EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n  discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  if (proxyHost != null && proxyPort != null) {\n    cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 319,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4085,
        "startLineNumber" : 211,
        "startColumnNumber" : 8,
        "endLineNumber" : 286,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n  clientConfig=config;\n  final String zone=getZone(myInfo);\n  eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n  scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n  localRegionApps.set(new Applications());\n  heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n  cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n  fetchRegistryGeneration=new AtomicLong(0);\n  if (myInfo != null) {\n    instanceInfo=myInfo;\n    appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n  }\n  String proxyHost=clientConfig.getProxyHost();\n  String proxyPort=clientConfig.getProxyPort();\n  discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n  discoveryApacheClient=discoveryJerseyClient.getClient();\n  ClientConfig cc=discoveryJerseyClient.getClientconfig();\n  remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n  AzToRegionMapper azToRegionMapper;\n  if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n    azToRegionMapper=new DNSBasedAzToRegionMapper();\n  }\n else {\n    azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n  }\n  if (null != remoteRegionsToFetch.get()) {\n    azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n  }\n  instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n  boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n  if (enableGZIPContentEncodingFilter) {\n    discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n  }\n  String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n  EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n  discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  if (proxyHost != null && proxyPort != null) {\n    cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n  }\n}\n catch (Throwable e) {\n  throw new RuntimeException(\"Failed to initialize DiscoveryClient!\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 332,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5070,
        "startLineNumber" : 199,
        "startColumnNumber" : 109,
        "endLineNumber" : 301,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (args != null) {\n    healthCheckHandlerProvider=args.healthCheckHandlerProvider;\n    healthCheckCallbackProvider=args.healthCheckCallbackProvider;\n    eventBus=args.eventBus;\n  }\n else {\n    healthCheckCallbackProvider=null;\n    healthCheckHandlerProvider=null;\n    eventBus=null;\n  }\n  try {\n    scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n    clientConfig=config;\n    final String zone=getZone(myInfo);\n    eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n    scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n    localRegionApps.set(new Applications());\n    heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    fetchRegistryGeneration=new AtomicLong(0);\n    if (myInfo != null) {\n      instanceInfo=myInfo;\n      appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n    }\n    String proxyHost=clientConfig.getProxyHost();\n    String proxyPort=clientConfig.getProxyPort();\n    discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n    discoveryApacheClient=discoveryJerseyClient.getClient();\n    ClientConfig cc=discoveryJerseyClient.getClientconfig();\n    remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n    AzToRegionMapper azToRegionMapper;\n    if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n      azToRegionMapper=new DNSBasedAzToRegionMapper();\n    }\n else {\n      azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n    }\n    if (null != remoteRegionsToFetch.get()) {\n      azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n    }\n    instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n    boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n    if (enableGZIPContentEncodingFilter) {\n      discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n    }\n    String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n    EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n    discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n    if (proxyHost != null && proxyPort != null) {\n      cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n    }\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize DiscoveryClient!\",e);\n  }\n  if (clientConfig.shouldFetchRegistry() && !fetchRegistry(false)) {\n    fetchRegistryFromBackup();\n  }\n  initScheduledTasks();\n  try {\n    Monitors.registerObject(this);\n  }\n catch (  Throwable e) {\n    logger.warn(\"Cannot register timers\",e);\n  }\n  DiscoveryManager.getInstance().setDiscoveryClient(this);\n  DiscoveryManager.getInstance().setEurekaClientConfig(config);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 418,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5187,
        "startLineNumber" : 198,
        "startColumnNumber" : 4,
        "endLineNumber" : 301,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Inject public DiscoveryClient(InstanceInfo myInfo,EurekaClientConfig config,DiscoveryClientOptionalArgs args){\n  if (args != null) {\n    healthCheckHandlerProvider=args.healthCheckHandlerProvider;\n    healthCheckCallbackProvider=args.healthCheckCallbackProvider;\n    eventBus=args.eventBus;\n  }\n else {\n    healthCheckCallbackProvider=null;\n    healthCheckHandlerProvider=null;\n    eventBus=null;\n  }\n  try {\n    scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n    clientConfig=config;\n    final String zone=getZone(myInfo);\n    eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n    scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n    localRegionApps.set(new Applications());\n    heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    fetchRegistryGeneration=new AtomicLong(0);\n    if (myInfo != null) {\n      instanceInfo=myInfo;\n      appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n    }\n    String proxyHost=clientConfig.getProxyHost();\n    String proxyPort=clientConfig.getProxyPort();\n    discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n    discoveryApacheClient=discoveryJerseyClient.getClient();\n    ClientConfig cc=discoveryJerseyClient.getClientconfig();\n    remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n    AzToRegionMapper azToRegionMapper;\n    if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n      azToRegionMapper=new DNSBasedAzToRegionMapper();\n    }\n else {\n      azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n    }\n    if (null != remoteRegionsToFetch.get()) {\n      azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n    }\n    instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n    boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n    if (enableGZIPContentEncodingFilter) {\n      discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n    }\n    String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n    EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n    discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n    if (proxyHost != null && proxyPort != null) {\n      cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n    }\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize DiscoveryClient!\",e);\n  }\n  if (clientConfig.shouldFetchRegistry() && !fetchRegistry(false)) {\n    fetchRegistryFromBackup();\n  }\n  initScheduledTasks();\n  try {\n    Monitors.registerObject(this);\n  }\n catch (  Throwable e) {\n    logger.warn(\"Cannot register timers\",e);\n  }\n  DiscoveryManager.getInstance().setDiscoveryClient(this);\n  DiscoveryManager.getInstance().setEurekaClientConfig(config);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 435,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 230,
        "startColumnNumber" : 23,
        "endLineNumber" : 230,
        "endColumnNumber" : 75
      },
      "nodeContext" : "clientConfig.getCacheRefreshExecutorThreadPoolSize()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.netflix.discovery.EurekaClientConfig"
  }, {
    "nodeContext" : "clientConfig",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 241,
      "startColumnNumber" : 31,
      "endLineNumber" : 241,
      "endColumnNumber" : 43
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 241,
        "startColumnNumber" : 31,
        "endLineNumber" : 241,
        "endColumnNumber" : 58
      },
      "nodeContext" : "clientConfig.getProxyHost()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 241,
        "startColumnNumber" : 19,
        "endLineNumber" : 241,
        "endColumnNumber" : 58
      },
      "nodeContext" : "proxyHost=clientConfig.getProxyHost()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 241,
        "startColumnNumber" : 12,
        "endLineNumber" : 241,
        "endColumnNumber" : 59
      },
      "nodeContext" : "String proxyHost=clientConfig.getProxyHost();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3965,
        "startLineNumber" : 211,
        "startColumnNumber" : 12,
        "endLineNumber" : 284,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n  clientConfig=config;\n  final String zone=getZone(myInfo);\n  eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n  scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n  localRegionApps.set(new Applications());\n  heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n  cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n  fetchRegistryGeneration=new AtomicLong(0);\n  if (myInfo != null) {\n    instanceInfo=myInfo;\n    appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n  }\n  String proxyHost=clientConfig.getProxyHost();\n  String proxyPort=clientConfig.getProxyPort();\n  discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n  discoveryApacheClient=discoveryJerseyClient.getClient();\n  ClientConfig cc=discoveryJerseyClient.getClientconfig();\n  remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n  AzToRegionMapper azToRegionMapper;\n  if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n    azToRegionMapper=new DNSBasedAzToRegionMapper();\n  }\n else {\n    azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n  }\n  if (null != remoteRegionsToFetch.get()) {\n    azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n  }\n  instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n  boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n  if (enableGZIPContentEncodingFilter) {\n    discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n  }\n  String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n  EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n  discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  if (proxyHost != null && proxyPort != null) {\n    cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 319,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4085,
        "startLineNumber" : 211,
        "startColumnNumber" : 8,
        "endLineNumber" : 286,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n  clientConfig=config;\n  final String zone=getZone(myInfo);\n  eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n  scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n  localRegionApps.set(new Applications());\n  heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n  cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n  fetchRegistryGeneration=new AtomicLong(0);\n  if (myInfo != null) {\n    instanceInfo=myInfo;\n    appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n  }\n  String proxyHost=clientConfig.getProxyHost();\n  String proxyPort=clientConfig.getProxyPort();\n  discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n  discoveryApacheClient=discoveryJerseyClient.getClient();\n  ClientConfig cc=discoveryJerseyClient.getClientconfig();\n  remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n  AzToRegionMapper azToRegionMapper;\n  if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n    azToRegionMapper=new DNSBasedAzToRegionMapper();\n  }\n else {\n    azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n  }\n  if (null != remoteRegionsToFetch.get()) {\n    azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n  }\n  instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n  boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n  if (enableGZIPContentEncodingFilter) {\n    discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n  }\n  String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n  EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n  discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  if (proxyHost != null && proxyPort != null) {\n    cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n  }\n}\n catch (Throwable e) {\n  throw new RuntimeException(\"Failed to initialize DiscoveryClient!\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 332,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5070,
        "startLineNumber" : 199,
        "startColumnNumber" : 109,
        "endLineNumber" : 301,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (args != null) {\n    healthCheckHandlerProvider=args.healthCheckHandlerProvider;\n    healthCheckCallbackProvider=args.healthCheckCallbackProvider;\n    eventBus=args.eventBus;\n  }\n else {\n    healthCheckCallbackProvider=null;\n    healthCheckHandlerProvider=null;\n    eventBus=null;\n  }\n  try {\n    scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n    clientConfig=config;\n    final String zone=getZone(myInfo);\n    eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n    scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n    localRegionApps.set(new Applications());\n    heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    fetchRegistryGeneration=new AtomicLong(0);\n    if (myInfo != null) {\n      instanceInfo=myInfo;\n      appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n    }\n    String proxyHost=clientConfig.getProxyHost();\n    String proxyPort=clientConfig.getProxyPort();\n    discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n    discoveryApacheClient=discoveryJerseyClient.getClient();\n    ClientConfig cc=discoveryJerseyClient.getClientconfig();\n    remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n    AzToRegionMapper azToRegionMapper;\n    if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n      azToRegionMapper=new DNSBasedAzToRegionMapper();\n    }\n else {\n      azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n    }\n    if (null != remoteRegionsToFetch.get()) {\n      azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n    }\n    instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n    boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n    if (enableGZIPContentEncodingFilter) {\n      discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n    }\n    String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n    EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n    discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n    if (proxyHost != null && proxyPort != null) {\n      cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n    }\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize DiscoveryClient!\",e);\n  }\n  if (clientConfig.shouldFetchRegistry() && !fetchRegistry(false)) {\n    fetchRegistryFromBackup();\n  }\n  initScheduledTasks();\n  try {\n    Monitors.registerObject(this);\n  }\n catch (  Throwable e) {\n    logger.warn(\"Cannot register timers\",e);\n  }\n  DiscoveryManager.getInstance().setDiscoveryClient(this);\n  DiscoveryManager.getInstance().setEurekaClientConfig(config);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 418,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5187,
        "startLineNumber" : 198,
        "startColumnNumber" : 4,
        "endLineNumber" : 301,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Inject public DiscoveryClient(InstanceInfo myInfo,EurekaClientConfig config,DiscoveryClientOptionalArgs args){\n  if (args != null) {\n    healthCheckHandlerProvider=args.healthCheckHandlerProvider;\n    healthCheckCallbackProvider=args.healthCheckCallbackProvider;\n    eventBus=args.eventBus;\n  }\n else {\n    healthCheckCallbackProvider=null;\n    healthCheckHandlerProvider=null;\n    eventBus=null;\n  }\n  try {\n    scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n    clientConfig=config;\n    final String zone=getZone(myInfo);\n    eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n    scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n    localRegionApps.set(new Applications());\n    heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    fetchRegistryGeneration=new AtomicLong(0);\n    if (myInfo != null) {\n      instanceInfo=myInfo;\n      appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n    }\n    String proxyHost=clientConfig.getProxyHost();\n    String proxyPort=clientConfig.getProxyPort();\n    discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n    discoveryApacheClient=discoveryJerseyClient.getClient();\n    ClientConfig cc=discoveryJerseyClient.getClientconfig();\n    remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n    AzToRegionMapper azToRegionMapper;\n    if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n      azToRegionMapper=new DNSBasedAzToRegionMapper();\n    }\n else {\n      azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n    }\n    if (null != remoteRegionsToFetch.get()) {\n      azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n    }\n    instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n    boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n    if (enableGZIPContentEncodingFilter) {\n      discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n    }\n    String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n    EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n    discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n    if (proxyHost != null && proxyPort != null) {\n      cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n    }\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize DiscoveryClient!\",e);\n  }\n  if (clientConfig.shouldFetchRegistry() && !fetchRegistry(false)) {\n    fetchRegistryFromBackup();\n  }\n  initScheduledTasks();\n  try {\n    Monitors.registerObject(this);\n  }\n catch (  Throwable e) {\n    logger.warn(\"Cannot register timers\",e);\n  }\n  DiscoveryManager.getInstance().setDiscoveryClient(this);\n  DiscoveryManager.getInstance().setEurekaClientConfig(config);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 435,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 241,
        "startColumnNumber" : 12,
        "endLineNumber" : 241,
        "endColumnNumber" : 59
      },
      "nodeContext" : "String proxyHost=clientConfig.getProxyHost();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.netflix.discovery.EurekaClientConfig"
  }, {
    "nodeContext" : "clientConfig",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 242,
      "startColumnNumber" : 31,
      "endLineNumber" : 242,
      "endColumnNumber" : 43
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 242,
        "startColumnNumber" : 31,
        "endLineNumber" : 242,
        "endColumnNumber" : 58
      },
      "nodeContext" : "clientConfig.getProxyPort()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 242,
        "startColumnNumber" : 19,
        "endLineNumber" : 242,
        "endColumnNumber" : 58
      },
      "nodeContext" : "proxyPort=clientConfig.getProxyPort()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 242,
        "startColumnNumber" : 12,
        "endLineNumber" : 242,
        "endColumnNumber" : 59
      },
      "nodeContext" : "String proxyPort=clientConfig.getProxyPort();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3965,
        "startLineNumber" : 211,
        "startColumnNumber" : 12,
        "endLineNumber" : 284,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n  clientConfig=config;\n  final String zone=getZone(myInfo);\n  eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n  scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n  localRegionApps.set(new Applications());\n  heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n  cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n  fetchRegistryGeneration=new AtomicLong(0);\n  if (myInfo != null) {\n    instanceInfo=myInfo;\n    appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n  }\n  String proxyHost=clientConfig.getProxyHost();\n  String proxyPort=clientConfig.getProxyPort();\n  discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n  discoveryApacheClient=discoveryJerseyClient.getClient();\n  ClientConfig cc=discoveryJerseyClient.getClientconfig();\n  remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n  AzToRegionMapper azToRegionMapper;\n  if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n    azToRegionMapper=new DNSBasedAzToRegionMapper();\n  }\n else {\n    azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n  }\n  if (null != remoteRegionsToFetch.get()) {\n    azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n  }\n  instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n  boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n  if (enableGZIPContentEncodingFilter) {\n    discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n  }\n  String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n  EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n  discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  if (proxyHost != null && proxyPort != null) {\n    cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 319,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4085,
        "startLineNumber" : 211,
        "startColumnNumber" : 8,
        "endLineNumber" : 286,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n  clientConfig=config;\n  final String zone=getZone(myInfo);\n  eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n  scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n  localRegionApps.set(new Applications());\n  heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n  cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n  fetchRegistryGeneration=new AtomicLong(0);\n  if (myInfo != null) {\n    instanceInfo=myInfo;\n    appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n  }\n  String proxyHost=clientConfig.getProxyHost();\n  String proxyPort=clientConfig.getProxyPort();\n  discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n  discoveryApacheClient=discoveryJerseyClient.getClient();\n  ClientConfig cc=discoveryJerseyClient.getClientconfig();\n  remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n  AzToRegionMapper azToRegionMapper;\n  if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n    azToRegionMapper=new DNSBasedAzToRegionMapper();\n  }\n else {\n    azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n  }\n  if (null != remoteRegionsToFetch.get()) {\n    azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n  }\n  instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n  boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n  if (enableGZIPContentEncodingFilter) {\n    discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n  }\n  String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n  EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n  discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  if (proxyHost != null && proxyPort != null) {\n    cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n  }\n}\n catch (Throwable e) {\n  throw new RuntimeException(\"Failed to initialize DiscoveryClient!\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 332,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5070,
        "startLineNumber" : 199,
        "startColumnNumber" : 109,
        "endLineNumber" : 301,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (args != null) {\n    healthCheckHandlerProvider=args.healthCheckHandlerProvider;\n    healthCheckCallbackProvider=args.healthCheckCallbackProvider;\n    eventBus=args.eventBus;\n  }\n else {\n    healthCheckCallbackProvider=null;\n    healthCheckHandlerProvider=null;\n    eventBus=null;\n  }\n  try {\n    scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n    clientConfig=config;\n    final String zone=getZone(myInfo);\n    eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n    scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n    localRegionApps.set(new Applications());\n    heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    fetchRegistryGeneration=new AtomicLong(0);\n    if (myInfo != null) {\n      instanceInfo=myInfo;\n      appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n    }\n    String proxyHost=clientConfig.getProxyHost();\n    String proxyPort=clientConfig.getProxyPort();\n    discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n    discoveryApacheClient=discoveryJerseyClient.getClient();\n    ClientConfig cc=discoveryJerseyClient.getClientconfig();\n    remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n    AzToRegionMapper azToRegionMapper;\n    if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n      azToRegionMapper=new DNSBasedAzToRegionMapper();\n    }\n else {\n      azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n    }\n    if (null != remoteRegionsToFetch.get()) {\n      azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n    }\n    instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n    boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n    if (enableGZIPContentEncodingFilter) {\n      discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n    }\n    String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n    EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n    discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n    if (proxyHost != null && proxyPort != null) {\n      cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n    }\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize DiscoveryClient!\",e);\n  }\n  if (clientConfig.shouldFetchRegistry() && !fetchRegistry(false)) {\n    fetchRegistryFromBackup();\n  }\n  initScheduledTasks();\n  try {\n    Monitors.registerObject(this);\n  }\n catch (  Throwable e) {\n    logger.warn(\"Cannot register timers\",e);\n  }\n  DiscoveryManager.getInstance().setDiscoveryClient(this);\n  DiscoveryManager.getInstance().setEurekaClientConfig(config);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 418,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5187,
        "startLineNumber" : 198,
        "startColumnNumber" : 4,
        "endLineNumber" : 301,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Inject public DiscoveryClient(InstanceInfo myInfo,EurekaClientConfig config,DiscoveryClientOptionalArgs args){\n  if (args != null) {\n    healthCheckHandlerProvider=args.healthCheckHandlerProvider;\n    healthCheckCallbackProvider=args.healthCheckCallbackProvider;\n    eventBus=args.eventBus;\n  }\n else {\n    healthCheckCallbackProvider=null;\n    healthCheckHandlerProvider=null;\n    eventBus=null;\n  }\n  try {\n    scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n    clientConfig=config;\n    final String zone=getZone(myInfo);\n    eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n    scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n    localRegionApps.set(new Applications());\n    heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    fetchRegistryGeneration=new AtomicLong(0);\n    if (myInfo != null) {\n      instanceInfo=myInfo;\n      appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n    }\n    String proxyHost=clientConfig.getProxyHost();\n    String proxyPort=clientConfig.getProxyPort();\n    discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n    discoveryApacheClient=discoveryJerseyClient.getClient();\n    ClientConfig cc=discoveryJerseyClient.getClientconfig();\n    remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n    AzToRegionMapper azToRegionMapper;\n    if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n      azToRegionMapper=new DNSBasedAzToRegionMapper();\n    }\n else {\n      azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n    }\n    if (null != remoteRegionsToFetch.get()) {\n      azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n    }\n    instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n    boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n    if (enableGZIPContentEncodingFilter) {\n      discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n    }\n    String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n    EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n    discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n    if (proxyHost != null && proxyPort != null) {\n      cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n    }\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize DiscoveryClient!\",e);\n  }\n  if (clientConfig.shouldFetchRegistry() && !fetchRegistry(false)) {\n    fetchRegistryFromBackup();\n  }\n  initScheduledTasks();\n  try {\n    Monitors.registerObject(this);\n  }\n catch (  Throwable e) {\n    logger.warn(\"Cannot register timers\",e);\n  }\n  DiscoveryManager.getInstance().setDiscoveryClient(this);\n  DiscoveryManager.getInstance().setEurekaClientConfig(config);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 435,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 242,
        "startColumnNumber" : 12,
        "endLineNumber" : 242,
        "endColumnNumber" : 59
      },
      "nodeContext" : "String proxyPort=clientConfig.getProxyPort();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.netflix.discovery.EurekaClientConfig"
  }, {
    "nodeContext" : "clientConfig",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 245,
      "startColumnNumber" : 20,
      "endLineNumber" : 245,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 245,
        "startColumnNumber" : 20,
        "endLineNumber" : 245,
        "endColumnNumber" : 71
      },
      "nodeContext" : "clientConfig.getEurekaServerConnectTimeoutSeconds()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 245,
        "startColumnNumber" : 20,
        "endLineNumber" : 245,
        "endColumnNumber" : 78
      },
      "nodeContext" : "clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 462,
        "startLineNumber" : 243,
        "startColumnNumber" : 36,
        "endLineNumber" : 249,
        "endColumnNumber" : 73
      },
      "nodeContext" : "EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 23,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 486,
        "startLineNumber" : 243,
        "startColumnNumber" : 12,
        "endLineNumber" : 249,
        "endColumnNumber" : 73
      },
      "nodeContext" : "discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds())",
      "nodeType" : "Assignment",
      "astNodeNumber" : 25,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 487,
        "startLineNumber" : 243,
        "startColumnNumber" : 12,
        "endLineNumber" : 249,
        "endColumnNumber" : 74
      },
      "nodeContext" : "discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 26,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3965,
        "startLineNumber" : 211,
        "startColumnNumber" : 12,
        "endLineNumber" : 284,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n  clientConfig=config;\n  final String zone=getZone(myInfo);\n  eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n  scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n  localRegionApps.set(new Applications());\n  heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n  cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n  fetchRegistryGeneration=new AtomicLong(0);\n  if (myInfo != null) {\n    instanceInfo=myInfo;\n    appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n  }\n  String proxyHost=clientConfig.getProxyHost();\n  String proxyPort=clientConfig.getProxyPort();\n  discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n  discoveryApacheClient=discoveryJerseyClient.getClient();\n  ClientConfig cc=discoveryJerseyClient.getClientconfig();\n  remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n  AzToRegionMapper azToRegionMapper;\n  if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n    azToRegionMapper=new DNSBasedAzToRegionMapper();\n  }\n else {\n    azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n  }\n  if (null != remoteRegionsToFetch.get()) {\n    azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n  }\n  instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n  boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n  if (enableGZIPContentEncodingFilter) {\n    discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n  }\n  String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n  EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n  discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  if (proxyHost != null && proxyPort != null) {\n    cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 319,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4085,
        "startLineNumber" : 211,
        "startColumnNumber" : 8,
        "endLineNumber" : 286,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n  clientConfig=config;\n  final String zone=getZone(myInfo);\n  eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n  scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n  localRegionApps.set(new Applications());\n  heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n  cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n  fetchRegistryGeneration=new AtomicLong(0);\n  if (myInfo != null) {\n    instanceInfo=myInfo;\n    appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n  }\n  String proxyHost=clientConfig.getProxyHost();\n  String proxyPort=clientConfig.getProxyPort();\n  discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n  discoveryApacheClient=discoveryJerseyClient.getClient();\n  ClientConfig cc=discoveryJerseyClient.getClientconfig();\n  remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n  AzToRegionMapper azToRegionMapper;\n  if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n    azToRegionMapper=new DNSBasedAzToRegionMapper();\n  }\n else {\n    azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n  }\n  if (null != remoteRegionsToFetch.get()) {\n    azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n  }\n  instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n  boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n  if (enableGZIPContentEncodingFilter) {\n    discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n  }\n  String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n  EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n  discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  if (proxyHost != null && proxyPort != null) {\n    cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n  }\n}\n catch (Throwable e) {\n  throw new RuntimeException(\"Failed to initialize DiscoveryClient!\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 332,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5070,
        "startLineNumber" : 199,
        "startColumnNumber" : 109,
        "endLineNumber" : 301,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (args != null) {\n    healthCheckHandlerProvider=args.healthCheckHandlerProvider;\n    healthCheckCallbackProvider=args.healthCheckCallbackProvider;\n    eventBus=args.eventBus;\n  }\n else {\n    healthCheckCallbackProvider=null;\n    healthCheckHandlerProvider=null;\n    eventBus=null;\n  }\n  try {\n    scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n    clientConfig=config;\n    final String zone=getZone(myInfo);\n    eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n    scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n    localRegionApps.set(new Applications());\n    heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    fetchRegistryGeneration=new AtomicLong(0);\n    if (myInfo != null) {\n      instanceInfo=myInfo;\n      appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n    }\n    String proxyHost=clientConfig.getProxyHost();\n    String proxyPort=clientConfig.getProxyPort();\n    discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n    discoveryApacheClient=discoveryJerseyClient.getClient();\n    ClientConfig cc=discoveryJerseyClient.getClientconfig();\n    remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n    AzToRegionMapper azToRegionMapper;\n    if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n      azToRegionMapper=new DNSBasedAzToRegionMapper();\n    }\n else {\n      azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n    }\n    if (null != remoteRegionsToFetch.get()) {\n      azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n    }\n    instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n    boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n    if (enableGZIPContentEncodingFilter) {\n      discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n    }\n    String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n    EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n    discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n    if (proxyHost != null && proxyPort != null) {\n      cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n    }\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize DiscoveryClient!\",e);\n  }\n  if (clientConfig.shouldFetchRegistry() && !fetchRegistry(false)) {\n    fetchRegistryFromBackup();\n  }\n  initScheduledTasks();\n  try {\n    Monitors.registerObject(this);\n  }\n catch (  Throwable e) {\n    logger.warn(\"Cannot register timers\",e);\n  }\n  DiscoveryManager.getInstance().setDiscoveryClient(this);\n  DiscoveryManager.getInstance().setEurekaClientConfig(config);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 418,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5187,
        "startLineNumber" : 198,
        "startColumnNumber" : 4,
        "endLineNumber" : 301,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Inject public DiscoveryClient(InstanceInfo myInfo,EurekaClientConfig config,DiscoveryClientOptionalArgs args){\n  if (args != null) {\n    healthCheckHandlerProvider=args.healthCheckHandlerProvider;\n    healthCheckCallbackProvider=args.healthCheckCallbackProvider;\n    eventBus=args.eventBus;\n  }\n else {\n    healthCheckCallbackProvider=null;\n    healthCheckHandlerProvider=null;\n    eventBus=null;\n  }\n  try {\n    scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n    clientConfig=config;\n    final String zone=getZone(myInfo);\n    eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n    scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n    localRegionApps.set(new Applications());\n    heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    fetchRegistryGeneration=new AtomicLong(0);\n    if (myInfo != null) {\n      instanceInfo=myInfo;\n      appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n    }\n    String proxyHost=clientConfig.getProxyHost();\n    String proxyPort=clientConfig.getProxyPort();\n    discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n    discoveryApacheClient=discoveryJerseyClient.getClient();\n    ClientConfig cc=discoveryJerseyClient.getClientconfig();\n    remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n    AzToRegionMapper azToRegionMapper;\n    if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n      azToRegionMapper=new DNSBasedAzToRegionMapper();\n    }\n else {\n      azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n    }\n    if (null != remoteRegionsToFetch.get()) {\n      azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n    }\n    instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n    boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n    if (enableGZIPContentEncodingFilter) {\n      discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n    }\n    String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n    EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n    discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n    if (proxyHost != null && proxyPort != null) {\n      cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n    }\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize DiscoveryClient!\",e);\n  }\n  if (clientConfig.shouldFetchRegistry() && !fetchRegistry(false)) {\n    fetchRegistryFromBackup();\n  }\n  initScheduledTasks();\n  try {\n    Monitors.registerObject(this);\n  }\n catch (  Throwable e) {\n    logger.warn(\"Cannot register timers\",e);\n  }\n  DiscoveryManager.getInstance().setDiscoveryClient(this);\n  DiscoveryManager.getInstance().setEurekaClientConfig(config);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 435,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 245,
        "startColumnNumber" : 20,
        "endLineNumber" : 245,
        "endColumnNumber" : 78
      },
      "nodeContext" : "clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.netflix.discovery.EurekaClientConfig"
  }, {
    "nodeContext" : "clientConfig",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 246,
      "startColumnNumber" : 20,
      "endLineNumber" : 246,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 246,
        "startColumnNumber" : 20,
        "endLineNumber" : 246,
        "endColumnNumber" : 68
      },
      "nodeContext" : "clientConfig.getEurekaServerReadTimeoutSeconds()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 246,
        "startColumnNumber" : 20,
        "endLineNumber" : 246,
        "endColumnNumber" : 75
      },
      "nodeContext" : "clientConfig.getEurekaServerReadTimeoutSeconds() * 1000",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 462,
        "startLineNumber" : 243,
        "startColumnNumber" : 36,
        "endLineNumber" : 249,
        "endColumnNumber" : 73
      },
      "nodeContext" : "EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 23,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 486,
        "startLineNumber" : 243,
        "startColumnNumber" : 12,
        "endLineNumber" : 249,
        "endColumnNumber" : 73
      },
      "nodeContext" : "discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds())",
      "nodeType" : "Assignment",
      "astNodeNumber" : 25,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 487,
        "startLineNumber" : 243,
        "startColumnNumber" : 12,
        "endLineNumber" : 249,
        "endColumnNumber" : 74
      },
      "nodeContext" : "discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 26,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3965,
        "startLineNumber" : 211,
        "startColumnNumber" : 12,
        "endLineNumber" : 284,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n  clientConfig=config;\n  final String zone=getZone(myInfo);\n  eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n  scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n  localRegionApps.set(new Applications());\n  heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n  cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n  fetchRegistryGeneration=new AtomicLong(0);\n  if (myInfo != null) {\n    instanceInfo=myInfo;\n    appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n  }\n  String proxyHost=clientConfig.getProxyHost();\n  String proxyPort=clientConfig.getProxyPort();\n  discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n  discoveryApacheClient=discoveryJerseyClient.getClient();\n  ClientConfig cc=discoveryJerseyClient.getClientconfig();\n  remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n  AzToRegionMapper azToRegionMapper;\n  if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n    azToRegionMapper=new DNSBasedAzToRegionMapper();\n  }\n else {\n    azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n  }\n  if (null != remoteRegionsToFetch.get()) {\n    azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n  }\n  instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n  boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n  if (enableGZIPContentEncodingFilter) {\n    discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n  }\n  String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n  EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n  discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  if (proxyHost != null && proxyPort != null) {\n    cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 319,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4085,
        "startLineNumber" : 211,
        "startColumnNumber" : 8,
        "endLineNumber" : 286,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n  clientConfig=config;\n  final String zone=getZone(myInfo);\n  eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n  scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n  localRegionApps.set(new Applications());\n  heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n  cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n  fetchRegistryGeneration=new AtomicLong(0);\n  if (myInfo != null) {\n    instanceInfo=myInfo;\n    appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n  }\n  String proxyHost=clientConfig.getProxyHost();\n  String proxyPort=clientConfig.getProxyPort();\n  discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n  discoveryApacheClient=discoveryJerseyClient.getClient();\n  ClientConfig cc=discoveryJerseyClient.getClientconfig();\n  remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n  AzToRegionMapper azToRegionMapper;\n  if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n    azToRegionMapper=new DNSBasedAzToRegionMapper();\n  }\n else {\n    azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n  }\n  if (null != remoteRegionsToFetch.get()) {\n    azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n  }\n  instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n  boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n  if (enableGZIPContentEncodingFilter) {\n    discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n  }\n  String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n  EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n  discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  if (proxyHost != null && proxyPort != null) {\n    cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n  }\n}\n catch (Throwable e) {\n  throw new RuntimeException(\"Failed to initialize DiscoveryClient!\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 332,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5070,
        "startLineNumber" : 199,
        "startColumnNumber" : 109,
        "endLineNumber" : 301,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (args != null) {\n    healthCheckHandlerProvider=args.healthCheckHandlerProvider;\n    healthCheckCallbackProvider=args.healthCheckCallbackProvider;\n    eventBus=args.eventBus;\n  }\n else {\n    healthCheckCallbackProvider=null;\n    healthCheckHandlerProvider=null;\n    eventBus=null;\n  }\n  try {\n    scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n    clientConfig=config;\n    final String zone=getZone(myInfo);\n    eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n    scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n    localRegionApps.set(new Applications());\n    heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    fetchRegistryGeneration=new AtomicLong(0);\n    if (myInfo != null) {\n      instanceInfo=myInfo;\n      appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n    }\n    String proxyHost=clientConfig.getProxyHost();\n    String proxyPort=clientConfig.getProxyPort();\n    discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n    discoveryApacheClient=discoveryJerseyClient.getClient();\n    ClientConfig cc=discoveryJerseyClient.getClientconfig();\n    remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n    AzToRegionMapper azToRegionMapper;\n    if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n      azToRegionMapper=new DNSBasedAzToRegionMapper();\n    }\n else {\n      azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n    }\n    if (null != remoteRegionsToFetch.get()) {\n      azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n    }\n    instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n    boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n    if (enableGZIPContentEncodingFilter) {\n      discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n    }\n    String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n    EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n    discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n    if (proxyHost != null && proxyPort != null) {\n      cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n    }\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize DiscoveryClient!\",e);\n  }\n  if (clientConfig.shouldFetchRegistry() && !fetchRegistry(false)) {\n    fetchRegistryFromBackup();\n  }\n  initScheduledTasks();\n  try {\n    Monitors.registerObject(this);\n  }\n catch (  Throwable e) {\n    logger.warn(\"Cannot register timers\",e);\n  }\n  DiscoveryManager.getInstance().setDiscoveryClient(this);\n  DiscoveryManager.getInstance().setEurekaClientConfig(config);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 418,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5187,
        "startLineNumber" : 198,
        "startColumnNumber" : 4,
        "endLineNumber" : 301,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Inject public DiscoveryClient(InstanceInfo myInfo,EurekaClientConfig config,DiscoveryClientOptionalArgs args){\n  if (args != null) {\n    healthCheckHandlerProvider=args.healthCheckHandlerProvider;\n    healthCheckCallbackProvider=args.healthCheckCallbackProvider;\n    eventBus=args.eventBus;\n  }\n else {\n    healthCheckCallbackProvider=null;\n    healthCheckHandlerProvider=null;\n    eventBus=null;\n  }\n  try {\n    scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n    clientConfig=config;\n    final String zone=getZone(myInfo);\n    eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n    scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n    localRegionApps.set(new Applications());\n    heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    fetchRegistryGeneration=new AtomicLong(0);\n    if (myInfo != null) {\n      instanceInfo=myInfo;\n      appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n    }\n    String proxyHost=clientConfig.getProxyHost();\n    String proxyPort=clientConfig.getProxyPort();\n    discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n    discoveryApacheClient=discoveryJerseyClient.getClient();\n    ClientConfig cc=discoveryJerseyClient.getClientconfig();\n    remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n    AzToRegionMapper azToRegionMapper;\n    if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n      azToRegionMapper=new DNSBasedAzToRegionMapper();\n    }\n else {\n      azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n    }\n    if (null != remoteRegionsToFetch.get()) {\n      azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n    }\n    instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n    boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n    if (enableGZIPContentEncodingFilter) {\n      discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n    }\n    String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n    EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n    discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n    if (proxyHost != null && proxyPort != null) {\n      cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n    }\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize DiscoveryClient!\",e);\n  }\n  if (clientConfig.shouldFetchRegistry() && !fetchRegistry(false)) {\n    fetchRegistryFromBackup();\n  }\n  initScheduledTasks();\n  try {\n    Monitors.registerObject(this);\n  }\n catch (  Throwable e) {\n    logger.warn(\"Cannot register timers\",e);\n  }\n  DiscoveryManager.getInstance().setDiscoveryClient(this);\n  DiscoveryManager.getInstance().setEurekaClientConfig(config);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 435,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 246,
        "startColumnNumber" : 20,
        "endLineNumber" : 246,
        "endColumnNumber" : 75
      },
      "nodeContext" : "clientConfig.getEurekaServerReadTimeoutSeconds() * 1000",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.netflix.discovery.EurekaClientConfig"
  }, {
    "nodeContext" : "clientConfig",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 247,
      "startColumnNumber" : 20,
      "endLineNumber" : 247,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 247,
        "startColumnNumber" : 20,
        "endLineNumber" : 247,
        "endColumnNumber" : 73
      },
      "nodeContext" : "clientConfig.getEurekaServerTotalConnectionsPerHost()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 462,
        "startLineNumber" : 243,
        "startColumnNumber" : 36,
        "endLineNumber" : 249,
        "endColumnNumber" : 73
      },
      "nodeContext" : "EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 23,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 486,
        "startLineNumber" : 243,
        "startColumnNumber" : 12,
        "endLineNumber" : 249,
        "endColumnNumber" : 73
      },
      "nodeContext" : "discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds())",
      "nodeType" : "Assignment",
      "astNodeNumber" : 25,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 487,
        "startLineNumber" : 243,
        "startColumnNumber" : 12,
        "endLineNumber" : 249,
        "endColumnNumber" : 74
      },
      "nodeContext" : "discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 26,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3965,
        "startLineNumber" : 211,
        "startColumnNumber" : 12,
        "endLineNumber" : 284,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n  clientConfig=config;\n  final String zone=getZone(myInfo);\n  eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n  scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n  localRegionApps.set(new Applications());\n  heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n  cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n  fetchRegistryGeneration=new AtomicLong(0);\n  if (myInfo != null) {\n    instanceInfo=myInfo;\n    appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n  }\n  String proxyHost=clientConfig.getProxyHost();\n  String proxyPort=clientConfig.getProxyPort();\n  discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n  discoveryApacheClient=discoveryJerseyClient.getClient();\n  ClientConfig cc=discoveryJerseyClient.getClientconfig();\n  remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n  AzToRegionMapper azToRegionMapper;\n  if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n    azToRegionMapper=new DNSBasedAzToRegionMapper();\n  }\n else {\n    azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n  }\n  if (null != remoteRegionsToFetch.get()) {\n    azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n  }\n  instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n  boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n  if (enableGZIPContentEncodingFilter) {\n    discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n  }\n  String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n  EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n  discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  if (proxyHost != null && proxyPort != null) {\n    cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 319,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4085,
        "startLineNumber" : 211,
        "startColumnNumber" : 8,
        "endLineNumber" : 286,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n  clientConfig=config;\n  final String zone=getZone(myInfo);\n  eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n  scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n  localRegionApps.set(new Applications());\n  heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n  cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n  fetchRegistryGeneration=new AtomicLong(0);\n  if (myInfo != null) {\n    instanceInfo=myInfo;\n    appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n  }\n  String proxyHost=clientConfig.getProxyHost();\n  String proxyPort=clientConfig.getProxyPort();\n  discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n  discoveryApacheClient=discoveryJerseyClient.getClient();\n  ClientConfig cc=discoveryJerseyClient.getClientconfig();\n  remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n  AzToRegionMapper azToRegionMapper;\n  if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n    azToRegionMapper=new DNSBasedAzToRegionMapper();\n  }\n else {\n    azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n  }\n  if (null != remoteRegionsToFetch.get()) {\n    azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n  }\n  instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n  boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n  if (enableGZIPContentEncodingFilter) {\n    discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n  }\n  String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n  EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n  discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  if (proxyHost != null && proxyPort != null) {\n    cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n  }\n}\n catch (Throwable e) {\n  throw new RuntimeException(\"Failed to initialize DiscoveryClient!\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 332,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5070,
        "startLineNumber" : 199,
        "startColumnNumber" : 109,
        "endLineNumber" : 301,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (args != null) {\n    healthCheckHandlerProvider=args.healthCheckHandlerProvider;\n    healthCheckCallbackProvider=args.healthCheckCallbackProvider;\n    eventBus=args.eventBus;\n  }\n else {\n    healthCheckCallbackProvider=null;\n    healthCheckHandlerProvider=null;\n    eventBus=null;\n  }\n  try {\n    scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n    clientConfig=config;\n    final String zone=getZone(myInfo);\n    eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n    scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n    localRegionApps.set(new Applications());\n    heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    fetchRegistryGeneration=new AtomicLong(0);\n    if (myInfo != null) {\n      instanceInfo=myInfo;\n      appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n    }\n    String proxyHost=clientConfig.getProxyHost();\n    String proxyPort=clientConfig.getProxyPort();\n    discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n    discoveryApacheClient=discoveryJerseyClient.getClient();\n    ClientConfig cc=discoveryJerseyClient.getClientconfig();\n    remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n    AzToRegionMapper azToRegionMapper;\n    if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n      azToRegionMapper=new DNSBasedAzToRegionMapper();\n    }\n else {\n      azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n    }\n    if (null != remoteRegionsToFetch.get()) {\n      azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n    }\n    instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n    boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n    if (enableGZIPContentEncodingFilter) {\n      discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n    }\n    String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n    EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n    discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n    if (proxyHost != null && proxyPort != null) {\n      cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n    }\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize DiscoveryClient!\",e);\n  }\n  if (clientConfig.shouldFetchRegistry() && !fetchRegistry(false)) {\n    fetchRegistryFromBackup();\n  }\n  initScheduledTasks();\n  try {\n    Monitors.registerObject(this);\n  }\n catch (  Throwable e) {\n    logger.warn(\"Cannot register timers\",e);\n  }\n  DiscoveryManager.getInstance().setDiscoveryClient(this);\n  DiscoveryManager.getInstance().setEurekaClientConfig(config);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 418,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5187,
        "startLineNumber" : 198,
        "startColumnNumber" : 4,
        "endLineNumber" : 301,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Inject public DiscoveryClient(InstanceInfo myInfo,EurekaClientConfig config,DiscoveryClientOptionalArgs args){\n  if (args != null) {\n    healthCheckHandlerProvider=args.healthCheckHandlerProvider;\n    healthCheckCallbackProvider=args.healthCheckCallbackProvider;\n    eventBus=args.eventBus;\n  }\n else {\n    healthCheckCallbackProvider=null;\n    healthCheckHandlerProvider=null;\n    eventBus=null;\n  }\n  try {\n    scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n    clientConfig=config;\n    final String zone=getZone(myInfo);\n    eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n    scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n    localRegionApps.set(new Applications());\n    heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    fetchRegistryGeneration=new AtomicLong(0);\n    if (myInfo != null) {\n      instanceInfo=myInfo;\n      appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n    }\n    String proxyHost=clientConfig.getProxyHost();\n    String proxyPort=clientConfig.getProxyPort();\n    discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n    discoveryApacheClient=discoveryJerseyClient.getClient();\n    ClientConfig cc=discoveryJerseyClient.getClientconfig();\n    remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n    AzToRegionMapper azToRegionMapper;\n    if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n      azToRegionMapper=new DNSBasedAzToRegionMapper();\n    }\n else {\n      azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n    }\n    if (null != remoteRegionsToFetch.get()) {\n      azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n    }\n    instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n    boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n    if (enableGZIPContentEncodingFilter) {\n      discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n    }\n    String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n    EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n    discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n    if (proxyHost != null && proxyPort != null) {\n      cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n    }\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize DiscoveryClient!\",e);\n  }\n  if (clientConfig.shouldFetchRegistry() && !fetchRegistry(false)) {\n    fetchRegistryFromBackup();\n  }\n  initScheduledTasks();\n  try {\n    Monitors.registerObject(this);\n  }\n catch (  Throwable e) {\n    logger.warn(\"Cannot register timers\",e);\n  }\n  DiscoveryManager.getInstance().setDiscoveryClient(this);\n  DiscoveryManager.getInstance().setEurekaClientConfig(config);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 435,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 247,
        "startColumnNumber" : 20,
        "endLineNumber" : 247,
        "endColumnNumber" : 73
      },
      "nodeContext" : "clientConfig.getEurekaServerTotalConnectionsPerHost()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.netflix.discovery.EurekaClientConfig"
  }, {
    "nodeContext" : "clientConfig",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 248,
      "startColumnNumber" : 20,
      "endLineNumber" : 248,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 248,
        "startColumnNumber" : 20,
        "endLineNumber" : 248,
        "endColumnNumber" : 66
      },
      "nodeContext" : "clientConfig.getEurekaServerTotalConnections()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 462,
        "startLineNumber" : 243,
        "startColumnNumber" : 36,
        "endLineNumber" : 249,
        "endColumnNumber" : 73
      },
      "nodeContext" : "EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 23,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 486,
        "startLineNumber" : 243,
        "startColumnNumber" : 12,
        "endLineNumber" : 249,
        "endColumnNumber" : 73
      },
      "nodeContext" : "discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds())",
      "nodeType" : "Assignment",
      "astNodeNumber" : 25,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 487,
        "startLineNumber" : 243,
        "startColumnNumber" : 12,
        "endLineNumber" : 249,
        "endColumnNumber" : 74
      },
      "nodeContext" : "discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 26,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3965,
        "startLineNumber" : 211,
        "startColumnNumber" : 12,
        "endLineNumber" : 284,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n  clientConfig=config;\n  final String zone=getZone(myInfo);\n  eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n  scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n  localRegionApps.set(new Applications());\n  heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n  cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n  fetchRegistryGeneration=new AtomicLong(0);\n  if (myInfo != null) {\n    instanceInfo=myInfo;\n    appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n  }\n  String proxyHost=clientConfig.getProxyHost();\n  String proxyPort=clientConfig.getProxyPort();\n  discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n  discoveryApacheClient=discoveryJerseyClient.getClient();\n  ClientConfig cc=discoveryJerseyClient.getClientconfig();\n  remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n  AzToRegionMapper azToRegionMapper;\n  if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n    azToRegionMapper=new DNSBasedAzToRegionMapper();\n  }\n else {\n    azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n  }\n  if (null != remoteRegionsToFetch.get()) {\n    azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n  }\n  instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n  boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n  if (enableGZIPContentEncodingFilter) {\n    discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n  }\n  String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n  EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n  discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  if (proxyHost != null && proxyPort != null) {\n    cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 319,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4085,
        "startLineNumber" : 211,
        "startColumnNumber" : 8,
        "endLineNumber" : 286,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n  clientConfig=config;\n  final String zone=getZone(myInfo);\n  eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n  scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n  localRegionApps.set(new Applications());\n  heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n  cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n  fetchRegistryGeneration=new AtomicLong(0);\n  if (myInfo != null) {\n    instanceInfo=myInfo;\n    appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n  }\n  String proxyHost=clientConfig.getProxyHost();\n  String proxyPort=clientConfig.getProxyPort();\n  discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n  discoveryApacheClient=discoveryJerseyClient.getClient();\n  ClientConfig cc=discoveryJerseyClient.getClientconfig();\n  remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n  AzToRegionMapper azToRegionMapper;\n  if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n    azToRegionMapper=new DNSBasedAzToRegionMapper();\n  }\n else {\n    azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n  }\n  if (null != remoteRegionsToFetch.get()) {\n    azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n  }\n  instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n  boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n  if (enableGZIPContentEncodingFilter) {\n    discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n  }\n  String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n  EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n  discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  if (proxyHost != null && proxyPort != null) {\n    cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n  }\n}\n catch (Throwable e) {\n  throw new RuntimeException(\"Failed to initialize DiscoveryClient!\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 332,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5070,
        "startLineNumber" : 199,
        "startColumnNumber" : 109,
        "endLineNumber" : 301,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (args != null) {\n    healthCheckHandlerProvider=args.healthCheckHandlerProvider;\n    healthCheckCallbackProvider=args.healthCheckCallbackProvider;\n    eventBus=args.eventBus;\n  }\n else {\n    healthCheckCallbackProvider=null;\n    healthCheckHandlerProvider=null;\n    eventBus=null;\n  }\n  try {\n    scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n    clientConfig=config;\n    final String zone=getZone(myInfo);\n    eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n    scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n    localRegionApps.set(new Applications());\n    heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    fetchRegistryGeneration=new AtomicLong(0);\n    if (myInfo != null) {\n      instanceInfo=myInfo;\n      appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n    }\n    String proxyHost=clientConfig.getProxyHost();\n    String proxyPort=clientConfig.getProxyPort();\n    discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n    discoveryApacheClient=discoveryJerseyClient.getClient();\n    ClientConfig cc=discoveryJerseyClient.getClientconfig();\n    remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n    AzToRegionMapper azToRegionMapper;\n    if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n      azToRegionMapper=new DNSBasedAzToRegionMapper();\n    }\n else {\n      azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n    }\n    if (null != remoteRegionsToFetch.get()) {\n      azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n    }\n    instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n    boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n    if (enableGZIPContentEncodingFilter) {\n      discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n    }\n    String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n    EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n    discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n    if (proxyHost != null && proxyPort != null) {\n      cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n    }\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize DiscoveryClient!\",e);\n  }\n  if (clientConfig.shouldFetchRegistry() && !fetchRegistry(false)) {\n    fetchRegistryFromBackup();\n  }\n  initScheduledTasks();\n  try {\n    Monitors.registerObject(this);\n  }\n catch (  Throwable e) {\n    logger.warn(\"Cannot register timers\",e);\n  }\n  DiscoveryManager.getInstance().setDiscoveryClient(this);\n  DiscoveryManager.getInstance().setEurekaClientConfig(config);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 418,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5187,
        "startLineNumber" : 198,
        "startColumnNumber" : 4,
        "endLineNumber" : 301,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Inject public DiscoveryClient(InstanceInfo myInfo,EurekaClientConfig config,DiscoveryClientOptionalArgs args){\n  if (args != null) {\n    healthCheckHandlerProvider=args.healthCheckHandlerProvider;\n    healthCheckCallbackProvider=args.healthCheckCallbackProvider;\n    eventBus=args.eventBus;\n  }\n else {\n    healthCheckCallbackProvider=null;\n    healthCheckHandlerProvider=null;\n    eventBus=null;\n  }\n  try {\n    scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n    clientConfig=config;\n    final String zone=getZone(myInfo);\n    eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n    scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n    localRegionApps.set(new Applications());\n    heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    fetchRegistryGeneration=new AtomicLong(0);\n    if (myInfo != null) {\n      instanceInfo=myInfo;\n      appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n    }\n    String proxyHost=clientConfig.getProxyHost();\n    String proxyPort=clientConfig.getProxyPort();\n    discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n    discoveryApacheClient=discoveryJerseyClient.getClient();\n    ClientConfig cc=discoveryJerseyClient.getClientconfig();\n    remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n    AzToRegionMapper azToRegionMapper;\n    if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n      azToRegionMapper=new DNSBasedAzToRegionMapper();\n    }\n else {\n      azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n    }\n    if (null != remoteRegionsToFetch.get()) {\n      azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n    }\n    instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n    boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n    if (enableGZIPContentEncodingFilter) {\n      discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n    }\n    String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n    EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n    discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n    if (proxyHost != null && proxyPort != null) {\n      cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n    }\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize DiscoveryClient!\",e);\n  }\n  if (clientConfig.shouldFetchRegistry() && !fetchRegistry(false)) {\n    fetchRegistryFromBackup();\n  }\n  initScheduledTasks();\n  try {\n    Monitors.registerObject(this);\n  }\n catch (  Throwable e) {\n    logger.warn(\"Cannot register timers\",e);\n  }\n  DiscoveryManager.getInstance().setDiscoveryClient(this);\n  DiscoveryManager.getInstance().setEurekaClientConfig(config);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 435,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 248,
        "startColumnNumber" : 20,
        "endLineNumber" : 248,
        "endColumnNumber" : 66
      },
      "nodeContext" : "clientConfig.getEurekaServerTotalConnections()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.netflix.discovery.EurekaClientConfig"
  }, {
    "nodeContext" : "clientConfig",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 249,
      "startColumnNumber" : 20,
      "endLineNumber" : 249,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 249,
        "startColumnNumber" : 20,
        "endLineNumber" : 249,
        "endColumnNumber" : 72
      },
      "nodeContext" : "clientConfig.getEurekaConnectionIdleTimeoutSeconds()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 462,
        "startLineNumber" : 243,
        "startColumnNumber" : 36,
        "endLineNumber" : 249,
        "endColumnNumber" : 73
      },
      "nodeContext" : "EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 23,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 486,
        "startLineNumber" : 243,
        "startColumnNumber" : 12,
        "endLineNumber" : 249,
        "endColumnNumber" : 73
      },
      "nodeContext" : "discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds())",
      "nodeType" : "Assignment",
      "astNodeNumber" : 25,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 487,
        "startLineNumber" : 243,
        "startColumnNumber" : 12,
        "endLineNumber" : 249,
        "endColumnNumber" : 74
      },
      "nodeContext" : "discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 26,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3965,
        "startLineNumber" : 211,
        "startColumnNumber" : 12,
        "endLineNumber" : 284,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n  clientConfig=config;\n  final String zone=getZone(myInfo);\n  eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n  scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n  localRegionApps.set(new Applications());\n  heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n  cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n  fetchRegistryGeneration=new AtomicLong(0);\n  if (myInfo != null) {\n    instanceInfo=myInfo;\n    appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n  }\n  String proxyHost=clientConfig.getProxyHost();\n  String proxyPort=clientConfig.getProxyPort();\n  discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n  discoveryApacheClient=discoveryJerseyClient.getClient();\n  ClientConfig cc=discoveryJerseyClient.getClientconfig();\n  remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n  AzToRegionMapper azToRegionMapper;\n  if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n    azToRegionMapper=new DNSBasedAzToRegionMapper();\n  }\n else {\n    azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n  }\n  if (null != remoteRegionsToFetch.get()) {\n    azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n  }\n  instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n  boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n  if (enableGZIPContentEncodingFilter) {\n    discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n  }\n  String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n  EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n  discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  if (proxyHost != null && proxyPort != null) {\n    cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 319,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4085,
        "startLineNumber" : 211,
        "startColumnNumber" : 8,
        "endLineNumber" : 286,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n  clientConfig=config;\n  final String zone=getZone(myInfo);\n  eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n  scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n  localRegionApps.set(new Applications());\n  heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n  cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n  fetchRegistryGeneration=new AtomicLong(0);\n  if (myInfo != null) {\n    instanceInfo=myInfo;\n    appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n  }\n  String proxyHost=clientConfig.getProxyHost();\n  String proxyPort=clientConfig.getProxyPort();\n  discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n  discoveryApacheClient=discoveryJerseyClient.getClient();\n  ClientConfig cc=discoveryJerseyClient.getClientconfig();\n  remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n  AzToRegionMapper azToRegionMapper;\n  if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n    azToRegionMapper=new DNSBasedAzToRegionMapper();\n  }\n else {\n    azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n  }\n  if (null != remoteRegionsToFetch.get()) {\n    azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n  }\n  instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n  boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n  if (enableGZIPContentEncodingFilter) {\n    discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n  }\n  String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n  EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n  discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  if (proxyHost != null && proxyPort != null) {\n    cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n  }\n}\n catch (Throwable e) {\n  throw new RuntimeException(\"Failed to initialize DiscoveryClient!\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 332,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5070,
        "startLineNumber" : 199,
        "startColumnNumber" : 109,
        "endLineNumber" : 301,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (args != null) {\n    healthCheckHandlerProvider=args.healthCheckHandlerProvider;\n    healthCheckCallbackProvider=args.healthCheckCallbackProvider;\n    eventBus=args.eventBus;\n  }\n else {\n    healthCheckCallbackProvider=null;\n    healthCheckHandlerProvider=null;\n    eventBus=null;\n  }\n  try {\n    scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n    clientConfig=config;\n    final String zone=getZone(myInfo);\n    eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n    scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n    localRegionApps.set(new Applications());\n    heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    fetchRegistryGeneration=new AtomicLong(0);\n    if (myInfo != null) {\n      instanceInfo=myInfo;\n      appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n    }\n    String proxyHost=clientConfig.getProxyHost();\n    String proxyPort=clientConfig.getProxyPort();\n    discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n    discoveryApacheClient=discoveryJerseyClient.getClient();\n    ClientConfig cc=discoveryJerseyClient.getClientconfig();\n    remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n    AzToRegionMapper azToRegionMapper;\n    if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n      azToRegionMapper=new DNSBasedAzToRegionMapper();\n    }\n else {\n      azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n    }\n    if (null != remoteRegionsToFetch.get()) {\n      azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n    }\n    instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n    boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n    if (enableGZIPContentEncodingFilter) {\n      discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n    }\n    String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n    EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n    discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n    if (proxyHost != null && proxyPort != null) {\n      cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n    }\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize DiscoveryClient!\",e);\n  }\n  if (clientConfig.shouldFetchRegistry() && !fetchRegistry(false)) {\n    fetchRegistryFromBackup();\n  }\n  initScheduledTasks();\n  try {\n    Monitors.registerObject(this);\n  }\n catch (  Throwable e) {\n    logger.warn(\"Cannot register timers\",e);\n  }\n  DiscoveryManager.getInstance().setDiscoveryClient(this);\n  DiscoveryManager.getInstance().setEurekaClientConfig(config);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 418,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5187,
        "startLineNumber" : 198,
        "startColumnNumber" : 4,
        "endLineNumber" : 301,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Inject public DiscoveryClient(InstanceInfo myInfo,EurekaClientConfig config,DiscoveryClientOptionalArgs args){\n  if (args != null) {\n    healthCheckHandlerProvider=args.healthCheckHandlerProvider;\n    healthCheckCallbackProvider=args.healthCheckCallbackProvider;\n    eventBus=args.eventBus;\n  }\n else {\n    healthCheckCallbackProvider=null;\n    healthCheckHandlerProvider=null;\n    eventBus=null;\n  }\n  try {\n    scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n    clientConfig=config;\n    final String zone=getZone(myInfo);\n    eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n    scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n    localRegionApps.set(new Applications());\n    heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    fetchRegistryGeneration=new AtomicLong(0);\n    if (myInfo != null) {\n      instanceInfo=myInfo;\n      appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n    }\n    String proxyHost=clientConfig.getProxyHost();\n    String proxyPort=clientConfig.getProxyPort();\n    discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n    discoveryApacheClient=discoveryJerseyClient.getClient();\n    ClientConfig cc=discoveryJerseyClient.getClientconfig();\n    remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n    AzToRegionMapper azToRegionMapper;\n    if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n      azToRegionMapper=new DNSBasedAzToRegionMapper();\n    }\n else {\n      azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n    }\n    if (null != remoteRegionsToFetch.get()) {\n      azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n    }\n    instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n    boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n    if (enableGZIPContentEncodingFilter) {\n      discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n    }\n    String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n    EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n    discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n    if (proxyHost != null && proxyPort != null) {\n      cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n    }\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize DiscoveryClient!\",e);\n  }\n  if (clientConfig.shouldFetchRegistry() && !fetchRegistry(false)) {\n    fetchRegistryFromBackup();\n  }\n  initScheduledTasks();\n  try {\n    Monitors.registerObject(this);\n  }\n catch (  Throwable e) {\n    logger.warn(\"Cannot register timers\",e);\n  }\n  DiscoveryManager.getInstance().setDiscoveryClient(this);\n  DiscoveryManager.getInstance().setEurekaClientConfig(config);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 435,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 249,
        "startColumnNumber" : 20,
        "endLineNumber" : 249,
        "endColumnNumber" : 72
      },
      "nodeContext" : "clientConfig.getEurekaConnectionIdleTimeoutSeconds()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.netflix.discovery.EurekaClientConfig"
  }, {
    "nodeContext" : "clientConfig",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 252,
      "startColumnNumber" : 63,
      "endLineNumber" : 252,
      "endColumnNumber" : 75
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 252,
        "startColumnNumber" : 63,
        "endLineNumber" : 252,
        "endColumnNumber" : 107
      },
      "nodeContext" : "clientConfig.fetchRegistryForRemoteRegions()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 252,
        "startColumnNumber" : 35,
        "endLineNumber" : 252,
        "endColumnNumber" : 108
      },
      "nodeContext" : "new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions())",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 96,
        "startLineNumber" : 252,
        "startColumnNumber" : 12,
        "endLineNumber" : 252,
        "endColumnNumber" : 108
      },
      "nodeContext" : "remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions())",
      "nodeType" : "Assignment",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 97,
        "startLineNumber" : 252,
        "startColumnNumber" : 12,
        "endLineNumber" : 252,
        "endColumnNumber" : 109
      },
      "nodeContext" : "remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3965,
        "startLineNumber" : 211,
        "startColumnNumber" : 12,
        "endLineNumber" : 284,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n  clientConfig=config;\n  final String zone=getZone(myInfo);\n  eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n  scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n  localRegionApps.set(new Applications());\n  heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n  cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n  fetchRegistryGeneration=new AtomicLong(0);\n  if (myInfo != null) {\n    instanceInfo=myInfo;\n    appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n  }\n  String proxyHost=clientConfig.getProxyHost();\n  String proxyPort=clientConfig.getProxyPort();\n  discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n  discoveryApacheClient=discoveryJerseyClient.getClient();\n  ClientConfig cc=discoveryJerseyClient.getClientconfig();\n  remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n  AzToRegionMapper azToRegionMapper;\n  if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n    azToRegionMapper=new DNSBasedAzToRegionMapper();\n  }\n else {\n    azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n  }\n  if (null != remoteRegionsToFetch.get()) {\n    azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n  }\n  instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n  boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n  if (enableGZIPContentEncodingFilter) {\n    discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n  }\n  String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n  EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n  discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  if (proxyHost != null && proxyPort != null) {\n    cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 319,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4085,
        "startLineNumber" : 211,
        "startColumnNumber" : 8,
        "endLineNumber" : 286,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n  clientConfig=config;\n  final String zone=getZone(myInfo);\n  eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n  scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n  localRegionApps.set(new Applications());\n  heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n  cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n  fetchRegistryGeneration=new AtomicLong(0);\n  if (myInfo != null) {\n    instanceInfo=myInfo;\n    appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n  }\n  String proxyHost=clientConfig.getProxyHost();\n  String proxyPort=clientConfig.getProxyPort();\n  discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n  discoveryApacheClient=discoveryJerseyClient.getClient();\n  ClientConfig cc=discoveryJerseyClient.getClientconfig();\n  remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n  AzToRegionMapper azToRegionMapper;\n  if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n    azToRegionMapper=new DNSBasedAzToRegionMapper();\n  }\n else {\n    azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n  }\n  if (null != remoteRegionsToFetch.get()) {\n    azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n  }\n  instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n  boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n  if (enableGZIPContentEncodingFilter) {\n    discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n  }\n  String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n  EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n  discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  if (proxyHost != null && proxyPort != null) {\n    cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n  }\n}\n catch (Throwable e) {\n  throw new RuntimeException(\"Failed to initialize DiscoveryClient!\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 332,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5070,
        "startLineNumber" : 199,
        "startColumnNumber" : 109,
        "endLineNumber" : 301,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (args != null) {\n    healthCheckHandlerProvider=args.healthCheckHandlerProvider;\n    healthCheckCallbackProvider=args.healthCheckCallbackProvider;\n    eventBus=args.eventBus;\n  }\n else {\n    healthCheckCallbackProvider=null;\n    healthCheckHandlerProvider=null;\n    eventBus=null;\n  }\n  try {\n    scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n    clientConfig=config;\n    final String zone=getZone(myInfo);\n    eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n    scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n    localRegionApps.set(new Applications());\n    heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    fetchRegistryGeneration=new AtomicLong(0);\n    if (myInfo != null) {\n      instanceInfo=myInfo;\n      appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n    }\n    String proxyHost=clientConfig.getProxyHost();\n    String proxyPort=clientConfig.getProxyPort();\n    discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n    discoveryApacheClient=discoveryJerseyClient.getClient();\n    ClientConfig cc=discoveryJerseyClient.getClientconfig();\n    remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n    AzToRegionMapper azToRegionMapper;\n    if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n      azToRegionMapper=new DNSBasedAzToRegionMapper();\n    }\n else {\n      azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n    }\n    if (null != remoteRegionsToFetch.get()) {\n      azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n    }\n    instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n    boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n    if (enableGZIPContentEncodingFilter) {\n      discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n    }\n    String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n    EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n    discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n    if (proxyHost != null && proxyPort != null) {\n      cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n    }\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize DiscoveryClient!\",e);\n  }\n  if (clientConfig.shouldFetchRegistry() && !fetchRegistry(false)) {\n    fetchRegistryFromBackup();\n  }\n  initScheduledTasks();\n  try {\n    Monitors.registerObject(this);\n  }\n catch (  Throwable e) {\n    logger.warn(\"Cannot register timers\",e);\n  }\n  DiscoveryManager.getInstance().setDiscoveryClient(this);\n  DiscoveryManager.getInstance().setEurekaClientConfig(config);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 418,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5187,
        "startLineNumber" : 198,
        "startColumnNumber" : 4,
        "endLineNumber" : 301,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Inject public DiscoveryClient(InstanceInfo myInfo,EurekaClientConfig config,DiscoveryClientOptionalArgs args){\n  if (args != null) {\n    healthCheckHandlerProvider=args.healthCheckHandlerProvider;\n    healthCheckCallbackProvider=args.healthCheckCallbackProvider;\n    eventBus=args.eventBus;\n  }\n else {\n    healthCheckCallbackProvider=null;\n    healthCheckHandlerProvider=null;\n    eventBus=null;\n  }\n  try {\n    scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n    clientConfig=config;\n    final String zone=getZone(myInfo);\n    eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n    scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n    localRegionApps.set(new Applications());\n    heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    fetchRegistryGeneration=new AtomicLong(0);\n    if (myInfo != null) {\n      instanceInfo=myInfo;\n      appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n    }\n    String proxyHost=clientConfig.getProxyHost();\n    String proxyPort=clientConfig.getProxyPort();\n    discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n    discoveryApacheClient=discoveryJerseyClient.getClient();\n    ClientConfig cc=discoveryJerseyClient.getClientconfig();\n    remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n    AzToRegionMapper azToRegionMapper;\n    if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n      azToRegionMapper=new DNSBasedAzToRegionMapper();\n    }\n else {\n      azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n    }\n    if (null != remoteRegionsToFetch.get()) {\n      azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n    }\n    instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n    boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n    if (enableGZIPContentEncodingFilter) {\n      discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n    }\n    String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n    EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n    discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n    if (proxyHost != null && proxyPort != null) {\n      cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n    }\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize DiscoveryClient!\",e);\n  }\n  if (clientConfig.shouldFetchRegistry() && !fetchRegistry(false)) {\n    fetchRegistryFromBackup();\n  }\n  initScheduledTasks();\n  try {\n    Monitors.registerObject(this);\n  }\n catch (  Throwable e) {\n    logger.warn(\"Cannot register timers\",e);\n  }\n  DiscoveryManager.getInstance().setDiscoveryClient(this);\n  DiscoveryManager.getInstance().setEurekaClientConfig(config);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 435,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 97,
        "startLineNumber" : 252,
        "startColumnNumber" : 12,
        "endLineNumber" : 252,
        "endColumnNumber" : 109
      },
      "nodeContext" : "remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "com.netflix.discovery.EurekaClientConfig"
  }, {
    "nodeContext" : "clientConfig",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 254,
      "startColumnNumber" : 16,
      "endLineNumber" : 254,
      "endColumnNumber" : 28
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 254,
        "startColumnNumber" : 16,
        "endLineNumber" : 254,
        "endColumnNumber" : 65
      },
      "nodeContext" : "clientConfig.shouldUseDnsForFetchingServiceUrls()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 242,
        "startLineNumber" : 254,
        "startColumnNumber" : 12,
        "endLineNumber" : 258,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n  azToRegionMapper=new DNSBasedAzToRegionMapper();\n}\n else {\n  azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 19,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3965,
        "startLineNumber" : 211,
        "startColumnNumber" : 12,
        "endLineNumber" : 284,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n  clientConfig=config;\n  final String zone=getZone(myInfo);\n  eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n  scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n  localRegionApps.set(new Applications());\n  heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n  cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n  fetchRegistryGeneration=new AtomicLong(0);\n  if (myInfo != null) {\n    instanceInfo=myInfo;\n    appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n  }\n  String proxyHost=clientConfig.getProxyHost();\n  String proxyPort=clientConfig.getProxyPort();\n  discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n  discoveryApacheClient=discoveryJerseyClient.getClient();\n  ClientConfig cc=discoveryJerseyClient.getClientconfig();\n  remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n  AzToRegionMapper azToRegionMapper;\n  if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n    azToRegionMapper=new DNSBasedAzToRegionMapper();\n  }\n else {\n    azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n  }\n  if (null != remoteRegionsToFetch.get()) {\n    azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n  }\n  instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n  boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n  if (enableGZIPContentEncodingFilter) {\n    discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n  }\n  String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n  EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n  discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  if (proxyHost != null && proxyPort != null) {\n    cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 319,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4085,
        "startLineNumber" : 211,
        "startColumnNumber" : 8,
        "endLineNumber" : 286,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n  clientConfig=config;\n  final String zone=getZone(myInfo);\n  eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n  scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n  localRegionApps.set(new Applications());\n  heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n  cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n  fetchRegistryGeneration=new AtomicLong(0);\n  if (myInfo != null) {\n    instanceInfo=myInfo;\n    appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n  }\n  String proxyHost=clientConfig.getProxyHost();\n  String proxyPort=clientConfig.getProxyPort();\n  discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n  discoveryApacheClient=discoveryJerseyClient.getClient();\n  ClientConfig cc=discoveryJerseyClient.getClientconfig();\n  remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n  AzToRegionMapper azToRegionMapper;\n  if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n    azToRegionMapper=new DNSBasedAzToRegionMapper();\n  }\n else {\n    azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n  }\n  if (null != remoteRegionsToFetch.get()) {\n    azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n  }\n  instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n  boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n  if (enableGZIPContentEncodingFilter) {\n    discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n  }\n  String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n  EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n  discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  if (proxyHost != null && proxyPort != null) {\n    cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n  }\n}\n catch (Throwable e) {\n  throw new RuntimeException(\"Failed to initialize DiscoveryClient!\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 332,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5070,
        "startLineNumber" : 199,
        "startColumnNumber" : 109,
        "endLineNumber" : 301,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (args != null) {\n    healthCheckHandlerProvider=args.healthCheckHandlerProvider;\n    healthCheckCallbackProvider=args.healthCheckCallbackProvider;\n    eventBus=args.eventBus;\n  }\n else {\n    healthCheckCallbackProvider=null;\n    healthCheckHandlerProvider=null;\n    eventBus=null;\n  }\n  try {\n    scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n    clientConfig=config;\n    final String zone=getZone(myInfo);\n    eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n    scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n    localRegionApps.set(new Applications());\n    heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    fetchRegistryGeneration=new AtomicLong(0);\n    if (myInfo != null) {\n      instanceInfo=myInfo;\n      appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n    }\n    String proxyHost=clientConfig.getProxyHost();\n    String proxyPort=clientConfig.getProxyPort();\n    discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n    discoveryApacheClient=discoveryJerseyClient.getClient();\n    ClientConfig cc=discoveryJerseyClient.getClientconfig();\n    remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n    AzToRegionMapper azToRegionMapper;\n    if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n      azToRegionMapper=new DNSBasedAzToRegionMapper();\n    }\n else {\n      azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n    }\n    if (null != remoteRegionsToFetch.get()) {\n      azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n    }\n    instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n    boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n    if (enableGZIPContentEncodingFilter) {\n      discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n    }\n    String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n    EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n    discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n    if (proxyHost != null && proxyPort != null) {\n      cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n    }\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize DiscoveryClient!\",e);\n  }\n  if (clientConfig.shouldFetchRegistry() && !fetchRegistry(false)) {\n    fetchRegistryFromBackup();\n  }\n  initScheduledTasks();\n  try {\n    Monitors.registerObject(this);\n  }\n catch (  Throwable e) {\n    logger.warn(\"Cannot register timers\",e);\n  }\n  DiscoveryManager.getInstance().setDiscoveryClient(this);\n  DiscoveryManager.getInstance().setEurekaClientConfig(config);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 418,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5187,
        "startLineNumber" : 198,
        "startColumnNumber" : 4,
        "endLineNumber" : 301,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Inject public DiscoveryClient(InstanceInfo myInfo,EurekaClientConfig config,DiscoveryClientOptionalArgs args){\n  if (args != null) {\n    healthCheckHandlerProvider=args.healthCheckHandlerProvider;\n    healthCheckCallbackProvider=args.healthCheckCallbackProvider;\n    eventBus=args.eventBus;\n  }\n else {\n    healthCheckCallbackProvider=null;\n    healthCheckHandlerProvider=null;\n    eventBus=null;\n  }\n  try {\n    scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n    clientConfig=config;\n    final String zone=getZone(myInfo);\n    eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n    scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n    localRegionApps.set(new Applications());\n    heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    fetchRegistryGeneration=new AtomicLong(0);\n    if (myInfo != null) {\n      instanceInfo=myInfo;\n      appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n    }\n    String proxyHost=clientConfig.getProxyHost();\n    String proxyPort=clientConfig.getProxyPort();\n    discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n    discoveryApacheClient=discoveryJerseyClient.getClient();\n    ClientConfig cc=discoveryJerseyClient.getClientconfig();\n    remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n    AzToRegionMapper azToRegionMapper;\n    if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n      azToRegionMapper=new DNSBasedAzToRegionMapper();\n    }\n else {\n      azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n    }\n    if (null != remoteRegionsToFetch.get()) {\n      azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n    }\n    instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n    boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n    if (enableGZIPContentEncodingFilter) {\n      discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n    }\n    String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n    EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n    discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n    if (proxyHost != null && proxyPort != null) {\n      cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n    }\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize DiscoveryClient!\",e);\n  }\n  if (clientConfig.shouldFetchRegistry() && !fetchRegistry(false)) {\n    fetchRegistryFromBackup();\n  }\n  initScheduledTasks();\n  try {\n    Monitors.registerObject(this);\n  }\n catch (  Throwable e) {\n    logger.warn(\"Cannot register timers\",e);\n  }\n  DiscoveryManager.getInstance().setDiscoveryClient(this);\n  DiscoveryManager.getInstance().setEurekaClientConfig(config);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 435,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 254,
        "startColumnNumber" : 16,
        "endLineNumber" : 254,
        "endColumnNumber" : 65
      },
      "nodeContext" : "clientConfig.shouldUseDnsForFetchingServiceUrls()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.netflix.discovery.EurekaClientConfig"
  }, {
    "nodeContext" : "clientConfig",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 257,
      "startColumnNumber" : 69,
      "endLineNumber" : 257,
      "endColumnNumber" : 81
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 257,
        "startColumnNumber" : 35,
        "endLineNumber" : 257,
        "endColumnNumber" : 82
      },
      "nodeContext" : "new PropertyBasedAzToRegionMapper(clientConfig)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 257,
        "startColumnNumber" : 16,
        "endLineNumber" : 257,
        "endColumnNumber" : 82
      },
      "nodeContext" : "azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 257,
        "startColumnNumber" : 16,
        "endLineNumber" : 257,
        "endColumnNumber" : 83
      },
      "nodeContext" : "azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 256,
        "startColumnNumber" : 19,
        "endLineNumber" : 258,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 8,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 242,
        "startLineNumber" : 254,
        "startColumnNumber" : 12,
        "endLineNumber" : 258,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n  azToRegionMapper=new DNSBasedAzToRegionMapper();\n}\n else {\n  azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 19,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3965,
        "startLineNumber" : 211,
        "startColumnNumber" : 12,
        "endLineNumber" : 284,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n  clientConfig=config;\n  final String zone=getZone(myInfo);\n  eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n  scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n  localRegionApps.set(new Applications());\n  heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n  cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n  fetchRegistryGeneration=new AtomicLong(0);\n  if (myInfo != null) {\n    instanceInfo=myInfo;\n    appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n  }\n  String proxyHost=clientConfig.getProxyHost();\n  String proxyPort=clientConfig.getProxyPort();\n  discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n  discoveryApacheClient=discoveryJerseyClient.getClient();\n  ClientConfig cc=discoveryJerseyClient.getClientconfig();\n  remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n  AzToRegionMapper azToRegionMapper;\n  if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n    azToRegionMapper=new DNSBasedAzToRegionMapper();\n  }\n else {\n    azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n  }\n  if (null != remoteRegionsToFetch.get()) {\n    azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n  }\n  instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n  boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n  if (enableGZIPContentEncodingFilter) {\n    discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n  }\n  String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n  EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n  discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  if (proxyHost != null && proxyPort != null) {\n    cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 319,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4085,
        "startLineNumber" : 211,
        "startColumnNumber" : 8,
        "endLineNumber" : 286,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n  clientConfig=config;\n  final String zone=getZone(myInfo);\n  eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n  scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n  localRegionApps.set(new Applications());\n  heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n  cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n  fetchRegistryGeneration=new AtomicLong(0);\n  if (myInfo != null) {\n    instanceInfo=myInfo;\n    appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n  }\n  String proxyHost=clientConfig.getProxyHost();\n  String proxyPort=clientConfig.getProxyPort();\n  discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n  discoveryApacheClient=discoveryJerseyClient.getClient();\n  ClientConfig cc=discoveryJerseyClient.getClientconfig();\n  remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n  AzToRegionMapper azToRegionMapper;\n  if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n    azToRegionMapper=new DNSBasedAzToRegionMapper();\n  }\n else {\n    azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n  }\n  if (null != remoteRegionsToFetch.get()) {\n    azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n  }\n  instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n  boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n  if (enableGZIPContentEncodingFilter) {\n    discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n  }\n  String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n  EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n  discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  if (proxyHost != null && proxyPort != null) {\n    cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n  }\n}\n catch (Throwable e) {\n  throw new RuntimeException(\"Failed to initialize DiscoveryClient!\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 332,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5070,
        "startLineNumber" : 199,
        "startColumnNumber" : 109,
        "endLineNumber" : 301,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (args != null) {\n    healthCheckHandlerProvider=args.healthCheckHandlerProvider;\n    healthCheckCallbackProvider=args.healthCheckCallbackProvider;\n    eventBus=args.eventBus;\n  }\n else {\n    healthCheckCallbackProvider=null;\n    healthCheckHandlerProvider=null;\n    eventBus=null;\n  }\n  try {\n    scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n    clientConfig=config;\n    final String zone=getZone(myInfo);\n    eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n    scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n    localRegionApps.set(new Applications());\n    heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    fetchRegistryGeneration=new AtomicLong(0);\n    if (myInfo != null) {\n      instanceInfo=myInfo;\n      appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n    }\n    String proxyHost=clientConfig.getProxyHost();\n    String proxyPort=clientConfig.getProxyPort();\n    discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n    discoveryApacheClient=discoveryJerseyClient.getClient();\n    ClientConfig cc=discoveryJerseyClient.getClientconfig();\n    remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n    AzToRegionMapper azToRegionMapper;\n    if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n      azToRegionMapper=new DNSBasedAzToRegionMapper();\n    }\n else {\n      azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n    }\n    if (null != remoteRegionsToFetch.get()) {\n      azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n    }\n    instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n    boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n    if (enableGZIPContentEncodingFilter) {\n      discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n    }\n    String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n    EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n    discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n    if (proxyHost != null && proxyPort != null) {\n      cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n    }\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize DiscoveryClient!\",e);\n  }\n  if (clientConfig.shouldFetchRegistry() && !fetchRegistry(false)) {\n    fetchRegistryFromBackup();\n  }\n  initScheduledTasks();\n  try {\n    Monitors.registerObject(this);\n  }\n catch (  Throwable e) {\n    logger.warn(\"Cannot register timers\",e);\n  }\n  DiscoveryManager.getInstance().setDiscoveryClient(this);\n  DiscoveryManager.getInstance().setEurekaClientConfig(config);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 418,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5187,
        "startLineNumber" : 198,
        "startColumnNumber" : 4,
        "endLineNumber" : 301,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Inject public DiscoveryClient(InstanceInfo myInfo,EurekaClientConfig config,DiscoveryClientOptionalArgs args){\n  if (args != null) {\n    healthCheckHandlerProvider=args.healthCheckHandlerProvider;\n    healthCheckCallbackProvider=args.healthCheckCallbackProvider;\n    eventBus=args.eventBus;\n  }\n else {\n    healthCheckCallbackProvider=null;\n    healthCheckHandlerProvider=null;\n    eventBus=null;\n  }\n  try {\n    scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n    clientConfig=config;\n    final String zone=getZone(myInfo);\n    eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n    scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n    localRegionApps.set(new Applications());\n    heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    fetchRegistryGeneration=new AtomicLong(0);\n    if (myInfo != null) {\n      instanceInfo=myInfo;\n      appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n    }\n    String proxyHost=clientConfig.getProxyHost();\n    String proxyPort=clientConfig.getProxyPort();\n    discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n    discoveryApacheClient=discoveryJerseyClient.getClient();\n    ClientConfig cc=discoveryJerseyClient.getClientconfig();\n    remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n    AzToRegionMapper azToRegionMapper;\n    if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n      azToRegionMapper=new DNSBasedAzToRegionMapper();\n    }\n else {\n      azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n    }\n    if (null != remoteRegionsToFetch.get()) {\n      azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n    }\n    instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n    boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n    if (enableGZIPContentEncodingFilter) {\n      discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n    }\n    String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n    EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n    discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n    if (proxyHost != null && proxyPort != null) {\n      cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n    }\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize DiscoveryClient!\",e);\n  }\n  if (clientConfig.shouldFetchRegistry() && !fetchRegistry(false)) {\n    fetchRegistryFromBackup();\n  }\n  initScheduledTasks();\n  try {\n    Monitors.registerObject(this);\n  }\n catch (  Throwable e) {\n    logger.warn(\"Cannot register timers\",e);\n  }\n  DiscoveryManager.getInstance().setDiscoveryClient(this);\n  DiscoveryManager.getInstance().setEurekaClientConfig(config);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 435,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 257,
        "startColumnNumber" : 16,
        "endLineNumber" : 257,
        "endColumnNumber" : 83
      },
      "nodeContext" : "azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.netflix.discovery.EurekaClientConfig"
  }, {
    "nodeContext" : "clientConfig",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 262,
      "startColumnNumber" : 80,
      "endLineNumber" : 262,
      "endColumnNumber" : 92
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 262,
        "startColumnNumber" : 80,
        "endLineNumber" : 262,
        "endColumnNumber" : 104
      },
      "nodeContext" : "clientConfig.getRegion()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 262,
        "startColumnNumber" : 36,
        "endLineNumber" : 262,
        "endColumnNumber" : 105
      },
      "nodeContext" : "new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion())",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 262,
        "startColumnNumber" : 12,
        "endLineNumber" : 262,
        "endColumnNumber" : 105
      },
      "nodeContext" : "instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion())",
      "nodeType" : "Assignment",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 94,
        "startLineNumber" : 262,
        "startColumnNumber" : 12,
        "endLineNumber" : 262,
        "endColumnNumber" : 106
      },
      "nodeContext" : "instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3965,
        "startLineNumber" : 211,
        "startColumnNumber" : 12,
        "endLineNumber" : 284,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n  clientConfig=config;\n  final String zone=getZone(myInfo);\n  eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n  scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n  localRegionApps.set(new Applications());\n  heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n  cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n  fetchRegistryGeneration=new AtomicLong(0);\n  if (myInfo != null) {\n    instanceInfo=myInfo;\n    appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n  }\n  String proxyHost=clientConfig.getProxyHost();\n  String proxyPort=clientConfig.getProxyPort();\n  discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n  discoveryApacheClient=discoveryJerseyClient.getClient();\n  ClientConfig cc=discoveryJerseyClient.getClientconfig();\n  remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n  AzToRegionMapper azToRegionMapper;\n  if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n    azToRegionMapper=new DNSBasedAzToRegionMapper();\n  }\n else {\n    azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n  }\n  if (null != remoteRegionsToFetch.get()) {\n    azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n  }\n  instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n  boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n  if (enableGZIPContentEncodingFilter) {\n    discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n  }\n  String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n  EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n  discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  if (proxyHost != null && proxyPort != null) {\n    cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 319,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4085,
        "startLineNumber" : 211,
        "startColumnNumber" : 8,
        "endLineNumber" : 286,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n  clientConfig=config;\n  final String zone=getZone(myInfo);\n  eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n  scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n  localRegionApps.set(new Applications());\n  heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n  cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n  fetchRegistryGeneration=new AtomicLong(0);\n  if (myInfo != null) {\n    instanceInfo=myInfo;\n    appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n  }\n  String proxyHost=clientConfig.getProxyHost();\n  String proxyPort=clientConfig.getProxyPort();\n  discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n  discoveryApacheClient=discoveryJerseyClient.getClient();\n  ClientConfig cc=discoveryJerseyClient.getClientconfig();\n  remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n  AzToRegionMapper azToRegionMapper;\n  if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n    azToRegionMapper=new DNSBasedAzToRegionMapper();\n  }\n else {\n    azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n  }\n  if (null != remoteRegionsToFetch.get()) {\n    azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n  }\n  instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n  boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n  if (enableGZIPContentEncodingFilter) {\n    discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n  }\n  String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n  EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n  discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  if (proxyHost != null && proxyPort != null) {\n    cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n  }\n}\n catch (Throwable e) {\n  throw new RuntimeException(\"Failed to initialize DiscoveryClient!\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 332,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5070,
        "startLineNumber" : 199,
        "startColumnNumber" : 109,
        "endLineNumber" : 301,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (args != null) {\n    healthCheckHandlerProvider=args.healthCheckHandlerProvider;\n    healthCheckCallbackProvider=args.healthCheckCallbackProvider;\n    eventBus=args.eventBus;\n  }\n else {\n    healthCheckCallbackProvider=null;\n    healthCheckHandlerProvider=null;\n    eventBus=null;\n  }\n  try {\n    scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n    clientConfig=config;\n    final String zone=getZone(myInfo);\n    eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n    scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n    localRegionApps.set(new Applications());\n    heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    fetchRegistryGeneration=new AtomicLong(0);\n    if (myInfo != null) {\n      instanceInfo=myInfo;\n      appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n    }\n    String proxyHost=clientConfig.getProxyHost();\n    String proxyPort=clientConfig.getProxyPort();\n    discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n    discoveryApacheClient=discoveryJerseyClient.getClient();\n    ClientConfig cc=discoveryJerseyClient.getClientconfig();\n    remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n    AzToRegionMapper azToRegionMapper;\n    if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n      azToRegionMapper=new DNSBasedAzToRegionMapper();\n    }\n else {\n      azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n    }\n    if (null != remoteRegionsToFetch.get()) {\n      azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n    }\n    instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n    boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n    if (enableGZIPContentEncodingFilter) {\n      discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n    }\n    String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n    EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n    discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n    if (proxyHost != null && proxyPort != null) {\n      cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n    }\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize DiscoveryClient!\",e);\n  }\n  if (clientConfig.shouldFetchRegistry() && !fetchRegistry(false)) {\n    fetchRegistryFromBackup();\n  }\n  initScheduledTasks();\n  try {\n    Monitors.registerObject(this);\n  }\n catch (  Throwable e) {\n    logger.warn(\"Cannot register timers\",e);\n  }\n  DiscoveryManager.getInstance().setDiscoveryClient(this);\n  DiscoveryManager.getInstance().setEurekaClientConfig(config);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 418,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5187,
        "startLineNumber" : 198,
        "startColumnNumber" : 4,
        "endLineNumber" : 301,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Inject public DiscoveryClient(InstanceInfo myInfo,EurekaClientConfig config,DiscoveryClientOptionalArgs args){\n  if (args != null) {\n    healthCheckHandlerProvider=args.healthCheckHandlerProvider;\n    healthCheckCallbackProvider=args.healthCheckCallbackProvider;\n    eventBus=args.eventBus;\n  }\n else {\n    healthCheckCallbackProvider=null;\n    healthCheckHandlerProvider=null;\n    eventBus=null;\n  }\n  try {\n    scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n    clientConfig=config;\n    final String zone=getZone(myInfo);\n    eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n    scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n    localRegionApps.set(new Applications());\n    heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    fetchRegistryGeneration=new AtomicLong(0);\n    if (myInfo != null) {\n      instanceInfo=myInfo;\n      appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n    }\n    String proxyHost=clientConfig.getProxyHost();\n    String proxyPort=clientConfig.getProxyPort();\n    discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n    discoveryApacheClient=discoveryJerseyClient.getClient();\n    ClientConfig cc=discoveryJerseyClient.getClientconfig();\n    remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n    AzToRegionMapper azToRegionMapper;\n    if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n      azToRegionMapper=new DNSBasedAzToRegionMapper();\n    }\n else {\n      azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n    }\n    if (null != remoteRegionsToFetch.get()) {\n      azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n    }\n    instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n    boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n    if (enableGZIPContentEncodingFilter) {\n      discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n    }\n    String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n    EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n    discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n    if (proxyHost != null && proxyPort != null) {\n      cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n    }\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize DiscoveryClient!\",e);\n  }\n  if (clientConfig.shouldFetchRegistry() && !fetchRegistry(false)) {\n    fetchRegistryFromBackup();\n  }\n  initScheduledTasks();\n  try {\n    Monitors.registerObject(this);\n  }\n catch (  Throwable e) {\n    logger.warn(\"Cannot register timers\",e);\n  }\n  DiscoveryManager.getInstance().setDiscoveryClient(this);\n  DiscoveryManager.getInstance().setEurekaClientConfig(config);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 435,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 94,
        "startLineNumber" : 262,
        "startColumnNumber" : 12,
        "endLineNumber" : 262,
        "endColumnNumber" : 106
      },
      "nodeContext" : "instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.netflix.discovery.EurekaClientConfig"
  }, {
    "nodeContext" : "clientConfig",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 287,
      "startColumnNumber" : 12,
      "endLineNumber" : 287,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 287,
        "startColumnNumber" : 12,
        "endLineNumber" : 287,
        "endColumnNumber" : 46
      },
      "nodeContext" : "clientConfig.shouldFetchRegistry()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 287,
        "startColumnNumber" : 12,
        "endLineNumber" : 287,
        "endColumnNumber" : 71
      },
      "nodeContext" : "clientConfig.shouldFetchRegistry() && !fetchRegistry(false)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 115,
        "startLineNumber" : 287,
        "startColumnNumber" : 8,
        "endLineNumber" : 289,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (clientConfig.shouldFetchRegistry() && !fetchRegistry(false)) {\n  fetchRegistryFromBackup();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5070,
        "startLineNumber" : 199,
        "startColumnNumber" : 109,
        "endLineNumber" : 301,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (args != null) {\n    healthCheckHandlerProvider=args.healthCheckHandlerProvider;\n    healthCheckCallbackProvider=args.healthCheckCallbackProvider;\n    eventBus=args.eventBus;\n  }\n else {\n    healthCheckCallbackProvider=null;\n    healthCheckHandlerProvider=null;\n    eventBus=null;\n  }\n  try {\n    scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n    clientConfig=config;\n    final String zone=getZone(myInfo);\n    eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n    scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n    localRegionApps.set(new Applications());\n    heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    fetchRegistryGeneration=new AtomicLong(0);\n    if (myInfo != null) {\n      instanceInfo=myInfo;\n      appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n    }\n    String proxyHost=clientConfig.getProxyHost();\n    String proxyPort=clientConfig.getProxyPort();\n    discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n    discoveryApacheClient=discoveryJerseyClient.getClient();\n    ClientConfig cc=discoveryJerseyClient.getClientconfig();\n    remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n    AzToRegionMapper azToRegionMapper;\n    if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n      azToRegionMapper=new DNSBasedAzToRegionMapper();\n    }\n else {\n      azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n    }\n    if (null != remoteRegionsToFetch.get()) {\n      azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n    }\n    instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n    boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n    if (enableGZIPContentEncodingFilter) {\n      discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n    }\n    String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n    EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n    discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n    if (proxyHost != null && proxyPort != null) {\n      cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n    }\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize DiscoveryClient!\",e);\n  }\n  if (clientConfig.shouldFetchRegistry() && !fetchRegistry(false)) {\n    fetchRegistryFromBackup();\n  }\n  initScheduledTasks();\n  try {\n    Monitors.registerObject(this);\n  }\n catch (  Throwable e) {\n    logger.warn(\"Cannot register timers\",e);\n  }\n  DiscoveryManager.getInstance().setDiscoveryClient(this);\n  DiscoveryManager.getInstance().setEurekaClientConfig(config);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 418,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5187,
        "startLineNumber" : 198,
        "startColumnNumber" : 4,
        "endLineNumber" : 301,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Inject public DiscoveryClient(InstanceInfo myInfo,EurekaClientConfig config,DiscoveryClientOptionalArgs args){\n  if (args != null) {\n    healthCheckHandlerProvider=args.healthCheckHandlerProvider;\n    healthCheckCallbackProvider=args.healthCheckCallbackProvider;\n    eventBus=args.eventBus;\n  }\n else {\n    healthCheckCallbackProvider=null;\n    healthCheckHandlerProvider=null;\n    eventBus=null;\n  }\n  try {\n    scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n    clientConfig=config;\n    final String zone=getZone(myInfo);\n    eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n    scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n    localRegionApps.set(new Applications());\n    heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    fetchRegistryGeneration=new AtomicLong(0);\n    if (myInfo != null) {\n      instanceInfo=myInfo;\n      appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n    }\n    String proxyHost=clientConfig.getProxyHost();\n    String proxyPort=clientConfig.getProxyPort();\n    discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n    discoveryApacheClient=discoveryJerseyClient.getClient();\n    ClientConfig cc=discoveryJerseyClient.getClientconfig();\n    remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n    AzToRegionMapper azToRegionMapper;\n    if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n      azToRegionMapper=new DNSBasedAzToRegionMapper();\n    }\n else {\n      azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n    }\n    if (null != remoteRegionsToFetch.get()) {\n      azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n    }\n    instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n    boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n    if (enableGZIPContentEncodingFilter) {\n      discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n    }\n    String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n    EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n    discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n    if (proxyHost != null && proxyPort != null) {\n      cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n    }\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize DiscoveryClient!\",e);\n  }\n  if (clientConfig.shouldFetchRegistry() && !fetchRegistry(false)) {\n    fetchRegistryFromBackup();\n  }\n  initScheduledTasks();\n  try {\n    Monitors.registerObject(this);\n  }\n catch (  Throwable e) {\n    logger.warn(\"Cannot register timers\",e);\n  }\n  DiscoveryManager.getInstance().setDiscoveryClient(this);\n  DiscoveryManager.getInstance().setEurekaClientConfig(config);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 435,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 287,
        "startColumnNumber" : 12,
        "endLineNumber" : 287,
        "endColumnNumber" : 71
      },
      "nodeContext" : "clientConfig.shouldFetchRegistry() && !fetchRegistry(false)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.netflix.discovery.EurekaClientConfig"
  } ],
  "positionList" : [ {
    "charLength" : 12,
    "startLineNumber" : 221,
    "startColumnNumber" : 45,
    "endLineNumber" : 221,
    "endColumnNumber" : 57
  }, {
    "charLength" : 12,
    "startLineNumber" : 222,
    "startColumnNumber" : 45,
    "endLineNumber" : 222,
    "endColumnNumber" : 57
  }, {
    "charLength" : 12,
    "startLineNumber" : 226,
    "startColumnNumber" : 23,
    "endLineNumber" : 226,
    "endColumnNumber" : 35
  }, {
    "charLength" : 12,
    "startLineNumber" : 230,
    "startColumnNumber" : 23,
    "endLineNumber" : 230,
    "endColumnNumber" : 35
  }, {
    "charLength" : 12,
    "startLineNumber" : 241,
    "startColumnNumber" : 31,
    "endLineNumber" : 241,
    "endColumnNumber" : 43
  }, {
    "charLength" : 12,
    "startLineNumber" : 242,
    "startColumnNumber" : 31,
    "endLineNumber" : 242,
    "endColumnNumber" : 43
  }, {
    "charLength" : 12,
    "startLineNumber" : 245,
    "startColumnNumber" : 20,
    "endLineNumber" : 245,
    "endColumnNumber" : 32
  }, {
    "charLength" : 12,
    "startLineNumber" : 246,
    "startColumnNumber" : 20,
    "endLineNumber" : 246,
    "endColumnNumber" : 32
  }, {
    "charLength" : 12,
    "startLineNumber" : 247,
    "startColumnNumber" : 20,
    "endLineNumber" : 247,
    "endColumnNumber" : 32
  }, {
    "charLength" : 12,
    "startLineNumber" : 248,
    "startColumnNumber" : 20,
    "endLineNumber" : 248,
    "endColumnNumber" : 32
  }, {
    "charLength" : 12,
    "startLineNumber" : 249,
    "startColumnNumber" : 20,
    "endLineNumber" : 249,
    "endColumnNumber" : 32
  }, {
    "charLength" : 12,
    "startLineNumber" : 252,
    "startColumnNumber" : 63,
    "endLineNumber" : 252,
    "endColumnNumber" : 75
  }, {
    "charLength" : 12,
    "startLineNumber" : 254,
    "startColumnNumber" : 16,
    "endLineNumber" : 254,
    "endColumnNumber" : 28
  }, {
    "charLength" : 12,
    "startLineNumber" : 257,
    "startColumnNumber" : 69,
    "endLineNumber" : 257,
    "endColumnNumber" : 81
  }, {
    "charLength" : 12,
    "startLineNumber" : 262,
    "startColumnNumber" : 80,
    "endLineNumber" : 262,
    "endColumnNumber" : 92
  }, {
    "charLength" : 12,
    "startLineNumber" : 287,
    "startColumnNumber" : 12,
    "endLineNumber" : 287,
    "endColumnNumber" : 24
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 15,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 15,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 1
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 1
  }, {
    "firstKey" : 8,
    "secondKey" : 9,
    "layout" : 1
  }, {
    "firstKey" : 8,
    "secondKey" : 10,
    "layout" : 1
  }, {
    "firstKey" : 8,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 9,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 6,
    "layout" : 1
  }, {
    "firstKey" : 9,
    "secondKey" : 7,
    "layout" : 1
  }, {
    "firstKey" : 9,
    "secondKey" : 8,
    "layout" : 1
  }, {
    "firstKey" : 9,
    "secondKey" : 10,
    "layout" : 1
  }, {
    "firstKey" : 9,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 10,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 6,
    "layout" : 1
  }, {
    "firstKey" : 10,
    "secondKey" : 7,
    "layout" : 1
  }, {
    "firstKey" : 10,
    "secondKey" : 8,
    "layout" : 1
  }, {
    "firstKey" : 10,
    "secondKey" : 9,
    "layout" : 1
  }, {
    "firstKey" : 10,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 13,
    "layout" : 1
  }, {
    "firstKey" : 12,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 15,
    "layout" : 7
  }, {
    "firstKey" : 14,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 14,
    "layout" : 3
  } ]
}