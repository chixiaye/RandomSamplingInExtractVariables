{
  "id" : 234,
  "expression" : "new UnicodeEscaper(){\n  @Override @CheckForNull protected char[] escape(  int cp){\n    if (cp < Character.MIN_SUPPLEMENTARY_CODE_POINT) {\n      return escaper.escape((char)cp);\n    }\n    char[] surrogateChars=new char[2];\n    Character.toChars(cp,surrogateChars,0);\n    char[] hiChars=escaper.escape(surrogateChars[0]);\n    char[] loChars=escaper.escape(surrogateChars[1]);\n    if (hiChars == null && loChars == null) {\n      return null;\n    }\n    int hiCount=hiChars != null ? hiChars.length : 1;\n    int loCount=loChars != null ? loChars.length : 1;\n    char[] output=new char[hiCount + loCount];\n    if (hiChars != null) {\n      for (int n=0; n < hiChars.length; ++n) {\n        output[n]=hiChars[n];\n      }\n    }\n else {\n      output[0]=surrogateChars[0];\n    }\n    if (loChars != null) {\n      for (int n=0; n < loChars.length; ++n) {\n        output[hiCount + n]=loChars[n];\n      }\n    }\n else {\n      output[hiCount]=surrogateChars[1];\n    }\n    return output;\n  }\n}\n",
  "projectName" : "google@guava",
  "commitID" : "68500b2c09fa6985eab2e41577e2992685b57f2b",
  "filePath" : "/android/guava/src/com/google/common/escape/Escapers.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new UnicodeEscaper(){\n  @Override @CheckForNull protected char[] escape(  int cp){\n    if (cp < Character.MIN_SUPPLEMENTARY_CODE_POINT) {\n      return escaper.escape((char)cp);\n    }\n    char[] surrogateChars=new char[2];\n    Character.toChars(cp,surrogateChars,0);\n    char[] hiChars=escaper.escape(surrogateChars[0]);\n    char[] loChars=escaper.escape(surrogateChars[1]);\n    if (hiChars == null && loChars == null) {\n      return null;\n    }\n    int hiCount=hiChars != null ? hiChars.length : 1;\n    int loCount=loChars != null ? loChars.length : 1;\n    char[] output=new char[hiCount + loCount];\n    if (hiChars != null) {\n      for (int n=0; n < hiChars.length; ++n) {\n        output[n]=hiChars[n];\n      }\n    }\n else {\n      output[0]=surrogateChars[0];\n    }\n    if (loChars != null) {\n      for (int n=0; n < loChars.length; ++n) {\n        output[hiCount + n]=loChars[n];\n      }\n    }\n else {\n      output[hiCount]=surrogateChars[1];\n    }\n    return output;\n  }\n}\n",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 2078,
      "startLineNumber" : 232,
      "startColumnNumber" : 11,
      "endLineNumber" : 278,
      "endColumnNumber" : 5
    },
    "astNodeNumber" : 198,
    "astHeight" : 13,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2086,
        "startLineNumber" : 232,
        "startColumnNumber" : 4,
        "endLineNumber" : 278,
        "endColumnNumber" : 6
      },
      "nodeContext" : "return new UnicodeEscaper(){\n  @Override @CheckForNull protected char[] escape(  int cp){\n    if (cp < Character.MIN_SUPPLEMENTARY_CODE_POINT) {\n      return escaper.escape((char)cp);\n    }\n    char[] surrogateChars=new char[2];\n    Character.toChars(cp,surrogateChars,0);\n    char[] hiChars=escaper.escape(surrogateChars[0]);\n    char[] loChars=escaper.escape(surrogateChars[1]);\n    if (hiChars == null && loChars == null) {\n      return null;\n    }\n    int hiCount=hiChars != null ? hiChars.length : 1;\n    int loCount=loChars != null ? loChars.length : 1;\n    char[] output=new char[hiCount + loCount];\n    if (hiChars != null) {\n      for (int n=0; n < hiChars.length; ++n) {\n        output[n]=hiChars[n];\n      }\n    }\n else {\n      output[0]=surrogateChars[0];\n    }\n    if (loChars != null) {\n      for (int n=0; n < loChars.length; ++n) {\n        output[hiCount + n]=loChars[n];\n      }\n    }\n else {\n      output[hiCount]=surrogateChars[1];\n    }\n    return output;\n  }\n}\n;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 199,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2098,
        "startLineNumber" : 231,
        "startColumnNumber" : 58,
        "endLineNumber" : 279,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  return new UnicodeEscaper(){\n    @Override @CheckForNull protected char[] escape(    int cp){\n      if (cp < Character.MIN_SUPPLEMENTARY_CODE_POINT) {\n        return escaper.escape((char)cp);\n      }\n      char[] surrogateChars=new char[2];\n      Character.toChars(cp,surrogateChars,0);\n      char[] hiChars=escaper.escape(surrogateChars[0]);\n      char[] loChars=escaper.escape(surrogateChars[1]);\n      if (hiChars == null && loChars == null) {\n        return null;\n      }\n      int hiCount=hiChars != null ? hiChars.length : 1;\n      int loCount=loChars != null ? loChars.length : 1;\n      char[] output=new char[hiCount + loCount];\n      if (hiChars != null) {\n        for (int n=0; n < hiChars.length; ++n) {\n          output[n]=hiChars[n];\n        }\n      }\n else {\n        output[0]=surrogateChars[0];\n      }\n      if (loChars != null) {\n        for (int n=0; n < loChars.length; ++n) {\n          output[hiCount + n]=loChars[n];\n        }\n      }\n else {\n        output[hiCount]=surrogateChars[1];\n      }\n      return output;\n    }\n  }\n;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 200,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2222,
        "startLineNumber" : 230,
        "startColumnNumber" : 2,
        "endLineNumber" : 279,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Private helper to wrap a CharEscaper as a UnicodeEscaper. \n */\nprivate static UnicodeEscaper wrap(CharEscaper escaper){\n  return new UnicodeEscaper(){\n    @Override @CheckForNull protected char[] escape(    int cp){\n      if (cp < Character.MIN_SUPPLEMENTARY_CODE_POINT) {\n        return escaper.escape((char)cp);\n      }\n      char[] surrogateChars=new char[2];\n      Character.toChars(cp,surrogateChars,0);\n      char[] hiChars=escaper.escape(surrogateChars[0]);\n      char[] loChars=escaper.escape(surrogateChars[1]);\n      if (hiChars == null && loChars == null) {\n        return null;\n      }\n      int hiCount=hiChars != null ? hiChars.length : 1;\n      int loCount=loChars != null ? loChars.length : 1;\n      char[] output=new char[hiCount + loCount];\n      if (hiChars != null) {\n        for (int n=0; n < hiChars.length; ++n) {\n          output[n]=hiChars[n];\n        }\n      }\n else {\n        output[0]=surrogateChars[0];\n      }\n      if (loChars != null) {\n        for (int n=0; n < loChars.length; ++n) {\n          output[hiCount + n]=loChars[n];\n        }\n      }\n else {\n        output[hiCount]=surrogateChars[1];\n      }\n      return output;\n    }\n  }\n;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 211,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2086,
        "startLineNumber" : 232,
        "startColumnNumber" : 4,
        "endLineNumber" : 278,
        "endColumnNumber" : 6
      },
      "nodeContext" : "return new UnicodeEscaper(){\n  @Override @CheckForNull protected char[] escape(  int cp){\n    if (cp < Character.MIN_SUPPLEMENTARY_CODE_POINT) {\n      return escaper.escape((char)cp);\n    }\n    char[] surrogateChars=new char[2];\n    Character.toChars(cp,surrogateChars,0);\n    char[] hiChars=escaper.escape(surrogateChars[0]);\n    char[] loChars=escaper.escape(surrogateChars[1]);\n    if (hiChars == null && loChars == null) {\n      return null;\n    }\n    int hiCount=hiChars != null ? hiChars.length : 1;\n    int loCount=loChars != null ? loChars.length : 1;\n    char[] output=new char[hiCount + loCount];\n    if (hiChars != null) {\n      for (int n=0; n < hiChars.length; ++n) {\n        output[n]=hiChars[n];\n      }\n    }\n else {\n      output[0]=surrogateChars[0];\n    }\n    if (loChars != null) {\n      for (int n=0; n < loChars.length; ++n) {\n        output[hiCount + n]=loChars[n];\n      }\n    }\n else {\n      output[hiCount]=surrogateChars[1];\n    }\n    return output;\n  }\n}\n;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 199,
      "astHeight" : 14
    },
    "tokenLength" : 91,
    "type" : ""
  } ],
  "positionList" : [ {
    "charLength" : 2078,
    "startLineNumber" : 232,
    "startColumnNumber" : 11,
    "endLineNumber" : 278,
    "endColumnNumber" : 5
  } ],
  "layoutRelationDataList" : [ ]
}