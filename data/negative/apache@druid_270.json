{
  "id" : 270,
  "expression" : "postAggVisitor.getPostAggs()",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/sql/src/main/java/org/apache/druid/sql/calcite/rel/Projection.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "postAggVisitor.getPostAggs()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 28,
      "startLineNumber" : 228,
      "startColumnNumber" : 8,
      "endLineNumber" : 228,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 143,
        "startLineNumber" : 227,
        "startColumnNumber" : 11,
        "endLineNumber" : 231,
        "endColumnNumber" : 5
      },
      "nodeContext" : "new Projection(postAggVisitor.getPostAggs(),null,RowSignatures.fromRelDataType(rowOrder,project.getRowType()))",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 14,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 151,
        "startLineNumber" : 227,
        "startColumnNumber" : 4,
        "endLineNumber" : 231,
        "endColumnNumber" : 6
      },
      "nodeContext" : "return new Projection(postAggVisitor.getPostAggs(),null,RowSignatures.fromRelDataType(rowOrder,project.getRowType()));\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1091,
        "startLineNumber" : 200,
        "startColumnNumber" : 2,
        "endLineNumber" : 232,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final List<String> rowOrder=new ArrayList<>();\n  final String outputNamePrefix=Calcites.findUnusedPrefixForDigits(basePrefix,inputRowSignature.getColumnNames());\n  final PostAggregatorVisitor postAggVisitor=new PostAggregatorVisitor(outputNamePrefix);\n  for (  final RexNode postAggregatorRexNode : project.getChildExps()) {\n    if (postAggregatorRexNode.getKind() == SqlKind.INPUT_REF || postAggregatorRexNode.getKind() == SqlKind.LITERAL) {\n      postAggregationHandleInputRefOrLiteral(project,plannerContext,inputRowSignature,postAggregatorRexNode,rowOrder,postAggVisitor);\n    }\n else {\n      postAggregationHandleOtherKinds(project,plannerContext,inputRowSignature,postAggregatorRexNode,rowOrder,postAggVisitor);\n    }\n  }\n  return new Projection(postAggVisitor.getPostAggs(),null,RowSignatures.fromRelDataType(rowOrder,project.getRowType()));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 98,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1285,
        "startLineNumber" : 194,
        "startColumnNumber" : 2,
        "endLineNumber" : 232,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static Projection postAggregation(final Project project,final PlannerContext plannerContext,final RowSignature inputRowSignature,final String basePrefix){\n  final List<String> rowOrder=new ArrayList<>();\n  final String outputNamePrefix=Calcites.findUnusedPrefixForDigits(basePrefix,inputRowSignature.getColumnNames());\n  final PostAggregatorVisitor postAggVisitor=new PostAggregatorVisitor(outputNamePrefix);\n  for (  final RexNode postAggregatorRexNode : project.getChildExps()) {\n    if (postAggregatorRexNode.getKind() == SqlKind.INPUT_REF || postAggregatorRexNode.getKind() == SqlKind.LITERAL) {\n      postAggregationHandleInputRefOrLiteral(project,plannerContext,inputRowSignature,postAggregatorRexNode,rowOrder,postAggVisitor);\n    }\n else {\n      postAggregationHandleOtherKinds(project,plannerContext,inputRowSignature,postAggregatorRexNode,rowOrder,postAggVisitor);\n    }\n  }\n  return new Projection(postAggVisitor.getPostAggs(),null,RowSignatures.fromRelDataType(rowOrder,project.getRowType()));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 124,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 143,
        "startLineNumber" : 227,
        "startColumnNumber" : 11,
        "endLineNumber" : 231,
        "endColumnNumber" : 5
      },
      "nodeContext" : "new Projection(postAggVisitor.getPostAggs(),null,RowSignatures.fromRelDataType(rowOrder,project.getRowType()))",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 14,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.util.List<org.apache.druid.query.aggregation.PostAggregator>"
  } ],
  "positionList" : [ {
    "charLength" : 28,
    "startLineNumber" : 228,
    "startColumnNumber" : 8,
    "endLineNumber" : 228,
    "endColumnNumber" : 36
  } ],
  "layoutRelationDataList" : [ ]
}