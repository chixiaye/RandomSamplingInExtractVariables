{
  "id" : 561,
  "expression" : "false",
  "projectName" : "Anuken@Mindustry",
  "commitID" : "8dd66fb94231a7d9b5c9c86a34f778fb4a9c4b1c",
  "filePath" : "core/src/mindustry/ai/BaseAI.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "false",
    "nodeType" : "BooleanLiteral",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 78,
      "startColumnNumber" : 26,
      "endLineNumber" : 78,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 78,
        "startColumnNumber" : 12,
        "endLineNumber" : 78,
        "endColumnNumber" : 31
      },
      "nodeContext" : "calculating=false",
      "nodeType" : "Assignment",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 78,
        "startColumnNumber" : 12,
        "endLineNumber" : 78,
        "endColumnNumber" : 32
      },
      "nodeContext" : "calculating=false;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 128,
        "startLineNumber" : 77,
        "startColumnNumber" : 70,
        "endLineNumber" : 82,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  calculating=false;\n  calcCount=0;\n  calcPath.clear();\n  totalCalcs++;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 16,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 190,
        "startLineNumber" : 77,
        "startColumnNumber" : 8,
        "endLineNumber" : 82,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (calculating && calcCount >= world.width() * world.height()) {\n  calculating=false;\n  calcCount=0;\n  calcPath.clear();\n  totalCalcs++;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 28,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4750,
        "startLineNumber" : 55,
        "startColumnNumber" : 24,
        "endLineNumber" : 179,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (data.team.rules().aiCoreSpawn && timer.get(timerSpawn,60 * 2.5f) && data.hasCore()) {\n    CoreBlock block=(CoreBlock)data.core().block;\n    int coreUnits=Groups.unit.count(u -> u.team == data.team && u.type == block.unitType);\n    if (!state.isEditor() && coreUnits < data.cores.size) {\n      Unit unit=block.unitType.create(data.team);\n      unit.set(data.cores.random());\n      unit.add();\n      Fx.spawn.at(unit);\n    }\n  }\n  if (!calculating && (timer.get(timerRefreshPath,3f * Time.toMinutes) || !startedCalculating) && data.hasCore()) {\n    calculating=true;\n    startedCalculating=true;\n    calcPath.clear();\n  }\n  if (calculating && calcCount >= world.width() * world.height()) {\n    calculating=false;\n    calcCount=0;\n    calcPath.clear();\n    totalCalcs++;\n  }\n  if (calculating) {\n    if (calcTile == null) {\n      Vars.spawner.eachGroundSpawn((x,y) -> calcTile=world.tile(x,y));\n      if (calcTile == null) {\n        calculating=false;\n      }\n    }\n else {\n      var field=pathfinder.getField(state.rules.waveTeam,Pathfinder.costGround,Pathfinder.fieldCore);\n      int[][] weights=field.weights;\n      for (int i=0; i < pathStep; i++) {\n        int minCost=Integer.MAX_VALUE;\n        int cx=calcTile.x, cy=calcTile.y;\n        boolean foundAny=false;\n        for (        Point2 p : Geometry.d4) {\n          int nx=cx + p.x, ny=cy + p.y;\n          Tile other=world.tile(nx,ny);\n          if (other != null && weights[nx][ny] < minCost && weights[nx][ny] != -1) {\n            minCost=weights[nx][ny];\n            calcTile=other;\n            foundAny=true;\n          }\n        }\n        if (!foundAny) {\n          calcCount=Integer.MAX_VALUE;\n          break;\n        }\n        calcPath.add(calcTile.pos());\n        if (calcTile.build instanceof         CoreBuild b && b.team == state.rules.defaultTeam) {\n          calculating=false;\n          calcCount=0;\n          path.clear();\n          path.addAll(calcPath);\n          calcPath.clear();\n          calcTile=null;\n          totalCalcs++;\n          break;\n        }\n        calcCount++;\n      }\n    }\n  }\n  if (totalCalcs > 0 && data.blocks.isEmpty() && timer.get(timerStep,Mathf.lerp(20f,4f,data.team.rules().aiTier))) {\n    if (!triedWalls) {\n      tryWalls();\n      triedWalls=true;\n    }\n    for (int i=0; i < attempts; i++) {\n      int range=150;\n      Position pos=randomPosition();\n      if (pos == null)       return;\n      Tmp.v1.rnd(Mathf.random(range));\n      int wx=(int)(World.toTile(pos.getX()) + Tmp.v1.x), wy=(int)(World.toTile(pos.getY()) + Tmp.v1.y);\n      Tile tile=world.tiles.getc(wx,wy);\n      if (spawner.getSpawns().contains(t -> t.within(tile,tilesize * 40f))) {\n        continue;\n      }\n      Seq<BasePart> parts=null;\n      if (tile.drop() != null && Vars.bases.forResource(tile.drop()).any()) {\n        parts=Vars.bases.forResource(tile.drop());\n      }\n else       if (Mathf.chance(emptyChance)) {\n        parts=Vars.bases.parts;\n      }\n      if (parts != null) {\n        BasePart part=parts.random();\n        if (tryPlace(part,tile.x,tile.y)) {\n          break;\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 634,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4770,
        "startLineNumber" : 55,
        "startColumnNumber" : 4,
        "endLineNumber" : 179,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void update(){\n  if (data.team.rules().aiCoreSpawn && timer.get(timerSpawn,60 * 2.5f) && data.hasCore()) {\n    CoreBlock block=(CoreBlock)data.core().block;\n    int coreUnits=Groups.unit.count(u -> u.team == data.team && u.type == block.unitType);\n    if (!state.isEditor() && coreUnits < data.cores.size) {\n      Unit unit=block.unitType.create(data.team);\n      unit.set(data.cores.random());\n      unit.add();\n      Fx.spawn.at(unit);\n    }\n  }\n  if (!calculating && (timer.get(timerRefreshPath,3f * Time.toMinutes) || !startedCalculating) && data.hasCore()) {\n    calculating=true;\n    startedCalculating=true;\n    calcPath.clear();\n  }\n  if (calculating && calcCount >= world.width() * world.height()) {\n    calculating=false;\n    calcCount=0;\n    calcPath.clear();\n    totalCalcs++;\n  }\n  if (calculating) {\n    if (calcTile == null) {\n      Vars.spawner.eachGroundSpawn((x,y) -> calcTile=world.tile(x,y));\n      if (calcTile == null) {\n        calculating=false;\n      }\n    }\n else {\n      var field=pathfinder.getField(state.rules.waveTeam,Pathfinder.costGround,Pathfinder.fieldCore);\n      int[][] weights=field.weights;\n      for (int i=0; i < pathStep; i++) {\n        int minCost=Integer.MAX_VALUE;\n        int cx=calcTile.x, cy=calcTile.y;\n        boolean foundAny=false;\n        for (        Point2 p : Geometry.d4) {\n          int nx=cx + p.x, ny=cy + p.y;\n          Tile other=world.tile(nx,ny);\n          if (other != null && weights[nx][ny] < minCost && weights[nx][ny] != -1) {\n            minCost=weights[nx][ny];\n            calcTile=other;\n            foundAny=true;\n          }\n        }\n        if (!foundAny) {\n          calcCount=Integer.MAX_VALUE;\n          break;\n        }\n        calcPath.add(calcTile.pos());\n        if (calcTile.build instanceof         CoreBuild b && b.team == state.rules.defaultTeam) {\n          calculating=false;\n          calcCount=0;\n          path.clear();\n          path.addAll(calcPath);\n          calcPath.clear();\n          calcTile=null;\n          totalCalcs++;\n          break;\n        }\n        calcCount++;\n      }\n    }\n  }\n  if (totalCalcs > 0 && data.blocks.isEmpty() && timer.get(timerStep,Mathf.lerp(20f,4f,data.team.rules().aiTier))) {\n    if (!triedWalls) {\n      tryWalls();\n      triedWalls=true;\n    }\n    for (int i=0; i < attempts; i++) {\n      int range=150;\n      Position pos=randomPosition();\n      if (pos == null)       return;\n      Tmp.v1.rnd(Mathf.random(range));\n      int wx=(int)(World.toTile(pos.getX()) + Tmp.v1.x), wy=(int)(World.toTile(pos.getY()) + Tmp.v1.y);\n      Tile tile=world.tiles.getc(wx,wy);\n      if (spawner.getSpawns().contains(t -> t.within(tile,tilesize * 40f))) {\n        continue;\n      }\n      Seq<BasePart> parts=null;\n      if (tile.drop() != null && Vars.bases.forResource(tile.drop()).any()) {\n        parts=Vars.bases.forResource(tile.drop());\n      }\n else       if (Mathf.chance(emptyChance)) {\n        parts=Vars.bases.parts;\n      }\n      if (parts != null) {\n        BasePart part=parts.random();\n        if (tryPlace(part,tile.x,tile.y)) {\n          break;\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 638,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 78,
        "startColumnNumber" : 12,
        "endLineNumber" : 78,
        "endColumnNumber" : 32
      },
      "nodeContext" : "calculating=false;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "boolean"
  }, {
    "nodeContext" : "false",
    "nodeType" : "BooleanLiteral",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 89,
      "startColumnNumber" : 34,
      "endLineNumber" : 89,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 89,
        "startColumnNumber" : 20,
        "endLineNumber" : 89,
        "endColumnNumber" : 39
      },
      "nodeContext" : "calculating=false",
      "nodeType" : "Assignment",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 89,
        "startColumnNumber" : 20,
        "endLineNumber" : 89,
        "endColumnNumber" : 40
      },
      "nodeContext" : "calculating=false;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 88,
        "startColumnNumber" : 36,
        "endLineNumber" : 90,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  calculating=false;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 88,
        "startColumnNumber" : 16,
        "endLineNumber" : 90,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (calcTile == null) {\n  calculating=false;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 197,
        "startLineNumber" : 86,
        "startColumnNumber" : 32,
        "endLineNumber" : 91,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Vars.spawner.eachGroundSpawn((x,y) -> calcTile=world.tile(x,y));\n  if (calcTile == null) {\n    calculating=false;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 28,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1958,
        "startLineNumber" : 86,
        "startColumnNumber" : 12,
        "endLineNumber" : 134,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (calcTile == null) {\n  Vars.spawner.eachGroundSpawn((x,y) -> calcTile=world.tile(x,y));\n  if (calcTile == null) {\n    calculating=false;\n  }\n}\n else {\n  var field=pathfinder.getField(state.rules.waveTeam,Pathfinder.costGround,Pathfinder.fieldCore);\n  int[][] weights=field.weights;\n  for (int i=0; i < pathStep; i++) {\n    int minCost=Integer.MAX_VALUE;\n    int cx=calcTile.x, cy=calcTile.y;\n    boolean foundAny=false;\n    for (    Point2 p : Geometry.d4) {\n      int nx=cx + p.x, ny=cy + p.y;\n      Tile other=world.tile(nx,ny);\n      if (other != null && weights[nx][ny] < minCost && weights[nx][ny] != -1) {\n        minCost=weights[nx][ny];\n        calcTile=other;\n        foundAny=true;\n      }\n    }\n    if (!foundAny) {\n      calcCount=Integer.MAX_VALUE;\n      break;\n    }\n    calcPath.add(calcTile.pos());\n    if (calcTile.build instanceof     CoreBuild b && b.team == state.rules.defaultTeam) {\n      calculating=false;\n      calcCount=0;\n      path.clear();\n      path.addAll(calcPath);\n      calcPath.clear();\n      calcTile=null;\n      totalCalcs++;\n      break;\n    }\n    calcCount++;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 241,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1982,
        "startLineNumber" : 85,
        "startColumnNumber" : 23,
        "endLineNumber" : 135,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (calcTile == null) {\n    Vars.spawner.eachGroundSpawn((x,y) -> calcTile=world.tile(x,y));\n    if (calcTile == null) {\n      calculating=false;\n    }\n  }\n else {\n    var field=pathfinder.getField(state.rules.waveTeam,Pathfinder.costGround,Pathfinder.fieldCore);\n    int[][] weights=field.weights;\n    for (int i=0; i < pathStep; i++) {\n      int minCost=Integer.MAX_VALUE;\n      int cx=calcTile.x, cy=calcTile.y;\n      boolean foundAny=false;\n      for (      Point2 p : Geometry.d4) {\n        int nx=cx + p.x, ny=cy + p.y;\n        Tile other=world.tile(nx,ny);\n        if (other != null && weights[nx][ny] < minCost && weights[nx][ny] != -1) {\n          minCost=weights[nx][ny];\n          calcTile=other;\n          foundAny=true;\n        }\n      }\n      if (!foundAny) {\n        calcCount=Integer.MAX_VALUE;\n        break;\n      }\n      calcPath.add(calcTile.pos());\n      if (calcTile.build instanceof       CoreBuild b && b.team == state.rules.defaultTeam) {\n        calculating=false;\n        calcCount=0;\n        path.clear();\n        path.addAll(calcPath);\n        calcPath.clear();\n        calcTile=null;\n        totalCalcs++;\n        break;\n      }\n      calcCount++;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 242,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1997,
        "startLineNumber" : 85,
        "startColumnNumber" : 8,
        "endLineNumber" : 135,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (calculating) {\n  if (calcTile == null) {\n    Vars.spawner.eachGroundSpawn((x,y) -> calcTile=world.tile(x,y));\n    if (calcTile == null) {\n      calculating=false;\n    }\n  }\n else {\n    var field=pathfinder.getField(state.rules.waveTeam,Pathfinder.costGround,Pathfinder.fieldCore);\n    int[][] weights=field.weights;\n    for (int i=0; i < pathStep; i++) {\n      int minCost=Integer.MAX_VALUE;\n      int cx=calcTile.x, cy=calcTile.y;\n      boolean foundAny=false;\n      for (      Point2 p : Geometry.d4) {\n        int nx=cx + p.x, ny=cy + p.y;\n        Tile other=world.tile(nx,ny);\n        if (other != null && weights[nx][ny] < minCost && weights[nx][ny] != -1) {\n          minCost=weights[nx][ny];\n          calcTile=other;\n          foundAny=true;\n        }\n      }\n      if (!foundAny) {\n        calcCount=Integer.MAX_VALUE;\n        break;\n      }\n      calcPath.add(calcTile.pos());\n      if (calcTile.build instanceof       CoreBuild b && b.team == state.rules.defaultTeam) {\n        calculating=false;\n        calcCount=0;\n        path.clear();\n        path.addAll(calcPath);\n        calcPath.clear();\n        calcTile=null;\n        totalCalcs++;\n        break;\n      }\n      calcCount++;\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 244,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4750,
        "startLineNumber" : 55,
        "startColumnNumber" : 24,
        "endLineNumber" : 179,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (data.team.rules().aiCoreSpawn && timer.get(timerSpawn,60 * 2.5f) && data.hasCore()) {\n    CoreBlock block=(CoreBlock)data.core().block;\n    int coreUnits=Groups.unit.count(u -> u.team == data.team && u.type == block.unitType);\n    if (!state.isEditor() && coreUnits < data.cores.size) {\n      Unit unit=block.unitType.create(data.team);\n      unit.set(data.cores.random());\n      unit.add();\n      Fx.spawn.at(unit);\n    }\n  }\n  if (!calculating && (timer.get(timerRefreshPath,3f * Time.toMinutes) || !startedCalculating) && data.hasCore()) {\n    calculating=true;\n    startedCalculating=true;\n    calcPath.clear();\n  }\n  if (calculating && calcCount >= world.width() * world.height()) {\n    calculating=false;\n    calcCount=0;\n    calcPath.clear();\n    totalCalcs++;\n  }\n  if (calculating) {\n    if (calcTile == null) {\n      Vars.spawner.eachGroundSpawn((x,y) -> calcTile=world.tile(x,y));\n      if (calcTile == null) {\n        calculating=false;\n      }\n    }\n else {\n      var field=pathfinder.getField(state.rules.waveTeam,Pathfinder.costGround,Pathfinder.fieldCore);\n      int[][] weights=field.weights;\n      for (int i=0; i < pathStep; i++) {\n        int minCost=Integer.MAX_VALUE;\n        int cx=calcTile.x, cy=calcTile.y;\n        boolean foundAny=false;\n        for (        Point2 p : Geometry.d4) {\n          int nx=cx + p.x, ny=cy + p.y;\n          Tile other=world.tile(nx,ny);\n          if (other != null && weights[nx][ny] < minCost && weights[nx][ny] != -1) {\n            minCost=weights[nx][ny];\n            calcTile=other;\n            foundAny=true;\n          }\n        }\n        if (!foundAny) {\n          calcCount=Integer.MAX_VALUE;\n          break;\n        }\n        calcPath.add(calcTile.pos());\n        if (calcTile.build instanceof         CoreBuild b && b.team == state.rules.defaultTeam) {\n          calculating=false;\n          calcCount=0;\n          path.clear();\n          path.addAll(calcPath);\n          calcPath.clear();\n          calcTile=null;\n          totalCalcs++;\n          break;\n        }\n        calcCount++;\n      }\n    }\n  }\n  if (totalCalcs > 0 && data.blocks.isEmpty() && timer.get(timerStep,Mathf.lerp(20f,4f,data.team.rules().aiTier))) {\n    if (!triedWalls) {\n      tryWalls();\n      triedWalls=true;\n    }\n    for (int i=0; i < attempts; i++) {\n      int range=150;\n      Position pos=randomPosition();\n      if (pos == null)       return;\n      Tmp.v1.rnd(Mathf.random(range));\n      int wx=(int)(World.toTile(pos.getX()) + Tmp.v1.x), wy=(int)(World.toTile(pos.getY()) + Tmp.v1.y);\n      Tile tile=world.tiles.getc(wx,wy);\n      if (spawner.getSpawns().contains(t -> t.within(tile,tilesize * 40f))) {\n        continue;\n      }\n      Seq<BasePart> parts=null;\n      if (tile.drop() != null && Vars.bases.forResource(tile.drop()).any()) {\n        parts=Vars.bases.forResource(tile.drop());\n      }\n else       if (Mathf.chance(emptyChance)) {\n        parts=Vars.bases.parts;\n      }\n      if (parts != null) {\n        BasePart part=parts.random();\n        if (tryPlace(part,tile.x,tile.y)) {\n          break;\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 634,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4770,
        "startLineNumber" : 55,
        "startColumnNumber" : 4,
        "endLineNumber" : 179,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void update(){\n  if (data.team.rules().aiCoreSpawn && timer.get(timerSpawn,60 * 2.5f) && data.hasCore()) {\n    CoreBlock block=(CoreBlock)data.core().block;\n    int coreUnits=Groups.unit.count(u -> u.team == data.team && u.type == block.unitType);\n    if (!state.isEditor() && coreUnits < data.cores.size) {\n      Unit unit=block.unitType.create(data.team);\n      unit.set(data.cores.random());\n      unit.add();\n      Fx.spawn.at(unit);\n    }\n  }\n  if (!calculating && (timer.get(timerRefreshPath,3f * Time.toMinutes) || !startedCalculating) && data.hasCore()) {\n    calculating=true;\n    startedCalculating=true;\n    calcPath.clear();\n  }\n  if (calculating && calcCount >= world.width() * world.height()) {\n    calculating=false;\n    calcCount=0;\n    calcPath.clear();\n    totalCalcs++;\n  }\n  if (calculating) {\n    if (calcTile == null) {\n      Vars.spawner.eachGroundSpawn((x,y) -> calcTile=world.tile(x,y));\n      if (calcTile == null) {\n        calculating=false;\n      }\n    }\n else {\n      var field=pathfinder.getField(state.rules.waveTeam,Pathfinder.costGround,Pathfinder.fieldCore);\n      int[][] weights=field.weights;\n      for (int i=0; i < pathStep; i++) {\n        int minCost=Integer.MAX_VALUE;\n        int cx=calcTile.x, cy=calcTile.y;\n        boolean foundAny=false;\n        for (        Point2 p : Geometry.d4) {\n          int nx=cx + p.x, ny=cy + p.y;\n          Tile other=world.tile(nx,ny);\n          if (other != null && weights[nx][ny] < minCost && weights[nx][ny] != -1) {\n            minCost=weights[nx][ny];\n            calcTile=other;\n            foundAny=true;\n          }\n        }\n        if (!foundAny) {\n          calcCount=Integer.MAX_VALUE;\n          break;\n        }\n        calcPath.add(calcTile.pos());\n        if (calcTile.build instanceof         CoreBuild b && b.team == state.rules.defaultTeam) {\n          calculating=false;\n          calcCount=0;\n          path.clear();\n          path.addAll(calcPath);\n          calcPath.clear();\n          calcTile=null;\n          totalCalcs++;\n          break;\n        }\n        calcCount++;\n      }\n    }\n  }\n  if (totalCalcs > 0 && data.blocks.isEmpty() && timer.get(timerStep,Mathf.lerp(20f,4f,data.team.rules().aiTier))) {\n    if (!triedWalls) {\n      tryWalls();\n      triedWalls=true;\n    }\n    for (int i=0; i < attempts; i++) {\n      int range=150;\n      Position pos=randomPosition();\n      if (pos == null)       return;\n      Tmp.v1.rnd(Mathf.random(range));\n      int wx=(int)(World.toTile(pos.getX()) + Tmp.v1.x), wy=(int)(World.toTile(pos.getY()) + Tmp.v1.y);\n      Tile tile=world.tiles.getc(wx,wy);\n      if (spawner.getSpawns().contains(t -> t.within(tile,tilesize * 40f))) {\n        continue;\n      }\n      Seq<BasePart> parts=null;\n      if (tile.drop() != null && Vars.bases.forResource(tile.drop()).any()) {\n        parts=Vars.bases.forResource(tile.drop());\n      }\n else       if (Mathf.chance(emptyChance)) {\n        parts=Vars.bases.parts;\n      }\n      if (parts != null) {\n        BasePart part=parts.random();\n        if (tryPlace(part,tile.x,tile.y)) {\n          break;\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 638,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 89,
        "startColumnNumber" : 20,
        "endLineNumber" : 89,
        "endColumnNumber" : 40
      },
      "nodeContext" : "calculating=false;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "boolean"
  }, {
    "nodeContext" : "false",
    "nodeType" : "BooleanLiteral",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 98,
      "startColumnNumber" : 39,
      "endLineNumber" : 98,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 98,
        "startColumnNumber" : 28,
        "endLineNumber" : 98,
        "endColumnNumber" : 44
      },
      "nodeContext" : "foundAny=false",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 98,
        "startColumnNumber" : 20,
        "endLineNumber" : 98,
        "endColumnNumber" : 45
      },
      "nodeContext" : "boolean foundAny=false;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1506,
        "startLineNumber" : 95,
        "startColumnNumber" : 49,
        "endLineNumber" : 133,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  int minCost=Integer.MAX_VALUE;\n  int cx=calcTile.x, cy=calcTile.y;\n  boolean foundAny=false;\n  for (  Point2 p : Geometry.d4) {\n    int nx=cx + p.x, ny=cy + p.y;\n    Tile other=world.tile(nx,ny);\n    if (other != null && weights[nx][ny] < minCost && weights[nx][ny] != -1) {\n      minCost=weights[nx][ny];\n      calcTile=other;\n      foundAny=true;\n    }\n  }\n  if (!foundAny) {\n    calcCount=Integer.MAX_VALUE;\n    break;\n  }\n  calcPath.add(calcTile.pos());\n  if (calcTile.build instanceof   CoreBuild b && b.team == state.rules.defaultTeam) {\n    calculating=false;\n    calcCount=0;\n    path.clear();\n    path.addAll(calcPath);\n    calcPath.clear();\n    calcTile=null;\n    totalCalcs++;\n    break;\n  }\n  calcCount++;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 168,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1539,
        "startLineNumber" : 95,
        "startColumnNumber" : 16,
        "endLineNumber" : 133,
        "endColumnNumber" : 17
      },
      "nodeContext" : "for (int i=0; i < pathStep; i++) {\n  int minCost=Integer.MAX_VALUE;\n  int cx=calcTile.x, cy=calcTile.y;\n  boolean foundAny=false;\n  for (  Point2 p : Geometry.d4) {\n    int nx=cx + p.x, ny=cy + p.y;\n    Tile other=world.tile(nx,ny);\n    if (other != null && weights[nx][ny] < minCost && weights[nx][ny] != -1) {\n      minCost=weights[nx][ny];\n      calcTile=other;\n      foundAny=true;\n    }\n  }\n  if (!foundAny) {\n    calcCount=Integer.MAX_VALUE;\n    break;\n  }\n  calcPath.add(calcTile.pos());\n  if (calcTile.build instanceof   CoreBuild b && b.team == state.rules.defaultTeam) {\n    calculating=false;\n    calcCount=0;\n    path.clear();\n    path.addAll(calcPath);\n    calcPath.clear();\n    calcTile=null;\n    totalCalcs++;\n    break;\n  }\n  calcCount++;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 179,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1737,
        "startLineNumber" : 91,
        "startColumnNumber" : 17,
        "endLineNumber" : 134,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  var field=pathfinder.getField(state.rules.waveTeam,Pathfinder.costGround,Pathfinder.fieldCore);\n  int[][] weights=field.weights;\n  for (int i=0; i < pathStep; i++) {\n    int minCost=Integer.MAX_VALUE;\n    int cx=calcTile.x, cy=calcTile.y;\n    boolean foundAny=false;\n    for (    Point2 p : Geometry.d4) {\n      int nx=cx + p.x, ny=cy + p.y;\n      Tile other=world.tile(nx,ny);\n      if (other != null && weights[nx][ny] < minCost && weights[nx][ny] != -1) {\n        minCost=weights[nx][ny];\n        calcTile=other;\n        foundAny=true;\n      }\n    }\n    if (!foundAny) {\n      calcCount=Integer.MAX_VALUE;\n      break;\n    }\n    calcPath.add(calcTile.pos());\n    if (calcTile.build instanceof     CoreBuild b && b.team == state.rules.defaultTeam) {\n      calculating=false;\n      calcCount=0;\n      path.clear();\n      path.addAll(calcPath);\n      calcPath.clear();\n      calcTile=null;\n      totalCalcs++;\n      break;\n    }\n    calcCount++;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 209,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1958,
        "startLineNumber" : 86,
        "startColumnNumber" : 12,
        "endLineNumber" : 134,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (calcTile == null) {\n  Vars.spawner.eachGroundSpawn((x,y) -> calcTile=world.tile(x,y));\n  if (calcTile == null) {\n    calculating=false;\n  }\n}\n else {\n  var field=pathfinder.getField(state.rules.waveTeam,Pathfinder.costGround,Pathfinder.fieldCore);\n  int[][] weights=field.weights;\n  for (int i=0; i < pathStep; i++) {\n    int minCost=Integer.MAX_VALUE;\n    int cx=calcTile.x, cy=calcTile.y;\n    boolean foundAny=false;\n    for (    Point2 p : Geometry.d4) {\n      int nx=cx + p.x, ny=cy + p.y;\n      Tile other=world.tile(nx,ny);\n      if (other != null && weights[nx][ny] < minCost && weights[nx][ny] != -1) {\n        minCost=weights[nx][ny];\n        calcTile=other;\n        foundAny=true;\n      }\n    }\n    if (!foundAny) {\n      calcCount=Integer.MAX_VALUE;\n      break;\n    }\n    calcPath.add(calcTile.pos());\n    if (calcTile.build instanceof     CoreBuild b && b.team == state.rules.defaultTeam) {\n      calculating=false;\n      calcCount=0;\n      path.clear();\n      path.addAll(calcPath);\n      calcPath.clear();\n      calcTile=null;\n      totalCalcs++;\n      break;\n    }\n    calcCount++;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 241,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1982,
        "startLineNumber" : 85,
        "startColumnNumber" : 23,
        "endLineNumber" : 135,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (calcTile == null) {\n    Vars.spawner.eachGroundSpawn((x,y) -> calcTile=world.tile(x,y));\n    if (calcTile == null) {\n      calculating=false;\n    }\n  }\n else {\n    var field=pathfinder.getField(state.rules.waveTeam,Pathfinder.costGround,Pathfinder.fieldCore);\n    int[][] weights=field.weights;\n    for (int i=0; i < pathStep; i++) {\n      int minCost=Integer.MAX_VALUE;\n      int cx=calcTile.x, cy=calcTile.y;\n      boolean foundAny=false;\n      for (      Point2 p : Geometry.d4) {\n        int nx=cx + p.x, ny=cy + p.y;\n        Tile other=world.tile(nx,ny);\n        if (other != null && weights[nx][ny] < minCost && weights[nx][ny] != -1) {\n          minCost=weights[nx][ny];\n          calcTile=other;\n          foundAny=true;\n        }\n      }\n      if (!foundAny) {\n        calcCount=Integer.MAX_VALUE;\n        break;\n      }\n      calcPath.add(calcTile.pos());\n      if (calcTile.build instanceof       CoreBuild b && b.team == state.rules.defaultTeam) {\n        calculating=false;\n        calcCount=0;\n        path.clear();\n        path.addAll(calcPath);\n        calcPath.clear();\n        calcTile=null;\n        totalCalcs++;\n        break;\n      }\n      calcCount++;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 242,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1997,
        "startLineNumber" : 85,
        "startColumnNumber" : 8,
        "endLineNumber" : 135,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (calculating) {\n  if (calcTile == null) {\n    Vars.spawner.eachGroundSpawn((x,y) -> calcTile=world.tile(x,y));\n    if (calcTile == null) {\n      calculating=false;\n    }\n  }\n else {\n    var field=pathfinder.getField(state.rules.waveTeam,Pathfinder.costGround,Pathfinder.fieldCore);\n    int[][] weights=field.weights;\n    for (int i=0; i < pathStep; i++) {\n      int minCost=Integer.MAX_VALUE;\n      int cx=calcTile.x, cy=calcTile.y;\n      boolean foundAny=false;\n      for (      Point2 p : Geometry.d4) {\n        int nx=cx + p.x, ny=cy + p.y;\n        Tile other=world.tile(nx,ny);\n        if (other != null && weights[nx][ny] < minCost && weights[nx][ny] != -1) {\n          minCost=weights[nx][ny];\n          calcTile=other;\n          foundAny=true;\n        }\n      }\n      if (!foundAny) {\n        calcCount=Integer.MAX_VALUE;\n        break;\n      }\n      calcPath.add(calcTile.pos());\n      if (calcTile.build instanceof       CoreBuild b && b.team == state.rules.defaultTeam) {\n        calculating=false;\n        calcCount=0;\n        path.clear();\n        path.addAll(calcPath);\n        calcPath.clear();\n        calcTile=null;\n        totalCalcs++;\n        break;\n      }\n      calcCount++;\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 244,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4750,
        "startLineNumber" : 55,
        "startColumnNumber" : 24,
        "endLineNumber" : 179,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (data.team.rules().aiCoreSpawn && timer.get(timerSpawn,60 * 2.5f) && data.hasCore()) {\n    CoreBlock block=(CoreBlock)data.core().block;\n    int coreUnits=Groups.unit.count(u -> u.team == data.team && u.type == block.unitType);\n    if (!state.isEditor() && coreUnits < data.cores.size) {\n      Unit unit=block.unitType.create(data.team);\n      unit.set(data.cores.random());\n      unit.add();\n      Fx.spawn.at(unit);\n    }\n  }\n  if (!calculating && (timer.get(timerRefreshPath,3f * Time.toMinutes) || !startedCalculating) && data.hasCore()) {\n    calculating=true;\n    startedCalculating=true;\n    calcPath.clear();\n  }\n  if (calculating && calcCount >= world.width() * world.height()) {\n    calculating=false;\n    calcCount=0;\n    calcPath.clear();\n    totalCalcs++;\n  }\n  if (calculating) {\n    if (calcTile == null) {\n      Vars.spawner.eachGroundSpawn((x,y) -> calcTile=world.tile(x,y));\n      if (calcTile == null) {\n        calculating=false;\n      }\n    }\n else {\n      var field=pathfinder.getField(state.rules.waveTeam,Pathfinder.costGround,Pathfinder.fieldCore);\n      int[][] weights=field.weights;\n      for (int i=0; i < pathStep; i++) {\n        int minCost=Integer.MAX_VALUE;\n        int cx=calcTile.x, cy=calcTile.y;\n        boolean foundAny=false;\n        for (        Point2 p : Geometry.d4) {\n          int nx=cx + p.x, ny=cy + p.y;\n          Tile other=world.tile(nx,ny);\n          if (other != null && weights[nx][ny] < minCost && weights[nx][ny] != -1) {\n            minCost=weights[nx][ny];\n            calcTile=other;\n            foundAny=true;\n          }\n        }\n        if (!foundAny) {\n          calcCount=Integer.MAX_VALUE;\n          break;\n        }\n        calcPath.add(calcTile.pos());\n        if (calcTile.build instanceof         CoreBuild b && b.team == state.rules.defaultTeam) {\n          calculating=false;\n          calcCount=0;\n          path.clear();\n          path.addAll(calcPath);\n          calcPath.clear();\n          calcTile=null;\n          totalCalcs++;\n          break;\n        }\n        calcCount++;\n      }\n    }\n  }\n  if (totalCalcs > 0 && data.blocks.isEmpty() && timer.get(timerStep,Mathf.lerp(20f,4f,data.team.rules().aiTier))) {\n    if (!triedWalls) {\n      tryWalls();\n      triedWalls=true;\n    }\n    for (int i=0; i < attempts; i++) {\n      int range=150;\n      Position pos=randomPosition();\n      if (pos == null)       return;\n      Tmp.v1.rnd(Mathf.random(range));\n      int wx=(int)(World.toTile(pos.getX()) + Tmp.v1.x), wy=(int)(World.toTile(pos.getY()) + Tmp.v1.y);\n      Tile tile=world.tiles.getc(wx,wy);\n      if (spawner.getSpawns().contains(t -> t.within(tile,tilesize * 40f))) {\n        continue;\n      }\n      Seq<BasePart> parts=null;\n      if (tile.drop() != null && Vars.bases.forResource(tile.drop()).any()) {\n        parts=Vars.bases.forResource(tile.drop());\n      }\n else       if (Mathf.chance(emptyChance)) {\n        parts=Vars.bases.parts;\n      }\n      if (parts != null) {\n        BasePart part=parts.random();\n        if (tryPlace(part,tile.x,tile.y)) {\n          break;\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 634,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4770,
        "startLineNumber" : 55,
        "startColumnNumber" : 4,
        "endLineNumber" : 179,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void update(){\n  if (data.team.rules().aiCoreSpawn && timer.get(timerSpawn,60 * 2.5f) && data.hasCore()) {\n    CoreBlock block=(CoreBlock)data.core().block;\n    int coreUnits=Groups.unit.count(u -> u.team == data.team && u.type == block.unitType);\n    if (!state.isEditor() && coreUnits < data.cores.size) {\n      Unit unit=block.unitType.create(data.team);\n      unit.set(data.cores.random());\n      unit.add();\n      Fx.spawn.at(unit);\n    }\n  }\n  if (!calculating && (timer.get(timerRefreshPath,3f * Time.toMinutes) || !startedCalculating) && data.hasCore()) {\n    calculating=true;\n    startedCalculating=true;\n    calcPath.clear();\n  }\n  if (calculating && calcCount >= world.width() * world.height()) {\n    calculating=false;\n    calcCount=0;\n    calcPath.clear();\n    totalCalcs++;\n  }\n  if (calculating) {\n    if (calcTile == null) {\n      Vars.spawner.eachGroundSpawn((x,y) -> calcTile=world.tile(x,y));\n      if (calcTile == null) {\n        calculating=false;\n      }\n    }\n else {\n      var field=pathfinder.getField(state.rules.waveTeam,Pathfinder.costGround,Pathfinder.fieldCore);\n      int[][] weights=field.weights;\n      for (int i=0; i < pathStep; i++) {\n        int minCost=Integer.MAX_VALUE;\n        int cx=calcTile.x, cy=calcTile.y;\n        boolean foundAny=false;\n        for (        Point2 p : Geometry.d4) {\n          int nx=cx + p.x, ny=cy + p.y;\n          Tile other=world.tile(nx,ny);\n          if (other != null && weights[nx][ny] < minCost && weights[nx][ny] != -1) {\n            minCost=weights[nx][ny];\n            calcTile=other;\n            foundAny=true;\n          }\n        }\n        if (!foundAny) {\n          calcCount=Integer.MAX_VALUE;\n          break;\n        }\n        calcPath.add(calcTile.pos());\n        if (calcTile.build instanceof         CoreBuild b && b.team == state.rules.defaultTeam) {\n          calculating=false;\n          calcCount=0;\n          path.clear();\n          path.addAll(calcPath);\n          calcPath.clear();\n          calcTile=null;\n          totalCalcs++;\n          break;\n        }\n        calcCount++;\n      }\n    }\n  }\n  if (totalCalcs > 0 && data.blocks.isEmpty() && timer.get(timerStep,Mathf.lerp(20f,4f,data.team.rules().aiTier))) {\n    if (!triedWalls) {\n      tryWalls();\n      triedWalls=true;\n    }\n    for (int i=0; i < attempts; i++) {\n      int range=150;\n      Position pos=randomPosition();\n      if (pos == null)       return;\n      Tmp.v1.rnd(Mathf.random(range));\n      int wx=(int)(World.toTile(pos.getX()) + Tmp.v1.x), wy=(int)(World.toTile(pos.getY()) + Tmp.v1.y);\n      Tile tile=world.tiles.getc(wx,wy);\n      if (spawner.getSpawns().contains(t -> t.within(tile,tilesize * 40f))) {\n        continue;\n      }\n      Seq<BasePart> parts=null;\n      if (tile.drop() != null && Vars.bases.forResource(tile.drop()).any()) {\n        parts=Vars.bases.forResource(tile.drop());\n      }\n else       if (Mathf.chance(emptyChance)) {\n        parts=Vars.bases.parts;\n      }\n      if (parts != null) {\n        BasePart part=parts.random();\n        if (tryPlace(part,tile.x,tile.y)) {\n          break;\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 638,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 98,
        "startColumnNumber" : 20,
        "endLineNumber" : 98,
        "endColumnNumber" : 45
      },
      "nodeContext" : "boolean foundAny=false;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "boolean"
  }, {
    "nodeContext" : "false",
    "nodeType" : "BooleanLiteral",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 121,
      "startColumnNumber" : 38,
      "endLineNumber" : 121,
      "endColumnNumber" : 43
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 121,
        "startColumnNumber" : 24,
        "endLineNumber" : 121,
        "endColumnNumber" : 43
      },
      "nodeContext" : "calculating=false",
      "nodeType" : "Assignment",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 121,
        "startColumnNumber" : 24,
        "endLineNumber" : 121,
        "endColumnNumber" : 44
      },
      "nodeContext" : "calculating=false;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 412,
        "startLineNumber" : 119,
        "startColumnNumber" : 98,
        "endLineNumber" : 130,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  calculating=false;\n  calcCount=0;\n  path.clear();\n  path.addAll(calcPath);\n  calcPath.clear();\n  calcTile=null;\n  totalCalcs++;\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 30,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 490,
        "startLineNumber" : 119,
        "startColumnNumber" : 20,
        "endLineNumber" : 130,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (calcTile.build instanceof CoreBuild b && b.team == state.rules.defaultTeam) {\n  calculating=false;\n  calcCount=0;\n  path.clear();\n  path.addAll(calcPath);\n  calcPath.clear();\n  calcTile=null;\n  totalCalcs++;\n  break;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 49,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1506,
        "startLineNumber" : 95,
        "startColumnNumber" : 49,
        "endLineNumber" : 133,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  int minCost=Integer.MAX_VALUE;\n  int cx=calcTile.x, cy=calcTile.y;\n  boolean foundAny=false;\n  for (  Point2 p : Geometry.d4) {\n    int nx=cx + p.x, ny=cy + p.y;\n    Tile other=world.tile(nx,ny);\n    if (other != null && weights[nx][ny] < minCost && weights[nx][ny] != -1) {\n      minCost=weights[nx][ny];\n      calcTile=other;\n      foundAny=true;\n    }\n  }\n  if (!foundAny) {\n    calcCount=Integer.MAX_VALUE;\n    break;\n  }\n  calcPath.add(calcTile.pos());\n  if (calcTile.build instanceof   CoreBuild b && b.team == state.rules.defaultTeam) {\n    calculating=false;\n    calcCount=0;\n    path.clear();\n    path.addAll(calcPath);\n    calcPath.clear();\n    calcTile=null;\n    totalCalcs++;\n    break;\n  }\n  calcCount++;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 168,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1539,
        "startLineNumber" : 95,
        "startColumnNumber" : 16,
        "endLineNumber" : 133,
        "endColumnNumber" : 17
      },
      "nodeContext" : "for (int i=0; i < pathStep; i++) {\n  int minCost=Integer.MAX_VALUE;\n  int cx=calcTile.x, cy=calcTile.y;\n  boolean foundAny=false;\n  for (  Point2 p : Geometry.d4) {\n    int nx=cx + p.x, ny=cy + p.y;\n    Tile other=world.tile(nx,ny);\n    if (other != null && weights[nx][ny] < minCost && weights[nx][ny] != -1) {\n      minCost=weights[nx][ny];\n      calcTile=other;\n      foundAny=true;\n    }\n  }\n  if (!foundAny) {\n    calcCount=Integer.MAX_VALUE;\n    break;\n  }\n  calcPath.add(calcTile.pos());\n  if (calcTile.build instanceof   CoreBuild b && b.team == state.rules.defaultTeam) {\n    calculating=false;\n    calcCount=0;\n    path.clear();\n    path.addAll(calcPath);\n    calcPath.clear();\n    calcTile=null;\n    totalCalcs++;\n    break;\n  }\n  calcCount++;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 179,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1737,
        "startLineNumber" : 91,
        "startColumnNumber" : 17,
        "endLineNumber" : 134,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  var field=pathfinder.getField(state.rules.waveTeam,Pathfinder.costGround,Pathfinder.fieldCore);\n  int[][] weights=field.weights;\n  for (int i=0; i < pathStep; i++) {\n    int minCost=Integer.MAX_VALUE;\n    int cx=calcTile.x, cy=calcTile.y;\n    boolean foundAny=false;\n    for (    Point2 p : Geometry.d4) {\n      int nx=cx + p.x, ny=cy + p.y;\n      Tile other=world.tile(nx,ny);\n      if (other != null && weights[nx][ny] < minCost && weights[nx][ny] != -1) {\n        minCost=weights[nx][ny];\n        calcTile=other;\n        foundAny=true;\n      }\n    }\n    if (!foundAny) {\n      calcCount=Integer.MAX_VALUE;\n      break;\n    }\n    calcPath.add(calcTile.pos());\n    if (calcTile.build instanceof     CoreBuild b && b.team == state.rules.defaultTeam) {\n      calculating=false;\n      calcCount=0;\n      path.clear();\n      path.addAll(calcPath);\n      calcPath.clear();\n      calcTile=null;\n      totalCalcs++;\n      break;\n    }\n    calcCount++;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 209,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1958,
        "startLineNumber" : 86,
        "startColumnNumber" : 12,
        "endLineNumber" : 134,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (calcTile == null) {\n  Vars.spawner.eachGroundSpawn((x,y) -> calcTile=world.tile(x,y));\n  if (calcTile == null) {\n    calculating=false;\n  }\n}\n else {\n  var field=pathfinder.getField(state.rules.waveTeam,Pathfinder.costGround,Pathfinder.fieldCore);\n  int[][] weights=field.weights;\n  for (int i=0; i < pathStep; i++) {\n    int minCost=Integer.MAX_VALUE;\n    int cx=calcTile.x, cy=calcTile.y;\n    boolean foundAny=false;\n    for (    Point2 p : Geometry.d4) {\n      int nx=cx + p.x, ny=cy + p.y;\n      Tile other=world.tile(nx,ny);\n      if (other != null && weights[nx][ny] < minCost && weights[nx][ny] != -1) {\n        minCost=weights[nx][ny];\n        calcTile=other;\n        foundAny=true;\n      }\n    }\n    if (!foundAny) {\n      calcCount=Integer.MAX_VALUE;\n      break;\n    }\n    calcPath.add(calcTile.pos());\n    if (calcTile.build instanceof     CoreBuild b && b.team == state.rules.defaultTeam) {\n      calculating=false;\n      calcCount=0;\n      path.clear();\n      path.addAll(calcPath);\n      calcPath.clear();\n      calcTile=null;\n      totalCalcs++;\n      break;\n    }\n    calcCount++;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 241,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1982,
        "startLineNumber" : 85,
        "startColumnNumber" : 23,
        "endLineNumber" : 135,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (calcTile == null) {\n    Vars.spawner.eachGroundSpawn((x,y) -> calcTile=world.tile(x,y));\n    if (calcTile == null) {\n      calculating=false;\n    }\n  }\n else {\n    var field=pathfinder.getField(state.rules.waveTeam,Pathfinder.costGround,Pathfinder.fieldCore);\n    int[][] weights=field.weights;\n    for (int i=0; i < pathStep; i++) {\n      int minCost=Integer.MAX_VALUE;\n      int cx=calcTile.x, cy=calcTile.y;\n      boolean foundAny=false;\n      for (      Point2 p : Geometry.d4) {\n        int nx=cx + p.x, ny=cy + p.y;\n        Tile other=world.tile(nx,ny);\n        if (other != null && weights[nx][ny] < minCost && weights[nx][ny] != -1) {\n          minCost=weights[nx][ny];\n          calcTile=other;\n          foundAny=true;\n        }\n      }\n      if (!foundAny) {\n        calcCount=Integer.MAX_VALUE;\n        break;\n      }\n      calcPath.add(calcTile.pos());\n      if (calcTile.build instanceof       CoreBuild b && b.team == state.rules.defaultTeam) {\n        calculating=false;\n        calcCount=0;\n        path.clear();\n        path.addAll(calcPath);\n        calcPath.clear();\n        calcTile=null;\n        totalCalcs++;\n        break;\n      }\n      calcCount++;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 242,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1997,
        "startLineNumber" : 85,
        "startColumnNumber" : 8,
        "endLineNumber" : 135,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (calculating) {\n  if (calcTile == null) {\n    Vars.spawner.eachGroundSpawn((x,y) -> calcTile=world.tile(x,y));\n    if (calcTile == null) {\n      calculating=false;\n    }\n  }\n else {\n    var field=pathfinder.getField(state.rules.waveTeam,Pathfinder.costGround,Pathfinder.fieldCore);\n    int[][] weights=field.weights;\n    for (int i=0; i < pathStep; i++) {\n      int minCost=Integer.MAX_VALUE;\n      int cx=calcTile.x, cy=calcTile.y;\n      boolean foundAny=false;\n      for (      Point2 p : Geometry.d4) {\n        int nx=cx + p.x, ny=cy + p.y;\n        Tile other=world.tile(nx,ny);\n        if (other != null && weights[nx][ny] < minCost && weights[nx][ny] != -1) {\n          minCost=weights[nx][ny];\n          calcTile=other;\n          foundAny=true;\n        }\n      }\n      if (!foundAny) {\n        calcCount=Integer.MAX_VALUE;\n        break;\n      }\n      calcPath.add(calcTile.pos());\n      if (calcTile.build instanceof       CoreBuild b && b.team == state.rules.defaultTeam) {\n        calculating=false;\n        calcCount=0;\n        path.clear();\n        path.addAll(calcPath);\n        calcPath.clear();\n        calcTile=null;\n        totalCalcs++;\n        break;\n      }\n      calcCount++;\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 244,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4750,
        "startLineNumber" : 55,
        "startColumnNumber" : 24,
        "endLineNumber" : 179,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (data.team.rules().aiCoreSpawn && timer.get(timerSpawn,60 * 2.5f) && data.hasCore()) {\n    CoreBlock block=(CoreBlock)data.core().block;\n    int coreUnits=Groups.unit.count(u -> u.team == data.team && u.type == block.unitType);\n    if (!state.isEditor() && coreUnits < data.cores.size) {\n      Unit unit=block.unitType.create(data.team);\n      unit.set(data.cores.random());\n      unit.add();\n      Fx.spawn.at(unit);\n    }\n  }\n  if (!calculating && (timer.get(timerRefreshPath,3f * Time.toMinutes) || !startedCalculating) && data.hasCore()) {\n    calculating=true;\n    startedCalculating=true;\n    calcPath.clear();\n  }\n  if (calculating && calcCount >= world.width() * world.height()) {\n    calculating=false;\n    calcCount=0;\n    calcPath.clear();\n    totalCalcs++;\n  }\n  if (calculating) {\n    if (calcTile == null) {\n      Vars.spawner.eachGroundSpawn((x,y) -> calcTile=world.tile(x,y));\n      if (calcTile == null) {\n        calculating=false;\n      }\n    }\n else {\n      var field=pathfinder.getField(state.rules.waveTeam,Pathfinder.costGround,Pathfinder.fieldCore);\n      int[][] weights=field.weights;\n      for (int i=0; i < pathStep; i++) {\n        int minCost=Integer.MAX_VALUE;\n        int cx=calcTile.x, cy=calcTile.y;\n        boolean foundAny=false;\n        for (        Point2 p : Geometry.d4) {\n          int nx=cx + p.x, ny=cy + p.y;\n          Tile other=world.tile(nx,ny);\n          if (other != null && weights[nx][ny] < minCost && weights[nx][ny] != -1) {\n            minCost=weights[nx][ny];\n            calcTile=other;\n            foundAny=true;\n          }\n        }\n        if (!foundAny) {\n          calcCount=Integer.MAX_VALUE;\n          break;\n        }\n        calcPath.add(calcTile.pos());\n        if (calcTile.build instanceof         CoreBuild b && b.team == state.rules.defaultTeam) {\n          calculating=false;\n          calcCount=0;\n          path.clear();\n          path.addAll(calcPath);\n          calcPath.clear();\n          calcTile=null;\n          totalCalcs++;\n          break;\n        }\n        calcCount++;\n      }\n    }\n  }\n  if (totalCalcs > 0 && data.blocks.isEmpty() && timer.get(timerStep,Mathf.lerp(20f,4f,data.team.rules().aiTier))) {\n    if (!triedWalls) {\n      tryWalls();\n      triedWalls=true;\n    }\n    for (int i=0; i < attempts; i++) {\n      int range=150;\n      Position pos=randomPosition();\n      if (pos == null)       return;\n      Tmp.v1.rnd(Mathf.random(range));\n      int wx=(int)(World.toTile(pos.getX()) + Tmp.v1.x), wy=(int)(World.toTile(pos.getY()) + Tmp.v1.y);\n      Tile tile=world.tiles.getc(wx,wy);\n      if (spawner.getSpawns().contains(t -> t.within(tile,tilesize * 40f))) {\n        continue;\n      }\n      Seq<BasePart> parts=null;\n      if (tile.drop() != null && Vars.bases.forResource(tile.drop()).any()) {\n        parts=Vars.bases.forResource(tile.drop());\n      }\n else       if (Mathf.chance(emptyChance)) {\n        parts=Vars.bases.parts;\n      }\n      if (parts != null) {\n        BasePart part=parts.random();\n        if (tryPlace(part,tile.x,tile.y)) {\n          break;\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 634,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4770,
        "startLineNumber" : 55,
        "startColumnNumber" : 4,
        "endLineNumber" : 179,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void update(){\n  if (data.team.rules().aiCoreSpawn && timer.get(timerSpawn,60 * 2.5f) && data.hasCore()) {\n    CoreBlock block=(CoreBlock)data.core().block;\n    int coreUnits=Groups.unit.count(u -> u.team == data.team && u.type == block.unitType);\n    if (!state.isEditor() && coreUnits < data.cores.size) {\n      Unit unit=block.unitType.create(data.team);\n      unit.set(data.cores.random());\n      unit.add();\n      Fx.spawn.at(unit);\n    }\n  }\n  if (!calculating && (timer.get(timerRefreshPath,3f * Time.toMinutes) || !startedCalculating) && data.hasCore()) {\n    calculating=true;\n    startedCalculating=true;\n    calcPath.clear();\n  }\n  if (calculating && calcCount >= world.width() * world.height()) {\n    calculating=false;\n    calcCount=0;\n    calcPath.clear();\n    totalCalcs++;\n  }\n  if (calculating) {\n    if (calcTile == null) {\n      Vars.spawner.eachGroundSpawn((x,y) -> calcTile=world.tile(x,y));\n      if (calcTile == null) {\n        calculating=false;\n      }\n    }\n else {\n      var field=pathfinder.getField(state.rules.waveTeam,Pathfinder.costGround,Pathfinder.fieldCore);\n      int[][] weights=field.weights;\n      for (int i=0; i < pathStep; i++) {\n        int minCost=Integer.MAX_VALUE;\n        int cx=calcTile.x, cy=calcTile.y;\n        boolean foundAny=false;\n        for (        Point2 p : Geometry.d4) {\n          int nx=cx + p.x, ny=cy + p.y;\n          Tile other=world.tile(nx,ny);\n          if (other != null && weights[nx][ny] < minCost && weights[nx][ny] != -1) {\n            minCost=weights[nx][ny];\n            calcTile=other;\n            foundAny=true;\n          }\n        }\n        if (!foundAny) {\n          calcCount=Integer.MAX_VALUE;\n          break;\n        }\n        calcPath.add(calcTile.pos());\n        if (calcTile.build instanceof         CoreBuild b && b.team == state.rules.defaultTeam) {\n          calculating=false;\n          calcCount=0;\n          path.clear();\n          path.addAll(calcPath);\n          calcPath.clear();\n          calcTile=null;\n          totalCalcs++;\n          break;\n        }\n        calcCount++;\n      }\n    }\n  }\n  if (totalCalcs > 0 && data.blocks.isEmpty() && timer.get(timerStep,Mathf.lerp(20f,4f,data.team.rules().aiTier))) {\n    if (!triedWalls) {\n      tryWalls();\n      triedWalls=true;\n    }\n    for (int i=0; i < attempts; i++) {\n      int range=150;\n      Position pos=randomPosition();\n      if (pos == null)       return;\n      Tmp.v1.rnd(Mathf.random(range));\n      int wx=(int)(World.toTile(pos.getX()) + Tmp.v1.x), wy=(int)(World.toTile(pos.getY()) + Tmp.v1.y);\n      Tile tile=world.tiles.getc(wx,wy);\n      if (spawner.getSpawns().contains(t -> t.within(tile,tilesize * 40f))) {\n        continue;\n      }\n      Seq<BasePart> parts=null;\n      if (tile.drop() != null && Vars.bases.forResource(tile.drop()).any()) {\n        parts=Vars.bases.forResource(tile.drop());\n      }\n else       if (Mathf.chance(emptyChance)) {\n        parts=Vars.bases.parts;\n      }\n      if (parts != null) {\n        BasePart part=parts.random();\n        if (tryPlace(part,tile.x,tile.y)) {\n          break;\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 638,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 121,
        "startColumnNumber" : 24,
        "endLineNumber" : 121,
        "endColumnNumber" : 44
      },
      "nodeContext" : "calculating=false;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 5,
    "startLineNumber" : 78,
    "startColumnNumber" : 26,
    "endLineNumber" : 78,
    "endColumnNumber" : 31
  }, {
    "charLength" : 5,
    "startLineNumber" : 89,
    "startColumnNumber" : 34,
    "endLineNumber" : 89,
    "endColumnNumber" : 39
  }, {
    "charLength" : 5,
    "startLineNumber" : 98,
    "startColumnNumber" : 39,
    "endLineNumber" : 98,
    "endColumnNumber" : 44
  }, {
    "charLength" : 5,
    "startLineNumber" : 121,
    "startColumnNumber" : 38,
    "endLineNumber" : 121,
    "endColumnNumber" : 43
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 10
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 4
  } ]
}