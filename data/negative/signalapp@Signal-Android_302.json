{
  "id" : 302,
  "expression" : "inputBitRate",
  "projectName" : "signalapp@Signal-Android",
  "commitID" : "7e91132e7ed62a58b5f347de252ab1eda3f43b90",
  "filePath" : "/app/src/main/java/org/thoughtcrime/securesms/video/StreamingTranscoder.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "inputBitRate",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 59,
      "startColumnNumber" : 96,
      "endLineNumber" : 59,
      "endColumnNumber" : 108
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 59,
        "startColumnNumber" : 26,
        "endLineNumber" : 59,
        "endColumnNumber" : 109
      },
      "nodeContext" : "new VideoBitRateCalculator(upperSizeLimit).getTargetQuality(duration,inputBitRate)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 105,
        "startLineNumber" : 59,
        "startColumnNumber" : 4,
        "endLineNumber" : 59,
        "endColumnNumber" : 109
      },
      "nodeContext" : "this.targetQuality=new VideoBitRateCalculator(upperSizeLimit).getTargetQuality(duration,inputBitRate)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 106,
        "startLineNumber" : 59,
        "startColumnNumber" : 4,
        "endLineNumber" : 59,
        "endColumnNumber" : 110
      },
      "nodeContext" : "this.targetQuality=new VideoBitRateCalculator(upperSizeLimit).getTargetQuality(duration,inputBitRate);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1207,
        "startLineNumber" : 44,
        "startColumnNumber" : 2,
        "endLineNumber" : 69,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  this.dataSource=dataSource;\n  this.options=options;\n  final MediaMetadataRetriever mediaMetadataRetriever=new MediaMetadataRetriever();\n  try {\n    mediaMetadataRetriever.setDataSource(dataSource);\n  }\n catch (  RuntimeException e) {\n    Log.w(TAG,\"Unable to read datasource\",e);\n    throw new VideoSourceException(\"Unable to read datasource\",e);\n  }\n  this.inSize=dataSource.getSize();\n  this.duration=getDuration(mediaMetadataRetriever);\n  this.inputBitRate=VideoBitRateCalculator.bitRate(inSize,duration);\n  this.targetQuality=new VideoBitRateCalculator(upperSizeLimit).getTargetQuality(duration,inputBitRate);\n  this.upperSizeLimit=upperSizeLimit;\n  this.transcodeRequired=inputBitRate >= targetQuality.getTargetTotalBitRate() * 1.2 || inSize > upperSizeLimit || containsLocation(mediaMetadataRetriever) || options != null;\n  if (!transcodeRequired) {\n    Log.i(TAG,\"Video is within 20% of target bitrate, below the size limit, contained no location metadata or custom options.\");\n  }\n  this.fileSizeEstimate=targetQuality.getFileSizeEstimate();\n  this.memoryFileEstimate=(long)(fileSizeEstimate * 1.1);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 146,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1554,
        "startLineNumber" : 37,
        "startColumnNumber" : 2,
        "endLineNumber" : 69,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * @param upperSizeLimit A upper size to transcode to. The actual output size can be up to 10% smaller.\n */\npublic StreamingTranscoder(@NonNull MediaDataSource dataSource,@Nullable TranscoderOptions options,long upperSizeLimit) throws IOException, VideoSourceException {\n  this.dataSource=dataSource;\n  this.options=options;\n  final MediaMetadataRetriever mediaMetadataRetriever=new MediaMetadataRetriever();\n  try {\n    mediaMetadataRetriever.setDataSource(dataSource);\n  }\n catch (  RuntimeException e) {\n    Log.w(TAG,\"Unable to read datasource\",e);\n    throw new VideoSourceException(\"Unable to read datasource\",e);\n  }\n  this.inSize=dataSource.getSize();\n  this.duration=getDuration(mediaMetadataRetriever);\n  this.inputBitRate=VideoBitRateCalculator.bitRate(inSize,duration);\n  this.targetQuality=new VideoBitRateCalculator(upperSizeLimit).getTargetQuality(duration,inputBitRate);\n  this.upperSizeLimit=upperSizeLimit;\n  this.transcodeRequired=inputBitRate >= targetQuality.getTargetTotalBitRate() * 1.2 || inSize > upperSizeLimit || containsLocation(mediaMetadataRetriever) || options != null;\n  if (!transcodeRequired) {\n    Log.i(TAG,\"Video is within 20% of target bitrate, below the size limit, contained no location metadata or custom options.\");\n  }\n  this.fileSizeEstimate=targetQuality.getFileSizeEstimate();\n  this.memoryFileEstimate=(long)(fileSizeEstimate * 1.1);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 169,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 106,
        "startLineNumber" : 59,
        "startColumnNumber" : 4,
        "endLineNumber" : 59,
        "endColumnNumber" : 110
      },
      "nodeContext" : "this.targetQuality=new VideoBitRateCalculator(upperSizeLimit).getTargetQuality(duration,inputBitRate);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "inputBitRate",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 62,
      "startColumnNumber" : 29,
      "endLineNumber" : 62,
      "endColumnNumber" : 41
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 62,
        "startColumnNumber" : 29,
        "endLineNumber" : 62,
        "endColumnNumber" : 88
      },
      "nodeContext" : "inputBitRate >= targetQuality.getTargetTotalBitRate() * 1.2",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 62,
        "startColumnNumber" : 29,
        "endLineNumber" : 62,
        "endColumnNumber" : 115
      },
      "nodeContext" : "inputBitRate >= targetQuality.getTargetTotalBitRate() * 1.2 || inSize > upperSizeLimit",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 130,
        "startLineNumber" : 62,
        "startColumnNumber" : 29,
        "endLineNumber" : 62,
        "endColumnNumber" : 159
      },
      "nodeContext" : "inputBitRate >= targetQuality.getTargetTotalBitRate() * 1.2 || inSize > upperSizeLimit || containsLocation(mediaMetadataRetriever)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 149,
        "startLineNumber" : 62,
        "startColumnNumber" : 29,
        "endLineNumber" : 62,
        "endColumnNumber" : 178
      },
      "nodeContext" : "inputBitRate >= targetQuality.getTargetTotalBitRate() * 1.2 || inSize > upperSizeLimit || containsLocation(mediaMetadataRetriever) || options != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 19,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 174,
        "startLineNumber" : 62,
        "startColumnNumber" : 4,
        "endLineNumber" : 62,
        "endColumnNumber" : 178
      },
      "nodeContext" : "this.transcodeRequired=inputBitRate >= targetQuality.getTargetTotalBitRate() * 1.2 || inSize > upperSizeLimit || containsLocation(mediaMetadataRetriever) || options != null",
      "nodeType" : "Assignment",
      "astNodeNumber" : 23,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 175,
        "startLineNumber" : 62,
        "startColumnNumber" : 4,
        "endLineNumber" : 62,
        "endColumnNumber" : 179
      },
      "nodeContext" : "this.transcodeRequired=inputBitRate >= targetQuality.getTargetTotalBitRate() * 1.2 || inSize > upperSizeLimit || containsLocation(mediaMetadataRetriever) || options != null;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 24,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1207,
        "startLineNumber" : 44,
        "startColumnNumber" : 2,
        "endLineNumber" : 69,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  this.dataSource=dataSource;\n  this.options=options;\n  final MediaMetadataRetriever mediaMetadataRetriever=new MediaMetadataRetriever();\n  try {\n    mediaMetadataRetriever.setDataSource(dataSource);\n  }\n catch (  RuntimeException e) {\n    Log.w(TAG,\"Unable to read datasource\",e);\n    throw new VideoSourceException(\"Unable to read datasource\",e);\n  }\n  this.inSize=dataSource.getSize();\n  this.duration=getDuration(mediaMetadataRetriever);\n  this.inputBitRate=VideoBitRateCalculator.bitRate(inSize,duration);\n  this.targetQuality=new VideoBitRateCalculator(upperSizeLimit).getTargetQuality(duration,inputBitRate);\n  this.upperSizeLimit=upperSizeLimit;\n  this.transcodeRequired=inputBitRate >= targetQuality.getTargetTotalBitRate() * 1.2 || inSize > upperSizeLimit || containsLocation(mediaMetadataRetriever) || options != null;\n  if (!transcodeRequired) {\n    Log.i(TAG,\"Video is within 20% of target bitrate, below the size limit, contained no location metadata or custom options.\");\n  }\n  this.fileSizeEstimate=targetQuality.getFileSizeEstimate();\n  this.memoryFileEstimate=(long)(fileSizeEstimate * 1.1);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 146,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1554,
        "startLineNumber" : 37,
        "startColumnNumber" : 2,
        "endLineNumber" : 69,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * @param upperSizeLimit A upper size to transcode to. The actual output size can be up to 10% smaller.\n */\npublic StreamingTranscoder(@NonNull MediaDataSource dataSource,@Nullable TranscoderOptions options,long upperSizeLimit) throws IOException, VideoSourceException {\n  this.dataSource=dataSource;\n  this.options=options;\n  final MediaMetadataRetriever mediaMetadataRetriever=new MediaMetadataRetriever();\n  try {\n    mediaMetadataRetriever.setDataSource(dataSource);\n  }\n catch (  RuntimeException e) {\n    Log.w(TAG,\"Unable to read datasource\",e);\n    throw new VideoSourceException(\"Unable to read datasource\",e);\n  }\n  this.inSize=dataSource.getSize();\n  this.duration=getDuration(mediaMetadataRetriever);\n  this.inputBitRate=VideoBitRateCalculator.bitRate(inSize,duration);\n  this.targetQuality=new VideoBitRateCalculator(upperSizeLimit).getTargetQuality(duration,inputBitRate);\n  this.upperSizeLimit=upperSizeLimit;\n  this.transcodeRequired=inputBitRate >= targetQuality.getTargetTotalBitRate() * 1.2 || inSize > upperSizeLimit || containsLocation(mediaMetadataRetriever) || options != null;\n  if (!transcodeRequired) {\n    Log.i(TAG,\"Video is within 20% of target bitrate, below the size limit, contained no location metadata or custom options.\");\n  }\n  this.fileSizeEstimate=targetQuality.getFileSizeEstimate();\n  this.memoryFileEstimate=(long)(fileSizeEstimate * 1.1);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 169,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 175,
        "startLineNumber" : 62,
        "startColumnNumber" : 4,
        "endLineNumber" : 62,
        "endColumnNumber" : 179
      },
      "nodeContext" : "this.transcodeRequired=inputBitRate >= targetQuality.getTargetTotalBitRate() * 1.2 || inSize > upperSizeLimit || containsLocation(mediaMetadataRetriever) || options != null;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 24,
      "astHeight" : 9
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 12,
    "startLineNumber" : 59,
    "startColumnNumber" : 96,
    "endLineNumber" : 59,
    "endColumnNumber" : 108
  }, {
    "charLength" : 12,
    "startLineNumber" : 62,
    "startColumnNumber" : 29,
    "endLineNumber" : 62,
    "endColumnNumber" : 41
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 6
  } ]
}