{
  "id" : 11,
  "expression" : "last.getEnd() + maxMergeDistanceBytes",
  "projectName" : "prestodb@presto",
  "commitID" : "eff77883d0d24dc6022ecde252612d1430c9fbac",
  "filePath" : "/presto-orc/src/main/java/com/facebook/presto/orc/OrcDataSourceUtils.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "last.getEnd() + maxMergeDistanceBytes",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 37,
      "startLineNumber" : 63,
      "startColumnNumber" : 58,
      "endLineNumber" : 63,
      "endColumnNumber" : 95
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 63,
        "startColumnNumber" : 58,
        "endLineNumber" : 63,
        "endColumnNumber" : 118
      },
      "nodeContext" : "last.getEnd() + maxMergeDistanceBytes >= current.getOffset()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 63,
        "startColumnNumber" : 16,
        "endLineNumber" : 63,
        "endColumnNumber" : 118
      },
      "nodeContext" : "merged.getLength() <= maxReadSizeBytes && last.getEnd() + maxMergeDistanceBytes >= current.getOffset()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 253,
        "startLineNumber" : 63,
        "startColumnNumber" : 12,
        "endLineNumber" : 69,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (merged.getLength() <= maxReadSizeBytes && last.getEnd() + maxMergeDistanceBytes >= current.getOffset()) {\n  last=merged;\n}\n else {\n  result.add(last);\n  last=current;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 31,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 375,
        "startLineNumber" : 60,
        "startColumnNumber" : 48,
        "endLineNumber" : 70,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  DiskRange current=ranges.get(i);\n  DiskRange merged=last.span(current);\n  if (merged.getLength() <= maxReadSizeBytes && last.getEnd() + maxMergeDistanceBytes >= current.getOffset()) {\n    last=merged;\n  }\n else {\n    result.add(last);\n    last=current;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 50,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 415,
        "startLineNumber" : 60,
        "startColumnNumber" : 8,
        "endLineNumber" : 70,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=1; i < ranges.size(); i++) {\n  DiskRange current=ranges.get(i);\n  DiskRange merged=last.span(current);\n  if (merged.getLength() <= maxReadSizeBytes && last.getEnd() + maxMergeDistanceBytes >= current.getOffset()) {\n    last=merged;\n  }\n else {\n    result.add(last);\n    last=current;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 63,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1123,
        "startLineNumber" : 43,
        "startColumnNumber" : 4,
        "endLineNumber" : 74,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<DiskRange> ranges=new ArrayList<>(diskRanges);\n  Collections.sort(ranges,new Comparator<DiskRange>(){\n    @Override public int compare(    DiskRange o1,    DiskRange o2){\n      return Long.compare(o1.getOffset(),o2.getOffset());\n    }\n  }\n);\n  long maxReadSizeBytes=maxReadSize.toBytes();\n  long maxMergeDistanceBytes=maxMergeDistance.toBytes();\n  ImmutableList.Builder<DiskRange> result=ImmutableList.builder();\n  DiskRange last=ranges.get(0);\n  for (int i=1; i < ranges.size(); i++) {\n    DiskRange current=ranges.get(i);\n    DiskRange merged=last.span(current);\n    if (merged.getLength() <= maxReadSizeBytes && last.getEnd() + maxMergeDistanceBytes >= current.getOffset()) {\n      last=merged;\n    }\n else {\n      result.add(last);\n      last=current;\n    }\n  }\n  result.add(last);\n  return result.build();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 159,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1352,
        "startLineNumber" : 39,
        "startColumnNumber" : 4,
        "endLineNumber" : 74,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Merge disk ranges that are closer than  {@code maxMergeDistance}.\n */\npublic static List<DiskRange> mergeAdjacentDiskRanges(Collection<DiskRange> diskRanges,DataSize maxMergeDistance,DataSize maxReadSize){\n  List<DiskRange> ranges=new ArrayList<>(diskRanges);\n  Collections.sort(ranges,new Comparator<DiskRange>(){\n    @Override public int compare(    DiskRange o1,    DiskRange o2){\n      return Long.compare(o1.getOffset(),o2.getOffset());\n    }\n  }\n);\n  long maxReadSizeBytes=maxReadSize.toBytes();\n  long maxMergeDistanceBytes=maxMergeDistance.toBytes();\n  ImmutableList.Builder<DiskRange> result=ImmutableList.builder();\n  DiskRange last=ranges.get(0);\n  for (int i=1; i < ranges.size(); i++) {\n    DiskRange current=ranges.get(i);\n    DiskRange merged=last.span(current);\n    if (merged.getLength() <= maxReadSizeBytes && last.getEnd() + maxMergeDistanceBytes >= current.getOffset()) {\n      last=merged;\n    }\n else {\n      result.add(last);\n      last=current;\n    }\n  }\n  result.add(last);\n  return result.build();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 184,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 63,
        "startColumnNumber" : 16,
        "endLineNumber" : 63,
        "endColumnNumber" : 118
      },
      "nodeContext" : "merged.getLength() <= maxReadSizeBytes && last.getEnd() + maxMergeDistanceBytes >= current.getOffset()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 15,
      "astHeight" : 5
    },
    "tokenLength" : 4,
    "type" : "long"
  } ],
  "positionList" : [ {
    "charLength" : 37,
    "startLineNumber" : 63,
    "startColumnNumber" : 58,
    "endLineNumber" : 63,
    "endColumnNumber" : 95
  } ],
  "layoutRelationDataList" : [ ]
}