{
  "id" : 156,
  "expression" : "AutowireUtils.resolveReturnTypeForFactoryMethod(createNamedProxyWithDuplicateTypes,new Object[]{\"enigma\",\"foo\"},getClass().getClassLoader())",
  "projectName" : "spring-projects@spring-framework",
  "commitID" : "d5dab129097f98ed3148473422eb706c20fd10c9",
  "filePath" : "/spring-beans/src/test/java/org/springframework/beans/factory/support/AutowireUtilsTests.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "AutowireUtils.resolveReturnTypeForFactoryMethod(createNamedProxyWithDuplicateTypes,new Object[]{\"enigma\",\"foo\"},getClass().getClassLoader())",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 144,
      "startLineNumber" : 55,
      "startColumnNumber" : 4,
      "endLineNumber" : 55,
      "endColumnNumber" : 148
    },
    "astNodeNumber" : 16,
    "astHeight" : 5,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 176,
        "startLineNumber" : 54,
        "startColumnNumber" : 2,
        "endLineNumber" : 55,
        "endColumnNumber" : 149
      },
      "nodeContext" : "assertEquals(String.class,AutowireUtils.resolveReturnTypeForFactoryMethod(createNamedProxyWithDuplicateTypes,new Object[]{\"enigma\",\"foo\"},getClass().getClassLoader()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 177,
        "startLineNumber" : 54,
        "startColumnNumber" : 2,
        "endLineNumber" : 55,
        "endColumnNumber" : 150
      },
      "nodeContext" : "assertEquals(String.class,AutowireUtils.resolveReturnTypeForFactoryMethod(createNamedProxyWithDuplicateTypes,new Object[]{\"enigma\",\"foo\"},getClass().getClassLoader()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 22,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3448,
        "startLineNumber" : 36,
        "startColumnNumber" : 40,
        "endLineNumber" : 85,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  Method notParameterized=ReflectionUtils.findMethod(MyTypeWithMethods.class,\"notParameterized\");\n  assertEquals(String.class,AutowireUtils.resolveReturnTypeForFactoryMethod(notParameterized,new Object[]{},getClass().getClassLoader()));\n  Method notParameterizedWithArguments=ReflectionUtils.findMethod(MyTypeWithMethods.class,\"notParameterizedWithArguments\",Integer.class,Boolean.class);\n  assertEquals(String.class,AutowireUtils.resolveReturnTypeForFactoryMethod(notParameterizedWithArguments,new Object[]{99,true},getClass().getClassLoader()));\n  Method createProxy=ReflectionUtils.findMethod(MyTypeWithMethods.class,\"createProxy\",Object.class);\n  assertEquals(String.class,AutowireUtils.resolveReturnTypeForFactoryMethod(createProxy,new Object[]{\"foo\"},getClass().getClassLoader()));\n  Method createNamedProxyWithDifferentTypes=ReflectionUtils.findMethod(MyTypeWithMethods.class,\"createNamedProxy\",String.class,Object.class);\n  assertEquals(Long.class,AutowireUtils.resolveReturnTypeForFactoryMethod(createNamedProxyWithDifferentTypes,new Object[]{\"enigma\",99L},getClass().getClassLoader()));\n  Method createNamedProxyWithDuplicateTypes=ReflectionUtils.findMethod(MyTypeWithMethods.class,\"createNamedProxy\",String.class,Object.class);\n  assertEquals(String.class,AutowireUtils.resolveReturnTypeForFactoryMethod(createNamedProxyWithDuplicateTypes,new Object[]{\"enigma\",\"foo\"},getClass().getClassLoader()));\n  Method createMock=ReflectionUtils.findMethod(MyTypeWithMethods.class,\"createMock\",Class.class);\n  assertEquals(Runnable.class,AutowireUtils.resolveReturnTypeForFactoryMethod(createMock,new Object[]{Runnable.class},getClass().getClassLoader()));\n  assertEquals(Runnable.class,AutowireUtils.resolveReturnTypeForFactoryMethod(createMock,new Object[]{Runnable.class.getName()},getClass().getClassLoader()));\n  Method createNamedMock=ReflectionUtils.findMethod(MyTypeWithMethods.class,\"createNamedMock\",String.class,Class.class);\n  assertEquals(Runnable.class,AutowireUtils.resolveReturnTypeForFactoryMethod(createNamedMock,new Object[]{\"foo\",Runnable.class},getClass().getClassLoader()));\n  Method createVMock=ReflectionUtils.findMethod(MyTypeWithMethods.class,\"createVMock\",Object.class,Class.class);\n  assertEquals(Runnable.class,AutowireUtils.resolveReturnTypeForFactoryMethod(createVMock,new Object[]{\"foo\",Runnable.class},getClass().getClassLoader()));\n  Method extractValueFrom=ReflectionUtils.findMethod(MyTypeWithMethods.class,\"extractValueFrom\",MyInterfaceType.class);\n  assertEquals(Object.class,AutowireUtils.resolveReturnTypeForFactoryMethod(extractValueFrom,new Object[]{new MySimpleInterfaceType()},getClass().getClassLoader()));\n  Map<Integer,Boolean> map=new HashMap<>();\n  map.put(0,false);\n  map.put(1,true);\n  Method extractMagicValue=ReflectionUtils.findMethod(MyTypeWithMethods.class,\"extractMagicValue\",Map.class);\n  assertEquals(Object.class,AutowireUtils.resolveReturnTypeForFactoryMethod(extractMagicValue,new Object[]{map},getClass().getClassLoader()));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 436,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3494,
        "startLineNumber" : 35,
        "startColumnNumber" : 1,
        "endLineNumber" : 85,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void genericMethodReturnTypes(){\n  Method notParameterized=ReflectionUtils.findMethod(MyTypeWithMethods.class,\"notParameterized\");\n  assertEquals(String.class,AutowireUtils.resolveReturnTypeForFactoryMethod(notParameterized,new Object[]{},getClass().getClassLoader()));\n  Method notParameterizedWithArguments=ReflectionUtils.findMethod(MyTypeWithMethods.class,\"notParameterizedWithArguments\",Integer.class,Boolean.class);\n  assertEquals(String.class,AutowireUtils.resolveReturnTypeForFactoryMethod(notParameterizedWithArguments,new Object[]{99,true},getClass().getClassLoader()));\n  Method createProxy=ReflectionUtils.findMethod(MyTypeWithMethods.class,\"createProxy\",Object.class);\n  assertEquals(String.class,AutowireUtils.resolveReturnTypeForFactoryMethod(createProxy,new Object[]{\"foo\"},getClass().getClassLoader()));\n  Method createNamedProxyWithDifferentTypes=ReflectionUtils.findMethod(MyTypeWithMethods.class,\"createNamedProxy\",String.class,Object.class);\n  assertEquals(Long.class,AutowireUtils.resolveReturnTypeForFactoryMethod(createNamedProxyWithDifferentTypes,new Object[]{\"enigma\",99L},getClass().getClassLoader()));\n  Method createNamedProxyWithDuplicateTypes=ReflectionUtils.findMethod(MyTypeWithMethods.class,\"createNamedProxy\",String.class,Object.class);\n  assertEquals(String.class,AutowireUtils.resolveReturnTypeForFactoryMethod(createNamedProxyWithDuplicateTypes,new Object[]{\"enigma\",\"foo\"},getClass().getClassLoader()));\n  Method createMock=ReflectionUtils.findMethod(MyTypeWithMethods.class,\"createMock\",Class.class);\n  assertEquals(Runnable.class,AutowireUtils.resolveReturnTypeForFactoryMethod(createMock,new Object[]{Runnable.class},getClass().getClassLoader()));\n  assertEquals(Runnable.class,AutowireUtils.resolveReturnTypeForFactoryMethod(createMock,new Object[]{Runnable.class.getName()},getClass().getClassLoader()));\n  Method createNamedMock=ReflectionUtils.findMethod(MyTypeWithMethods.class,\"createNamedMock\",String.class,Class.class);\n  assertEquals(Runnable.class,AutowireUtils.resolveReturnTypeForFactoryMethod(createNamedMock,new Object[]{\"foo\",Runnable.class},getClass().getClassLoader()));\n  Method createVMock=ReflectionUtils.findMethod(MyTypeWithMethods.class,\"createVMock\",Object.class,Class.class);\n  assertEquals(Runnable.class,AutowireUtils.resolveReturnTypeForFactoryMethod(createVMock,new Object[]{\"foo\",Runnable.class},getClass().getClassLoader()));\n  Method extractValueFrom=ReflectionUtils.findMethod(MyTypeWithMethods.class,\"extractValueFrom\",MyInterfaceType.class);\n  assertEquals(Object.class,AutowireUtils.resolveReturnTypeForFactoryMethod(extractValueFrom,new Object[]{new MySimpleInterfaceType()},getClass().getClassLoader()));\n  Map<Integer,Boolean> map=new HashMap<>();\n  map.put(0,false);\n  map.put(1,true);\n  Method extractMagicValue=ReflectionUtils.findMethod(MyTypeWithMethods.class,\"extractMagicValue\",Map.class);\n  assertEquals(Object.class,AutowireUtils.resolveReturnTypeForFactoryMethod(extractMagicValue,new Object[]{map},getClass().getClassLoader()));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 442,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 176,
        "startLineNumber" : 54,
        "startColumnNumber" : 2,
        "endLineNumber" : 55,
        "endColumnNumber" : 149
      },
      "nodeContext" : "assertEquals(String.class,AutowireUtils.resolveReturnTypeForFactoryMethod(createNamedProxyWithDuplicateTypes,new Object[]{\"enigma\",\"foo\"},getClass().getClassLoader()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 21,
      "astHeight" : 6
    },
    "tokenLength" : 8,
    "type" : "java.lang.Class<>"
  } ],
  "positionList" : [ {
    "charLength" : 144,
    "startLineNumber" : 55,
    "startColumnNumber" : 4,
    "endLineNumber" : 55,
    "endColumnNumber" : 148
  } ],
  "layoutRelationDataList" : [ ]
}