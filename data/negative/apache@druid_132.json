{
  "id" : 132,
  "expression" : "Iterables",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/sql/src/main/java/org/apache/druid/sql/calcite/rel/DruidQuery.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Iterables",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 791,
      "startColumnNumber" : 54,
      "endLineNumber" : 791,
      "endColumnNumber" : 63
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 791,
        "startColumnNumber" : 54,
        "endLineNumber" : 791,
        "endColumnNumber" : 104
      },
      "nodeContext" : "Iterables.getOnlyElement(grouping.getDimensions())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 791,
        "startColumnNumber" : 32,
        "endLineNumber" : 791,
        "endColumnNumber" : 104
      },
      "nodeContext" : "dimensionExpression=Iterables.getOnlyElement(grouping.getDimensions())",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 791,
        "startColumnNumber" : 6,
        "endLineNumber" : 791,
        "endColumnNumber" : 105
      },
      "nodeContext" : "final DimensionExpression dimensionExpression=Iterables.getOnlyElement(grouping.getDimensions());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1576,
        "startLineNumber" : 790,
        "startColumnNumber" : 53,
        "endLineNumber" : 838,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final DimensionExpression dimensionExpression=Iterables.getOnlyElement(grouping.getDimensions());\n  queryGranularity=Expressions.toQueryGranularity(dimensionExpression.getDruidExpression(),plannerContext.getExprMacroTable());\n  if (queryGranularity == null) {\n    return null;\n  }\n  theContext.put(TimeseriesQuery.CTX_TIMESTAMP_RESULT_FIELD,Iterables.getOnlyElement(grouping.getDimensions()).toDimensionSpec().getOutputName());\n  if (sorting != null) {\n    if (sorting.getOffsetLimit().hasOffset()) {\n      return null;\n    }\n    if (sorting.getOffsetLimit().hasLimit()) {\n      final long limit=sorting.getOffsetLimit().getLimit();\n      if (limit == 0) {\n        return null;\n      }\n      timeseriesLimit=Ints.checkedCast(limit);\n    }\nswitch (sorting.getSortKind(dimensionExpression.getOutputName())) {\ncase UNORDERED:case TIME_ASCENDING:      descending=false;\n    break;\ncase TIME_DESCENDING:  descending=true;\nbreak;\ndefault:return null;\n}\n}\n else {\ndescending=false;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 125,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1710,
        "startLineNumber" : 790,
        "startColumnNumber" : 11,
        "endLineNumber" : 841,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (grouping.getDimensions().size() == 1) {\n  final DimensionExpression dimensionExpression=Iterables.getOnlyElement(grouping.getDimensions());\n  queryGranularity=Expressions.toQueryGranularity(dimensionExpression.getDruidExpression(),plannerContext.getExprMacroTable());\n  if (queryGranularity == null) {\n    return null;\n  }\n  theContext.put(TimeseriesQuery.CTX_TIMESTAMP_RESULT_FIELD,Iterables.getOnlyElement(grouping.getDimensions()).toDimensionSpec().getOutputName());\n  if (sorting != null) {\n    if (sorting.getOffsetLimit().hasOffset()) {\n      return null;\n    }\n    if (sorting.getOffsetLimit().hasLimit()) {\n      final long limit=sorting.getOffsetLimit().getLimit();\n      if (limit == 0) {\n        return null;\n      }\n      timeseriesLimit=Ints.checkedCast(limit);\n    }\nswitch (sorting.getSortKind(dimensionExpression.getOutputName())) {\ncase UNORDERED:case TIME_ASCENDING:      descending=false;\n    break;\ncase TIME_DESCENDING:  descending=true;\nbreak;\ndefault:return null;\n}\n}\n else {\ndescending=false;\n}\n}\n else {\nreturn null;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 136,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1833,
        "startLineNumber" : 787,
        "startColumnNumber" : 4,
        "endLineNumber" : 841,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (grouping.getDimensions().isEmpty()) {\n  queryGranularity=Granularities.ALL;\n  descending=false;\n}\n else if (grouping.getDimensions().size() == 1) {\n  final DimensionExpression dimensionExpression=Iterables.getOnlyElement(grouping.getDimensions());\n  queryGranularity=Expressions.toQueryGranularity(dimensionExpression.getDruidExpression(),plannerContext.getExprMacroTable());\n  if (queryGranularity == null) {\n    return null;\n  }\n  theContext.put(TimeseriesQuery.CTX_TIMESTAMP_RESULT_FIELD,Iterables.getOnlyElement(grouping.getDimensions()).toDimensionSpec().getOutputName());\n  if (sorting != null) {\n    if (sorting.getOffsetLimit().hasOffset()) {\n      return null;\n    }\n    if (sorting.getOffsetLimit().hasLimit()) {\n      final long limit=sorting.getOffsetLimit().getLimit();\n      if (limit == 0) {\n        return null;\n      }\n      timeseriesLimit=Ints.checkedCast(limit);\n    }\nswitch (sorting.getSortKind(dimensionExpression.getOutputName())) {\ncase UNORDERED:case TIME_ASCENDING:      descending=false;\n    break;\ncase TIME_DESCENDING:  descending=true;\nbreak;\ndefault:return null;\n}\n}\n else {\ndescending=false;\n}\n}\n else {\nreturn null;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 153,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3543,
        "startLineNumber" : 776,
        "startColumnNumber" : 2,
        "endLineNumber" : 876,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (grouping == null || grouping.getSubtotals().hasEffect(grouping.getDimensionSpecs()) || grouping.getHavingFilter() != null) {\n    return null;\n  }\n  final Granularity queryGranularity;\n  final boolean descending;\n  int timeseriesLimit=0;\n  final Map<String,Object> theContext=new HashMap<>();\n  if (grouping.getDimensions().isEmpty()) {\n    queryGranularity=Granularities.ALL;\n    descending=false;\n  }\n else   if (grouping.getDimensions().size() == 1) {\n    final DimensionExpression dimensionExpression=Iterables.getOnlyElement(grouping.getDimensions());\n    queryGranularity=Expressions.toQueryGranularity(dimensionExpression.getDruidExpression(),plannerContext.getExprMacroTable());\n    if (queryGranularity == null) {\n      return null;\n    }\n    theContext.put(TimeseriesQuery.CTX_TIMESTAMP_RESULT_FIELD,Iterables.getOnlyElement(grouping.getDimensions()).toDimensionSpec().getOutputName());\n    if (sorting != null) {\n      if (sorting.getOffsetLimit().hasOffset()) {\n        return null;\n      }\n      if (sorting.getOffsetLimit().hasLimit()) {\n        final long limit=sorting.getOffsetLimit().getLimit();\n        if (limit == 0) {\n          return null;\n        }\n        timeseriesLimit=Ints.checkedCast(limit);\n      }\nswitch (sorting.getSortKind(dimensionExpression.getOutputName())) {\ncase UNORDERED:case TIME_ASCENDING:        descending=false;\n      break;\ncase TIME_DESCENDING:    descending=true;\n  break;\ndefault:return null;\n}\n}\n else {\ndescending=false;\n}\n}\n else {\nreturn null;\n}\nif (!Granularities.ALL.equals(queryGranularity)) {\ntheContext.put(TimeseriesQuery.SKIP_EMPTY_BUCKETS,true);\n}\ntheContext.putAll(plannerContext.getQueryContext());\nfinal Pair<DataSource,Filtration> dataSourceFiltrationPair=getFiltration(dataSource,filter,virtualColumnRegistry);\nfinal DataSource newDataSource=dataSourceFiltrationPair.lhs;\nfinal Filtration filtration=dataSourceFiltrationPair.rhs;\nfinal List<PostAggregator> postAggregators=new ArrayList<>(grouping.getPostAggregators());\nif (sorting != null && sorting.getProjection() != null) {\npostAggregators.addAll(sorting.getProjection().getPostAggregators());\n}\nreturn new TimeseriesQuery(newDataSource,filtration.getQuerySegmentSpec(),descending,getVirtualColumns(false),filtration.getDimFilter(),queryGranularity,grouping.getAggregatorFactories(),postAggregators,timeseriesLimit,ImmutableSortedMap.copyOf(theContext));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 326,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3739,
        "startLineNumber" : 769,
        "startColumnNumber" : 2,
        "endLineNumber" : 876,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Return this query as a Timeseries query, or null if this query is not compatible with Timeseries.\n * @return query\n */\n@Nullable public TimeseriesQuery toTimeseriesQuery(){\n  if (grouping == null || grouping.getSubtotals().hasEffect(grouping.getDimensionSpecs()) || grouping.getHavingFilter() != null) {\n    return null;\n  }\n  final Granularity queryGranularity;\n  final boolean descending;\n  int timeseriesLimit=0;\n  final Map<String,Object> theContext=new HashMap<>();\n  if (grouping.getDimensions().isEmpty()) {\n    queryGranularity=Granularities.ALL;\n    descending=false;\n  }\n else   if (grouping.getDimensions().size() == 1) {\n    final DimensionExpression dimensionExpression=Iterables.getOnlyElement(grouping.getDimensions());\n    queryGranularity=Expressions.toQueryGranularity(dimensionExpression.getDruidExpression(),plannerContext.getExprMacroTable());\n    if (queryGranularity == null) {\n      return null;\n    }\n    theContext.put(TimeseriesQuery.CTX_TIMESTAMP_RESULT_FIELD,Iterables.getOnlyElement(grouping.getDimensions()).toDimensionSpec().getOutputName());\n    if (sorting != null) {\n      if (sorting.getOffsetLimit().hasOffset()) {\n        return null;\n      }\n      if (sorting.getOffsetLimit().hasLimit()) {\n        final long limit=sorting.getOffsetLimit().getLimit();\n        if (limit == 0) {\n          return null;\n        }\n        timeseriesLimit=Ints.checkedCast(limit);\n      }\nswitch (sorting.getSortKind(dimensionExpression.getOutputName())) {\ncase UNORDERED:case TIME_ASCENDING:        descending=false;\n      break;\ncase TIME_DESCENDING:    descending=true;\n  break;\ndefault:return null;\n}\n}\n else {\ndescending=false;\n}\n}\n else {\nreturn null;\n}\nif (!Granularities.ALL.equals(queryGranularity)) {\ntheContext.put(TimeseriesQuery.SKIP_EMPTY_BUCKETS,true);\n}\ntheContext.putAll(plannerContext.getQueryContext());\nfinal Pair<DataSource,Filtration> dataSourceFiltrationPair=getFiltration(dataSource,filter,virtualColumnRegistry);\nfinal DataSource newDataSource=dataSourceFiltrationPair.lhs;\nfinal Filtration filtration=dataSourceFiltrationPair.rhs;\nfinal List<PostAggregator> postAggregators=new ArrayList<>(grouping.getPostAggregators());\nif (sorting != null && sorting.getProjection() != null) {\npostAggregators.addAll(sorting.getProjection().getPostAggregators());\n}\nreturn new TimeseriesQuery(newDataSource,filtration.getQuerySegmentSpec(),descending,getVirtualColumns(false),filtration.getDimFilter(),queryGranularity,grouping.getAggregatorFactories(),postAggregators,timeseriesLimit,ImmutableSortedMap.copyOf(theContext));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 334,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 791,
        "startColumnNumber" : 6,
        "endLineNumber" : 791,
        "endColumnNumber" : 105
      },
      "nodeContext" : "final DimensionExpression dimensionExpression=Iterables.getOnlyElement(grouping.getDimensions());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "Iterables",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 803,
      "startColumnNumber" : 10,
      "endLineNumber" : 803,
      "endColumnNumber" : 19
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 803,
        "startColumnNumber" : 10,
        "endLineNumber" : 803,
        "endColumnNumber" : 60
      },
      "nodeContext" : "Iterables.getOnlyElement(grouping.getDimensions())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 803,
        "startColumnNumber" : 10,
        "endLineNumber" : 803,
        "endColumnNumber" : 78
      },
      "nodeContext" : "Iterables.getOnlyElement(grouping.getDimensions()).toDimensionSpec()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 803,
        "startColumnNumber" : 10,
        "endLineNumber" : 803,
        "endColumnNumber" : 94
      },
      "nodeContext" : "Iterables.getOnlyElement(grouping.getDimensions()).toDimensionSpec().getOutputName()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 172,
        "startLineNumber" : 801,
        "startColumnNumber" : 6,
        "endLineNumber" : 804,
        "endColumnNumber" : 7
      },
      "nodeContext" : "theContext.put(TimeseriesQuery.CTX_TIMESTAMP_RESULT_FIELD,Iterables.getOnlyElement(grouping.getDimensions()).toDimensionSpec().getOutputName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 173,
        "startLineNumber" : 801,
        "startColumnNumber" : 6,
        "endLineNumber" : 804,
        "endColumnNumber" : 8
      },
      "nodeContext" : "theContext.put(TimeseriesQuery.CTX_TIMESTAMP_RESULT_FIELD,Iterables.getOnlyElement(grouping.getDimensions()).toDimensionSpec().getOutputName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 17,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1576,
        "startLineNumber" : 790,
        "startColumnNumber" : 53,
        "endLineNumber" : 838,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final DimensionExpression dimensionExpression=Iterables.getOnlyElement(grouping.getDimensions());\n  queryGranularity=Expressions.toQueryGranularity(dimensionExpression.getDruidExpression(),plannerContext.getExprMacroTable());\n  if (queryGranularity == null) {\n    return null;\n  }\n  theContext.put(TimeseriesQuery.CTX_TIMESTAMP_RESULT_FIELD,Iterables.getOnlyElement(grouping.getDimensions()).toDimensionSpec().getOutputName());\n  if (sorting != null) {\n    if (sorting.getOffsetLimit().hasOffset()) {\n      return null;\n    }\n    if (sorting.getOffsetLimit().hasLimit()) {\n      final long limit=sorting.getOffsetLimit().getLimit();\n      if (limit == 0) {\n        return null;\n      }\n      timeseriesLimit=Ints.checkedCast(limit);\n    }\nswitch (sorting.getSortKind(dimensionExpression.getOutputName())) {\ncase UNORDERED:case TIME_ASCENDING:      descending=false;\n    break;\ncase TIME_DESCENDING:  descending=true;\nbreak;\ndefault:return null;\n}\n}\n else {\ndescending=false;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 125,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1710,
        "startLineNumber" : 790,
        "startColumnNumber" : 11,
        "endLineNumber" : 841,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (grouping.getDimensions().size() == 1) {\n  final DimensionExpression dimensionExpression=Iterables.getOnlyElement(grouping.getDimensions());\n  queryGranularity=Expressions.toQueryGranularity(dimensionExpression.getDruidExpression(),plannerContext.getExprMacroTable());\n  if (queryGranularity == null) {\n    return null;\n  }\n  theContext.put(TimeseriesQuery.CTX_TIMESTAMP_RESULT_FIELD,Iterables.getOnlyElement(grouping.getDimensions()).toDimensionSpec().getOutputName());\n  if (sorting != null) {\n    if (sorting.getOffsetLimit().hasOffset()) {\n      return null;\n    }\n    if (sorting.getOffsetLimit().hasLimit()) {\n      final long limit=sorting.getOffsetLimit().getLimit();\n      if (limit == 0) {\n        return null;\n      }\n      timeseriesLimit=Ints.checkedCast(limit);\n    }\nswitch (sorting.getSortKind(dimensionExpression.getOutputName())) {\ncase UNORDERED:case TIME_ASCENDING:      descending=false;\n    break;\ncase TIME_DESCENDING:  descending=true;\nbreak;\ndefault:return null;\n}\n}\n else {\ndescending=false;\n}\n}\n else {\nreturn null;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 136,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1833,
        "startLineNumber" : 787,
        "startColumnNumber" : 4,
        "endLineNumber" : 841,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (grouping.getDimensions().isEmpty()) {\n  queryGranularity=Granularities.ALL;\n  descending=false;\n}\n else if (grouping.getDimensions().size() == 1) {\n  final DimensionExpression dimensionExpression=Iterables.getOnlyElement(grouping.getDimensions());\n  queryGranularity=Expressions.toQueryGranularity(dimensionExpression.getDruidExpression(),plannerContext.getExprMacroTable());\n  if (queryGranularity == null) {\n    return null;\n  }\n  theContext.put(TimeseriesQuery.CTX_TIMESTAMP_RESULT_FIELD,Iterables.getOnlyElement(grouping.getDimensions()).toDimensionSpec().getOutputName());\n  if (sorting != null) {\n    if (sorting.getOffsetLimit().hasOffset()) {\n      return null;\n    }\n    if (sorting.getOffsetLimit().hasLimit()) {\n      final long limit=sorting.getOffsetLimit().getLimit();\n      if (limit == 0) {\n        return null;\n      }\n      timeseriesLimit=Ints.checkedCast(limit);\n    }\nswitch (sorting.getSortKind(dimensionExpression.getOutputName())) {\ncase UNORDERED:case TIME_ASCENDING:      descending=false;\n    break;\ncase TIME_DESCENDING:  descending=true;\nbreak;\ndefault:return null;\n}\n}\n else {\ndescending=false;\n}\n}\n else {\nreturn null;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 153,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3543,
        "startLineNumber" : 776,
        "startColumnNumber" : 2,
        "endLineNumber" : 876,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (grouping == null || grouping.getSubtotals().hasEffect(grouping.getDimensionSpecs()) || grouping.getHavingFilter() != null) {\n    return null;\n  }\n  final Granularity queryGranularity;\n  final boolean descending;\n  int timeseriesLimit=0;\n  final Map<String,Object> theContext=new HashMap<>();\n  if (grouping.getDimensions().isEmpty()) {\n    queryGranularity=Granularities.ALL;\n    descending=false;\n  }\n else   if (grouping.getDimensions().size() == 1) {\n    final DimensionExpression dimensionExpression=Iterables.getOnlyElement(grouping.getDimensions());\n    queryGranularity=Expressions.toQueryGranularity(dimensionExpression.getDruidExpression(),plannerContext.getExprMacroTable());\n    if (queryGranularity == null) {\n      return null;\n    }\n    theContext.put(TimeseriesQuery.CTX_TIMESTAMP_RESULT_FIELD,Iterables.getOnlyElement(grouping.getDimensions()).toDimensionSpec().getOutputName());\n    if (sorting != null) {\n      if (sorting.getOffsetLimit().hasOffset()) {\n        return null;\n      }\n      if (sorting.getOffsetLimit().hasLimit()) {\n        final long limit=sorting.getOffsetLimit().getLimit();\n        if (limit == 0) {\n          return null;\n        }\n        timeseriesLimit=Ints.checkedCast(limit);\n      }\nswitch (sorting.getSortKind(dimensionExpression.getOutputName())) {\ncase UNORDERED:case TIME_ASCENDING:        descending=false;\n      break;\ncase TIME_DESCENDING:    descending=true;\n  break;\ndefault:return null;\n}\n}\n else {\ndescending=false;\n}\n}\n else {\nreturn null;\n}\nif (!Granularities.ALL.equals(queryGranularity)) {\ntheContext.put(TimeseriesQuery.SKIP_EMPTY_BUCKETS,true);\n}\ntheContext.putAll(plannerContext.getQueryContext());\nfinal Pair<DataSource,Filtration> dataSourceFiltrationPair=getFiltration(dataSource,filter,virtualColumnRegistry);\nfinal DataSource newDataSource=dataSourceFiltrationPair.lhs;\nfinal Filtration filtration=dataSourceFiltrationPair.rhs;\nfinal List<PostAggregator> postAggregators=new ArrayList<>(grouping.getPostAggregators());\nif (sorting != null && sorting.getProjection() != null) {\npostAggregators.addAll(sorting.getProjection().getPostAggregators());\n}\nreturn new TimeseriesQuery(newDataSource,filtration.getQuerySegmentSpec(),descending,getVirtualColumns(false),filtration.getDimFilter(),queryGranularity,grouping.getAggregatorFactories(),postAggregators,timeseriesLimit,ImmutableSortedMap.copyOf(theContext));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 326,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3739,
        "startLineNumber" : 769,
        "startColumnNumber" : 2,
        "endLineNumber" : 876,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Return this query as a Timeseries query, or null if this query is not compatible with Timeseries.\n * @return query\n */\n@Nullable public TimeseriesQuery toTimeseriesQuery(){\n  if (grouping == null || grouping.getSubtotals().hasEffect(grouping.getDimensionSpecs()) || grouping.getHavingFilter() != null) {\n    return null;\n  }\n  final Granularity queryGranularity;\n  final boolean descending;\n  int timeseriesLimit=0;\n  final Map<String,Object> theContext=new HashMap<>();\n  if (grouping.getDimensions().isEmpty()) {\n    queryGranularity=Granularities.ALL;\n    descending=false;\n  }\n else   if (grouping.getDimensions().size() == 1) {\n    final DimensionExpression dimensionExpression=Iterables.getOnlyElement(grouping.getDimensions());\n    queryGranularity=Expressions.toQueryGranularity(dimensionExpression.getDruidExpression(),plannerContext.getExprMacroTable());\n    if (queryGranularity == null) {\n      return null;\n    }\n    theContext.put(TimeseriesQuery.CTX_TIMESTAMP_RESULT_FIELD,Iterables.getOnlyElement(grouping.getDimensions()).toDimensionSpec().getOutputName());\n    if (sorting != null) {\n      if (sorting.getOffsetLimit().hasOffset()) {\n        return null;\n      }\n      if (sorting.getOffsetLimit().hasLimit()) {\n        final long limit=sorting.getOffsetLimit().getLimit();\n        if (limit == 0) {\n          return null;\n        }\n        timeseriesLimit=Ints.checkedCast(limit);\n      }\nswitch (sorting.getSortKind(dimensionExpression.getOutputName())) {\ncase UNORDERED:case TIME_ASCENDING:        descending=false;\n      break;\ncase TIME_DESCENDING:    descending=true;\n  break;\ndefault:return null;\n}\n}\n else {\ndescending=false;\n}\n}\n else {\nreturn null;\n}\nif (!Granularities.ALL.equals(queryGranularity)) {\ntheContext.put(TimeseriesQuery.SKIP_EMPTY_BUCKETS,true);\n}\ntheContext.putAll(plannerContext.getQueryContext());\nfinal Pair<DataSource,Filtration> dataSourceFiltrationPair=getFiltration(dataSource,filter,virtualColumnRegistry);\nfinal DataSource newDataSource=dataSourceFiltrationPair.lhs;\nfinal Filtration filtration=dataSourceFiltrationPair.rhs;\nfinal List<PostAggregator> postAggregators=new ArrayList<>(grouping.getPostAggregators());\nif (sorting != null && sorting.getProjection() != null) {\npostAggregators.addAll(sorting.getProjection().getPostAggregators());\n}\nreturn new TimeseriesQuery(newDataSource,filtration.getQuerySegmentSpec(),descending,getVirtualColumns(false),filtration.getDimFilter(),queryGranularity,grouping.getAggregatorFactories(),postAggregators,timeseriesLimit,ImmutableSortedMap.copyOf(theContext));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 334,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 803,
        "startColumnNumber" : 10,
        "endLineNumber" : 803,
        "endColumnNumber" : 94
      },
      "nodeContext" : "Iterables.getOnlyElement(grouping.getDimensions()).toDimensionSpec().getOutputName()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : null
  } ],
  "positionList" : [ {
    "charLength" : 9,
    "startLineNumber" : 791,
    "startColumnNumber" : 54,
    "endLineNumber" : 791,
    "endColumnNumber" : 63
  }, {
    "charLength" : 9,
    "startLineNumber" : 803,
    "startColumnNumber" : 10,
    "endLineNumber" : 803,
    "endColumnNumber" : 19
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 5
  } ]
}