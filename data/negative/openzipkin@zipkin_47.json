{
  "id" : 47,
  "expression" : "asList(new DependencyLinkSpan(Kind.CLIENT,null,1L,\"client\",\"server\"),new DependencyLinkSpan(Kind.SERVER,1L,2L,\"server\",null))",
  "projectName" : "openzipkin@zipkin",
  "commitID" : "f02a993656f506277ca83737ddf494ed45fde4b3",
  "filePath" : "/zipkin/src/test/java/zipkin/internal/DependencyLinkerTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "asList(new DependencyLinkSpan(Kind.CLIENT,null,1L,\"client\",\"server\"),new DependencyLinkSpan(Kind.SERVER,1L,2L,\"server\",null))",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 168,
      "startLineNumber" : 101,
      "startColumnNumber" : 8,
      "endLineNumber" : 104,
      "endColumnNumber" : 9
    },
    "astNodeNumber" : 22,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 368,
        "startLineNumber" : 100,
        "startColumnNumber" : 49,
        "endLineNumber" : 109,
        "endColumnNumber" : 5
      },
      "nodeContext" : "asList(asList(new DependencyLinkSpan(Kind.CLIENT,null,1L,\"client\",\"server\"),new DependencyLinkSpan(Kind.SERVER,1L,2L,\"server\",null)),asList(new DependencyLinkSpan(Kind.SERVER,null,1L,\"client\",null),new DependencyLinkSpan(Kind.CLIENT,1L,2L,\"client\",\"server\")))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 46,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 382,
        "startLineNumber" : 100,
        "startColumnNumber" : 35,
        "endLineNumber" : 109,
        "endColumnNumber" : 5
      },
      "nodeContext" : "singleLinks=asList(asList(new DependencyLinkSpan(Kind.CLIENT,null,1L,\"client\",\"server\"),new DependencyLinkSpan(Kind.SERVER,1L,2L,\"server\",null)),asList(new DependencyLinkSpan(Kind.SERVER,null,1L,\"client\",null),new DependencyLinkSpan(Kind.CLIENT,1L,2L,\"client\",\"server\")))",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 48,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 414,
        "startLineNumber" : 100,
        "startColumnNumber" : 4,
        "endLineNumber" : 109,
        "endColumnNumber" : 6
      },
      "nodeContext" : "List<List<DependencyLinkSpan>> singleLinks=asList(asList(new DependencyLinkSpan(Kind.CLIENT,null,1L,\"client\",\"server\"),new DependencyLinkSpan(Kind.SERVER,1L,2L,\"server\",null)),asList(new DependencyLinkSpan(Kind.SERVER,null,1L,\"client\",null),new DependencyLinkSpan(Kind.CLIENT,1L,2L,\"client\",\"server\")));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 57,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 646,
        "startLineNumber" : 99,
        "startColumnNumber" : 56,
        "endLineNumber" : 116,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  List<List<DependencyLinkSpan>> singleLinks=asList(asList(new DependencyLinkSpan(Kind.CLIENT,null,1L,\"client\",\"server\"),new DependencyLinkSpan(Kind.SERVER,1L,2L,\"server\",null)),asList(new DependencyLinkSpan(Kind.SERVER,null,1L,\"client\",null),new DependencyLinkSpan(Kind.CLIENT,1L,2L,\"client\",\"server\")));\n  for (  List<DependencyLinkSpan> trace : singleLinks) {\n    assertThat(new DependencyLinker().putTrace(trace.iterator()).link()).containsOnly(DependencyLink.create(\"client\",\"server\",1L));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 89,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 868,
        "startLineNumber" : 94,
        "startColumnNumber" : 2,
        "endLineNumber" : 116,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Spans don't always include both the client and server service. When you know the kind, you can link these without duplicating call count.\n */\n@Test public void singleHostSpansResultInASingleCallCount(){\n  List<List<DependencyLinkSpan>> singleLinks=asList(asList(new DependencyLinkSpan(Kind.CLIENT,null,1L,\"client\",\"server\"),new DependencyLinkSpan(Kind.SERVER,1L,2L,\"server\",null)),asList(new DependencyLinkSpan(Kind.SERVER,null,1L,\"client\",null),new DependencyLinkSpan(Kind.CLIENT,1L,2L,\"client\",\"server\")));\n  for (  List<DependencyLinkSpan> trace : singleLinks) {\n    assertThat(new DependencyLinker().putTrace(trace.iterator()).link()).containsOnly(DependencyLink.create(\"client\",\"server\",1L));\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 96,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 368,
        "startLineNumber" : 100,
        "startColumnNumber" : 49,
        "endLineNumber" : 109,
        "endColumnNumber" : 5
      },
      "nodeContext" : "asList(asList(new DependencyLinkSpan(Kind.CLIENT,null,1L,\"client\",\"server\"),new DependencyLinkSpan(Kind.SERVER,1L,2L,\"server\",null)),asList(new DependencyLinkSpan(Kind.SERVER,null,1L,\"client\",null),new DependencyLinkSpan(Kind.CLIENT,1L,2L,\"client\",\"server\")))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 46,
      "astHeight" : 5
    },
    "tokenLength" : 15,
    "type" : "java.util.List<zipkin.internal.DependencyLinkSpan>"
  } ],
  "positionList" : [ {
    "charLength" : 168,
    "startLineNumber" : 101,
    "startColumnNumber" : 8,
    "endLineNumber" : 104,
    "endColumnNumber" : 9
  } ],
  "layoutRelationDataList" : [ ]
}