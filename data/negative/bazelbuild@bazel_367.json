{
  "id" : 367,
  "expression" : "tmpDirRoot.startsWith(env.getExecRoot())",
  "projectName" : "bazelbuild@bazel",
  "commitID" : "302971e1b3d803069ac949c0085c0d2a3916c8ab",
  "filePath" : "/src/main/java/com/google/devtools/build/lib/runtime/commands/RunCommand.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "tmpDirRoot.startsWith(env.getExecRoot())",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 40,
      "startLineNumber" : 426,
      "startColumnNumber" : 10,
      "endLineNumber" : 426,
      "endColumnNumber" : 50
    },
    "astNodeNumber" : 6,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 137,
        "startLineNumber" : 426,
        "startColumnNumber" : 10,
        "endLineNumber" : 428,
        "endColumnNumber" : 39
      },
      "nodeContext" : "tmpDirRoot.startsWith(env.getExecRoot()) ? tmpDirRoot.relativeTo(env.getExecRoot()) : tmpDirRoot.asFragment()",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 16,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 169,
        "startLineNumber" : 425,
        "startColumnNumber" : 19,
        "endLineNumber" : 428,
        "endColumnNumber" : 39
      },
      "nodeContext" : "maybeRelativeTmpDir=tmpDirRoot.startsWith(env.getExecRoot()) ? tmpDirRoot.relativeTo(env.getExecRoot()) : tmpDirRoot.asFragment()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 183,
        "startLineNumber" : 425,
        "startColumnNumber" : 6,
        "endLineNumber" : 428,
        "endColumnNumber" : 40
      },
      "nodeContext" : "PathFragment maybeRelativeTmpDir=tmpDirRoot.startsWith(env.getExecRoot()) ? tmpDirRoot.relativeTo(env.getExecRoot()) : tmpDirRoot.asFragment();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 3128,
        "startLineNumber" : 404,
        "startColumnNumber" : 61,
        "endLineNumber" : 474,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ImmutableList<Artifact.DerivedArtifact> statusArtifacts=TestProvider.getTestStatusArtifacts(targetToRun);\n  if (statusArtifacts.size() != 1) {\n    return reportAndCreateFailureResult(env,MULTIPLE_TESTS_MESSAGE,Code.TOO_MANY_TEST_SHARDS_OR_RUNS);\n  }\n  TestRunnerAction testAction=(TestRunnerAction)env.getSkyframeExecutor().getActionGraph(env.getReporter()).getGeneratingAction(Iterables.getOnlyElement(statusArtifacts));\n  TestTargetExecutionSettings settings=testAction.getExecutionSettings();\n  Preconditions.checkState(settings.getRunfilesSymlinksCreated() == options.getOptions(CoreOptions.class).buildRunfiles);\n  ExecutionOptions executionOptions=options.getOptions(ExecutionOptions.class);\n  Path tmpDirRoot=TestStrategy.getTmpRoot(env.getWorkspace(),env.getExecRoot(),executionOptions);\n  PathFragment maybeRelativeTmpDir=tmpDirRoot.startsWith(env.getExecRoot()) ? tmpDirRoot.relativeTo(env.getExecRoot()) : tmpDirRoot.asFragment();\n  Duration timeout=configuration.getFragment(TestConfiguration.class).getTestTimeout().get(testAction.getTestProperties().getTimeout());\n  runEnvironment.putAll(testPolicy.computeTestEnvironment(testAction,env.getClientEnv(),timeout,settings.getRunfilesDir().relativeTo(env.getExecRoot()),maybeRelativeTmpDir.getRelative(TestStrategy.getTmpDirName(testAction))));\n  workingDir=env.getExecRoot();\n  try {\n    testAction.prepare(env.getExecRoot(),ArtifactPathResolver.IDENTITY,null,false);\n  }\n catch (  IOException e) {\n    return reportAndCreateFailureResult(env,\"Error while setting up test: \" + e.getMessage(),Code.TEST_ENVIRONMENT_SETUP_FAILURE);\n  }\ncatch (  InterruptedException e) {\n    return reportAndCreateFailureResult(env,\"Error while setting up test: \" + e.getMessage(),Code.TEST_ENVIRONMENT_SETUP_INTERRUPTED);\n  }\n  try {\n    cmdLine.addAll(TestStrategy.getArgs(testAction));\n    cmdLine.addAll(commandLineArgs);\n    prettyCmdLine.addAll(cmdLine);\n  }\n catch (  ExecException e) {\n    return reportAndCreateFailureResult(env,Strings.nullToEmpty(e.getMessage()),Code.COMMAND_LINE_EXPANSION_FAILURE);\n  }\ncatch (  InterruptedException e) {\n    String message=\"run: command line expansion interrupted\";\n    env.getReporter().handle(Event.error(message));\n    return BlazeCommandResult.detailedExitCode(InterruptedFailureDetails.detailedExitCode(message));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 295,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4399,
        "startLineNumber" : 404,
        "startColumnNumber" : 4,
        "endLineNumber" : 499,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (targetToRun.getProvider(TestProvider.class) != null) {\n  ImmutableList<Artifact.DerivedArtifact> statusArtifacts=TestProvider.getTestStatusArtifacts(targetToRun);\n  if (statusArtifacts.size() != 1) {\n    return reportAndCreateFailureResult(env,MULTIPLE_TESTS_MESSAGE,Code.TOO_MANY_TEST_SHARDS_OR_RUNS);\n  }\n  TestRunnerAction testAction=(TestRunnerAction)env.getSkyframeExecutor().getActionGraph(env.getReporter()).getGeneratingAction(Iterables.getOnlyElement(statusArtifacts));\n  TestTargetExecutionSettings settings=testAction.getExecutionSettings();\n  Preconditions.checkState(settings.getRunfilesSymlinksCreated() == options.getOptions(CoreOptions.class).buildRunfiles);\n  ExecutionOptions executionOptions=options.getOptions(ExecutionOptions.class);\n  Path tmpDirRoot=TestStrategy.getTmpRoot(env.getWorkspace(),env.getExecRoot(),executionOptions);\n  PathFragment maybeRelativeTmpDir=tmpDirRoot.startsWith(env.getExecRoot()) ? tmpDirRoot.relativeTo(env.getExecRoot()) : tmpDirRoot.asFragment();\n  Duration timeout=configuration.getFragment(TestConfiguration.class).getTestTimeout().get(testAction.getTestProperties().getTimeout());\n  runEnvironment.putAll(testPolicy.computeTestEnvironment(testAction,env.getClientEnv(),timeout,settings.getRunfilesDir().relativeTo(env.getExecRoot()),maybeRelativeTmpDir.getRelative(TestStrategy.getTmpDirName(testAction))));\n  workingDir=env.getExecRoot();\n  try {\n    testAction.prepare(env.getExecRoot(),ArtifactPathResolver.IDENTITY,null,false);\n  }\n catch (  IOException e) {\n    return reportAndCreateFailureResult(env,\"Error while setting up test: \" + e.getMessage(),Code.TEST_ENVIRONMENT_SETUP_FAILURE);\n  }\ncatch (  InterruptedException e) {\n    return reportAndCreateFailureResult(env,\"Error while setting up test: \" + e.getMessage(),Code.TEST_ENVIRONMENT_SETUP_INTERRUPTED);\n  }\n  try {\n    cmdLine.addAll(TestStrategy.getArgs(testAction));\n    cmdLine.addAll(commandLineArgs);\n    prettyCmdLine.addAll(cmdLine);\n  }\n catch (  ExecException e) {\n    return reportAndCreateFailureResult(env,Strings.nullToEmpty(e.getMessage()),Code.COMMAND_LINE_EXPANSION_FAILURE);\n  }\ncatch (  InterruptedException e) {\n    String message=\"run: command line expansion interrupted\";\n    env.getReporter().handle(Event.error(message));\n    return BlazeCommandResult.detailedExitCode(InterruptedFailureDetails.detailedExitCode(message));\n  }\n}\n else {\n  workingDir=runfilesDir;\n  if (runfilesSupport != null) {\n    runfilesSupport.getActionEnvironment().resolve(runEnvironment,env.getClientEnv());\n  }\n  try {\n    List<String> args=computeArgs(targetToRun,commandLineArgs);\n    constructCommandLine(cmdLine,prettyCmdLine,env,configuration,targetToRun,runUnderTarget,args);\n  }\n catch (  NoShellFoundException e) {\n    return reportAndCreateFailureResult(env,\"the \\\"run\\\" command needs a shell with \\\"--run_under\\\"; use the\" + \" --shell_executable=<path> flag to specify its path, e.g.\" + \" --shell_executable=/bin/bash\",Code.NO_SHELL_SPECIFIED);\n  }\ncatch (  InterruptedException e) {\n    String message=\"run: command line expansion interrupted\";\n    env.getReporter().handle(Event.error(message));\n    return BlazeCommandResult.detailedExitCode(InterruptedFailureDetails.detailedExitCode(message));\n  }\ncatch (  CommandLineExpansionException e) {\n    return reportAndCreateFailureResult(env,Strings.nullToEmpty(e.getMessage()),Code.COMMAND_LINE_EXPANSION_FAILURE);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 414,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 14605,
        "startLineNumber" : 263,
        "startColumnNumber" : 87,
        "endLineNumber" : 597,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  RunOptions runOptions=options.getOptions(RunOptions.class);\n  List<String> targetAndArgs=options.getResidue();\n  if (targetAndArgs.isEmpty()) {\n    return reportAndCreateFailureResult(env,\"Must specify a target to run\",Code.NO_TARGET_SPECIFIED);\n  }\n  String targetString=targetAndArgs.get(0);\n  List<String> commandLineArgs=targetAndArgs.subList(1,targetAndArgs.size());\n  RunUnder runUnder=options.getOptions(CoreOptions.class).runUnder;\n  OutErr outErr=env.getReporter().getOutErr();\n  List<String> targets=(runUnder != null) && (runUnder.getLabel() != null) ? ImmutableList.of(targetString,runUnder.getLabel().toString()) : ImmutableList.of(targetString);\n  BuildRequest request=BuildRequest.builder().setCommandName(this.getClass().getAnnotation(Command.class).name()).setId(env.getCommandId()).setOptions(options).setStartupOptions(env.getRuntime().getStartupOptionsProvider()).setOutErr(outErr).setTargets(targets).setStartTimeMillis(env.getCommandStartTime()).build();\n  currentRunUnder=runUnder;\n  BuildResult result;\n  try {\n    result=processRequest(env,request);\n  }\n  finally {\n    currentRunUnder=null;\n  }\n  if (!result.getSuccess()) {\n    env.getReporter().handle(Event.error(\"Build failed. Not running target\"));\n    return BlazeCommandResult.detailedExitCode(result.getDetailedExitCode());\n  }\n  Collection<ConfiguredTarget> targetsBuilt=result.getSuccessfulTargets();\n  ConfiguredTarget targetToRun=null;\n  ConfiguredTarget runUnderTarget=null;\n  if (targetsBuilt != null) {\n    int maxTargets=runUnder != null && runUnder.getLabel() != null ? 2 : 1;\n    if (targetsBuilt.size() > maxTargets) {\n      return reportAndCreateFailureResult(env,makeErrorMessageForNotHavingASingleTarget(targetString,Iterables.transform(targetsBuilt,ct -> ct.getLabel().toString())),Code.TOO_MANY_TARGETS_SPECIFIED);\n    }\n    for (    ConfiguredTarget target : targetsBuilt) {\n      BlazeCommandResult targetValidation=fullyValidateTarget(env,target);\n      if (!targetValidation.isSuccess()) {\n        return targetValidation;\n      }\n      if (runUnder != null && target.getLabel().equals(runUnder.getLabel())) {\n        if (runUnderTarget != null) {\n          return reportAndCreateFailureResult(env,\"Can't identify the run_under target from multiple options?\",Code.RUN_UNDER_TARGET_NOT_BUILT);\n        }\n        runUnderTarget=target;\n      }\n else       if (targetToRun == null) {\n        targetToRun=target;\n      }\n else {\n        return reportAndCreateFailureResult(env,makeErrorMessageForNotHavingASingleTarget(targetString,Iterables.transform(targetsBuilt,ct -> ct.getLabel().toString())),Code.TOO_MANY_TARGETS_SPECIFIED);\n      }\n    }\n  }\n  if (targetToRun == null && runUnderTarget != null) {\n    targetToRun=runUnderTarget;\n  }\n  if (targetToRun == null) {\n    return reportAndCreateFailureResult(env,NO_TARGET_MESSAGE,Code.NO_TARGET_SPECIFIED);\n  }\n  BuildConfigurationValue configuration=env.getSkyframeExecutor().getConfiguration(env.getReporter(),targetToRun.getConfigurationKey());\n  if (configuration == null) {\n    configuration=result.getBuildConfigurationCollection().getTargetConfigurations().get(0);\n  }\n  if (!configuration.buildRunfilesManifests()) {\n    return reportAndCreateFailureResult(env,\"--nobuild_runfile_manifests is incompatible with the \\\"run\\\" command\",Code.RUN_PREREQ_UNMET);\n  }\n  Path runfilesDir;\n  FilesToRunProvider provider=targetToRun.getProvider(FilesToRunProvider.class);\n  RunfilesSupport runfilesSupport=provider == null ? null : provider.getRunfilesSupport();\n  if (runfilesSupport == null) {\n    runfilesDir=env.getWorkingDirectory();\n  }\n else {\n    try {\n      runfilesDir=ensureRunfilesBuilt(env,runfilesSupport,env.getSkyframeExecutor().getConfiguration(env.getReporter(),targetToRun.getConfigurationKey()));\n    }\n catch (    RunfilesException e) {\n      env.getReporter().handle(Event.error(e.getMessage()));\n      return BlazeCommandResult.failureDetail(e.createFailureDetail());\n    }\ncatch (    InterruptedException e) {\n      env.getReporter().handle(Event.error(\"Interrupted\"));\n      return BlazeCommandResult.failureDetail(FailureDetail.newBuilder().setInterrupted(Interrupted.newBuilder().setCode(Interrupted.Code.INTERRUPTED)).build());\n    }\n  }\n  Map<String,String> runEnvironment=new TreeMap<>();\n  List<String> cmdLine=new ArrayList<>();\n  List<String> prettyCmdLine=new ArrayList<>();\n  Path workingDir;\n  runEnvironment.put(\"BUILD_WORKSPACE_DIRECTORY\",env.getWorkspace().getPathString());\n  runEnvironment.put(\"BUILD_WORKING_DIRECTORY\",env.getWorkingDirectory().getPathString());\n  if (targetToRun.getProvider(TestProvider.class) != null) {\n    ImmutableList<Artifact.DerivedArtifact> statusArtifacts=TestProvider.getTestStatusArtifacts(targetToRun);\n    if (statusArtifacts.size() != 1) {\n      return reportAndCreateFailureResult(env,MULTIPLE_TESTS_MESSAGE,Code.TOO_MANY_TEST_SHARDS_OR_RUNS);\n    }\n    TestRunnerAction testAction=(TestRunnerAction)env.getSkyframeExecutor().getActionGraph(env.getReporter()).getGeneratingAction(Iterables.getOnlyElement(statusArtifacts));\n    TestTargetExecutionSettings settings=testAction.getExecutionSettings();\n    Preconditions.checkState(settings.getRunfilesSymlinksCreated() == options.getOptions(CoreOptions.class).buildRunfiles);\n    ExecutionOptions executionOptions=options.getOptions(ExecutionOptions.class);\n    Path tmpDirRoot=TestStrategy.getTmpRoot(env.getWorkspace(),env.getExecRoot(),executionOptions);\n    PathFragment maybeRelativeTmpDir=tmpDirRoot.startsWith(env.getExecRoot()) ? tmpDirRoot.relativeTo(env.getExecRoot()) : tmpDirRoot.asFragment();\n    Duration timeout=configuration.getFragment(TestConfiguration.class).getTestTimeout().get(testAction.getTestProperties().getTimeout());\n    runEnvironment.putAll(testPolicy.computeTestEnvironment(testAction,env.getClientEnv(),timeout,settings.getRunfilesDir().relativeTo(env.getExecRoot()),maybeRelativeTmpDir.getRelative(TestStrategy.getTmpDirName(testAction))));\n    workingDir=env.getExecRoot();\n    try {\n      testAction.prepare(env.getExecRoot(),ArtifactPathResolver.IDENTITY,null,false);\n    }\n catch (    IOException e) {\n      return reportAndCreateFailureResult(env,\"Error while setting up test: \" + e.getMessage(),Code.TEST_ENVIRONMENT_SETUP_FAILURE);\n    }\ncatch (    InterruptedException e) {\n      return reportAndCreateFailureResult(env,\"Error while setting up test: \" + e.getMessage(),Code.TEST_ENVIRONMENT_SETUP_INTERRUPTED);\n    }\n    try {\n      cmdLine.addAll(TestStrategy.getArgs(testAction));\n      cmdLine.addAll(commandLineArgs);\n      prettyCmdLine.addAll(cmdLine);\n    }\n catch (    ExecException e) {\n      return reportAndCreateFailureResult(env,Strings.nullToEmpty(e.getMessage()),Code.COMMAND_LINE_EXPANSION_FAILURE);\n    }\ncatch (    InterruptedException e) {\n      String message=\"run: command line expansion interrupted\";\n      env.getReporter().handle(Event.error(message));\n      return BlazeCommandResult.detailedExitCode(InterruptedFailureDetails.detailedExitCode(message));\n    }\n  }\n else {\n    workingDir=runfilesDir;\n    if (runfilesSupport != null) {\n      runfilesSupport.getActionEnvironment().resolve(runEnvironment,env.getClientEnv());\n    }\n    try {\n      List<String> args=computeArgs(targetToRun,commandLineArgs);\n      constructCommandLine(cmdLine,prettyCmdLine,env,configuration,targetToRun,runUnderTarget,args);\n    }\n catch (    NoShellFoundException e) {\n      return reportAndCreateFailureResult(env,\"the \\\"run\\\" command needs a shell with \\\"--run_under\\\"; use the\" + \" --shell_executable=<path> flag to specify its path, e.g.\" + \" --shell_executable=/bin/bash\",Code.NO_SHELL_SPECIFIED);\n    }\ncatch (    InterruptedException e) {\n      String message=\"run: command line expansion interrupted\";\n      env.getReporter().handle(Event.error(message));\n      return BlazeCommandResult.detailedExitCode(InterruptedFailureDetails.detailedExitCode(message));\n    }\ncatch (    CommandLineExpansionException e) {\n      return reportAndCreateFailureResult(env,Strings.nullToEmpty(e.getMessage()),Code.COMMAND_LINE_EXPANSION_FAILURE);\n    }\n  }\n  if (runOptions.scriptPath != null) {\n    String unisolatedCommand=CommandFailureUtils.describeCommand(CommandDescriptionForm.COMPLETE_UNISOLATED,false,cmdLine,runEnvironment,workingDir.getPathString(),configuration.checksum(),null);\n    PathFragment shExecutable=ShToolchain.getPath(configuration);\n    if (shExecutable.isEmpty()) {\n      return reportAndCreateFailureResult(env,\"the \\\"run\\\" command needs a shell with \\\"--script_path\\\"; use the\" + \" --shell_executable=<path> flag to specify its path, e.g.\" + \" --shell_executable=/bin/bash\",Code.NO_SHELL_SPECIFIED);\n    }\n    try {\n      writeScript(env,shExecutable,runOptions.scriptPath,unisolatedCommand);\n      return BlazeCommandResult.success();\n    }\n catch (    IOException e) {\n      String message=\"Error writing run script: \" + e.getMessage();\n      return reportAndCreateFailureResult(env,message,Code.SCRIPT_WRITE_FAILURE);\n    }\n  }\n  boolean batchMode=env.getRuntime().getStartupOptionsProvider().getOptions(BlazeServerStartupOptions.class).batch;\n  if (batchMode) {\n    runEnvironment.putAll(env.getClientEnv());\n  }\n  env.getReporter().handle(Event.info(null,\"Running command line: \" + ShellEscaper.escapeJoinAll(prettyCmdLine)));\n  ExecRequest.Builder execDescription=ExecRequest.newBuilder().setWorkingDirectory(ByteString.copyFrom(workingDir.getPathString(),StandardCharsets.ISO_8859_1));\n  if (OS.getCurrent() == OS.WINDOWS) {\n    boolean isBinary=true;\n    for (    String arg : cmdLine) {\n      if (!isBinary) {\n        arg=ShellUtils.windowsEscapeArg(arg);\n      }\n      execDescription.addArgv(ByteString.copyFrom(arg,StandardCharsets.ISO_8859_1));\n      isBinary=false;\n    }\n  }\n else {\n    PathFragment shExecutable=ShToolchain.getPath(configuration);\n    if (shExecutable.isEmpty()) {\n      return reportAndCreateFailureResult(env,\"the \\\"run\\\" command needs a shell with; use the --shell_executable=<path> \" + \"flag to specify the shell's path, e.g. --shell_executable=/bin/bash\",Code.NO_SHELL_SPECIFIED);\n    }\n    String shellEscaped=ShellEscaper.escapeJoinAll(cmdLine);\n    if (OS.getCurrent() == OS.WINDOWS) {\n      shellEscaped=\"\\\"\" + shellEscaped.replace(\"\\\\\",\"\\\\\\\\\").replace(\"\\\"\",\"\\\\\\\"\") + \"\\\"\";\n    }\n    ImmutableList<String> shellCmdLine=ImmutableList.<String>of(shExecutable.getPathString(),\"-c\",shellEscaped);\n    for (    String arg : shellCmdLine) {\n      execDescription.addArgv(ByteString.copyFrom(arg,StandardCharsets.ISO_8859_1));\n    }\n  }\n  for (  Map.Entry<String,String> variable : runEnvironment.entrySet()) {\n    execDescription.addEnvironmentVariable(EnvironmentVariable.newBuilder().setName(ByteString.copyFrom(variable.getKey(),StandardCharsets.ISO_8859_1)).setValue(ByteString.copyFrom(variable.getValue(),StandardCharsets.ISO_8859_1)).build());\n  }\n  return BlazeCommandResult.execute(execDescription.build());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1392,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 14702,
        "startLineNumber" : 262,
        "startColumnNumber" : 2,
        "endLineNumber" : 597,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public BlazeCommandResult exec(CommandEnvironment env,OptionsParsingResult options){\n  RunOptions runOptions=options.getOptions(RunOptions.class);\n  List<String> targetAndArgs=options.getResidue();\n  if (targetAndArgs.isEmpty()) {\n    return reportAndCreateFailureResult(env,\"Must specify a target to run\",Code.NO_TARGET_SPECIFIED);\n  }\n  String targetString=targetAndArgs.get(0);\n  List<String> commandLineArgs=targetAndArgs.subList(1,targetAndArgs.size());\n  RunUnder runUnder=options.getOptions(CoreOptions.class).runUnder;\n  OutErr outErr=env.getReporter().getOutErr();\n  List<String> targets=(runUnder != null) && (runUnder.getLabel() != null) ? ImmutableList.of(targetString,runUnder.getLabel().toString()) : ImmutableList.of(targetString);\n  BuildRequest request=BuildRequest.builder().setCommandName(this.getClass().getAnnotation(Command.class).name()).setId(env.getCommandId()).setOptions(options).setStartupOptions(env.getRuntime().getStartupOptionsProvider()).setOutErr(outErr).setTargets(targets).setStartTimeMillis(env.getCommandStartTime()).build();\n  currentRunUnder=runUnder;\n  BuildResult result;\n  try {\n    result=processRequest(env,request);\n  }\n  finally {\n    currentRunUnder=null;\n  }\n  if (!result.getSuccess()) {\n    env.getReporter().handle(Event.error(\"Build failed. Not running target\"));\n    return BlazeCommandResult.detailedExitCode(result.getDetailedExitCode());\n  }\n  Collection<ConfiguredTarget> targetsBuilt=result.getSuccessfulTargets();\n  ConfiguredTarget targetToRun=null;\n  ConfiguredTarget runUnderTarget=null;\n  if (targetsBuilt != null) {\n    int maxTargets=runUnder != null && runUnder.getLabel() != null ? 2 : 1;\n    if (targetsBuilt.size() > maxTargets) {\n      return reportAndCreateFailureResult(env,makeErrorMessageForNotHavingASingleTarget(targetString,Iterables.transform(targetsBuilt,ct -> ct.getLabel().toString())),Code.TOO_MANY_TARGETS_SPECIFIED);\n    }\n    for (    ConfiguredTarget target : targetsBuilt) {\n      BlazeCommandResult targetValidation=fullyValidateTarget(env,target);\n      if (!targetValidation.isSuccess()) {\n        return targetValidation;\n      }\n      if (runUnder != null && target.getLabel().equals(runUnder.getLabel())) {\n        if (runUnderTarget != null) {\n          return reportAndCreateFailureResult(env,\"Can't identify the run_under target from multiple options?\",Code.RUN_UNDER_TARGET_NOT_BUILT);\n        }\n        runUnderTarget=target;\n      }\n else       if (targetToRun == null) {\n        targetToRun=target;\n      }\n else {\n        return reportAndCreateFailureResult(env,makeErrorMessageForNotHavingASingleTarget(targetString,Iterables.transform(targetsBuilt,ct -> ct.getLabel().toString())),Code.TOO_MANY_TARGETS_SPECIFIED);\n      }\n    }\n  }\n  if (targetToRun == null && runUnderTarget != null) {\n    targetToRun=runUnderTarget;\n  }\n  if (targetToRun == null) {\n    return reportAndCreateFailureResult(env,NO_TARGET_MESSAGE,Code.NO_TARGET_SPECIFIED);\n  }\n  BuildConfigurationValue configuration=env.getSkyframeExecutor().getConfiguration(env.getReporter(),targetToRun.getConfigurationKey());\n  if (configuration == null) {\n    configuration=result.getBuildConfigurationCollection().getTargetConfigurations().get(0);\n  }\n  if (!configuration.buildRunfilesManifests()) {\n    return reportAndCreateFailureResult(env,\"--nobuild_runfile_manifests is incompatible with the \\\"run\\\" command\",Code.RUN_PREREQ_UNMET);\n  }\n  Path runfilesDir;\n  FilesToRunProvider provider=targetToRun.getProvider(FilesToRunProvider.class);\n  RunfilesSupport runfilesSupport=provider == null ? null : provider.getRunfilesSupport();\n  if (runfilesSupport == null) {\n    runfilesDir=env.getWorkingDirectory();\n  }\n else {\n    try {\n      runfilesDir=ensureRunfilesBuilt(env,runfilesSupport,env.getSkyframeExecutor().getConfiguration(env.getReporter(),targetToRun.getConfigurationKey()));\n    }\n catch (    RunfilesException e) {\n      env.getReporter().handle(Event.error(e.getMessage()));\n      return BlazeCommandResult.failureDetail(e.createFailureDetail());\n    }\ncatch (    InterruptedException e) {\n      env.getReporter().handle(Event.error(\"Interrupted\"));\n      return BlazeCommandResult.failureDetail(FailureDetail.newBuilder().setInterrupted(Interrupted.newBuilder().setCode(Interrupted.Code.INTERRUPTED)).build());\n    }\n  }\n  Map<String,String> runEnvironment=new TreeMap<>();\n  List<String> cmdLine=new ArrayList<>();\n  List<String> prettyCmdLine=new ArrayList<>();\n  Path workingDir;\n  runEnvironment.put(\"BUILD_WORKSPACE_DIRECTORY\",env.getWorkspace().getPathString());\n  runEnvironment.put(\"BUILD_WORKING_DIRECTORY\",env.getWorkingDirectory().getPathString());\n  if (targetToRun.getProvider(TestProvider.class) != null) {\n    ImmutableList<Artifact.DerivedArtifact> statusArtifacts=TestProvider.getTestStatusArtifacts(targetToRun);\n    if (statusArtifacts.size() != 1) {\n      return reportAndCreateFailureResult(env,MULTIPLE_TESTS_MESSAGE,Code.TOO_MANY_TEST_SHARDS_OR_RUNS);\n    }\n    TestRunnerAction testAction=(TestRunnerAction)env.getSkyframeExecutor().getActionGraph(env.getReporter()).getGeneratingAction(Iterables.getOnlyElement(statusArtifacts));\n    TestTargetExecutionSettings settings=testAction.getExecutionSettings();\n    Preconditions.checkState(settings.getRunfilesSymlinksCreated() == options.getOptions(CoreOptions.class).buildRunfiles);\n    ExecutionOptions executionOptions=options.getOptions(ExecutionOptions.class);\n    Path tmpDirRoot=TestStrategy.getTmpRoot(env.getWorkspace(),env.getExecRoot(),executionOptions);\n    PathFragment maybeRelativeTmpDir=tmpDirRoot.startsWith(env.getExecRoot()) ? tmpDirRoot.relativeTo(env.getExecRoot()) : tmpDirRoot.asFragment();\n    Duration timeout=configuration.getFragment(TestConfiguration.class).getTestTimeout().get(testAction.getTestProperties().getTimeout());\n    runEnvironment.putAll(testPolicy.computeTestEnvironment(testAction,env.getClientEnv(),timeout,settings.getRunfilesDir().relativeTo(env.getExecRoot()),maybeRelativeTmpDir.getRelative(TestStrategy.getTmpDirName(testAction))));\n    workingDir=env.getExecRoot();\n    try {\n      testAction.prepare(env.getExecRoot(),ArtifactPathResolver.IDENTITY,null,false);\n    }\n catch (    IOException e) {\n      return reportAndCreateFailureResult(env,\"Error while setting up test: \" + e.getMessage(),Code.TEST_ENVIRONMENT_SETUP_FAILURE);\n    }\ncatch (    InterruptedException e) {\n      return reportAndCreateFailureResult(env,\"Error while setting up test: \" + e.getMessage(),Code.TEST_ENVIRONMENT_SETUP_INTERRUPTED);\n    }\n    try {\n      cmdLine.addAll(TestStrategy.getArgs(testAction));\n      cmdLine.addAll(commandLineArgs);\n      prettyCmdLine.addAll(cmdLine);\n    }\n catch (    ExecException e) {\n      return reportAndCreateFailureResult(env,Strings.nullToEmpty(e.getMessage()),Code.COMMAND_LINE_EXPANSION_FAILURE);\n    }\ncatch (    InterruptedException e) {\n      String message=\"run: command line expansion interrupted\";\n      env.getReporter().handle(Event.error(message));\n      return BlazeCommandResult.detailedExitCode(InterruptedFailureDetails.detailedExitCode(message));\n    }\n  }\n else {\n    workingDir=runfilesDir;\n    if (runfilesSupport != null) {\n      runfilesSupport.getActionEnvironment().resolve(runEnvironment,env.getClientEnv());\n    }\n    try {\n      List<String> args=computeArgs(targetToRun,commandLineArgs);\n      constructCommandLine(cmdLine,prettyCmdLine,env,configuration,targetToRun,runUnderTarget,args);\n    }\n catch (    NoShellFoundException e) {\n      return reportAndCreateFailureResult(env,\"the \\\"run\\\" command needs a shell with \\\"--run_under\\\"; use the\" + \" --shell_executable=<path> flag to specify its path, e.g.\" + \" --shell_executable=/bin/bash\",Code.NO_SHELL_SPECIFIED);\n    }\ncatch (    InterruptedException e) {\n      String message=\"run: command line expansion interrupted\";\n      env.getReporter().handle(Event.error(message));\n      return BlazeCommandResult.detailedExitCode(InterruptedFailureDetails.detailedExitCode(message));\n    }\ncatch (    CommandLineExpansionException e) {\n      return reportAndCreateFailureResult(env,Strings.nullToEmpty(e.getMessage()),Code.COMMAND_LINE_EXPANSION_FAILURE);\n    }\n  }\n  if (runOptions.scriptPath != null) {\n    String unisolatedCommand=CommandFailureUtils.describeCommand(CommandDescriptionForm.COMPLETE_UNISOLATED,false,cmdLine,runEnvironment,workingDir.getPathString(),configuration.checksum(),null);\n    PathFragment shExecutable=ShToolchain.getPath(configuration);\n    if (shExecutable.isEmpty()) {\n      return reportAndCreateFailureResult(env,\"the \\\"run\\\" command needs a shell with \\\"--script_path\\\"; use the\" + \" --shell_executable=<path> flag to specify its path, e.g.\" + \" --shell_executable=/bin/bash\",Code.NO_SHELL_SPECIFIED);\n    }\n    try {\n      writeScript(env,shExecutable,runOptions.scriptPath,unisolatedCommand);\n      return BlazeCommandResult.success();\n    }\n catch (    IOException e) {\n      String message=\"Error writing run script: \" + e.getMessage();\n      return reportAndCreateFailureResult(env,message,Code.SCRIPT_WRITE_FAILURE);\n    }\n  }\n  boolean batchMode=env.getRuntime().getStartupOptionsProvider().getOptions(BlazeServerStartupOptions.class).batch;\n  if (batchMode) {\n    runEnvironment.putAll(env.getClientEnv());\n  }\n  env.getReporter().handle(Event.info(null,\"Running command line: \" + ShellEscaper.escapeJoinAll(prettyCmdLine)));\n  ExecRequest.Builder execDescription=ExecRequest.newBuilder().setWorkingDirectory(ByteString.copyFrom(workingDir.getPathString(),StandardCharsets.ISO_8859_1));\n  if (OS.getCurrent() == OS.WINDOWS) {\n    boolean isBinary=true;\n    for (    String arg : cmdLine) {\n      if (!isBinary) {\n        arg=ShellUtils.windowsEscapeArg(arg);\n      }\n      execDescription.addArgv(ByteString.copyFrom(arg,StandardCharsets.ISO_8859_1));\n      isBinary=false;\n    }\n  }\n else {\n    PathFragment shExecutable=ShToolchain.getPath(configuration);\n    if (shExecutable.isEmpty()) {\n      return reportAndCreateFailureResult(env,\"the \\\"run\\\" command needs a shell with; use the --shell_executable=<path> \" + \"flag to specify the shell's path, e.g. --shell_executable=/bin/bash\",Code.NO_SHELL_SPECIFIED);\n    }\n    String shellEscaped=ShellEscaper.escapeJoinAll(cmdLine);\n    if (OS.getCurrent() == OS.WINDOWS) {\n      shellEscaped=\"\\\"\" + shellEscaped.replace(\"\\\\\",\"\\\\\\\\\").replace(\"\\\"\",\"\\\\\\\"\") + \"\\\"\";\n    }\n    ImmutableList<String> shellCmdLine=ImmutableList.<String>of(shExecutable.getPathString(),\"-c\",shellEscaped);\n    for (    String arg : shellCmdLine) {\n      execDescription.addArgv(ByteString.copyFrom(arg,StandardCharsets.ISO_8859_1));\n    }\n  }\n  for (  Map.Entry<String,String> variable : runEnvironment.entrySet()) {\n    execDescription.addEnvironmentVariable(EnvironmentVariable.newBuilder().setName(ByteString.copyFrom(variable.getKey(),StandardCharsets.ISO_8859_1)).setValue(ByteString.copyFrom(variable.getValue(),StandardCharsets.ISO_8859_1)).build());\n  }\n  return BlazeCommandResult.execute(execDescription.build());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1407,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 137,
        "startLineNumber" : 426,
        "startColumnNumber" : 10,
        "endLineNumber" : 428,
        "endColumnNumber" : 39
      },
      "nodeContext" : "tmpDirRoot.startsWith(env.getExecRoot()) ? tmpDirRoot.relativeTo(env.getExecRoot()) : tmpDirRoot.asFragment()",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 16,
      "astHeight" : 4
    },
    "tokenLength" : 4,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 40,
    "startLineNumber" : 426,
    "startColumnNumber" : 10,
    "endLineNumber" : 426,
    "endColumnNumber" : 50
  } ],
  "layoutRelationDataList" : [ ]
}