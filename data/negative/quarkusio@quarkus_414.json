{
  "id" : 414,
  "expression" : "methodName",
  "projectName" : "quarkusio@quarkus",
  "commitID" : "8cd8fbdc57f2069feb1d372e9746bb1ce955980b",
  "filePath" : "extensions/spring-data-jpa/deployment/src/main/java/io/quarkus/spring/data/deployment/MethodNameParser.java",
  "occurrences" : 9,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "methodName",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 82,
      "startColumnNumber" : 51,
      "endLineNumber" : 82,
      "endColumnNumber" : 61
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 82,
        "startColumnNumber" : 45,
        "endLineNumber" : 82,
        "endColumnNumber" : 111
      },
      "nodeContext" : "\"'\" + methodName + \"' of repository '\"+ repositoryClassInfo+ \"'\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 96,
        "startLineNumber" : 82,
        "startColumnNumber" : 15,
        "endLineNumber" : 82,
        "endColumnNumber" : 111
      },
      "nodeContext" : "repositoryMethodDescription=\"'\" + methodName + \"' of repository '\"+ repositoryClassInfo+ \"'\"",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 104,
        "startLineNumber" : 82,
        "startColumnNumber" : 8,
        "endLineNumber" : 82,
        "endColumnNumber" : 112
      },
      "nodeContext" : "String repositoryMethodDescription=\"'\" + methodName + \"' of repository '\"+ repositoryClassInfo+ \"'\";\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 12460,
        "startLineNumber" : 79,
        "startColumnNumber" : 47,
        "endLineNumber" : 338,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String methodName=methodInfo.name();\n  ClassInfo repositoryClassInfo=methodInfo.declaringClass();\n  String repositoryMethodDescription=\"'\" + methodName + \"' of repository '\"+ repositoryClassInfo+ \"'\";\n  QueryType queryType=getType(methodName);\n  if (queryType == null) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed. Did you forget to annotate the method with '@Query'?\");\n  }\n  int byIndex=methodName.indexOf(\"By\");\n  if ((byIndex == -1) || (byIndex + 2 >= methodName.length())) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed as there is no proper 'By' clause in the name.\");\n  }\n  Integer topCount=null;\n  int firstIndex=methodName.indexOf(\"First\");\n  int topIndex=methodName.indexOf(\"Top\");\n  if ((firstIndex != -1) || (topIndex != -1)) {\n    int effectiveFirstOrTopIndex=(topIndex > -1 && firstIndex > -1) ? Math.max(topIndex,firstIndex) : Math.max(firstIndex,topIndex);\n    if (effectiveFirstOrTopIndex < byIndex) {\n      try {\n        String topCountStr=methodName.substring(effectiveFirstOrTopIndex,byIndex).replace(\"Top\",\"\").replace(\"First\",\"\");\n        if (topCountStr.isEmpty()) {\n          topCount=1;\n        }\n else {\n          topCount=Integer.valueOf(topCountStr);\n        }\n      }\n catch (      Exception e) {\n        throw new UnableToParseMethodException(\"Unable to parse query with limiting results clause. Offending method is \" + repositoryMethodDescription + \".\");\n      }\n    }\n  }\n  if ((topCount != null) && (queryType != QueryType.SELECT)) {\n    throw new UnableToParseMethodException(\"When 'Top' or 'First' is specified, the query must be a find query. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (methodName.substring(0,byIndex).contains(\"Distinct\")) {\n    throw new UnableToParseMethodException(\"Distinct is not yet supported. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  String afterByPart=methodName.substring(byIndex + 2);\n  boolean allIgnoreCase=false;\n  if (afterByPart.contains(ALL_IGNORE_CASE)) {\n    allIgnoreCase=true;\n    afterByPart=afterByPart.replace(ALL_IGNORE_CASE,\"\");\n  }\n  Sort sort=null;\n  if (containsLogicOperator(afterByPart,ORDER_BY)) {\n    int orderByIndex=afterByPart.indexOf(ORDER_BY);\n    if (orderByIndex + ORDER_BY.length() == afterByPart.length()) {\n      throw new UnableToParseMethodException(\"A field must by supplied after 'OrderBy' . Offending method is \" + repositoryMethodDescription + \".\");\n    }\n    String afterOrderByPart=afterByPart.substring(orderByIndex + ORDER_BY.length());\n    afterByPart=afterByPart.substring(0,orderByIndex);\n    boolean ascending=true;\n    if (afterOrderByPart.endsWith(\"Asc\")) {\n      ascending=true;\n      afterOrderByPart=afterOrderByPart.replace(\"Asc\",\"\");\n    }\n else     if (afterOrderByPart.endsWith(\"Desc\")) {\n      ascending=false;\n      afterOrderByPart=afterOrderByPart.replace(\"Desc\",\"\");\n    }\n    String orderField=lowerFirstLetter(afterOrderByPart);\n    if (!entityContainsField(orderField)) {\n      throw new UnableToParseMethodException(\"Field \" + orderField + \" which was configured as the order field does not exist in the entity. Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (ascending) {\n      sort=Sort.ascending(orderField);\n    }\n else {\n      sort=Sort.descending(orderField);\n    }\n  }\n  List<String> parts=Collections.singletonList(afterByPart);\n  boolean containsAnd=containsLogicOperator(afterByPart,\"And\");\n  boolean containsOr=containsLogicOperator(afterByPart,\"Or\");\n  if (containsAnd && containsOr) {\n    throw new UnableToParseMethodException(\"'And' and 'Or' clauses cannot be mixed in a method name - Try specifying the Query with the @Query annotation. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (containsAnd) {\n    parts=Arrays.asList(afterByPart.split(\"And\"));\n  }\n else   if (containsOr) {\n    parts=Arrays.asList(afterByPart.split(\"Or\"));\n  }\n  MutableReference<List<ClassInfo>> mappedSuperClassInfoRef=MutableReference.of(mappedSuperClassInfos);\n  StringBuilder where=new StringBuilder();\n  int paramsCount=0;\n  for (  String part : parts) {\n    if (part.isEmpty()) {\n      continue;\n    }\n    String fieldName;\n    boolean ignoreCase=false;\n    if (part.endsWith(IGNORE_CASE)) {\n      ignoreCase=true;\n      part=part.replace(IGNORE_CASE,\"\");\n    }\n    String operation=getFieldOperation(part);\n    if (operation == null) {\n      fieldName=lowerFirstLetter(part);\n    }\n else {\n      fieldName=lowerFirstLetter(part.replaceAll(operation,\"\"));\n    }\n    FieldInfo fieldInfo=getFieldInfo(fieldName,entityClass,mappedSuperClassInfoRef);\n    if (fieldInfo == null) {\n      StringBuilder fieldPathBuilder=new StringBuilder(fieldName.length() + 5);\n      fieldInfo=resolveNestedField(repositoryMethodDescription,fieldName,fieldPathBuilder);\n      fieldName=fieldPathBuilder.toString();\n    }\n    validateFieldWithOperation(operation,fieldInfo,fieldName,repositoryMethodDescription);\n    if ((ignoreCase || allIgnoreCase) && !DotNames.STRING.equals(fieldInfo.type().name())) {\n      throw new UnableToParseMethodException(\"IgnoreCase cannot be specified for field\" + fieldInfo.name() + \" because it is not a String type. \"+ \"Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (where.length() > 0) {\n      where.append(containsAnd ? \" AND \" : \" OR \");\n    }\n    String upperPrefix=(ignoreCase || allIgnoreCase) ? \"UPPER(\" : \"\";\n    String upperSuffix=(ignoreCase || allIgnoreCase) ? \")\" : \"\";\n    where.append(upperPrefix).append(fieldName).append(upperSuffix);\n    if ((operation == null) || \"Equals\".equals(operation) || \"Is\".equals(operation)) {\n      paramsCount++;\n      where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n    }\n else {\nswitch (operation) {\ncase \"IsNot\":case \"Not\":        paramsCount++;\n      where.append(\" <> ?\").append(paramsCount);\n    break;\ncase \"IsNull\":case \"Null\":  where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n}\nString whereQuery=where.toString().isEmpty() ? \"\" : \" WHERE \" + where.toString();\nreturn new Result(entityClass,\"FROM \" + getEntityName() + whereQuery,queryType,paramsCount,sort,topCount);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1110,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 12503,
        "startLineNumber" : 79,
        "startColumnNumber" : 4,
        "endLineNumber" : 338,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public Result parse(MethodInfo methodInfo){\n  String methodName=methodInfo.name();\n  ClassInfo repositoryClassInfo=methodInfo.declaringClass();\n  String repositoryMethodDescription=\"'\" + methodName + \"' of repository '\"+ repositoryClassInfo+ \"'\";\n  QueryType queryType=getType(methodName);\n  if (queryType == null) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed. Did you forget to annotate the method with '@Query'?\");\n  }\n  int byIndex=methodName.indexOf(\"By\");\n  if ((byIndex == -1) || (byIndex + 2 >= methodName.length())) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed as there is no proper 'By' clause in the name.\");\n  }\n  Integer topCount=null;\n  int firstIndex=methodName.indexOf(\"First\");\n  int topIndex=methodName.indexOf(\"Top\");\n  if ((firstIndex != -1) || (topIndex != -1)) {\n    int effectiveFirstOrTopIndex=(topIndex > -1 && firstIndex > -1) ? Math.max(topIndex,firstIndex) : Math.max(firstIndex,topIndex);\n    if (effectiveFirstOrTopIndex < byIndex) {\n      try {\n        String topCountStr=methodName.substring(effectiveFirstOrTopIndex,byIndex).replace(\"Top\",\"\").replace(\"First\",\"\");\n        if (topCountStr.isEmpty()) {\n          topCount=1;\n        }\n else {\n          topCount=Integer.valueOf(topCountStr);\n        }\n      }\n catch (      Exception e) {\n        throw new UnableToParseMethodException(\"Unable to parse query with limiting results clause. Offending method is \" + repositoryMethodDescription + \".\");\n      }\n    }\n  }\n  if ((topCount != null) && (queryType != QueryType.SELECT)) {\n    throw new UnableToParseMethodException(\"When 'Top' or 'First' is specified, the query must be a find query. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (methodName.substring(0,byIndex).contains(\"Distinct\")) {\n    throw new UnableToParseMethodException(\"Distinct is not yet supported. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  String afterByPart=methodName.substring(byIndex + 2);\n  boolean allIgnoreCase=false;\n  if (afterByPart.contains(ALL_IGNORE_CASE)) {\n    allIgnoreCase=true;\n    afterByPart=afterByPart.replace(ALL_IGNORE_CASE,\"\");\n  }\n  Sort sort=null;\n  if (containsLogicOperator(afterByPart,ORDER_BY)) {\n    int orderByIndex=afterByPart.indexOf(ORDER_BY);\n    if (orderByIndex + ORDER_BY.length() == afterByPart.length()) {\n      throw new UnableToParseMethodException(\"A field must by supplied after 'OrderBy' . Offending method is \" + repositoryMethodDescription + \".\");\n    }\n    String afterOrderByPart=afterByPart.substring(orderByIndex + ORDER_BY.length());\n    afterByPart=afterByPart.substring(0,orderByIndex);\n    boolean ascending=true;\n    if (afterOrderByPart.endsWith(\"Asc\")) {\n      ascending=true;\n      afterOrderByPart=afterOrderByPart.replace(\"Asc\",\"\");\n    }\n else     if (afterOrderByPart.endsWith(\"Desc\")) {\n      ascending=false;\n      afterOrderByPart=afterOrderByPart.replace(\"Desc\",\"\");\n    }\n    String orderField=lowerFirstLetter(afterOrderByPart);\n    if (!entityContainsField(orderField)) {\n      throw new UnableToParseMethodException(\"Field \" + orderField + \" which was configured as the order field does not exist in the entity. Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (ascending) {\n      sort=Sort.ascending(orderField);\n    }\n else {\n      sort=Sort.descending(orderField);\n    }\n  }\n  List<String> parts=Collections.singletonList(afterByPart);\n  boolean containsAnd=containsLogicOperator(afterByPart,\"And\");\n  boolean containsOr=containsLogicOperator(afterByPart,\"Or\");\n  if (containsAnd && containsOr) {\n    throw new UnableToParseMethodException(\"'And' and 'Or' clauses cannot be mixed in a method name - Try specifying the Query with the @Query annotation. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (containsAnd) {\n    parts=Arrays.asList(afterByPart.split(\"And\"));\n  }\n else   if (containsOr) {\n    parts=Arrays.asList(afterByPart.split(\"Or\"));\n  }\n  MutableReference<List<ClassInfo>> mappedSuperClassInfoRef=MutableReference.of(mappedSuperClassInfos);\n  StringBuilder where=new StringBuilder();\n  int paramsCount=0;\n  for (  String part : parts) {\n    if (part.isEmpty()) {\n      continue;\n    }\n    String fieldName;\n    boolean ignoreCase=false;\n    if (part.endsWith(IGNORE_CASE)) {\n      ignoreCase=true;\n      part=part.replace(IGNORE_CASE,\"\");\n    }\n    String operation=getFieldOperation(part);\n    if (operation == null) {\n      fieldName=lowerFirstLetter(part);\n    }\n else {\n      fieldName=lowerFirstLetter(part.replaceAll(operation,\"\"));\n    }\n    FieldInfo fieldInfo=getFieldInfo(fieldName,entityClass,mappedSuperClassInfoRef);\n    if (fieldInfo == null) {\n      StringBuilder fieldPathBuilder=new StringBuilder(fieldName.length() + 5);\n      fieldInfo=resolveNestedField(repositoryMethodDescription,fieldName,fieldPathBuilder);\n      fieldName=fieldPathBuilder.toString();\n    }\n    validateFieldWithOperation(operation,fieldInfo,fieldName,repositoryMethodDescription);\n    if ((ignoreCase || allIgnoreCase) && !DotNames.STRING.equals(fieldInfo.type().name())) {\n      throw new UnableToParseMethodException(\"IgnoreCase cannot be specified for field\" + fieldInfo.name() + \" because it is not a String type. \"+ \"Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (where.length() > 0) {\n      where.append(containsAnd ? \" AND \" : \" OR \");\n    }\n    String upperPrefix=(ignoreCase || allIgnoreCase) ? \"UPPER(\" : \"\";\n    String upperSuffix=(ignoreCase || allIgnoreCase) ? \")\" : \"\";\n    where.append(upperPrefix).append(fieldName).append(upperSuffix);\n    if ((operation == null) || \"Equals\".equals(operation) || \"Is\".equals(operation)) {\n      paramsCount++;\n      where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n    }\n else {\nswitch (operation) {\ncase \"IsNot\":case \"Not\":        paramsCount++;\n      where.append(\" <> ?\").append(paramsCount);\n    break;\ncase \"IsNull\":case \"Null\":  where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n}\nString whereQuery=where.toString().isEmpty() ? \"\" : \" WHERE \" + where.toString();\nreturn new Result(entityClass,\"FROM \" + getEntityName() + whereQuery,queryType,paramsCount,sort,topCount);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1119,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 104,
        "startLineNumber" : 82,
        "startColumnNumber" : 8,
        "endLineNumber" : 82,
        "endColumnNumber" : 112
      },
      "nodeContext" : "String repositoryMethodDescription=\"'\" + methodName + \"' of repository '\"+ repositoryClassInfo+ \"'\";\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "methodName",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 83,
      "startColumnNumber" : 38,
      "endLineNumber" : 83,
      "endColumnNumber" : 48
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 83,
        "startColumnNumber" : 30,
        "endLineNumber" : 83,
        "endColumnNumber" : 49
      },
      "nodeContext" : "getType(methodName)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 83,
        "startColumnNumber" : 18,
        "endLineNumber" : 83,
        "endColumnNumber" : 49
      },
      "nodeContext" : "queryType=getType(methodName)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 83,
        "startColumnNumber" : 8,
        "endLineNumber" : 83,
        "endColumnNumber" : 50
      },
      "nodeContext" : "QueryType queryType=getType(methodName);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 12460,
        "startLineNumber" : 79,
        "startColumnNumber" : 47,
        "endLineNumber" : 338,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String methodName=methodInfo.name();\n  ClassInfo repositoryClassInfo=methodInfo.declaringClass();\n  String repositoryMethodDescription=\"'\" + methodName + \"' of repository '\"+ repositoryClassInfo+ \"'\";\n  QueryType queryType=getType(methodName);\n  if (queryType == null) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed. Did you forget to annotate the method with '@Query'?\");\n  }\n  int byIndex=methodName.indexOf(\"By\");\n  if ((byIndex == -1) || (byIndex + 2 >= methodName.length())) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed as there is no proper 'By' clause in the name.\");\n  }\n  Integer topCount=null;\n  int firstIndex=methodName.indexOf(\"First\");\n  int topIndex=methodName.indexOf(\"Top\");\n  if ((firstIndex != -1) || (topIndex != -1)) {\n    int effectiveFirstOrTopIndex=(topIndex > -1 && firstIndex > -1) ? Math.max(topIndex,firstIndex) : Math.max(firstIndex,topIndex);\n    if (effectiveFirstOrTopIndex < byIndex) {\n      try {\n        String topCountStr=methodName.substring(effectiveFirstOrTopIndex,byIndex).replace(\"Top\",\"\").replace(\"First\",\"\");\n        if (topCountStr.isEmpty()) {\n          topCount=1;\n        }\n else {\n          topCount=Integer.valueOf(topCountStr);\n        }\n      }\n catch (      Exception e) {\n        throw new UnableToParseMethodException(\"Unable to parse query with limiting results clause. Offending method is \" + repositoryMethodDescription + \".\");\n      }\n    }\n  }\n  if ((topCount != null) && (queryType != QueryType.SELECT)) {\n    throw new UnableToParseMethodException(\"When 'Top' or 'First' is specified, the query must be a find query. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (methodName.substring(0,byIndex).contains(\"Distinct\")) {\n    throw new UnableToParseMethodException(\"Distinct is not yet supported. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  String afterByPart=methodName.substring(byIndex + 2);\n  boolean allIgnoreCase=false;\n  if (afterByPart.contains(ALL_IGNORE_CASE)) {\n    allIgnoreCase=true;\n    afterByPart=afterByPart.replace(ALL_IGNORE_CASE,\"\");\n  }\n  Sort sort=null;\n  if (containsLogicOperator(afterByPart,ORDER_BY)) {\n    int orderByIndex=afterByPart.indexOf(ORDER_BY);\n    if (orderByIndex + ORDER_BY.length() == afterByPart.length()) {\n      throw new UnableToParseMethodException(\"A field must by supplied after 'OrderBy' . Offending method is \" + repositoryMethodDescription + \".\");\n    }\n    String afterOrderByPart=afterByPart.substring(orderByIndex + ORDER_BY.length());\n    afterByPart=afterByPart.substring(0,orderByIndex);\n    boolean ascending=true;\n    if (afterOrderByPart.endsWith(\"Asc\")) {\n      ascending=true;\n      afterOrderByPart=afterOrderByPart.replace(\"Asc\",\"\");\n    }\n else     if (afterOrderByPart.endsWith(\"Desc\")) {\n      ascending=false;\n      afterOrderByPart=afterOrderByPart.replace(\"Desc\",\"\");\n    }\n    String orderField=lowerFirstLetter(afterOrderByPart);\n    if (!entityContainsField(orderField)) {\n      throw new UnableToParseMethodException(\"Field \" + orderField + \" which was configured as the order field does not exist in the entity. Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (ascending) {\n      sort=Sort.ascending(orderField);\n    }\n else {\n      sort=Sort.descending(orderField);\n    }\n  }\n  List<String> parts=Collections.singletonList(afterByPart);\n  boolean containsAnd=containsLogicOperator(afterByPart,\"And\");\n  boolean containsOr=containsLogicOperator(afterByPart,\"Or\");\n  if (containsAnd && containsOr) {\n    throw new UnableToParseMethodException(\"'And' and 'Or' clauses cannot be mixed in a method name - Try specifying the Query with the @Query annotation. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (containsAnd) {\n    parts=Arrays.asList(afterByPart.split(\"And\"));\n  }\n else   if (containsOr) {\n    parts=Arrays.asList(afterByPart.split(\"Or\"));\n  }\n  MutableReference<List<ClassInfo>> mappedSuperClassInfoRef=MutableReference.of(mappedSuperClassInfos);\n  StringBuilder where=new StringBuilder();\n  int paramsCount=0;\n  for (  String part : parts) {\n    if (part.isEmpty()) {\n      continue;\n    }\n    String fieldName;\n    boolean ignoreCase=false;\n    if (part.endsWith(IGNORE_CASE)) {\n      ignoreCase=true;\n      part=part.replace(IGNORE_CASE,\"\");\n    }\n    String operation=getFieldOperation(part);\n    if (operation == null) {\n      fieldName=lowerFirstLetter(part);\n    }\n else {\n      fieldName=lowerFirstLetter(part.replaceAll(operation,\"\"));\n    }\n    FieldInfo fieldInfo=getFieldInfo(fieldName,entityClass,mappedSuperClassInfoRef);\n    if (fieldInfo == null) {\n      StringBuilder fieldPathBuilder=new StringBuilder(fieldName.length() + 5);\n      fieldInfo=resolveNestedField(repositoryMethodDescription,fieldName,fieldPathBuilder);\n      fieldName=fieldPathBuilder.toString();\n    }\n    validateFieldWithOperation(operation,fieldInfo,fieldName,repositoryMethodDescription);\n    if ((ignoreCase || allIgnoreCase) && !DotNames.STRING.equals(fieldInfo.type().name())) {\n      throw new UnableToParseMethodException(\"IgnoreCase cannot be specified for field\" + fieldInfo.name() + \" because it is not a String type. \"+ \"Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (where.length() > 0) {\n      where.append(containsAnd ? \" AND \" : \" OR \");\n    }\n    String upperPrefix=(ignoreCase || allIgnoreCase) ? \"UPPER(\" : \"\";\n    String upperSuffix=(ignoreCase || allIgnoreCase) ? \")\" : \"\";\n    where.append(upperPrefix).append(fieldName).append(upperSuffix);\n    if ((operation == null) || \"Equals\".equals(operation) || \"Is\".equals(operation)) {\n      paramsCount++;\n      where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n    }\n else {\nswitch (operation) {\ncase \"IsNot\":case \"Not\":        paramsCount++;\n      where.append(\" <> ?\").append(paramsCount);\n    break;\ncase \"IsNull\":case \"Null\":  where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n}\nString whereQuery=where.toString().isEmpty() ? \"\" : \" WHERE \" + where.toString();\nreturn new Result(entityClass,\"FROM \" + getEntityName() + whereQuery,queryType,paramsCount,sort,topCount);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1110,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 12503,
        "startLineNumber" : 79,
        "startColumnNumber" : 4,
        "endLineNumber" : 338,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public Result parse(MethodInfo methodInfo){\n  String methodName=methodInfo.name();\n  ClassInfo repositoryClassInfo=methodInfo.declaringClass();\n  String repositoryMethodDescription=\"'\" + methodName + \"' of repository '\"+ repositoryClassInfo+ \"'\";\n  QueryType queryType=getType(methodName);\n  if (queryType == null) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed. Did you forget to annotate the method with '@Query'?\");\n  }\n  int byIndex=methodName.indexOf(\"By\");\n  if ((byIndex == -1) || (byIndex + 2 >= methodName.length())) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed as there is no proper 'By' clause in the name.\");\n  }\n  Integer topCount=null;\n  int firstIndex=methodName.indexOf(\"First\");\n  int topIndex=methodName.indexOf(\"Top\");\n  if ((firstIndex != -1) || (topIndex != -1)) {\n    int effectiveFirstOrTopIndex=(topIndex > -1 && firstIndex > -1) ? Math.max(topIndex,firstIndex) : Math.max(firstIndex,topIndex);\n    if (effectiveFirstOrTopIndex < byIndex) {\n      try {\n        String topCountStr=methodName.substring(effectiveFirstOrTopIndex,byIndex).replace(\"Top\",\"\").replace(\"First\",\"\");\n        if (topCountStr.isEmpty()) {\n          topCount=1;\n        }\n else {\n          topCount=Integer.valueOf(topCountStr);\n        }\n      }\n catch (      Exception e) {\n        throw new UnableToParseMethodException(\"Unable to parse query with limiting results clause. Offending method is \" + repositoryMethodDescription + \".\");\n      }\n    }\n  }\n  if ((topCount != null) && (queryType != QueryType.SELECT)) {\n    throw new UnableToParseMethodException(\"When 'Top' or 'First' is specified, the query must be a find query. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (methodName.substring(0,byIndex).contains(\"Distinct\")) {\n    throw new UnableToParseMethodException(\"Distinct is not yet supported. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  String afterByPart=methodName.substring(byIndex + 2);\n  boolean allIgnoreCase=false;\n  if (afterByPart.contains(ALL_IGNORE_CASE)) {\n    allIgnoreCase=true;\n    afterByPart=afterByPart.replace(ALL_IGNORE_CASE,\"\");\n  }\n  Sort sort=null;\n  if (containsLogicOperator(afterByPart,ORDER_BY)) {\n    int orderByIndex=afterByPart.indexOf(ORDER_BY);\n    if (orderByIndex + ORDER_BY.length() == afterByPart.length()) {\n      throw new UnableToParseMethodException(\"A field must by supplied after 'OrderBy' . Offending method is \" + repositoryMethodDescription + \".\");\n    }\n    String afterOrderByPart=afterByPart.substring(orderByIndex + ORDER_BY.length());\n    afterByPart=afterByPart.substring(0,orderByIndex);\n    boolean ascending=true;\n    if (afterOrderByPart.endsWith(\"Asc\")) {\n      ascending=true;\n      afterOrderByPart=afterOrderByPart.replace(\"Asc\",\"\");\n    }\n else     if (afterOrderByPart.endsWith(\"Desc\")) {\n      ascending=false;\n      afterOrderByPart=afterOrderByPart.replace(\"Desc\",\"\");\n    }\n    String orderField=lowerFirstLetter(afterOrderByPart);\n    if (!entityContainsField(orderField)) {\n      throw new UnableToParseMethodException(\"Field \" + orderField + \" which was configured as the order field does not exist in the entity. Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (ascending) {\n      sort=Sort.ascending(orderField);\n    }\n else {\n      sort=Sort.descending(orderField);\n    }\n  }\n  List<String> parts=Collections.singletonList(afterByPart);\n  boolean containsAnd=containsLogicOperator(afterByPart,\"And\");\n  boolean containsOr=containsLogicOperator(afterByPart,\"Or\");\n  if (containsAnd && containsOr) {\n    throw new UnableToParseMethodException(\"'And' and 'Or' clauses cannot be mixed in a method name - Try specifying the Query with the @Query annotation. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (containsAnd) {\n    parts=Arrays.asList(afterByPart.split(\"And\"));\n  }\n else   if (containsOr) {\n    parts=Arrays.asList(afterByPart.split(\"Or\"));\n  }\n  MutableReference<List<ClassInfo>> mappedSuperClassInfoRef=MutableReference.of(mappedSuperClassInfos);\n  StringBuilder where=new StringBuilder();\n  int paramsCount=0;\n  for (  String part : parts) {\n    if (part.isEmpty()) {\n      continue;\n    }\n    String fieldName;\n    boolean ignoreCase=false;\n    if (part.endsWith(IGNORE_CASE)) {\n      ignoreCase=true;\n      part=part.replace(IGNORE_CASE,\"\");\n    }\n    String operation=getFieldOperation(part);\n    if (operation == null) {\n      fieldName=lowerFirstLetter(part);\n    }\n else {\n      fieldName=lowerFirstLetter(part.replaceAll(operation,\"\"));\n    }\n    FieldInfo fieldInfo=getFieldInfo(fieldName,entityClass,mappedSuperClassInfoRef);\n    if (fieldInfo == null) {\n      StringBuilder fieldPathBuilder=new StringBuilder(fieldName.length() + 5);\n      fieldInfo=resolveNestedField(repositoryMethodDescription,fieldName,fieldPathBuilder);\n      fieldName=fieldPathBuilder.toString();\n    }\n    validateFieldWithOperation(operation,fieldInfo,fieldName,repositoryMethodDescription);\n    if ((ignoreCase || allIgnoreCase) && !DotNames.STRING.equals(fieldInfo.type().name())) {\n      throw new UnableToParseMethodException(\"IgnoreCase cannot be specified for field\" + fieldInfo.name() + \" because it is not a String type. \"+ \"Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (where.length() > 0) {\n      where.append(containsAnd ? \" AND \" : \" OR \");\n    }\n    String upperPrefix=(ignoreCase || allIgnoreCase) ? \"UPPER(\" : \"\";\n    String upperSuffix=(ignoreCase || allIgnoreCase) ? \")\" : \"\";\n    where.append(upperPrefix).append(fieldName).append(upperSuffix);\n    if ((operation == null) || \"Equals\".equals(operation) || \"Is\".equals(operation)) {\n      paramsCount++;\n      where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n    }\n else {\nswitch (operation) {\ncase \"IsNot\":case \"Not\":        paramsCount++;\n      where.append(\" <> ?\").append(paramsCount);\n    break;\ncase \"IsNull\":case \"Null\":  where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n}\nString whereQuery=where.toString().isEmpty() ? \"\" : \" WHERE \" + where.toString();\nreturn new Result(entityClass,\"FROM \" + getEntityName() + whereQuery,queryType,paramsCount,sort,topCount);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1119,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 83,
        "startColumnNumber" : 8,
        "endLineNumber" : 83,
        "endColumnNumber" : 50
      },
      "nodeContext" : "QueryType queryType=getType(methodName);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "methodName",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 89,
      "startColumnNumber" : 22,
      "endLineNumber" : 89,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 89,
        "startColumnNumber" : 22,
        "endLineNumber" : 89,
        "endColumnNumber" : 46
      },
      "nodeContext" : "methodName.indexOf(\"By\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 89,
        "startColumnNumber" : 12,
        "endLineNumber" : 89,
        "endColumnNumber" : 46
      },
      "nodeContext" : "byIndex=methodName.indexOf(\"By\")",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 89,
        "startColumnNumber" : 8,
        "endLineNumber" : 89,
        "endColumnNumber" : 47
      },
      "nodeContext" : "int byIndex=methodName.indexOf(\"By\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 12460,
        "startLineNumber" : 79,
        "startColumnNumber" : 47,
        "endLineNumber" : 338,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String methodName=methodInfo.name();\n  ClassInfo repositoryClassInfo=methodInfo.declaringClass();\n  String repositoryMethodDescription=\"'\" + methodName + \"' of repository '\"+ repositoryClassInfo+ \"'\";\n  QueryType queryType=getType(methodName);\n  if (queryType == null) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed. Did you forget to annotate the method with '@Query'?\");\n  }\n  int byIndex=methodName.indexOf(\"By\");\n  if ((byIndex == -1) || (byIndex + 2 >= methodName.length())) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed as there is no proper 'By' clause in the name.\");\n  }\n  Integer topCount=null;\n  int firstIndex=methodName.indexOf(\"First\");\n  int topIndex=methodName.indexOf(\"Top\");\n  if ((firstIndex != -1) || (topIndex != -1)) {\n    int effectiveFirstOrTopIndex=(topIndex > -1 && firstIndex > -1) ? Math.max(topIndex,firstIndex) : Math.max(firstIndex,topIndex);\n    if (effectiveFirstOrTopIndex < byIndex) {\n      try {\n        String topCountStr=methodName.substring(effectiveFirstOrTopIndex,byIndex).replace(\"Top\",\"\").replace(\"First\",\"\");\n        if (topCountStr.isEmpty()) {\n          topCount=1;\n        }\n else {\n          topCount=Integer.valueOf(topCountStr);\n        }\n      }\n catch (      Exception e) {\n        throw new UnableToParseMethodException(\"Unable to parse query with limiting results clause. Offending method is \" + repositoryMethodDescription + \".\");\n      }\n    }\n  }\n  if ((topCount != null) && (queryType != QueryType.SELECT)) {\n    throw new UnableToParseMethodException(\"When 'Top' or 'First' is specified, the query must be a find query. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (methodName.substring(0,byIndex).contains(\"Distinct\")) {\n    throw new UnableToParseMethodException(\"Distinct is not yet supported. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  String afterByPart=methodName.substring(byIndex + 2);\n  boolean allIgnoreCase=false;\n  if (afterByPart.contains(ALL_IGNORE_CASE)) {\n    allIgnoreCase=true;\n    afterByPart=afterByPart.replace(ALL_IGNORE_CASE,\"\");\n  }\n  Sort sort=null;\n  if (containsLogicOperator(afterByPart,ORDER_BY)) {\n    int orderByIndex=afterByPart.indexOf(ORDER_BY);\n    if (orderByIndex + ORDER_BY.length() == afterByPart.length()) {\n      throw new UnableToParseMethodException(\"A field must by supplied after 'OrderBy' . Offending method is \" + repositoryMethodDescription + \".\");\n    }\n    String afterOrderByPart=afterByPart.substring(orderByIndex + ORDER_BY.length());\n    afterByPart=afterByPart.substring(0,orderByIndex);\n    boolean ascending=true;\n    if (afterOrderByPart.endsWith(\"Asc\")) {\n      ascending=true;\n      afterOrderByPart=afterOrderByPart.replace(\"Asc\",\"\");\n    }\n else     if (afterOrderByPart.endsWith(\"Desc\")) {\n      ascending=false;\n      afterOrderByPart=afterOrderByPart.replace(\"Desc\",\"\");\n    }\n    String orderField=lowerFirstLetter(afterOrderByPart);\n    if (!entityContainsField(orderField)) {\n      throw new UnableToParseMethodException(\"Field \" + orderField + \" which was configured as the order field does not exist in the entity. Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (ascending) {\n      sort=Sort.ascending(orderField);\n    }\n else {\n      sort=Sort.descending(orderField);\n    }\n  }\n  List<String> parts=Collections.singletonList(afterByPart);\n  boolean containsAnd=containsLogicOperator(afterByPart,\"And\");\n  boolean containsOr=containsLogicOperator(afterByPart,\"Or\");\n  if (containsAnd && containsOr) {\n    throw new UnableToParseMethodException(\"'And' and 'Or' clauses cannot be mixed in a method name - Try specifying the Query with the @Query annotation. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (containsAnd) {\n    parts=Arrays.asList(afterByPart.split(\"And\"));\n  }\n else   if (containsOr) {\n    parts=Arrays.asList(afterByPart.split(\"Or\"));\n  }\n  MutableReference<List<ClassInfo>> mappedSuperClassInfoRef=MutableReference.of(mappedSuperClassInfos);\n  StringBuilder where=new StringBuilder();\n  int paramsCount=0;\n  for (  String part : parts) {\n    if (part.isEmpty()) {\n      continue;\n    }\n    String fieldName;\n    boolean ignoreCase=false;\n    if (part.endsWith(IGNORE_CASE)) {\n      ignoreCase=true;\n      part=part.replace(IGNORE_CASE,\"\");\n    }\n    String operation=getFieldOperation(part);\n    if (operation == null) {\n      fieldName=lowerFirstLetter(part);\n    }\n else {\n      fieldName=lowerFirstLetter(part.replaceAll(operation,\"\"));\n    }\n    FieldInfo fieldInfo=getFieldInfo(fieldName,entityClass,mappedSuperClassInfoRef);\n    if (fieldInfo == null) {\n      StringBuilder fieldPathBuilder=new StringBuilder(fieldName.length() + 5);\n      fieldInfo=resolveNestedField(repositoryMethodDescription,fieldName,fieldPathBuilder);\n      fieldName=fieldPathBuilder.toString();\n    }\n    validateFieldWithOperation(operation,fieldInfo,fieldName,repositoryMethodDescription);\n    if ((ignoreCase || allIgnoreCase) && !DotNames.STRING.equals(fieldInfo.type().name())) {\n      throw new UnableToParseMethodException(\"IgnoreCase cannot be specified for field\" + fieldInfo.name() + \" because it is not a String type. \"+ \"Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (where.length() > 0) {\n      where.append(containsAnd ? \" AND \" : \" OR \");\n    }\n    String upperPrefix=(ignoreCase || allIgnoreCase) ? \"UPPER(\" : \"\";\n    String upperSuffix=(ignoreCase || allIgnoreCase) ? \")\" : \"\";\n    where.append(upperPrefix).append(fieldName).append(upperSuffix);\n    if ((operation == null) || \"Equals\".equals(operation) || \"Is\".equals(operation)) {\n      paramsCount++;\n      where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n    }\n else {\nswitch (operation) {\ncase \"IsNot\":case \"Not\":        paramsCount++;\n      where.append(\" <> ?\").append(paramsCount);\n    break;\ncase \"IsNull\":case \"Null\":  where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n}\nString whereQuery=where.toString().isEmpty() ? \"\" : \" WHERE \" + where.toString();\nreturn new Result(entityClass,\"FROM \" + getEntityName() + whereQuery,queryType,paramsCount,sort,topCount);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1110,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 12503,
        "startLineNumber" : 79,
        "startColumnNumber" : 4,
        "endLineNumber" : 338,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public Result parse(MethodInfo methodInfo){\n  String methodName=methodInfo.name();\n  ClassInfo repositoryClassInfo=methodInfo.declaringClass();\n  String repositoryMethodDescription=\"'\" + methodName + \"' of repository '\"+ repositoryClassInfo+ \"'\";\n  QueryType queryType=getType(methodName);\n  if (queryType == null) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed. Did you forget to annotate the method with '@Query'?\");\n  }\n  int byIndex=methodName.indexOf(\"By\");\n  if ((byIndex == -1) || (byIndex + 2 >= methodName.length())) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed as there is no proper 'By' clause in the name.\");\n  }\n  Integer topCount=null;\n  int firstIndex=methodName.indexOf(\"First\");\n  int topIndex=methodName.indexOf(\"Top\");\n  if ((firstIndex != -1) || (topIndex != -1)) {\n    int effectiveFirstOrTopIndex=(topIndex > -1 && firstIndex > -1) ? Math.max(topIndex,firstIndex) : Math.max(firstIndex,topIndex);\n    if (effectiveFirstOrTopIndex < byIndex) {\n      try {\n        String topCountStr=methodName.substring(effectiveFirstOrTopIndex,byIndex).replace(\"Top\",\"\").replace(\"First\",\"\");\n        if (topCountStr.isEmpty()) {\n          topCount=1;\n        }\n else {\n          topCount=Integer.valueOf(topCountStr);\n        }\n      }\n catch (      Exception e) {\n        throw new UnableToParseMethodException(\"Unable to parse query with limiting results clause. Offending method is \" + repositoryMethodDescription + \".\");\n      }\n    }\n  }\n  if ((topCount != null) && (queryType != QueryType.SELECT)) {\n    throw new UnableToParseMethodException(\"When 'Top' or 'First' is specified, the query must be a find query. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (methodName.substring(0,byIndex).contains(\"Distinct\")) {\n    throw new UnableToParseMethodException(\"Distinct is not yet supported. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  String afterByPart=methodName.substring(byIndex + 2);\n  boolean allIgnoreCase=false;\n  if (afterByPart.contains(ALL_IGNORE_CASE)) {\n    allIgnoreCase=true;\n    afterByPart=afterByPart.replace(ALL_IGNORE_CASE,\"\");\n  }\n  Sort sort=null;\n  if (containsLogicOperator(afterByPart,ORDER_BY)) {\n    int orderByIndex=afterByPart.indexOf(ORDER_BY);\n    if (orderByIndex + ORDER_BY.length() == afterByPart.length()) {\n      throw new UnableToParseMethodException(\"A field must by supplied after 'OrderBy' . Offending method is \" + repositoryMethodDescription + \".\");\n    }\n    String afterOrderByPart=afterByPart.substring(orderByIndex + ORDER_BY.length());\n    afterByPart=afterByPart.substring(0,orderByIndex);\n    boolean ascending=true;\n    if (afterOrderByPart.endsWith(\"Asc\")) {\n      ascending=true;\n      afterOrderByPart=afterOrderByPart.replace(\"Asc\",\"\");\n    }\n else     if (afterOrderByPart.endsWith(\"Desc\")) {\n      ascending=false;\n      afterOrderByPart=afterOrderByPart.replace(\"Desc\",\"\");\n    }\n    String orderField=lowerFirstLetter(afterOrderByPart);\n    if (!entityContainsField(orderField)) {\n      throw new UnableToParseMethodException(\"Field \" + orderField + \" which was configured as the order field does not exist in the entity. Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (ascending) {\n      sort=Sort.ascending(orderField);\n    }\n else {\n      sort=Sort.descending(orderField);\n    }\n  }\n  List<String> parts=Collections.singletonList(afterByPart);\n  boolean containsAnd=containsLogicOperator(afterByPart,\"And\");\n  boolean containsOr=containsLogicOperator(afterByPart,\"Or\");\n  if (containsAnd && containsOr) {\n    throw new UnableToParseMethodException(\"'And' and 'Or' clauses cannot be mixed in a method name - Try specifying the Query with the @Query annotation. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (containsAnd) {\n    parts=Arrays.asList(afterByPart.split(\"And\"));\n  }\n else   if (containsOr) {\n    parts=Arrays.asList(afterByPart.split(\"Or\"));\n  }\n  MutableReference<List<ClassInfo>> mappedSuperClassInfoRef=MutableReference.of(mappedSuperClassInfos);\n  StringBuilder where=new StringBuilder();\n  int paramsCount=0;\n  for (  String part : parts) {\n    if (part.isEmpty()) {\n      continue;\n    }\n    String fieldName;\n    boolean ignoreCase=false;\n    if (part.endsWith(IGNORE_CASE)) {\n      ignoreCase=true;\n      part=part.replace(IGNORE_CASE,\"\");\n    }\n    String operation=getFieldOperation(part);\n    if (operation == null) {\n      fieldName=lowerFirstLetter(part);\n    }\n else {\n      fieldName=lowerFirstLetter(part.replaceAll(operation,\"\"));\n    }\n    FieldInfo fieldInfo=getFieldInfo(fieldName,entityClass,mappedSuperClassInfoRef);\n    if (fieldInfo == null) {\n      StringBuilder fieldPathBuilder=new StringBuilder(fieldName.length() + 5);\n      fieldInfo=resolveNestedField(repositoryMethodDescription,fieldName,fieldPathBuilder);\n      fieldName=fieldPathBuilder.toString();\n    }\n    validateFieldWithOperation(operation,fieldInfo,fieldName,repositoryMethodDescription);\n    if ((ignoreCase || allIgnoreCase) && !DotNames.STRING.equals(fieldInfo.type().name())) {\n      throw new UnableToParseMethodException(\"IgnoreCase cannot be specified for field\" + fieldInfo.name() + \" because it is not a String type. \"+ \"Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (where.length() > 0) {\n      where.append(containsAnd ? \" AND \" : \" OR \");\n    }\n    String upperPrefix=(ignoreCase || allIgnoreCase) ? \"UPPER(\" : \"\";\n    String upperSuffix=(ignoreCase || allIgnoreCase) ? \")\" : \"\";\n    where.append(upperPrefix).append(fieldName).append(upperSuffix);\n    if ((operation == null) || \"Equals\".equals(operation) || \"Is\".equals(operation)) {\n      paramsCount++;\n      where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n    }\n else {\nswitch (operation) {\ncase \"IsNot\":case \"Not\":        paramsCount++;\n      where.append(\" <> ?\").append(paramsCount);\n    break;\ncase \"IsNull\":case \"Null\":  where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n}\nString whereQuery=where.toString().isEmpty() ? \"\" : \" WHERE \" + where.toString();\nreturn new Result(entityClass,\"FROM \" + getEntityName() + whereQuery,queryType,paramsCount,sort,topCount);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1119,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 89,
        "startColumnNumber" : 8,
        "endLineNumber" : 89,
        "endColumnNumber" : 47
      },
      "nodeContext" : "int byIndex=methodName.indexOf(\"By\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "methodName",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 90,
      "startColumnNumber" : 47,
      "endLineNumber" : 90,
      "endColumnNumber" : 57
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 90,
        "startColumnNumber" : 47,
        "endLineNumber" : 90,
        "endColumnNumber" : 66
      },
      "nodeContext" : "methodName.length()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 90,
        "startColumnNumber" : 32,
        "endLineNumber" : 90,
        "endColumnNumber" : 66
      },
      "nodeContext" : "byIndex + 2 >= methodName.length()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 90,
        "startColumnNumber" : 31,
        "endLineNumber" : 90,
        "endColumnNumber" : 67
      },
      "nodeContext" : "(byIndex + 2 >= methodName.length())",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 90,
        "startColumnNumber" : 12,
        "endLineNumber" : 90,
        "endColumnNumber" : 67
      },
      "nodeContext" : "(byIndex == -1) || (byIndex + 2 >= methodName.length())",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 254,
        "startLineNumber" : 90,
        "startColumnNumber" : 8,
        "endLineNumber" : 93,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if ((byIndex == -1) || (byIndex + 2 >= methodName.length())) {\n  throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed as there is no proper 'By' clause in the name.\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 24,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 12460,
        "startLineNumber" : 79,
        "startColumnNumber" : 47,
        "endLineNumber" : 338,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String methodName=methodInfo.name();\n  ClassInfo repositoryClassInfo=methodInfo.declaringClass();\n  String repositoryMethodDescription=\"'\" + methodName + \"' of repository '\"+ repositoryClassInfo+ \"'\";\n  QueryType queryType=getType(methodName);\n  if (queryType == null) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed. Did you forget to annotate the method with '@Query'?\");\n  }\n  int byIndex=methodName.indexOf(\"By\");\n  if ((byIndex == -1) || (byIndex + 2 >= methodName.length())) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed as there is no proper 'By' clause in the name.\");\n  }\n  Integer topCount=null;\n  int firstIndex=methodName.indexOf(\"First\");\n  int topIndex=methodName.indexOf(\"Top\");\n  if ((firstIndex != -1) || (topIndex != -1)) {\n    int effectiveFirstOrTopIndex=(topIndex > -1 && firstIndex > -1) ? Math.max(topIndex,firstIndex) : Math.max(firstIndex,topIndex);\n    if (effectiveFirstOrTopIndex < byIndex) {\n      try {\n        String topCountStr=methodName.substring(effectiveFirstOrTopIndex,byIndex).replace(\"Top\",\"\").replace(\"First\",\"\");\n        if (topCountStr.isEmpty()) {\n          topCount=1;\n        }\n else {\n          topCount=Integer.valueOf(topCountStr);\n        }\n      }\n catch (      Exception e) {\n        throw new UnableToParseMethodException(\"Unable to parse query with limiting results clause. Offending method is \" + repositoryMethodDescription + \".\");\n      }\n    }\n  }\n  if ((topCount != null) && (queryType != QueryType.SELECT)) {\n    throw new UnableToParseMethodException(\"When 'Top' or 'First' is specified, the query must be a find query. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (methodName.substring(0,byIndex).contains(\"Distinct\")) {\n    throw new UnableToParseMethodException(\"Distinct is not yet supported. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  String afterByPart=methodName.substring(byIndex + 2);\n  boolean allIgnoreCase=false;\n  if (afterByPart.contains(ALL_IGNORE_CASE)) {\n    allIgnoreCase=true;\n    afterByPart=afterByPart.replace(ALL_IGNORE_CASE,\"\");\n  }\n  Sort sort=null;\n  if (containsLogicOperator(afterByPart,ORDER_BY)) {\n    int orderByIndex=afterByPart.indexOf(ORDER_BY);\n    if (orderByIndex + ORDER_BY.length() == afterByPart.length()) {\n      throw new UnableToParseMethodException(\"A field must by supplied after 'OrderBy' . Offending method is \" + repositoryMethodDescription + \".\");\n    }\n    String afterOrderByPart=afterByPart.substring(orderByIndex + ORDER_BY.length());\n    afterByPart=afterByPart.substring(0,orderByIndex);\n    boolean ascending=true;\n    if (afterOrderByPart.endsWith(\"Asc\")) {\n      ascending=true;\n      afterOrderByPart=afterOrderByPart.replace(\"Asc\",\"\");\n    }\n else     if (afterOrderByPart.endsWith(\"Desc\")) {\n      ascending=false;\n      afterOrderByPart=afterOrderByPart.replace(\"Desc\",\"\");\n    }\n    String orderField=lowerFirstLetter(afterOrderByPart);\n    if (!entityContainsField(orderField)) {\n      throw new UnableToParseMethodException(\"Field \" + orderField + \" which was configured as the order field does not exist in the entity. Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (ascending) {\n      sort=Sort.ascending(orderField);\n    }\n else {\n      sort=Sort.descending(orderField);\n    }\n  }\n  List<String> parts=Collections.singletonList(afterByPart);\n  boolean containsAnd=containsLogicOperator(afterByPart,\"And\");\n  boolean containsOr=containsLogicOperator(afterByPart,\"Or\");\n  if (containsAnd && containsOr) {\n    throw new UnableToParseMethodException(\"'And' and 'Or' clauses cannot be mixed in a method name - Try specifying the Query with the @Query annotation. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (containsAnd) {\n    parts=Arrays.asList(afterByPart.split(\"And\"));\n  }\n else   if (containsOr) {\n    parts=Arrays.asList(afterByPart.split(\"Or\"));\n  }\n  MutableReference<List<ClassInfo>> mappedSuperClassInfoRef=MutableReference.of(mappedSuperClassInfos);\n  StringBuilder where=new StringBuilder();\n  int paramsCount=0;\n  for (  String part : parts) {\n    if (part.isEmpty()) {\n      continue;\n    }\n    String fieldName;\n    boolean ignoreCase=false;\n    if (part.endsWith(IGNORE_CASE)) {\n      ignoreCase=true;\n      part=part.replace(IGNORE_CASE,\"\");\n    }\n    String operation=getFieldOperation(part);\n    if (operation == null) {\n      fieldName=lowerFirstLetter(part);\n    }\n else {\n      fieldName=lowerFirstLetter(part.replaceAll(operation,\"\"));\n    }\n    FieldInfo fieldInfo=getFieldInfo(fieldName,entityClass,mappedSuperClassInfoRef);\n    if (fieldInfo == null) {\n      StringBuilder fieldPathBuilder=new StringBuilder(fieldName.length() + 5);\n      fieldInfo=resolveNestedField(repositoryMethodDescription,fieldName,fieldPathBuilder);\n      fieldName=fieldPathBuilder.toString();\n    }\n    validateFieldWithOperation(operation,fieldInfo,fieldName,repositoryMethodDescription);\n    if ((ignoreCase || allIgnoreCase) && !DotNames.STRING.equals(fieldInfo.type().name())) {\n      throw new UnableToParseMethodException(\"IgnoreCase cannot be specified for field\" + fieldInfo.name() + \" because it is not a String type. \"+ \"Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (where.length() > 0) {\n      where.append(containsAnd ? \" AND \" : \" OR \");\n    }\n    String upperPrefix=(ignoreCase || allIgnoreCase) ? \"UPPER(\" : \"\";\n    String upperSuffix=(ignoreCase || allIgnoreCase) ? \")\" : \"\";\n    where.append(upperPrefix).append(fieldName).append(upperSuffix);\n    if ((operation == null) || \"Equals\".equals(operation) || \"Is\".equals(operation)) {\n      paramsCount++;\n      where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n    }\n else {\nswitch (operation) {\ncase \"IsNot\":case \"Not\":        paramsCount++;\n      where.append(\" <> ?\").append(paramsCount);\n    break;\ncase \"IsNull\":case \"Null\":  where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n}\nString whereQuery=where.toString().isEmpty() ? \"\" : \" WHERE \" + where.toString();\nreturn new Result(entityClass,\"FROM \" + getEntityName() + whereQuery,queryType,paramsCount,sort,topCount);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1110,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 12503,
        "startLineNumber" : 79,
        "startColumnNumber" : 4,
        "endLineNumber" : 338,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public Result parse(MethodInfo methodInfo){\n  String methodName=methodInfo.name();\n  ClassInfo repositoryClassInfo=methodInfo.declaringClass();\n  String repositoryMethodDescription=\"'\" + methodName + \"' of repository '\"+ repositoryClassInfo+ \"'\";\n  QueryType queryType=getType(methodName);\n  if (queryType == null) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed. Did you forget to annotate the method with '@Query'?\");\n  }\n  int byIndex=methodName.indexOf(\"By\");\n  if ((byIndex == -1) || (byIndex + 2 >= methodName.length())) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed as there is no proper 'By' clause in the name.\");\n  }\n  Integer topCount=null;\n  int firstIndex=methodName.indexOf(\"First\");\n  int topIndex=methodName.indexOf(\"Top\");\n  if ((firstIndex != -1) || (topIndex != -1)) {\n    int effectiveFirstOrTopIndex=(topIndex > -1 && firstIndex > -1) ? Math.max(topIndex,firstIndex) : Math.max(firstIndex,topIndex);\n    if (effectiveFirstOrTopIndex < byIndex) {\n      try {\n        String topCountStr=methodName.substring(effectiveFirstOrTopIndex,byIndex).replace(\"Top\",\"\").replace(\"First\",\"\");\n        if (topCountStr.isEmpty()) {\n          topCount=1;\n        }\n else {\n          topCount=Integer.valueOf(topCountStr);\n        }\n      }\n catch (      Exception e) {\n        throw new UnableToParseMethodException(\"Unable to parse query with limiting results clause. Offending method is \" + repositoryMethodDescription + \".\");\n      }\n    }\n  }\n  if ((topCount != null) && (queryType != QueryType.SELECT)) {\n    throw new UnableToParseMethodException(\"When 'Top' or 'First' is specified, the query must be a find query. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (methodName.substring(0,byIndex).contains(\"Distinct\")) {\n    throw new UnableToParseMethodException(\"Distinct is not yet supported. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  String afterByPart=methodName.substring(byIndex + 2);\n  boolean allIgnoreCase=false;\n  if (afterByPart.contains(ALL_IGNORE_CASE)) {\n    allIgnoreCase=true;\n    afterByPart=afterByPart.replace(ALL_IGNORE_CASE,\"\");\n  }\n  Sort sort=null;\n  if (containsLogicOperator(afterByPart,ORDER_BY)) {\n    int orderByIndex=afterByPart.indexOf(ORDER_BY);\n    if (orderByIndex + ORDER_BY.length() == afterByPart.length()) {\n      throw new UnableToParseMethodException(\"A field must by supplied after 'OrderBy' . Offending method is \" + repositoryMethodDescription + \".\");\n    }\n    String afterOrderByPart=afterByPart.substring(orderByIndex + ORDER_BY.length());\n    afterByPart=afterByPart.substring(0,orderByIndex);\n    boolean ascending=true;\n    if (afterOrderByPart.endsWith(\"Asc\")) {\n      ascending=true;\n      afterOrderByPart=afterOrderByPart.replace(\"Asc\",\"\");\n    }\n else     if (afterOrderByPart.endsWith(\"Desc\")) {\n      ascending=false;\n      afterOrderByPart=afterOrderByPart.replace(\"Desc\",\"\");\n    }\n    String orderField=lowerFirstLetter(afterOrderByPart);\n    if (!entityContainsField(orderField)) {\n      throw new UnableToParseMethodException(\"Field \" + orderField + \" which was configured as the order field does not exist in the entity. Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (ascending) {\n      sort=Sort.ascending(orderField);\n    }\n else {\n      sort=Sort.descending(orderField);\n    }\n  }\n  List<String> parts=Collections.singletonList(afterByPart);\n  boolean containsAnd=containsLogicOperator(afterByPart,\"And\");\n  boolean containsOr=containsLogicOperator(afterByPart,\"Or\");\n  if (containsAnd && containsOr) {\n    throw new UnableToParseMethodException(\"'And' and 'Or' clauses cannot be mixed in a method name - Try specifying the Query with the @Query annotation. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (containsAnd) {\n    parts=Arrays.asList(afterByPart.split(\"And\"));\n  }\n else   if (containsOr) {\n    parts=Arrays.asList(afterByPart.split(\"Or\"));\n  }\n  MutableReference<List<ClassInfo>> mappedSuperClassInfoRef=MutableReference.of(mappedSuperClassInfos);\n  StringBuilder where=new StringBuilder();\n  int paramsCount=0;\n  for (  String part : parts) {\n    if (part.isEmpty()) {\n      continue;\n    }\n    String fieldName;\n    boolean ignoreCase=false;\n    if (part.endsWith(IGNORE_CASE)) {\n      ignoreCase=true;\n      part=part.replace(IGNORE_CASE,\"\");\n    }\n    String operation=getFieldOperation(part);\n    if (operation == null) {\n      fieldName=lowerFirstLetter(part);\n    }\n else {\n      fieldName=lowerFirstLetter(part.replaceAll(operation,\"\"));\n    }\n    FieldInfo fieldInfo=getFieldInfo(fieldName,entityClass,mappedSuperClassInfoRef);\n    if (fieldInfo == null) {\n      StringBuilder fieldPathBuilder=new StringBuilder(fieldName.length() + 5);\n      fieldInfo=resolveNestedField(repositoryMethodDescription,fieldName,fieldPathBuilder);\n      fieldName=fieldPathBuilder.toString();\n    }\n    validateFieldWithOperation(operation,fieldInfo,fieldName,repositoryMethodDescription);\n    if ((ignoreCase || allIgnoreCase) && !DotNames.STRING.equals(fieldInfo.type().name())) {\n      throw new UnableToParseMethodException(\"IgnoreCase cannot be specified for field\" + fieldInfo.name() + \" because it is not a String type. \"+ \"Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (where.length() > 0) {\n      where.append(containsAnd ? \" AND \" : \" OR \");\n    }\n    String upperPrefix=(ignoreCase || allIgnoreCase) ? \"UPPER(\" : \"\";\n    String upperSuffix=(ignoreCase || allIgnoreCase) ? \")\" : \"\";\n    where.append(upperPrefix).append(fieldName).append(upperSuffix);\n    if ((operation == null) || \"Equals\".equals(operation) || \"Is\".equals(operation)) {\n      paramsCount++;\n      where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n    }\n else {\nswitch (operation) {\ncase \"IsNot\":case \"Not\":        paramsCount++;\n      where.append(\" <> ?\").append(paramsCount);\n    break;\ncase \"IsNull\":case \"Null\":  where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n}\nString whereQuery=where.toString().isEmpty() ? \"\" : \" WHERE \" + where.toString();\nreturn new Result(entityClass,\"FROM \" + getEntityName() + whereQuery,queryType,paramsCount,sort,topCount);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1119,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 90,
        "startColumnNumber" : 12,
        "endLineNumber" : 90,
        "endColumnNumber" : 67
      },
      "nodeContext" : "(byIndex == -1) || (byIndex + 2 >= methodName.length())",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 14,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "methodName",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 97,
      "startColumnNumber" : 25,
      "endLineNumber" : 97,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 97,
        "startColumnNumber" : 25,
        "endLineNumber" : 97,
        "endColumnNumber" : 52
      },
      "nodeContext" : "methodName.indexOf(\"First\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 97,
        "startColumnNumber" : 12,
        "endLineNumber" : 97,
        "endColumnNumber" : 52
      },
      "nodeContext" : "firstIndex=methodName.indexOf(\"First\")",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 97,
        "startColumnNumber" : 8,
        "endLineNumber" : 97,
        "endColumnNumber" : 53
      },
      "nodeContext" : "int firstIndex=methodName.indexOf(\"First\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 12460,
        "startLineNumber" : 79,
        "startColumnNumber" : 47,
        "endLineNumber" : 338,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String methodName=methodInfo.name();\n  ClassInfo repositoryClassInfo=methodInfo.declaringClass();\n  String repositoryMethodDescription=\"'\" + methodName + \"' of repository '\"+ repositoryClassInfo+ \"'\";\n  QueryType queryType=getType(methodName);\n  if (queryType == null) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed. Did you forget to annotate the method with '@Query'?\");\n  }\n  int byIndex=methodName.indexOf(\"By\");\n  if ((byIndex == -1) || (byIndex + 2 >= methodName.length())) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed as there is no proper 'By' clause in the name.\");\n  }\n  Integer topCount=null;\n  int firstIndex=methodName.indexOf(\"First\");\n  int topIndex=methodName.indexOf(\"Top\");\n  if ((firstIndex != -1) || (topIndex != -1)) {\n    int effectiveFirstOrTopIndex=(topIndex > -1 && firstIndex > -1) ? Math.max(topIndex,firstIndex) : Math.max(firstIndex,topIndex);\n    if (effectiveFirstOrTopIndex < byIndex) {\n      try {\n        String topCountStr=methodName.substring(effectiveFirstOrTopIndex,byIndex).replace(\"Top\",\"\").replace(\"First\",\"\");\n        if (topCountStr.isEmpty()) {\n          topCount=1;\n        }\n else {\n          topCount=Integer.valueOf(topCountStr);\n        }\n      }\n catch (      Exception e) {\n        throw new UnableToParseMethodException(\"Unable to parse query with limiting results clause. Offending method is \" + repositoryMethodDescription + \".\");\n      }\n    }\n  }\n  if ((topCount != null) && (queryType != QueryType.SELECT)) {\n    throw new UnableToParseMethodException(\"When 'Top' or 'First' is specified, the query must be a find query. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (methodName.substring(0,byIndex).contains(\"Distinct\")) {\n    throw new UnableToParseMethodException(\"Distinct is not yet supported. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  String afterByPart=methodName.substring(byIndex + 2);\n  boolean allIgnoreCase=false;\n  if (afterByPart.contains(ALL_IGNORE_CASE)) {\n    allIgnoreCase=true;\n    afterByPart=afterByPart.replace(ALL_IGNORE_CASE,\"\");\n  }\n  Sort sort=null;\n  if (containsLogicOperator(afterByPart,ORDER_BY)) {\n    int orderByIndex=afterByPart.indexOf(ORDER_BY);\n    if (orderByIndex + ORDER_BY.length() == afterByPart.length()) {\n      throw new UnableToParseMethodException(\"A field must by supplied after 'OrderBy' . Offending method is \" + repositoryMethodDescription + \".\");\n    }\n    String afterOrderByPart=afterByPart.substring(orderByIndex + ORDER_BY.length());\n    afterByPart=afterByPart.substring(0,orderByIndex);\n    boolean ascending=true;\n    if (afterOrderByPart.endsWith(\"Asc\")) {\n      ascending=true;\n      afterOrderByPart=afterOrderByPart.replace(\"Asc\",\"\");\n    }\n else     if (afterOrderByPart.endsWith(\"Desc\")) {\n      ascending=false;\n      afterOrderByPart=afterOrderByPart.replace(\"Desc\",\"\");\n    }\n    String orderField=lowerFirstLetter(afterOrderByPart);\n    if (!entityContainsField(orderField)) {\n      throw new UnableToParseMethodException(\"Field \" + orderField + \" which was configured as the order field does not exist in the entity. Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (ascending) {\n      sort=Sort.ascending(orderField);\n    }\n else {\n      sort=Sort.descending(orderField);\n    }\n  }\n  List<String> parts=Collections.singletonList(afterByPart);\n  boolean containsAnd=containsLogicOperator(afterByPart,\"And\");\n  boolean containsOr=containsLogicOperator(afterByPart,\"Or\");\n  if (containsAnd && containsOr) {\n    throw new UnableToParseMethodException(\"'And' and 'Or' clauses cannot be mixed in a method name - Try specifying the Query with the @Query annotation. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (containsAnd) {\n    parts=Arrays.asList(afterByPart.split(\"And\"));\n  }\n else   if (containsOr) {\n    parts=Arrays.asList(afterByPart.split(\"Or\"));\n  }\n  MutableReference<List<ClassInfo>> mappedSuperClassInfoRef=MutableReference.of(mappedSuperClassInfos);\n  StringBuilder where=new StringBuilder();\n  int paramsCount=0;\n  for (  String part : parts) {\n    if (part.isEmpty()) {\n      continue;\n    }\n    String fieldName;\n    boolean ignoreCase=false;\n    if (part.endsWith(IGNORE_CASE)) {\n      ignoreCase=true;\n      part=part.replace(IGNORE_CASE,\"\");\n    }\n    String operation=getFieldOperation(part);\n    if (operation == null) {\n      fieldName=lowerFirstLetter(part);\n    }\n else {\n      fieldName=lowerFirstLetter(part.replaceAll(operation,\"\"));\n    }\n    FieldInfo fieldInfo=getFieldInfo(fieldName,entityClass,mappedSuperClassInfoRef);\n    if (fieldInfo == null) {\n      StringBuilder fieldPathBuilder=new StringBuilder(fieldName.length() + 5);\n      fieldInfo=resolveNestedField(repositoryMethodDescription,fieldName,fieldPathBuilder);\n      fieldName=fieldPathBuilder.toString();\n    }\n    validateFieldWithOperation(operation,fieldInfo,fieldName,repositoryMethodDescription);\n    if ((ignoreCase || allIgnoreCase) && !DotNames.STRING.equals(fieldInfo.type().name())) {\n      throw new UnableToParseMethodException(\"IgnoreCase cannot be specified for field\" + fieldInfo.name() + \" because it is not a String type. \"+ \"Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (where.length() > 0) {\n      where.append(containsAnd ? \" AND \" : \" OR \");\n    }\n    String upperPrefix=(ignoreCase || allIgnoreCase) ? \"UPPER(\" : \"\";\n    String upperSuffix=(ignoreCase || allIgnoreCase) ? \")\" : \"\";\n    where.append(upperPrefix).append(fieldName).append(upperSuffix);\n    if ((operation == null) || \"Equals\".equals(operation) || \"Is\".equals(operation)) {\n      paramsCount++;\n      where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n    }\n else {\nswitch (operation) {\ncase \"IsNot\":case \"Not\":        paramsCount++;\n      where.append(\" <> ?\").append(paramsCount);\n    break;\ncase \"IsNull\":case \"Null\":  where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n}\nString whereQuery=where.toString().isEmpty() ? \"\" : \" WHERE \" + where.toString();\nreturn new Result(entityClass,\"FROM \" + getEntityName() + whereQuery,queryType,paramsCount,sort,topCount);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1110,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 12503,
        "startLineNumber" : 79,
        "startColumnNumber" : 4,
        "endLineNumber" : 338,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public Result parse(MethodInfo methodInfo){\n  String methodName=methodInfo.name();\n  ClassInfo repositoryClassInfo=methodInfo.declaringClass();\n  String repositoryMethodDescription=\"'\" + methodName + \"' of repository '\"+ repositoryClassInfo+ \"'\";\n  QueryType queryType=getType(methodName);\n  if (queryType == null) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed. Did you forget to annotate the method with '@Query'?\");\n  }\n  int byIndex=methodName.indexOf(\"By\");\n  if ((byIndex == -1) || (byIndex + 2 >= methodName.length())) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed as there is no proper 'By' clause in the name.\");\n  }\n  Integer topCount=null;\n  int firstIndex=methodName.indexOf(\"First\");\n  int topIndex=methodName.indexOf(\"Top\");\n  if ((firstIndex != -1) || (topIndex != -1)) {\n    int effectiveFirstOrTopIndex=(topIndex > -1 && firstIndex > -1) ? Math.max(topIndex,firstIndex) : Math.max(firstIndex,topIndex);\n    if (effectiveFirstOrTopIndex < byIndex) {\n      try {\n        String topCountStr=methodName.substring(effectiveFirstOrTopIndex,byIndex).replace(\"Top\",\"\").replace(\"First\",\"\");\n        if (topCountStr.isEmpty()) {\n          topCount=1;\n        }\n else {\n          topCount=Integer.valueOf(topCountStr);\n        }\n      }\n catch (      Exception e) {\n        throw new UnableToParseMethodException(\"Unable to parse query with limiting results clause. Offending method is \" + repositoryMethodDescription + \".\");\n      }\n    }\n  }\n  if ((topCount != null) && (queryType != QueryType.SELECT)) {\n    throw new UnableToParseMethodException(\"When 'Top' or 'First' is specified, the query must be a find query. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (methodName.substring(0,byIndex).contains(\"Distinct\")) {\n    throw new UnableToParseMethodException(\"Distinct is not yet supported. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  String afterByPart=methodName.substring(byIndex + 2);\n  boolean allIgnoreCase=false;\n  if (afterByPart.contains(ALL_IGNORE_CASE)) {\n    allIgnoreCase=true;\n    afterByPart=afterByPart.replace(ALL_IGNORE_CASE,\"\");\n  }\n  Sort sort=null;\n  if (containsLogicOperator(afterByPart,ORDER_BY)) {\n    int orderByIndex=afterByPart.indexOf(ORDER_BY);\n    if (orderByIndex + ORDER_BY.length() == afterByPart.length()) {\n      throw new UnableToParseMethodException(\"A field must by supplied after 'OrderBy' . Offending method is \" + repositoryMethodDescription + \".\");\n    }\n    String afterOrderByPart=afterByPart.substring(orderByIndex + ORDER_BY.length());\n    afterByPart=afterByPart.substring(0,orderByIndex);\n    boolean ascending=true;\n    if (afterOrderByPart.endsWith(\"Asc\")) {\n      ascending=true;\n      afterOrderByPart=afterOrderByPart.replace(\"Asc\",\"\");\n    }\n else     if (afterOrderByPart.endsWith(\"Desc\")) {\n      ascending=false;\n      afterOrderByPart=afterOrderByPart.replace(\"Desc\",\"\");\n    }\n    String orderField=lowerFirstLetter(afterOrderByPart);\n    if (!entityContainsField(orderField)) {\n      throw new UnableToParseMethodException(\"Field \" + orderField + \" which was configured as the order field does not exist in the entity. Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (ascending) {\n      sort=Sort.ascending(orderField);\n    }\n else {\n      sort=Sort.descending(orderField);\n    }\n  }\n  List<String> parts=Collections.singletonList(afterByPart);\n  boolean containsAnd=containsLogicOperator(afterByPart,\"And\");\n  boolean containsOr=containsLogicOperator(afterByPart,\"Or\");\n  if (containsAnd && containsOr) {\n    throw new UnableToParseMethodException(\"'And' and 'Or' clauses cannot be mixed in a method name - Try specifying the Query with the @Query annotation. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (containsAnd) {\n    parts=Arrays.asList(afterByPart.split(\"And\"));\n  }\n else   if (containsOr) {\n    parts=Arrays.asList(afterByPart.split(\"Or\"));\n  }\n  MutableReference<List<ClassInfo>> mappedSuperClassInfoRef=MutableReference.of(mappedSuperClassInfos);\n  StringBuilder where=new StringBuilder();\n  int paramsCount=0;\n  for (  String part : parts) {\n    if (part.isEmpty()) {\n      continue;\n    }\n    String fieldName;\n    boolean ignoreCase=false;\n    if (part.endsWith(IGNORE_CASE)) {\n      ignoreCase=true;\n      part=part.replace(IGNORE_CASE,\"\");\n    }\n    String operation=getFieldOperation(part);\n    if (operation == null) {\n      fieldName=lowerFirstLetter(part);\n    }\n else {\n      fieldName=lowerFirstLetter(part.replaceAll(operation,\"\"));\n    }\n    FieldInfo fieldInfo=getFieldInfo(fieldName,entityClass,mappedSuperClassInfoRef);\n    if (fieldInfo == null) {\n      StringBuilder fieldPathBuilder=new StringBuilder(fieldName.length() + 5);\n      fieldInfo=resolveNestedField(repositoryMethodDescription,fieldName,fieldPathBuilder);\n      fieldName=fieldPathBuilder.toString();\n    }\n    validateFieldWithOperation(operation,fieldInfo,fieldName,repositoryMethodDescription);\n    if ((ignoreCase || allIgnoreCase) && !DotNames.STRING.equals(fieldInfo.type().name())) {\n      throw new UnableToParseMethodException(\"IgnoreCase cannot be specified for field\" + fieldInfo.name() + \" because it is not a String type. \"+ \"Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (where.length() > 0) {\n      where.append(containsAnd ? \" AND \" : \" OR \");\n    }\n    String upperPrefix=(ignoreCase || allIgnoreCase) ? \"UPPER(\" : \"\";\n    String upperSuffix=(ignoreCase || allIgnoreCase) ? \")\" : \"\";\n    where.append(upperPrefix).append(fieldName).append(upperSuffix);\n    if ((operation == null) || \"Equals\".equals(operation) || \"Is\".equals(operation)) {\n      paramsCount++;\n      where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n    }\n else {\nswitch (operation) {\ncase \"IsNot\":case \"Not\":        paramsCount++;\n      where.append(\" <> ?\").append(paramsCount);\n    break;\ncase \"IsNull\":case \"Null\":  where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n}\nString whereQuery=where.toString().isEmpty() ? \"\" : \" WHERE \" + where.toString();\nreturn new Result(entityClass,\"FROM \" + getEntityName() + whereQuery,queryType,paramsCount,sort,topCount);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1119,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 97,
        "startColumnNumber" : 8,
        "endLineNumber" : 97,
        "endColumnNumber" : 53
      },
      "nodeContext" : "int firstIndex=methodName.indexOf(\"First\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "methodName",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 98,
      "startColumnNumber" : 23,
      "endLineNumber" : 98,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 98,
        "startColumnNumber" : 23,
        "endLineNumber" : 98,
        "endColumnNumber" : 48
      },
      "nodeContext" : "methodName.indexOf(\"Top\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 98,
        "startColumnNumber" : 12,
        "endLineNumber" : 98,
        "endColumnNumber" : 48
      },
      "nodeContext" : "topIndex=methodName.indexOf(\"Top\")",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 98,
        "startColumnNumber" : 8,
        "endLineNumber" : 98,
        "endColumnNumber" : 49
      },
      "nodeContext" : "int topIndex=methodName.indexOf(\"Top\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 12460,
        "startLineNumber" : 79,
        "startColumnNumber" : 47,
        "endLineNumber" : 338,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String methodName=methodInfo.name();\n  ClassInfo repositoryClassInfo=methodInfo.declaringClass();\n  String repositoryMethodDescription=\"'\" + methodName + \"' of repository '\"+ repositoryClassInfo+ \"'\";\n  QueryType queryType=getType(methodName);\n  if (queryType == null) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed. Did you forget to annotate the method with '@Query'?\");\n  }\n  int byIndex=methodName.indexOf(\"By\");\n  if ((byIndex == -1) || (byIndex + 2 >= methodName.length())) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed as there is no proper 'By' clause in the name.\");\n  }\n  Integer topCount=null;\n  int firstIndex=methodName.indexOf(\"First\");\n  int topIndex=methodName.indexOf(\"Top\");\n  if ((firstIndex != -1) || (topIndex != -1)) {\n    int effectiveFirstOrTopIndex=(topIndex > -1 && firstIndex > -1) ? Math.max(topIndex,firstIndex) : Math.max(firstIndex,topIndex);\n    if (effectiveFirstOrTopIndex < byIndex) {\n      try {\n        String topCountStr=methodName.substring(effectiveFirstOrTopIndex,byIndex).replace(\"Top\",\"\").replace(\"First\",\"\");\n        if (topCountStr.isEmpty()) {\n          topCount=1;\n        }\n else {\n          topCount=Integer.valueOf(topCountStr);\n        }\n      }\n catch (      Exception e) {\n        throw new UnableToParseMethodException(\"Unable to parse query with limiting results clause. Offending method is \" + repositoryMethodDescription + \".\");\n      }\n    }\n  }\n  if ((topCount != null) && (queryType != QueryType.SELECT)) {\n    throw new UnableToParseMethodException(\"When 'Top' or 'First' is specified, the query must be a find query. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (methodName.substring(0,byIndex).contains(\"Distinct\")) {\n    throw new UnableToParseMethodException(\"Distinct is not yet supported. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  String afterByPart=methodName.substring(byIndex + 2);\n  boolean allIgnoreCase=false;\n  if (afterByPart.contains(ALL_IGNORE_CASE)) {\n    allIgnoreCase=true;\n    afterByPart=afterByPart.replace(ALL_IGNORE_CASE,\"\");\n  }\n  Sort sort=null;\n  if (containsLogicOperator(afterByPart,ORDER_BY)) {\n    int orderByIndex=afterByPart.indexOf(ORDER_BY);\n    if (orderByIndex + ORDER_BY.length() == afterByPart.length()) {\n      throw new UnableToParseMethodException(\"A field must by supplied after 'OrderBy' . Offending method is \" + repositoryMethodDescription + \".\");\n    }\n    String afterOrderByPart=afterByPart.substring(orderByIndex + ORDER_BY.length());\n    afterByPart=afterByPart.substring(0,orderByIndex);\n    boolean ascending=true;\n    if (afterOrderByPart.endsWith(\"Asc\")) {\n      ascending=true;\n      afterOrderByPart=afterOrderByPart.replace(\"Asc\",\"\");\n    }\n else     if (afterOrderByPart.endsWith(\"Desc\")) {\n      ascending=false;\n      afterOrderByPart=afterOrderByPart.replace(\"Desc\",\"\");\n    }\n    String orderField=lowerFirstLetter(afterOrderByPart);\n    if (!entityContainsField(orderField)) {\n      throw new UnableToParseMethodException(\"Field \" + orderField + \" which was configured as the order field does not exist in the entity. Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (ascending) {\n      sort=Sort.ascending(orderField);\n    }\n else {\n      sort=Sort.descending(orderField);\n    }\n  }\n  List<String> parts=Collections.singletonList(afterByPart);\n  boolean containsAnd=containsLogicOperator(afterByPart,\"And\");\n  boolean containsOr=containsLogicOperator(afterByPart,\"Or\");\n  if (containsAnd && containsOr) {\n    throw new UnableToParseMethodException(\"'And' and 'Or' clauses cannot be mixed in a method name - Try specifying the Query with the @Query annotation. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (containsAnd) {\n    parts=Arrays.asList(afterByPart.split(\"And\"));\n  }\n else   if (containsOr) {\n    parts=Arrays.asList(afterByPart.split(\"Or\"));\n  }\n  MutableReference<List<ClassInfo>> mappedSuperClassInfoRef=MutableReference.of(mappedSuperClassInfos);\n  StringBuilder where=new StringBuilder();\n  int paramsCount=0;\n  for (  String part : parts) {\n    if (part.isEmpty()) {\n      continue;\n    }\n    String fieldName;\n    boolean ignoreCase=false;\n    if (part.endsWith(IGNORE_CASE)) {\n      ignoreCase=true;\n      part=part.replace(IGNORE_CASE,\"\");\n    }\n    String operation=getFieldOperation(part);\n    if (operation == null) {\n      fieldName=lowerFirstLetter(part);\n    }\n else {\n      fieldName=lowerFirstLetter(part.replaceAll(operation,\"\"));\n    }\n    FieldInfo fieldInfo=getFieldInfo(fieldName,entityClass,mappedSuperClassInfoRef);\n    if (fieldInfo == null) {\n      StringBuilder fieldPathBuilder=new StringBuilder(fieldName.length() + 5);\n      fieldInfo=resolveNestedField(repositoryMethodDescription,fieldName,fieldPathBuilder);\n      fieldName=fieldPathBuilder.toString();\n    }\n    validateFieldWithOperation(operation,fieldInfo,fieldName,repositoryMethodDescription);\n    if ((ignoreCase || allIgnoreCase) && !DotNames.STRING.equals(fieldInfo.type().name())) {\n      throw new UnableToParseMethodException(\"IgnoreCase cannot be specified for field\" + fieldInfo.name() + \" because it is not a String type. \"+ \"Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (where.length() > 0) {\n      where.append(containsAnd ? \" AND \" : \" OR \");\n    }\n    String upperPrefix=(ignoreCase || allIgnoreCase) ? \"UPPER(\" : \"\";\n    String upperSuffix=(ignoreCase || allIgnoreCase) ? \")\" : \"\";\n    where.append(upperPrefix).append(fieldName).append(upperSuffix);\n    if ((operation == null) || \"Equals\".equals(operation) || \"Is\".equals(operation)) {\n      paramsCount++;\n      where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n    }\n else {\nswitch (operation) {\ncase \"IsNot\":case \"Not\":        paramsCount++;\n      where.append(\" <> ?\").append(paramsCount);\n    break;\ncase \"IsNull\":case \"Null\":  where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n}\nString whereQuery=where.toString().isEmpty() ? \"\" : \" WHERE \" + where.toString();\nreturn new Result(entityClass,\"FROM \" + getEntityName() + whereQuery,queryType,paramsCount,sort,topCount);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1110,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 12503,
        "startLineNumber" : 79,
        "startColumnNumber" : 4,
        "endLineNumber" : 338,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public Result parse(MethodInfo methodInfo){\n  String methodName=methodInfo.name();\n  ClassInfo repositoryClassInfo=methodInfo.declaringClass();\n  String repositoryMethodDescription=\"'\" + methodName + \"' of repository '\"+ repositoryClassInfo+ \"'\";\n  QueryType queryType=getType(methodName);\n  if (queryType == null) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed. Did you forget to annotate the method with '@Query'?\");\n  }\n  int byIndex=methodName.indexOf(\"By\");\n  if ((byIndex == -1) || (byIndex + 2 >= methodName.length())) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed as there is no proper 'By' clause in the name.\");\n  }\n  Integer topCount=null;\n  int firstIndex=methodName.indexOf(\"First\");\n  int topIndex=methodName.indexOf(\"Top\");\n  if ((firstIndex != -1) || (topIndex != -1)) {\n    int effectiveFirstOrTopIndex=(topIndex > -1 && firstIndex > -1) ? Math.max(topIndex,firstIndex) : Math.max(firstIndex,topIndex);\n    if (effectiveFirstOrTopIndex < byIndex) {\n      try {\n        String topCountStr=methodName.substring(effectiveFirstOrTopIndex,byIndex).replace(\"Top\",\"\").replace(\"First\",\"\");\n        if (topCountStr.isEmpty()) {\n          topCount=1;\n        }\n else {\n          topCount=Integer.valueOf(topCountStr);\n        }\n      }\n catch (      Exception e) {\n        throw new UnableToParseMethodException(\"Unable to parse query with limiting results clause. Offending method is \" + repositoryMethodDescription + \".\");\n      }\n    }\n  }\n  if ((topCount != null) && (queryType != QueryType.SELECT)) {\n    throw new UnableToParseMethodException(\"When 'Top' or 'First' is specified, the query must be a find query. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (methodName.substring(0,byIndex).contains(\"Distinct\")) {\n    throw new UnableToParseMethodException(\"Distinct is not yet supported. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  String afterByPart=methodName.substring(byIndex + 2);\n  boolean allIgnoreCase=false;\n  if (afterByPart.contains(ALL_IGNORE_CASE)) {\n    allIgnoreCase=true;\n    afterByPart=afterByPart.replace(ALL_IGNORE_CASE,\"\");\n  }\n  Sort sort=null;\n  if (containsLogicOperator(afterByPart,ORDER_BY)) {\n    int orderByIndex=afterByPart.indexOf(ORDER_BY);\n    if (orderByIndex + ORDER_BY.length() == afterByPart.length()) {\n      throw new UnableToParseMethodException(\"A field must by supplied after 'OrderBy' . Offending method is \" + repositoryMethodDescription + \".\");\n    }\n    String afterOrderByPart=afterByPart.substring(orderByIndex + ORDER_BY.length());\n    afterByPart=afterByPart.substring(0,orderByIndex);\n    boolean ascending=true;\n    if (afterOrderByPart.endsWith(\"Asc\")) {\n      ascending=true;\n      afterOrderByPart=afterOrderByPart.replace(\"Asc\",\"\");\n    }\n else     if (afterOrderByPart.endsWith(\"Desc\")) {\n      ascending=false;\n      afterOrderByPart=afterOrderByPart.replace(\"Desc\",\"\");\n    }\n    String orderField=lowerFirstLetter(afterOrderByPart);\n    if (!entityContainsField(orderField)) {\n      throw new UnableToParseMethodException(\"Field \" + orderField + \" which was configured as the order field does not exist in the entity. Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (ascending) {\n      sort=Sort.ascending(orderField);\n    }\n else {\n      sort=Sort.descending(orderField);\n    }\n  }\n  List<String> parts=Collections.singletonList(afterByPart);\n  boolean containsAnd=containsLogicOperator(afterByPart,\"And\");\n  boolean containsOr=containsLogicOperator(afterByPart,\"Or\");\n  if (containsAnd && containsOr) {\n    throw new UnableToParseMethodException(\"'And' and 'Or' clauses cannot be mixed in a method name - Try specifying the Query with the @Query annotation. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (containsAnd) {\n    parts=Arrays.asList(afterByPart.split(\"And\"));\n  }\n else   if (containsOr) {\n    parts=Arrays.asList(afterByPart.split(\"Or\"));\n  }\n  MutableReference<List<ClassInfo>> mappedSuperClassInfoRef=MutableReference.of(mappedSuperClassInfos);\n  StringBuilder where=new StringBuilder();\n  int paramsCount=0;\n  for (  String part : parts) {\n    if (part.isEmpty()) {\n      continue;\n    }\n    String fieldName;\n    boolean ignoreCase=false;\n    if (part.endsWith(IGNORE_CASE)) {\n      ignoreCase=true;\n      part=part.replace(IGNORE_CASE,\"\");\n    }\n    String operation=getFieldOperation(part);\n    if (operation == null) {\n      fieldName=lowerFirstLetter(part);\n    }\n else {\n      fieldName=lowerFirstLetter(part.replaceAll(operation,\"\"));\n    }\n    FieldInfo fieldInfo=getFieldInfo(fieldName,entityClass,mappedSuperClassInfoRef);\n    if (fieldInfo == null) {\n      StringBuilder fieldPathBuilder=new StringBuilder(fieldName.length() + 5);\n      fieldInfo=resolveNestedField(repositoryMethodDescription,fieldName,fieldPathBuilder);\n      fieldName=fieldPathBuilder.toString();\n    }\n    validateFieldWithOperation(operation,fieldInfo,fieldName,repositoryMethodDescription);\n    if ((ignoreCase || allIgnoreCase) && !DotNames.STRING.equals(fieldInfo.type().name())) {\n      throw new UnableToParseMethodException(\"IgnoreCase cannot be specified for field\" + fieldInfo.name() + \" because it is not a String type. \"+ \"Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (where.length() > 0) {\n      where.append(containsAnd ? \" AND \" : \" OR \");\n    }\n    String upperPrefix=(ignoreCase || allIgnoreCase) ? \"UPPER(\" : \"\";\n    String upperSuffix=(ignoreCase || allIgnoreCase) ? \")\" : \"\";\n    where.append(upperPrefix).append(fieldName).append(upperSuffix);\n    if ((operation == null) || \"Equals\".equals(operation) || \"Is\".equals(operation)) {\n      paramsCount++;\n      where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n    }\n else {\nswitch (operation) {\ncase \"IsNot\":case \"Not\":        paramsCount++;\n      where.append(\" <> ?\").append(paramsCount);\n    break;\ncase \"IsNull\":case \"Null\":  where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n}\nString whereQuery=where.toString().isEmpty() ? \"\" : \" WHERE \" + where.toString();\nreturn new Result(entityClass,\"FROM \" + getEntityName() + whereQuery,queryType,paramsCount,sort,topCount);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1119,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 98,
        "startColumnNumber" : 8,
        "endLineNumber" : 98,
        "endColumnNumber" : 49
      },
      "nodeContext" : "int topIndex=methodName.indexOf(\"Top\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "methodName",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 106,
      "startColumnNumber" : 41,
      "endLineNumber" : 106,
      "endColumnNumber" : 51
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 106,
        "startColumnNumber" : 41,
        "endLineNumber" : 106,
        "endColumnNumber" : 96
      },
      "nodeContext" : "methodName.substring(effectiveFirstOrTopIndex,byIndex)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 103,
        "startLineNumber" : 106,
        "startColumnNumber" : 41,
        "endLineNumber" : 107,
        "endColumnNumber" : 47
      },
      "nodeContext" : "methodName.substring(effectiveFirstOrTopIndex,byIndex).replace(\"Top\",\"\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 124,
        "startLineNumber" : 106,
        "startColumnNumber" : 41,
        "endLineNumber" : 107,
        "endColumnNumber" : 68
      },
      "nodeContext" : "methodName.substring(effectiveFirstOrTopIndex,byIndex).replace(\"Top\",\"\").replace(\"First\",\"\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 138,
        "startLineNumber" : 106,
        "startColumnNumber" : 27,
        "endLineNumber" : 107,
        "endColumnNumber" : 68
      },
      "nodeContext" : "topCountStr=methodName.substring(effectiveFirstOrTopIndex,byIndex).replace(\"Top\",\"\").replace(\"First\",\"\")",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 146,
        "startLineNumber" : 106,
        "startColumnNumber" : 20,
        "endLineNumber" : 107,
        "endColumnNumber" : 69
      },
      "nodeContext" : "String topCountStr=methodName.substring(effectiveFirstOrTopIndex,byIndex).replace(\"Top\",\"\").replace(\"First\",\"\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 389,
        "startLineNumber" : 105,
        "startColumnNumber" : 20,
        "endLineNumber" : 113,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  String topCountStr=methodName.substring(effectiveFirstOrTopIndex,byIndex).replace(\"Top\",\"\").replace(\"First\",\"\");\n  if (topCountStr.isEmpty()) {\n    topCount=1;\n  }\n else {\n    topCount=Integer.valueOf(topCountStr);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 36,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 670,
        "startLineNumber" : 105,
        "startColumnNumber" : 16,
        "endLineNumber" : 117,
        "endColumnNumber" : 17
      },
      "nodeContext" : "try {\n  String topCountStr=methodName.substring(effectiveFirstOrTopIndex,byIndex).replace(\"Top\",\"\").replace(\"First\",\"\");\n  if (topCountStr.isEmpty()) {\n    topCount=1;\n  }\n else {\n    topCount=Integer.valueOf(topCountStr);\n  }\n}\n catch (Exception e) {\n  throw new UnableToParseMethodException(\"Unable to parse query with limiting results clause. Offending method is \" + repositoryMethodDescription + \".\");\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 51,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 702,
        "startLineNumber" : 104,
        "startColumnNumber" : 52,
        "endLineNumber" : 118,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  try {\n    String topCountStr=methodName.substring(effectiveFirstOrTopIndex,byIndex).replace(\"Top\",\"\").replace(\"First\",\"\");\n    if (topCountStr.isEmpty()) {\n      topCount=1;\n    }\n else {\n      topCount=Integer.valueOf(topCountStr);\n    }\n  }\n catch (  Exception e) {\n    throw new UnableToParseMethodException(\"Unable to parse query with limiting results clause. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 52,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 742,
        "startLineNumber" : 104,
        "startColumnNumber" : 12,
        "endLineNumber" : 118,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (effectiveFirstOrTopIndex < byIndex) {\n  try {\n    String topCountStr=methodName.substring(effectiveFirstOrTopIndex,byIndex).replace(\"Top\",\"\").replace(\"First\",\"\");\n    if (topCountStr.isEmpty()) {\n      topCount=1;\n    }\n else {\n      topCount=Integer.valueOf(topCountStr);\n    }\n  }\n catch (  Exception e) {\n    throw new UnableToParseMethodException(\"Unable to parse query with limiting results clause. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 56,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1087,
        "startLineNumber" : 99,
        "startColumnNumber" : 52,
        "endLineNumber" : 119,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  int effectiveFirstOrTopIndex=(topIndex > -1 && firstIndex > -1) ? Math.max(topIndex,firstIndex) : Math.max(firstIndex,topIndex);\n  if (effectiveFirstOrTopIndex < byIndex) {\n    try {\n      String topCountStr=methodName.substring(effectiveFirstOrTopIndex,byIndex).replace(\"Top\",\"\").replace(\"First\",\"\");\n      if (topCountStr.isEmpty()) {\n        topCount=1;\n      }\n else {\n        topCount=Integer.valueOf(topCountStr);\n      }\n    }\n catch (    Exception e) {\n      throw new UnableToParseMethodException(\"Unable to parse query with limiting results clause. Offending method is \" + repositoryMethodDescription + \".\");\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 82,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1131,
        "startLineNumber" : 99,
        "startColumnNumber" : 8,
        "endLineNumber" : 119,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if ((firstIndex != -1) || (topIndex != -1)) {\n  int effectiveFirstOrTopIndex=(topIndex > -1 && firstIndex > -1) ? Math.max(topIndex,firstIndex) : Math.max(firstIndex,topIndex);\n  if (effectiveFirstOrTopIndex < byIndex) {\n    try {\n      String topCountStr=methodName.substring(effectiveFirstOrTopIndex,byIndex).replace(\"Top\",\"\").replace(\"First\",\"\");\n      if (topCountStr.isEmpty()) {\n        topCount=1;\n      }\n else {\n        topCount=Integer.valueOf(topCountStr);\n      }\n    }\n catch (    Exception e) {\n      throw new UnableToParseMethodException(\"Unable to parse query with limiting results clause. Offending method is \" + repositoryMethodDescription + \".\");\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 94,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 12460,
        "startLineNumber" : 79,
        "startColumnNumber" : 47,
        "endLineNumber" : 338,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String methodName=methodInfo.name();\n  ClassInfo repositoryClassInfo=methodInfo.declaringClass();\n  String repositoryMethodDescription=\"'\" + methodName + \"' of repository '\"+ repositoryClassInfo+ \"'\";\n  QueryType queryType=getType(methodName);\n  if (queryType == null) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed. Did you forget to annotate the method with '@Query'?\");\n  }\n  int byIndex=methodName.indexOf(\"By\");\n  if ((byIndex == -1) || (byIndex + 2 >= methodName.length())) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed as there is no proper 'By' clause in the name.\");\n  }\n  Integer topCount=null;\n  int firstIndex=methodName.indexOf(\"First\");\n  int topIndex=methodName.indexOf(\"Top\");\n  if ((firstIndex != -1) || (topIndex != -1)) {\n    int effectiveFirstOrTopIndex=(topIndex > -1 && firstIndex > -1) ? Math.max(topIndex,firstIndex) : Math.max(firstIndex,topIndex);\n    if (effectiveFirstOrTopIndex < byIndex) {\n      try {\n        String topCountStr=methodName.substring(effectiveFirstOrTopIndex,byIndex).replace(\"Top\",\"\").replace(\"First\",\"\");\n        if (topCountStr.isEmpty()) {\n          topCount=1;\n        }\n else {\n          topCount=Integer.valueOf(topCountStr);\n        }\n      }\n catch (      Exception e) {\n        throw new UnableToParseMethodException(\"Unable to parse query with limiting results clause. Offending method is \" + repositoryMethodDescription + \".\");\n      }\n    }\n  }\n  if ((topCount != null) && (queryType != QueryType.SELECT)) {\n    throw new UnableToParseMethodException(\"When 'Top' or 'First' is specified, the query must be a find query. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (methodName.substring(0,byIndex).contains(\"Distinct\")) {\n    throw new UnableToParseMethodException(\"Distinct is not yet supported. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  String afterByPart=methodName.substring(byIndex + 2);\n  boolean allIgnoreCase=false;\n  if (afterByPart.contains(ALL_IGNORE_CASE)) {\n    allIgnoreCase=true;\n    afterByPart=afterByPart.replace(ALL_IGNORE_CASE,\"\");\n  }\n  Sort sort=null;\n  if (containsLogicOperator(afterByPart,ORDER_BY)) {\n    int orderByIndex=afterByPart.indexOf(ORDER_BY);\n    if (orderByIndex + ORDER_BY.length() == afterByPart.length()) {\n      throw new UnableToParseMethodException(\"A field must by supplied after 'OrderBy' . Offending method is \" + repositoryMethodDescription + \".\");\n    }\n    String afterOrderByPart=afterByPart.substring(orderByIndex + ORDER_BY.length());\n    afterByPart=afterByPart.substring(0,orderByIndex);\n    boolean ascending=true;\n    if (afterOrderByPart.endsWith(\"Asc\")) {\n      ascending=true;\n      afterOrderByPart=afterOrderByPart.replace(\"Asc\",\"\");\n    }\n else     if (afterOrderByPart.endsWith(\"Desc\")) {\n      ascending=false;\n      afterOrderByPart=afterOrderByPart.replace(\"Desc\",\"\");\n    }\n    String orderField=lowerFirstLetter(afterOrderByPart);\n    if (!entityContainsField(orderField)) {\n      throw new UnableToParseMethodException(\"Field \" + orderField + \" which was configured as the order field does not exist in the entity. Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (ascending) {\n      sort=Sort.ascending(orderField);\n    }\n else {\n      sort=Sort.descending(orderField);\n    }\n  }\n  List<String> parts=Collections.singletonList(afterByPart);\n  boolean containsAnd=containsLogicOperator(afterByPart,\"And\");\n  boolean containsOr=containsLogicOperator(afterByPart,\"Or\");\n  if (containsAnd && containsOr) {\n    throw new UnableToParseMethodException(\"'And' and 'Or' clauses cannot be mixed in a method name - Try specifying the Query with the @Query annotation. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (containsAnd) {\n    parts=Arrays.asList(afterByPart.split(\"And\"));\n  }\n else   if (containsOr) {\n    parts=Arrays.asList(afterByPart.split(\"Or\"));\n  }\n  MutableReference<List<ClassInfo>> mappedSuperClassInfoRef=MutableReference.of(mappedSuperClassInfos);\n  StringBuilder where=new StringBuilder();\n  int paramsCount=0;\n  for (  String part : parts) {\n    if (part.isEmpty()) {\n      continue;\n    }\n    String fieldName;\n    boolean ignoreCase=false;\n    if (part.endsWith(IGNORE_CASE)) {\n      ignoreCase=true;\n      part=part.replace(IGNORE_CASE,\"\");\n    }\n    String operation=getFieldOperation(part);\n    if (operation == null) {\n      fieldName=lowerFirstLetter(part);\n    }\n else {\n      fieldName=lowerFirstLetter(part.replaceAll(operation,\"\"));\n    }\n    FieldInfo fieldInfo=getFieldInfo(fieldName,entityClass,mappedSuperClassInfoRef);\n    if (fieldInfo == null) {\n      StringBuilder fieldPathBuilder=new StringBuilder(fieldName.length() + 5);\n      fieldInfo=resolveNestedField(repositoryMethodDescription,fieldName,fieldPathBuilder);\n      fieldName=fieldPathBuilder.toString();\n    }\n    validateFieldWithOperation(operation,fieldInfo,fieldName,repositoryMethodDescription);\n    if ((ignoreCase || allIgnoreCase) && !DotNames.STRING.equals(fieldInfo.type().name())) {\n      throw new UnableToParseMethodException(\"IgnoreCase cannot be specified for field\" + fieldInfo.name() + \" because it is not a String type. \"+ \"Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (where.length() > 0) {\n      where.append(containsAnd ? \" AND \" : \" OR \");\n    }\n    String upperPrefix=(ignoreCase || allIgnoreCase) ? \"UPPER(\" : \"\";\n    String upperSuffix=(ignoreCase || allIgnoreCase) ? \")\" : \"\";\n    where.append(upperPrefix).append(fieldName).append(upperSuffix);\n    if ((operation == null) || \"Equals\".equals(operation) || \"Is\".equals(operation)) {\n      paramsCount++;\n      where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n    }\n else {\nswitch (operation) {\ncase \"IsNot\":case \"Not\":        paramsCount++;\n      where.append(\" <> ?\").append(paramsCount);\n    break;\ncase \"IsNull\":case \"Null\":  where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n}\nString whereQuery=where.toString().isEmpty() ? \"\" : \" WHERE \" + where.toString();\nreturn new Result(entityClass,\"FROM \" + getEntityName() + whereQuery,queryType,paramsCount,sort,topCount);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1110,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 12503,
        "startLineNumber" : 79,
        "startColumnNumber" : 4,
        "endLineNumber" : 338,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public Result parse(MethodInfo methodInfo){\n  String methodName=methodInfo.name();\n  ClassInfo repositoryClassInfo=methodInfo.declaringClass();\n  String repositoryMethodDescription=\"'\" + methodName + \"' of repository '\"+ repositoryClassInfo+ \"'\";\n  QueryType queryType=getType(methodName);\n  if (queryType == null) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed. Did you forget to annotate the method with '@Query'?\");\n  }\n  int byIndex=methodName.indexOf(\"By\");\n  if ((byIndex == -1) || (byIndex + 2 >= methodName.length())) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed as there is no proper 'By' clause in the name.\");\n  }\n  Integer topCount=null;\n  int firstIndex=methodName.indexOf(\"First\");\n  int topIndex=methodName.indexOf(\"Top\");\n  if ((firstIndex != -1) || (topIndex != -1)) {\n    int effectiveFirstOrTopIndex=(topIndex > -1 && firstIndex > -1) ? Math.max(topIndex,firstIndex) : Math.max(firstIndex,topIndex);\n    if (effectiveFirstOrTopIndex < byIndex) {\n      try {\n        String topCountStr=methodName.substring(effectiveFirstOrTopIndex,byIndex).replace(\"Top\",\"\").replace(\"First\",\"\");\n        if (topCountStr.isEmpty()) {\n          topCount=1;\n        }\n else {\n          topCount=Integer.valueOf(topCountStr);\n        }\n      }\n catch (      Exception e) {\n        throw new UnableToParseMethodException(\"Unable to parse query with limiting results clause. Offending method is \" + repositoryMethodDescription + \".\");\n      }\n    }\n  }\n  if ((topCount != null) && (queryType != QueryType.SELECT)) {\n    throw new UnableToParseMethodException(\"When 'Top' or 'First' is specified, the query must be a find query. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (methodName.substring(0,byIndex).contains(\"Distinct\")) {\n    throw new UnableToParseMethodException(\"Distinct is not yet supported. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  String afterByPart=methodName.substring(byIndex + 2);\n  boolean allIgnoreCase=false;\n  if (afterByPart.contains(ALL_IGNORE_CASE)) {\n    allIgnoreCase=true;\n    afterByPart=afterByPart.replace(ALL_IGNORE_CASE,\"\");\n  }\n  Sort sort=null;\n  if (containsLogicOperator(afterByPart,ORDER_BY)) {\n    int orderByIndex=afterByPart.indexOf(ORDER_BY);\n    if (orderByIndex + ORDER_BY.length() == afterByPart.length()) {\n      throw new UnableToParseMethodException(\"A field must by supplied after 'OrderBy' . Offending method is \" + repositoryMethodDescription + \".\");\n    }\n    String afterOrderByPart=afterByPart.substring(orderByIndex + ORDER_BY.length());\n    afterByPart=afterByPart.substring(0,orderByIndex);\n    boolean ascending=true;\n    if (afterOrderByPart.endsWith(\"Asc\")) {\n      ascending=true;\n      afterOrderByPart=afterOrderByPart.replace(\"Asc\",\"\");\n    }\n else     if (afterOrderByPart.endsWith(\"Desc\")) {\n      ascending=false;\n      afterOrderByPart=afterOrderByPart.replace(\"Desc\",\"\");\n    }\n    String orderField=lowerFirstLetter(afterOrderByPart);\n    if (!entityContainsField(orderField)) {\n      throw new UnableToParseMethodException(\"Field \" + orderField + \" which was configured as the order field does not exist in the entity. Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (ascending) {\n      sort=Sort.ascending(orderField);\n    }\n else {\n      sort=Sort.descending(orderField);\n    }\n  }\n  List<String> parts=Collections.singletonList(afterByPart);\n  boolean containsAnd=containsLogicOperator(afterByPart,\"And\");\n  boolean containsOr=containsLogicOperator(afterByPart,\"Or\");\n  if (containsAnd && containsOr) {\n    throw new UnableToParseMethodException(\"'And' and 'Or' clauses cannot be mixed in a method name - Try specifying the Query with the @Query annotation. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (containsAnd) {\n    parts=Arrays.asList(afterByPart.split(\"And\"));\n  }\n else   if (containsOr) {\n    parts=Arrays.asList(afterByPart.split(\"Or\"));\n  }\n  MutableReference<List<ClassInfo>> mappedSuperClassInfoRef=MutableReference.of(mappedSuperClassInfos);\n  StringBuilder where=new StringBuilder();\n  int paramsCount=0;\n  for (  String part : parts) {\n    if (part.isEmpty()) {\n      continue;\n    }\n    String fieldName;\n    boolean ignoreCase=false;\n    if (part.endsWith(IGNORE_CASE)) {\n      ignoreCase=true;\n      part=part.replace(IGNORE_CASE,\"\");\n    }\n    String operation=getFieldOperation(part);\n    if (operation == null) {\n      fieldName=lowerFirstLetter(part);\n    }\n else {\n      fieldName=lowerFirstLetter(part.replaceAll(operation,\"\"));\n    }\n    FieldInfo fieldInfo=getFieldInfo(fieldName,entityClass,mappedSuperClassInfoRef);\n    if (fieldInfo == null) {\n      StringBuilder fieldPathBuilder=new StringBuilder(fieldName.length() + 5);\n      fieldInfo=resolveNestedField(repositoryMethodDescription,fieldName,fieldPathBuilder);\n      fieldName=fieldPathBuilder.toString();\n    }\n    validateFieldWithOperation(operation,fieldInfo,fieldName,repositoryMethodDescription);\n    if ((ignoreCase || allIgnoreCase) && !DotNames.STRING.equals(fieldInfo.type().name())) {\n      throw new UnableToParseMethodException(\"IgnoreCase cannot be specified for field\" + fieldInfo.name() + \" because it is not a String type. \"+ \"Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (where.length() > 0) {\n      where.append(containsAnd ? \" AND \" : \" OR \");\n    }\n    String upperPrefix=(ignoreCase || allIgnoreCase) ? \"UPPER(\" : \"\";\n    String upperSuffix=(ignoreCase || allIgnoreCase) ? \")\" : \"\";\n    where.append(upperPrefix).append(fieldName).append(upperSuffix);\n    if ((operation == null) || \"Equals\".equals(operation) || \"Is\".equals(operation)) {\n      paramsCount++;\n      where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n    }\n else {\nswitch (operation) {\ncase \"IsNot\":case \"Not\":        paramsCount++;\n      where.append(\" <> ?\").append(paramsCount);\n    break;\ncase \"IsNull\":case \"Null\":  where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n}\nString whereQuery=where.toString().isEmpty() ? \"\" : \" WHERE \" + where.toString();\nreturn new Result(entityClass,\"FROM \" + getEntityName() + whereQuery,queryType,paramsCount,sort,topCount);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1119,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 106,
        "startColumnNumber" : 41,
        "endLineNumber" : 106,
        "endColumnNumber" : 96
      },
      "nodeContext" : "methodName.substring(effectiveFirstOrTopIndex,byIndex)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "methodName",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 126,
      "startColumnNumber" : 12,
      "endLineNumber" : 126,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 126,
        "startColumnNumber" : 12,
        "endLineNumber" : 126,
        "endColumnNumber" : 44
      },
      "nodeContext" : "methodName.substring(0,byIndex)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 126,
        "startColumnNumber" : 12,
        "endLineNumber" : 126,
        "endColumnNumber" : 65
      },
      "nodeContext" : "methodName.substring(0,byIndex).contains(\"Distinct\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 234,
        "startLineNumber" : 126,
        "startColumnNumber" : 8,
        "endLineNumber" : 129,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (methodName.substring(0,byIndex).contains(\"Distinct\")) {\n  throw new UnableToParseMethodException(\"Distinct is not yet supported. Offending method is \" + repositoryMethodDescription + \".\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 12460,
        "startLineNumber" : 79,
        "startColumnNumber" : 47,
        "endLineNumber" : 338,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String methodName=methodInfo.name();\n  ClassInfo repositoryClassInfo=methodInfo.declaringClass();\n  String repositoryMethodDescription=\"'\" + methodName + \"' of repository '\"+ repositoryClassInfo+ \"'\";\n  QueryType queryType=getType(methodName);\n  if (queryType == null) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed. Did you forget to annotate the method with '@Query'?\");\n  }\n  int byIndex=methodName.indexOf(\"By\");\n  if ((byIndex == -1) || (byIndex + 2 >= methodName.length())) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed as there is no proper 'By' clause in the name.\");\n  }\n  Integer topCount=null;\n  int firstIndex=methodName.indexOf(\"First\");\n  int topIndex=methodName.indexOf(\"Top\");\n  if ((firstIndex != -1) || (topIndex != -1)) {\n    int effectiveFirstOrTopIndex=(topIndex > -1 && firstIndex > -1) ? Math.max(topIndex,firstIndex) : Math.max(firstIndex,topIndex);\n    if (effectiveFirstOrTopIndex < byIndex) {\n      try {\n        String topCountStr=methodName.substring(effectiveFirstOrTopIndex,byIndex).replace(\"Top\",\"\").replace(\"First\",\"\");\n        if (topCountStr.isEmpty()) {\n          topCount=1;\n        }\n else {\n          topCount=Integer.valueOf(topCountStr);\n        }\n      }\n catch (      Exception e) {\n        throw new UnableToParseMethodException(\"Unable to parse query with limiting results clause. Offending method is \" + repositoryMethodDescription + \".\");\n      }\n    }\n  }\n  if ((topCount != null) && (queryType != QueryType.SELECT)) {\n    throw new UnableToParseMethodException(\"When 'Top' or 'First' is specified, the query must be a find query. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (methodName.substring(0,byIndex).contains(\"Distinct\")) {\n    throw new UnableToParseMethodException(\"Distinct is not yet supported. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  String afterByPart=methodName.substring(byIndex + 2);\n  boolean allIgnoreCase=false;\n  if (afterByPart.contains(ALL_IGNORE_CASE)) {\n    allIgnoreCase=true;\n    afterByPart=afterByPart.replace(ALL_IGNORE_CASE,\"\");\n  }\n  Sort sort=null;\n  if (containsLogicOperator(afterByPart,ORDER_BY)) {\n    int orderByIndex=afterByPart.indexOf(ORDER_BY);\n    if (orderByIndex + ORDER_BY.length() == afterByPart.length()) {\n      throw new UnableToParseMethodException(\"A field must by supplied after 'OrderBy' . Offending method is \" + repositoryMethodDescription + \".\");\n    }\n    String afterOrderByPart=afterByPart.substring(orderByIndex + ORDER_BY.length());\n    afterByPart=afterByPart.substring(0,orderByIndex);\n    boolean ascending=true;\n    if (afterOrderByPart.endsWith(\"Asc\")) {\n      ascending=true;\n      afterOrderByPart=afterOrderByPart.replace(\"Asc\",\"\");\n    }\n else     if (afterOrderByPart.endsWith(\"Desc\")) {\n      ascending=false;\n      afterOrderByPart=afterOrderByPart.replace(\"Desc\",\"\");\n    }\n    String orderField=lowerFirstLetter(afterOrderByPart);\n    if (!entityContainsField(orderField)) {\n      throw new UnableToParseMethodException(\"Field \" + orderField + \" which was configured as the order field does not exist in the entity. Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (ascending) {\n      sort=Sort.ascending(orderField);\n    }\n else {\n      sort=Sort.descending(orderField);\n    }\n  }\n  List<String> parts=Collections.singletonList(afterByPart);\n  boolean containsAnd=containsLogicOperator(afterByPart,\"And\");\n  boolean containsOr=containsLogicOperator(afterByPart,\"Or\");\n  if (containsAnd && containsOr) {\n    throw new UnableToParseMethodException(\"'And' and 'Or' clauses cannot be mixed in a method name - Try specifying the Query with the @Query annotation. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (containsAnd) {\n    parts=Arrays.asList(afterByPart.split(\"And\"));\n  }\n else   if (containsOr) {\n    parts=Arrays.asList(afterByPart.split(\"Or\"));\n  }\n  MutableReference<List<ClassInfo>> mappedSuperClassInfoRef=MutableReference.of(mappedSuperClassInfos);\n  StringBuilder where=new StringBuilder();\n  int paramsCount=0;\n  for (  String part : parts) {\n    if (part.isEmpty()) {\n      continue;\n    }\n    String fieldName;\n    boolean ignoreCase=false;\n    if (part.endsWith(IGNORE_CASE)) {\n      ignoreCase=true;\n      part=part.replace(IGNORE_CASE,\"\");\n    }\n    String operation=getFieldOperation(part);\n    if (operation == null) {\n      fieldName=lowerFirstLetter(part);\n    }\n else {\n      fieldName=lowerFirstLetter(part.replaceAll(operation,\"\"));\n    }\n    FieldInfo fieldInfo=getFieldInfo(fieldName,entityClass,mappedSuperClassInfoRef);\n    if (fieldInfo == null) {\n      StringBuilder fieldPathBuilder=new StringBuilder(fieldName.length() + 5);\n      fieldInfo=resolveNestedField(repositoryMethodDescription,fieldName,fieldPathBuilder);\n      fieldName=fieldPathBuilder.toString();\n    }\n    validateFieldWithOperation(operation,fieldInfo,fieldName,repositoryMethodDescription);\n    if ((ignoreCase || allIgnoreCase) && !DotNames.STRING.equals(fieldInfo.type().name())) {\n      throw new UnableToParseMethodException(\"IgnoreCase cannot be specified for field\" + fieldInfo.name() + \" because it is not a String type. \"+ \"Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (where.length() > 0) {\n      where.append(containsAnd ? \" AND \" : \" OR \");\n    }\n    String upperPrefix=(ignoreCase || allIgnoreCase) ? \"UPPER(\" : \"\";\n    String upperSuffix=(ignoreCase || allIgnoreCase) ? \")\" : \"\";\n    where.append(upperPrefix).append(fieldName).append(upperSuffix);\n    if ((operation == null) || \"Equals\".equals(operation) || \"Is\".equals(operation)) {\n      paramsCount++;\n      where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n    }\n else {\nswitch (operation) {\ncase \"IsNot\":case \"Not\":        paramsCount++;\n      where.append(\" <> ?\").append(paramsCount);\n    break;\ncase \"IsNull\":case \"Null\":  where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n}\nString whereQuery=where.toString().isEmpty() ? \"\" : \" WHERE \" + where.toString();\nreturn new Result(entityClass,\"FROM \" + getEntityName() + whereQuery,queryType,paramsCount,sort,topCount);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1110,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 12503,
        "startLineNumber" : 79,
        "startColumnNumber" : 4,
        "endLineNumber" : 338,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public Result parse(MethodInfo methodInfo){\n  String methodName=methodInfo.name();\n  ClassInfo repositoryClassInfo=methodInfo.declaringClass();\n  String repositoryMethodDescription=\"'\" + methodName + \"' of repository '\"+ repositoryClassInfo+ \"'\";\n  QueryType queryType=getType(methodName);\n  if (queryType == null) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed. Did you forget to annotate the method with '@Query'?\");\n  }\n  int byIndex=methodName.indexOf(\"By\");\n  if ((byIndex == -1) || (byIndex + 2 >= methodName.length())) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed as there is no proper 'By' clause in the name.\");\n  }\n  Integer topCount=null;\n  int firstIndex=methodName.indexOf(\"First\");\n  int topIndex=methodName.indexOf(\"Top\");\n  if ((firstIndex != -1) || (topIndex != -1)) {\n    int effectiveFirstOrTopIndex=(topIndex > -1 && firstIndex > -1) ? Math.max(topIndex,firstIndex) : Math.max(firstIndex,topIndex);\n    if (effectiveFirstOrTopIndex < byIndex) {\n      try {\n        String topCountStr=methodName.substring(effectiveFirstOrTopIndex,byIndex).replace(\"Top\",\"\").replace(\"First\",\"\");\n        if (topCountStr.isEmpty()) {\n          topCount=1;\n        }\n else {\n          topCount=Integer.valueOf(topCountStr);\n        }\n      }\n catch (      Exception e) {\n        throw new UnableToParseMethodException(\"Unable to parse query with limiting results clause. Offending method is \" + repositoryMethodDescription + \".\");\n      }\n    }\n  }\n  if ((topCount != null) && (queryType != QueryType.SELECT)) {\n    throw new UnableToParseMethodException(\"When 'Top' or 'First' is specified, the query must be a find query. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (methodName.substring(0,byIndex).contains(\"Distinct\")) {\n    throw new UnableToParseMethodException(\"Distinct is not yet supported. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  String afterByPart=methodName.substring(byIndex + 2);\n  boolean allIgnoreCase=false;\n  if (afterByPart.contains(ALL_IGNORE_CASE)) {\n    allIgnoreCase=true;\n    afterByPart=afterByPart.replace(ALL_IGNORE_CASE,\"\");\n  }\n  Sort sort=null;\n  if (containsLogicOperator(afterByPart,ORDER_BY)) {\n    int orderByIndex=afterByPart.indexOf(ORDER_BY);\n    if (orderByIndex + ORDER_BY.length() == afterByPart.length()) {\n      throw new UnableToParseMethodException(\"A field must by supplied after 'OrderBy' . Offending method is \" + repositoryMethodDescription + \".\");\n    }\n    String afterOrderByPart=afterByPart.substring(orderByIndex + ORDER_BY.length());\n    afterByPart=afterByPart.substring(0,orderByIndex);\n    boolean ascending=true;\n    if (afterOrderByPart.endsWith(\"Asc\")) {\n      ascending=true;\n      afterOrderByPart=afterOrderByPart.replace(\"Asc\",\"\");\n    }\n else     if (afterOrderByPart.endsWith(\"Desc\")) {\n      ascending=false;\n      afterOrderByPart=afterOrderByPart.replace(\"Desc\",\"\");\n    }\n    String orderField=lowerFirstLetter(afterOrderByPart);\n    if (!entityContainsField(orderField)) {\n      throw new UnableToParseMethodException(\"Field \" + orderField + \" which was configured as the order field does not exist in the entity. Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (ascending) {\n      sort=Sort.ascending(orderField);\n    }\n else {\n      sort=Sort.descending(orderField);\n    }\n  }\n  List<String> parts=Collections.singletonList(afterByPart);\n  boolean containsAnd=containsLogicOperator(afterByPart,\"And\");\n  boolean containsOr=containsLogicOperator(afterByPart,\"Or\");\n  if (containsAnd && containsOr) {\n    throw new UnableToParseMethodException(\"'And' and 'Or' clauses cannot be mixed in a method name - Try specifying the Query with the @Query annotation. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (containsAnd) {\n    parts=Arrays.asList(afterByPart.split(\"And\"));\n  }\n else   if (containsOr) {\n    parts=Arrays.asList(afterByPart.split(\"Or\"));\n  }\n  MutableReference<List<ClassInfo>> mappedSuperClassInfoRef=MutableReference.of(mappedSuperClassInfos);\n  StringBuilder where=new StringBuilder();\n  int paramsCount=0;\n  for (  String part : parts) {\n    if (part.isEmpty()) {\n      continue;\n    }\n    String fieldName;\n    boolean ignoreCase=false;\n    if (part.endsWith(IGNORE_CASE)) {\n      ignoreCase=true;\n      part=part.replace(IGNORE_CASE,\"\");\n    }\n    String operation=getFieldOperation(part);\n    if (operation == null) {\n      fieldName=lowerFirstLetter(part);\n    }\n else {\n      fieldName=lowerFirstLetter(part.replaceAll(operation,\"\"));\n    }\n    FieldInfo fieldInfo=getFieldInfo(fieldName,entityClass,mappedSuperClassInfoRef);\n    if (fieldInfo == null) {\n      StringBuilder fieldPathBuilder=new StringBuilder(fieldName.length() + 5);\n      fieldInfo=resolveNestedField(repositoryMethodDescription,fieldName,fieldPathBuilder);\n      fieldName=fieldPathBuilder.toString();\n    }\n    validateFieldWithOperation(operation,fieldInfo,fieldName,repositoryMethodDescription);\n    if ((ignoreCase || allIgnoreCase) && !DotNames.STRING.equals(fieldInfo.type().name())) {\n      throw new UnableToParseMethodException(\"IgnoreCase cannot be specified for field\" + fieldInfo.name() + \" because it is not a String type. \"+ \"Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (where.length() > 0) {\n      where.append(containsAnd ? \" AND \" : \" OR \");\n    }\n    String upperPrefix=(ignoreCase || allIgnoreCase) ? \"UPPER(\" : \"\";\n    String upperSuffix=(ignoreCase || allIgnoreCase) ? \")\" : \"\";\n    where.append(upperPrefix).append(fieldName).append(upperSuffix);\n    if ((operation == null) || \"Equals\".equals(operation) || \"Is\".equals(operation)) {\n      paramsCount++;\n      where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n    }\n else {\nswitch (operation) {\ncase \"IsNot\":case \"Not\":        paramsCount++;\n      where.append(\" <> ?\").append(paramsCount);\n    break;\ncase \"IsNull\":case \"Null\":  where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n}\nString whereQuery=where.toString().isEmpty() ? \"\" : \" WHERE \" + where.toString();\nreturn new Result(entityClass,\"FROM \" + getEntityName() + whereQuery,queryType,paramsCount,sort,topCount);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1119,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 126,
        "startColumnNumber" : 12,
        "endLineNumber" : 126,
        "endColumnNumber" : 65
      },
      "nodeContext" : "methodName.substring(0,byIndex).contains(\"Distinct\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "methodName",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 132,
      "startColumnNumber" : 29,
      "endLineNumber" : 132,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 132,
        "startColumnNumber" : 29,
        "endLineNumber" : 132,
        "endColumnNumber" : 62
      },
      "nodeContext" : "methodName.substring(byIndex + 2)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 132,
        "startColumnNumber" : 15,
        "endLineNumber" : 132,
        "endColumnNumber" : 62
      },
      "nodeContext" : "afterByPart=methodName.substring(byIndex + 2)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 132,
        "startColumnNumber" : 8,
        "endLineNumber" : 132,
        "endColumnNumber" : 63
      },
      "nodeContext" : "String afterByPart=methodName.substring(byIndex + 2);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 12460,
        "startLineNumber" : 79,
        "startColumnNumber" : 47,
        "endLineNumber" : 338,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String methodName=methodInfo.name();\n  ClassInfo repositoryClassInfo=methodInfo.declaringClass();\n  String repositoryMethodDescription=\"'\" + methodName + \"' of repository '\"+ repositoryClassInfo+ \"'\";\n  QueryType queryType=getType(methodName);\n  if (queryType == null) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed. Did you forget to annotate the method with '@Query'?\");\n  }\n  int byIndex=methodName.indexOf(\"By\");\n  if ((byIndex == -1) || (byIndex + 2 >= methodName.length())) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed as there is no proper 'By' clause in the name.\");\n  }\n  Integer topCount=null;\n  int firstIndex=methodName.indexOf(\"First\");\n  int topIndex=methodName.indexOf(\"Top\");\n  if ((firstIndex != -1) || (topIndex != -1)) {\n    int effectiveFirstOrTopIndex=(topIndex > -1 && firstIndex > -1) ? Math.max(topIndex,firstIndex) : Math.max(firstIndex,topIndex);\n    if (effectiveFirstOrTopIndex < byIndex) {\n      try {\n        String topCountStr=methodName.substring(effectiveFirstOrTopIndex,byIndex).replace(\"Top\",\"\").replace(\"First\",\"\");\n        if (topCountStr.isEmpty()) {\n          topCount=1;\n        }\n else {\n          topCount=Integer.valueOf(topCountStr);\n        }\n      }\n catch (      Exception e) {\n        throw new UnableToParseMethodException(\"Unable to parse query with limiting results clause. Offending method is \" + repositoryMethodDescription + \".\");\n      }\n    }\n  }\n  if ((topCount != null) && (queryType != QueryType.SELECT)) {\n    throw new UnableToParseMethodException(\"When 'Top' or 'First' is specified, the query must be a find query. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (methodName.substring(0,byIndex).contains(\"Distinct\")) {\n    throw new UnableToParseMethodException(\"Distinct is not yet supported. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  String afterByPart=methodName.substring(byIndex + 2);\n  boolean allIgnoreCase=false;\n  if (afterByPart.contains(ALL_IGNORE_CASE)) {\n    allIgnoreCase=true;\n    afterByPart=afterByPart.replace(ALL_IGNORE_CASE,\"\");\n  }\n  Sort sort=null;\n  if (containsLogicOperator(afterByPart,ORDER_BY)) {\n    int orderByIndex=afterByPart.indexOf(ORDER_BY);\n    if (orderByIndex + ORDER_BY.length() == afterByPart.length()) {\n      throw new UnableToParseMethodException(\"A field must by supplied after 'OrderBy' . Offending method is \" + repositoryMethodDescription + \".\");\n    }\n    String afterOrderByPart=afterByPart.substring(orderByIndex + ORDER_BY.length());\n    afterByPart=afterByPart.substring(0,orderByIndex);\n    boolean ascending=true;\n    if (afterOrderByPart.endsWith(\"Asc\")) {\n      ascending=true;\n      afterOrderByPart=afterOrderByPart.replace(\"Asc\",\"\");\n    }\n else     if (afterOrderByPart.endsWith(\"Desc\")) {\n      ascending=false;\n      afterOrderByPart=afterOrderByPart.replace(\"Desc\",\"\");\n    }\n    String orderField=lowerFirstLetter(afterOrderByPart);\n    if (!entityContainsField(orderField)) {\n      throw new UnableToParseMethodException(\"Field \" + orderField + \" which was configured as the order field does not exist in the entity. Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (ascending) {\n      sort=Sort.ascending(orderField);\n    }\n else {\n      sort=Sort.descending(orderField);\n    }\n  }\n  List<String> parts=Collections.singletonList(afterByPart);\n  boolean containsAnd=containsLogicOperator(afterByPart,\"And\");\n  boolean containsOr=containsLogicOperator(afterByPart,\"Or\");\n  if (containsAnd && containsOr) {\n    throw new UnableToParseMethodException(\"'And' and 'Or' clauses cannot be mixed in a method name - Try specifying the Query with the @Query annotation. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (containsAnd) {\n    parts=Arrays.asList(afterByPart.split(\"And\"));\n  }\n else   if (containsOr) {\n    parts=Arrays.asList(afterByPart.split(\"Or\"));\n  }\n  MutableReference<List<ClassInfo>> mappedSuperClassInfoRef=MutableReference.of(mappedSuperClassInfos);\n  StringBuilder where=new StringBuilder();\n  int paramsCount=0;\n  for (  String part : parts) {\n    if (part.isEmpty()) {\n      continue;\n    }\n    String fieldName;\n    boolean ignoreCase=false;\n    if (part.endsWith(IGNORE_CASE)) {\n      ignoreCase=true;\n      part=part.replace(IGNORE_CASE,\"\");\n    }\n    String operation=getFieldOperation(part);\n    if (operation == null) {\n      fieldName=lowerFirstLetter(part);\n    }\n else {\n      fieldName=lowerFirstLetter(part.replaceAll(operation,\"\"));\n    }\n    FieldInfo fieldInfo=getFieldInfo(fieldName,entityClass,mappedSuperClassInfoRef);\n    if (fieldInfo == null) {\n      StringBuilder fieldPathBuilder=new StringBuilder(fieldName.length() + 5);\n      fieldInfo=resolveNestedField(repositoryMethodDescription,fieldName,fieldPathBuilder);\n      fieldName=fieldPathBuilder.toString();\n    }\n    validateFieldWithOperation(operation,fieldInfo,fieldName,repositoryMethodDescription);\n    if ((ignoreCase || allIgnoreCase) && !DotNames.STRING.equals(fieldInfo.type().name())) {\n      throw new UnableToParseMethodException(\"IgnoreCase cannot be specified for field\" + fieldInfo.name() + \" because it is not a String type. \"+ \"Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (where.length() > 0) {\n      where.append(containsAnd ? \" AND \" : \" OR \");\n    }\n    String upperPrefix=(ignoreCase || allIgnoreCase) ? \"UPPER(\" : \"\";\n    String upperSuffix=(ignoreCase || allIgnoreCase) ? \")\" : \"\";\n    where.append(upperPrefix).append(fieldName).append(upperSuffix);\n    if ((operation == null) || \"Equals\".equals(operation) || \"Is\".equals(operation)) {\n      paramsCount++;\n      where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n    }\n else {\nswitch (operation) {\ncase \"IsNot\":case \"Not\":        paramsCount++;\n      where.append(\" <> ?\").append(paramsCount);\n    break;\ncase \"IsNull\":case \"Null\":  where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n}\nString whereQuery=where.toString().isEmpty() ? \"\" : \" WHERE \" + where.toString();\nreturn new Result(entityClass,\"FROM \" + getEntityName() + whereQuery,queryType,paramsCount,sort,topCount);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1110,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 12503,
        "startLineNumber" : 79,
        "startColumnNumber" : 4,
        "endLineNumber" : 338,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public Result parse(MethodInfo methodInfo){\n  String methodName=methodInfo.name();\n  ClassInfo repositoryClassInfo=methodInfo.declaringClass();\n  String repositoryMethodDescription=\"'\" + methodName + \"' of repository '\"+ repositoryClassInfo+ \"'\";\n  QueryType queryType=getType(methodName);\n  if (queryType == null) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed. Did you forget to annotate the method with '@Query'?\");\n  }\n  int byIndex=methodName.indexOf(\"By\");\n  if ((byIndex == -1) || (byIndex + 2 >= methodName.length())) {\n    throw new UnableToParseMethodException(\"Method \" + repositoryMethodDescription + \" cannot be parsed as there is no proper 'By' clause in the name.\");\n  }\n  Integer topCount=null;\n  int firstIndex=methodName.indexOf(\"First\");\n  int topIndex=methodName.indexOf(\"Top\");\n  if ((firstIndex != -1) || (topIndex != -1)) {\n    int effectiveFirstOrTopIndex=(topIndex > -1 && firstIndex > -1) ? Math.max(topIndex,firstIndex) : Math.max(firstIndex,topIndex);\n    if (effectiveFirstOrTopIndex < byIndex) {\n      try {\n        String topCountStr=methodName.substring(effectiveFirstOrTopIndex,byIndex).replace(\"Top\",\"\").replace(\"First\",\"\");\n        if (topCountStr.isEmpty()) {\n          topCount=1;\n        }\n else {\n          topCount=Integer.valueOf(topCountStr);\n        }\n      }\n catch (      Exception e) {\n        throw new UnableToParseMethodException(\"Unable to parse query with limiting results clause. Offending method is \" + repositoryMethodDescription + \".\");\n      }\n    }\n  }\n  if ((topCount != null) && (queryType != QueryType.SELECT)) {\n    throw new UnableToParseMethodException(\"When 'Top' or 'First' is specified, the query must be a find query. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (methodName.substring(0,byIndex).contains(\"Distinct\")) {\n    throw new UnableToParseMethodException(\"Distinct is not yet supported. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  String afterByPart=methodName.substring(byIndex + 2);\n  boolean allIgnoreCase=false;\n  if (afterByPart.contains(ALL_IGNORE_CASE)) {\n    allIgnoreCase=true;\n    afterByPart=afterByPart.replace(ALL_IGNORE_CASE,\"\");\n  }\n  Sort sort=null;\n  if (containsLogicOperator(afterByPart,ORDER_BY)) {\n    int orderByIndex=afterByPart.indexOf(ORDER_BY);\n    if (orderByIndex + ORDER_BY.length() == afterByPart.length()) {\n      throw new UnableToParseMethodException(\"A field must by supplied after 'OrderBy' . Offending method is \" + repositoryMethodDescription + \".\");\n    }\n    String afterOrderByPart=afterByPart.substring(orderByIndex + ORDER_BY.length());\n    afterByPart=afterByPart.substring(0,orderByIndex);\n    boolean ascending=true;\n    if (afterOrderByPart.endsWith(\"Asc\")) {\n      ascending=true;\n      afterOrderByPart=afterOrderByPart.replace(\"Asc\",\"\");\n    }\n else     if (afterOrderByPart.endsWith(\"Desc\")) {\n      ascending=false;\n      afterOrderByPart=afterOrderByPart.replace(\"Desc\",\"\");\n    }\n    String orderField=lowerFirstLetter(afterOrderByPart);\n    if (!entityContainsField(orderField)) {\n      throw new UnableToParseMethodException(\"Field \" + orderField + \" which was configured as the order field does not exist in the entity. Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (ascending) {\n      sort=Sort.ascending(orderField);\n    }\n else {\n      sort=Sort.descending(orderField);\n    }\n  }\n  List<String> parts=Collections.singletonList(afterByPart);\n  boolean containsAnd=containsLogicOperator(afterByPart,\"And\");\n  boolean containsOr=containsLogicOperator(afterByPart,\"Or\");\n  if (containsAnd && containsOr) {\n    throw new UnableToParseMethodException(\"'And' and 'Or' clauses cannot be mixed in a method name - Try specifying the Query with the @Query annotation. Offending method is \" + repositoryMethodDescription + \".\");\n  }\n  if (containsAnd) {\n    parts=Arrays.asList(afterByPart.split(\"And\"));\n  }\n else   if (containsOr) {\n    parts=Arrays.asList(afterByPart.split(\"Or\"));\n  }\n  MutableReference<List<ClassInfo>> mappedSuperClassInfoRef=MutableReference.of(mappedSuperClassInfos);\n  StringBuilder where=new StringBuilder();\n  int paramsCount=0;\n  for (  String part : parts) {\n    if (part.isEmpty()) {\n      continue;\n    }\n    String fieldName;\n    boolean ignoreCase=false;\n    if (part.endsWith(IGNORE_CASE)) {\n      ignoreCase=true;\n      part=part.replace(IGNORE_CASE,\"\");\n    }\n    String operation=getFieldOperation(part);\n    if (operation == null) {\n      fieldName=lowerFirstLetter(part);\n    }\n else {\n      fieldName=lowerFirstLetter(part.replaceAll(operation,\"\"));\n    }\n    FieldInfo fieldInfo=getFieldInfo(fieldName,entityClass,mappedSuperClassInfoRef);\n    if (fieldInfo == null) {\n      StringBuilder fieldPathBuilder=new StringBuilder(fieldName.length() + 5);\n      fieldInfo=resolveNestedField(repositoryMethodDescription,fieldName,fieldPathBuilder);\n      fieldName=fieldPathBuilder.toString();\n    }\n    validateFieldWithOperation(operation,fieldInfo,fieldName,repositoryMethodDescription);\n    if ((ignoreCase || allIgnoreCase) && !DotNames.STRING.equals(fieldInfo.type().name())) {\n      throw new UnableToParseMethodException(\"IgnoreCase cannot be specified for field\" + fieldInfo.name() + \" because it is not a String type. \"+ \"Offending method is \"+ repositoryMethodDescription+ \".\");\n    }\n    if (where.length() > 0) {\n      where.append(containsAnd ? \" AND \" : \" OR \");\n    }\n    String upperPrefix=(ignoreCase || allIgnoreCase) ? \"UPPER(\" : \"\";\n    String upperSuffix=(ignoreCase || allIgnoreCase) ? \")\" : \"\";\n    where.append(upperPrefix).append(fieldName).append(upperSuffix);\n    if ((operation == null) || \"Equals\".equals(operation) || \"Is\".equals(operation)) {\n      paramsCount++;\n      where.append(\" = \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix);\n    }\n else {\nswitch (operation) {\ncase \"IsNot\":case \"Not\":        paramsCount++;\n      where.append(\" <> ?\").append(paramsCount);\n    break;\ncase \"IsNull\":case \"Null\":  where.append(\" IS null \");\nbreak;\ncase \"IsNotNull\":case \"NotNull\":where.append(\" IS NOT null \");\nbreak;\ncase \"Between\":case \"IsBetween\":where.append(\" BETWEEN \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount).append(\" AND \");\nparamsCount++;\nwhere.append(\"?\").append(paramsCount);\nbreak;\ncase \"LessThan\":case \"IsLessThan\":case \"Before\":case \"IsBefore\":paramsCount++;\nwhere.append(\" < ?\").append(paramsCount);\nbreak;\ncase \"LessThanEqual\":case \"IsLessThanEqual\":paramsCount++;\nwhere.append(\" <= ?\").append(paramsCount);\nbreak;\ncase \"GreaterThan\":case \"IsGreaterThan\":case \"After\":case \"IsAfter\":paramsCount++;\nwhere.append(\" > ?\").append(paramsCount);\nbreak;\ncase \"GreaterThanEqual\":case \"IsGreaterThanEqual\":paramsCount++;\nwhere.append(\" >= ?\").append(paramsCount);\nbreak;\ncase \"Like\":case \"IsLike\":paramsCount++;\nwhere.append(\" LIKE ?\").append(paramsCount);\nbreak;\ncase \"NotLike\":case \"IsNotLike\":paramsCount++;\nwhere.append(\" NOT LIKE ?\").append(paramsCount);\nbreak;\ncase \"IsStartingWith\":case \"StartingWith\":case \"StartsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT(\").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"IsEndingWith\":case \"EndingWith\":case \"EndsWith\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\")\");\nbreak;\ncase \"IsContaining\":case \"Containing\":case \"Contains\":paramsCount++;\nwhere.append(\" LIKE CONCAT('%', \").append(upperPrefix).append(\"?\").append(paramsCount).append(upperSuffix).append(\", '%')\");\nbreak;\ncase \"True\":case \"False\":where.append(\" = \").append(operation.toLowerCase());\nbreak;\ncase \"IsIn\":case \"In\":paramsCount++;\nwhere.append(\" IN ?\").append(paramsCount);\nbreak;\ncase \"IsNotIn\":case \"NotIn\":paramsCount++;\nwhere.append(\" NOT IN ?\").append(paramsCount);\nbreak;\ncase \"IsEmpty\":case \"Empty\":where.append(\" IS EMPTY\");\nbreak;\ncase \"IsNotEmpty\":case \"NotEmpty\":where.append(\" IS NOT EMPTY\");\nbreak;\n}\n}\n}\nString whereQuery=where.toString().isEmpty() ? \"\" : \" WHERE \" + where.toString();\nreturn new Result(entityClass,\"FROM \" + getEntityName() + whereQuery,queryType,paramsCount,sort,topCount);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1119,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 132,
        "startColumnNumber" : 8,
        "endLineNumber" : 132,
        "endColumnNumber" : 63
      },
      "nodeContext" : "String afterByPart=methodName.substring(byIndex + 2);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 10,
    "startLineNumber" : 82,
    "startColumnNumber" : 51,
    "endLineNumber" : 82,
    "endColumnNumber" : 61
  }, {
    "charLength" : 10,
    "startLineNumber" : 83,
    "startColumnNumber" : 38,
    "endLineNumber" : 83,
    "endColumnNumber" : 48
  }, {
    "charLength" : 10,
    "startLineNumber" : 89,
    "startColumnNumber" : 22,
    "endLineNumber" : 89,
    "endColumnNumber" : 32
  }, {
    "charLength" : 10,
    "startLineNumber" : 90,
    "startColumnNumber" : 47,
    "endLineNumber" : 90,
    "endColumnNumber" : 57
  }, {
    "charLength" : 10,
    "startLineNumber" : 97,
    "startColumnNumber" : 25,
    "endLineNumber" : 97,
    "endColumnNumber" : 35
  }, {
    "charLength" : 10,
    "startLineNumber" : 98,
    "startColumnNumber" : 23,
    "endLineNumber" : 98,
    "endColumnNumber" : 33
  }, {
    "charLength" : 10,
    "startLineNumber" : 106,
    "startColumnNumber" : 41,
    "endLineNumber" : 106,
    "endColumnNumber" : 51
  }, {
    "charLength" : 10,
    "startLineNumber" : 126,
    "startColumnNumber" : 12,
    "endLineNumber" : 126,
    "endColumnNumber" : 22
  }, {
    "charLength" : 10,
    "startLineNumber" : 132,
    "startColumnNumber" : 29,
    "endLineNumber" : 132,
    "endColumnNumber" : 39
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 11
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 11
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 11
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 11
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 11
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 11
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 11
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 11
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 3
  } ]
}