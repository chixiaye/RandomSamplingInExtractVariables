{
  "id" : 175,
  "expression" : "r.index < 0 || r.index >= indexToRule.size()",
  "projectName" : "antlr@antlr4",
  "commitID" : "f2b93e550cd912be3973743d09206db98f4092c9",
  "filePath" : "/tool/src/org/antlr/v4/tool/Grammar.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "r.index < 0 || r.index >= indexToRule.size()",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 44,
      "startLineNumber" : 462,
      "startColumnNumber" : 6,
      "endLineNumber" : 462,
      "endColumnNumber" : 50
    },
    "astNodeNumber" : 13,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 462,
        "startColumnNumber" : 6,
        "endLineNumber" : 462,
        "endColumnNumber" : 83
      },
      "nodeContext" : "r.index < 0 || r.index >= indexToRule.size() || indexToRule.get(r.index) != r",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 22,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 107,
        "startLineNumber" : 462,
        "startColumnNumber" : 2,
        "endLineNumber" : 464,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (r.index < 0 || r.index >= indexToRule.size() || indexToRule.get(r.index) != r) {\n  return false;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 26,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 385,
        "startLineNumber" : 461,
        "startColumnNumber" : 37,
        "endLineNumber" : 477,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (r.index < 0 || r.index >= indexToRule.size() || indexToRule.get(r.index) != r) {\n    return false;\n  }\n  assert rules.get(r.name) == r;\n  rules.remove(r.name);\n  indexToRule.remove(r.index);\n  for (int i=r.index; i < indexToRule.size(); i++) {\n    assert indexToRule.get(i).index == i + 1;\n    indexToRule.get(i).index--;\n  }\n  ruleNumber--;\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 90,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1130,
        "startLineNumber" : 445,
        "startColumnNumber" : 1,
        "endLineNumber" : 477,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Undefine the specified rule from this  {@link Grammar} instance. Theinstance  {@code r} is removed from {@link #rules} and{@link #indexToRule}. This method updates the  {@link Rule#index} fieldfor all rules defined after  {@code r}, and decrements  {@link #ruleNumber}in preparation for adding new rules. <p> This method does nothing if the current  {@link Grammar} does not containthe instance  {@code r} at index {@code r.index} in {@link #indexToRule}. </p>\n * @param r\n * @return {@code true} if the rule was removed from the {@link Grammar}instance; otherwise,  {@code false} if the specified rule was not definedin the grammar.\n */\npublic boolean undefineRule(Rule r){\n  if (r.index < 0 || r.index >= indexToRule.size() || indexToRule.get(r.index) != r) {\n    return false;\n  }\n  assert rules.get(r.name) == r;\n  rules.remove(r.name);\n  indexToRule.remove(r.index);\n  for (int i=r.index; i < indexToRule.size(); i++) {\n    assert indexToRule.get(i).index == i + 1;\n    indexToRule.get(i).index--;\n  }\n  ruleNumber--;\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 99,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 462,
        "startColumnNumber" : 6,
        "endLineNumber" : 462,
        "endColumnNumber" : 83
      },
      "nodeContext" : "r.index < 0 || r.index >= indexToRule.size() || indexToRule.get(r.index) != r",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 22,
      "astHeight" : 5
    },
    "tokenLength" : 10,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 44,
    "startLineNumber" : 462,
    "startColumnNumber" : 6,
    "endLineNumber" : 462,
    "endColumnNumber" : 50
  } ],
  "layoutRelationDataList" : [ ]
}