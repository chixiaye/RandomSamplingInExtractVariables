{
  "id" : 73,
  "expression" : "cache",
  "projectName" : "apache@flink",
  "commitID" : "f8cb19e70ca7da6423dfb01b97e05c4d520c9fde",
  "filePath" : "/flink-runtime/src/test/java/org/apache/flink/runtime/blob/PermanentBlobCacheSizeLimitTest.java",
  "occurrences" : 5,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "cache",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 85,
      "startColumnNumber" : 41,
      "endLineNumber" : 85,
      "endColumnNumber" : 46
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 85,
        "startColumnNumber" : 16,
        "endLineNumber" : 85,
        "endColumnNumber" : 96
      },
      "nodeContext" : "readFileAndVerifyContent(cache,blobs[i].jobId,blobs[i].blobKey,blobs[i].data)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 18,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 85,
        "startColumnNumber" : 16,
        "endLineNumber" : 85,
        "endColumnNumber" : 97
      },
      "nodeContext" : "readFileAndVerifyContent(cache,blobs[i].jobId,blobs[i].blobKey,blobs[i].data);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 19,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 385,
        "startLineNumber" : 82,
        "startColumnNumber" : 57,
        "endLineNumber" : 90,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  readFileAndVerifyContent(cache,blobs[i].jobId,blobs[i].blobKey,blobs[i].data);\n  blobs[i].blobFile=getFile(cache,blobs[i].jobId,blobs[i].blobKey);\n  assertTrue(blobs[i].blobFile.exists());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 50,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 430,
        "startLineNumber" : 82,
        "startColumnNumber" : 12,
        "endLineNumber" : 90,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int i=0; i < TOTAL_NUM_OF_BLOBS; i++) {\n  readFileAndVerifyContent(cache,blobs[i].jobId,blobs[i].blobKey,blobs[i].data);\n  blobs[i].blobFile=getFile(cache,blobs[i].jobId,blobs[i].blobKey);\n  assertTrue(blobs[i].blobFile.exists());\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 61,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1652,
        "startLineNumber" : 74,
        "startColumnNumber" : 95,
        "endLineNumber" : 109,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  server.start();\n  final BlobInfo[] blobs=putBlobsIntoBlobServer(server);\n  for (int i=0; i < TOTAL_NUM_OF_BLOBS; i++) {\n    readFileAndVerifyContent(cache,blobs[i].jobId,blobs[i].blobKey,blobs[i].data);\n    blobs[i].blobFile=getFile(cache,blobs[i].jobId,blobs[i].blobKey);\n    assertTrue(blobs[i].blobFile.exists());\n  }\n  assertFalse(blobs[0].blobFile.exists());\n  assertTrue(blobs[1].blobFile.exists());\n  readFileAndVerifyContent(cache,blobs[1].jobId,blobs[1].blobKey,blobs[1].data);\n  blobs[0].blobKey=put(server,blobs[0].jobId,blobs[0].data,BLOB_TYPE);\n  readFileAndVerifyContent(cache,blobs[0].jobId,blobs[0].blobKey,blobs[0].data);\n  blobs[0].blobFile=getFile(cache,blobs[0].jobId,blobs[0].blobKey);\n  assertTrue(blobs[0].blobFile.exists());\n  assertTrue(blobs[1].blobFile.exists());\n  assertFalse(blobs[2].blobFile.exists());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 206,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1971,
        "startLineNumber" : 70,
        "startColumnNumber" : 8,
        "endLineNumber" : 109,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try (BlobServer server=new BlobServer(config,TEMPORARY_FOLDER.newFolder(),new VoidBlobStore());BlobCacheService cache=initBlobCacheServiceWithSizeLimit(config,new InetSocketAddress(\"localhost\",server.getPort()))){\n  server.start();\n  final BlobInfo[] blobs=putBlobsIntoBlobServer(server);\n  for (int i=0; i < TOTAL_NUM_OF_BLOBS; i++) {\n    readFileAndVerifyContent(cache,blobs[i].jobId,blobs[i].blobKey,blobs[i].data);\n    blobs[i].blobFile=getFile(cache,blobs[i].jobId,blobs[i].blobKey);\n    assertTrue(blobs[i].blobFile.exists());\n  }\n  assertFalse(blobs[0].blobFile.exists());\n  assertTrue(blobs[1].blobFile.exists());\n  readFileAndVerifyContent(cache,blobs[1].jobId,blobs[1].blobKey,blobs[1].data);\n  blobs[0].blobKey=put(server,blobs[0].jobId,blobs[0].data,BLOB_TYPE);\n  readFileAndVerifyContent(cache,blobs[0].jobId,blobs[0].blobKey,blobs[0].data);\n  blobs[0].blobFile=getFile(cache,blobs[0].jobId,blobs[0].blobKey);\n  assertTrue(blobs[0].blobFile.exists());\n  assertTrue(blobs[1].blobFile.exists());\n  assertFalse(blobs[2].blobFile.exists());\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 237,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2046,
        "startLineNumber" : 67,
        "startColumnNumber" : 81,
        "endLineNumber" : 110,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final Configuration config=new Configuration();\n  try (BlobServer server=new BlobServer(config,TEMPORARY_FOLDER.newFolder(),new VoidBlobStore());BlobCacheService cache=initBlobCacheServiceWithSizeLimit(config,new InetSocketAddress(\"localhost\",server.getPort()))){\n    server.start();\n    final BlobInfo[] blobs=putBlobsIntoBlobServer(server);\n    for (int i=0; i < TOTAL_NUM_OF_BLOBS; i++) {\n      readFileAndVerifyContent(cache,blobs[i].jobId,blobs[i].blobKey,blobs[i].data);\n      blobs[i].blobFile=getFile(cache,blobs[i].jobId,blobs[i].blobKey);\n      assertTrue(blobs[i].blobFile.exists());\n    }\n    assertFalse(blobs[0].blobFile.exists());\n    assertTrue(blobs[1].blobFile.exists());\n    readFileAndVerifyContent(cache,blobs[1].jobId,blobs[1].blobKey,blobs[1].data);\n    blobs[0].blobKey=put(server,blobs[0].jobId,blobs[0].data,BLOB_TYPE);\n    readFileAndVerifyContent(cache,blobs[0].jobId,blobs[0].blobKey,blobs[0].data);\n    blobs[0].blobFile=getFile(cache,blobs[0].jobId,blobs[0].blobKey);\n    assertTrue(blobs[0].blobFile.exists());\n    assertTrue(blobs[1].blobFile.exists());\n    assertFalse(blobs[2].blobFile.exists());\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 247,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2133,
        "startLineNumber" : 66,
        "startColumnNumber" : 4,
        "endLineNumber" : 110,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testTrackSizeLimitAndDeleteExcessSequentially() throws Exception {\n  final Configuration config=new Configuration();\n  try (BlobServer server=new BlobServer(config,TEMPORARY_FOLDER.newFolder(),new VoidBlobStore());BlobCacheService cache=initBlobCacheServiceWithSizeLimit(config,new InetSocketAddress(\"localhost\",server.getPort()))){\n    server.start();\n    final BlobInfo[] blobs=putBlobsIntoBlobServer(server);\n    for (int i=0; i < TOTAL_NUM_OF_BLOBS; i++) {\n      readFileAndVerifyContent(cache,blobs[i].jobId,blobs[i].blobKey,blobs[i].data);\n      blobs[i].blobFile=getFile(cache,blobs[i].jobId,blobs[i].blobKey);\n      assertTrue(blobs[i].blobFile.exists());\n    }\n    assertFalse(blobs[0].blobFile.exists());\n    assertTrue(blobs[1].blobFile.exists());\n    readFileAndVerifyContent(cache,blobs[1].jobId,blobs[1].blobKey,blobs[1].data);\n    blobs[0].blobKey=put(server,blobs[0].jobId,blobs[0].data,BLOB_TYPE);\n    readFileAndVerifyContent(cache,blobs[0].jobId,blobs[0].blobKey,blobs[0].data);\n    blobs[0].blobFile=getFile(cache,blobs[0].jobId,blobs[0].blobKey);\n    assertTrue(blobs[0].blobFile.exists());\n    assertTrue(blobs[1].blobFile.exists());\n    assertFalse(blobs[2].blobFile.exists());\n  }\n }\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 255,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 85,
        "startColumnNumber" : 16,
        "endLineNumber" : 85,
        "endColumnNumber" : 97
      },
      "nodeContext" : "readFileAndVerifyContent(cache,blobs[i].jobId,blobs[i].blobKey,blobs[i].data);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 19,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.apache.flink.runtime.blob.BlobCacheService"
  }, {
    "nodeContext" : "cache",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 88,
      "startColumnNumber" : 44,
      "endLineNumber" : 88,
      "endColumnNumber" : 49
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 88,
        "startColumnNumber" : 36,
        "endLineNumber" : 88,
        "endColumnNumber" : 84
      },
      "nodeContext" : "getFile(cache,blobs[i].jobId,blobs[i].blobKey)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 88,
        "startColumnNumber" : 16,
        "endLineNumber" : 88,
        "endColumnNumber" : 84
      },
      "nodeContext" : "blobs[i].blobFile=getFile(cache,blobs[i].jobId,blobs[i].blobKey)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 19,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 88,
        "startColumnNumber" : 16,
        "endLineNumber" : 88,
        "endColumnNumber" : 85
      },
      "nodeContext" : "blobs[i].blobFile=getFile(cache,blobs[i].jobId,blobs[i].blobKey);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 385,
        "startLineNumber" : 82,
        "startColumnNumber" : 57,
        "endLineNumber" : 90,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  readFileAndVerifyContent(cache,blobs[i].jobId,blobs[i].blobKey,blobs[i].data);\n  blobs[i].blobFile=getFile(cache,blobs[i].jobId,blobs[i].blobKey);\n  assertTrue(blobs[i].blobFile.exists());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 50,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 430,
        "startLineNumber" : 82,
        "startColumnNumber" : 12,
        "endLineNumber" : 90,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int i=0; i < TOTAL_NUM_OF_BLOBS; i++) {\n  readFileAndVerifyContent(cache,blobs[i].jobId,blobs[i].blobKey,blobs[i].data);\n  blobs[i].blobFile=getFile(cache,blobs[i].jobId,blobs[i].blobKey);\n  assertTrue(blobs[i].blobFile.exists());\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 61,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1652,
        "startLineNumber" : 74,
        "startColumnNumber" : 95,
        "endLineNumber" : 109,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  server.start();\n  final BlobInfo[] blobs=putBlobsIntoBlobServer(server);\n  for (int i=0; i < TOTAL_NUM_OF_BLOBS; i++) {\n    readFileAndVerifyContent(cache,blobs[i].jobId,blobs[i].blobKey,blobs[i].data);\n    blobs[i].blobFile=getFile(cache,blobs[i].jobId,blobs[i].blobKey);\n    assertTrue(blobs[i].blobFile.exists());\n  }\n  assertFalse(blobs[0].blobFile.exists());\n  assertTrue(blobs[1].blobFile.exists());\n  readFileAndVerifyContent(cache,blobs[1].jobId,blobs[1].blobKey,blobs[1].data);\n  blobs[0].blobKey=put(server,blobs[0].jobId,blobs[0].data,BLOB_TYPE);\n  readFileAndVerifyContent(cache,blobs[0].jobId,blobs[0].blobKey,blobs[0].data);\n  blobs[0].blobFile=getFile(cache,blobs[0].jobId,blobs[0].blobKey);\n  assertTrue(blobs[0].blobFile.exists());\n  assertTrue(blobs[1].blobFile.exists());\n  assertFalse(blobs[2].blobFile.exists());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 206,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1971,
        "startLineNumber" : 70,
        "startColumnNumber" : 8,
        "endLineNumber" : 109,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try (BlobServer server=new BlobServer(config,TEMPORARY_FOLDER.newFolder(),new VoidBlobStore());BlobCacheService cache=initBlobCacheServiceWithSizeLimit(config,new InetSocketAddress(\"localhost\",server.getPort()))){\n  server.start();\n  final BlobInfo[] blobs=putBlobsIntoBlobServer(server);\n  for (int i=0; i < TOTAL_NUM_OF_BLOBS; i++) {\n    readFileAndVerifyContent(cache,blobs[i].jobId,blobs[i].blobKey,blobs[i].data);\n    blobs[i].blobFile=getFile(cache,blobs[i].jobId,blobs[i].blobKey);\n    assertTrue(blobs[i].blobFile.exists());\n  }\n  assertFalse(blobs[0].blobFile.exists());\n  assertTrue(blobs[1].blobFile.exists());\n  readFileAndVerifyContent(cache,blobs[1].jobId,blobs[1].blobKey,blobs[1].data);\n  blobs[0].blobKey=put(server,blobs[0].jobId,blobs[0].data,BLOB_TYPE);\n  readFileAndVerifyContent(cache,blobs[0].jobId,blobs[0].blobKey,blobs[0].data);\n  blobs[0].blobFile=getFile(cache,blobs[0].jobId,blobs[0].blobKey);\n  assertTrue(blobs[0].blobFile.exists());\n  assertTrue(blobs[1].blobFile.exists());\n  assertFalse(blobs[2].blobFile.exists());\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 237,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2046,
        "startLineNumber" : 67,
        "startColumnNumber" : 81,
        "endLineNumber" : 110,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final Configuration config=new Configuration();\n  try (BlobServer server=new BlobServer(config,TEMPORARY_FOLDER.newFolder(),new VoidBlobStore());BlobCacheService cache=initBlobCacheServiceWithSizeLimit(config,new InetSocketAddress(\"localhost\",server.getPort()))){\n    server.start();\n    final BlobInfo[] blobs=putBlobsIntoBlobServer(server);\n    for (int i=0; i < TOTAL_NUM_OF_BLOBS; i++) {\n      readFileAndVerifyContent(cache,blobs[i].jobId,blobs[i].blobKey,blobs[i].data);\n      blobs[i].blobFile=getFile(cache,blobs[i].jobId,blobs[i].blobKey);\n      assertTrue(blobs[i].blobFile.exists());\n    }\n    assertFalse(blobs[0].blobFile.exists());\n    assertTrue(blobs[1].blobFile.exists());\n    readFileAndVerifyContent(cache,blobs[1].jobId,blobs[1].blobKey,blobs[1].data);\n    blobs[0].blobKey=put(server,blobs[0].jobId,blobs[0].data,BLOB_TYPE);\n    readFileAndVerifyContent(cache,blobs[0].jobId,blobs[0].blobKey,blobs[0].data);\n    blobs[0].blobFile=getFile(cache,blobs[0].jobId,blobs[0].blobKey);\n    assertTrue(blobs[0].blobFile.exists());\n    assertTrue(blobs[1].blobFile.exists());\n    assertFalse(blobs[2].blobFile.exists());\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 247,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2133,
        "startLineNumber" : 66,
        "startColumnNumber" : 4,
        "endLineNumber" : 110,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testTrackSizeLimitAndDeleteExcessSequentially() throws Exception {\n  final Configuration config=new Configuration();\n  try (BlobServer server=new BlobServer(config,TEMPORARY_FOLDER.newFolder(),new VoidBlobStore());BlobCacheService cache=initBlobCacheServiceWithSizeLimit(config,new InetSocketAddress(\"localhost\",server.getPort()))){\n    server.start();\n    final BlobInfo[] blobs=putBlobsIntoBlobServer(server);\n    for (int i=0; i < TOTAL_NUM_OF_BLOBS; i++) {\n      readFileAndVerifyContent(cache,blobs[i].jobId,blobs[i].blobKey,blobs[i].data);\n      blobs[i].blobFile=getFile(cache,blobs[i].jobId,blobs[i].blobKey);\n      assertTrue(blobs[i].blobFile.exists());\n    }\n    assertFalse(blobs[0].blobFile.exists());\n    assertTrue(blobs[1].blobFile.exists());\n    readFileAndVerifyContent(cache,blobs[1].jobId,blobs[1].blobKey,blobs[1].data);\n    blobs[0].blobKey=put(server,blobs[0].jobId,blobs[0].data,BLOB_TYPE);\n    readFileAndVerifyContent(cache,blobs[0].jobId,blobs[0].blobKey,blobs[0].data);\n    blobs[0].blobFile=getFile(cache,blobs[0].jobId,blobs[0].blobKey);\n    assertTrue(blobs[0].blobFile.exists());\n    assertTrue(blobs[1].blobFile.exists());\n    assertFalse(blobs[2].blobFile.exists());\n  }\n }\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 255,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 88,
        "startColumnNumber" : 16,
        "endLineNumber" : 88,
        "endColumnNumber" : 85
      },
      "nodeContext" : "blobs[i].blobFile=getFile(cache,blobs[i].jobId,blobs[i].blobKey);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 20,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "org.apache.flink.runtime.blob.BlobCacheService"
  }, {
    "nodeContext" : "cache",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 99,
      "startColumnNumber" : 37,
      "endLineNumber" : 99,
      "endColumnNumber" : 42
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 99,
        "startColumnNumber" : 12,
        "endLineNumber" : 99,
        "endColumnNumber" : 92
      },
      "nodeContext" : "readFileAndVerifyContent(cache,blobs[1].jobId,blobs[1].blobKey,blobs[1].data)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 18,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 99,
        "startColumnNumber" : 12,
        "endLineNumber" : 99,
        "endColumnNumber" : 93
      },
      "nodeContext" : "readFileAndVerifyContent(cache,blobs[1].jobId,blobs[1].blobKey,blobs[1].data);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 19,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1652,
        "startLineNumber" : 74,
        "startColumnNumber" : 95,
        "endLineNumber" : 109,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  server.start();\n  final BlobInfo[] blobs=putBlobsIntoBlobServer(server);\n  for (int i=0; i < TOTAL_NUM_OF_BLOBS; i++) {\n    readFileAndVerifyContent(cache,blobs[i].jobId,blobs[i].blobKey,blobs[i].data);\n    blobs[i].blobFile=getFile(cache,blobs[i].jobId,blobs[i].blobKey);\n    assertTrue(blobs[i].blobFile.exists());\n  }\n  assertFalse(blobs[0].blobFile.exists());\n  assertTrue(blobs[1].blobFile.exists());\n  readFileAndVerifyContent(cache,blobs[1].jobId,blobs[1].blobKey,blobs[1].data);\n  blobs[0].blobKey=put(server,blobs[0].jobId,blobs[0].data,BLOB_TYPE);\n  readFileAndVerifyContent(cache,blobs[0].jobId,blobs[0].blobKey,blobs[0].data);\n  blobs[0].blobFile=getFile(cache,blobs[0].jobId,blobs[0].blobKey);\n  assertTrue(blobs[0].blobFile.exists());\n  assertTrue(blobs[1].blobFile.exists());\n  assertFalse(blobs[2].blobFile.exists());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 206,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1971,
        "startLineNumber" : 70,
        "startColumnNumber" : 8,
        "endLineNumber" : 109,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try (BlobServer server=new BlobServer(config,TEMPORARY_FOLDER.newFolder(),new VoidBlobStore());BlobCacheService cache=initBlobCacheServiceWithSizeLimit(config,new InetSocketAddress(\"localhost\",server.getPort()))){\n  server.start();\n  final BlobInfo[] blobs=putBlobsIntoBlobServer(server);\n  for (int i=0; i < TOTAL_NUM_OF_BLOBS; i++) {\n    readFileAndVerifyContent(cache,blobs[i].jobId,blobs[i].blobKey,blobs[i].data);\n    blobs[i].blobFile=getFile(cache,blobs[i].jobId,blobs[i].blobKey);\n    assertTrue(blobs[i].blobFile.exists());\n  }\n  assertFalse(blobs[0].blobFile.exists());\n  assertTrue(blobs[1].blobFile.exists());\n  readFileAndVerifyContent(cache,blobs[1].jobId,blobs[1].blobKey,blobs[1].data);\n  blobs[0].blobKey=put(server,blobs[0].jobId,blobs[0].data,BLOB_TYPE);\n  readFileAndVerifyContent(cache,blobs[0].jobId,blobs[0].blobKey,blobs[0].data);\n  blobs[0].blobFile=getFile(cache,blobs[0].jobId,blobs[0].blobKey);\n  assertTrue(blobs[0].blobFile.exists());\n  assertTrue(blobs[1].blobFile.exists());\n  assertFalse(blobs[2].blobFile.exists());\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 237,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2046,
        "startLineNumber" : 67,
        "startColumnNumber" : 81,
        "endLineNumber" : 110,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final Configuration config=new Configuration();\n  try (BlobServer server=new BlobServer(config,TEMPORARY_FOLDER.newFolder(),new VoidBlobStore());BlobCacheService cache=initBlobCacheServiceWithSizeLimit(config,new InetSocketAddress(\"localhost\",server.getPort()))){\n    server.start();\n    final BlobInfo[] blobs=putBlobsIntoBlobServer(server);\n    for (int i=0; i < TOTAL_NUM_OF_BLOBS; i++) {\n      readFileAndVerifyContent(cache,blobs[i].jobId,blobs[i].blobKey,blobs[i].data);\n      blobs[i].blobFile=getFile(cache,blobs[i].jobId,blobs[i].blobKey);\n      assertTrue(blobs[i].blobFile.exists());\n    }\n    assertFalse(blobs[0].blobFile.exists());\n    assertTrue(blobs[1].blobFile.exists());\n    readFileAndVerifyContent(cache,blobs[1].jobId,blobs[1].blobKey,blobs[1].data);\n    blobs[0].blobKey=put(server,blobs[0].jobId,blobs[0].data,BLOB_TYPE);\n    readFileAndVerifyContent(cache,blobs[0].jobId,blobs[0].blobKey,blobs[0].data);\n    blobs[0].blobFile=getFile(cache,blobs[0].jobId,blobs[0].blobKey);\n    assertTrue(blobs[0].blobFile.exists());\n    assertTrue(blobs[1].blobFile.exists());\n    assertFalse(blobs[2].blobFile.exists());\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 247,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2133,
        "startLineNumber" : 66,
        "startColumnNumber" : 4,
        "endLineNumber" : 110,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testTrackSizeLimitAndDeleteExcessSequentially() throws Exception {\n  final Configuration config=new Configuration();\n  try (BlobServer server=new BlobServer(config,TEMPORARY_FOLDER.newFolder(),new VoidBlobStore());BlobCacheService cache=initBlobCacheServiceWithSizeLimit(config,new InetSocketAddress(\"localhost\",server.getPort()))){\n    server.start();\n    final BlobInfo[] blobs=putBlobsIntoBlobServer(server);\n    for (int i=0; i < TOTAL_NUM_OF_BLOBS; i++) {\n      readFileAndVerifyContent(cache,blobs[i].jobId,blobs[i].blobKey,blobs[i].data);\n      blobs[i].blobFile=getFile(cache,blobs[i].jobId,blobs[i].blobKey);\n      assertTrue(blobs[i].blobFile.exists());\n    }\n    assertFalse(blobs[0].blobFile.exists());\n    assertTrue(blobs[1].blobFile.exists());\n    readFileAndVerifyContent(cache,blobs[1].jobId,blobs[1].blobKey,blobs[1].data);\n    blobs[0].blobKey=put(server,blobs[0].jobId,blobs[0].data,BLOB_TYPE);\n    readFileAndVerifyContent(cache,blobs[0].jobId,blobs[0].blobKey,blobs[0].data);\n    blobs[0].blobFile=getFile(cache,blobs[0].jobId,blobs[0].blobKey);\n    assertTrue(blobs[0].blobFile.exists());\n    assertTrue(blobs[1].blobFile.exists());\n    assertFalse(blobs[2].blobFile.exists());\n  }\n }\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 255,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 99,
        "startColumnNumber" : 12,
        "endLineNumber" : 99,
        "endColumnNumber" : 93
      },
      "nodeContext" : "readFileAndVerifyContent(cache,blobs[1].jobId,blobs[1].blobKey,blobs[1].data);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 19,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.apache.flink.runtime.blob.BlobCacheService"
  }, {
    "nodeContext" : "cache",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 103,
      "startColumnNumber" : 37,
      "endLineNumber" : 103,
      "endColumnNumber" : 42
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 103,
        "startColumnNumber" : 12,
        "endLineNumber" : 103,
        "endColumnNumber" : 92
      },
      "nodeContext" : "readFileAndVerifyContent(cache,blobs[0].jobId,blobs[0].blobKey,blobs[0].data)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 18,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 103,
        "startColumnNumber" : 12,
        "endLineNumber" : 103,
        "endColumnNumber" : 93
      },
      "nodeContext" : "readFileAndVerifyContent(cache,blobs[0].jobId,blobs[0].blobKey,blobs[0].data);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 19,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1652,
        "startLineNumber" : 74,
        "startColumnNumber" : 95,
        "endLineNumber" : 109,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  server.start();\n  final BlobInfo[] blobs=putBlobsIntoBlobServer(server);\n  for (int i=0; i < TOTAL_NUM_OF_BLOBS; i++) {\n    readFileAndVerifyContent(cache,blobs[i].jobId,blobs[i].blobKey,blobs[i].data);\n    blobs[i].blobFile=getFile(cache,blobs[i].jobId,blobs[i].blobKey);\n    assertTrue(blobs[i].blobFile.exists());\n  }\n  assertFalse(blobs[0].blobFile.exists());\n  assertTrue(blobs[1].blobFile.exists());\n  readFileAndVerifyContent(cache,blobs[1].jobId,blobs[1].blobKey,blobs[1].data);\n  blobs[0].blobKey=put(server,blobs[0].jobId,blobs[0].data,BLOB_TYPE);\n  readFileAndVerifyContent(cache,blobs[0].jobId,blobs[0].blobKey,blobs[0].data);\n  blobs[0].blobFile=getFile(cache,blobs[0].jobId,blobs[0].blobKey);\n  assertTrue(blobs[0].blobFile.exists());\n  assertTrue(blobs[1].blobFile.exists());\n  assertFalse(blobs[2].blobFile.exists());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 206,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1971,
        "startLineNumber" : 70,
        "startColumnNumber" : 8,
        "endLineNumber" : 109,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try (BlobServer server=new BlobServer(config,TEMPORARY_FOLDER.newFolder(),new VoidBlobStore());BlobCacheService cache=initBlobCacheServiceWithSizeLimit(config,new InetSocketAddress(\"localhost\",server.getPort()))){\n  server.start();\n  final BlobInfo[] blobs=putBlobsIntoBlobServer(server);\n  for (int i=0; i < TOTAL_NUM_OF_BLOBS; i++) {\n    readFileAndVerifyContent(cache,blobs[i].jobId,blobs[i].blobKey,blobs[i].data);\n    blobs[i].blobFile=getFile(cache,blobs[i].jobId,blobs[i].blobKey);\n    assertTrue(blobs[i].blobFile.exists());\n  }\n  assertFalse(blobs[0].blobFile.exists());\n  assertTrue(blobs[1].blobFile.exists());\n  readFileAndVerifyContent(cache,blobs[1].jobId,blobs[1].blobKey,blobs[1].data);\n  blobs[0].blobKey=put(server,blobs[0].jobId,blobs[0].data,BLOB_TYPE);\n  readFileAndVerifyContent(cache,blobs[0].jobId,blobs[0].blobKey,blobs[0].data);\n  blobs[0].blobFile=getFile(cache,blobs[0].jobId,blobs[0].blobKey);\n  assertTrue(blobs[0].blobFile.exists());\n  assertTrue(blobs[1].blobFile.exists());\n  assertFalse(blobs[2].blobFile.exists());\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 237,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2046,
        "startLineNumber" : 67,
        "startColumnNumber" : 81,
        "endLineNumber" : 110,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final Configuration config=new Configuration();\n  try (BlobServer server=new BlobServer(config,TEMPORARY_FOLDER.newFolder(),new VoidBlobStore());BlobCacheService cache=initBlobCacheServiceWithSizeLimit(config,new InetSocketAddress(\"localhost\",server.getPort()))){\n    server.start();\n    final BlobInfo[] blobs=putBlobsIntoBlobServer(server);\n    for (int i=0; i < TOTAL_NUM_OF_BLOBS; i++) {\n      readFileAndVerifyContent(cache,blobs[i].jobId,blobs[i].blobKey,blobs[i].data);\n      blobs[i].blobFile=getFile(cache,blobs[i].jobId,blobs[i].blobKey);\n      assertTrue(blobs[i].blobFile.exists());\n    }\n    assertFalse(blobs[0].blobFile.exists());\n    assertTrue(blobs[1].blobFile.exists());\n    readFileAndVerifyContent(cache,blobs[1].jobId,blobs[1].blobKey,blobs[1].data);\n    blobs[0].blobKey=put(server,blobs[0].jobId,blobs[0].data,BLOB_TYPE);\n    readFileAndVerifyContent(cache,blobs[0].jobId,blobs[0].blobKey,blobs[0].data);\n    blobs[0].blobFile=getFile(cache,blobs[0].jobId,blobs[0].blobKey);\n    assertTrue(blobs[0].blobFile.exists());\n    assertTrue(blobs[1].blobFile.exists());\n    assertFalse(blobs[2].blobFile.exists());\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 247,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2133,
        "startLineNumber" : 66,
        "startColumnNumber" : 4,
        "endLineNumber" : 110,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testTrackSizeLimitAndDeleteExcessSequentially() throws Exception {\n  final Configuration config=new Configuration();\n  try (BlobServer server=new BlobServer(config,TEMPORARY_FOLDER.newFolder(),new VoidBlobStore());BlobCacheService cache=initBlobCacheServiceWithSizeLimit(config,new InetSocketAddress(\"localhost\",server.getPort()))){\n    server.start();\n    final BlobInfo[] blobs=putBlobsIntoBlobServer(server);\n    for (int i=0; i < TOTAL_NUM_OF_BLOBS; i++) {\n      readFileAndVerifyContent(cache,blobs[i].jobId,blobs[i].blobKey,blobs[i].data);\n      blobs[i].blobFile=getFile(cache,blobs[i].jobId,blobs[i].blobKey);\n      assertTrue(blobs[i].blobFile.exists());\n    }\n    assertFalse(blobs[0].blobFile.exists());\n    assertTrue(blobs[1].blobFile.exists());\n    readFileAndVerifyContent(cache,blobs[1].jobId,blobs[1].blobKey,blobs[1].data);\n    blobs[0].blobKey=put(server,blobs[0].jobId,blobs[0].data,BLOB_TYPE);\n    readFileAndVerifyContent(cache,blobs[0].jobId,blobs[0].blobKey,blobs[0].data);\n    blobs[0].blobFile=getFile(cache,blobs[0].jobId,blobs[0].blobKey);\n    assertTrue(blobs[0].blobFile.exists());\n    assertTrue(blobs[1].blobFile.exists());\n    assertFalse(blobs[2].blobFile.exists());\n  }\n }\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 255,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 103,
        "startColumnNumber" : 12,
        "endLineNumber" : 103,
        "endColumnNumber" : 93
      },
      "nodeContext" : "readFileAndVerifyContent(cache,blobs[0].jobId,blobs[0].blobKey,blobs[0].data);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 19,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.apache.flink.runtime.blob.BlobCacheService"
  }, {
    "nodeContext" : "cache",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 104,
      "startColumnNumber" : 40,
      "endLineNumber" : 104,
      "endColumnNumber" : 45
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 104,
        "startColumnNumber" : 32,
        "endLineNumber" : 104,
        "endColumnNumber" : 80
      },
      "nodeContext" : "getFile(cache,blobs[0].jobId,blobs[0].blobKey)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 104,
        "startColumnNumber" : 12,
        "endLineNumber" : 104,
        "endColumnNumber" : 80
      },
      "nodeContext" : "blobs[0].blobFile=getFile(cache,blobs[0].jobId,blobs[0].blobKey)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 19,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 104,
        "startColumnNumber" : 12,
        "endLineNumber" : 104,
        "endColumnNumber" : 81
      },
      "nodeContext" : "blobs[0].blobFile=getFile(cache,blobs[0].jobId,blobs[0].blobKey);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1652,
        "startLineNumber" : 74,
        "startColumnNumber" : 95,
        "endLineNumber" : 109,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  server.start();\n  final BlobInfo[] blobs=putBlobsIntoBlobServer(server);\n  for (int i=0; i < TOTAL_NUM_OF_BLOBS; i++) {\n    readFileAndVerifyContent(cache,blobs[i].jobId,blobs[i].blobKey,blobs[i].data);\n    blobs[i].blobFile=getFile(cache,blobs[i].jobId,blobs[i].blobKey);\n    assertTrue(blobs[i].blobFile.exists());\n  }\n  assertFalse(blobs[0].blobFile.exists());\n  assertTrue(blobs[1].blobFile.exists());\n  readFileAndVerifyContent(cache,blobs[1].jobId,blobs[1].blobKey,blobs[1].data);\n  blobs[0].blobKey=put(server,blobs[0].jobId,blobs[0].data,BLOB_TYPE);\n  readFileAndVerifyContent(cache,blobs[0].jobId,blobs[0].blobKey,blobs[0].data);\n  blobs[0].blobFile=getFile(cache,blobs[0].jobId,blobs[0].blobKey);\n  assertTrue(blobs[0].blobFile.exists());\n  assertTrue(blobs[1].blobFile.exists());\n  assertFalse(blobs[2].blobFile.exists());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 206,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1971,
        "startLineNumber" : 70,
        "startColumnNumber" : 8,
        "endLineNumber" : 109,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try (BlobServer server=new BlobServer(config,TEMPORARY_FOLDER.newFolder(),new VoidBlobStore());BlobCacheService cache=initBlobCacheServiceWithSizeLimit(config,new InetSocketAddress(\"localhost\",server.getPort()))){\n  server.start();\n  final BlobInfo[] blobs=putBlobsIntoBlobServer(server);\n  for (int i=0; i < TOTAL_NUM_OF_BLOBS; i++) {\n    readFileAndVerifyContent(cache,blobs[i].jobId,blobs[i].blobKey,blobs[i].data);\n    blobs[i].blobFile=getFile(cache,blobs[i].jobId,blobs[i].blobKey);\n    assertTrue(blobs[i].blobFile.exists());\n  }\n  assertFalse(blobs[0].blobFile.exists());\n  assertTrue(blobs[1].blobFile.exists());\n  readFileAndVerifyContent(cache,blobs[1].jobId,blobs[1].blobKey,blobs[1].data);\n  blobs[0].blobKey=put(server,blobs[0].jobId,blobs[0].data,BLOB_TYPE);\n  readFileAndVerifyContent(cache,blobs[0].jobId,blobs[0].blobKey,blobs[0].data);\n  blobs[0].blobFile=getFile(cache,blobs[0].jobId,blobs[0].blobKey);\n  assertTrue(blobs[0].blobFile.exists());\n  assertTrue(blobs[1].blobFile.exists());\n  assertFalse(blobs[2].blobFile.exists());\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 237,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2046,
        "startLineNumber" : 67,
        "startColumnNumber" : 81,
        "endLineNumber" : 110,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final Configuration config=new Configuration();\n  try (BlobServer server=new BlobServer(config,TEMPORARY_FOLDER.newFolder(),new VoidBlobStore());BlobCacheService cache=initBlobCacheServiceWithSizeLimit(config,new InetSocketAddress(\"localhost\",server.getPort()))){\n    server.start();\n    final BlobInfo[] blobs=putBlobsIntoBlobServer(server);\n    for (int i=0; i < TOTAL_NUM_OF_BLOBS; i++) {\n      readFileAndVerifyContent(cache,blobs[i].jobId,blobs[i].blobKey,blobs[i].data);\n      blobs[i].blobFile=getFile(cache,blobs[i].jobId,blobs[i].blobKey);\n      assertTrue(blobs[i].blobFile.exists());\n    }\n    assertFalse(blobs[0].blobFile.exists());\n    assertTrue(blobs[1].blobFile.exists());\n    readFileAndVerifyContent(cache,blobs[1].jobId,blobs[1].blobKey,blobs[1].data);\n    blobs[0].blobKey=put(server,blobs[0].jobId,blobs[0].data,BLOB_TYPE);\n    readFileAndVerifyContent(cache,blobs[0].jobId,blobs[0].blobKey,blobs[0].data);\n    blobs[0].blobFile=getFile(cache,blobs[0].jobId,blobs[0].blobKey);\n    assertTrue(blobs[0].blobFile.exists());\n    assertTrue(blobs[1].blobFile.exists());\n    assertFalse(blobs[2].blobFile.exists());\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 247,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2133,
        "startLineNumber" : 66,
        "startColumnNumber" : 4,
        "endLineNumber" : 110,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testTrackSizeLimitAndDeleteExcessSequentially() throws Exception {\n  final Configuration config=new Configuration();\n  try (BlobServer server=new BlobServer(config,TEMPORARY_FOLDER.newFolder(),new VoidBlobStore());BlobCacheService cache=initBlobCacheServiceWithSizeLimit(config,new InetSocketAddress(\"localhost\",server.getPort()))){\n    server.start();\n    final BlobInfo[] blobs=putBlobsIntoBlobServer(server);\n    for (int i=0; i < TOTAL_NUM_OF_BLOBS; i++) {\n      readFileAndVerifyContent(cache,blobs[i].jobId,blobs[i].blobKey,blobs[i].data);\n      blobs[i].blobFile=getFile(cache,blobs[i].jobId,blobs[i].blobKey);\n      assertTrue(blobs[i].blobFile.exists());\n    }\n    assertFalse(blobs[0].blobFile.exists());\n    assertTrue(blobs[1].blobFile.exists());\n    readFileAndVerifyContent(cache,blobs[1].jobId,blobs[1].blobKey,blobs[1].data);\n    blobs[0].blobKey=put(server,blobs[0].jobId,blobs[0].data,BLOB_TYPE);\n    readFileAndVerifyContent(cache,blobs[0].jobId,blobs[0].blobKey,blobs[0].data);\n    blobs[0].blobFile=getFile(cache,blobs[0].jobId,blobs[0].blobKey);\n    assertTrue(blobs[0].blobFile.exists());\n    assertTrue(blobs[1].blobFile.exists());\n    assertFalse(blobs[2].blobFile.exists());\n  }\n }\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 255,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 104,
        "startColumnNumber" : 12,
        "endLineNumber" : 104,
        "endColumnNumber" : 81
      },
      "nodeContext" : "blobs[0].blobFile=getFile(cache,blobs[0].jobId,blobs[0].blobKey);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 20,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "org.apache.flink.runtime.blob.BlobCacheService"
  } ],
  "positionList" : [ {
    "charLength" : 5,
    "startLineNumber" : 85,
    "startColumnNumber" : 41,
    "endLineNumber" : 85,
    "endColumnNumber" : 46
  }, {
    "charLength" : 5,
    "startLineNumber" : 88,
    "startColumnNumber" : 44,
    "endLineNumber" : 88,
    "endColumnNumber" : 49
  }, {
    "charLength" : 5,
    "startLineNumber" : 99,
    "startColumnNumber" : 37,
    "endLineNumber" : 99,
    "endColumnNumber" : 42
  }, {
    "charLength" : 5,
    "startLineNumber" : 103,
    "startColumnNumber" : 37,
    "endLineNumber" : 103,
    "endColumnNumber" : 42
  }, {
    "charLength" : 5,
    "startLineNumber" : 104,
    "startColumnNumber" : 40,
    "endLineNumber" : 104,
    "endColumnNumber" : 45
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 3
  } ]
}