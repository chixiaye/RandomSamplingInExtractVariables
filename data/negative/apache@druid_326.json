{
  "id" : 326,
  "expression" : "new ColumnValueGenerator(zipfHighSchema,1)",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/benchmarks/src/test/java/org/apache/druid/benchmark/compression/FloatCompressionBenchmarkFileGenerator.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new ColumnValueGenerator(zipfHighSchema,1)",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 43,
      "startLineNumber" : 131,
      "startColumnNumber" : 31,
      "endLineNumber" : 131,
      "endColumnNumber" : 74
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 131,
        "startColumnNumber" : 4,
        "endLineNumber" : 131,
        "endColumnNumber" : 75
      },
      "nodeContext" : "generators.put(\"zipfHigh\",new ColumnValueGenerator(zipfHighSchema,1))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 131,
        "startColumnNumber" : 4,
        "endLineNumber" : 131,
        "endColumnNumber" : 76
      },
      "nodeContext" : "generators.put(\"zipfHigh\",new ColumnValueGenerator(zipfHighSchema,1));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3506,
        "startLineNumber" : 63,
        "startColumnNumber" : 2,
        "endLineNumber" : 180,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (args.length >= 1) {\n    dirPath=args[0];\n  }\n  GeneratorColumnSchema enumeratedSchema=GeneratorColumnSchema.makeEnumerated(\"\",ValueType.FLOAT,true,1,0d,ImmutableList.of(0f,1.1f,2.2f,3.3f,4.4f),ImmutableList.of(0.95,0.001,0.0189,0.03,0.0001));\n  GeneratorColumnSchema zipfLowSchema=GeneratorColumnSchema.makeZipf(\"\",ValueType.FLOAT,true,1,0d,-1,1000,1d);\n  GeneratorColumnSchema zipfHighSchema=GeneratorColumnSchema.makeZipf(\"\",ValueType.FLOAT,true,1,0d,-1,1000,3d);\n  GeneratorColumnSchema sequentialSchema=GeneratorColumnSchema.makeSequential(\"\",ValueType.FLOAT,true,1,0d,1470187671,2000000000);\n  GeneratorColumnSchema uniformSchema=GeneratorColumnSchema.makeContinuousUniform(\"\",ValueType.FLOAT,true,1,0d,0,1000);\n  Map<String,ColumnValueGenerator> generators=new HashMap<>();\n  generators.put(\"enumerate\",new ColumnValueGenerator(enumeratedSchema,1));\n  generators.put(\"zipfLow\",new ColumnValueGenerator(zipfLowSchema,1));\n  generators.put(\"zipfHigh\",new ColumnValueGenerator(zipfHighSchema,1));\n  generators.put(\"sequential\",new ColumnValueGenerator(sequentialSchema,1));\n  generators.put(\"uniform\",new ColumnValueGenerator(uniformSchema,1));\n  File dir=new File(dirPath);\n  dir.mkdir();\n  for (  Map.Entry<String,ColumnValueGenerator> entry : generators.entrySet()) {\n    final File dataFile=new File(dir,entry.getKey());\n    dataFile.delete();\n    try (Writer writer=Files.newBufferedWriter(dataFile.toPath(),StandardCharsets.UTF_8)){\n      for (int i=0; i < ROW_NUM; i++) {\n        writer.write((Float)entry.getValue().generateRowValue() + \"\\n\");\n      }\n    }\n   }\n  for (  Map.Entry<String,ColumnValueGenerator> entry : generators.entrySet()) {\n    for (    CompressionStrategy compression : COMPRESSIONS) {\n      String name=entry.getKey() + \"-\" + compression;\n      log.info(\"%s: \",name);\n      File compFile=new File(dir,name);\n      compFile.delete();\n      File dataFile=new File(dir,entry.getKey());\n      ColumnarFloatsSerializer writer=CompressionFactory.getFloatSerializer(\"float-benchmark\",new OffHeapMemorySegmentWriteOutMedium(),\"float\",ByteOrder.nativeOrder(),compression);\n      try (BufferedReader br=Files.newBufferedReader(dataFile.toPath(),StandardCharsets.UTF_8);FileChannel output=FileChannel.open(compFile.toPath(),StandardOpenOption.CREATE_NEW,StandardOpenOption.WRITE)){\n        writer.open();\n        String line;\n        while ((line=br.readLine()) != null) {\n          writer.add(Float.parseFloat(line));\n        }\n        writer.writeTo(output,null);\n      }\n       log.info(\"%d\",compFile.length() / 1024);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 428,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3566,
        "startLineNumber" : 62,
        "startColumnNumber" : 2,
        "endLineNumber" : 180,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static void main(String[] args) throws IOException {\n  if (args.length >= 1) {\n    dirPath=args[0];\n  }\n  GeneratorColumnSchema enumeratedSchema=GeneratorColumnSchema.makeEnumerated(\"\",ValueType.FLOAT,true,1,0d,ImmutableList.of(0f,1.1f,2.2f,3.3f,4.4f),ImmutableList.of(0.95,0.001,0.0189,0.03,0.0001));\n  GeneratorColumnSchema zipfLowSchema=GeneratorColumnSchema.makeZipf(\"\",ValueType.FLOAT,true,1,0d,-1,1000,1d);\n  GeneratorColumnSchema zipfHighSchema=GeneratorColumnSchema.makeZipf(\"\",ValueType.FLOAT,true,1,0d,-1,1000,3d);\n  GeneratorColumnSchema sequentialSchema=GeneratorColumnSchema.makeSequential(\"\",ValueType.FLOAT,true,1,0d,1470187671,2000000000);\n  GeneratorColumnSchema uniformSchema=GeneratorColumnSchema.makeContinuousUniform(\"\",ValueType.FLOAT,true,1,0d,0,1000);\n  Map<String,ColumnValueGenerator> generators=new HashMap<>();\n  generators.put(\"enumerate\",new ColumnValueGenerator(enumeratedSchema,1));\n  generators.put(\"zipfLow\",new ColumnValueGenerator(zipfLowSchema,1));\n  generators.put(\"zipfHigh\",new ColumnValueGenerator(zipfHighSchema,1));\n  generators.put(\"sequential\",new ColumnValueGenerator(sequentialSchema,1));\n  generators.put(\"uniform\",new ColumnValueGenerator(uniformSchema,1));\n  File dir=new File(dirPath);\n  dir.mkdir();\n  for (  Map.Entry<String,ColumnValueGenerator> entry : generators.entrySet()) {\n    final File dataFile=new File(dir,entry.getKey());\n    dataFile.delete();\n    try (Writer writer=Files.newBufferedWriter(dataFile.toPath(),StandardCharsets.UTF_8)){\n      for (int i=0; i < ROW_NUM; i++) {\n        writer.write((Float)entry.getValue().generateRowValue() + \"\\n\");\n      }\n    }\n   }\n  for (  Map.Entry<String,ColumnValueGenerator> entry : generators.entrySet()) {\n    for (    CompressionStrategy compression : COMPRESSIONS) {\n      String name=entry.getKey() + \"-\" + compression;\n      log.info(\"%s: \",name);\n      File compFile=new File(dir,name);\n      compFile.delete();\n      File dataFile=new File(dir,entry.getKey());\n      ColumnarFloatsSerializer writer=CompressionFactory.getFloatSerializer(\"float-benchmark\",new OffHeapMemorySegmentWriteOutMedium(),\"float\",ByteOrder.nativeOrder(),compression);\n      try (BufferedReader br=Files.newBufferedReader(dataFile.toPath(),StandardCharsets.UTF_8);FileChannel output=FileChannel.open(compFile.toPath(),StandardOpenOption.CREATE_NEW,StandardOpenOption.WRITE)){\n        writer.open();\n        String line;\n        while ((line=br.readLine()) != null) {\n          writer.add(Float.parseFloat(line));\n        }\n        writer.writeTo(output,null);\n      }\n       log.info(\"%d\",compFile.length() / 1024);\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 441,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 131,
        "startColumnNumber" : 4,
        "endLineNumber" : 131,
        "endColumnNumber" : 76
      },
      "nodeContext" : "generators.put(\"zipfHigh\",new ColumnValueGenerator(zipfHighSchema,1));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 3,
    "type" : "org.apache.druid.segment.generator.ColumnValueGenerator"
  } ],
  "positionList" : [ {
    "charLength" : 43,
    "startLineNumber" : 131,
    "startColumnNumber" : 31,
    "endLineNumber" : 131,
    "endColumnNumber" : 74
  } ],
  "layoutRelationDataList" : [ ]
}