{
  "id" : 380,
  "expression" : "metadata",
  "projectName" : "realm@realm-java",
  "commitID" : "58e5ae6faf0df2f8cb62c279688dd0fdf666d6ef",
  "filePath" : "realm/realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyClassGenerator.java",
  "occurrences" : 8,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "metadata",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 729,
      "startColumnNumber" : 30,
      "endLineNumber" : 729,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 729,
        "startColumnNumber" : 30,
        "endLineNumber" : 729,
        "endColumnNumber" : 50
      },
      "nodeContext" : "metadata.getFields()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 729,
        "startColumnNumber" : 30,
        "endLineNumber" : 729,
        "endColumnNumber" : 57
      },
      "nodeContext" : "metadata.getFields().size()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 729,
        "startColumnNumber" : 12,
        "endLineNumber" : 729,
        "endColumnNumber" : 57
      },
      "nodeContext" : "persistedFields=metadata.getFields().size()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 729,
        "startColumnNumber" : 8,
        "endLineNumber" : 729,
        "endColumnNumber" : 58
      },
      "nodeContext" : "int persistedFields=metadata.getFields().size();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4511,
        "startLineNumber" : 721,
        "startColumnNumber" : 90,
        "endLineNumber" : 807,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  writer.beginMethod(\"OsObjectSchemaInfo\",\"createExpectedObjectSchemaInfo\",EnumSet.of(Modifier.PRIVATE,Modifier.STATIC));\n  int persistedFields=metadata.getFields().size();\n  int computedFields=metadata.getBacklinkFields().size();\n  writer.emitStatement(\"OsObjectSchemaInfo.Builder builder = new OsObjectSchemaInfo.Builder(\\\"%s\\\", %s, %s)\",internalClassName,persistedFields,computedFields);\n  for (  RealmFieldElement field : metadata.getFields()) {\n    String fieldName=field.getInternalFieldName();\n    Constants.RealmFieldType fieldType=getRealmTypeChecked(field);\nswitch (fieldType) {\ncase NOTYPE:{\n        break;\n      }\ncase OBJECT:{\n      String fieldTypeQualifiedName=Utils.getFieldTypeQualifiedName(field);\n      String internalClassName=classCollection.getClassFromQualifiedName(fieldTypeQualifiedName).getInternalClassName();\n      writer.emitStatement(\"builder.addPersistedLinkProperty(\\\"%s\\\", RealmFieldType.OBJECT, \\\"%s\\\")\",fieldName,internalClassName);\n      break;\n    }\ncase LIST:{\n    String genericTypeQualifiedName=Utils.getGenericTypeQualifiedName(field);\n    String internalClassName=classCollection.getClassFromQualifiedName(genericTypeQualifiedName).getInternalClassName();\n    writer.emitStatement(\"builder.addPersistedLinkProperty(\\\"%s\\\", RealmFieldType.LIST, \\\"%s\\\")\",fieldName,internalClassName);\n    break;\n  }\ncase INTEGER_LIST:case BOOLEAN_LIST:case STRING_LIST:case BINARY_LIST:case DATE_LIST:case FLOAT_LIST:case DOUBLE_LIST:writer.emitStatement(\"builder.addPersistedValueListProperty(\\\"%s\\\", %s, %s)\",fieldName,fieldType.getRealmType(),metadata.isElementNullable(field) ? \"!Property.REQUIRED\" : \"Property.REQUIRED\");\nbreak;\ncase BACKLINK:throw new IllegalArgumentException(\"LinkingObject field should not be added to metadata\");\ncase INTEGER:case FLOAT:case DOUBLE:case BOOLEAN:case STRING:case DATE:case BINARY:case REALM_INTEGER:String nullableFlag=(metadata.isNullable(field) ? \"!\" : \"\") + \"Property.REQUIRED\";\nString indexedFlag=(metadata.isIndexed(field) ? \"\" : \"!\") + \"Property.INDEXED\";\nString primaryKeyFlag=(metadata.isPrimaryKey(field) ? \"\" : \"!\") + \"Property.PRIMARY_KEY\";\nwriter.emitStatement(\"builder.addPersistedProperty(\\\"%s\\\", %s, %s, %s, %s)\",fieldName,fieldType.getRealmType(),primaryKeyFlag,indexedFlag,nullableFlag);\nbreak;\ndefault:throw new IllegalArgumentException(\"'fieldType' \" + fieldName + \" is not handled\");\n}\n}\nfor (Backlink backlink : metadata.getBacklinkFields()) {\nClassMetaData sourceClass=classCollection.getClassFromQualifiedName(backlink.getSourceClass());\nString targetField=backlink.getTargetField();\nString internalSourceField=sourceClass.getInternalFieldName(backlink.getSourceField());\nwriter.emitStatement(\"builder.addComputedLinkProperty(\\\"%s\\\", \\\"%s\\\", \\\"%s\\\")\",targetField,sourceClass.getInternalClassName(),internalSourceField);\n}\nwriter.emitStatement(\"return builder.build()\");\nwriter.endMethod().emitEmptyLine();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 318,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4597,
        "startLineNumber" : 721,
        "startColumnNumber" : 4,
        "endLineNumber" : 807,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void emitCreateExpectedObjectSchemaInfo(JavaWriter writer) throws IOException {\n  writer.beginMethod(\"OsObjectSchemaInfo\",\"createExpectedObjectSchemaInfo\",EnumSet.of(Modifier.PRIVATE,Modifier.STATIC));\n  int persistedFields=metadata.getFields().size();\n  int computedFields=metadata.getBacklinkFields().size();\n  writer.emitStatement(\"OsObjectSchemaInfo.Builder builder = new OsObjectSchemaInfo.Builder(\\\"%s\\\", %s, %s)\",internalClassName,persistedFields,computedFields);\n  for (  RealmFieldElement field : metadata.getFields()) {\n    String fieldName=field.getInternalFieldName();\n    Constants.RealmFieldType fieldType=getRealmTypeChecked(field);\nswitch (fieldType) {\ncase NOTYPE:{\n        break;\n      }\ncase OBJECT:{\n      String fieldTypeQualifiedName=Utils.getFieldTypeQualifiedName(field);\n      String internalClassName=classCollection.getClassFromQualifiedName(fieldTypeQualifiedName).getInternalClassName();\n      writer.emitStatement(\"builder.addPersistedLinkProperty(\\\"%s\\\", RealmFieldType.OBJECT, \\\"%s\\\")\",fieldName,internalClassName);\n      break;\n    }\ncase LIST:{\n    String genericTypeQualifiedName=Utils.getGenericTypeQualifiedName(field);\n    String internalClassName=classCollection.getClassFromQualifiedName(genericTypeQualifiedName).getInternalClassName();\n    writer.emitStatement(\"builder.addPersistedLinkProperty(\\\"%s\\\", RealmFieldType.LIST, \\\"%s\\\")\",fieldName,internalClassName);\n    break;\n  }\ncase INTEGER_LIST:case BOOLEAN_LIST:case STRING_LIST:case BINARY_LIST:case DATE_LIST:case FLOAT_LIST:case DOUBLE_LIST:writer.emitStatement(\"builder.addPersistedValueListProperty(\\\"%s\\\", %s, %s)\",fieldName,fieldType.getRealmType(),metadata.isElementNullable(field) ? \"!Property.REQUIRED\" : \"Property.REQUIRED\");\nbreak;\ncase BACKLINK:throw new IllegalArgumentException(\"LinkingObject field should not be added to metadata\");\ncase INTEGER:case FLOAT:case DOUBLE:case BOOLEAN:case STRING:case DATE:case BINARY:case REALM_INTEGER:String nullableFlag=(metadata.isNullable(field) ? \"!\" : \"\") + \"Property.REQUIRED\";\nString indexedFlag=(metadata.isIndexed(field) ? \"\" : \"!\") + \"Property.INDEXED\";\nString primaryKeyFlag=(metadata.isPrimaryKey(field) ? \"\" : \"!\") + \"Property.PRIMARY_KEY\";\nwriter.emitStatement(\"builder.addPersistedProperty(\\\"%s\\\", %s, %s, %s, %s)\",fieldName,fieldType.getRealmType(),primaryKeyFlag,indexedFlag,nullableFlag);\nbreak;\ndefault:throw new IllegalArgumentException(\"'fieldType' \" + fieldName + \" is not handled\");\n}\n}\nfor (Backlink backlink : metadata.getBacklinkFields()) {\nClassMetaData sourceClass=classCollection.getClassFromQualifiedName(backlink.getSourceClass());\nString targetField=backlink.getTargetField();\nString internalSourceField=sourceClass.getInternalFieldName(backlink.getSourceField());\nwriter.emitStatement(\"builder.addComputedLinkProperty(\\\"%s\\\", \\\"%s\\\", \\\"%s\\\")\",targetField,sourceClass.getInternalClassName(),internalSourceField);\n}\nwriter.emitStatement(\"return builder.build()\");\nwriter.endMethod().emitEmptyLine();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 328,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 729,
        "startColumnNumber" : 8,
        "endLineNumber" : 729,
        "endColumnNumber" : 58
      },
      "nodeContext" : "int persistedFields=metadata.getFields().size();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "io.realm.processor.ClassMetaData"
  }, {
    "nodeContext" : "metadata",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 730,
      "startColumnNumber" : 29,
      "endLineNumber" : 730,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 730,
        "startColumnNumber" : 29,
        "endLineNumber" : 730,
        "endColumnNumber" : 57
      },
      "nodeContext" : "metadata.getBacklinkFields()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 730,
        "startColumnNumber" : 29,
        "endLineNumber" : 730,
        "endColumnNumber" : 64
      },
      "nodeContext" : "metadata.getBacklinkFields().size()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 730,
        "startColumnNumber" : 12,
        "endLineNumber" : 730,
        "endColumnNumber" : 64
      },
      "nodeContext" : "computedFields=metadata.getBacklinkFields().size()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 730,
        "startColumnNumber" : 8,
        "endLineNumber" : 730,
        "endColumnNumber" : 65
      },
      "nodeContext" : "int computedFields=metadata.getBacklinkFields().size();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4511,
        "startLineNumber" : 721,
        "startColumnNumber" : 90,
        "endLineNumber" : 807,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  writer.beginMethod(\"OsObjectSchemaInfo\",\"createExpectedObjectSchemaInfo\",EnumSet.of(Modifier.PRIVATE,Modifier.STATIC));\n  int persistedFields=metadata.getFields().size();\n  int computedFields=metadata.getBacklinkFields().size();\n  writer.emitStatement(\"OsObjectSchemaInfo.Builder builder = new OsObjectSchemaInfo.Builder(\\\"%s\\\", %s, %s)\",internalClassName,persistedFields,computedFields);\n  for (  RealmFieldElement field : metadata.getFields()) {\n    String fieldName=field.getInternalFieldName();\n    Constants.RealmFieldType fieldType=getRealmTypeChecked(field);\nswitch (fieldType) {\ncase NOTYPE:{\n        break;\n      }\ncase OBJECT:{\n      String fieldTypeQualifiedName=Utils.getFieldTypeQualifiedName(field);\n      String internalClassName=classCollection.getClassFromQualifiedName(fieldTypeQualifiedName).getInternalClassName();\n      writer.emitStatement(\"builder.addPersistedLinkProperty(\\\"%s\\\", RealmFieldType.OBJECT, \\\"%s\\\")\",fieldName,internalClassName);\n      break;\n    }\ncase LIST:{\n    String genericTypeQualifiedName=Utils.getGenericTypeQualifiedName(field);\n    String internalClassName=classCollection.getClassFromQualifiedName(genericTypeQualifiedName).getInternalClassName();\n    writer.emitStatement(\"builder.addPersistedLinkProperty(\\\"%s\\\", RealmFieldType.LIST, \\\"%s\\\")\",fieldName,internalClassName);\n    break;\n  }\ncase INTEGER_LIST:case BOOLEAN_LIST:case STRING_LIST:case BINARY_LIST:case DATE_LIST:case FLOAT_LIST:case DOUBLE_LIST:writer.emitStatement(\"builder.addPersistedValueListProperty(\\\"%s\\\", %s, %s)\",fieldName,fieldType.getRealmType(),metadata.isElementNullable(field) ? \"!Property.REQUIRED\" : \"Property.REQUIRED\");\nbreak;\ncase BACKLINK:throw new IllegalArgumentException(\"LinkingObject field should not be added to metadata\");\ncase INTEGER:case FLOAT:case DOUBLE:case BOOLEAN:case STRING:case DATE:case BINARY:case REALM_INTEGER:String nullableFlag=(metadata.isNullable(field) ? \"!\" : \"\") + \"Property.REQUIRED\";\nString indexedFlag=(metadata.isIndexed(field) ? \"\" : \"!\") + \"Property.INDEXED\";\nString primaryKeyFlag=(metadata.isPrimaryKey(field) ? \"\" : \"!\") + \"Property.PRIMARY_KEY\";\nwriter.emitStatement(\"builder.addPersistedProperty(\\\"%s\\\", %s, %s, %s, %s)\",fieldName,fieldType.getRealmType(),primaryKeyFlag,indexedFlag,nullableFlag);\nbreak;\ndefault:throw new IllegalArgumentException(\"'fieldType' \" + fieldName + \" is not handled\");\n}\n}\nfor (Backlink backlink : metadata.getBacklinkFields()) {\nClassMetaData sourceClass=classCollection.getClassFromQualifiedName(backlink.getSourceClass());\nString targetField=backlink.getTargetField();\nString internalSourceField=sourceClass.getInternalFieldName(backlink.getSourceField());\nwriter.emitStatement(\"builder.addComputedLinkProperty(\\\"%s\\\", \\\"%s\\\", \\\"%s\\\")\",targetField,sourceClass.getInternalClassName(),internalSourceField);\n}\nwriter.emitStatement(\"return builder.build()\");\nwriter.endMethod().emitEmptyLine();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 318,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4597,
        "startLineNumber" : 721,
        "startColumnNumber" : 4,
        "endLineNumber" : 807,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void emitCreateExpectedObjectSchemaInfo(JavaWriter writer) throws IOException {\n  writer.beginMethod(\"OsObjectSchemaInfo\",\"createExpectedObjectSchemaInfo\",EnumSet.of(Modifier.PRIVATE,Modifier.STATIC));\n  int persistedFields=metadata.getFields().size();\n  int computedFields=metadata.getBacklinkFields().size();\n  writer.emitStatement(\"OsObjectSchemaInfo.Builder builder = new OsObjectSchemaInfo.Builder(\\\"%s\\\", %s, %s)\",internalClassName,persistedFields,computedFields);\n  for (  RealmFieldElement field : metadata.getFields()) {\n    String fieldName=field.getInternalFieldName();\n    Constants.RealmFieldType fieldType=getRealmTypeChecked(field);\nswitch (fieldType) {\ncase NOTYPE:{\n        break;\n      }\ncase OBJECT:{\n      String fieldTypeQualifiedName=Utils.getFieldTypeQualifiedName(field);\n      String internalClassName=classCollection.getClassFromQualifiedName(fieldTypeQualifiedName).getInternalClassName();\n      writer.emitStatement(\"builder.addPersistedLinkProperty(\\\"%s\\\", RealmFieldType.OBJECT, \\\"%s\\\")\",fieldName,internalClassName);\n      break;\n    }\ncase LIST:{\n    String genericTypeQualifiedName=Utils.getGenericTypeQualifiedName(field);\n    String internalClassName=classCollection.getClassFromQualifiedName(genericTypeQualifiedName).getInternalClassName();\n    writer.emitStatement(\"builder.addPersistedLinkProperty(\\\"%s\\\", RealmFieldType.LIST, \\\"%s\\\")\",fieldName,internalClassName);\n    break;\n  }\ncase INTEGER_LIST:case BOOLEAN_LIST:case STRING_LIST:case BINARY_LIST:case DATE_LIST:case FLOAT_LIST:case DOUBLE_LIST:writer.emitStatement(\"builder.addPersistedValueListProperty(\\\"%s\\\", %s, %s)\",fieldName,fieldType.getRealmType(),metadata.isElementNullable(field) ? \"!Property.REQUIRED\" : \"Property.REQUIRED\");\nbreak;\ncase BACKLINK:throw new IllegalArgumentException(\"LinkingObject field should not be added to metadata\");\ncase INTEGER:case FLOAT:case DOUBLE:case BOOLEAN:case STRING:case DATE:case BINARY:case REALM_INTEGER:String nullableFlag=(metadata.isNullable(field) ? \"!\" : \"\") + \"Property.REQUIRED\";\nString indexedFlag=(metadata.isIndexed(field) ? \"\" : \"!\") + \"Property.INDEXED\";\nString primaryKeyFlag=(metadata.isPrimaryKey(field) ? \"\" : \"!\") + \"Property.PRIMARY_KEY\";\nwriter.emitStatement(\"builder.addPersistedProperty(\\\"%s\\\", %s, %s, %s, %s)\",fieldName,fieldType.getRealmType(),primaryKeyFlag,indexedFlag,nullableFlag);\nbreak;\ndefault:throw new IllegalArgumentException(\"'fieldType' \" + fieldName + \" is not handled\");\n}\n}\nfor (Backlink backlink : metadata.getBacklinkFields()) {\nClassMetaData sourceClass=classCollection.getClassFromQualifiedName(backlink.getSourceClass());\nString targetField=backlink.getTargetField();\nString internalSourceField=sourceClass.getInternalFieldName(backlink.getSourceField());\nwriter.emitStatement(\"builder.addComputedLinkProperty(\\\"%s\\\", \\\"%s\\\", \\\"%s\\\")\",targetField,sourceClass.getInternalClassName(),internalSourceField);\n}\nwriter.emitStatement(\"return builder.build()\");\nwriter.endMethod().emitEmptyLine();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 328,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 730,
        "startColumnNumber" : 8,
        "endLineNumber" : 730,
        "endColumnNumber" : 65
      },
      "nodeContext" : "int computedFields=metadata.getBacklinkFields().size();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "io.realm.processor.ClassMetaData"
  }, {
    "nodeContext" : "metadata",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 737,
      "startColumnNumber" : 39,
      "endLineNumber" : 737,
      "endColumnNumber" : 47
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 737,
        "startColumnNumber" : 39,
        "endLineNumber" : 737,
        "endColumnNumber" : 59
      },
      "nodeContext" : "metadata.getFields()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3059,
        "startLineNumber" : 737,
        "startColumnNumber" : 8,
        "endLineNumber" : 796,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (RealmFieldElement field : metadata.getFields()) {\n  String fieldName=field.getInternalFieldName();\n  Constants.RealmFieldType fieldType=getRealmTypeChecked(field);\nswitch (fieldType) {\ncase NOTYPE:{\n      break;\n    }\ncase OBJECT:{\n    String fieldTypeQualifiedName=Utils.getFieldTypeQualifiedName(field);\n    String internalClassName=classCollection.getClassFromQualifiedName(fieldTypeQualifiedName).getInternalClassName();\n    writer.emitStatement(\"builder.addPersistedLinkProperty(\\\"%s\\\", RealmFieldType.OBJECT, \\\"%s\\\")\",fieldName,internalClassName);\n    break;\n  }\ncase LIST:{\n  String genericTypeQualifiedName=Utils.getGenericTypeQualifiedName(field);\n  String internalClassName=classCollection.getClassFromQualifiedName(genericTypeQualifiedName).getInternalClassName();\n  writer.emitStatement(\"builder.addPersistedLinkProperty(\\\"%s\\\", RealmFieldType.LIST, \\\"%s\\\")\",fieldName,internalClassName);\n  break;\n}\ncase INTEGER_LIST:case BOOLEAN_LIST:case STRING_LIST:case BINARY_LIST:case DATE_LIST:case FLOAT_LIST:case DOUBLE_LIST:writer.emitStatement(\"builder.addPersistedValueListProperty(\\\"%s\\\", %s, %s)\",fieldName,fieldType.getRealmType(),metadata.isElementNullable(field) ? \"!Property.REQUIRED\" : \"Property.REQUIRED\");\nbreak;\ncase BACKLINK:throw new IllegalArgumentException(\"LinkingObject field should not be added to metadata\");\ncase INTEGER:case FLOAT:case DOUBLE:case BOOLEAN:case STRING:case DATE:case BINARY:case REALM_INTEGER:String nullableFlag=(metadata.isNullable(field) ? \"!\" : \"\") + \"Property.REQUIRED\";\nString indexedFlag=(metadata.isIndexed(field) ? \"\" : \"!\") + \"Property.INDEXED\";\nString primaryKeyFlag=(metadata.isPrimaryKey(field) ? \"\" : \"!\") + \"Property.PRIMARY_KEY\";\nwriter.emitStatement(\"builder.addPersistedProperty(\\\"%s\\\", %s, %s, %s, %s)\",fieldName,fieldType.getRealmType(),primaryKeyFlag,indexedFlag,nullableFlag);\nbreak;\ndefault:throw new IllegalArgumentException(\"'fieldType' \" + fieldName + \" is not handled\");\n}\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 216,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4511,
        "startLineNumber" : 721,
        "startColumnNumber" : 90,
        "endLineNumber" : 807,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  writer.beginMethod(\"OsObjectSchemaInfo\",\"createExpectedObjectSchemaInfo\",EnumSet.of(Modifier.PRIVATE,Modifier.STATIC));\n  int persistedFields=metadata.getFields().size();\n  int computedFields=metadata.getBacklinkFields().size();\n  writer.emitStatement(\"OsObjectSchemaInfo.Builder builder = new OsObjectSchemaInfo.Builder(\\\"%s\\\", %s, %s)\",internalClassName,persistedFields,computedFields);\n  for (  RealmFieldElement field : metadata.getFields()) {\n    String fieldName=field.getInternalFieldName();\n    Constants.RealmFieldType fieldType=getRealmTypeChecked(field);\nswitch (fieldType) {\ncase NOTYPE:{\n        break;\n      }\ncase OBJECT:{\n      String fieldTypeQualifiedName=Utils.getFieldTypeQualifiedName(field);\n      String internalClassName=classCollection.getClassFromQualifiedName(fieldTypeQualifiedName).getInternalClassName();\n      writer.emitStatement(\"builder.addPersistedLinkProperty(\\\"%s\\\", RealmFieldType.OBJECT, \\\"%s\\\")\",fieldName,internalClassName);\n      break;\n    }\ncase LIST:{\n    String genericTypeQualifiedName=Utils.getGenericTypeQualifiedName(field);\n    String internalClassName=classCollection.getClassFromQualifiedName(genericTypeQualifiedName).getInternalClassName();\n    writer.emitStatement(\"builder.addPersistedLinkProperty(\\\"%s\\\", RealmFieldType.LIST, \\\"%s\\\")\",fieldName,internalClassName);\n    break;\n  }\ncase INTEGER_LIST:case BOOLEAN_LIST:case STRING_LIST:case BINARY_LIST:case DATE_LIST:case FLOAT_LIST:case DOUBLE_LIST:writer.emitStatement(\"builder.addPersistedValueListProperty(\\\"%s\\\", %s, %s)\",fieldName,fieldType.getRealmType(),metadata.isElementNullable(field) ? \"!Property.REQUIRED\" : \"Property.REQUIRED\");\nbreak;\ncase BACKLINK:throw new IllegalArgumentException(\"LinkingObject field should not be added to metadata\");\ncase INTEGER:case FLOAT:case DOUBLE:case BOOLEAN:case STRING:case DATE:case BINARY:case REALM_INTEGER:String nullableFlag=(metadata.isNullable(field) ? \"!\" : \"\") + \"Property.REQUIRED\";\nString indexedFlag=(metadata.isIndexed(field) ? \"\" : \"!\") + \"Property.INDEXED\";\nString primaryKeyFlag=(metadata.isPrimaryKey(field) ? \"\" : \"!\") + \"Property.PRIMARY_KEY\";\nwriter.emitStatement(\"builder.addPersistedProperty(\\\"%s\\\", %s, %s, %s, %s)\",fieldName,fieldType.getRealmType(),primaryKeyFlag,indexedFlag,nullableFlag);\nbreak;\ndefault:throw new IllegalArgumentException(\"'fieldType' \" + fieldName + \" is not handled\");\n}\n}\nfor (Backlink backlink : metadata.getBacklinkFields()) {\nClassMetaData sourceClass=classCollection.getClassFromQualifiedName(backlink.getSourceClass());\nString targetField=backlink.getTargetField();\nString internalSourceField=sourceClass.getInternalFieldName(backlink.getSourceField());\nwriter.emitStatement(\"builder.addComputedLinkProperty(\\\"%s\\\", \\\"%s\\\", \\\"%s\\\")\",targetField,sourceClass.getInternalClassName(),internalSourceField);\n}\nwriter.emitStatement(\"return builder.build()\");\nwriter.endMethod().emitEmptyLine();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 318,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4597,
        "startLineNumber" : 721,
        "startColumnNumber" : 4,
        "endLineNumber" : 807,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void emitCreateExpectedObjectSchemaInfo(JavaWriter writer) throws IOException {\n  writer.beginMethod(\"OsObjectSchemaInfo\",\"createExpectedObjectSchemaInfo\",EnumSet.of(Modifier.PRIVATE,Modifier.STATIC));\n  int persistedFields=metadata.getFields().size();\n  int computedFields=metadata.getBacklinkFields().size();\n  writer.emitStatement(\"OsObjectSchemaInfo.Builder builder = new OsObjectSchemaInfo.Builder(\\\"%s\\\", %s, %s)\",internalClassName,persistedFields,computedFields);\n  for (  RealmFieldElement field : metadata.getFields()) {\n    String fieldName=field.getInternalFieldName();\n    Constants.RealmFieldType fieldType=getRealmTypeChecked(field);\nswitch (fieldType) {\ncase NOTYPE:{\n        break;\n      }\ncase OBJECT:{\n      String fieldTypeQualifiedName=Utils.getFieldTypeQualifiedName(field);\n      String internalClassName=classCollection.getClassFromQualifiedName(fieldTypeQualifiedName).getInternalClassName();\n      writer.emitStatement(\"builder.addPersistedLinkProperty(\\\"%s\\\", RealmFieldType.OBJECT, \\\"%s\\\")\",fieldName,internalClassName);\n      break;\n    }\ncase LIST:{\n    String genericTypeQualifiedName=Utils.getGenericTypeQualifiedName(field);\n    String internalClassName=classCollection.getClassFromQualifiedName(genericTypeQualifiedName).getInternalClassName();\n    writer.emitStatement(\"builder.addPersistedLinkProperty(\\\"%s\\\", RealmFieldType.LIST, \\\"%s\\\")\",fieldName,internalClassName);\n    break;\n  }\ncase INTEGER_LIST:case BOOLEAN_LIST:case STRING_LIST:case BINARY_LIST:case DATE_LIST:case FLOAT_LIST:case DOUBLE_LIST:writer.emitStatement(\"builder.addPersistedValueListProperty(\\\"%s\\\", %s, %s)\",fieldName,fieldType.getRealmType(),metadata.isElementNullable(field) ? \"!Property.REQUIRED\" : \"Property.REQUIRED\");\nbreak;\ncase BACKLINK:throw new IllegalArgumentException(\"LinkingObject field should not be added to metadata\");\ncase INTEGER:case FLOAT:case DOUBLE:case BOOLEAN:case STRING:case DATE:case BINARY:case REALM_INTEGER:String nullableFlag=(metadata.isNullable(field) ? \"!\" : \"\") + \"Property.REQUIRED\";\nString indexedFlag=(metadata.isIndexed(field) ? \"\" : \"!\") + \"Property.INDEXED\";\nString primaryKeyFlag=(metadata.isPrimaryKey(field) ? \"\" : \"!\") + \"Property.PRIMARY_KEY\";\nwriter.emitStatement(\"builder.addPersistedProperty(\\\"%s\\\", %s, %s, %s, %s)\",fieldName,fieldType.getRealmType(),primaryKeyFlag,indexedFlag,nullableFlag);\nbreak;\ndefault:throw new IllegalArgumentException(\"'fieldType' \" + fieldName + \" is not handled\");\n}\n}\nfor (Backlink backlink : metadata.getBacklinkFields()) {\nClassMetaData sourceClass=classCollection.getClassFromQualifiedName(backlink.getSourceClass());\nString targetField=backlink.getTargetField();\nString internalSourceField=sourceClass.getInternalFieldName(backlink.getSourceField());\nwriter.emitStatement(\"builder.addComputedLinkProperty(\\\"%s\\\", \\\"%s\\\", \\\"%s\\\")\",targetField,sourceClass.getInternalClassName(),internalSourceField);\n}\nwriter.emitStatement(\"return builder.build()\");\nwriter.endMethod().emitEmptyLine();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 328,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 737,
        "startColumnNumber" : 39,
        "endLineNumber" : 737,
        "endColumnNumber" : 59
      },
      "nodeContext" : "metadata.getFields()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "io.realm.processor.ClassMetaData"
  }, {
    "nodeContext" : "metadata",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 768,
      "startColumnNumber" : 65,
      "endLineNumber" : 768,
      "endColumnNumber" : 73
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,expression]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 768,
        "startColumnNumber" : 65,
        "endLineNumber" : 768,
        "endColumnNumber" : 98
      },
      "nodeContext" : "metadata.isElementNullable(field)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 768,
        "startColumnNumber" : 65,
        "endLineNumber" : 768,
        "endColumnNumber" : 143
      },
      "nodeContext" : "metadata.isElementNullable(field) ? \"!Property.REQUIRED\" : \"Property.REQUIRED\"",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 222,
        "startLineNumber" : 767,
        "startColumnNumber" : 20,
        "endLineNumber" : 768,
        "endColumnNumber" : 144
      },
      "nodeContext" : "writer.emitStatement(\"builder.addPersistedValueListProperty(\\\"%s\\\", %s, %s)\",fieldName,fieldType.getRealmType(),metadata.isElementNullable(field) ? \"!Property.REQUIRED\" : \"Property.REQUIRED\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 223,
        "startLineNumber" : 767,
        "startColumnNumber" : 20,
        "endLineNumber" : 768,
        "endColumnNumber" : 145
      },
      "nodeContext" : "writer.emitStatement(\"builder.addPersistedValueListProperty(\\\"%s\\\", %s, %s)\",fieldName,fieldType.getRealmType(),metadata.isElementNullable(field) ? \"!Property.REQUIRED\" : \"Property.REQUIRED\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2843,
        "startLineNumber" : 741,
        "startColumnNumber" : 12,
        "endLineNumber" : 795,
        "endColumnNumber" : 13
      },
      "nodeContext" : "switch (fieldType) {\ncase NOTYPE:{\n    break;\n  }\ncase OBJECT:{\n  String fieldTypeQualifiedName=Utils.getFieldTypeQualifiedName(field);\n  String internalClassName=classCollection.getClassFromQualifiedName(fieldTypeQualifiedName).getInternalClassName();\n  writer.emitStatement(\"builder.addPersistedLinkProperty(\\\"%s\\\", RealmFieldType.OBJECT, \\\"%s\\\")\",fieldName,internalClassName);\n  break;\n}\ncase LIST:{\nString genericTypeQualifiedName=Utils.getGenericTypeQualifiedName(field);\nString internalClassName=classCollection.getClassFromQualifiedName(genericTypeQualifiedName).getInternalClassName();\nwriter.emitStatement(\"builder.addPersistedLinkProperty(\\\"%s\\\", RealmFieldType.LIST, \\\"%s\\\")\",fieldName,internalClassName);\nbreak;\n}\ncase INTEGER_LIST:case BOOLEAN_LIST:case STRING_LIST:case BINARY_LIST:case DATE_LIST:case FLOAT_LIST:case DOUBLE_LIST:writer.emitStatement(\"builder.addPersistedValueListProperty(\\\"%s\\\", %s, %s)\",fieldName,fieldType.getRealmType(),metadata.isElementNullable(field) ? \"!Property.REQUIRED\" : \"Property.REQUIRED\");\nbreak;\ncase BACKLINK:throw new IllegalArgumentException(\"LinkingObject field should not be added to metadata\");\ncase INTEGER:case FLOAT:case DOUBLE:case BOOLEAN:case STRING:case DATE:case BINARY:case REALM_INTEGER:String nullableFlag=(metadata.isNullable(field) ? \"!\" : \"\") + \"Property.REQUIRED\";\nString indexedFlag=(metadata.isIndexed(field) ? \"\" : \"!\") + \"Property.INDEXED\";\nString primaryKeyFlag=(metadata.isPrimaryKey(field) ? \"\" : \"!\") + \"Property.PRIMARY_KEY\";\nwriter.emitStatement(\"builder.addPersistedProperty(\\\"%s\\\", %s, %s, %s, %s)\",fieldName,fieldType.getRealmType(),primaryKeyFlag,indexedFlag,nullableFlag);\nbreak;\ndefault:throw new IllegalArgumentException(\"'fieldType' \" + fieldName + \" is not handled\");\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 189,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 3006,
        "startLineNumber" : 737,
        "startColumnNumber" : 61,
        "endLineNumber" : 796,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String fieldName=field.getInternalFieldName();\n  Constants.RealmFieldType fieldType=getRealmTypeChecked(field);\nswitch (fieldType) {\ncase NOTYPE:{\n      break;\n    }\ncase OBJECT:{\n    String fieldTypeQualifiedName=Utils.getFieldTypeQualifiedName(field);\n    String internalClassName=classCollection.getClassFromQualifiedName(fieldTypeQualifiedName).getInternalClassName();\n    writer.emitStatement(\"builder.addPersistedLinkProperty(\\\"%s\\\", RealmFieldType.OBJECT, \\\"%s\\\")\",fieldName,internalClassName);\n    break;\n  }\ncase LIST:{\n  String genericTypeQualifiedName=Utils.getGenericTypeQualifiedName(field);\n  String internalClassName=classCollection.getClassFromQualifiedName(genericTypeQualifiedName).getInternalClassName();\n  writer.emitStatement(\"builder.addPersistedLinkProperty(\\\"%s\\\", RealmFieldType.LIST, \\\"%s\\\")\",fieldName,internalClassName);\n  break;\n}\ncase INTEGER_LIST:case BOOLEAN_LIST:case STRING_LIST:case BINARY_LIST:case DATE_LIST:case FLOAT_LIST:case DOUBLE_LIST:writer.emitStatement(\"builder.addPersistedValueListProperty(\\\"%s\\\", %s, %s)\",fieldName,fieldType.getRealmType(),metadata.isElementNullable(field) ? \"!Property.REQUIRED\" : \"Property.REQUIRED\");\nbreak;\ncase BACKLINK:throw new IllegalArgumentException(\"LinkingObject field should not be added to metadata\");\ncase INTEGER:case FLOAT:case DOUBLE:case BOOLEAN:case STRING:case DATE:case BINARY:case REALM_INTEGER:String nullableFlag=(metadata.isNullable(field) ? \"!\" : \"\") + \"Property.REQUIRED\";\nString indexedFlag=(metadata.isIndexed(field) ? \"\" : \"!\") + \"Property.INDEXED\";\nString primaryKeyFlag=(metadata.isPrimaryKey(field) ? \"\" : \"!\") + \"Property.PRIMARY_KEY\";\nwriter.emitStatement(\"builder.addPersistedProperty(\\\"%s\\\", %s, %s, %s, %s)\",fieldName,fieldType.getRealmType(),primaryKeyFlag,indexedFlag,nullableFlag);\nbreak;\ndefault:throw new IllegalArgumentException(\"'fieldType' \" + fieldName + \" is not handled\");\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 208,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3059,
        "startLineNumber" : 737,
        "startColumnNumber" : 8,
        "endLineNumber" : 796,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (RealmFieldElement field : metadata.getFields()) {\n  String fieldName=field.getInternalFieldName();\n  Constants.RealmFieldType fieldType=getRealmTypeChecked(field);\nswitch (fieldType) {\ncase NOTYPE:{\n      break;\n    }\ncase OBJECT:{\n    String fieldTypeQualifiedName=Utils.getFieldTypeQualifiedName(field);\n    String internalClassName=classCollection.getClassFromQualifiedName(fieldTypeQualifiedName).getInternalClassName();\n    writer.emitStatement(\"builder.addPersistedLinkProperty(\\\"%s\\\", RealmFieldType.OBJECT, \\\"%s\\\")\",fieldName,internalClassName);\n    break;\n  }\ncase LIST:{\n  String genericTypeQualifiedName=Utils.getGenericTypeQualifiedName(field);\n  String internalClassName=classCollection.getClassFromQualifiedName(genericTypeQualifiedName).getInternalClassName();\n  writer.emitStatement(\"builder.addPersistedLinkProperty(\\\"%s\\\", RealmFieldType.LIST, \\\"%s\\\")\",fieldName,internalClassName);\n  break;\n}\ncase INTEGER_LIST:case BOOLEAN_LIST:case STRING_LIST:case BINARY_LIST:case DATE_LIST:case FLOAT_LIST:case DOUBLE_LIST:writer.emitStatement(\"builder.addPersistedValueListProperty(\\\"%s\\\", %s, %s)\",fieldName,fieldType.getRealmType(),metadata.isElementNullable(field) ? \"!Property.REQUIRED\" : \"Property.REQUIRED\");\nbreak;\ncase BACKLINK:throw new IllegalArgumentException(\"LinkingObject field should not be added to metadata\");\ncase INTEGER:case FLOAT:case DOUBLE:case BOOLEAN:case STRING:case DATE:case BINARY:case REALM_INTEGER:String nullableFlag=(metadata.isNullable(field) ? \"!\" : \"\") + \"Property.REQUIRED\";\nString indexedFlag=(metadata.isIndexed(field) ? \"\" : \"!\") + \"Property.INDEXED\";\nString primaryKeyFlag=(metadata.isPrimaryKey(field) ? \"\" : \"!\") + \"Property.PRIMARY_KEY\";\nwriter.emitStatement(\"builder.addPersistedProperty(\\\"%s\\\", %s, %s, %s, %s)\",fieldName,fieldType.getRealmType(),primaryKeyFlag,indexedFlag,nullableFlag);\nbreak;\ndefault:throw new IllegalArgumentException(\"'fieldType' \" + fieldName + \" is not handled\");\n}\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 216,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4511,
        "startLineNumber" : 721,
        "startColumnNumber" : 90,
        "endLineNumber" : 807,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  writer.beginMethod(\"OsObjectSchemaInfo\",\"createExpectedObjectSchemaInfo\",EnumSet.of(Modifier.PRIVATE,Modifier.STATIC));\n  int persistedFields=metadata.getFields().size();\n  int computedFields=metadata.getBacklinkFields().size();\n  writer.emitStatement(\"OsObjectSchemaInfo.Builder builder = new OsObjectSchemaInfo.Builder(\\\"%s\\\", %s, %s)\",internalClassName,persistedFields,computedFields);\n  for (  RealmFieldElement field : metadata.getFields()) {\n    String fieldName=field.getInternalFieldName();\n    Constants.RealmFieldType fieldType=getRealmTypeChecked(field);\nswitch (fieldType) {\ncase NOTYPE:{\n        break;\n      }\ncase OBJECT:{\n      String fieldTypeQualifiedName=Utils.getFieldTypeQualifiedName(field);\n      String internalClassName=classCollection.getClassFromQualifiedName(fieldTypeQualifiedName).getInternalClassName();\n      writer.emitStatement(\"builder.addPersistedLinkProperty(\\\"%s\\\", RealmFieldType.OBJECT, \\\"%s\\\")\",fieldName,internalClassName);\n      break;\n    }\ncase LIST:{\n    String genericTypeQualifiedName=Utils.getGenericTypeQualifiedName(field);\n    String internalClassName=classCollection.getClassFromQualifiedName(genericTypeQualifiedName).getInternalClassName();\n    writer.emitStatement(\"builder.addPersistedLinkProperty(\\\"%s\\\", RealmFieldType.LIST, \\\"%s\\\")\",fieldName,internalClassName);\n    break;\n  }\ncase INTEGER_LIST:case BOOLEAN_LIST:case STRING_LIST:case BINARY_LIST:case DATE_LIST:case FLOAT_LIST:case DOUBLE_LIST:writer.emitStatement(\"builder.addPersistedValueListProperty(\\\"%s\\\", %s, %s)\",fieldName,fieldType.getRealmType(),metadata.isElementNullable(field) ? \"!Property.REQUIRED\" : \"Property.REQUIRED\");\nbreak;\ncase BACKLINK:throw new IllegalArgumentException(\"LinkingObject field should not be added to metadata\");\ncase INTEGER:case FLOAT:case DOUBLE:case BOOLEAN:case STRING:case DATE:case BINARY:case REALM_INTEGER:String nullableFlag=(metadata.isNullable(field) ? \"!\" : \"\") + \"Property.REQUIRED\";\nString indexedFlag=(metadata.isIndexed(field) ? \"\" : \"!\") + \"Property.INDEXED\";\nString primaryKeyFlag=(metadata.isPrimaryKey(field) ? \"\" : \"!\") + \"Property.PRIMARY_KEY\";\nwriter.emitStatement(\"builder.addPersistedProperty(\\\"%s\\\", %s, %s, %s, %s)\",fieldName,fieldType.getRealmType(),primaryKeyFlag,indexedFlag,nullableFlag);\nbreak;\ndefault:throw new IllegalArgumentException(\"'fieldType' \" + fieldName + \" is not handled\");\n}\n}\nfor (Backlink backlink : metadata.getBacklinkFields()) {\nClassMetaData sourceClass=classCollection.getClassFromQualifiedName(backlink.getSourceClass());\nString targetField=backlink.getTargetField();\nString internalSourceField=sourceClass.getInternalFieldName(backlink.getSourceField());\nwriter.emitStatement(\"builder.addComputedLinkProperty(\\\"%s\\\", \\\"%s\\\", \\\"%s\\\")\",targetField,sourceClass.getInternalClassName(),internalSourceField);\n}\nwriter.emitStatement(\"return builder.build()\");\nwriter.endMethod().emitEmptyLine();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 318,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4597,
        "startLineNumber" : 721,
        "startColumnNumber" : 4,
        "endLineNumber" : 807,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void emitCreateExpectedObjectSchemaInfo(JavaWriter writer) throws IOException {\n  writer.beginMethod(\"OsObjectSchemaInfo\",\"createExpectedObjectSchemaInfo\",EnumSet.of(Modifier.PRIVATE,Modifier.STATIC));\n  int persistedFields=metadata.getFields().size();\n  int computedFields=metadata.getBacklinkFields().size();\n  writer.emitStatement(\"OsObjectSchemaInfo.Builder builder = new OsObjectSchemaInfo.Builder(\\\"%s\\\", %s, %s)\",internalClassName,persistedFields,computedFields);\n  for (  RealmFieldElement field : metadata.getFields()) {\n    String fieldName=field.getInternalFieldName();\n    Constants.RealmFieldType fieldType=getRealmTypeChecked(field);\nswitch (fieldType) {\ncase NOTYPE:{\n        break;\n      }\ncase OBJECT:{\n      String fieldTypeQualifiedName=Utils.getFieldTypeQualifiedName(field);\n      String internalClassName=classCollection.getClassFromQualifiedName(fieldTypeQualifiedName).getInternalClassName();\n      writer.emitStatement(\"builder.addPersistedLinkProperty(\\\"%s\\\", RealmFieldType.OBJECT, \\\"%s\\\")\",fieldName,internalClassName);\n      break;\n    }\ncase LIST:{\n    String genericTypeQualifiedName=Utils.getGenericTypeQualifiedName(field);\n    String internalClassName=classCollection.getClassFromQualifiedName(genericTypeQualifiedName).getInternalClassName();\n    writer.emitStatement(\"builder.addPersistedLinkProperty(\\\"%s\\\", RealmFieldType.LIST, \\\"%s\\\")\",fieldName,internalClassName);\n    break;\n  }\ncase INTEGER_LIST:case BOOLEAN_LIST:case STRING_LIST:case BINARY_LIST:case DATE_LIST:case FLOAT_LIST:case DOUBLE_LIST:writer.emitStatement(\"builder.addPersistedValueListProperty(\\\"%s\\\", %s, %s)\",fieldName,fieldType.getRealmType(),metadata.isElementNullable(field) ? \"!Property.REQUIRED\" : \"Property.REQUIRED\");\nbreak;\ncase BACKLINK:throw new IllegalArgumentException(\"LinkingObject field should not be added to metadata\");\ncase INTEGER:case FLOAT:case DOUBLE:case BOOLEAN:case STRING:case DATE:case BINARY:case REALM_INTEGER:String nullableFlag=(metadata.isNullable(field) ? \"!\" : \"\") + \"Property.REQUIRED\";\nString indexedFlag=(metadata.isIndexed(field) ? \"\" : \"!\") + \"Property.INDEXED\";\nString primaryKeyFlag=(metadata.isPrimaryKey(field) ? \"\" : \"!\") + \"Property.PRIMARY_KEY\";\nwriter.emitStatement(\"builder.addPersistedProperty(\\\"%s\\\", %s, %s, %s, %s)\",fieldName,fieldType.getRealmType(),primaryKeyFlag,indexedFlag,nullableFlag);\nbreak;\ndefault:throw new IllegalArgumentException(\"'fieldType' \" + fieldName + \" is not handled\");\n}\n}\nfor (Backlink backlink : metadata.getBacklinkFields()) {\nClassMetaData sourceClass=classCollection.getClassFromQualifiedName(backlink.getSourceClass());\nString targetField=backlink.getTargetField();\nString internalSourceField=sourceClass.getInternalFieldName(backlink.getSourceField());\nwriter.emitStatement(\"builder.addComputedLinkProperty(\\\"%s\\\", \\\"%s\\\", \\\"%s\\\")\",targetField,sourceClass.getInternalClassName(),internalSourceField);\n}\nwriter.emitStatement(\"return builder.build()\");\nwriter.endMethod().emitEmptyLine();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 328,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 768,
        "startColumnNumber" : 65,
        "endLineNumber" : 768,
        "endColumnNumber" : 143
      },
      "nodeContext" : "metadata.isElementNullable(field) ? \"!Property.REQUIRED\" : \"Property.REQUIRED\"",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "io.realm.processor.ClassMetaData"
  }, {
    "nodeContext" : "metadata",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 782,
      "startColumnNumber" : 43,
      "endLineNumber" : 782,
      "endColumnNumber" : 51
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,expression]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 782,
        "startColumnNumber" : 43,
        "endLineNumber" : 782,
        "endColumnNumber" : 69
      },
      "nodeContext" : "metadata.isNullable(field)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 782,
        "startColumnNumber" : 43,
        "endLineNumber" : 782,
        "endColumnNumber" : 80
      },
      "nodeContext" : "metadata.isNullable(field) ? \"!\" : \"\"",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 782,
        "startColumnNumber" : 42,
        "endLineNumber" : 782,
        "endColumnNumber" : 81
      },
      "nodeContext" : "(metadata.isNullable(field) ? \"!\" : \"\")",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 782,
        "startColumnNumber" : 42,
        "endLineNumber" : 782,
        "endColumnNumber" : 103
      },
      "nodeContext" : "(metadata.isNullable(field) ? \"!\" : \"\") + \"Property.REQUIRED\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 782,
        "startColumnNumber" : 27,
        "endLineNumber" : 782,
        "endColumnNumber" : 103
      },
      "nodeContext" : "nullableFlag=(metadata.isNullable(field) ? \"!\" : \"\") + \"Property.REQUIRED\"",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 782,
        "startColumnNumber" : 20,
        "endLineNumber" : 782,
        "endColumnNumber" : 104
      },
      "nodeContext" : "String nullableFlag=(metadata.isNullable(field) ? \"!\" : \"\") + \"Property.REQUIRED\";\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 15,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2843,
        "startLineNumber" : 741,
        "startColumnNumber" : 12,
        "endLineNumber" : 795,
        "endColumnNumber" : 13
      },
      "nodeContext" : "switch (fieldType) {\ncase NOTYPE:{\n    break;\n  }\ncase OBJECT:{\n  String fieldTypeQualifiedName=Utils.getFieldTypeQualifiedName(field);\n  String internalClassName=classCollection.getClassFromQualifiedName(fieldTypeQualifiedName).getInternalClassName();\n  writer.emitStatement(\"builder.addPersistedLinkProperty(\\\"%s\\\", RealmFieldType.OBJECT, \\\"%s\\\")\",fieldName,internalClassName);\n  break;\n}\ncase LIST:{\nString genericTypeQualifiedName=Utils.getGenericTypeQualifiedName(field);\nString internalClassName=classCollection.getClassFromQualifiedName(genericTypeQualifiedName).getInternalClassName();\nwriter.emitStatement(\"builder.addPersistedLinkProperty(\\\"%s\\\", RealmFieldType.LIST, \\\"%s\\\")\",fieldName,internalClassName);\nbreak;\n}\ncase INTEGER_LIST:case BOOLEAN_LIST:case STRING_LIST:case BINARY_LIST:case DATE_LIST:case FLOAT_LIST:case DOUBLE_LIST:writer.emitStatement(\"builder.addPersistedValueListProperty(\\\"%s\\\", %s, %s)\",fieldName,fieldType.getRealmType(),metadata.isElementNullable(field) ? \"!Property.REQUIRED\" : \"Property.REQUIRED\");\nbreak;\ncase BACKLINK:throw new IllegalArgumentException(\"LinkingObject field should not be added to metadata\");\ncase INTEGER:case FLOAT:case DOUBLE:case BOOLEAN:case STRING:case DATE:case BINARY:case REALM_INTEGER:String nullableFlag=(metadata.isNullable(field) ? \"!\" : \"\") + \"Property.REQUIRED\";\nString indexedFlag=(metadata.isIndexed(field) ? \"\" : \"!\") + \"Property.INDEXED\";\nString primaryKeyFlag=(metadata.isPrimaryKey(field) ? \"\" : \"!\") + \"Property.PRIMARY_KEY\";\nwriter.emitStatement(\"builder.addPersistedProperty(\\\"%s\\\", %s, %s, %s, %s)\",fieldName,fieldType.getRealmType(),primaryKeyFlag,indexedFlag,nullableFlag);\nbreak;\ndefault:throw new IllegalArgumentException(\"'fieldType' \" + fieldName + \" is not handled\");\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 189,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 3006,
        "startLineNumber" : 737,
        "startColumnNumber" : 61,
        "endLineNumber" : 796,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String fieldName=field.getInternalFieldName();\n  Constants.RealmFieldType fieldType=getRealmTypeChecked(field);\nswitch (fieldType) {\ncase NOTYPE:{\n      break;\n    }\ncase OBJECT:{\n    String fieldTypeQualifiedName=Utils.getFieldTypeQualifiedName(field);\n    String internalClassName=classCollection.getClassFromQualifiedName(fieldTypeQualifiedName).getInternalClassName();\n    writer.emitStatement(\"builder.addPersistedLinkProperty(\\\"%s\\\", RealmFieldType.OBJECT, \\\"%s\\\")\",fieldName,internalClassName);\n    break;\n  }\ncase LIST:{\n  String genericTypeQualifiedName=Utils.getGenericTypeQualifiedName(field);\n  String internalClassName=classCollection.getClassFromQualifiedName(genericTypeQualifiedName).getInternalClassName();\n  writer.emitStatement(\"builder.addPersistedLinkProperty(\\\"%s\\\", RealmFieldType.LIST, \\\"%s\\\")\",fieldName,internalClassName);\n  break;\n}\ncase INTEGER_LIST:case BOOLEAN_LIST:case STRING_LIST:case BINARY_LIST:case DATE_LIST:case FLOAT_LIST:case DOUBLE_LIST:writer.emitStatement(\"builder.addPersistedValueListProperty(\\\"%s\\\", %s, %s)\",fieldName,fieldType.getRealmType(),metadata.isElementNullable(field) ? \"!Property.REQUIRED\" : \"Property.REQUIRED\");\nbreak;\ncase BACKLINK:throw new IllegalArgumentException(\"LinkingObject field should not be added to metadata\");\ncase INTEGER:case FLOAT:case DOUBLE:case BOOLEAN:case STRING:case DATE:case BINARY:case REALM_INTEGER:String nullableFlag=(metadata.isNullable(field) ? \"!\" : \"\") + \"Property.REQUIRED\";\nString indexedFlag=(metadata.isIndexed(field) ? \"\" : \"!\") + \"Property.INDEXED\";\nString primaryKeyFlag=(metadata.isPrimaryKey(field) ? \"\" : \"!\") + \"Property.PRIMARY_KEY\";\nwriter.emitStatement(\"builder.addPersistedProperty(\\\"%s\\\", %s, %s, %s, %s)\",fieldName,fieldType.getRealmType(),primaryKeyFlag,indexedFlag,nullableFlag);\nbreak;\ndefault:throw new IllegalArgumentException(\"'fieldType' \" + fieldName + \" is not handled\");\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 208,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3059,
        "startLineNumber" : 737,
        "startColumnNumber" : 8,
        "endLineNumber" : 796,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (RealmFieldElement field : metadata.getFields()) {\n  String fieldName=field.getInternalFieldName();\n  Constants.RealmFieldType fieldType=getRealmTypeChecked(field);\nswitch (fieldType) {\ncase NOTYPE:{\n      break;\n    }\ncase OBJECT:{\n    String fieldTypeQualifiedName=Utils.getFieldTypeQualifiedName(field);\n    String internalClassName=classCollection.getClassFromQualifiedName(fieldTypeQualifiedName).getInternalClassName();\n    writer.emitStatement(\"builder.addPersistedLinkProperty(\\\"%s\\\", RealmFieldType.OBJECT, \\\"%s\\\")\",fieldName,internalClassName);\n    break;\n  }\ncase LIST:{\n  String genericTypeQualifiedName=Utils.getGenericTypeQualifiedName(field);\n  String internalClassName=classCollection.getClassFromQualifiedName(genericTypeQualifiedName).getInternalClassName();\n  writer.emitStatement(\"builder.addPersistedLinkProperty(\\\"%s\\\", RealmFieldType.LIST, \\\"%s\\\")\",fieldName,internalClassName);\n  break;\n}\ncase INTEGER_LIST:case BOOLEAN_LIST:case STRING_LIST:case BINARY_LIST:case DATE_LIST:case FLOAT_LIST:case DOUBLE_LIST:writer.emitStatement(\"builder.addPersistedValueListProperty(\\\"%s\\\", %s, %s)\",fieldName,fieldType.getRealmType(),metadata.isElementNullable(field) ? \"!Property.REQUIRED\" : \"Property.REQUIRED\");\nbreak;\ncase BACKLINK:throw new IllegalArgumentException(\"LinkingObject field should not be added to metadata\");\ncase INTEGER:case FLOAT:case DOUBLE:case BOOLEAN:case STRING:case DATE:case BINARY:case REALM_INTEGER:String nullableFlag=(metadata.isNullable(field) ? \"!\" : \"\") + \"Property.REQUIRED\";\nString indexedFlag=(metadata.isIndexed(field) ? \"\" : \"!\") + \"Property.INDEXED\";\nString primaryKeyFlag=(metadata.isPrimaryKey(field) ? \"\" : \"!\") + \"Property.PRIMARY_KEY\";\nwriter.emitStatement(\"builder.addPersistedProperty(\\\"%s\\\", %s, %s, %s, %s)\",fieldName,fieldType.getRealmType(),primaryKeyFlag,indexedFlag,nullableFlag);\nbreak;\ndefault:throw new IllegalArgumentException(\"'fieldType' \" + fieldName + \" is not handled\");\n}\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 216,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4511,
        "startLineNumber" : 721,
        "startColumnNumber" : 90,
        "endLineNumber" : 807,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  writer.beginMethod(\"OsObjectSchemaInfo\",\"createExpectedObjectSchemaInfo\",EnumSet.of(Modifier.PRIVATE,Modifier.STATIC));\n  int persistedFields=metadata.getFields().size();\n  int computedFields=metadata.getBacklinkFields().size();\n  writer.emitStatement(\"OsObjectSchemaInfo.Builder builder = new OsObjectSchemaInfo.Builder(\\\"%s\\\", %s, %s)\",internalClassName,persistedFields,computedFields);\n  for (  RealmFieldElement field : metadata.getFields()) {\n    String fieldName=field.getInternalFieldName();\n    Constants.RealmFieldType fieldType=getRealmTypeChecked(field);\nswitch (fieldType) {\ncase NOTYPE:{\n        break;\n      }\ncase OBJECT:{\n      String fieldTypeQualifiedName=Utils.getFieldTypeQualifiedName(field);\n      String internalClassName=classCollection.getClassFromQualifiedName(fieldTypeQualifiedName).getInternalClassName();\n      writer.emitStatement(\"builder.addPersistedLinkProperty(\\\"%s\\\", RealmFieldType.OBJECT, \\\"%s\\\")\",fieldName,internalClassName);\n      break;\n    }\ncase LIST:{\n    String genericTypeQualifiedName=Utils.getGenericTypeQualifiedName(field);\n    String internalClassName=classCollection.getClassFromQualifiedName(genericTypeQualifiedName).getInternalClassName();\n    writer.emitStatement(\"builder.addPersistedLinkProperty(\\\"%s\\\", RealmFieldType.LIST, \\\"%s\\\")\",fieldName,internalClassName);\n    break;\n  }\ncase INTEGER_LIST:case BOOLEAN_LIST:case STRING_LIST:case BINARY_LIST:case DATE_LIST:case FLOAT_LIST:case DOUBLE_LIST:writer.emitStatement(\"builder.addPersistedValueListProperty(\\\"%s\\\", %s, %s)\",fieldName,fieldType.getRealmType(),metadata.isElementNullable(field) ? \"!Property.REQUIRED\" : \"Property.REQUIRED\");\nbreak;\ncase BACKLINK:throw new IllegalArgumentException(\"LinkingObject field should not be added to metadata\");\ncase INTEGER:case FLOAT:case DOUBLE:case BOOLEAN:case STRING:case DATE:case BINARY:case REALM_INTEGER:String nullableFlag=(metadata.isNullable(field) ? \"!\" : \"\") + \"Property.REQUIRED\";\nString indexedFlag=(metadata.isIndexed(field) ? \"\" : \"!\") + \"Property.INDEXED\";\nString primaryKeyFlag=(metadata.isPrimaryKey(field) ? \"\" : \"!\") + \"Property.PRIMARY_KEY\";\nwriter.emitStatement(\"builder.addPersistedProperty(\\\"%s\\\", %s, %s, %s, %s)\",fieldName,fieldType.getRealmType(),primaryKeyFlag,indexedFlag,nullableFlag);\nbreak;\ndefault:throw new IllegalArgumentException(\"'fieldType' \" + fieldName + \" is not handled\");\n}\n}\nfor (Backlink backlink : metadata.getBacklinkFields()) {\nClassMetaData sourceClass=classCollection.getClassFromQualifiedName(backlink.getSourceClass());\nString targetField=backlink.getTargetField();\nString internalSourceField=sourceClass.getInternalFieldName(backlink.getSourceField());\nwriter.emitStatement(\"builder.addComputedLinkProperty(\\\"%s\\\", \\\"%s\\\", \\\"%s\\\")\",targetField,sourceClass.getInternalClassName(),internalSourceField);\n}\nwriter.emitStatement(\"return builder.build()\");\nwriter.endMethod().emitEmptyLine();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 318,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4597,
        "startLineNumber" : 721,
        "startColumnNumber" : 4,
        "endLineNumber" : 807,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void emitCreateExpectedObjectSchemaInfo(JavaWriter writer) throws IOException {\n  writer.beginMethod(\"OsObjectSchemaInfo\",\"createExpectedObjectSchemaInfo\",EnumSet.of(Modifier.PRIVATE,Modifier.STATIC));\n  int persistedFields=metadata.getFields().size();\n  int computedFields=metadata.getBacklinkFields().size();\n  writer.emitStatement(\"OsObjectSchemaInfo.Builder builder = new OsObjectSchemaInfo.Builder(\\\"%s\\\", %s, %s)\",internalClassName,persistedFields,computedFields);\n  for (  RealmFieldElement field : metadata.getFields()) {\n    String fieldName=field.getInternalFieldName();\n    Constants.RealmFieldType fieldType=getRealmTypeChecked(field);\nswitch (fieldType) {\ncase NOTYPE:{\n        break;\n      }\ncase OBJECT:{\n      String fieldTypeQualifiedName=Utils.getFieldTypeQualifiedName(field);\n      String internalClassName=classCollection.getClassFromQualifiedName(fieldTypeQualifiedName).getInternalClassName();\n      writer.emitStatement(\"builder.addPersistedLinkProperty(\\\"%s\\\", RealmFieldType.OBJECT, \\\"%s\\\")\",fieldName,internalClassName);\n      break;\n    }\ncase LIST:{\n    String genericTypeQualifiedName=Utils.getGenericTypeQualifiedName(field);\n    String internalClassName=classCollection.getClassFromQualifiedName(genericTypeQualifiedName).getInternalClassName();\n    writer.emitStatement(\"builder.addPersistedLinkProperty(\\\"%s\\\", RealmFieldType.LIST, \\\"%s\\\")\",fieldName,internalClassName);\n    break;\n  }\ncase INTEGER_LIST:case BOOLEAN_LIST:case STRING_LIST:case BINARY_LIST:case DATE_LIST:case FLOAT_LIST:case DOUBLE_LIST:writer.emitStatement(\"builder.addPersistedValueListProperty(\\\"%s\\\", %s, %s)\",fieldName,fieldType.getRealmType(),metadata.isElementNullable(field) ? \"!Property.REQUIRED\" : \"Property.REQUIRED\");\nbreak;\ncase BACKLINK:throw new IllegalArgumentException(\"LinkingObject field should not be added to metadata\");\ncase INTEGER:case FLOAT:case DOUBLE:case BOOLEAN:case STRING:case DATE:case BINARY:case REALM_INTEGER:String nullableFlag=(metadata.isNullable(field) ? \"!\" : \"\") + \"Property.REQUIRED\";\nString indexedFlag=(metadata.isIndexed(field) ? \"\" : \"!\") + \"Property.INDEXED\";\nString primaryKeyFlag=(metadata.isPrimaryKey(field) ? \"\" : \"!\") + \"Property.PRIMARY_KEY\";\nwriter.emitStatement(\"builder.addPersistedProperty(\\\"%s\\\", %s, %s, %s, %s)\",fieldName,fieldType.getRealmType(),primaryKeyFlag,indexedFlag,nullableFlag);\nbreak;\ndefault:throw new IllegalArgumentException(\"'fieldType' \" + fieldName + \" is not handled\");\n}\n}\nfor (Backlink backlink : metadata.getBacklinkFields()) {\nClassMetaData sourceClass=classCollection.getClassFromQualifiedName(backlink.getSourceClass());\nString targetField=backlink.getTargetField();\nString internalSourceField=sourceClass.getInternalFieldName(backlink.getSourceField());\nwriter.emitStatement(\"builder.addComputedLinkProperty(\\\"%s\\\", \\\"%s\\\", \\\"%s\\\")\",targetField,sourceClass.getInternalClassName(),internalSourceField);\n}\nwriter.emitStatement(\"return builder.build()\");\nwriter.endMethod().emitEmptyLine();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 328,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 782,
        "startColumnNumber" : 20,
        "endLineNumber" : 782,
        "endColumnNumber" : 104
      },
      "nodeContext" : "String nullableFlag=(metadata.isNullable(field) ? \"!\" : \"\") + \"Property.REQUIRED\";\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 15,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "io.realm.processor.ClassMetaData"
  }, {
    "nodeContext" : "metadata",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 783,
      "startColumnNumber" : 42,
      "endLineNumber" : 783,
      "endColumnNumber" : 50
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,expression]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 783,
        "startColumnNumber" : 42,
        "endLineNumber" : 783,
        "endColumnNumber" : 67
      },
      "nodeContext" : "metadata.isIndexed(field)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 783,
        "startColumnNumber" : 42,
        "endLineNumber" : 783,
        "endColumnNumber" : 78
      },
      "nodeContext" : "metadata.isIndexed(field) ? \"\" : \"!\"",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 783,
        "startColumnNumber" : 41,
        "endLineNumber" : 783,
        "endColumnNumber" : 79
      },
      "nodeContext" : "(metadata.isIndexed(field) ? \"\" : \"!\")",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 783,
        "startColumnNumber" : 41,
        "endLineNumber" : 783,
        "endColumnNumber" : 100
      },
      "nodeContext" : "(metadata.isIndexed(field) ? \"\" : \"!\") + \"Property.INDEXED\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 783,
        "startColumnNumber" : 27,
        "endLineNumber" : 783,
        "endColumnNumber" : 100
      },
      "nodeContext" : "indexedFlag=(metadata.isIndexed(field) ? \"\" : \"!\") + \"Property.INDEXED\"",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 783,
        "startColumnNumber" : 20,
        "endLineNumber" : 783,
        "endColumnNumber" : 101
      },
      "nodeContext" : "String indexedFlag=(metadata.isIndexed(field) ? \"\" : \"!\") + \"Property.INDEXED\";\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 15,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2843,
        "startLineNumber" : 741,
        "startColumnNumber" : 12,
        "endLineNumber" : 795,
        "endColumnNumber" : 13
      },
      "nodeContext" : "switch (fieldType) {\ncase NOTYPE:{\n    break;\n  }\ncase OBJECT:{\n  String fieldTypeQualifiedName=Utils.getFieldTypeQualifiedName(field);\n  String internalClassName=classCollection.getClassFromQualifiedName(fieldTypeQualifiedName).getInternalClassName();\n  writer.emitStatement(\"builder.addPersistedLinkProperty(\\\"%s\\\", RealmFieldType.OBJECT, \\\"%s\\\")\",fieldName,internalClassName);\n  break;\n}\ncase LIST:{\nString genericTypeQualifiedName=Utils.getGenericTypeQualifiedName(field);\nString internalClassName=classCollection.getClassFromQualifiedName(genericTypeQualifiedName).getInternalClassName();\nwriter.emitStatement(\"builder.addPersistedLinkProperty(\\\"%s\\\", RealmFieldType.LIST, \\\"%s\\\")\",fieldName,internalClassName);\nbreak;\n}\ncase INTEGER_LIST:case BOOLEAN_LIST:case STRING_LIST:case BINARY_LIST:case DATE_LIST:case FLOAT_LIST:case DOUBLE_LIST:writer.emitStatement(\"builder.addPersistedValueListProperty(\\\"%s\\\", %s, %s)\",fieldName,fieldType.getRealmType(),metadata.isElementNullable(field) ? \"!Property.REQUIRED\" : \"Property.REQUIRED\");\nbreak;\ncase BACKLINK:throw new IllegalArgumentException(\"LinkingObject field should not be added to metadata\");\ncase INTEGER:case FLOAT:case DOUBLE:case BOOLEAN:case STRING:case DATE:case BINARY:case REALM_INTEGER:String nullableFlag=(metadata.isNullable(field) ? \"!\" : \"\") + \"Property.REQUIRED\";\nString indexedFlag=(metadata.isIndexed(field) ? \"\" : \"!\") + \"Property.INDEXED\";\nString primaryKeyFlag=(metadata.isPrimaryKey(field) ? \"\" : \"!\") + \"Property.PRIMARY_KEY\";\nwriter.emitStatement(\"builder.addPersistedProperty(\\\"%s\\\", %s, %s, %s, %s)\",fieldName,fieldType.getRealmType(),primaryKeyFlag,indexedFlag,nullableFlag);\nbreak;\ndefault:throw new IllegalArgumentException(\"'fieldType' \" + fieldName + \" is not handled\");\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 189,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 3006,
        "startLineNumber" : 737,
        "startColumnNumber" : 61,
        "endLineNumber" : 796,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String fieldName=field.getInternalFieldName();\n  Constants.RealmFieldType fieldType=getRealmTypeChecked(field);\nswitch (fieldType) {\ncase NOTYPE:{\n      break;\n    }\ncase OBJECT:{\n    String fieldTypeQualifiedName=Utils.getFieldTypeQualifiedName(field);\n    String internalClassName=classCollection.getClassFromQualifiedName(fieldTypeQualifiedName).getInternalClassName();\n    writer.emitStatement(\"builder.addPersistedLinkProperty(\\\"%s\\\", RealmFieldType.OBJECT, \\\"%s\\\")\",fieldName,internalClassName);\n    break;\n  }\ncase LIST:{\n  String genericTypeQualifiedName=Utils.getGenericTypeQualifiedName(field);\n  String internalClassName=classCollection.getClassFromQualifiedName(genericTypeQualifiedName).getInternalClassName();\n  writer.emitStatement(\"builder.addPersistedLinkProperty(\\\"%s\\\", RealmFieldType.LIST, \\\"%s\\\")\",fieldName,internalClassName);\n  break;\n}\ncase INTEGER_LIST:case BOOLEAN_LIST:case STRING_LIST:case BINARY_LIST:case DATE_LIST:case FLOAT_LIST:case DOUBLE_LIST:writer.emitStatement(\"builder.addPersistedValueListProperty(\\\"%s\\\", %s, %s)\",fieldName,fieldType.getRealmType(),metadata.isElementNullable(field) ? \"!Property.REQUIRED\" : \"Property.REQUIRED\");\nbreak;\ncase BACKLINK:throw new IllegalArgumentException(\"LinkingObject field should not be added to metadata\");\ncase INTEGER:case FLOAT:case DOUBLE:case BOOLEAN:case STRING:case DATE:case BINARY:case REALM_INTEGER:String nullableFlag=(metadata.isNullable(field) ? \"!\" : \"\") + \"Property.REQUIRED\";\nString indexedFlag=(metadata.isIndexed(field) ? \"\" : \"!\") + \"Property.INDEXED\";\nString primaryKeyFlag=(metadata.isPrimaryKey(field) ? \"\" : \"!\") + \"Property.PRIMARY_KEY\";\nwriter.emitStatement(\"builder.addPersistedProperty(\\\"%s\\\", %s, %s, %s, %s)\",fieldName,fieldType.getRealmType(),primaryKeyFlag,indexedFlag,nullableFlag);\nbreak;\ndefault:throw new IllegalArgumentException(\"'fieldType' \" + fieldName + \" is not handled\");\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 208,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3059,
        "startLineNumber" : 737,
        "startColumnNumber" : 8,
        "endLineNumber" : 796,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (RealmFieldElement field : metadata.getFields()) {\n  String fieldName=field.getInternalFieldName();\n  Constants.RealmFieldType fieldType=getRealmTypeChecked(field);\nswitch (fieldType) {\ncase NOTYPE:{\n      break;\n    }\ncase OBJECT:{\n    String fieldTypeQualifiedName=Utils.getFieldTypeQualifiedName(field);\n    String internalClassName=classCollection.getClassFromQualifiedName(fieldTypeQualifiedName).getInternalClassName();\n    writer.emitStatement(\"builder.addPersistedLinkProperty(\\\"%s\\\", RealmFieldType.OBJECT, \\\"%s\\\")\",fieldName,internalClassName);\n    break;\n  }\ncase LIST:{\n  String genericTypeQualifiedName=Utils.getGenericTypeQualifiedName(field);\n  String internalClassName=classCollection.getClassFromQualifiedName(genericTypeQualifiedName).getInternalClassName();\n  writer.emitStatement(\"builder.addPersistedLinkProperty(\\\"%s\\\", RealmFieldType.LIST, \\\"%s\\\")\",fieldName,internalClassName);\n  break;\n}\ncase INTEGER_LIST:case BOOLEAN_LIST:case STRING_LIST:case BINARY_LIST:case DATE_LIST:case FLOAT_LIST:case DOUBLE_LIST:writer.emitStatement(\"builder.addPersistedValueListProperty(\\\"%s\\\", %s, %s)\",fieldName,fieldType.getRealmType(),metadata.isElementNullable(field) ? \"!Property.REQUIRED\" : \"Property.REQUIRED\");\nbreak;\ncase BACKLINK:throw new IllegalArgumentException(\"LinkingObject field should not be added to metadata\");\ncase INTEGER:case FLOAT:case DOUBLE:case BOOLEAN:case STRING:case DATE:case BINARY:case REALM_INTEGER:String nullableFlag=(metadata.isNullable(field) ? \"!\" : \"\") + \"Property.REQUIRED\";\nString indexedFlag=(metadata.isIndexed(field) ? \"\" : \"!\") + \"Property.INDEXED\";\nString primaryKeyFlag=(metadata.isPrimaryKey(field) ? \"\" : \"!\") + \"Property.PRIMARY_KEY\";\nwriter.emitStatement(\"builder.addPersistedProperty(\\\"%s\\\", %s, %s, %s, %s)\",fieldName,fieldType.getRealmType(),primaryKeyFlag,indexedFlag,nullableFlag);\nbreak;\ndefault:throw new IllegalArgumentException(\"'fieldType' \" + fieldName + \" is not handled\");\n}\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 216,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4511,
        "startLineNumber" : 721,
        "startColumnNumber" : 90,
        "endLineNumber" : 807,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  writer.beginMethod(\"OsObjectSchemaInfo\",\"createExpectedObjectSchemaInfo\",EnumSet.of(Modifier.PRIVATE,Modifier.STATIC));\n  int persistedFields=metadata.getFields().size();\n  int computedFields=metadata.getBacklinkFields().size();\n  writer.emitStatement(\"OsObjectSchemaInfo.Builder builder = new OsObjectSchemaInfo.Builder(\\\"%s\\\", %s, %s)\",internalClassName,persistedFields,computedFields);\n  for (  RealmFieldElement field : metadata.getFields()) {\n    String fieldName=field.getInternalFieldName();\n    Constants.RealmFieldType fieldType=getRealmTypeChecked(field);\nswitch (fieldType) {\ncase NOTYPE:{\n        break;\n      }\ncase OBJECT:{\n      String fieldTypeQualifiedName=Utils.getFieldTypeQualifiedName(field);\n      String internalClassName=classCollection.getClassFromQualifiedName(fieldTypeQualifiedName).getInternalClassName();\n      writer.emitStatement(\"builder.addPersistedLinkProperty(\\\"%s\\\", RealmFieldType.OBJECT, \\\"%s\\\")\",fieldName,internalClassName);\n      break;\n    }\ncase LIST:{\n    String genericTypeQualifiedName=Utils.getGenericTypeQualifiedName(field);\n    String internalClassName=classCollection.getClassFromQualifiedName(genericTypeQualifiedName).getInternalClassName();\n    writer.emitStatement(\"builder.addPersistedLinkProperty(\\\"%s\\\", RealmFieldType.LIST, \\\"%s\\\")\",fieldName,internalClassName);\n    break;\n  }\ncase INTEGER_LIST:case BOOLEAN_LIST:case STRING_LIST:case BINARY_LIST:case DATE_LIST:case FLOAT_LIST:case DOUBLE_LIST:writer.emitStatement(\"builder.addPersistedValueListProperty(\\\"%s\\\", %s, %s)\",fieldName,fieldType.getRealmType(),metadata.isElementNullable(field) ? \"!Property.REQUIRED\" : \"Property.REQUIRED\");\nbreak;\ncase BACKLINK:throw new IllegalArgumentException(\"LinkingObject field should not be added to metadata\");\ncase INTEGER:case FLOAT:case DOUBLE:case BOOLEAN:case STRING:case DATE:case BINARY:case REALM_INTEGER:String nullableFlag=(metadata.isNullable(field) ? \"!\" : \"\") + \"Property.REQUIRED\";\nString indexedFlag=(metadata.isIndexed(field) ? \"\" : \"!\") + \"Property.INDEXED\";\nString primaryKeyFlag=(metadata.isPrimaryKey(field) ? \"\" : \"!\") + \"Property.PRIMARY_KEY\";\nwriter.emitStatement(\"builder.addPersistedProperty(\\\"%s\\\", %s, %s, %s, %s)\",fieldName,fieldType.getRealmType(),primaryKeyFlag,indexedFlag,nullableFlag);\nbreak;\ndefault:throw new IllegalArgumentException(\"'fieldType' \" + fieldName + \" is not handled\");\n}\n}\nfor (Backlink backlink : metadata.getBacklinkFields()) {\nClassMetaData sourceClass=classCollection.getClassFromQualifiedName(backlink.getSourceClass());\nString targetField=backlink.getTargetField();\nString internalSourceField=sourceClass.getInternalFieldName(backlink.getSourceField());\nwriter.emitStatement(\"builder.addComputedLinkProperty(\\\"%s\\\", \\\"%s\\\", \\\"%s\\\")\",targetField,sourceClass.getInternalClassName(),internalSourceField);\n}\nwriter.emitStatement(\"return builder.build()\");\nwriter.endMethod().emitEmptyLine();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 318,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4597,
        "startLineNumber" : 721,
        "startColumnNumber" : 4,
        "endLineNumber" : 807,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void emitCreateExpectedObjectSchemaInfo(JavaWriter writer) throws IOException {\n  writer.beginMethod(\"OsObjectSchemaInfo\",\"createExpectedObjectSchemaInfo\",EnumSet.of(Modifier.PRIVATE,Modifier.STATIC));\n  int persistedFields=metadata.getFields().size();\n  int computedFields=metadata.getBacklinkFields().size();\n  writer.emitStatement(\"OsObjectSchemaInfo.Builder builder = new OsObjectSchemaInfo.Builder(\\\"%s\\\", %s, %s)\",internalClassName,persistedFields,computedFields);\n  for (  RealmFieldElement field : metadata.getFields()) {\n    String fieldName=field.getInternalFieldName();\n    Constants.RealmFieldType fieldType=getRealmTypeChecked(field);\nswitch (fieldType) {\ncase NOTYPE:{\n        break;\n      }\ncase OBJECT:{\n      String fieldTypeQualifiedName=Utils.getFieldTypeQualifiedName(field);\n      String internalClassName=classCollection.getClassFromQualifiedName(fieldTypeQualifiedName).getInternalClassName();\n      writer.emitStatement(\"builder.addPersistedLinkProperty(\\\"%s\\\", RealmFieldType.OBJECT, \\\"%s\\\")\",fieldName,internalClassName);\n      break;\n    }\ncase LIST:{\n    String genericTypeQualifiedName=Utils.getGenericTypeQualifiedName(field);\n    String internalClassName=classCollection.getClassFromQualifiedName(genericTypeQualifiedName).getInternalClassName();\n    writer.emitStatement(\"builder.addPersistedLinkProperty(\\\"%s\\\", RealmFieldType.LIST, \\\"%s\\\")\",fieldName,internalClassName);\n    break;\n  }\ncase INTEGER_LIST:case BOOLEAN_LIST:case STRING_LIST:case BINARY_LIST:case DATE_LIST:case FLOAT_LIST:case DOUBLE_LIST:writer.emitStatement(\"builder.addPersistedValueListProperty(\\\"%s\\\", %s, %s)\",fieldName,fieldType.getRealmType(),metadata.isElementNullable(field) ? \"!Property.REQUIRED\" : \"Property.REQUIRED\");\nbreak;\ncase BACKLINK:throw new IllegalArgumentException(\"LinkingObject field should not be added to metadata\");\ncase INTEGER:case FLOAT:case DOUBLE:case BOOLEAN:case STRING:case DATE:case BINARY:case REALM_INTEGER:String nullableFlag=(metadata.isNullable(field) ? \"!\" : \"\") + \"Property.REQUIRED\";\nString indexedFlag=(metadata.isIndexed(field) ? \"\" : \"!\") + \"Property.INDEXED\";\nString primaryKeyFlag=(metadata.isPrimaryKey(field) ? \"\" : \"!\") + \"Property.PRIMARY_KEY\";\nwriter.emitStatement(\"builder.addPersistedProperty(\\\"%s\\\", %s, %s, %s, %s)\",fieldName,fieldType.getRealmType(),primaryKeyFlag,indexedFlag,nullableFlag);\nbreak;\ndefault:throw new IllegalArgumentException(\"'fieldType' \" + fieldName + \" is not handled\");\n}\n}\nfor (Backlink backlink : metadata.getBacklinkFields()) {\nClassMetaData sourceClass=classCollection.getClassFromQualifiedName(backlink.getSourceClass());\nString targetField=backlink.getTargetField();\nString internalSourceField=sourceClass.getInternalFieldName(backlink.getSourceField());\nwriter.emitStatement(\"builder.addComputedLinkProperty(\\\"%s\\\", \\\"%s\\\", \\\"%s\\\")\",targetField,sourceClass.getInternalClassName(),internalSourceField);\n}\nwriter.emitStatement(\"return builder.build()\");\nwriter.endMethod().emitEmptyLine();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 328,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 783,
        "startColumnNumber" : 20,
        "endLineNumber" : 783,
        "endColumnNumber" : 101
      },
      "nodeContext" : "String indexedFlag=(metadata.isIndexed(field) ? \"\" : \"!\") + \"Property.INDEXED\";\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 15,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "io.realm.processor.ClassMetaData"
  }, {
    "nodeContext" : "metadata",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 784,
      "startColumnNumber" : 45,
      "endLineNumber" : 784,
      "endColumnNumber" : 53
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 784,
        "startColumnNumber" : 45,
        "endLineNumber" : 784,
        "endColumnNumber" : 73
      },
      "nodeContext" : "metadata.isPrimaryKey(field)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 784,
        "startColumnNumber" : 45,
        "endLineNumber" : 784,
        "endColumnNumber" : 84
      },
      "nodeContext" : "metadata.isPrimaryKey(field) ? \"\" : \"!\"",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 784,
        "startColumnNumber" : 44,
        "endLineNumber" : 784,
        "endColumnNumber" : 85
      },
      "nodeContext" : "(metadata.isPrimaryKey(field) ? \"\" : \"!\")",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 784,
        "startColumnNumber" : 44,
        "endLineNumber" : 784,
        "endColumnNumber" : 110
      },
      "nodeContext" : "(metadata.isPrimaryKey(field) ? \"\" : \"!\") + \"Property.PRIMARY_KEY\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 784,
        "startColumnNumber" : 27,
        "endLineNumber" : 784,
        "endColumnNumber" : 110
      },
      "nodeContext" : "primaryKeyFlag=(metadata.isPrimaryKey(field) ? \"\" : \"!\") + \"Property.PRIMARY_KEY\"",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 784,
        "startColumnNumber" : 20,
        "endLineNumber" : 784,
        "endColumnNumber" : 111
      },
      "nodeContext" : "String primaryKeyFlag=(metadata.isPrimaryKey(field) ? \"\" : \"!\") + \"Property.PRIMARY_KEY\";\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 15,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2843,
        "startLineNumber" : 741,
        "startColumnNumber" : 12,
        "endLineNumber" : 795,
        "endColumnNumber" : 13
      },
      "nodeContext" : "switch (fieldType) {\ncase NOTYPE:{\n    break;\n  }\ncase OBJECT:{\n  String fieldTypeQualifiedName=Utils.getFieldTypeQualifiedName(field);\n  String internalClassName=classCollection.getClassFromQualifiedName(fieldTypeQualifiedName).getInternalClassName();\n  writer.emitStatement(\"builder.addPersistedLinkProperty(\\\"%s\\\", RealmFieldType.OBJECT, \\\"%s\\\")\",fieldName,internalClassName);\n  break;\n}\ncase LIST:{\nString genericTypeQualifiedName=Utils.getGenericTypeQualifiedName(field);\nString internalClassName=classCollection.getClassFromQualifiedName(genericTypeQualifiedName).getInternalClassName();\nwriter.emitStatement(\"builder.addPersistedLinkProperty(\\\"%s\\\", RealmFieldType.LIST, \\\"%s\\\")\",fieldName,internalClassName);\nbreak;\n}\ncase INTEGER_LIST:case BOOLEAN_LIST:case STRING_LIST:case BINARY_LIST:case DATE_LIST:case FLOAT_LIST:case DOUBLE_LIST:writer.emitStatement(\"builder.addPersistedValueListProperty(\\\"%s\\\", %s, %s)\",fieldName,fieldType.getRealmType(),metadata.isElementNullable(field) ? \"!Property.REQUIRED\" : \"Property.REQUIRED\");\nbreak;\ncase BACKLINK:throw new IllegalArgumentException(\"LinkingObject field should not be added to metadata\");\ncase INTEGER:case FLOAT:case DOUBLE:case BOOLEAN:case STRING:case DATE:case BINARY:case REALM_INTEGER:String nullableFlag=(metadata.isNullable(field) ? \"!\" : \"\") + \"Property.REQUIRED\";\nString indexedFlag=(metadata.isIndexed(field) ? \"\" : \"!\") + \"Property.INDEXED\";\nString primaryKeyFlag=(metadata.isPrimaryKey(field) ? \"\" : \"!\") + \"Property.PRIMARY_KEY\";\nwriter.emitStatement(\"builder.addPersistedProperty(\\\"%s\\\", %s, %s, %s, %s)\",fieldName,fieldType.getRealmType(),primaryKeyFlag,indexedFlag,nullableFlag);\nbreak;\ndefault:throw new IllegalArgumentException(\"'fieldType' \" + fieldName + \" is not handled\");\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 189,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 3006,
        "startLineNumber" : 737,
        "startColumnNumber" : 61,
        "endLineNumber" : 796,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String fieldName=field.getInternalFieldName();\n  Constants.RealmFieldType fieldType=getRealmTypeChecked(field);\nswitch (fieldType) {\ncase NOTYPE:{\n      break;\n    }\ncase OBJECT:{\n    String fieldTypeQualifiedName=Utils.getFieldTypeQualifiedName(field);\n    String internalClassName=classCollection.getClassFromQualifiedName(fieldTypeQualifiedName).getInternalClassName();\n    writer.emitStatement(\"builder.addPersistedLinkProperty(\\\"%s\\\", RealmFieldType.OBJECT, \\\"%s\\\")\",fieldName,internalClassName);\n    break;\n  }\ncase LIST:{\n  String genericTypeQualifiedName=Utils.getGenericTypeQualifiedName(field);\n  String internalClassName=classCollection.getClassFromQualifiedName(genericTypeQualifiedName).getInternalClassName();\n  writer.emitStatement(\"builder.addPersistedLinkProperty(\\\"%s\\\", RealmFieldType.LIST, \\\"%s\\\")\",fieldName,internalClassName);\n  break;\n}\ncase INTEGER_LIST:case BOOLEAN_LIST:case STRING_LIST:case BINARY_LIST:case DATE_LIST:case FLOAT_LIST:case DOUBLE_LIST:writer.emitStatement(\"builder.addPersistedValueListProperty(\\\"%s\\\", %s, %s)\",fieldName,fieldType.getRealmType(),metadata.isElementNullable(field) ? \"!Property.REQUIRED\" : \"Property.REQUIRED\");\nbreak;\ncase BACKLINK:throw new IllegalArgumentException(\"LinkingObject field should not be added to metadata\");\ncase INTEGER:case FLOAT:case DOUBLE:case BOOLEAN:case STRING:case DATE:case BINARY:case REALM_INTEGER:String nullableFlag=(metadata.isNullable(field) ? \"!\" : \"\") + \"Property.REQUIRED\";\nString indexedFlag=(metadata.isIndexed(field) ? \"\" : \"!\") + \"Property.INDEXED\";\nString primaryKeyFlag=(metadata.isPrimaryKey(field) ? \"\" : \"!\") + \"Property.PRIMARY_KEY\";\nwriter.emitStatement(\"builder.addPersistedProperty(\\\"%s\\\", %s, %s, %s, %s)\",fieldName,fieldType.getRealmType(),primaryKeyFlag,indexedFlag,nullableFlag);\nbreak;\ndefault:throw new IllegalArgumentException(\"'fieldType' \" + fieldName + \" is not handled\");\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 208,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3059,
        "startLineNumber" : 737,
        "startColumnNumber" : 8,
        "endLineNumber" : 796,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (RealmFieldElement field : metadata.getFields()) {\n  String fieldName=field.getInternalFieldName();\n  Constants.RealmFieldType fieldType=getRealmTypeChecked(field);\nswitch (fieldType) {\ncase NOTYPE:{\n      break;\n    }\ncase OBJECT:{\n    String fieldTypeQualifiedName=Utils.getFieldTypeQualifiedName(field);\n    String internalClassName=classCollection.getClassFromQualifiedName(fieldTypeQualifiedName).getInternalClassName();\n    writer.emitStatement(\"builder.addPersistedLinkProperty(\\\"%s\\\", RealmFieldType.OBJECT, \\\"%s\\\")\",fieldName,internalClassName);\n    break;\n  }\ncase LIST:{\n  String genericTypeQualifiedName=Utils.getGenericTypeQualifiedName(field);\n  String internalClassName=classCollection.getClassFromQualifiedName(genericTypeQualifiedName).getInternalClassName();\n  writer.emitStatement(\"builder.addPersistedLinkProperty(\\\"%s\\\", RealmFieldType.LIST, \\\"%s\\\")\",fieldName,internalClassName);\n  break;\n}\ncase INTEGER_LIST:case BOOLEAN_LIST:case STRING_LIST:case BINARY_LIST:case DATE_LIST:case FLOAT_LIST:case DOUBLE_LIST:writer.emitStatement(\"builder.addPersistedValueListProperty(\\\"%s\\\", %s, %s)\",fieldName,fieldType.getRealmType(),metadata.isElementNullable(field) ? \"!Property.REQUIRED\" : \"Property.REQUIRED\");\nbreak;\ncase BACKLINK:throw new IllegalArgumentException(\"LinkingObject field should not be added to metadata\");\ncase INTEGER:case FLOAT:case DOUBLE:case BOOLEAN:case STRING:case DATE:case BINARY:case REALM_INTEGER:String nullableFlag=(metadata.isNullable(field) ? \"!\" : \"\") + \"Property.REQUIRED\";\nString indexedFlag=(metadata.isIndexed(field) ? \"\" : \"!\") + \"Property.INDEXED\";\nString primaryKeyFlag=(metadata.isPrimaryKey(field) ? \"\" : \"!\") + \"Property.PRIMARY_KEY\";\nwriter.emitStatement(\"builder.addPersistedProperty(\\\"%s\\\", %s, %s, %s, %s)\",fieldName,fieldType.getRealmType(),primaryKeyFlag,indexedFlag,nullableFlag);\nbreak;\ndefault:throw new IllegalArgumentException(\"'fieldType' \" + fieldName + \" is not handled\");\n}\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 216,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4511,
        "startLineNumber" : 721,
        "startColumnNumber" : 90,
        "endLineNumber" : 807,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  writer.beginMethod(\"OsObjectSchemaInfo\",\"createExpectedObjectSchemaInfo\",EnumSet.of(Modifier.PRIVATE,Modifier.STATIC));\n  int persistedFields=metadata.getFields().size();\n  int computedFields=metadata.getBacklinkFields().size();\n  writer.emitStatement(\"OsObjectSchemaInfo.Builder builder = new OsObjectSchemaInfo.Builder(\\\"%s\\\", %s, %s)\",internalClassName,persistedFields,computedFields);\n  for (  RealmFieldElement field : metadata.getFields()) {\n    String fieldName=field.getInternalFieldName();\n    Constants.RealmFieldType fieldType=getRealmTypeChecked(field);\nswitch (fieldType) {\ncase NOTYPE:{\n        break;\n      }\ncase OBJECT:{\n      String fieldTypeQualifiedName=Utils.getFieldTypeQualifiedName(field);\n      String internalClassName=classCollection.getClassFromQualifiedName(fieldTypeQualifiedName).getInternalClassName();\n      writer.emitStatement(\"builder.addPersistedLinkProperty(\\\"%s\\\", RealmFieldType.OBJECT, \\\"%s\\\")\",fieldName,internalClassName);\n      break;\n    }\ncase LIST:{\n    String genericTypeQualifiedName=Utils.getGenericTypeQualifiedName(field);\n    String internalClassName=classCollection.getClassFromQualifiedName(genericTypeQualifiedName).getInternalClassName();\n    writer.emitStatement(\"builder.addPersistedLinkProperty(\\\"%s\\\", RealmFieldType.LIST, \\\"%s\\\")\",fieldName,internalClassName);\n    break;\n  }\ncase INTEGER_LIST:case BOOLEAN_LIST:case STRING_LIST:case BINARY_LIST:case DATE_LIST:case FLOAT_LIST:case DOUBLE_LIST:writer.emitStatement(\"builder.addPersistedValueListProperty(\\\"%s\\\", %s, %s)\",fieldName,fieldType.getRealmType(),metadata.isElementNullable(field) ? \"!Property.REQUIRED\" : \"Property.REQUIRED\");\nbreak;\ncase BACKLINK:throw new IllegalArgumentException(\"LinkingObject field should not be added to metadata\");\ncase INTEGER:case FLOAT:case DOUBLE:case BOOLEAN:case STRING:case DATE:case BINARY:case REALM_INTEGER:String nullableFlag=(metadata.isNullable(field) ? \"!\" : \"\") + \"Property.REQUIRED\";\nString indexedFlag=(metadata.isIndexed(field) ? \"\" : \"!\") + \"Property.INDEXED\";\nString primaryKeyFlag=(metadata.isPrimaryKey(field) ? \"\" : \"!\") + \"Property.PRIMARY_KEY\";\nwriter.emitStatement(\"builder.addPersistedProperty(\\\"%s\\\", %s, %s, %s, %s)\",fieldName,fieldType.getRealmType(),primaryKeyFlag,indexedFlag,nullableFlag);\nbreak;\ndefault:throw new IllegalArgumentException(\"'fieldType' \" + fieldName + \" is not handled\");\n}\n}\nfor (Backlink backlink : metadata.getBacklinkFields()) {\nClassMetaData sourceClass=classCollection.getClassFromQualifiedName(backlink.getSourceClass());\nString targetField=backlink.getTargetField();\nString internalSourceField=sourceClass.getInternalFieldName(backlink.getSourceField());\nwriter.emitStatement(\"builder.addComputedLinkProperty(\\\"%s\\\", \\\"%s\\\", \\\"%s\\\")\",targetField,sourceClass.getInternalClassName(),internalSourceField);\n}\nwriter.emitStatement(\"return builder.build()\");\nwriter.endMethod().emitEmptyLine();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 318,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4597,
        "startLineNumber" : 721,
        "startColumnNumber" : 4,
        "endLineNumber" : 807,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void emitCreateExpectedObjectSchemaInfo(JavaWriter writer) throws IOException {\n  writer.beginMethod(\"OsObjectSchemaInfo\",\"createExpectedObjectSchemaInfo\",EnumSet.of(Modifier.PRIVATE,Modifier.STATIC));\n  int persistedFields=metadata.getFields().size();\n  int computedFields=metadata.getBacklinkFields().size();\n  writer.emitStatement(\"OsObjectSchemaInfo.Builder builder = new OsObjectSchemaInfo.Builder(\\\"%s\\\", %s, %s)\",internalClassName,persistedFields,computedFields);\n  for (  RealmFieldElement field : metadata.getFields()) {\n    String fieldName=field.getInternalFieldName();\n    Constants.RealmFieldType fieldType=getRealmTypeChecked(field);\nswitch (fieldType) {\ncase NOTYPE:{\n        break;\n      }\ncase OBJECT:{\n      String fieldTypeQualifiedName=Utils.getFieldTypeQualifiedName(field);\n      String internalClassName=classCollection.getClassFromQualifiedName(fieldTypeQualifiedName).getInternalClassName();\n      writer.emitStatement(\"builder.addPersistedLinkProperty(\\\"%s\\\", RealmFieldType.OBJECT, \\\"%s\\\")\",fieldName,internalClassName);\n      break;\n    }\ncase LIST:{\n    String genericTypeQualifiedName=Utils.getGenericTypeQualifiedName(field);\n    String internalClassName=classCollection.getClassFromQualifiedName(genericTypeQualifiedName).getInternalClassName();\n    writer.emitStatement(\"builder.addPersistedLinkProperty(\\\"%s\\\", RealmFieldType.LIST, \\\"%s\\\")\",fieldName,internalClassName);\n    break;\n  }\ncase INTEGER_LIST:case BOOLEAN_LIST:case STRING_LIST:case BINARY_LIST:case DATE_LIST:case FLOAT_LIST:case DOUBLE_LIST:writer.emitStatement(\"builder.addPersistedValueListProperty(\\\"%s\\\", %s, %s)\",fieldName,fieldType.getRealmType(),metadata.isElementNullable(field) ? \"!Property.REQUIRED\" : \"Property.REQUIRED\");\nbreak;\ncase BACKLINK:throw new IllegalArgumentException(\"LinkingObject field should not be added to metadata\");\ncase INTEGER:case FLOAT:case DOUBLE:case BOOLEAN:case STRING:case DATE:case BINARY:case REALM_INTEGER:String nullableFlag=(metadata.isNullable(field) ? \"!\" : \"\") + \"Property.REQUIRED\";\nString indexedFlag=(metadata.isIndexed(field) ? \"\" : \"!\") + \"Property.INDEXED\";\nString primaryKeyFlag=(metadata.isPrimaryKey(field) ? \"\" : \"!\") + \"Property.PRIMARY_KEY\";\nwriter.emitStatement(\"builder.addPersistedProperty(\\\"%s\\\", %s, %s, %s, %s)\",fieldName,fieldType.getRealmType(),primaryKeyFlag,indexedFlag,nullableFlag);\nbreak;\ndefault:throw new IllegalArgumentException(\"'fieldType' \" + fieldName + \" is not handled\");\n}\n}\nfor (Backlink backlink : metadata.getBacklinkFields()) {\nClassMetaData sourceClass=classCollection.getClassFromQualifiedName(backlink.getSourceClass());\nString targetField=backlink.getTargetField();\nString internalSourceField=sourceClass.getInternalFieldName(backlink.getSourceField());\nwriter.emitStatement(\"builder.addComputedLinkProperty(\\\"%s\\\", \\\"%s\\\", \\\"%s\\\")\",targetField,sourceClass.getInternalClassName(),internalSourceField);\n}\nwriter.emitStatement(\"return builder.build()\");\nwriter.endMethod().emitEmptyLine();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 328,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 784,
        "startColumnNumber" : 20,
        "endLineNumber" : 784,
        "endColumnNumber" : 111
      },
      "nodeContext" : "String primaryKeyFlag=(metadata.isPrimaryKey(field) ? \"\" : \"!\") + \"Property.PRIMARY_KEY\";\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 15,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "io.realm.processor.ClassMetaData"
  }, {
    "nodeContext" : "metadata",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 797,
      "startColumnNumber" : 32,
      "endLineNumber" : 797,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 797,
        "startColumnNumber" : 32,
        "endLineNumber" : 797,
        "endColumnNumber" : 60
      },
      "nodeContext" : "metadata.getBacklinkFields()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 569,
        "startLineNumber" : 797,
        "startColumnNumber" : 8,
        "endLineNumber" : 803,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Backlink backlink : metadata.getBacklinkFields()) {\n  ClassMetaData sourceClass=classCollection.getClassFromQualifiedName(backlink.getSourceClass());\n  String targetField=backlink.getTargetField();\n  String internalSourceField=sourceClass.getInternalFieldName(backlink.getSourceField());\n  writer.emitStatement(\"builder.addComputedLinkProperty(\\\"%s\\\", \\\"%s\\\", \\\"%s\\\")\",targetField,sourceClass.getInternalClassName(),internalSourceField);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 49,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4511,
        "startLineNumber" : 721,
        "startColumnNumber" : 90,
        "endLineNumber" : 807,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  writer.beginMethod(\"OsObjectSchemaInfo\",\"createExpectedObjectSchemaInfo\",EnumSet.of(Modifier.PRIVATE,Modifier.STATIC));\n  int persistedFields=metadata.getFields().size();\n  int computedFields=metadata.getBacklinkFields().size();\n  writer.emitStatement(\"OsObjectSchemaInfo.Builder builder = new OsObjectSchemaInfo.Builder(\\\"%s\\\", %s, %s)\",internalClassName,persistedFields,computedFields);\n  for (  RealmFieldElement field : metadata.getFields()) {\n    String fieldName=field.getInternalFieldName();\n    Constants.RealmFieldType fieldType=getRealmTypeChecked(field);\nswitch (fieldType) {\ncase NOTYPE:{\n        break;\n      }\ncase OBJECT:{\n      String fieldTypeQualifiedName=Utils.getFieldTypeQualifiedName(field);\n      String internalClassName=classCollection.getClassFromQualifiedName(fieldTypeQualifiedName).getInternalClassName();\n      writer.emitStatement(\"builder.addPersistedLinkProperty(\\\"%s\\\", RealmFieldType.OBJECT, \\\"%s\\\")\",fieldName,internalClassName);\n      break;\n    }\ncase LIST:{\n    String genericTypeQualifiedName=Utils.getGenericTypeQualifiedName(field);\n    String internalClassName=classCollection.getClassFromQualifiedName(genericTypeQualifiedName).getInternalClassName();\n    writer.emitStatement(\"builder.addPersistedLinkProperty(\\\"%s\\\", RealmFieldType.LIST, \\\"%s\\\")\",fieldName,internalClassName);\n    break;\n  }\ncase INTEGER_LIST:case BOOLEAN_LIST:case STRING_LIST:case BINARY_LIST:case DATE_LIST:case FLOAT_LIST:case DOUBLE_LIST:writer.emitStatement(\"builder.addPersistedValueListProperty(\\\"%s\\\", %s, %s)\",fieldName,fieldType.getRealmType(),metadata.isElementNullable(field) ? \"!Property.REQUIRED\" : \"Property.REQUIRED\");\nbreak;\ncase BACKLINK:throw new IllegalArgumentException(\"LinkingObject field should not be added to metadata\");\ncase INTEGER:case FLOAT:case DOUBLE:case BOOLEAN:case STRING:case DATE:case BINARY:case REALM_INTEGER:String nullableFlag=(metadata.isNullable(field) ? \"!\" : \"\") + \"Property.REQUIRED\";\nString indexedFlag=(metadata.isIndexed(field) ? \"\" : \"!\") + \"Property.INDEXED\";\nString primaryKeyFlag=(metadata.isPrimaryKey(field) ? \"\" : \"!\") + \"Property.PRIMARY_KEY\";\nwriter.emitStatement(\"builder.addPersistedProperty(\\\"%s\\\", %s, %s, %s, %s)\",fieldName,fieldType.getRealmType(),primaryKeyFlag,indexedFlag,nullableFlag);\nbreak;\ndefault:throw new IllegalArgumentException(\"'fieldType' \" + fieldName + \" is not handled\");\n}\n}\nfor (Backlink backlink : metadata.getBacklinkFields()) {\nClassMetaData sourceClass=classCollection.getClassFromQualifiedName(backlink.getSourceClass());\nString targetField=backlink.getTargetField();\nString internalSourceField=sourceClass.getInternalFieldName(backlink.getSourceField());\nwriter.emitStatement(\"builder.addComputedLinkProperty(\\\"%s\\\", \\\"%s\\\", \\\"%s\\\")\",targetField,sourceClass.getInternalClassName(),internalSourceField);\n}\nwriter.emitStatement(\"return builder.build()\");\nwriter.endMethod().emitEmptyLine();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 318,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4597,
        "startLineNumber" : 721,
        "startColumnNumber" : 4,
        "endLineNumber" : 807,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void emitCreateExpectedObjectSchemaInfo(JavaWriter writer) throws IOException {\n  writer.beginMethod(\"OsObjectSchemaInfo\",\"createExpectedObjectSchemaInfo\",EnumSet.of(Modifier.PRIVATE,Modifier.STATIC));\n  int persistedFields=metadata.getFields().size();\n  int computedFields=metadata.getBacklinkFields().size();\n  writer.emitStatement(\"OsObjectSchemaInfo.Builder builder = new OsObjectSchemaInfo.Builder(\\\"%s\\\", %s, %s)\",internalClassName,persistedFields,computedFields);\n  for (  RealmFieldElement field : metadata.getFields()) {\n    String fieldName=field.getInternalFieldName();\n    Constants.RealmFieldType fieldType=getRealmTypeChecked(field);\nswitch (fieldType) {\ncase NOTYPE:{\n        break;\n      }\ncase OBJECT:{\n      String fieldTypeQualifiedName=Utils.getFieldTypeQualifiedName(field);\n      String internalClassName=classCollection.getClassFromQualifiedName(fieldTypeQualifiedName).getInternalClassName();\n      writer.emitStatement(\"builder.addPersistedLinkProperty(\\\"%s\\\", RealmFieldType.OBJECT, \\\"%s\\\")\",fieldName,internalClassName);\n      break;\n    }\ncase LIST:{\n    String genericTypeQualifiedName=Utils.getGenericTypeQualifiedName(field);\n    String internalClassName=classCollection.getClassFromQualifiedName(genericTypeQualifiedName).getInternalClassName();\n    writer.emitStatement(\"builder.addPersistedLinkProperty(\\\"%s\\\", RealmFieldType.LIST, \\\"%s\\\")\",fieldName,internalClassName);\n    break;\n  }\ncase INTEGER_LIST:case BOOLEAN_LIST:case STRING_LIST:case BINARY_LIST:case DATE_LIST:case FLOAT_LIST:case DOUBLE_LIST:writer.emitStatement(\"builder.addPersistedValueListProperty(\\\"%s\\\", %s, %s)\",fieldName,fieldType.getRealmType(),metadata.isElementNullable(field) ? \"!Property.REQUIRED\" : \"Property.REQUIRED\");\nbreak;\ncase BACKLINK:throw new IllegalArgumentException(\"LinkingObject field should not be added to metadata\");\ncase INTEGER:case FLOAT:case DOUBLE:case BOOLEAN:case STRING:case DATE:case BINARY:case REALM_INTEGER:String nullableFlag=(metadata.isNullable(field) ? \"!\" : \"\") + \"Property.REQUIRED\";\nString indexedFlag=(metadata.isIndexed(field) ? \"\" : \"!\") + \"Property.INDEXED\";\nString primaryKeyFlag=(metadata.isPrimaryKey(field) ? \"\" : \"!\") + \"Property.PRIMARY_KEY\";\nwriter.emitStatement(\"builder.addPersistedProperty(\\\"%s\\\", %s, %s, %s, %s)\",fieldName,fieldType.getRealmType(),primaryKeyFlag,indexedFlag,nullableFlag);\nbreak;\ndefault:throw new IllegalArgumentException(\"'fieldType' \" + fieldName + \" is not handled\");\n}\n}\nfor (Backlink backlink : metadata.getBacklinkFields()) {\nClassMetaData sourceClass=classCollection.getClassFromQualifiedName(backlink.getSourceClass());\nString targetField=backlink.getTargetField();\nString internalSourceField=sourceClass.getInternalFieldName(backlink.getSourceField());\nwriter.emitStatement(\"builder.addComputedLinkProperty(\\\"%s\\\", \\\"%s\\\", \\\"%s\\\")\",targetField,sourceClass.getInternalClassName(),internalSourceField);\n}\nwriter.emitStatement(\"return builder.build()\");\nwriter.endMethod().emitEmptyLine();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 328,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 797,
        "startColumnNumber" : 32,
        "endLineNumber" : 797,
        "endColumnNumber" : 60
      },
      "nodeContext" : "metadata.getBacklinkFields()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "io.realm.processor.ClassMetaData"
  } ],
  "positionList" : [ {
    "charLength" : 8,
    "startLineNumber" : 729,
    "startColumnNumber" : 30,
    "endLineNumber" : 729,
    "endColumnNumber" : 38
  }, {
    "charLength" : 8,
    "startLineNumber" : 730,
    "startColumnNumber" : 29,
    "endLineNumber" : 730,
    "endColumnNumber" : 37
  }, {
    "charLength" : 8,
    "startLineNumber" : 737,
    "startColumnNumber" : 39,
    "endLineNumber" : 737,
    "endColumnNumber" : 47
  }, {
    "charLength" : 8,
    "startLineNumber" : 768,
    "startColumnNumber" : 65,
    "endLineNumber" : 768,
    "endColumnNumber" : 73
  }, {
    "charLength" : 8,
    "startLineNumber" : 782,
    "startColumnNumber" : 43,
    "endLineNumber" : 782,
    "endColumnNumber" : 51
  }, {
    "charLength" : 8,
    "startLineNumber" : 783,
    "startColumnNumber" : 42,
    "endLineNumber" : 783,
    "endColumnNumber" : 50
  }, {
    "charLength" : 8,
    "startLineNumber" : 784,
    "startColumnNumber" : 45,
    "endLineNumber" : 784,
    "endColumnNumber" : 53
  }, {
    "charLength" : 8,
    "startLineNumber" : 797,
    "startColumnNumber" : 32,
    "endLineNumber" : 797,
    "endColumnNumber" : 40
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 9
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 9
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 9
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 9
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 9
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 9
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 9
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 9
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 9
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 2
  } ]
}