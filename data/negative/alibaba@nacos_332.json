{
  "id" : 332,
  "expression" : "getInt(\"defaultMaxAggrSize\",defaultMaxAggrSize)",
  "projectName" : "alibaba@nacos",
  "commitID" : "4e7346db1d6657ffe07c96bebd2d348229c2812f",
  "filePath" : "/config/src/main/java/com/alibaba/nacos/config/server/utils/PropertyUtil.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "getInt(\"defaultMaxAggrSize\",defaultMaxAggrSize)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 48,
      "startLineNumber" : 272,
      "startColumnNumber" : 34,
      "endLineNumber" : 272,
      "endColumnNumber" : 82
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 272,
        "startColumnNumber" : 12,
        "endLineNumber" : 272,
        "endColumnNumber" : 83
      },
      "nodeContext" : "setDefaultMaxAggrSize(getInt(\"defaultMaxAggrSize\",defaultMaxAggrSize))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 272,
        "startColumnNumber" : 12,
        "endLineNumber" : 272,
        "endColumnNumber" : 84
      },
      "nodeContext" : "setDefaultMaxAggrSize(getInt(\"defaultMaxAggrSize\",defaultMaxAggrSize));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2829,
        "startLineNumber" : 253,
        "startColumnNumber" : 12,
        "endLineNumber" : 295,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  setNotifyConnectTimeout(Integer.parseInt(EnvUtil.getProperty(\"notifyConnectTimeout\",\"100\")));\n  LOGGER.info(\"notifyConnectTimeout:{}\",notifyConnectTimeout);\n  setNotifySocketTimeout(Integer.parseInt(EnvUtil.getProperty(\"notifySocketTimeout\",\"200\")));\n  LOGGER.info(\"notifySocketTimeout:{}\",notifySocketTimeout);\n  setHealthCheck(Boolean.parseBoolean(EnvUtil.getProperty(\"isHealthCheck\",\"true\")));\n  LOGGER.info(\"isHealthCheck:{}\",isHealthCheck);\n  setMaxHealthCheckFailCount(Integer.parseInt(EnvUtil.getProperty(\"maxHealthCheckFailCount\",\"12\")));\n  LOGGER.info(\"maxHealthCheckFailCount:{}\",maxHealthCheckFailCount);\n  setMaxContent(Integer.parseInt(EnvUtil.getProperty(\"maxContent\",String.valueOf(maxContent))));\n  LOGGER.info(\"maxContent:{}\",maxContent);\n  setManageCapacity(getBoolean(\"isManageCapacity\",isManageCapacity));\n  setCapacityLimitCheck(getBoolean(\"isCapacityLimitCheck\",isCapacityLimitCheck));\n  setDefaultClusterQuota(getInt(\"defaultClusterQuota\",defaultClusterQuota));\n  setDefaultGroupQuota(getInt(\"defaultGroupQuota\",defaultGroupQuota));\n  setDefaultTenantQuota(getInt(\"defaultTenantQuota\",defaultTenantQuota));\n  setDefaultMaxSize(getInt(\"defaultMaxSize\",defaultMaxSize));\n  setDefaultMaxAggrCount(getInt(\"defaultMaxAggrCount\",defaultMaxAggrCount));\n  setDefaultMaxAggrSize(getInt(\"defaultMaxAggrSize\",defaultMaxAggrSize));\n  setCorrectUsageDelay(getInt(\"correctUsageDelay\",correctUsageDelay));\n  setInitialExpansionPercent(getInt(\"initialExpansionPercent\",initialExpansionPercent));\n  setUseExternalDB(\"mysql\".equalsIgnoreCase(getString(\"spring.datasource.platform\",\"\")));\n  if (isUseExternalDB()) {\n    setEmbeddedStorage(false);\n  }\n else {\n    boolean embeddedStorage=PropertyUtil.embeddedStorage || Boolean.getBoolean(\"embeddedStorage\");\n    setEmbeddedStorage(embeddedStorage);\n    if (!embeddedStorage) {\n      setUseExternalDB(true);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 202,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2953,
        "startLineNumber" : 253,
        "startColumnNumber" : 8,
        "endLineNumber" : 298,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  setNotifyConnectTimeout(Integer.parseInt(EnvUtil.getProperty(\"notifyConnectTimeout\",\"100\")));\n  LOGGER.info(\"notifyConnectTimeout:{}\",notifyConnectTimeout);\n  setNotifySocketTimeout(Integer.parseInt(EnvUtil.getProperty(\"notifySocketTimeout\",\"200\")));\n  LOGGER.info(\"notifySocketTimeout:{}\",notifySocketTimeout);\n  setHealthCheck(Boolean.parseBoolean(EnvUtil.getProperty(\"isHealthCheck\",\"true\")));\n  LOGGER.info(\"isHealthCheck:{}\",isHealthCheck);\n  setMaxHealthCheckFailCount(Integer.parseInt(EnvUtil.getProperty(\"maxHealthCheckFailCount\",\"12\")));\n  LOGGER.info(\"maxHealthCheckFailCount:{}\",maxHealthCheckFailCount);\n  setMaxContent(Integer.parseInt(EnvUtil.getProperty(\"maxContent\",String.valueOf(maxContent))));\n  LOGGER.info(\"maxContent:{}\",maxContent);\n  setManageCapacity(getBoolean(\"isManageCapacity\",isManageCapacity));\n  setCapacityLimitCheck(getBoolean(\"isCapacityLimitCheck\",isCapacityLimitCheck));\n  setDefaultClusterQuota(getInt(\"defaultClusterQuota\",defaultClusterQuota));\n  setDefaultGroupQuota(getInt(\"defaultGroupQuota\",defaultGroupQuota));\n  setDefaultTenantQuota(getInt(\"defaultTenantQuota\",defaultTenantQuota));\n  setDefaultMaxSize(getInt(\"defaultMaxSize\",defaultMaxSize));\n  setDefaultMaxAggrCount(getInt(\"defaultMaxAggrCount\",defaultMaxAggrCount));\n  setDefaultMaxAggrSize(getInt(\"defaultMaxAggrSize\",defaultMaxAggrSize));\n  setCorrectUsageDelay(getInt(\"correctUsageDelay\",correctUsageDelay));\n  setInitialExpansionPercent(getInt(\"initialExpansionPercent\",initialExpansionPercent));\n  setUseExternalDB(\"mysql\".equalsIgnoreCase(getString(\"spring.datasource.platform\",\"\")));\n  if (isUseExternalDB()) {\n    setEmbeddedStorage(false);\n  }\n else {\n    boolean embeddedStorage=PropertyUtil.embeddedStorage || Boolean.getBoolean(\"embeddedStorage\");\n    setEmbeddedStorage(embeddedStorage);\n    if (!embeddedStorage) {\n      setUseExternalDB(true);\n    }\n  }\n}\n catch (Exception e) {\n  LOGGER.error(\"read application.properties failed\",e);\n  throw e;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 217,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2969,
        "startLineNumber" : 252,
        "startColumnNumber" : 31,
        "endLineNumber" : 299,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\n    setNotifyConnectTimeout(Integer.parseInt(EnvUtil.getProperty(\"notifyConnectTimeout\",\"100\")));\n    LOGGER.info(\"notifyConnectTimeout:{}\",notifyConnectTimeout);\n    setNotifySocketTimeout(Integer.parseInt(EnvUtil.getProperty(\"notifySocketTimeout\",\"200\")));\n    LOGGER.info(\"notifySocketTimeout:{}\",notifySocketTimeout);\n    setHealthCheck(Boolean.parseBoolean(EnvUtil.getProperty(\"isHealthCheck\",\"true\")));\n    LOGGER.info(\"isHealthCheck:{}\",isHealthCheck);\n    setMaxHealthCheckFailCount(Integer.parseInt(EnvUtil.getProperty(\"maxHealthCheckFailCount\",\"12\")));\n    LOGGER.info(\"maxHealthCheckFailCount:{}\",maxHealthCheckFailCount);\n    setMaxContent(Integer.parseInt(EnvUtil.getProperty(\"maxContent\",String.valueOf(maxContent))));\n    LOGGER.info(\"maxContent:{}\",maxContent);\n    setManageCapacity(getBoolean(\"isManageCapacity\",isManageCapacity));\n    setCapacityLimitCheck(getBoolean(\"isCapacityLimitCheck\",isCapacityLimitCheck));\n    setDefaultClusterQuota(getInt(\"defaultClusterQuota\",defaultClusterQuota));\n    setDefaultGroupQuota(getInt(\"defaultGroupQuota\",defaultGroupQuota));\n    setDefaultTenantQuota(getInt(\"defaultTenantQuota\",defaultTenantQuota));\n    setDefaultMaxSize(getInt(\"defaultMaxSize\",defaultMaxSize));\n    setDefaultMaxAggrCount(getInt(\"defaultMaxAggrCount\",defaultMaxAggrCount));\n    setDefaultMaxAggrSize(getInt(\"defaultMaxAggrSize\",defaultMaxAggrSize));\n    setCorrectUsageDelay(getInt(\"correctUsageDelay\",correctUsageDelay));\n    setInitialExpansionPercent(getInt(\"initialExpansionPercent\",initialExpansionPercent));\n    setUseExternalDB(\"mysql\".equalsIgnoreCase(getString(\"spring.datasource.platform\",\"\")));\n    if (isUseExternalDB()) {\n      setEmbeddedStorage(false);\n    }\n else {\n      boolean embeddedStorage=PropertyUtil.embeddedStorage || Boolean.getBoolean(\"embeddedStorage\");\n      setEmbeddedStorage(embeddedStorage);\n      if (!embeddedStorage) {\n        setUseExternalDB(true);\n      }\n    }\n  }\n catch (  Exception e) {\n    LOGGER.error(\"read application.properties failed\",e);\n    throw e;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 218,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2996,
        "startLineNumber" : 252,
        "startColumnNumber" : 4,
        "endLineNumber" : 299,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void loadSetting(){\n  try {\n    setNotifyConnectTimeout(Integer.parseInt(EnvUtil.getProperty(\"notifyConnectTimeout\",\"100\")));\n    LOGGER.info(\"notifyConnectTimeout:{}\",notifyConnectTimeout);\n    setNotifySocketTimeout(Integer.parseInt(EnvUtil.getProperty(\"notifySocketTimeout\",\"200\")));\n    LOGGER.info(\"notifySocketTimeout:{}\",notifySocketTimeout);\n    setHealthCheck(Boolean.parseBoolean(EnvUtil.getProperty(\"isHealthCheck\",\"true\")));\n    LOGGER.info(\"isHealthCheck:{}\",isHealthCheck);\n    setMaxHealthCheckFailCount(Integer.parseInt(EnvUtil.getProperty(\"maxHealthCheckFailCount\",\"12\")));\n    LOGGER.info(\"maxHealthCheckFailCount:{}\",maxHealthCheckFailCount);\n    setMaxContent(Integer.parseInt(EnvUtil.getProperty(\"maxContent\",String.valueOf(maxContent))));\n    LOGGER.info(\"maxContent:{}\",maxContent);\n    setManageCapacity(getBoolean(\"isManageCapacity\",isManageCapacity));\n    setCapacityLimitCheck(getBoolean(\"isCapacityLimitCheck\",isCapacityLimitCheck));\n    setDefaultClusterQuota(getInt(\"defaultClusterQuota\",defaultClusterQuota));\n    setDefaultGroupQuota(getInt(\"defaultGroupQuota\",defaultGroupQuota));\n    setDefaultTenantQuota(getInt(\"defaultTenantQuota\",defaultTenantQuota));\n    setDefaultMaxSize(getInt(\"defaultMaxSize\",defaultMaxSize));\n    setDefaultMaxAggrCount(getInt(\"defaultMaxAggrCount\",defaultMaxAggrCount));\n    setDefaultMaxAggrSize(getInt(\"defaultMaxAggrSize\",defaultMaxAggrSize));\n    setCorrectUsageDelay(getInt(\"correctUsageDelay\",correctUsageDelay));\n    setInitialExpansionPercent(getInt(\"initialExpansionPercent\",initialExpansionPercent));\n    setUseExternalDB(\"mysql\".equalsIgnoreCase(getString(\"spring.datasource.platform\",\"\")));\n    if (isUseExternalDB()) {\n      setEmbeddedStorage(false);\n    }\n else {\n      boolean embeddedStorage=PropertyUtil.embeddedStorage || Boolean.getBoolean(\"embeddedStorage\");\n      setEmbeddedStorage(embeddedStorage);\n      if (!embeddedStorage) {\n        setUseExternalDB(true);\n      }\n    }\n  }\n catch (  Exception e) {\n    LOGGER.error(\"read application.properties failed\",e);\n    throw e;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 222,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 272,
        "startColumnNumber" : 12,
        "endLineNumber" : 272,
        "endColumnNumber" : 84
      },
      "nodeContext" : "setDefaultMaxAggrSize(getInt(\"defaultMaxAggrSize\",defaultMaxAggrSize));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 48,
    "startLineNumber" : 272,
    "startColumnNumber" : 34,
    "endLineNumber" : 272,
    "endColumnNumber" : 82
  } ],
  "layoutRelationDataList" : [ ]
}