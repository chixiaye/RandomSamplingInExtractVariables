{
  "id" : 83,
  "expression" : "numbers.length",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/main/java/com/williamfiset/algorithms/sorting/RadixSort.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "numbers.length",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 42,
      "startColumnNumber" : 27,
      "endLineNumber" : 42,
      "endColumnNumber" : 41
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 42,
        "startColumnNumber" : 27,
        "endLineNumber" : 42,
        "endColumnNumber" : 46
      },
      "nodeContext" : "numbers.length <= 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 42,
        "startColumnNumber" : 8,
        "endLineNumber" : 42,
        "endColumnNumber" : 46
      },
      "nodeContext" : "numbers == null || numbers.length <= 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 44,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (numbers == null || numbers.length <= 1) {\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 296,
        "startLineNumber" : 41,
        "startColumnNumber" : 46,
        "endLineNumber" : 52,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (numbers == null || numbers.length <= 1) {\n    return;\n  }\n  int maximum=getMax(numbers);\n  int numberOfDigits=calculateNumberOfDigits(maximum);\n  int placeValue=1;\n  while (numberOfDigits-- > 0) {\n    countSort(numbers,placeValue);\n    placeValue*=10;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 47,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 340,
        "startLineNumber" : 41,
        "startColumnNumber" : 2,
        "endLineNumber" : 52,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static void radixSort(int[] numbers){\n  if (numbers == null || numbers.length <= 1) {\n    return;\n  }\n  int maximum=getMax(numbers);\n  int numberOfDigits=calculateNumberOfDigits(maximum);\n  int placeValue=1;\n  while (numberOfDigits-- > 0) {\n    countSort(numbers,placeValue);\n    placeValue*=10;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 57,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 42,
        "startColumnNumber" : 8,
        "endLineNumber" : 42,
        "endColumnNumber" : 46
      },
      "nodeContext" : "numbers == null || numbers.length <= 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 14,
    "startLineNumber" : 42,
    "startColumnNumber" : 27,
    "endLineNumber" : 42,
    "endColumnNumber" : 41
  } ],
  "layoutRelationDataList" : [ ]
}