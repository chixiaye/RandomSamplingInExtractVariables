{
  "id" : 418,
  "expression" : "buffer.toString()",
  "projectName" : "pinpoint-apm@pinpoint",
  "commitID" : "cd51da314be7fe261d7dc630dd7c51ce6bb3cc0c",
  "filePath" : "/web/src/test/java/com/navercorp/pinpoint/web/calltree/span/CallTreeIteratorTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "buffer.toString()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 17,
      "startLineNumber" : 519,
      "startColumnNumber" : 21,
      "endLineNumber" : 519,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 519,
        "startColumnNumber" : 8,
        "endLineNumber" : 519,
        "endColumnNumber" : 39
      },
      "nodeContext" : "logger.debug(buffer.toString())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 519,
        "startColumnNumber" : 8,
        "endLineNumber" : 519,
        "endColumnNumber" : 40
      },
      "nodeContext" : "logger.debug(buffer.toString());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2342,
        "startLineNumber" : 464,
        "startColumnNumber" : 153,
        "endLineNumber" : 520,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Queue<Integer> depths=new LinkedBlockingQueue<>(expectedDepths);\n  Queue<Integer> gaps=new LinkedBlockingQueue<>(expectedGaps);\n  Queue<Integer> execs=new LinkedBlockingQueue<>(expectedExecs);\n  int index=0;\n  CallTreeIterator iterator=callTree.iterator();\n  final StringBuilder buffer=new StringBuilder(\"\\n\");\n  while (iterator.hasNext()) {\n    CallTreeNode node=iterator.next();\n    SpanAlign align=node.getValue();\n    if (check && depths != null && !depths.isEmpty()) {\n      final int depth=depths.poll();\n      assertEquals(\"depth \" + index,depth,align.getDepth());\n    }\n    if (check && gaps != null && !gaps.isEmpty()) {\n      final int gap=gaps.poll();\n      assertEquals(\"gap \" + index,gap,align.getGap());\n    }\n    if (check && execs != null && !execs.isEmpty()) {\n      final int exec=execs.poll();\n      assertEquals(\"exec \" + index,exec,align.getExecutionMilliseconds());\n    }\n    for (int i=0; i <= align.getDepth(); i++) {\n      if (align.isSpan()) {\n        buffer.append(\"R\");\n      }\n else       if (align.isAsync()) {\n        buffer.append(\"A\");\n      }\n else {\n        buffer.append(\"#\");\n      }\n    }\n    buffer.append(\" : depth=\");\n    buffer.append(align.getDepth());\n    buffer.append(\" : gap=\");\n    buffer.append(align.getGap());\n    buffer.append(\", exec=\");\n    buffer.append(align.getExecutionMilliseconds());\n    buffer.append(\", elapsed=\");\n    buffer.append(align.getElapsed());\n    buffer.append(\", startTime=\");\n    buffer.append(align.getStartTime());\n    buffer.append(\", lastTime=\");\n    buffer.append(align.getLastTime());\n    if (!align.isSpan()) {\n      buffer.append(\", nextAsyncId=\");\n      buffer.append(align.getSpanEventBo().getNextAsyncId());\n      buffer.append(\", asyncId=\");\n      buffer.append(align.getSpanEventBo().getAsyncId());\n    }\n    buffer.append(\"\\n\");\n    index++;\n  }\n  logger.debug(buffer.toString());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 335,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2491,
        "startLineNumber" : 464,
        "startColumnNumber" : 4,
        "endLineNumber" : 520,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void assertCallTree(CallTree callTree,List<Integer> expectedDepths,List<Integer> expectedGaps,List<Integer> expectedExecs,boolean check){\n  Queue<Integer> depths=new LinkedBlockingQueue<>(expectedDepths);\n  Queue<Integer> gaps=new LinkedBlockingQueue<>(expectedGaps);\n  Queue<Integer> execs=new LinkedBlockingQueue<>(expectedExecs);\n  int index=0;\n  CallTreeIterator iterator=callTree.iterator();\n  final StringBuilder buffer=new StringBuilder(\"\\n\");\n  while (iterator.hasNext()) {\n    CallTreeNode node=iterator.next();\n    SpanAlign align=node.getValue();\n    if (check && depths != null && !depths.isEmpty()) {\n      final int depth=depths.poll();\n      assertEquals(\"depth \" + index,depth,align.getDepth());\n    }\n    if (check && gaps != null && !gaps.isEmpty()) {\n      final int gap=gaps.poll();\n      assertEquals(\"gap \" + index,gap,align.getGap());\n    }\n    if (check && execs != null && !execs.isEmpty()) {\n      final int exec=execs.poll();\n      assertEquals(\"exec \" + index,exec,align.getExecutionMilliseconds());\n    }\n    for (int i=0; i <= align.getDepth(); i++) {\n      if (align.isSpan()) {\n        buffer.append(\"R\");\n      }\n else       if (align.isAsync()) {\n        buffer.append(\"A\");\n      }\n else {\n        buffer.append(\"#\");\n      }\n    }\n    buffer.append(\" : depth=\");\n    buffer.append(align.getDepth());\n    buffer.append(\" : gap=\");\n    buffer.append(align.getGap());\n    buffer.append(\", exec=\");\n    buffer.append(align.getExecutionMilliseconds());\n    buffer.append(\", elapsed=\");\n    buffer.append(align.getElapsed());\n    buffer.append(\", startTime=\");\n    buffer.append(align.getStartTime());\n    buffer.append(\", lastTime=\");\n    buffer.append(align.getLastTime());\n    if (!align.isSpan()) {\n      buffer.append(\", nextAsyncId=\");\n      buffer.append(align.getSpanEventBo().getNextAsyncId());\n      buffer.append(\", asyncId=\");\n      buffer.append(align.getSpanEventBo().getAsyncId());\n    }\n    buffer.append(\"\\n\");\n    index++;\n  }\n  logger.debug(buffer.toString());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 367,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 519,
        "startColumnNumber" : 8,
        "endLineNumber" : 519,
        "endColumnNumber" : 40
      },
      "nodeContext" : "logger.debug(buffer.toString());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 17,
    "startLineNumber" : 519,
    "startColumnNumber" : 21,
    "endLineNumber" : 519,
    "endColumnNumber" : 38
  } ],
  "layoutRelationDataList" : [ ]
}