{
  "id" : 118,
  "expression" : "json",
  "projectName" : "SeleniumHQ@selenium",
  "commitID" : "c146621f39dbec94114835aa1f6af6a0e1fa4cd0",
  "filePath" : "/java/server/test/org/openqa/selenium/grid/node/local/CreateSessionTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "json",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 58,
      "startColumnNumber" : 21,
      "endLineNumber" : 58,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 133,
        "startLineNumber" : 58,
        "startColumnNumber" : 21,
        "endLineNumber" : 60,
        "endColumnNumber" : 63
      },
      "nodeContext" : "json.toJson(ImmutableMap.of(\"capabilities\",ImmutableMap.of(\"alwaysMatch\",ImmutableMap.of(\"cheese\",\"brie\"))))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 143,
        "startLineNumber" : 58,
        "startColumnNumber" : 11,
        "endLineNumber" : 60,
        "endColumnNumber" : 63
      },
      "nodeContext" : "payload=json.toJson(ImmutableMap.of(\"capabilities\",ImmutableMap.of(\"alwaysMatch\",ImmutableMap.of(\"cheese\",\"brie\"))))",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 151,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 60,
        "endColumnNumber" : 64
      },
      "nodeContext" : "String payload=json.toJson(ImmutableMap.of(\"capabilities\",ImmutableMap.of(\"alwaysMatch\",ImmutableMap.of(\"cheese\",\"brie\"))));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 21,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1479,
        "startLineNumber" : 57,
        "startColumnNumber" : 66,
        "endLineNumber" : 95,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  String payload=json.toJson(ImmutableMap.of(\"capabilities\",ImmutableMap.of(\"alwaysMatch\",ImmutableMap.of(\"cheese\",\"brie\"))));\n  HttpRequest request=new HttpRequest(POST,\"/session\");\n  request.setContent(utf8String(payload));\n  URI uri=new URI(\"http://example.com\");\n  Node node=LocalNode.builder(DefaultTestTracer.createTracer(),new GuavaEventBus(),uri,uri,registrationSecret).add(stereotype,new TestSessionFactory((id,caps) -> new Session(id,uri,new ImmutableCapabilities(),caps,Instant.now()))).build();\n  CreateSessionResponse sessionResponse=node.newSession(new CreateSessionRequest(ImmutableSet.of(W3C),stereotype,ImmutableMap.of())).orElseThrow(() -> new AssertionError(\"Unable to create session\"));\n  Map<String,Object> all=json.toType(new String(sessionResponse.getDownstreamEncodedResponse(),UTF_8),MAP_TYPE);\n  assertThat(all.containsKey(\"status\")).isFalse();\n  Map<?,?> value=(Map<?,?>)all.get(\"value\");\n  assertThat(value.get(\"sessionId\")).isInstanceOf(String.class);\n  assertThat(value.get(\"capabilities\")).isInstanceOf(Map.class);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 188,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1551,
        "startLineNumber" : 56,
        "startColumnNumber" : 2,
        "endLineNumber" : 95,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void shouldAcceptAW3CPayload() throws URISyntaxException {\n  String payload=json.toJson(ImmutableMap.of(\"capabilities\",ImmutableMap.of(\"alwaysMatch\",ImmutableMap.of(\"cheese\",\"brie\"))));\n  HttpRequest request=new HttpRequest(POST,\"/session\");\n  request.setContent(utf8String(payload));\n  URI uri=new URI(\"http://example.com\");\n  Node node=LocalNode.builder(DefaultTestTracer.createTracer(),new GuavaEventBus(),uri,uri,registrationSecret).add(stereotype,new TestSessionFactory((id,caps) -> new Session(id,uri,new ImmutableCapabilities(),caps,Instant.now()))).build();\n  CreateSessionResponse sessionResponse=node.newSession(new CreateSessionRequest(ImmutableSet.of(W3C),stereotype,ImmutableMap.of())).orElseThrow(() -> new AssertionError(\"Unable to create session\"));\n  Map<String,Object> all=json.toType(new String(sessionResponse.getDownstreamEncodedResponse(),UTF_8),MAP_TYPE);\n  assertThat(all.containsKey(\"status\")).isFalse();\n  Map<?,?> value=(Map<?,?>)all.get(\"value\");\n  assertThat(value.get(\"sessionId\")).isInstanceOf(String.class);\n  assertThat(value.get(\"capabilities\")).isInstanceOf(Map.class);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 196,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 133,
        "startLineNumber" : 58,
        "startColumnNumber" : 21,
        "endLineNumber" : 60,
        "endColumnNumber" : 63
      },
      "nodeContext" : "json.toJson(ImmutableMap.of(\"capabilities\",ImmutableMap.of(\"alwaysMatch\",ImmutableMap.of(\"cheese\",\"brie\"))))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.openqa.selenium.json.Json"
  }, {
    "nodeContext" : "json",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 83,
      "startColumnNumber" : 30,
      "endLineNumber" : 83,
      "endColumnNumber" : 34
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 105,
        "startLineNumber" : 83,
        "startColumnNumber" : 30,
        "endLineNumber" : 85,
        "endColumnNumber" : 17
      },
      "nodeContext" : "json.toType(new String(sessionResponse.getDownstreamEncodedResponse(),UTF_8),MAP_TYPE)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 111,
        "startLineNumber" : 83,
        "startColumnNumber" : 24,
        "endLineNumber" : 85,
        "endColumnNumber" : 17
      },
      "nodeContext" : "all=json.toType(new String(sessionResponse.getDownstreamEncodedResponse(),UTF_8),MAP_TYPE)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 132,
        "startLineNumber" : 83,
        "startColumnNumber" : 4,
        "endLineNumber" : 85,
        "endColumnNumber" : 18
      },
      "nodeContext" : "Map<String,Object> all=json.toType(new String(sessionResponse.getDownstreamEncodedResponse(),UTF_8),MAP_TYPE);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1479,
        "startLineNumber" : 57,
        "startColumnNumber" : 66,
        "endLineNumber" : 95,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  String payload=json.toJson(ImmutableMap.of(\"capabilities\",ImmutableMap.of(\"alwaysMatch\",ImmutableMap.of(\"cheese\",\"brie\"))));\n  HttpRequest request=new HttpRequest(POST,\"/session\");\n  request.setContent(utf8String(payload));\n  URI uri=new URI(\"http://example.com\");\n  Node node=LocalNode.builder(DefaultTestTracer.createTracer(),new GuavaEventBus(),uri,uri,registrationSecret).add(stereotype,new TestSessionFactory((id,caps) -> new Session(id,uri,new ImmutableCapabilities(),caps,Instant.now()))).build();\n  CreateSessionResponse sessionResponse=node.newSession(new CreateSessionRequest(ImmutableSet.of(W3C),stereotype,ImmutableMap.of())).orElseThrow(() -> new AssertionError(\"Unable to create session\"));\n  Map<String,Object> all=json.toType(new String(sessionResponse.getDownstreamEncodedResponse(),UTF_8),MAP_TYPE);\n  assertThat(all.containsKey(\"status\")).isFalse();\n  Map<?,?> value=(Map<?,?>)all.get(\"value\");\n  assertThat(value.get(\"sessionId\")).isInstanceOf(String.class);\n  assertThat(value.get(\"capabilities\")).isInstanceOf(Map.class);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 188,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1551,
        "startLineNumber" : 56,
        "startColumnNumber" : 2,
        "endLineNumber" : 95,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void shouldAcceptAW3CPayload() throws URISyntaxException {\n  String payload=json.toJson(ImmutableMap.of(\"capabilities\",ImmutableMap.of(\"alwaysMatch\",ImmutableMap.of(\"cheese\",\"brie\"))));\n  HttpRequest request=new HttpRequest(POST,\"/session\");\n  request.setContent(utf8String(payload));\n  URI uri=new URI(\"http://example.com\");\n  Node node=LocalNode.builder(DefaultTestTracer.createTracer(),new GuavaEventBus(),uri,uri,registrationSecret).add(stereotype,new TestSessionFactory((id,caps) -> new Session(id,uri,new ImmutableCapabilities(),caps,Instant.now()))).build();\n  CreateSessionResponse sessionResponse=node.newSession(new CreateSessionRequest(ImmutableSet.of(W3C),stereotype,ImmutableMap.of())).orElseThrow(() -> new AssertionError(\"Unable to create session\"));\n  Map<String,Object> all=json.toType(new String(sessionResponse.getDownstreamEncodedResponse(),UTF_8),MAP_TYPE);\n  assertThat(all.containsKey(\"status\")).isFalse();\n  Map<?,?> value=(Map<?,?>)all.get(\"value\");\n  assertThat(value.get(\"sessionId\")).isInstanceOf(String.class);\n  assertThat(value.get(\"capabilities\")).isInstanceOf(Map.class);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 196,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 105,
        "startLineNumber" : 83,
        "startColumnNumber" : 30,
        "endLineNumber" : 85,
        "endColumnNumber" : 17
      },
      "nodeContext" : "json.toType(new String(sessionResponse.getDownstreamEncodedResponse(),UTF_8),MAP_TYPE)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.openqa.selenium.json.Json"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 58,
    "startColumnNumber" : 21,
    "endLineNumber" : 58,
    "endColumnNumber" : 25
  }, {
    "charLength" : 4,
    "startLineNumber" : 83,
    "startColumnNumber" : 30,
    "endLineNumber" : 83,
    "endColumnNumber" : 34
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}