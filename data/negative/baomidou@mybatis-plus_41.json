{
  "id" : 41,
  "expression" : "sqlInfo",
  "projectName" : "baomidou@mybatis-plus",
  "commitID" : "7815611a659da4cc8d5443f5ef4c10ca0d937582",
  "filePath" : "/mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/plugins/pagination/optimize/JsqlParserCountOptimize.java",
  "occurrences" : 9,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "sqlInfo",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 74,
      "startColumnNumber" : 16,
      "endLineNumber" : 74,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 74,
        "startColumnNumber" : 16,
        "endLineNumber" : 74,
        "endColumnNumber" : 41
      },
      "nodeContext" : "sqlInfo.setOrderBy(false)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 74,
        "startColumnNumber" : 16,
        "endLineNumber" : 74,
        "endColumnNumber" : 42
      },
      "nodeContext" : "sqlInfo.setOrderBy(false);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 112,
        "startLineNumber" : 72,
        "startColumnNumber" : 89,
        "endLineNumber" : 75,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  plainSelect.setOrderByElements(null);\n  sqlInfo.setOrderBy(false);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 189,
        "startLineNumber" : 72,
        "startColumnNumber" : 12,
        "endLineNumber" : 75,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (CollectionUtils.isEmpty(groupBy) && CollectionUtils.isNotEmpty(orderBy)) {\n  plainSelect.setOrderByElements(null);\n  sqlInfo.setOrderBy(false);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 21,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1457,
        "startLineNumber" : 64,
        "startColumnNumber" : 12,
        "endLineNumber" : 92,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Select selectStatement=(Select)CCJSqlParserUtil.parse(sql);\n  PlainSelect plainSelect=(PlainSelect)selectStatement.getSelectBody();\n  Distinct distinct=plainSelect.getDistinct();\n  List<Expression> groupBy=plainSelect.getGroupByColumnReferences();\n  List<OrderByElement> orderBy=plainSelect.getOrderByElements();\n  if (CollectionUtils.isEmpty(groupBy) && CollectionUtils.isNotEmpty(orderBy)) {\n    plainSelect.setOrderByElements(null);\n    sqlInfo.setOrderBy(false);\n  }\n  for (  SelectItem item : plainSelect.getSelectItems()) {\n    if (item.toString().contains(\"?\")) {\n      sqlInfo.setSql(SqlUtils.getOriginalCountSql(selectStatement.toString()));\n      return sqlInfo;\n    }\n  }\n  if (distinct != null || CollectionUtils.isNotEmpty(groupBy)) {\n    sqlInfo.setSql(SqlUtils.getOriginalCountSql(selectStatement.toString()));\n    return sqlInfo;\n  }\n  plainSelect.setSelectItems(countSelectItem);\n  sqlInfo.setSql(selectStatement.toString());\n  return sqlInfo;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 140,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1611,
        "startLineNumber" : 64,
        "startColumnNumber" : 8,
        "endLineNumber" : 96,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  Select selectStatement=(Select)CCJSqlParserUtil.parse(sql);\n  PlainSelect plainSelect=(PlainSelect)selectStatement.getSelectBody();\n  Distinct distinct=plainSelect.getDistinct();\n  List<Expression> groupBy=plainSelect.getGroupByColumnReferences();\n  List<OrderByElement> orderBy=plainSelect.getOrderByElements();\n  if (CollectionUtils.isEmpty(groupBy) && CollectionUtils.isNotEmpty(orderBy)) {\n    plainSelect.setOrderByElements(null);\n    sqlInfo.setOrderBy(false);\n  }\n  for (  SelectItem item : plainSelect.getSelectItems()) {\n    if (item.toString().contains(\"?\")) {\n      sqlInfo.setSql(SqlUtils.getOriginalCountSql(selectStatement.toString()));\n      return sqlInfo;\n    }\n  }\n  if (distinct != null || CollectionUtils.isNotEmpty(groupBy)) {\n    sqlInfo.setSql(SqlUtils.getOriginalCountSql(selectStatement.toString()));\n    return sqlInfo;\n  }\n  plainSelect.setSelectItems(countSelectItem);\n  sqlInfo.setSql(selectStatement.toString());\n  return sqlInfo;\n}\n catch (Throwable e) {\n  sqlInfo.setSql(SqlUtils.getOriginalCountSql(sql));\n  return sqlInfo;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 157,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1790,
        "startLineNumber" : 59,
        "startColumnNumber" : 66,
        "endLineNumber" : 97,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (logger.isDebugEnabled()) {\n    logger.debug(\" JsqlParserCountOptimize sql=\" + sql);\n  }\n  SqlInfo sqlInfo=SqlInfo.newInstance();\n  try {\n    Select selectStatement=(Select)CCJSqlParserUtil.parse(sql);\n    PlainSelect plainSelect=(PlainSelect)selectStatement.getSelectBody();\n    Distinct distinct=plainSelect.getDistinct();\n    List<Expression> groupBy=plainSelect.getGroupByColumnReferences();\n    List<OrderByElement> orderBy=plainSelect.getOrderByElements();\n    if (CollectionUtils.isEmpty(groupBy) && CollectionUtils.isNotEmpty(orderBy)) {\n      plainSelect.setOrderByElements(null);\n      sqlInfo.setOrderBy(false);\n    }\n    for (    SelectItem item : plainSelect.getSelectItems()) {\n      if (item.toString().contains(\"?\")) {\n        sqlInfo.setSql(SqlUtils.getOriginalCountSql(selectStatement.toString()));\n        return sqlInfo;\n      }\n    }\n    if (distinct != null || CollectionUtils.isNotEmpty(groupBy)) {\n      sqlInfo.setSql(SqlUtils.getOriginalCountSql(selectStatement.toString()));\n      return sqlInfo;\n    }\n    plainSelect.setSelectItems(countSelectItem);\n    sqlInfo.setSql(selectStatement.toString());\n    return sqlInfo;\n  }\n catch (  Throwable e) {\n    sqlInfo.setSql(SqlUtils.getOriginalCountSql(sql));\n    return sqlInfo;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 178,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1866,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 97,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public SqlInfo optimizeSql(MetaObject metaObject,String sql){\n  if (logger.isDebugEnabled()) {\n    logger.debug(\" JsqlParserCountOptimize sql=\" + sql);\n  }\n  SqlInfo sqlInfo=SqlInfo.newInstance();\n  try {\n    Select selectStatement=(Select)CCJSqlParserUtil.parse(sql);\n    PlainSelect plainSelect=(PlainSelect)selectStatement.getSelectBody();\n    Distinct distinct=plainSelect.getDistinct();\n    List<Expression> groupBy=plainSelect.getGroupByColumnReferences();\n    List<OrderByElement> orderBy=plainSelect.getOrderByElements();\n    if (CollectionUtils.isEmpty(groupBy) && CollectionUtils.isNotEmpty(orderBy)) {\n      plainSelect.setOrderByElements(null);\n      sqlInfo.setOrderBy(false);\n    }\n    for (    SelectItem item : plainSelect.getSelectItems()) {\n      if (item.toString().contains(\"?\")) {\n        sqlInfo.setSql(SqlUtils.getOriginalCountSql(selectStatement.toString()));\n        return sqlInfo;\n      }\n    }\n    if (distinct != null || CollectionUtils.isNotEmpty(groupBy)) {\n      sqlInfo.setSql(SqlUtils.getOriginalCountSql(selectStatement.toString()));\n      return sqlInfo;\n    }\n    plainSelect.setSelectItems(countSelectItem);\n    sqlInfo.setSql(selectStatement.toString());\n    return sqlInfo;\n  }\n catch (  Throwable e) {\n    sqlInfo.setSql(SqlUtils.getOriginalCountSql(sql));\n    return sqlInfo;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 193,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 74,
        "startColumnNumber" : 16,
        "endLineNumber" : 74,
        "endColumnNumber" : 42
      },
      "nodeContext" : "sqlInfo.setOrderBy(false);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.baomidou.mybatisplus.plugins.parser.SqlInfo"
  }, {
    "nodeContext" : "sqlInfo",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 79,
      "startColumnNumber" : 20,
      "endLineNumber" : 79,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 79,
        "startColumnNumber" : 20,
        "endLineNumber" : 79,
        "endColumnNumber" : 92
      },
      "nodeContext" : "sqlInfo.setSql(SqlUtils.getOriginalCountSql(selectStatement.toString()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 79,
        "startColumnNumber" : 20,
        "endLineNumber" : 79,
        "endColumnNumber" : 93
      },
      "nodeContext" : "sqlInfo.setSql(SqlUtils.getOriginalCountSql(selectStatement.toString()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 149,
        "startLineNumber" : 78,
        "startColumnNumber" : 51,
        "endLineNumber" : 81,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  sqlInfo.setSql(SqlUtils.getOriginalCountSql(selectStatement.toString()));\n  return sqlInfo;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 184,
        "startLineNumber" : 78,
        "startColumnNumber" : 16,
        "endLineNumber" : 81,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (item.toString().contains(\"?\")) {\n  sqlInfo.setSql(SqlUtils.getOriginalCountSql(selectStatement.toString()));\n  return sqlInfo;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 20,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 216,
        "startLineNumber" : 77,
        "startColumnNumber" : 65,
        "endLineNumber" : 82,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (item.toString().contains(\"?\")) {\n    sqlInfo.setSql(SqlUtils.getOriginalCountSql(selectStatement.toString()));\n    return sqlInfo;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 21,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 269,
        "startLineNumber" : 77,
        "startColumnNumber" : 12,
        "endLineNumber" : 82,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (SelectItem item : plainSelect.getSelectItems()) {\n  if (item.toString().contains(\"?\")) {\n    sqlInfo.setSql(SqlUtils.getOriginalCountSql(selectStatement.toString()));\n    return sqlInfo;\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 29,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1457,
        "startLineNumber" : 64,
        "startColumnNumber" : 12,
        "endLineNumber" : 92,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Select selectStatement=(Select)CCJSqlParserUtil.parse(sql);\n  PlainSelect plainSelect=(PlainSelect)selectStatement.getSelectBody();\n  Distinct distinct=plainSelect.getDistinct();\n  List<Expression> groupBy=plainSelect.getGroupByColumnReferences();\n  List<OrderByElement> orderBy=plainSelect.getOrderByElements();\n  if (CollectionUtils.isEmpty(groupBy) && CollectionUtils.isNotEmpty(orderBy)) {\n    plainSelect.setOrderByElements(null);\n    sqlInfo.setOrderBy(false);\n  }\n  for (  SelectItem item : plainSelect.getSelectItems()) {\n    if (item.toString().contains(\"?\")) {\n      sqlInfo.setSql(SqlUtils.getOriginalCountSql(selectStatement.toString()));\n      return sqlInfo;\n    }\n  }\n  if (distinct != null || CollectionUtils.isNotEmpty(groupBy)) {\n    sqlInfo.setSql(SqlUtils.getOriginalCountSql(selectStatement.toString()));\n    return sqlInfo;\n  }\n  plainSelect.setSelectItems(countSelectItem);\n  sqlInfo.setSql(selectStatement.toString());\n  return sqlInfo;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 140,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1611,
        "startLineNumber" : 64,
        "startColumnNumber" : 8,
        "endLineNumber" : 96,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  Select selectStatement=(Select)CCJSqlParserUtil.parse(sql);\n  PlainSelect plainSelect=(PlainSelect)selectStatement.getSelectBody();\n  Distinct distinct=plainSelect.getDistinct();\n  List<Expression> groupBy=plainSelect.getGroupByColumnReferences();\n  List<OrderByElement> orderBy=plainSelect.getOrderByElements();\n  if (CollectionUtils.isEmpty(groupBy) && CollectionUtils.isNotEmpty(orderBy)) {\n    plainSelect.setOrderByElements(null);\n    sqlInfo.setOrderBy(false);\n  }\n  for (  SelectItem item : plainSelect.getSelectItems()) {\n    if (item.toString().contains(\"?\")) {\n      sqlInfo.setSql(SqlUtils.getOriginalCountSql(selectStatement.toString()));\n      return sqlInfo;\n    }\n  }\n  if (distinct != null || CollectionUtils.isNotEmpty(groupBy)) {\n    sqlInfo.setSql(SqlUtils.getOriginalCountSql(selectStatement.toString()));\n    return sqlInfo;\n  }\n  plainSelect.setSelectItems(countSelectItem);\n  sqlInfo.setSql(selectStatement.toString());\n  return sqlInfo;\n}\n catch (Throwable e) {\n  sqlInfo.setSql(SqlUtils.getOriginalCountSql(sql));\n  return sqlInfo;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 157,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1790,
        "startLineNumber" : 59,
        "startColumnNumber" : 66,
        "endLineNumber" : 97,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (logger.isDebugEnabled()) {\n    logger.debug(\" JsqlParserCountOptimize sql=\" + sql);\n  }\n  SqlInfo sqlInfo=SqlInfo.newInstance();\n  try {\n    Select selectStatement=(Select)CCJSqlParserUtil.parse(sql);\n    PlainSelect plainSelect=(PlainSelect)selectStatement.getSelectBody();\n    Distinct distinct=plainSelect.getDistinct();\n    List<Expression> groupBy=plainSelect.getGroupByColumnReferences();\n    List<OrderByElement> orderBy=plainSelect.getOrderByElements();\n    if (CollectionUtils.isEmpty(groupBy) && CollectionUtils.isNotEmpty(orderBy)) {\n      plainSelect.setOrderByElements(null);\n      sqlInfo.setOrderBy(false);\n    }\n    for (    SelectItem item : plainSelect.getSelectItems()) {\n      if (item.toString().contains(\"?\")) {\n        sqlInfo.setSql(SqlUtils.getOriginalCountSql(selectStatement.toString()));\n        return sqlInfo;\n      }\n    }\n    if (distinct != null || CollectionUtils.isNotEmpty(groupBy)) {\n      sqlInfo.setSql(SqlUtils.getOriginalCountSql(selectStatement.toString()));\n      return sqlInfo;\n    }\n    plainSelect.setSelectItems(countSelectItem);\n    sqlInfo.setSql(selectStatement.toString());\n    return sqlInfo;\n  }\n catch (  Throwable e) {\n    sqlInfo.setSql(SqlUtils.getOriginalCountSql(sql));\n    return sqlInfo;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 178,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1866,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 97,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public SqlInfo optimizeSql(MetaObject metaObject,String sql){\n  if (logger.isDebugEnabled()) {\n    logger.debug(\" JsqlParserCountOptimize sql=\" + sql);\n  }\n  SqlInfo sqlInfo=SqlInfo.newInstance();\n  try {\n    Select selectStatement=(Select)CCJSqlParserUtil.parse(sql);\n    PlainSelect plainSelect=(PlainSelect)selectStatement.getSelectBody();\n    Distinct distinct=plainSelect.getDistinct();\n    List<Expression> groupBy=plainSelect.getGroupByColumnReferences();\n    List<OrderByElement> orderBy=plainSelect.getOrderByElements();\n    if (CollectionUtils.isEmpty(groupBy) && CollectionUtils.isNotEmpty(orderBy)) {\n      plainSelect.setOrderByElements(null);\n      sqlInfo.setOrderBy(false);\n    }\n    for (    SelectItem item : plainSelect.getSelectItems()) {\n      if (item.toString().contains(\"?\")) {\n        sqlInfo.setSql(SqlUtils.getOriginalCountSql(selectStatement.toString()));\n        return sqlInfo;\n      }\n    }\n    if (distinct != null || CollectionUtils.isNotEmpty(groupBy)) {\n      sqlInfo.setSql(SqlUtils.getOriginalCountSql(selectStatement.toString()));\n      return sqlInfo;\n    }\n    plainSelect.setSelectItems(countSelectItem);\n    sqlInfo.setSql(selectStatement.toString());\n    return sqlInfo;\n  }\n catch (  Throwable e) {\n    sqlInfo.setSql(SqlUtils.getOriginalCountSql(sql));\n    return sqlInfo;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 193,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 79,
        "startColumnNumber" : 20,
        "endLineNumber" : 79,
        "endColumnNumber" : 93
      },
      "nodeContext" : "sqlInfo.setSql(SqlUtils.getOriginalCountSql(selectStatement.toString()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.baomidou.mybatisplus.plugins.parser.SqlInfo"
  }, {
    "nodeContext" : "sqlInfo",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 80,
      "startColumnNumber" : 27,
      "endLineNumber" : 80,
      "endColumnNumber" : 34
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 80,
        "startColumnNumber" : 20,
        "endLineNumber" : 80,
        "endColumnNumber" : 35
      },
      "nodeContext" : "return sqlInfo;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 149,
        "startLineNumber" : 78,
        "startColumnNumber" : 51,
        "endLineNumber" : 81,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  sqlInfo.setSql(SqlUtils.getOriginalCountSql(selectStatement.toString()));\n  return sqlInfo;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 184,
        "startLineNumber" : 78,
        "startColumnNumber" : 16,
        "endLineNumber" : 81,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (item.toString().contains(\"?\")) {\n  sqlInfo.setSql(SqlUtils.getOriginalCountSql(selectStatement.toString()));\n  return sqlInfo;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 20,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 216,
        "startLineNumber" : 77,
        "startColumnNumber" : 65,
        "endLineNumber" : 82,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (item.toString().contains(\"?\")) {\n    sqlInfo.setSql(SqlUtils.getOriginalCountSql(selectStatement.toString()));\n    return sqlInfo;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 21,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 269,
        "startLineNumber" : 77,
        "startColumnNumber" : 12,
        "endLineNumber" : 82,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (SelectItem item : plainSelect.getSelectItems()) {\n  if (item.toString().contains(\"?\")) {\n    sqlInfo.setSql(SqlUtils.getOriginalCountSql(selectStatement.toString()));\n    return sqlInfo;\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 29,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1457,
        "startLineNumber" : 64,
        "startColumnNumber" : 12,
        "endLineNumber" : 92,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Select selectStatement=(Select)CCJSqlParserUtil.parse(sql);\n  PlainSelect plainSelect=(PlainSelect)selectStatement.getSelectBody();\n  Distinct distinct=plainSelect.getDistinct();\n  List<Expression> groupBy=plainSelect.getGroupByColumnReferences();\n  List<OrderByElement> orderBy=plainSelect.getOrderByElements();\n  if (CollectionUtils.isEmpty(groupBy) && CollectionUtils.isNotEmpty(orderBy)) {\n    plainSelect.setOrderByElements(null);\n    sqlInfo.setOrderBy(false);\n  }\n  for (  SelectItem item : plainSelect.getSelectItems()) {\n    if (item.toString().contains(\"?\")) {\n      sqlInfo.setSql(SqlUtils.getOriginalCountSql(selectStatement.toString()));\n      return sqlInfo;\n    }\n  }\n  if (distinct != null || CollectionUtils.isNotEmpty(groupBy)) {\n    sqlInfo.setSql(SqlUtils.getOriginalCountSql(selectStatement.toString()));\n    return sqlInfo;\n  }\n  plainSelect.setSelectItems(countSelectItem);\n  sqlInfo.setSql(selectStatement.toString());\n  return sqlInfo;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 140,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1611,
        "startLineNumber" : 64,
        "startColumnNumber" : 8,
        "endLineNumber" : 96,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  Select selectStatement=(Select)CCJSqlParserUtil.parse(sql);\n  PlainSelect plainSelect=(PlainSelect)selectStatement.getSelectBody();\n  Distinct distinct=plainSelect.getDistinct();\n  List<Expression> groupBy=plainSelect.getGroupByColumnReferences();\n  List<OrderByElement> orderBy=plainSelect.getOrderByElements();\n  if (CollectionUtils.isEmpty(groupBy) && CollectionUtils.isNotEmpty(orderBy)) {\n    plainSelect.setOrderByElements(null);\n    sqlInfo.setOrderBy(false);\n  }\n  for (  SelectItem item : plainSelect.getSelectItems()) {\n    if (item.toString().contains(\"?\")) {\n      sqlInfo.setSql(SqlUtils.getOriginalCountSql(selectStatement.toString()));\n      return sqlInfo;\n    }\n  }\n  if (distinct != null || CollectionUtils.isNotEmpty(groupBy)) {\n    sqlInfo.setSql(SqlUtils.getOriginalCountSql(selectStatement.toString()));\n    return sqlInfo;\n  }\n  plainSelect.setSelectItems(countSelectItem);\n  sqlInfo.setSql(selectStatement.toString());\n  return sqlInfo;\n}\n catch (Throwable e) {\n  sqlInfo.setSql(SqlUtils.getOriginalCountSql(sql));\n  return sqlInfo;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 157,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1790,
        "startLineNumber" : 59,
        "startColumnNumber" : 66,
        "endLineNumber" : 97,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (logger.isDebugEnabled()) {\n    logger.debug(\" JsqlParserCountOptimize sql=\" + sql);\n  }\n  SqlInfo sqlInfo=SqlInfo.newInstance();\n  try {\n    Select selectStatement=(Select)CCJSqlParserUtil.parse(sql);\n    PlainSelect plainSelect=(PlainSelect)selectStatement.getSelectBody();\n    Distinct distinct=plainSelect.getDistinct();\n    List<Expression> groupBy=plainSelect.getGroupByColumnReferences();\n    List<OrderByElement> orderBy=plainSelect.getOrderByElements();\n    if (CollectionUtils.isEmpty(groupBy) && CollectionUtils.isNotEmpty(orderBy)) {\n      plainSelect.setOrderByElements(null);\n      sqlInfo.setOrderBy(false);\n    }\n    for (    SelectItem item : plainSelect.getSelectItems()) {\n      if (item.toString().contains(\"?\")) {\n        sqlInfo.setSql(SqlUtils.getOriginalCountSql(selectStatement.toString()));\n        return sqlInfo;\n      }\n    }\n    if (distinct != null || CollectionUtils.isNotEmpty(groupBy)) {\n      sqlInfo.setSql(SqlUtils.getOriginalCountSql(selectStatement.toString()));\n      return sqlInfo;\n    }\n    plainSelect.setSelectItems(countSelectItem);\n    sqlInfo.setSql(selectStatement.toString());\n    return sqlInfo;\n  }\n catch (  Throwable e) {\n    sqlInfo.setSql(SqlUtils.getOriginalCountSql(sql));\n    return sqlInfo;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 178,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1866,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 97,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public SqlInfo optimizeSql(MetaObject metaObject,String sql){\n  if (logger.isDebugEnabled()) {\n    logger.debug(\" JsqlParserCountOptimize sql=\" + sql);\n  }\n  SqlInfo sqlInfo=SqlInfo.newInstance();\n  try {\n    Select selectStatement=(Select)CCJSqlParserUtil.parse(sql);\n    PlainSelect plainSelect=(PlainSelect)selectStatement.getSelectBody();\n    Distinct distinct=plainSelect.getDistinct();\n    List<Expression> groupBy=plainSelect.getGroupByColumnReferences();\n    List<OrderByElement> orderBy=plainSelect.getOrderByElements();\n    if (CollectionUtils.isEmpty(groupBy) && CollectionUtils.isNotEmpty(orderBy)) {\n      plainSelect.setOrderByElements(null);\n      sqlInfo.setOrderBy(false);\n    }\n    for (    SelectItem item : plainSelect.getSelectItems()) {\n      if (item.toString().contains(\"?\")) {\n        sqlInfo.setSql(SqlUtils.getOriginalCountSql(selectStatement.toString()));\n        return sqlInfo;\n      }\n    }\n    if (distinct != null || CollectionUtils.isNotEmpty(groupBy)) {\n      sqlInfo.setSql(SqlUtils.getOriginalCountSql(selectStatement.toString()));\n      return sqlInfo;\n    }\n    plainSelect.setSelectItems(countSelectItem);\n    sqlInfo.setSql(selectStatement.toString());\n    return sqlInfo;\n  }\n catch (  Throwable e) {\n    sqlInfo.setSql(SqlUtils.getOriginalCountSql(sql));\n    return sqlInfo;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 193,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 80,
        "startColumnNumber" : 20,
        "endLineNumber" : 80,
        "endColumnNumber" : 35
      },
      "nodeContext" : "return sqlInfo;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.baomidou.mybatisplus.plugins.parser.SqlInfo"
  }, {
    "nodeContext" : "sqlInfo",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 85,
      "startColumnNumber" : 16,
      "endLineNumber" : 85,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 85,
        "startColumnNumber" : 16,
        "endLineNumber" : 85,
        "endColumnNumber" : 88
      },
      "nodeContext" : "sqlInfo.setSql(SqlUtils.getOriginalCountSql(selectStatement.toString()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 85,
        "startColumnNumber" : 16,
        "endLineNumber" : 85,
        "endColumnNumber" : 89
      },
      "nodeContext" : "sqlInfo.setSql(SqlUtils.getOriginalCountSql(selectStatement.toString()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 137,
        "startLineNumber" : 84,
        "startColumnNumber" : 73,
        "endLineNumber" : 87,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  sqlInfo.setSql(SqlUtils.getOriginalCountSql(selectStatement.toString()));\n  return sqlInfo;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 198,
        "startLineNumber" : 84,
        "startColumnNumber" : 12,
        "endLineNumber" : 87,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (distinct != null || CollectionUtils.isNotEmpty(groupBy)) {\n  sqlInfo.setSql(SqlUtils.getOriginalCountSql(selectStatement.toString()));\n  return sqlInfo;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 22,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1457,
        "startLineNumber" : 64,
        "startColumnNumber" : 12,
        "endLineNumber" : 92,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Select selectStatement=(Select)CCJSqlParserUtil.parse(sql);\n  PlainSelect plainSelect=(PlainSelect)selectStatement.getSelectBody();\n  Distinct distinct=plainSelect.getDistinct();\n  List<Expression> groupBy=plainSelect.getGroupByColumnReferences();\n  List<OrderByElement> orderBy=plainSelect.getOrderByElements();\n  if (CollectionUtils.isEmpty(groupBy) && CollectionUtils.isNotEmpty(orderBy)) {\n    plainSelect.setOrderByElements(null);\n    sqlInfo.setOrderBy(false);\n  }\n  for (  SelectItem item : plainSelect.getSelectItems()) {\n    if (item.toString().contains(\"?\")) {\n      sqlInfo.setSql(SqlUtils.getOriginalCountSql(selectStatement.toString()));\n      return sqlInfo;\n    }\n  }\n  if (distinct != null || CollectionUtils.isNotEmpty(groupBy)) {\n    sqlInfo.setSql(SqlUtils.getOriginalCountSql(selectStatement.toString()));\n    return sqlInfo;\n  }\n  plainSelect.setSelectItems(countSelectItem);\n  sqlInfo.setSql(selectStatement.toString());\n  return sqlInfo;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 140,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1611,
        "startLineNumber" : 64,
        "startColumnNumber" : 8,
        "endLineNumber" : 96,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  Select selectStatement=(Select)CCJSqlParserUtil.parse(sql);\n  PlainSelect plainSelect=(PlainSelect)selectStatement.getSelectBody();\n  Distinct distinct=plainSelect.getDistinct();\n  List<Expression> groupBy=plainSelect.getGroupByColumnReferences();\n  List<OrderByElement> orderBy=plainSelect.getOrderByElements();\n  if (CollectionUtils.isEmpty(groupBy) && CollectionUtils.isNotEmpty(orderBy)) {\n    plainSelect.setOrderByElements(null);\n    sqlInfo.setOrderBy(false);\n  }\n  for (  SelectItem item : plainSelect.getSelectItems()) {\n    if (item.toString().contains(\"?\")) {\n      sqlInfo.setSql(SqlUtils.getOriginalCountSql(selectStatement.toString()));\n      return sqlInfo;\n    }\n  }\n  if (distinct != null || CollectionUtils.isNotEmpty(groupBy)) {\n    sqlInfo.setSql(SqlUtils.getOriginalCountSql(selectStatement.toString()));\n    return sqlInfo;\n  }\n  plainSelect.setSelectItems(countSelectItem);\n  sqlInfo.setSql(selectStatement.toString());\n  return sqlInfo;\n}\n catch (Throwable e) {\n  sqlInfo.setSql(SqlUtils.getOriginalCountSql(sql));\n  return sqlInfo;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 157,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1790,
        "startLineNumber" : 59,
        "startColumnNumber" : 66,
        "endLineNumber" : 97,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (logger.isDebugEnabled()) {\n    logger.debug(\" JsqlParserCountOptimize sql=\" + sql);\n  }\n  SqlInfo sqlInfo=SqlInfo.newInstance();\n  try {\n    Select selectStatement=(Select)CCJSqlParserUtil.parse(sql);\n    PlainSelect plainSelect=(PlainSelect)selectStatement.getSelectBody();\n    Distinct distinct=plainSelect.getDistinct();\n    List<Expression> groupBy=plainSelect.getGroupByColumnReferences();\n    List<OrderByElement> orderBy=plainSelect.getOrderByElements();\n    if (CollectionUtils.isEmpty(groupBy) && CollectionUtils.isNotEmpty(orderBy)) {\n      plainSelect.setOrderByElements(null);\n      sqlInfo.setOrderBy(false);\n    }\n    for (    SelectItem item : plainSelect.getSelectItems()) {\n      if (item.toString().contains(\"?\")) {\n        sqlInfo.setSql(SqlUtils.getOriginalCountSql(selectStatement.toString()));\n        return sqlInfo;\n      }\n    }\n    if (distinct != null || CollectionUtils.isNotEmpty(groupBy)) {\n      sqlInfo.setSql(SqlUtils.getOriginalCountSql(selectStatement.toString()));\n      return sqlInfo;\n    }\n    plainSelect.setSelectItems(countSelectItem);\n    sqlInfo.setSql(selectStatement.toString());\n    return sqlInfo;\n  }\n catch (  Throwable e) {\n    sqlInfo.setSql(SqlUtils.getOriginalCountSql(sql));\n    return sqlInfo;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 178,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1866,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 97,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public SqlInfo optimizeSql(MetaObject metaObject,String sql){\n  if (logger.isDebugEnabled()) {\n    logger.debug(\" JsqlParserCountOptimize sql=\" + sql);\n  }\n  SqlInfo sqlInfo=SqlInfo.newInstance();\n  try {\n    Select selectStatement=(Select)CCJSqlParserUtil.parse(sql);\n    PlainSelect plainSelect=(PlainSelect)selectStatement.getSelectBody();\n    Distinct distinct=plainSelect.getDistinct();\n    List<Expression> groupBy=plainSelect.getGroupByColumnReferences();\n    List<OrderByElement> orderBy=plainSelect.getOrderByElements();\n    if (CollectionUtils.isEmpty(groupBy) && CollectionUtils.isNotEmpty(orderBy)) {\n      plainSelect.setOrderByElements(null);\n      sqlInfo.setOrderBy(false);\n    }\n    for (    SelectItem item : plainSelect.getSelectItems()) {\n      if (item.toString().contains(\"?\")) {\n        sqlInfo.setSql(SqlUtils.getOriginalCountSql(selectStatement.toString()));\n        return sqlInfo;\n      }\n    }\n    if (distinct != null || CollectionUtils.isNotEmpty(groupBy)) {\n      sqlInfo.setSql(SqlUtils.getOriginalCountSql(selectStatement.toString()));\n      return sqlInfo;\n    }\n    plainSelect.setSelectItems(countSelectItem);\n    sqlInfo.setSql(selectStatement.toString());\n    return sqlInfo;\n  }\n catch (  Throwable e) {\n    sqlInfo.setSql(SqlUtils.getOriginalCountSql(sql));\n    return sqlInfo;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 193,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 85,
        "startColumnNumber" : 16,
        "endLineNumber" : 85,
        "endColumnNumber" : 89
      },
      "nodeContext" : "sqlInfo.setSql(SqlUtils.getOriginalCountSql(selectStatement.toString()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.baomidou.mybatisplus.plugins.parser.SqlInfo"
  }, {
    "nodeContext" : "sqlInfo",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 86,
      "startColumnNumber" : 23,
      "endLineNumber" : 86,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 86,
        "startColumnNumber" : 16,
        "endLineNumber" : 86,
        "endColumnNumber" : 31
      },
      "nodeContext" : "return sqlInfo;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 137,
        "startLineNumber" : 84,
        "startColumnNumber" : 73,
        "endLineNumber" : 87,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  sqlInfo.setSql(SqlUtils.getOriginalCountSql(selectStatement.toString()));\n  return sqlInfo;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 198,
        "startLineNumber" : 84,
        "startColumnNumber" : 12,
        "endLineNumber" : 87,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (distinct != null || CollectionUtils.isNotEmpty(groupBy)) {\n  sqlInfo.setSql(SqlUtils.getOriginalCountSql(selectStatement.toString()));\n  return sqlInfo;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 22,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1457,
        "startLineNumber" : 64,
        "startColumnNumber" : 12,
        "endLineNumber" : 92,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Select selectStatement=(Select)CCJSqlParserUtil.parse(sql);\n  PlainSelect plainSelect=(PlainSelect)selectStatement.getSelectBody();\n  Distinct distinct=plainSelect.getDistinct();\n  List<Expression> groupBy=plainSelect.getGroupByColumnReferences();\n  List<OrderByElement> orderBy=plainSelect.getOrderByElements();\n  if (CollectionUtils.isEmpty(groupBy) && CollectionUtils.isNotEmpty(orderBy)) {\n    plainSelect.setOrderByElements(null);\n    sqlInfo.setOrderBy(false);\n  }\n  for (  SelectItem item : plainSelect.getSelectItems()) {\n    if (item.toString().contains(\"?\")) {\n      sqlInfo.setSql(SqlUtils.getOriginalCountSql(selectStatement.toString()));\n      return sqlInfo;\n    }\n  }\n  if (distinct != null || CollectionUtils.isNotEmpty(groupBy)) {\n    sqlInfo.setSql(SqlUtils.getOriginalCountSql(selectStatement.toString()));\n    return sqlInfo;\n  }\n  plainSelect.setSelectItems(countSelectItem);\n  sqlInfo.setSql(selectStatement.toString());\n  return sqlInfo;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 140,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1611,
        "startLineNumber" : 64,
        "startColumnNumber" : 8,
        "endLineNumber" : 96,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  Select selectStatement=(Select)CCJSqlParserUtil.parse(sql);\n  PlainSelect plainSelect=(PlainSelect)selectStatement.getSelectBody();\n  Distinct distinct=plainSelect.getDistinct();\n  List<Expression> groupBy=plainSelect.getGroupByColumnReferences();\n  List<OrderByElement> orderBy=plainSelect.getOrderByElements();\n  if (CollectionUtils.isEmpty(groupBy) && CollectionUtils.isNotEmpty(orderBy)) {\n    plainSelect.setOrderByElements(null);\n    sqlInfo.setOrderBy(false);\n  }\n  for (  SelectItem item : plainSelect.getSelectItems()) {\n    if (item.toString().contains(\"?\")) {\n      sqlInfo.setSql(SqlUtils.getOriginalCountSql(selectStatement.toString()));\n      return sqlInfo;\n    }\n  }\n  if (distinct != null || CollectionUtils.isNotEmpty(groupBy)) {\n    sqlInfo.setSql(SqlUtils.getOriginalCountSql(selectStatement.toString()));\n    return sqlInfo;\n  }\n  plainSelect.setSelectItems(countSelectItem);\n  sqlInfo.setSql(selectStatement.toString());\n  return sqlInfo;\n}\n catch (Throwable e) {\n  sqlInfo.setSql(SqlUtils.getOriginalCountSql(sql));\n  return sqlInfo;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 157,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1790,
        "startLineNumber" : 59,
        "startColumnNumber" : 66,
        "endLineNumber" : 97,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (logger.isDebugEnabled()) {\n    logger.debug(\" JsqlParserCountOptimize sql=\" + sql);\n  }\n  SqlInfo sqlInfo=SqlInfo.newInstance();\n  try {\n    Select selectStatement=(Select)CCJSqlParserUtil.parse(sql);\n    PlainSelect plainSelect=(PlainSelect)selectStatement.getSelectBody();\n    Distinct distinct=plainSelect.getDistinct();\n    List<Expression> groupBy=plainSelect.getGroupByColumnReferences();\n    List<OrderByElement> orderBy=plainSelect.getOrderByElements();\n    if (CollectionUtils.isEmpty(groupBy) && CollectionUtils.isNotEmpty(orderBy)) {\n      plainSelect.setOrderByElements(null);\n      sqlInfo.setOrderBy(false);\n    }\n    for (    SelectItem item : plainSelect.getSelectItems()) {\n      if (item.toString().contains(\"?\")) {\n        sqlInfo.setSql(SqlUtils.getOriginalCountSql(selectStatement.toString()));\n        return sqlInfo;\n      }\n    }\n    if (distinct != null || CollectionUtils.isNotEmpty(groupBy)) {\n      sqlInfo.setSql(SqlUtils.getOriginalCountSql(selectStatement.toString()));\n      return sqlInfo;\n    }\n    plainSelect.setSelectItems(countSelectItem);\n    sqlInfo.setSql(selectStatement.toString());\n    return sqlInfo;\n  }\n catch (  Throwable e) {\n    sqlInfo.setSql(SqlUtils.getOriginalCountSql(sql));\n    return sqlInfo;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 178,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1866,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 97,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public SqlInfo optimizeSql(MetaObject metaObject,String sql){\n  if (logger.isDebugEnabled()) {\n    logger.debug(\" JsqlParserCountOptimize sql=\" + sql);\n  }\n  SqlInfo sqlInfo=SqlInfo.newInstance();\n  try {\n    Select selectStatement=(Select)CCJSqlParserUtil.parse(sql);\n    PlainSelect plainSelect=(PlainSelect)selectStatement.getSelectBody();\n    Distinct distinct=plainSelect.getDistinct();\n    List<Expression> groupBy=plainSelect.getGroupByColumnReferences();\n    List<OrderByElement> orderBy=plainSelect.getOrderByElements();\n    if (CollectionUtils.isEmpty(groupBy) && CollectionUtils.isNotEmpty(orderBy)) {\n      plainSelect.setOrderByElements(null);\n      sqlInfo.setOrderBy(false);\n    }\n    for (    SelectItem item : plainSelect.getSelectItems()) {\n      if (item.toString().contains(\"?\")) {\n        sqlInfo.setSql(SqlUtils.getOriginalCountSql(selectStatement.toString()));\n        return sqlInfo;\n      }\n    }\n    if (distinct != null || CollectionUtils.isNotEmpty(groupBy)) {\n      sqlInfo.setSql(SqlUtils.getOriginalCountSql(selectStatement.toString()));\n      return sqlInfo;\n    }\n    plainSelect.setSelectItems(countSelectItem);\n    sqlInfo.setSql(selectStatement.toString());\n    return sqlInfo;\n  }\n catch (  Throwable e) {\n    sqlInfo.setSql(SqlUtils.getOriginalCountSql(sql));\n    return sqlInfo;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 193,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 86,
        "startColumnNumber" : 16,
        "endLineNumber" : 86,
        "endColumnNumber" : 31
      },
      "nodeContext" : "return sqlInfo;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.baomidou.mybatisplus.plugins.parser.SqlInfo"
  }, {
    "nodeContext" : "sqlInfo",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 90,
      "startColumnNumber" : 12,
      "endLineNumber" : 90,
      "endColumnNumber" : 19
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 90,
        "startColumnNumber" : 12,
        "endLineNumber" : 90,
        "endColumnNumber" : 54
      },
      "nodeContext" : "sqlInfo.setSql(selectStatement.toString())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 90,
        "startColumnNumber" : 12,
        "endLineNumber" : 90,
        "endColumnNumber" : 55
      },
      "nodeContext" : "sqlInfo.setSql(selectStatement.toString());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1457,
        "startLineNumber" : 64,
        "startColumnNumber" : 12,
        "endLineNumber" : 92,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Select selectStatement=(Select)CCJSqlParserUtil.parse(sql);\n  PlainSelect plainSelect=(PlainSelect)selectStatement.getSelectBody();\n  Distinct distinct=plainSelect.getDistinct();\n  List<Expression> groupBy=plainSelect.getGroupByColumnReferences();\n  List<OrderByElement> orderBy=plainSelect.getOrderByElements();\n  if (CollectionUtils.isEmpty(groupBy) && CollectionUtils.isNotEmpty(orderBy)) {\n    plainSelect.setOrderByElements(null);\n    sqlInfo.setOrderBy(false);\n  }\n  for (  SelectItem item : plainSelect.getSelectItems()) {\n    if (item.toString().contains(\"?\")) {\n      sqlInfo.setSql(SqlUtils.getOriginalCountSql(selectStatement.toString()));\n      return sqlInfo;\n    }\n  }\n  if (distinct != null || CollectionUtils.isNotEmpty(groupBy)) {\n    sqlInfo.setSql(SqlUtils.getOriginalCountSql(selectStatement.toString()));\n    return sqlInfo;\n  }\n  plainSelect.setSelectItems(countSelectItem);\n  sqlInfo.setSql(selectStatement.toString());\n  return sqlInfo;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 140,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1611,
        "startLineNumber" : 64,
        "startColumnNumber" : 8,
        "endLineNumber" : 96,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  Select selectStatement=(Select)CCJSqlParserUtil.parse(sql);\n  PlainSelect plainSelect=(PlainSelect)selectStatement.getSelectBody();\n  Distinct distinct=plainSelect.getDistinct();\n  List<Expression> groupBy=plainSelect.getGroupByColumnReferences();\n  List<OrderByElement> orderBy=plainSelect.getOrderByElements();\n  if (CollectionUtils.isEmpty(groupBy) && CollectionUtils.isNotEmpty(orderBy)) {\n    plainSelect.setOrderByElements(null);\n    sqlInfo.setOrderBy(false);\n  }\n  for (  SelectItem item : plainSelect.getSelectItems()) {\n    if (item.toString().contains(\"?\")) {\n      sqlInfo.setSql(SqlUtils.getOriginalCountSql(selectStatement.toString()));\n      return sqlInfo;\n    }\n  }\n  if (distinct != null || CollectionUtils.isNotEmpty(groupBy)) {\n    sqlInfo.setSql(SqlUtils.getOriginalCountSql(selectStatement.toString()));\n    return sqlInfo;\n  }\n  plainSelect.setSelectItems(countSelectItem);\n  sqlInfo.setSql(selectStatement.toString());\n  return sqlInfo;\n}\n catch (Throwable e) {\n  sqlInfo.setSql(SqlUtils.getOriginalCountSql(sql));\n  return sqlInfo;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 157,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1790,
        "startLineNumber" : 59,
        "startColumnNumber" : 66,
        "endLineNumber" : 97,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (logger.isDebugEnabled()) {\n    logger.debug(\" JsqlParserCountOptimize sql=\" + sql);\n  }\n  SqlInfo sqlInfo=SqlInfo.newInstance();\n  try {\n    Select selectStatement=(Select)CCJSqlParserUtil.parse(sql);\n    PlainSelect plainSelect=(PlainSelect)selectStatement.getSelectBody();\n    Distinct distinct=plainSelect.getDistinct();\n    List<Expression> groupBy=plainSelect.getGroupByColumnReferences();\n    List<OrderByElement> orderBy=plainSelect.getOrderByElements();\n    if (CollectionUtils.isEmpty(groupBy) && CollectionUtils.isNotEmpty(orderBy)) {\n      plainSelect.setOrderByElements(null);\n      sqlInfo.setOrderBy(false);\n    }\n    for (    SelectItem item : plainSelect.getSelectItems()) {\n      if (item.toString().contains(\"?\")) {\n        sqlInfo.setSql(SqlUtils.getOriginalCountSql(selectStatement.toString()));\n        return sqlInfo;\n      }\n    }\n    if (distinct != null || CollectionUtils.isNotEmpty(groupBy)) {\n      sqlInfo.setSql(SqlUtils.getOriginalCountSql(selectStatement.toString()));\n      return sqlInfo;\n    }\n    plainSelect.setSelectItems(countSelectItem);\n    sqlInfo.setSql(selectStatement.toString());\n    return sqlInfo;\n  }\n catch (  Throwable e) {\n    sqlInfo.setSql(SqlUtils.getOriginalCountSql(sql));\n    return sqlInfo;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 178,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1866,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 97,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public SqlInfo optimizeSql(MetaObject metaObject,String sql){\n  if (logger.isDebugEnabled()) {\n    logger.debug(\" JsqlParserCountOptimize sql=\" + sql);\n  }\n  SqlInfo sqlInfo=SqlInfo.newInstance();\n  try {\n    Select selectStatement=(Select)CCJSqlParserUtil.parse(sql);\n    PlainSelect plainSelect=(PlainSelect)selectStatement.getSelectBody();\n    Distinct distinct=plainSelect.getDistinct();\n    List<Expression> groupBy=plainSelect.getGroupByColumnReferences();\n    List<OrderByElement> orderBy=plainSelect.getOrderByElements();\n    if (CollectionUtils.isEmpty(groupBy) && CollectionUtils.isNotEmpty(orderBy)) {\n      plainSelect.setOrderByElements(null);\n      sqlInfo.setOrderBy(false);\n    }\n    for (    SelectItem item : plainSelect.getSelectItems()) {\n      if (item.toString().contains(\"?\")) {\n        sqlInfo.setSql(SqlUtils.getOriginalCountSql(selectStatement.toString()));\n        return sqlInfo;\n      }\n    }\n    if (distinct != null || CollectionUtils.isNotEmpty(groupBy)) {\n      sqlInfo.setSql(SqlUtils.getOriginalCountSql(selectStatement.toString()));\n      return sqlInfo;\n    }\n    plainSelect.setSelectItems(countSelectItem);\n    sqlInfo.setSql(selectStatement.toString());\n    return sqlInfo;\n  }\n catch (  Throwable e) {\n    sqlInfo.setSql(SqlUtils.getOriginalCountSql(sql));\n    return sqlInfo;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 193,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 90,
        "startColumnNumber" : 12,
        "endLineNumber" : 90,
        "endColumnNumber" : 55
      },
      "nodeContext" : "sqlInfo.setSql(selectStatement.toString());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.baomidou.mybatisplus.plugins.parser.SqlInfo"
  }, {
    "nodeContext" : "sqlInfo",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 91,
      "startColumnNumber" : 19,
      "endLineNumber" : 91,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 91,
        "startColumnNumber" : 12,
        "endLineNumber" : 91,
        "endColumnNumber" : 27
      },
      "nodeContext" : "return sqlInfo;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1457,
        "startLineNumber" : 64,
        "startColumnNumber" : 12,
        "endLineNumber" : 92,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Select selectStatement=(Select)CCJSqlParserUtil.parse(sql);\n  PlainSelect plainSelect=(PlainSelect)selectStatement.getSelectBody();\n  Distinct distinct=plainSelect.getDistinct();\n  List<Expression> groupBy=plainSelect.getGroupByColumnReferences();\n  List<OrderByElement> orderBy=plainSelect.getOrderByElements();\n  if (CollectionUtils.isEmpty(groupBy) && CollectionUtils.isNotEmpty(orderBy)) {\n    plainSelect.setOrderByElements(null);\n    sqlInfo.setOrderBy(false);\n  }\n  for (  SelectItem item : plainSelect.getSelectItems()) {\n    if (item.toString().contains(\"?\")) {\n      sqlInfo.setSql(SqlUtils.getOriginalCountSql(selectStatement.toString()));\n      return sqlInfo;\n    }\n  }\n  if (distinct != null || CollectionUtils.isNotEmpty(groupBy)) {\n    sqlInfo.setSql(SqlUtils.getOriginalCountSql(selectStatement.toString()));\n    return sqlInfo;\n  }\n  plainSelect.setSelectItems(countSelectItem);\n  sqlInfo.setSql(selectStatement.toString());\n  return sqlInfo;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 140,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1611,
        "startLineNumber" : 64,
        "startColumnNumber" : 8,
        "endLineNumber" : 96,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  Select selectStatement=(Select)CCJSqlParserUtil.parse(sql);\n  PlainSelect plainSelect=(PlainSelect)selectStatement.getSelectBody();\n  Distinct distinct=plainSelect.getDistinct();\n  List<Expression> groupBy=plainSelect.getGroupByColumnReferences();\n  List<OrderByElement> orderBy=plainSelect.getOrderByElements();\n  if (CollectionUtils.isEmpty(groupBy) && CollectionUtils.isNotEmpty(orderBy)) {\n    plainSelect.setOrderByElements(null);\n    sqlInfo.setOrderBy(false);\n  }\n  for (  SelectItem item : plainSelect.getSelectItems()) {\n    if (item.toString().contains(\"?\")) {\n      sqlInfo.setSql(SqlUtils.getOriginalCountSql(selectStatement.toString()));\n      return sqlInfo;\n    }\n  }\n  if (distinct != null || CollectionUtils.isNotEmpty(groupBy)) {\n    sqlInfo.setSql(SqlUtils.getOriginalCountSql(selectStatement.toString()));\n    return sqlInfo;\n  }\n  plainSelect.setSelectItems(countSelectItem);\n  sqlInfo.setSql(selectStatement.toString());\n  return sqlInfo;\n}\n catch (Throwable e) {\n  sqlInfo.setSql(SqlUtils.getOriginalCountSql(sql));\n  return sqlInfo;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 157,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1790,
        "startLineNumber" : 59,
        "startColumnNumber" : 66,
        "endLineNumber" : 97,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (logger.isDebugEnabled()) {\n    logger.debug(\" JsqlParserCountOptimize sql=\" + sql);\n  }\n  SqlInfo sqlInfo=SqlInfo.newInstance();\n  try {\n    Select selectStatement=(Select)CCJSqlParserUtil.parse(sql);\n    PlainSelect plainSelect=(PlainSelect)selectStatement.getSelectBody();\n    Distinct distinct=plainSelect.getDistinct();\n    List<Expression> groupBy=plainSelect.getGroupByColumnReferences();\n    List<OrderByElement> orderBy=plainSelect.getOrderByElements();\n    if (CollectionUtils.isEmpty(groupBy) && CollectionUtils.isNotEmpty(orderBy)) {\n      plainSelect.setOrderByElements(null);\n      sqlInfo.setOrderBy(false);\n    }\n    for (    SelectItem item : plainSelect.getSelectItems()) {\n      if (item.toString().contains(\"?\")) {\n        sqlInfo.setSql(SqlUtils.getOriginalCountSql(selectStatement.toString()));\n        return sqlInfo;\n      }\n    }\n    if (distinct != null || CollectionUtils.isNotEmpty(groupBy)) {\n      sqlInfo.setSql(SqlUtils.getOriginalCountSql(selectStatement.toString()));\n      return sqlInfo;\n    }\n    plainSelect.setSelectItems(countSelectItem);\n    sqlInfo.setSql(selectStatement.toString());\n    return sqlInfo;\n  }\n catch (  Throwable e) {\n    sqlInfo.setSql(SqlUtils.getOriginalCountSql(sql));\n    return sqlInfo;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 178,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1866,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 97,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public SqlInfo optimizeSql(MetaObject metaObject,String sql){\n  if (logger.isDebugEnabled()) {\n    logger.debug(\" JsqlParserCountOptimize sql=\" + sql);\n  }\n  SqlInfo sqlInfo=SqlInfo.newInstance();\n  try {\n    Select selectStatement=(Select)CCJSqlParserUtil.parse(sql);\n    PlainSelect plainSelect=(PlainSelect)selectStatement.getSelectBody();\n    Distinct distinct=plainSelect.getDistinct();\n    List<Expression> groupBy=plainSelect.getGroupByColumnReferences();\n    List<OrderByElement> orderBy=plainSelect.getOrderByElements();\n    if (CollectionUtils.isEmpty(groupBy) && CollectionUtils.isNotEmpty(orderBy)) {\n      plainSelect.setOrderByElements(null);\n      sqlInfo.setOrderBy(false);\n    }\n    for (    SelectItem item : plainSelect.getSelectItems()) {\n      if (item.toString().contains(\"?\")) {\n        sqlInfo.setSql(SqlUtils.getOriginalCountSql(selectStatement.toString()));\n        return sqlInfo;\n      }\n    }\n    if (distinct != null || CollectionUtils.isNotEmpty(groupBy)) {\n      sqlInfo.setSql(SqlUtils.getOriginalCountSql(selectStatement.toString()));\n      return sqlInfo;\n    }\n    plainSelect.setSelectItems(countSelectItem);\n    sqlInfo.setSql(selectStatement.toString());\n    return sqlInfo;\n  }\n catch (  Throwable e) {\n    sqlInfo.setSql(SqlUtils.getOriginalCountSql(sql));\n    return sqlInfo;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 193,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 91,
        "startColumnNumber" : 12,
        "endLineNumber" : 91,
        "endColumnNumber" : 27
      },
      "nodeContext" : "return sqlInfo;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.baomidou.mybatisplus.plugins.parser.SqlInfo"
  }, {
    "nodeContext" : "sqlInfo",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 94,
      "startColumnNumber" : 12,
      "endLineNumber" : 94,
      "endColumnNumber" : 19
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 94,
        "startColumnNumber" : 12,
        "endLineNumber" : 94,
        "endColumnNumber" : 61
      },
      "nodeContext" : "sqlInfo.setSql(SqlUtils.getOriginalCountSql(sql))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 94,
        "startColumnNumber" : 12,
        "endLineNumber" : 94,
        "endColumnNumber" : 62
      },
      "nodeContext" : "sqlInfo.setSql(SqlUtils.getOriginalCountSql(sql));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 129,
        "startLineNumber" : 92,
        "startColumnNumber" : 30,
        "endLineNumber" : 96,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  sqlInfo.setSql(SqlUtils.getOriginalCountSql(sql));\n  return sqlInfo;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 149,
        "startLineNumber" : 92,
        "startColumnNumber" : 10,
        "endLineNumber" : 96,
        "endColumnNumber" : 9
      },
      "nodeContext" : "catch (Throwable e) {\n  sqlInfo.setSql(SqlUtils.getOriginalCountSql(sql));\n  return sqlInfo;\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1611,
        "startLineNumber" : 64,
        "startColumnNumber" : 8,
        "endLineNumber" : 96,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  Select selectStatement=(Select)CCJSqlParserUtil.parse(sql);\n  PlainSelect plainSelect=(PlainSelect)selectStatement.getSelectBody();\n  Distinct distinct=plainSelect.getDistinct();\n  List<Expression> groupBy=plainSelect.getGroupByColumnReferences();\n  List<OrderByElement> orderBy=plainSelect.getOrderByElements();\n  if (CollectionUtils.isEmpty(groupBy) && CollectionUtils.isNotEmpty(orderBy)) {\n    plainSelect.setOrderByElements(null);\n    sqlInfo.setOrderBy(false);\n  }\n  for (  SelectItem item : plainSelect.getSelectItems()) {\n    if (item.toString().contains(\"?\")) {\n      sqlInfo.setSql(SqlUtils.getOriginalCountSql(selectStatement.toString()));\n      return sqlInfo;\n    }\n  }\n  if (distinct != null || CollectionUtils.isNotEmpty(groupBy)) {\n    sqlInfo.setSql(SqlUtils.getOriginalCountSql(selectStatement.toString()));\n    return sqlInfo;\n  }\n  plainSelect.setSelectItems(countSelectItem);\n  sqlInfo.setSql(selectStatement.toString());\n  return sqlInfo;\n}\n catch (Throwable e) {\n  sqlInfo.setSql(SqlUtils.getOriginalCountSql(sql));\n  return sqlInfo;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 157,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1790,
        "startLineNumber" : 59,
        "startColumnNumber" : 66,
        "endLineNumber" : 97,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (logger.isDebugEnabled()) {\n    logger.debug(\" JsqlParserCountOptimize sql=\" + sql);\n  }\n  SqlInfo sqlInfo=SqlInfo.newInstance();\n  try {\n    Select selectStatement=(Select)CCJSqlParserUtil.parse(sql);\n    PlainSelect plainSelect=(PlainSelect)selectStatement.getSelectBody();\n    Distinct distinct=plainSelect.getDistinct();\n    List<Expression> groupBy=plainSelect.getGroupByColumnReferences();\n    List<OrderByElement> orderBy=plainSelect.getOrderByElements();\n    if (CollectionUtils.isEmpty(groupBy) && CollectionUtils.isNotEmpty(orderBy)) {\n      plainSelect.setOrderByElements(null);\n      sqlInfo.setOrderBy(false);\n    }\n    for (    SelectItem item : plainSelect.getSelectItems()) {\n      if (item.toString().contains(\"?\")) {\n        sqlInfo.setSql(SqlUtils.getOriginalCountSql(selectStatement.toString()));\n        return sqlInfo;\n      }\n    }\n    if (distinct != null || CollectionUtils.isNotEmpty(groupBy)) {\n      sqlInfo.setSql(SqlUtils.getOriginalCountSql(selectStatement.toString()));\n      return sqlInfo;\n    }\n    plainSelect.setSelectItems(countSelectItem);\n    sqlInfo.setSql(selectStatement.toString());\n    return sqlInfo;\n  }\n catch (  Throwable e) {\n    sqlInfo.setSql(SqlUtils.getOriginalCountSql(sql));\n    return sqlInfo;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 178,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1866,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 97,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public SqlInfo optimizeSql(MetaObject metaObject,String sql){\n  if (logger.isDebugEnabled()) {\n    logger.debug(\" JsqlParserCountOptimize sql=\" + sql);\n  }\n  SqlInfo sqlInfo=SqlInfo.newInstance();\n  try {\n    Select selectStatement=(Select)CCJSqlParserUtil.parse(sql);\n    PlainSelect plainSelect=(PlainSelect)selectStatement.getSelectBody();\n    Distinct distinct=plainSelect.getDistinct();\n    List<Expression> groupBy=plainSelect.getGroupByColumnReferences();\n    List<OrderByElement> orderBy=plainSelect.getOrderByElements();\n    if (CollectionUtils.isEmpty(groupBy) && CollectionUtils.isNotEmpty(orderBy)) {\n      plainSelect.setOrderByElements(null);\n      sqlInfo.setOrderBy(false);\n    }\n    for (    SelectItem item : plainSelect.getSelectItems()) {\n      if (item.toString().contains(\"?\")) {\n        sqlInfo.setSql(SqlUtils.getOriginalCountSql(selectStatement.toString()));\n        return sqlInfo;\n      }\n    }\n    if (distinct != null || CollectionUtils.isNotEmpty(groupBy)) {\n      sqlInfo.setSql(SqlUtils.getOriginalCountSql(selectStatement.toString()));\n      return sqlInfo;\n    }\n    plainSelect.setSelectItems(countSelectItem);\n    sqlInfo.setSql(selectStatement.toString());\n    return sqlInfo;\n  }\n catch (  Throwable e) {\n    sqlInfo.setSql(SqlUtils.getOriginalCountSql(sql));\n    return sqlInfo;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 193,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 94,
        "startColumnNumber" : 12,
        "endLineNumber" : 94,
        "endColumnNumber" : 62
      },
      "nodeContext" : "sqlInfo.setSql(SqlUtils.getOriginalCountSql(sql));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.baomidou.mybatisplus.plugins.parser.SqlInfo"
  }, {
    "nodeContext" : "sqlInfo",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 95,
      "startColumnNumber" : 19,
      "endLineNumber" : 95,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 95,
        "startColumnNumber" : 12,
        "endLineNumber" : 95,
        "endColumnNumber" : 27
      },
      "nodeContext" : "return sqlInfo;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 129,
        "startLineNumber" : 92,
        "startColumnNumber" : 30,
        "endLineNumber" : 96,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  sqlInfo.setSql(SqlUtils.getOriginalCountSql(sql));\n  return sqlInfo;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 149,
        "startLineNumber" : 92,
        "startColumnNumber" : 10,
        "endLineNumber" : 96,
        "endColumnNumber" : 9
      },
      "nodeContext" : "catch (Throwable e) {\n  sqlInfo.setSql(SqlUtils.getOriginalCountSql(sql));\n  return sqlInfo;\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1611,
        "startLineNumber" : 64,
        "startColumnNumber" : 8,
        "endLineNumber" : 96,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  Select selectStatement=(Select)CCJSqlParserUtil.parse(sql);\n  PlainSelect plainSelect=(PlainSelect)selectStatement.getSelectBody();\n  Distinct distinct=plainSelect.getDistinct();\n  List<Expression> groupBy=plainSelect.getGroupByColumnReferences();\n  List<OrderByElement> orderBy=plainSelect.getOrderByElements();\n  if (CollectionUtils.isEmpty(groupBy) && CollectionUtils.isNotEmpty(orderBy)) {\n    plainSelect.setOrderByElements(null);\n    sqlInfo.setOrderBy(false);\n  }\n  for (  SelectItem item : plainSelect.getSelectItems()) {\n    if (item.toString().contains(\"?\")) {\n      sqlInfo.setSql(SqlUtils.getOriginalCountSql(selectStatement.toString()));\n      return sqlInfo;\n    }\n  }\n  if (distinct != null || CollectionUtils.isNotEmpty(groupBy)) {\n    sqlInfo.setSql(SqlUtils.getOriginalCountSql(selectStatement.toString()));\n    return sqlInfo;\n  }\n  plainSelect.setSelectItems(countSelectItem);\n  sqlInfo.setSql(selectStatement.toString());\n  return sqlInfo;\n}\n catch (Throwable e) {\n  sqlInfo.setSql(SqlUtils.getOriginalCountSql(sql));\n  return sqlInfo;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 157,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1790,
        "startLineNumber" : 59,
        "startColumnNumber" : 66,
        "endLineNumber" : 97,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (logger.isDebugEnabled()) {\n    logger.debug(\" JsqlParserCountOptimize sql=\" + sql);\n  }\n  SqlInfo sqlInfo=SqlInfo.newInstance();\n  try {\n    Select selectStatement=(Select)CCJSqlParserUtil.parse(sql);\n    PlainSelect plainSelect=(PlainSelect)selectStatement.getSelectBody();\n    Distinct distinct=plainSelect.getDistinct();\n    List<Expression> groupBy=plainSelect.getGroupByColumnReferences();\n    List<OrderByElement> orderBy=plainSelect.getOrderByElements();\n    if (CollectionUtils.isEmpty(groupBy) && CollectionUtils.isNotEmpty(orderBy)) {\n      plainSelect.setOrderByElements(null);\n      sqlInfo.setOrderBy(false);\n    }\n    for (    SelectItem item : plainSelect.getSelectItems()) {\n      if (item.toString().contains(\"?\")) {\n        sqlInfo.setSql(SqlUtils.getOriginalCountSql(selectStatement.toString()));\n        return sqlInfo;\n      }\n    }\n    if (distinct != null || CollectionUtils.isNotEmpty(groupBy)) {\n      sqlInfo.setSql(SqlUtils.getOriginalCountSql(selectStatement.toString()));\n      return sqlInfo;\n    }\n    plainSelect.setSelectItems(countSelectItem);\n    sqlInfo.setSql(selectStatement.toString());\n    return sqlInfo;\n  }\n catch (  Throwable e) {\n    sqlInfo.setSql(SqlUtils.getOriginalCountSql(sql));\n    return sqlInfo;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 178,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1866,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 97,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public SqlInfo optimizeSql(MetaObject metaObject,String sql){\n  if (logger.isDebugEnabled()) {\n    logger.debug(\" JsqlParserCountOptimize sql=\" + sql);\n  }\n  SqlInfo sqlInfo=SqlInfo.newInstance();\n  try {\n    Select selectStatement=(Select)CCJSqlParserUtil.parse(sql);\n    PlainSelect plainSelect=(PlainSelect)selectStatement.getSelectBody();\n    Distinct distinct=plainSelect.getDistinct();\n    List<Expression> groupBy=plainSelect.getGroupByColumnReferences();\n    List<OrderByElement> orderBy=plainSelect.getOrderByElements();\n    if (CollectionUtils.isEmpty(groupBy) && CollectionUtils.isNotEmpty(orderBy)) {\n      plainSelect.setOrderByElements(null);\n      sqlInfo.setOrderBy(false);\n    }\n    for (    SelectItem item : plainSelect.getSelectItems()) {\n      if (item.toString().contains(\"?\")) {\n        sqlInfo.setSql(SqlUtils.getOriginalCountSql(selectStatement.toString()));\n        return sqlInfo;\n      }\n    }\n    if (distinct != null || CollectionUtils.isNotEmpty(groupBy)) {\n      sqlInfo.setSql(SqlUtils.getOriginalCountSql(selectStatement.toString()));\n      return sqlInfo;\n    }\n    plainSelect.setSelectItems(countSelectItem);\n    sqlInfo.setSql(selectStatement.toString());\n    return sqlInfo;\n  }\n catch (  Throwable e) {\n    sqlInfo.setSql(SqlUtils.getOriginalCountSql(sql));\n    return sqlInfo;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 193,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 95,
        "startColumnNumber" : 12,
        "endLineNumber" : 95,
        "endColumnNumber" : 27
      },
      "nodeContext" : "return sqlInfo;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.baomidou.mybatisplus.plugins.parser.SqlInfo"
  } ],
  "positionList" : [ {
    "charLength" : 7,
    "startLineNumber" : 74,
    "startColumnNumber" : 16,
    "endLineNumber" : 74,
    "endColumnNumber" : 23
  }, {
    "charLength" : 7,
    "startLineNumber" : 79,
    "startColumnNumber" : 20,
    "endLineNumber" : 79,
    "endColumnNumber" : 27
  }, {
    "charLength" : 7,
    "startLineNumber" : 80,
    "startColumnNumber" : 27,
    "endLineNumber" : 80,
    "endColumnNumber" : 34
  }, {
    "charLength" : 7,
    "startLineNumber" : 85,
    "startColumnNumber" : 16,
    "endLineNumber" : 85,
    "endColumnNumber" : 23
  }, {
    "charLength" : 7,
    "startLineNumber" : 86,
    "startColumnNumber" : 23,
    "endLineNumber" : 86,
    "endColumnNumber" : 30
  }, {
    "charLength" : 7,
    "startLineNumber" : 90,
    "startColumnNumber" : 12,
    "endLineNumber" : 90,
    "endColumnNumber" : 19
  }, {
    "charLength" : 7,
    "startLineNumber" : 91,
    "startColumnNumber" : 19,
    "endLineNumber" : 91,
    "endColumnNumber" : 26
  }, {
    "charLength" : 7,
    "startLineNumber" : 94,
    "startColumnNumber" : 12,
    "endLineNumber" : 94,
    "endColumnNumber" : 19
  }, {
    "charLength" : 7,
    "startLineNumber" : 95,
    "startColumnNumber" : 19,
    "endLineNumber" : 95,
    "endColumnNumber" : 26
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 7
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 7
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 1
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 1
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 1
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 1
  } ]
}