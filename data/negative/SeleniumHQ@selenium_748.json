{
  "id" : 748,
  "expression" : "UTF_8",
  "projectName" : "SeleniumHQ@selenium",
  "commitID" : "3326b903133634c1cb4bd48e90c9f54af8addb0a",
  "filePath" : "java/server/src/org/openqa/selenium/events/zeromq/UnboundZmqEventBus.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "UTF_8",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 112,
      "startColumnNumber" : 71,
      "endLineNumber" : 112,
      "endColumnNumber" : 76
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 112,
        "startColumnNumber" : 33,
        "endLineNumber" : 112,
        "endColumnNumber" : 77
      },
      "nodeContext" : "new String(socket.recv(ZMQ.DONTWAIT),UTF_8)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 112,
        "startColumnNumber" : 24,
        "endLineNumber" : 112,
        "endColumnNumber" : 78
      },
      "nodeContext" : "new Type(new String(socket.recv(ZMQ.DONTWAIT),UTF_8))",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 112,
        "startColumnNumber" : 17,
        "endLineNumber" : 112,
        "endColumnNumber" : 78
      },
      "nodeContext" : "type=new Type(new String(socket.recv(ZMQ.DONTWAIT),UTF_8))",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 112,
        "startColumnNumber" : 12,
        "endLineNumber" : 112,
        "endColumnNumber" : 79
      },
      "nodeContext" : "Type type=new Type(new String(socket.recv(ZMQ.DONTWAIT),UTF_8));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 18,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 789,
        "startLineNumber" : 109,
        "startColumnNumber" : 32,
        "endLineNumber" : 130,
        "endColumnNumber" : 11
      },
      "nodeContext" : "{\n  ZMQ.Socket socket=poller.getSocket(0);\n  Type type=new Type(new String(socket.recv(ZMQ.DONTWAIT),UTF_8));\n  UUID id=UUID.fromString(new String(socket.recv(ZMQ.DONTWAIT),UTF_8));\n  String data=new String(socket.recv(ZMQ.DONTWAIT),UTF_8);\n  Object converted=JSON.toType(data,Object.class);\n  Event event=new Event(id,type,converted);\n  if (recentMessages.contains(id)) {\n    continue;\n  }\n  recentMessages.add(id);\n  List<Consumer<Event>> typeListeners=listeners.get(type);\n  if (typeListeners == null) {\n    continue;\n  }\n  typeListeners.parallelStream().forEach(listener -> listener.accept(event));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 132,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 811,
        "startLineNumber" : 109,
        "startColumnNumber" : 10,
        "endLineNumber" : 130,
        "endColumnNumber" : 11
      },
      "nodeContext" : "if (poller.pollin(0)) {\n  ZMQ.Socket socket=poller.getSocket(0);\n  Type type=new Type(new String(socket.recv(ZMQ.DONTWAIT),UTF_8));\n  UUID id=UUID.fromString(new String(socket.recv(ZMQ.DONTWAIT),UTF_8));\n  String data=new String(socket.recv(ZMQ.DONTWAIT),UTF_8);\n  Object converted=JSON.toType(data,Object.class);\n  Event event=new Event(id,type,converted);\n  if (recentMessages.contains(id)) {\n    continue;\n  }\n  recentMessages.add(id);\n  List<Consumer<Event>> typeListeners=listeners.get(type);\n  if (typeListeners == null) {\n    continue;\n  }\n  typeListeners.parallelStream().forEach(listener -> listener.accept(event));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 137,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 902,
        "startLineNumber" : 105,
        "startColumnNumber" : 12,
        "endLineNumber" : 131,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  poller.poll(150);\n  pollingStarted.lazySet(true);\n  if (poller.pollin(0)) {\n    ZMQ.Socket socket=poller.getSocket(0);\n    Type type=new Type(new String(socket.recv(ZMQ.DONTWAIT),UTF_8));\n    UUID id=UUID.fromString(new String(socket.recv(ZMQ.DONTWAIT),UTF_8));\n    String data=new String(socket.recv(ZMQ.DONTWAIT),UTF_8);\n    Object converted=JSON.toType(data,Object.class);\n    Event event=new Event(id,type,converted);\n    if (recentMessages.contains(id)) {\n      continue;\n    }\n    recentMessages.add(id);\n    List<Consumer<Event>> typeListeners=listeners.get(type);\n    if (typeListeners == null) {\n      continue;\n    }\n    typeListeners.parallelStream().forEach(listener -> listener.accept(event));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 148,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1097,
        "startLineNumber" : 105,
        "startColumnNumber" : 8,
        "endLineNumber" : 137,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  poller.poll(150);\n  pollingStarted.lazySet(true);\n  if (poller.pollin(0)) {\n    ZMQ.Socket socket=poller.getSocket(0);\n    Type type=new Type(new String(socket.recv(ZMQ.DONTWAIT),UTF_8));\n    UUID id=UUID.fromString(new String(socket.recv(ZMQ.DONTWAIT),UTF_8));\n    String data=new String(socket.recv(ZMQ.DONTWAIT),UTF_8);\n    Object converted=JSON.toType(data,Object.class);\n    Event event=new Event(id,type,converted);\n    if (recentMessages.contains(id)) {\n      continue;\n    }\n    recentMessages.add(id);\n    List<Consumer<Event>> typeListeners=listeners.get(type);\n    if (typeListeners == null) {\n      continue;\n    }\n    typeListeners.parallelStream().forEach(listener -> listener.accept(event));\n  }\n}\n catch (Throwable e) {\n  if (e.getCause() != null && e.getCause() instanceof AssertionError) {\n  }\n else {\n    throw e;\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 172,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 1115,
        "startLineNumber" : 104,
        "startColumnNumber" : 54,
        "endLineNumber" : 138,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  try {\n    poller.poll(150);\n    pollingStarted.lazySet(true);\n    if (poller.pollin(0)) {\n      ZMQ.Socket socket=poller.getSocket(0);\n      Type type=new Type(new String(socket.recv(ZMQ.DONTWAIT),UTF_8));\n      UUID id=UUID.fromString(new String(socket.recv(ZMQ.DONTWAIT),UTF_8));\n      String data=new String(socket.recv(ZMQ.DONTWAIT),UTF_8);\n      Object converted=JSON.toType(data,Object.class);\n      Event event=new Event(id,type,converted);\n      if (recentMessages.contains(id)) {\n        continue;\n      }\n      recentMessages.add(id);\n      List<Consumer<Event>> typeListeners=listeners.get(type);\n      if (typeListeners == null) {\n        continue;\n      }\n      typeListeners.parallelStream().forEach(listener -> listener.accept(event));\n    }\n  }\n catch (  Throwable e) {\n    if (e.getCause() != null && e.getCause() instanceof AssertionError) {\n    }\n else {\n      throw e;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 173,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1163,
        "startLineNumber" : 104,
        "startColumnNumber" : 6,
        "endLineNumber" : 138,
        "endColumnNumber" : 7
      },
      "nodeContext" : "while (!Thread.currentThread().isInterrupted()) {\n  try {\n    poller.poll(150);\n    pollingStarted.lazySet(true);\n    if (poller.pollin(0)) {\n      ZMQ.Socket socket=poller.getSocket(0);\n      Type type=new Type(new String(socket.recv(ZMQ.DONTWAIT),UTF_8));\n      UUID id=UUID.fromString(new String(socket.recv(ZMQ.DONTWAIT),UTF_8));\n      String data=new String(socket.recv(ZMQ.DONTWAIT),UTF_8);\n      Object converted=JSON.toType(data,Object.class);\n      Event event=new Event(id,type,converted);\n      if (recentMessages.contains(id)) {\n        continue;\n      }\n      recentMessages.add(id);\n      List<Consumer<Event>> typeListeners=listeners.get(type);\n      if (typeListeners == null) {\n        continue;\n      }\n      typeListeners.parallelStream().forEach(listener -> listener.accept(event));\n    }\n  }\n catch (  Throwable e) {\n    if (e.getCause() != null && e.getCause() instanceof AssertionError) {\n    }\n else {\n      throw e;\n    }\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 180,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LambdaExpression,body]",
      "nodePosition" : {
        "charLength" : 1208,
        "startLineNumber" : 102,
        "startColumnNumber" : 26,
        "endLineNumber" : 139,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  LOG.info(\"Bus started\");\n  while (!Thread.currentThread().isInterrupted()) {\n    try {\n      poller.poll(150);\n      pollingStarted.lazySet(true);\n      if (poller.pollin(0)) {\n        ZMQ.Socket socket=poller.getSocket(0);\n        Type type=new Type(new String(socket.recv(ZMQ.DONTWAIT),UTF_8));\n        UUID id=UUID.fromString(new String(socket.recv(ZMQ.DONTWAIT),UTF_8));\n        String data=new String(socket.recv(ZMQ.DONTWAIT),UTF_8);\n        Object converted=JSON.toType(data,Object.class);\n        Event event=new Event(id,type,converted);\n        if (recentMessages.contains(id)) {\n          continue;\n        }\n        recentMessages.add(id);\n        List<Consumer<Event>> typeListeners=listeners.get(type);\n        if (typeListeners == null) {\n          continue;\n        }\n        typeListeners.parallelStream().forEach(listener -> listener.accept(event));\n      }\n    }\n catch (    Throwable e) {\n      if (e.getCause() != null && e.getCause() instanceof AssertionError) {\n      }\n else {\n        throw e;\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 186,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 1214,
        "startLineNumber" : 102,
        "startColumnNumber" : 20,
        "endLineNumber" : 139,
        "endColumnNumber" : 5
      },
      "nodeContext" : "() -> {\n  LOG.info(\"Bus started\");\n  while (!Thread.currentThread().isInterrupted()) {\n    try {\n      poller.poll(150);\n      pollingStarted.lazySet(true);\n      if (poller.pollin(0)) {\n        ZMQ.Socket socket=poller.getSocket(0);\n        Type type=new Type(new String(socket.recv(ZMQ.DONTWAIT),UTF_8));\n        UUID id=UUID.fromString(new String(socket.recv(ZMQ.DONTWAIT),UTF_8));\n        String data=new String(socket.recv(ZMQ.DONTWAIT),UTF_8);\n        Object converted=JSON.toType(data,Object.class);\n        Event event=new Event(id,type,converted);\n        if (recentMessages.contains(id)) {\n          continue;\n        }\n        recentMessages.add(id);\n        List<Consumer<Event>> typeListeners=listeners.get(type);\n        if (typeListeners == null) {\n          continue;\n        }\n        typeListeners.parallelStream().forEach(listener -> listener.accept(event));\n      }\n    }\n catch (    Throwable e) {\n      if (e.getCause() != null && e.getCause() instanceof AssertionError) {\n      }\n else {\n        throw e;\n      }\n    }\n  }\n}\n",
      "nodeType" : "LambdaExpression",
      "astNodeNumber" : 187,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 112,
        "startColumnNumber" : 12,
        "endLineNumber" : 112,
        "endColumnNumber" : 79
      },
      "nodeContext" : "Type type=new Type(new String(socket.recv(ZMQ.DONTWAIT),UTF_8));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 18,
      "astHeight" : 7
    },
    "tokenLength" : 2,
    "type" : "java.nio.charset.Charset"
  }, {
    "nodeContext" : "UTF_8",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 113,
      "startColumnNumber" : 76,
      "endLineNumber" : 113,
      "endColumnNumber" : 81
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 113,
        "startColumnNumber" : 38,
        "endLineNumber" : 113,
        "endColumnNumber" : 82
      },
      "nodeContext" : "new String(socket.recv(ZMQ.DONTWAIT),UTF_8)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 113,
        "startColumnNumber" : 22,
        "endLineNumber" : 113,
        "endColumnNumber" : 83
      },
      "nodeContext" : "UUID.fromString(new String(socket.recv(ZMQ.DONTWAIT),UTF_8))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 113,
        "startColumnNumber" : 17,
        "endLineNumber" : 113,
        "endColumnNumber" : 83
      },
      "nodeContext" : "id=UUID.fromString(new String(socket.recv(ZMQ.DONTWAIT),UTF_8))",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 113,
        "startColumnNumber" : 12,
        "endLineNumber" : 113,
        "endColumnNumber" : 84
      },
      "nodeContext" : "UUID id=UUID.fromString(new String(socket.recv(ZMQ.DONTWAIT),UTF_8));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 18,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 789,
        "startLineNumber" : 109,
        "startColumnNumber" : 32,
        "endLineNumber" : 130,
        "endColumnNumber" : 11
      },
      "nodeContext" : "{\n  ZMQ.Socket socket=poller.getSocket(0);\n  Type type=new Type(new String(socket.recv(ZMQ.DONTWAIT),UTF_8));\n  UUID id=UUID.fromString(new String(socket.recv(ZMQ.DONTWAIT),UTF_8));\n  String data=new String(socket.recv(ZMQ.DONTWAIT),UTF_8);\n  Object converted=JSON.toType(data,Object.class);\n  Event event=new Event(id,type,converted);\n  if (recentMessages.contains(id)) {\n    continue;\n  }\n  recentMessages.add(id);\n  List<Consumer<Event>> typeListeners=listeners.get(type);\n  if (typeListeners == null) {\n    continue;\n  }\n  typeListeners.parallelStream().forEach(listener -> listener.accept(event));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 132,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 811,
        "startLineNumber" : 109,
        "startColumnNumber" : 10,
        "endLineNumber" : 130,
        "endColumnNumber" : 11
      },
      "nodeContext" : "if (poller.pollin(0)) {\n  ZMQ.Socket socket=poller.getSocket(0);\n  Type type=new Type(new String(socket.recv(ZMQ.DONTWAIT),UTF_8));\n  UUID id=UUID.fromString(new String(socket.recv(ZMQ.DONTWAIT),UTF_8));\n  String data=new String(socket.recv(ZMQ.DONTWAIT),UTF_8);\n  Object converted=JSON.toType(data,Object.class);\n  Event event=new Event(id,type,converted);\n  if (recentMessages.contains(id)) {\n    continue;\n  }\n  recentMessages.add(id);\n  List<Consumer<Event>> typeListeners=listeners.get(type);\n  if (typeListeners == null) {\n    continue;\n  }\n  typeListeners.parallelStream().forEach(listener -> listener.accept(event));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 137,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 902,
        "startLineNumber" : 105,
        "startColumnNumber" : 12,
        "endLineNumber" : 131,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  poller.poll(150);\n  pollingStarted.lazySet(true);\n  if (poller.pollin(0)) {\n    ZMQ.Socket socket=poller.getSocket(0);\n    Type type=new Type(new String(socket.recv(ZMQ.DONTWAIT),UTF_8));\n    UUID id=UUID.fromString(new String(socket.recv(ZMQ.DONTWAIT),UTF_8));\n    String data=new String(socket.recv(ZMQ.DONTWAIT),UTF_8);\n    Object converted=JSON.toType(data,Object.class);\n    Event event=new Event(id,type,converted);\n    if (recentMessages.contains(id)) {\n      continue;\n    }\n    recentMessages.add(id);\n    List<Consumer<Event>> typeListeners=listeners.get(type);\n    if (typeListeners == null) {\n      continue;\n    }\n    typeListeners.parallelStream().forEach(listener -> listener.accept(event));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 148,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1097,
        "startLineNumber" : 105,
        "startColumnNumber" : 8,
        "endLineNumber" : 137,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  poller.poll(150);\n  pollingStarted.lazySet(true);\n  if (poller.pollin(0)) {\n    ZMQ.Socket socket=poller.getSocket(0);\n    Type type=new Type(new String(socket.recv(ZMQ.DONTWAIT),UTF_8));\n    UUID id=UUID.fromString(new String(socket.recv(ZMQ.DONTWAIT),UTF_8));\n    String data=new String(socket.recv(ZMQ.DONTWAIT),UTF_8);\n    Object converted=JSON.toType(data,Object.class);\n    Event event=new Event(id,type,converted);\n    if (recentMessages.contains(id)) {\n      continue;\n    }\n    recentMessages.add(id);\n    List<Consumer<Event>> typeListeners=listeners.get(type);\n    if (typeListeners == null) {\n      continue;\n    }\n    typeListeners.parallelStream().forEach(listener -> listener.accept(event));\n  }\n}\n catch (Throwable e) {\n  if (e.getCause() != null && e.getCause() instanceof AssertionError) {\n  }\n else {\n    throw e;\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 172,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 1115,
        "startLineNumber" : 104,
        "startColumnNumber" : 54,
        "endLineNumber" : 138,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  try {\n    poller.poll(150);\n    pollingStarted.lazySet(true);\n    if (poller.pollin(0)) {\n      ZMQ.Socket socket=poller.getSocket(0);\n      Type type=new Type(new String(socket.recv(ZMQ.DONTWAIT),UTF_8));\n      UUID id=UUID.fromString(new String(socket.recv(ZMQ.DONTWAIT),UTF_8));\n      String data=new String(socket.recv(ZMQ.DONTWAIT),UTF_8);\n      Object converted=JSON.toType(data,Object.class);\n      Event event=new Event(id,type,converted);\n      if (recentMessages.contains(id)) {\n        continue;\n      }\n      recentMessages.add(id);\n      List<Consumer<Event>> typeListeners=listeners.get(type);\n      if (typeListeners == null) {\n        continue;\n      }\n      typeListeners.parallelStream().forEach(listener -> listener.accept(event));\n    }\n  }\n catch (  Throwable e) {\n    if (e.getCause() != null && e.getCause() instanceof AssertionError) {\n    }\n else {\n      throw e;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 173,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1163,
        "startLineNumber" : 104,
        "startColumnNumber" : 6,
        "endLineNumber" : 138,
        "endColumnNumber" : 7
      },
      "nodeContext" : "while (!Thread.currentThread().isInterrupted()) {\n  try {\n    poller.poll(150);\n    pollingStarted.lazySet(true);\n    if (poller.pollin(0)) {\n      ZMQ.Socket socket=poller.getSocket(0);\n      Type type=new Type(new String(socket.recv(ZMQ.DONTWAIT),UTF_8));\n      UUID id=UUID.fromString(new String(socket.recv(ZMQ.DONTWAIT),UTF_8));\n      String data=new String(socket.recv(ZMQ.DONTWAIT),UTF_8);\n      Object converted=JSON.toType(data,Object.class);\n      Event event=new Event(id,type,converted);\n      if (recentMessages.contains(id)) {\n        continue;\n      }\n      recentMessages.add(id);\n      List<Consumer<Event>> typeListeners=listeners.get(type);\n      if (typeListeners == null) {\n        continue;\n      }\n      typeListeners.parallelStream().forEach(listener -> listener.accept(event));\n    }\n  }\n catch (  Throwable e) {\n    if (e.getCause() != null && e.getCause() instanceof AssertionError) {\n    }\n else {\n      throw e;\n    }\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 180,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LambdaExpression,body]",
      "nodePosition" : {
        "charLength" : 1208,
        "startLineNumber" : 102,
        "startColumnNumber" : 26,
        "endLineNumber" : 139,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  LOG.info(\"Bus started\");\n  while (!Thread.currentThread().isInterrupted()) {\n    try {\n      poller.poll(150);\n      pollingStarted.lazySet(true);\n      if (poller.pollin(0)) {\n        ZMQ.Socket socket=poller.getSocket(0);\n        Type type=new Type(new String(socket.recv(ZMQ.DONTWAIT),UTF_8));\n        UUID id=UUID.fromString(new String(socket.recv(ZMQ.DONTWAIT),UTF_8));\n        String data=new String(socket.recv(ZMQ.DONTWAIT),UTF_8);\n        Object converted=JSON.toType(data,Object.class);\n        Event event=new Event(id,type,converted);\n        if (recentMessages.contains(id)) {\n          continue;\n        }\n        recentMessages.add(id);\n        List<Consumer<Event>> typeListeners=listeners.get(type);\n        if (typeListeners == null) {\n          continue;\n        }\n        typeListeners.parallelStream().forEach(listener -> listener.accept(event));\n      }\n    }\n catch (    Throwable e) {\n      if (e.getCause() != null && e.getCause() instanceof AssertionError) {\n      }\n else {\n        throw e;\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 186,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 1214,
        "startLineNumber" : 102,
        "startColumnNumber" : 20,
        "endLineNumber" : 139,
        "endColumnNumber" : 5
      },
      "nodeContext" : "() -> {\n  LOG.info(\"Bus started\");\n  while (!Thread.currentThread().isInterrupted()) {\n    try {\n      poller.poll(150);\n      pollingStarted.lazySet(true);\n      if (poller.pollin(0)) {\n        ZMQ.Socket socket=poller.getSocket(0);\n        Type type=new Type(new String(socket.recv(ZMQ.DONTWAIT),UTF_8));\n        UUID id=UUID.fromString(new String(socket.recv(ZMQ.DONTWAIT),UTF_8));\n        String data=new String(socket.recv(ZMQ.DONTWAIT),UTF_8);\n        Object converted=JSON.toType(data,Object.class);\n        Event event=new Event(id,type,converted);\n        if (recentMessages.contains(id)) {\n          continue;\n        }\n        recentMessages.add(id);\n        List<Consumer<Event>> typeListeners=listeners.get(type);\n        if (typeListeners == null) {\n          continue;\n        }\n        typeListeners.parallelStream().forEach(listener -> listener.accept(event));\n      }\n    }\n catch (    Throwable e) {\n      if (e.getCause() != null && e.getCause() instanceof AssertionError) {\n      }\n else {\n        throw e;\n      }\n    }\n  }\n}\n",
      "nodeType" : "LambdaExpression",
      "astNodeNumber" : 187,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 113,
        "startColumnNumber" : 12,
        "endLineNumber" : 113,
        "endColumnNumber" : 84
      },
      "nodeContext" : "UUID id=UUID.fromString(new String(socket.recv(ZMQ.DONTWAIT),UTF_8));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 18,
      "astHeight" : 7
    },
    "tokenLength" : 2,
    "type" : "java.nio.charset.Charset"
  }, {
    "nodeContext" : "UTF_8",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 114,
      "startColumnNumber" : 64,
      "endLineNumber" : 114,
      "endColumnNumber" : 69
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 114,
        "startColumnNumber" : 26,
        "endLineNumber" : 114,
        "endColumnNumber" : 70
      },
      "nodeContext" : "new String(socket.recv(ZMQ.DONTWAIT),UTF_8)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 114,
        "startColumnNumber" : 19,
        "endLineNumber" : 114,
        "endColumnNumber" : 70
      },
      "nodeContext" : "data=new String(socket.recv(ZMQ.DONTWAIT),UTF_8)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 114,
        "startColumnNumber" : 12,
        "endLineNumber" : 114,
        "endColumnNumber" : 71
      },
      "nodeContext" : "String data=new String(socket.recv(ZMQ.DONTWAIT),UTF_8);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 789,
        "startLineNumber" : 109,
        "startColumnNumber" : 32,
        "endLineNumber" : 130,
        "endColumnNumber" : 11
      },
      "nodeContext" : "{\n  ZMQ.Socket socket=poller.getSocket(0);\n  Type type=new Type(new String(socket.recv(ZMQ.DONTWAIT),UTF_8));\n  UUID id=UUID.fromString(new String(socket.recv(ZMQ.DONTWAIT),UTF_8));\n  String data=new String(socket.recv(ZMQ.DONTWAIT),UTF_8);\n  Object converted=JSON.toType(data,Object.class);\n  Event event=new Event(id,type,converted);\n  if (recentMessages.contains(id)) {\n    continue;\n  }\n  recentMessages.add(id);\n  List<Consumer<Event>> typeListeners=listeners.get(type);\n  if (typeListeners == null) {\n    continue;\n  }\n  typeListeners.parallelStream().forEach(listener -> listener.accept(event));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 132,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 811,
        "startLineNumber" : 109,
        "startColumnNumber" : 10,
        "endLineNumber" : 130,
        "endColumnNumber" : 11
      },
      "nodeContext" : "if (poller.pollin(0)) {\n  ZMQ.Socket socket=poller.getSocket(0);\n  Type type=new Type(new String(socket.recv(ZMQ.DONTWAIT),UTF_8));\n  UUID id=UUID.fromString(new String(socket.recv(ZMQ.DONTWAIT),UTF_8));\n  String data=new String(socket.recv(ZMQ.DONTWAIT),UTF_8);\n  Object converted=JSON.toType(data,Object.class);\n  Event event=new Event(id,type,converted);\n  if (recentMessages.contains(id)) {\n    continue;\n  }\n  recentMessages.add(id);\n  List<Consumer<Event>> typeListeners=listeners.get(type);\n  if (typeListeners == null) {\n    continue;\n  }\n  typeListeners.parallelStream().forEach(listener -> listener.accept(event));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 137,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 902,
        "startLineNumber" : 105,
        "startColumnNumber" : 12,
        "endLineNumber" : 131,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  poller.poll(150);\n  pollingStarted.lazySet(true);\n  if (poller.pollin(0)) {\n    ZMQ.Socket socket=poller.getSocket(0);\n    Type type=new Type(new String(socket.recv(ZMQ.DONTWAIT),UTF_8));\n    UUID id=UUID.fromString(new String(socket.recv(ZMQ.DONTWAIT),UTF_8));\n    String data=new String(socket.recv(ZMQ.DONTWAIT),UTF_8);\n    Object converted=JSON.toType(data,Object.class);\n    Event event=new Event(id,type,converted);\n    if (recentMessages.contains(id)) {\n      continue;\n    }\n    recentMessages.add(id);\n    List<Consumer<Event>> typeListeners=listeners.get(type);\n    if (typeListeners == null) {\n      continue;\n    }\n    typeListeners.parallelStream().forEach(listener -> listener.accept(event));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 148,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1097,
        "startLineNumber" : 105,
        "startColumnNumber" : 8,
        "endLineNumber" : 137,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  poller.poll(150);\n  pollingStarted.lazySet(true);\n  if (poller.pollin(0)) {\n    ZMQ.Socket socket=poller.getSocket(0);\n    Type type=new Type(new String(socket.recv(ZMQ.DONTWAIT),UTF_8));\n    UUID id=UUID.fromString(new String(socket.recv(ZMQ.DONTWAIT),UTF_8));\n    String data=new String(socket.recv(ZMQ.DONTWAIT),UTF_8);\n    Object converted=JSON.toType(data,Object.class);\n    Event event=new Event(id,type,converted);\n    if (recentMessages.contains(id)) {\n      continue;\n    }\n    recentMessages.add(id);\n    List<Consumer<Event>> typeListeners=listeners.get(type);\n    if (typeListeners == null) {\n      continue;\n    }\n    typeListeners.parallelStream().forEach(listener -> listener.accept(event));\n  }\n}\n catch (Throwable e) {\n  if (e.getCause() != null && e.getCause() instanceof AssertionError) {\n  }\n else {\n    throw e;\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 172,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 1115,
        "startLineNumber" : 104,
        "startColumnNumber" : 54,
        "endLineNumber" : 138,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  try {\n    poller.poll(150);\n    pollingStarted.lazySet(true);\n    if (poller.pollin(0)) {\n      ZMQ.Socket socket=poller.getSocket(0);\n      Type type=new Type(new String(socket.recv(ZMQ.DONTWAIT),UTF_8));\n      UUID id=UUID.fromString(new String(socket.recv(ZMQ.DONTWAIT),UTF_8));\n      String data=new String(socket.recv(ZMQ.DONTWAIT),UTF_8);\n      Object converted=JSON.toType(data,Object.class);\n      Event event=new Event(id,type,converted);\n      if (recentMessages.contains(id)) {\n        continue;\n      }\n      recentMessages.add(id);\n      List<Consumer<Event>> typeListeners=listeners.get(type);\n      if (typeListeners == null) {\n        continue;\n      }\n      typeListeners.parallelStream().forEach(listener -> listener.accept(event));\n    }\n  }\n catch (  Throwable e) {\n    if (e.getCause() != null && e.getCause() instanceof AssertionError) {\n    }\n else {\n      throw e;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 173,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1163,
        "startLineNumber" : 104,
        "startColumnNumber" : 6,
        "endLineNumber" : 138,
        "endColumnNumber" : 7
      },
      "nodeContext" : "while (!Thread.currentThread().isInterrupted()) {\n  try {\n    poller.poll(150);\n    pollingStarted.lazySet(true);\n    if (poller.pollin(0)) {\n      ZMQ.Socket socket=poller.getSocket(0);\n      Type type=new Type(new String(socket.recv(ZMQ.DONTWAIT),UTF_8));\n      UUID id=UUID.fromString(new String(socket.recv(ZMQ.DONTWAIT),UTF_8));\n      String data=new String(socket.recv(ZMQ.DONTWAIT),UTF_8);\n      Object converted=JSON.toType(data,Object.class);\n      Event event=new Event(id,type,converted);\n      if (recentMessages.contains(id)) {\n        continue;\n      }\n      recentMessages.add(id);\n      List<Consumer<Event>> typeListeners=listeners.get(type);\n      if (typeListeners == null) {\n        continue;\n      }\n      typeListeners.parallelStream().forEach(listener -> listener.accept(event));\n    }\n  }\n catch (  Throwable e) {\n    if (e.getCause() != null && e.getCause() instanceof AssertionError) {\n    }\n else {\n      throw e;\n    }\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 180,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LambdaExpression,body]",
      "nodePosition" : {
        "charLength" : 1208,
        "startLineNumber" : 102,
        "startColumnNumber" : 26,
        "endLineNumber" : 139,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  LOG.info(\"Bus started\");\n  while (!Thread.currentThread().isInterrupted()) {\n    try {\n      poller.poll(150);\n      pollingStarted.lazySet(true);\n      if (poller.pollin(0)) {\n        ZMQ.Socket socket=poller.getSocket(0);\n        Type type=new Type(new String(socket.recv(ZMQ.DONTWAIT),UTF_8));\n        UUID id=UUID.fromString(new String(socket.recv(ZMQ.DONTWAIT),UTF_8));\n        String data=new String(socket.recv(ZMQ.DONTWAIT),UTF_8);\n        Object converted=JSON.toType(data,Object.class);\n        Event event=new Event(id,type,converted);\n        if (recentMessages.contains(id)) {\n          continue;\n        }\n        recentMessages.add(id);\n        List<Consumer<Event>> typeListeners=listeners.get(type);\n        if (typeListeners == null) {\n          continue;\n        }\n        typeListeners.parallelStream().forEach(listener -> listener.accept(event));\n      }\n    }\n catch (    Throwable e) {\n      if (e.getCause() != null && e.getCause() instanceof AssertionError) {\n      }\n else {\n        throw e;\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 186,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 1214,
        "startLineNumber" : 102,
        "startColumnNumber" : 20,
        "endLineNumber" : 139,
        "endColumnNumber" : 5
      },
      "nodeContext" : "() -> {\n  LOG.info(\"Bus started\");\n  while (!Thread.currentThread().isInterrupted()) {\n    try {\n      poller.poll(150);\n      pollingStarted.lazySet(true);\n      if (poller.pollin(0)) {\n        ZMQ.Socket socket=poller.getSocket(0);\n        Type type=new Type(new String(socket.recv(ZMQ.DONTWAIT),UTF_8));\n        UUID id=UUID.fromString(new String(socket.recv(ZMQ.DONTWAIT),UTF_8));\n        String data=new String(socket.recv(ZMQ.DONTWAIT),UTF_8);\n        Object converted=JSON.toType(data,Object.class);\n        Event event=new Event(id,type,converted);\n        if (recentMessages.contains(id)) {\n          continue;\n        }\n        recentMessages.add(id);\n        List<Consumer<Event>> typeListeners=listeners.get(type);\n        if (typeListeners == null) {\n          continue;\n        }\n        typeListeners.parallelStream().forEach(listener -> listener.accept(event));\n      }\n    }\n catch (    Throwable e) {\n      if (e.getCause() != null && e.getCause() instanceof AssertionError) {\n      }\n else {\n        throw e;\n      }\n    }\n  }\n}\n",
      "nodeType" : "LambdaExpression",
      "astNodeNumber" : 187,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 114,
        "startColumnNumber" : 12,
        "endLineNumber" : 114,
        "endColumnNumber" : 71
      },
      "nodeContext" : "String data=new String(socket.recv(ZMQ.DONTWAIT),UTF_8);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    },
    "tokenLength" : 2,
    "type" : "java.nio.charset.Charset"
  } ],
  "positionList" : [ {
    "charLength" : 5,
    "startLineNumber" : 112,
    "startColumnNumber" : 71,
    "endLineNumber" : 112,
    "endColumnNumber" : 76
  }, {
    "charLength" : 5,
    "startLineNumber" : 113,
    "startColumnNumber" : 76,
    "endLineNumber" : 113,
    "endColumnNumber" : 81
  }, {
    "charLength" : 5,
    "startLineNumber" : 114,
    "startColumnNumber" : 64,
    "endLineNumber" : 114,
    "endColumnNumber" : 69
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  } ]
}