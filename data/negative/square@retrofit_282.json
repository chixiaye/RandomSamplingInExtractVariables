{
  "id" : 282,
  "expression" : "\"<--- END HTTP (0-byte body)\"",
  "projectName" : "square@retrofit",
  "commitID" : "757278c7ab7f6c8e5a40d16a5707c35e0f61c5ab",
  "filePath" : "/retrofit/src/test/java/retrofit/RestAdapterTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"<--- END HTTP (0-byte body)\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 29,
      "startLineNumber" : 315,
      "startColumnNumber" : 45,
      "endLineNumber" : 315,
      "endColumnNumber" : 74
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 315,
        "startColumnNumber" : 4,
        "endLineNumber" : 315,
        "endColumnNumber" : 75
      },
      "nodeContext" : "assertThat(logMessages.get(6)).isEqualTo(\"<--- END HTTP (0-byte body)\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 315,
        "startColumnNumber" : 4,
        "endLineNumber" : 315,
        "endColumnNumber" : 76
      },
      "nodeContext" : "assertThat(logMessages.get(6)).isEqualTo(\"<--- END HTTP (0-byte body)\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1246,
        "startLineNumber" : 287,
        "startColumnNumber" : 94,
        "endLineNumber" : 316,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final List<String> logMessages=new ArrayList<String>();\n  RestAdapter.Log log=new RestAdapter.Log(){\n    @Override public void log(    String message){\n      logMessages.add(message);\n    }\n  }\n;\n  Example example=new RestAdapter.Builder().setClient(mockClient).setExecutors(mockRequestExecutor,mockCallbackExecutor).setEndpoint(\"http://example.com\").setLog(log).setLogLevel(FULL).build().create(Example.class);\n  when(mockClient.execute(any(Request.class))).thenReturn(new Response(\"http://example.com/\",200,\"OK\",TWO_HEADERS,null));\n  example.something();\n  assertThat(logMessages).hasSize(7);\n  assertThat(logMessages.get(0)).isEqualTo(\"---> HTTP GET http://example.com/\");\n  assertThat(logMessages.get(1)).isEqualTo(\"Foo: Bar\");\n  assertThat(logMessages.get(2)).isEqualTo(\"---> END HTTP (no body)\");\n  assertThat(logMessages.get(3)).matches(\"<--- HTTP 200 http://example.com/ \\\\([0-9]+ms\\\\)\");\n  assertThat(logMessages.get(4)).isEqualTo(\"Content-Type: application/json\");\n  assertThat(logMessages.get(5)).isEqualTo(\"Content-Length: 42\");\n  assertThat(logMessages.get(6)).isEqualTo(\"<--- END HTTP (0-byte body)\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 180,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1338,
        "startLineNumber" : 287,
        "startColumnNumber" : 2,
        "endLineNumber" : 316,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void logSuccessfulRequestResponseFullWhenResponseBodyAbsent() throws Exception {\n  final List<String> logMessages=new ArrayList<String>();\n  RestAdapter.Log log=new RestAdapter.Log(){\n    @Override public void log(    String message){\n      logMessages.add(message);\n    }\n  }\n;\n  Example example=new RestAdapter.Builder().setClient(mockClient).setExecutors(mockRequestExecutor,mockCallbackExecutor).setEndpoint(\"http://example.com\").setLog(log).setLogLevel(FULL).build().create(Example.class);\n  when(mockClient.execute(any(Request.class))).thenReturn(new Response(\"http://example.com/\",200,\"OK\",TWO_HEADERS,null));\n  example.something();\n  assertThat(logMessages).hasSize(7);\n  assertThat(logMessages.get(0)).isEqualTo(\"---> HTTP GET http://example.com/\");\n  assertThat(logMessages.get(1)).isEqualTo(\"Foo: Bar\");\n  assertThat(logMessages.get(2)).isEqualTo(\"---> END HTTP (no body)\");\n  assertThat(logMessages.get(3)).matches(\"<--- HTTP 200 http://example.com/ \\\\([0-9]+ms\\\\)\");\n  assertThat(logMessages.get(4)).isEqualTo(\"Content-Type: application/json\");\n  assertThat(logMessages.get(5)).isEqualTo(\"Content-Length: 42\");\n  assertThat(logMessages.get(6)).isEqualTo(\"<--- END HTTP (0-byte body)\");\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 188,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 315,
        "startColumnNumber" : 4,
        "endLineNumber" : 315,
        "endColumnNumber" : 76
      },
      "nodeContext" : "assertThat(logMessages.get(6)).isEqualTo(\"<--- END HTTP (0-byte body)\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 5,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 29,
    "startLineNumber" : 315,
    "startColumnNumber" : 45,
    "endLineNumber" : 315,
    "endColumnNumber" : 74
  } ],
  "layoutRelationDataList" : [ ]
}