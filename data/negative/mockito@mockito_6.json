{
  "id" : 6,
  "expression" : "\" annotated with \"",
  "projectName" : "mockito@mockito",
  "commitID" : "7f036eb9ed79444adcec3a6c635870222b109e50",
  "filePath" : "/src/main/java/org/mockito/internal/configuration/IndependentAnnotationEngine.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\" annotated with \"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 90,
      "startColumnNumber" : 42,
      "endLineNumber" : 90,
      "endColumnNumber" : 60
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 200,
        "startLineNumber" : 88,
        "startColumnNumber" : 32,
        "endLineNumber" : 91,
        "endColumnNumber" : 52
      },
      "nodeContext" : "\"Problems setting field \" + field.getName() + \" annotated with \"+ annotation",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
      "nodePosition" : {
        "charLength" : 292,
        "startLineNumber" : 87,
        "startColumnNumber" : 30,
        "endLineNumber" : 92,
        "endColumnNumber" : 34
      },
      "nodeContext" : "new MockitoException(\"Problems setting field \" + field.getName() + \" annotated with \"+ annotation,e)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 299,
        "startLineNumber" : 87,
        "startColumnNumber" : 24,
        "endLineNumber" : 92,
        "endColumnNumber" : 35
      },
      "nodeContext" : "throw new MockitoException(\"Problems setting field \" + field.getName() + \" annotated with \"+ annotation,e);\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 494,
        "startLineNumber" : 83,
        "startColumnNumber" : 42,
        "endLineNumber" : 93,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  for (  ScopedMock scopedMock : scopedMocks) {\n    scopedMock.close();\n  }\n  throw new MockitoException(\"Problems setting field \" + field.getName() + \" annotated with \"+ annotation,e);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 24,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 514,
        "startLineNumber" : 83,
        "startColumnNumber" : 22,
        "endLineNumber" : 93,
        "endColumnNumber" : 21
      },
      "nodeContext" : "catch (Exception e) {\n  for (  ScopedMock scopedMock : scopedMocks) {\n    scopedMock.close();\n  }\n  throw new MockitoException(\"Problems setting field \" + field.getName() + \" annotated with \"+ annotation,e);\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 29,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 609,
        "startLineNumber" : 81,
        "startColumnNumber" : 20,
        "endLineNumber" : 93,
        "endColumnNumber" : 21
      },
      "nodeContext" : "try {\n  accessor.set(field,testInstance,mock);\n}\n catch (Exception e) {\n  for (  ScopedMock scopedMock : scopedMocks) {\n    scopedMock.close();\n  }\n  throw new MockitoException(\"Problems setting field \" + field.getName() + \" annotated with \"+ annotation,e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 38,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 847,
        "startLineNumber" : 77,
        "startColumnNumber" : 34,
        "endLineNumber" : 94,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  throwIfAlreadyAssigned(field,alreadyAssigned);\n  alreadyAssigned=true;\n  final MemberAccessor accessor=Plugins.getMemberAccessor();\n  try {\n    accessor.set(field,testInstance,mock);\n  }\n catch (  Exception e) {\n    for (    ScopedMock scopedMock : scopedMocks) {\n      scopedMock.close();\n    }\n    throw new MockitoException(\"Problems setting field \" + field.getName() + \" annotated with \"+ annotation,e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 57,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 865,
        "startLineNumber" : 77,
        "startColumnNumber" : 16,
        "endLineNumber" : 94,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (mock != null) {\n  throwIfAlreadyAssigned(field,alreadyAssigned);\n  alreadyAssigned=true;\n  final MemberAccessor accessor=Plugins.getMemberAccessor();\n  try {\n    accessor.set(field,testInstance,mock);\n  }\n catch (  Exception e) {\n    for (    ScopedMock scopedMock : scopedMocks) {\n      scopedMock.close();\n    }\n    throw new MockitoException(\"Problems setting field \" + field.getName() + \" annotated with \"+ annotation,e);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 61,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1091,
        "startLineNumber" : 72,
        "startColumnNumber" : 65,
        "endLineNumber" : 95,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Object mock=createMockFor(annotation,field);\n  if (mock instanceof ScopedMock) {\n    scopedMocks.add((ScopedMock)mock);\n  }\n  if (mock != null) {\n    throwIfAlreadyAssigned(field,alreadyAssigned);\n    alreadyAssigned=true;\n    final MemberAccessor accessor=Plugins.getMemberAccessor();\n    try {\n      accessor.set(field,testInstance,mock);\n    }\n catch (    Exception e) {\n      for (      ScopedMock scopedMock : scopedMocks) {\n        scopedMock.close();\n      }\n      throw new MockitoException(\"Problems setting field \" + field.getName() + \" annotated with \"+ annotation,e);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 85,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1144,
        "startLineNumber" : 72,
        "startColumnNumber" : 12,
        "endLineNumber" : 95,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (Annotation annotation : field.getAnnotations()) {\n  Object mock=createMockFor(annotation,field);\n  if (mock instanceof ScopedMock) {\n    scopedMocks.add((ScopedMock)mock);\n  }\n  if (mock != null) {\n    throwIfAlreadyAssigned(field,alreadyAssigned);\n    alreadyAssigned=true;\n    final MemberAccessor accessor=Plugins.getMemberAccessor();\n    try {\n      accessor.set(field,testInstance,mock);\n    }\n catch (    Exception e) {\n      for (      ScopedMock scopedMock : scopedMocks) {\n        scopedMock.close();\n      }\n      throw new MockitoException(\"Problems setting field \" + field.getName() + \" annotated with \"+ annotation,e);\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 93,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1216,
        "startLineNumber" : 70,
        "startColumnNumber" : 35,
        "endLineNumber" : 96,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  boolean alreadyAssigned=false;\n  for (  Annotation annotation : field.getAnnotations()) {\n    Object mock=createMockFor(annotation,field);\n    if (mock instanceof ScopedMock) {\n      scopedMocks.add((ScopedMock)mock);\n    }\n    if (mock != null) {\n      throwIfAlreadyAssigned(field,alreadyAssigned);\n      alreadyAssigned=true;\n      final MemberAccessor accessor=Plugins.getMemberAccessor();\n      try {\n        accessor.set(field,testInstance,mock);\n      }\n catch (      Exception e) {\n        for (        ScopedMock scopedMock : scopedMocks) {\n          scopedMock.close();\n        }\n        throw new MockitoException(\"Problems setting field \" + field.getName() + \" annotated with \"+ annotation,e);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 99,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1243,
        "startLineNumber" : 70,
        "startColumnNumber" : 8,
        "endLineNumber" : 96,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Field field : fields) {\n  boolean alreadyAssigned=false;\n  for (  Annotation annotation : field.getAnnotations()) {\n    Object mock=createMockFor(annotation,field);\n    if (mock instanceof ScopedMock) {\n      scopedMocks.add((ScopedMock)mock);\n    }\n    if (mock != null) {\n      throwIfAlreadyAssigned(field,alreadyAssigned);\n      alreadyAssigned=true;\n      final MemberAccessor accessor=Plugins.getMemberAccessor();\n      try {\n        accessor.set(field,testInstance,mock);\n      }\n catch (      Exception e) {\n        for (        ScopedMock scopedMock : scopedMocks) {\n          scopedMock.close();\n        }\n        throw new MockitoException(\"Problems setting field \" + field.getName() + \" annotated with \"+ annotation,e);\n      }\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 105,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1526,
        "startLineNumber" : 67,
        "startColumnNumber" : 70,
        "endLineNumber" : 102,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<ScopedMock> scopedMocks=new ArrayList<>();\n  Field[] fields=clazz.getDeclaredFields();\n  for (  Field field : fields) {\n    boolean alreadyAssigned=false;\n    for (    Annotation annotation : field.getAnnotations()) {\n      Object mock=createMockFor(annotation,field);\n      if (mock instanceof ScopedMock) {\n        scopedMocks.add((ScopedMock)mock);\n      }\n      if (mock != null) {\n        throwIfAlreadyAssigned(field,alreadyAssigned);\n        alreadyAssigned=true;\n        final MemberAccessor accessor=Plugins.getMemberAccessor();\n        try {\n          accessor.set(field,testInstance,mock);\n        }\n catch (        Exception e) {\n          for (          ScopedMock scopedMock : scopedMocks) {\n            scopedMock.close();\n          }\n          throw new MockitoException(\"Problems setting field \" + field.getName() + \" annotated with \"+ annotation,e);\n        }\n      }\n    }\n  }\n  return () -> {\n    for (    ScopedMock scopedMock : scopedMocks) {\n      scopedMock.closeOnDemand();\n    }\n  }\n;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 142,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1607,
        "startLineNumber" : 66,
        "startColumnNumber" : 4,
        "endLineNumber" : 102,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public AutoCloseable process(Class<?> clazz,Object testInstance){\n  List<ScopedMock> scopedMocks=new ArrayList<>();\n  Field[] fields=clazz.getDeclaredFields();\n  for (  Field field : fields) {\n    boolean alreadyAssigned=false;\n    for (    Annotation annotation : field.getAnnotations()) {\n      Object mock=createMockFor(annotation,field);\n      if (mock instanceof ScopedMock) {\n        scopedMocks.add((ScopedMock)mock);\n      }\n      if (mock != null) {\n        throwIfAlreadyAssigned(field,alreadyAssigned);\n        alreadyAssigned=true;\n        final MemberAccessor accessor=Plugins.getMemberAccessor();\n        try {\n          accessor.set(field,testInstance,mock);\n        }\n catch (        Exception e) {\n          for (          ScopedMock scopedMock : scopedMocks) {\n            scopedMock.close();\n          }\n          throw new MockitoException(\"Problems setting field \" + field.getName() + \" annotated with \"+ annotation,e);\n        }\n      }\n    }\n  }\n  return () -> {\n    for (    ScopedMock scopedMock : scopedMocks) {\n      scopedMock.closeOnDemand();\n    }\n  }\n;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 159,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 200,
        "startLineNumber" : 88,
        "startColumnNumber" : 32,
        "endLineNumber" : 91,
        "endColumnNumber" : 52
      },
      "nodeContext" : "\"Problems setting field \" + field.getName() + \" annotated with \"+ annotation",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 18,
    "startLineNumber" : 90,
    "startColumnNumber" : 42,
    "endLineNumber" : 90,
    "endColumnNumber" : 60
  } ],
  "layoutRelationDataList" : [ ]
}