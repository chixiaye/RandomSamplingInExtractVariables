{
  "id" : 447,
  "expression" : "true",
  "projectName" : "Netflix@eureka",
  "commitID" : "295f257424f0952b17a6903940bbd4e2f2fced03",
  "filePath" : "eureka-client/src/main/java/com/netflix/discovery/DiscoveryClient.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "true",
    "nodeType" : "BooleanLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 215,
      "startColumnNumber" : 35,
      "endLineNumber" : 215,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 128,
        "startLineNumber" : 213,
        "startColumnNumber" : 20,
        "endLineNumber" : 215,
        "endColumnNumber" : 40
      },
      "nodeContext" : "new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 161,
        "startLineNumber" : 213,
        "startColumnNumber" : 20,
        "endLineNumber" : 216,
        "endColumnNumber" : 32
      },
      "nodeContext" : "new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 219,
        "startLineNumber" : 212,
        "startColumnNumber" : 24,
        "endLineNumber" : 216,
        "endColumnNumber" : 33
      },
      "nodeContext" : "Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 231,
        "startLineNumber" : 212,
        "startColumnNumber" : 12,
        "endLineNumber" : 216,
        "endColumnNumber" : 33
      },
      "nodeContext" : "scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build())",
      "nodeType" : "Assignment",
      "astNodeNumber" : 17,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 232,
        "startLineNumber" : 212,
        "startColumnNumber" : 12,
        "endLineNumber" : 216,
        "endColumnNumber" : 34
      },
      "nodeContext" : "scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 18,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3965,
        "startLineNumber" : 211,
        "startColumnNumber" : 12,
        "endLineNumber" : 284,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n  clientConfig=config;\n  final String zone=getZone(myInfo);\n  eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n  scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n  localRegionApps.set(new Applications());\n  heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n  cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n  fetchRegistryGeneration=new AtomicLong(0);\n  if (myInfo != null) {\n    instanceInfo=myInfo;\n    appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n  }\n  String proxyHost=clientConfig.getProxyHost();\n  String proxyPort=clientConfig.getProxyPort();\n  discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n  discoveryApacheClient=discoveryJerseyClient.getClient();\n  ClientConfig cc=discoveryJerseyClient.getClientconfig();\n  remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n  AzToRegionMapper azToRegionMapper;\n  if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n    azToRegionMapper=new DNSBasedAzToRegionMapper();\n  }\n else {\n    azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n  }\n  if (null != remoteRegionsToFetch.get()) {\n    azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n  }\n  instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n  boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n  if (enableGZIPContentEncodingFilter) {\n    discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n  }\n  String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n  EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n  discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  if (proxyHost != null && proxyPort != null) {\n    cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 319,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4085,
        "startLineNumber" : 211,
        "startColumnNumber" : 8,
        "endLineNumber" : 286,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n  clientConfig=config;\n  final String zone=getZone(myInfo);\n  eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n  scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n  localRegionApps.set(new Applications());\n  heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n  cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n  fetchRegistryGeneration=new AtomicLong(0);\n  if (myInfo != null) {\n    instanceInfo=myInfo;\n    appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n  }\n  String proxyHost=clientConfig.getProxyHost();\n  String proxyPort=clientConfig.getProxyPort();\n  discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n  discoveryApacheClient=discoveryJerseyClient.getClient();\n  ClientConfig cc=discoveryJerseyClient.getClientconfig();\n  remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n  AzToRegionMapper azToRegionMapper;\n  if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n    azToRegionMapper=new DNSBasedAzToRegionMapper();\n  }\n else {\n    azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n  }\n  if (null != remoteRegionsToFetch.get()) {\n    azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n  }\n  instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n  boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n  if (enableGZIPContentEncodingFilter) {\n    discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n  }\n  String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n  EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n  discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  if (proxyHost != null && proxyPort != null) {\n    cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n  }\n}\n catch (Throwable e) {\n  throw new RuntimeException(\"Failed to initialize DiscoveryClient!\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 332,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5070,
        "startLineNumber" : 199,
        "startColumnNumber" : 109,
        "endLineNumber" : 301,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (args != null) {\n    healthCheckHandlerProvider=args.healthCheckHandlerProvider;\n    healthCheckCallbackProvider=args.healthCheckCallbackProvider;\n    eventBus=args.eventBus;\n  }\n else {\n    healthCheckCallbackProvider=null;\n    healthCheckHandlerProvider=null;\n    eventBus=null;\n  }\n  try {\n    scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n    clientConfig=config;\n    final String zone=getZone(myInfo);\n    eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n    scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n    localRegionApps.set(new Applications());\n    heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    fetchRegistryGeneration=new AtomicLong(0);\n    if (myInfo != null) {\n      instanceInfo=myInfo;\n      appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n    }\n    String proxyHost=clientConfig.getProxyHost();\n    String proxyPort=clientConfig.getProxyPort();\n    discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n    discoveryApacheClient=discoveryJerseyClient.getClient();\n    ClientConfig cc=discoveryJerseyClient.getClientconfig();\n    remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n    AzToRegionMapper azToRegionMapper;\n    if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n      azToRegionMapper=new DNSBasedAzToRegionMapper();\n    }\n else {\n      azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n    }\n    if (null != remoteRegionsToFetch.get()) {\n      azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n    }\n    instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n    boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n    if (enableGZIPContentEncodingFilter) {\n      discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n    }\n    String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n    EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n    discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n    if (proxyHost != null && proxyPort != null) {\n      cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n    }\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize DiscoveryClient!\",e);\n  }\n  if (clientConfig.shouldFetchRegistry() && !fetchRegistry(false)) {\n    fetchRegistryFromBackup();\n  }\n  initScheduledTasks();\n  try {\n    Monitors.registerObject(this);\n  }\n catch (  Throwable e) {\n    logger.warn(\"Cannot register timers\",e);\n  }\n  DiscoveryManager.getInstance().setDiscoveryClient(this);\n  DiscoveryManager.getInstance().setEurekaClientConfig(config);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 418,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5187,
        "startLineNumber" : 198,
        "startColumnNumber" : 4,
        "endLineNumber" : 301,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Inject public DiscoveryClient(InstanceInfo myInfo,EurekaClientConfig config,DiscoveryClientOptionalArgs args){\n  if (args != null) {\n    healthCheckHandlerProvider=args.healthCheckHandlerProvider;\n    healthCheckCallbackProvider=args.healthCheckCallbackProvider;\n    eventBus=args.eventBus;\n  }\n else {\n    healthCheckCallbackProvider=null;\n    healthCheckHandlerProvider=null;\n    eventBus=null;\n  }\n  try {\n    scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n    clientConfig=config;\n    final String zone=getZone(myInfo);\n    eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n    scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n    localRegionApps.set(new Applications());\n    heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    fetchRegistryGeneration=new AtomicLong(0);\n    if (myInfo != null) {\n      instanceInfo=myInfo;\n      appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n    }\n    String proxyHost=clientConfig.getProxyHost();\n    String proxyPort=clientConfig.getProxyPort();\n    discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n    discoveryApacheClient=discoveryJerseyClient.getClient();\n    ClientConfig cc=discoveryJerseyClient.getClientconfig();\n    remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n    AzToRegionMapper azToRegionMapper;\n    if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n      azToRegionMapper=new DNSBasedAzToRegionMapper();\n    }\n else {\n      azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n    }\n    if (null != remoteRegionsToFetch.get()) {\n      azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n    }\n    instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n    boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n    if (enableGZIPContentEncodingFilter) {\n      discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n    }\n    String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n    EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n    discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n    if (proxyHost != null && proxyPort != null) {\n      cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n    }\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize DiscoveryClient!\",e);\n  }\n  if (clientConfig.shouldFetchRegistry() && !fetchRegistry(false)) {\n    fetchRegistryFromBackup();\n  }\n  initScheduledTasks();\n  try {\n    Monitors.registerObject(this);\n  }\n catch (  Throwable e) {\n    logger.warn(\"Cannot register timers\",e);\n  }\n  DiscoveryManager.getInstance().setDiscoveryClient(this);\n  DiscoveryManager.getInstance().setEurekaClientConfig(config);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 435,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 128,
        "startLineNumber" : 213,
        "startColumnNumber" : 20,
        "endLineNumber" : 215,
        "endColumnNumber" : 40
      },
      "nodeContext" : "new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 215,
    "startColumnNumber" : 35,
    "endLineNumber" : 215,
    "endColumnNumber" : 39
  } ],
  "layoutRelationDataList" : [ ]
}