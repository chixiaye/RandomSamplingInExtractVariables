{
  "id" : 346,
  "expression" : "combinations",
  "projectName" : "bazelbuild@bazel",
  "commitID" : "302971e1b3d803069ac949c0085c0d2a3916c8ab",
  "filePath" : "/src/test/java/com/google/devtools/build/lib/concurrent/MultisetSemaphoreTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "combinations",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 300,
      "startColumnNumber" : 26,
      "endLineNumber" : 300,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 300,
        "startColumnNumber" : 26,
        "endLineNumber" : 300,
        "endColumnNumber" : 45
      },
      "nodeContext" : "combinations.size()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 300,
        "startColumnNumber" : 8,
        "endLineNumber" : 300,
        "endColumnNumber" : 45
      },
      "nodeContext" : "numCombinations=combinations.size()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 300,
        "startColumnNumber" : 4,
        "endLineNumber" : 300,
        "endColumnNumber" : 46
      },
      "nodeContext" : "int numCombinations=combinations.size();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2652,
        "startLineNumber" : 289,
        "startColumnNumber" : 77,
        "endLineNumber" : 345,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int n=10;\n  ImmutableSet.Builder<String> valsBuilder=ImmutableSet.builder();\n  for (int i=0; i < n; i++) {\n    valsBuilder.add(\"val-\" + i);\n  }\n  ImmutableSet<String> vals=valsBuilder.build();\n  int k=5;\n  Set<Set<String>> combinations=Sets.combinations(vals,k);\n  int numCombinations=combinations.size();\n  final MultisetSemaphore<String> multisetSemaphore=MultisetSemaphore.newBuilder().maxNumUniqueValues(k).build();\n  ExecutorService executorService=Executors.newFixedThreadPool(numCombinations);\n  ThrowableRecordingRunnableWrapper wrapper=new ThrowableRecordingRunnableWrapper(\"testConcurrentRace_AllSameSizedCombinations\");\n  ConcurrentHashMultiset<String> counts=ConcurrentHashMultiset.create();\n  for (  Set<String> combination : combinations) {\n    @SuppressWarnings(\"unused\") Future<?> possiblyIgnoredError=executorService.submit(wrapper.wrap(new Runnable(){\n      @Override public void run(){\n        try {\n          multisetSemaphore.acquireAll(combination);\n          combination.forEach(counts::add);\n          assertThat(counts.entrySet().size()).isAtMost(k);\n          combination.forEach(counts::remove);\n          multisetSemaphore.releaseAll(combination);\n        }\n catch (        InterruptedException e) {\n          throw new IllegalStateException(e);\n        }\n      }\n    }\n));\n  }\n  boolean interrupted=ExecutorUtil.interruptibleShutdown(executorService);\n  assertThat(wrapper.getFirstThrownError()).isNull();\n  if (interrupted) {\n    Thread.currentThread().interrupt();\n    throw new InterruptedException();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 237,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2735,
        "startLineNumber" : 288,
        "startColumnNumber" : 2,
        "endLineNumber" : 345,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testConcurrentRace_allSameSizedCombinations() throws Exception {\n  int n=10;\n  ImmutableSet.Builder<String> valsBuilder=ImmutableSet.builder();\n  for (int i=0; i < n; i++) {\n    valsBuilder.add(\"val-\" + i);\n  }\n  ImmutableSet<String> vals=valsBuilder.build();\n  int k=5;\n  Set<Set<String>> combinations=Sets.combinations(vals,k);\n  int numCombinations=combinations.size();\n  final MultisetSemaphore<String> multisetSemaphore=MultisetSemaphore.newBuilder().maxNumUniqueValues(k).build();\n  ExecutorService executorService=Executors.newFixedThreadPool(numCombinations);\n  ThrowableRecordingRunnableWrapper wrapper=new ThrowableRecordingRunnableWrapper(\"testConcurrentRace_AllSameSizedCombinations\");\n  ConcurrentHashMultiset<String> counts=ConcurrentHashMultiset.create();\n  for (  Set<String> combination : combinations) {\n    @SuppressWarnings(\"unused\") Future<?> possiblyIgnoredError=executorService.submit(wrapper.wrap(new Runnable(){\n      @Override public void run(){\n        try {\n          multisetSemaphore.acquireAll(combination);\n          combination.forEach(counts::add);\n          assertThat(counts.entrySet().size()).isAtMost(k);\n          combination.forEach(counts::remove);\n          multisetSemaphore.releaseAll(combination);\n        }\n catch (        InterruptedException e) {\n          throw new IllegalStateException(e);\n        }\n      }\n    }\n));\n  }\n  boolean interrupted=ExecutorUtil.interruptibleShutdown(executorService);\n  assertThat(wrapper.getFirstThrownError()).isNull();\n  if (interrupted) {\n    Thread.currentThread().interrupt();\n    throw new InterruptedException();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 245,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 300,
        "startColumnNumber" : 4,
        "endLineNumber" : 300,
        "endColumnNumber" : 46
      },
      "nodeContext" : "int numCombinations=combinations.size();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.util.Set<java.util.Set<java.lang.String>>"
  }, {
    "nodeContext" : "combinations",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 313,
      "startColumnNumber" : 35,
      "endLineNumber" : 313,
      "endColumnNumber" : 47
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1129,
        "startLineNumber" : 313,
        "startColumnNumber" : 4,
        "endLineNumber" : 336,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (Set<String> combination : combinations) {\n  @SuppressWarnings(\"unused\") Future<?> possiblyIgnoredError=executorService.submit(wrapper.wrap(new Runnable(){\n    @Override public void run(){\n      try {\n        multisetSemaphore.acquireAll(combination);\n        combination.forEach(counts::add);\n        assertThat(counts.entrySet().size()).isAtMost(k);\n        combination.forEach(counts::remove);\n        multisetSemaphore.releaseAll(combination);\n      }\n catch (      InterruptedException e) {\n        throw new IllegalStateException(e);\n      }\n    }\n  }\n));\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 85,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2652,
        "startLineNumber" : 289,
        "startColumnNumber" : 77,
        "endLineNumber" : 345,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int n=10;\n  ImmutableSet.Builder<String> valsBuilder=ImmutableSet.builder();\n  for (int i=0; i < n; i++) {\n    valsBuilder.add(\"val-\" + i);\n  }\n  ImmutableSet<String> vals=valsBuilder.build();\n  int k=5;\n  Set<Set<String>> combinations=Sets.combinations(vals,k);\n  int numCombinations=combinations.size();\n  final MultisetSemaphore<String> multisetSemaphore=MultisetSemaphore.newBuilder().maxNumUniqueValues(k).build();\n  ExecutorService executorService=Executors.newFixedThreadPool(numCombinations);\n  ThrowableRecordingRunnableWrapper wrapper=new ThrowableRecordingRunnableWrapper(\"testConcurrentRace_AllSameSizedCombinations\");\n  ConcurrentHashMultiset<String> counts=ConcurrentHashMultiset.create();\n  for (  Set<String> combination : combinations) {\n    @SuppressWarnings(\"unused\") Future<?> possiblyIgnoredError=executorService.submit(wrapper.wrap(new Runnable(){\n      @Override public void run(){\n        try {\n          multisetSemaphore.acquireAll(combination);\n          combination.forEach(counts::add);\n          assertThat(counts.entrySet().size()).isAtMost(k);\n          combination.forEach(counts::remove);\n          multisetSemaphore.releaseAll(combination);\n        }\n catch (        InterruptedException e) {\n          throw new IllegalStateException(e);\n        }\n      }\n    }\n));\n  }\n  boolean interrupted=ExecutorUtil.interruptibleShutdown(executorService);\n  assertThat(wrapper.getFirstThrownError()).isNull();\n  if (interrupted) {\n    Thread.currentThread().interrupt();\n    throw new InterruptedException();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 237,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2735,
        "startLineNumber" : 288,
        "startColumnNumber" : 2,
        "endLineNumber" : 345,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testConcurrentRace_allSameSizedCombinations() throws Exception {\n  int n=10;\n  ImmutableSet.Builder<String> valsBuilder=ImmutableSet.builder();\n  for (int i=0; i < n; i++) {\n    valsBuilder.add(\"val-\" + i);\n  }\n  ImmutableSet<String> vals=valsBuilder.build();\n  int k=5;\n  Set<Set<String>> combinations=Sets.combinations(vals,k);\n  int numCombinations=combinations.size();\n  final MultisetSemaphore<String> multisetSemaphore=MultisetSemaphore.newBuilder().maxNumUniqueValues(k).build();\n  ExecutorService executorService=Executors.newFixedThreadPool(numCombinations);\n  ThrowableRecordingRunnableWrapper wrapper=new ThrowableRecordingRunnableWrapper(\"testConcurrentRace_AllSameSizedCombinations\");\n  ConcurrentHashMultiset<String> counts=ConcurrentHashMultiset.create();\n  for (  Set<String> combination : combinations) {\n    @SuppressWarnings(\"unused\") Future<?> possiblyIgnoredError=executorService.submit(wrapper.wrap(new Runnable(){\n      @Override public void run(){\n        try {\n          multisetSemaphore.acquireAll(combination);\n          combination.forEach(counts::add);\n          assertThat(counts.entrySet().size()).isAtMost(k);\n          combination.forEach(counts::remove);\n          multisetSemaphore.releaseAll(combination);\n        }\n catch (        InterruptedException e) {\n          throw new IllegalStateException(e);\n        }\n      }\n    }\n));\n  }\n  boolean interrupted=ExecutorUtil.interruptibleShutdown(executorService);\n  assertThat(wrapper.getFirstThrownError()).isNull();\n  if (interrupted) {\n    Thread.currentThread().interrupt();\n    throw new InterruptedException();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 245,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1129,
        "startLineNumber" : 313,
        "startColumnNumber" : 4,
        "endLineNumber" : 336,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (Set<String> combination : combinations) {\n  @SuppressWarnings(\"unused\") Future<?> possiblyIgnoredError=executorService.submit(wrapper.wrap(new Runnable(){\n    @Override public void run(){\n      try {\n        multisetSemaphore.acquireAll(combination);\n        combination.forEach(counts::add);\n        assertThat(counts.entrySet().size()).isAtMost(k);\n        combination.forEach(counts::remove);\n        multisetSemaphore.releaseAll(combination);\n      }\n catch (      InterruptedException e) {\n        throw new IllegalStateException(e);\n      }\n    }\n  }\n));\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 85,
      "astHeight" : 18
    },
    "tokenLength" : 1,
    "type" : "java.util.Set<java.util.Set<java.lang.String>>"
  } ],
  "positionList" : [ {
    "charLength" : 12,
    "startLineNumber" : 300,
    "startColumnNumber" : 26,
    "endLineNumber" : 300,
    "endColumnNumber" : 38
  }, {
    "charLength" : 12,
    "startLineNumber" : 313,
    "startColumnNumber" : 35,
    "endLineNumber" : 313,
    "endColumnNumber" : 47
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 1
  } ]
}