{
  "id" : 193,
  "expression" : "matches",
  "projectName" : "zxing@zxing",
  "commitID" : "faf72f02eb2f0093493f0d6aec8cd62545830a89",
  "filePath" : "core/src/com/google/zxing/client/result/VCardResultParser.java",
  "occurrences" : 6,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "matches",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 166,
      "startColumnNumber" : 12,
      "endLineNumber" : 166,
      "endColumnNumber" : 19
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 166,
        "startColumnNumber" : 12,
        "endLineNumber" : 166,
        "endColumnNumber" : 27
      },
      "nodeContext" : "matches == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 166,
        "startColumnNumber" : 8,
        "endLineNumber" : 168,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (matches == null) {\n  matches=new Vector(1);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 12,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 825,
        "startLineNumber" : 164,
        "startColumnNumber" : 33,
        "endLineNumber" : 190,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  if (matches == null) {\n    matches=new Vector(1);\n  }\n  if (rawText.charAt(i - 1) == '\\r') {\n    i--;\n  }\n  String element=rawText.substring(matchStart,i);\n  if (trim) {\n    element=element.trim();\n  }\n  if (quotedPrintable) {\n    element=decodeQuotedPrintable(element,quotedPrintableCharset);\n  }\n else {\n    element=stripContinuationCRLF(element);\n  }\n  if (metadata == null) {\n    Vector match=new Vector(1);\n    match.addElement(element);\n    matches.addElement(match);\n  }\n else {\n    metadata.insertElementAt(element,0);\n    matches.addElement(metadata);\n  }\n  i++;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 101,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 873,
        "startLineNumber" : 164,
        "startColumnNumber" : 13,
        "endLineNumber" : 192,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (i > matchStart) {\n  if (matches == null) {\n    matches=new Vector(1);\n  }\n  if (rawText.charAt(i - 1) == '\\r') {\n    i--;\n  }\n  String element=rawText.substring(matchStart,i);\n  if (trim) {\n    element=element.trim();\n  }\n  if (quotedPrintable) {\n    element=decodeQuotedPrintable(element,quotedPrintableCharset);\n  }\n else {\n    element=stripContinuationCRLF(element);\n  }\n  if (metadata == null) {\n    Vector match=new Vector(1);\n    match.addElement(element);\n    matches.addElement(match);\n  }\n else {\n    metadata.insertElementAt(element,0);\n    matches.addElement(metadata);\n  }\n  i++;\n}\n else {\n  i++;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 109,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1009,
        "startLineNumber" : 161,
        "startColumnNumber" : 6,
        "endLineNumber" : 192,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (i < 0) {\n  i=max;\n}\n else if (i > matchStart) {\n  if (matches == null) {\n    matches=new Vector(1);\n  }\n  if (rawText.charAt(i - 1) == '\\r') {\n    i--;\n  }\n  String element=rawText.substring(matchStart,i);\n  if (trim) {\n    element=element.trim();\n  }\n  if (quotedPrintable) {\n    element=decodeQuotedPrintable(element,quotedPrintableCharset);\n  }\n else {\n    element=stripContinuationCRLF(element);\n  }\n  if (metadata == null) {\n    Vector match=new Vector(1);\n    match.addElement(element);\n    matches.addElement(match);\n  }\n else {\n    metadata.insertElementAt(element,0);\n    matches.addElement(metadata);\n  }\n  i++;\n}\n else {\n  i++;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 118,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 3412,
        "startLineNumber" : 91,
        "startColumnNumber" : 20,
        "endLineNumber" : 194,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  i=rawText.indexOf(prefix,i);\n  if (i < 0) {\n    break;\n  }\n  if (i > 0 && rawText.charAt(i - 1) != '\\n') {\n    i++;\n    continue;\n  }\n  i+=prefix.length();\n  if (rawText.charAt(i) != ':' && rawText.charAt(i) != ';') {\n    continue;\n  }\n  int metadataStart=i;\n  while (rawText.charAt(i) != ':') {\n    i++;\n  }\n  Vector metadata=null;\n  boolean quotedPrintable=false;\n  String quotedPrintableCharset=null;\n  if (i > metadataStart) {\n    for (int j=metadataStart + 1; j <= i; j++) {\n      char c=rawText.charAt(j);\n      if (c == ';' || c == ':') {\n        String metadatum=rawText.substring(metadataStart + 1,j);\n        if (metadata == null) {\n          metadata=new Vector(1);\n        }\n        metadata.addElement(metadatum);\n        int equals=metadatum.indexOf('=');\n        if (equals >= 0) {\n          String key=metadatum.substring(0,equals);\n          String value=metadatum.substring(equals + 1);\n          if (\"ENCODING\".equalsIgnoreCase(key)) {\n            if (\"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n              quotedPrintable=true;\n            }\n          }\n else           if (\"CHARSET\".equalsIgnoreCase(key)) {\n            quotedPrintableCharset=value;\n          }\n        }\n        metadataStart=j;\n      }\n    }\n  }\n  i++;\n  int matchStart=i;\n  while ((i=rawText.indexOf((int)'\\n',i)) >= 0) {\n    if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n      i+=2;\n    }\n else     if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n      i++;\n    }\n else {\n      break;\n    }\n  }\n  if (i < 0) {\n    i=max;\n  }\n else   if (i > matchStart) {\n    if (matches == null) {\n      matches=new Vector(1);\n    }\n    if (rawText.charAt(i - 1) == '\\r') {\n      i--;\n    }\n    String element=rawText.substring(matchStart,i);\n    if (trim) {\n      element=element.trim();\n    }\n    if (quotedPrintable) {\n      element=decodeQuotedPrintable(element,quotedPrintableCharset);\n    }\n else {\n      element=stripContinuationCRLF(element);\n    }\n    if (metadata == null) {\n      Vector match=new Vector(1);\n      match.addElement(element);\n      matches.addElement(match);\n    }\n else {\n      metadata.insertElementAt(element,0);\n      matches.addElement(metadata);\n    }\n    i++;\n  }\n else {\n    i++;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 416,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3428,
        "startLineNumber" : 91,
        "startColumnNumber" : 4,
        "endLineNumber" : 194,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (i < max) {\n  i=rawText.indexOf(prefix,i);\n  if (i < 0) {\n    break;\n  }\n  if (i > 0 && rawText.charAt(i - 1) != '\\n') {\n    i++;\n    continue;\n  }\n  i+=prefix.length();\n  if (rawText.charAt(i) != ':' && rawText.charAt(i) != ';') {\n    continue;\n  }\n  int metadataStart=i;\n  while (rawText.charAt(i) != ':') {\n    i++;\n  }\n  Vector metadata=null;\n  boolean quotedPrintable=false;\n  String quotedPrintableCharset=null;\n  if (i > metadataStart) {\n    for (int j=metadataStart + 1; j <= i; j++) {\n      char c=rawText.charAt(j);\n      if (c == ';' || c == ':') {\n        String metadatum=rawText.substring(metadataStart + 1,j);\n        if (metadata == null) {\n          metadata=new Vector(1);\n        }\n        metadata.addElement(metadatum);\n        int equals=metadatum.indexOf('=');\n        if (equals >= 0) {\n          String key=metadatum.substring(0,equals);\n          String value=metadatum.substring(equals + 1);\n          if (\"ENCODING\".equalsIgnoreCase(key)) {\n            if (\"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n              quotedPrintable=true;\n            }\n          }\n else           if (\"CHARSET\".equalsIgnoreCase(key)) {\n            quotedPrintableCharset=value;\n          }\n        }\n        metadataStart=j;\n      }\n    }\n  }\n  i++;\n  int matchStart=i;\n  while ((i=rawText.indexOf((int)'\\n',i)) >= 0) {\n    if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n      i+=2;\n    }\n else     if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n      i++;\n    }\n else {\n      break;\n    }\n  }\n  if (i < 0) {\n    i=max;\n  }\n else   if (i > matchStart) {\n    if (matches == null) {\n      matches=new Vector(1);\n    }\n    if (rawText.charAt(i - 1) == '\\r') {\n      i--;\n    }\n    String element=rawText.substring(matchStart,i);\n    if (trim) {\n      element=element.trim();\n    }\n    if (quotedPrintable) {\n      element=decodeQuotedPrintable(element,quotedPrintableCharset);\n    }\n else {\n      element=stripContinuationCRLF(element);\n    }\n    if (metadata == null) {\n      Vector match=new Vector(1);\n      match.addElement(element);\n      matches.addElement(match);\n    }\n else {\n      metadata.insertElementAt(element,0);\n      matches.addElement(metadata);\n    }\n    i++;\n  }\n else {\n    i++;\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 420,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3607,
        "startLineNumber" : 86,
        "startColumnNumber" : 62,
        "endLineNumber" : 200,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Vector matches=null;\n  int i=0;\n  int max=rawText.length();\n  while (i < max) {\n    i=rawText.indexOf(prefix,i);\n    if (i < 0) {\n      break;\n    }\n    if (i > 0 && rawText.charAt(i - 1) != '\\n') {\n      i++;\n      continue;\n    }\n    i+=prefix.length();\n    if (rawText.charAt(i) != ':' && rawText.charAt(i) != ';') {\n      continue;\n    }\n    int metadataStart=i;\n    while (rawText.charAt(i) != ':') {\n      i++;\n    }\n    Vector metadata=null;\n    boolean quotedPrintable=false;\n    String quotedPrintableCharset=null;\n    if (i > metadataStart) {\n      for (int j=metadataStart + 1; j <= i; j++) {\n        char c=rawText.charAt(j);\n        if (c == ';' || c == ':') {\n          String metadatum=rawText.substring(metadataStart + 1,j);\n          if (metadata == null) {\n            metadata=new Vector(1);\n          }\n          metadata.addElement(metadatum);\n          int equals=metadatum.indexOf('=');\n          if (equals >= 0) {\n            String key=metadatum.substring(0,equals);\n            String value=metadatum.substring(equals + 1);\n            if (\"ENCODING\".equalsIgnoreCase(key)) {\n              if (\"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n                quotedPrintable=true;\n              }\n            }\n else             if (\"CHARSET\".equalsIgnoreCase(key)) {\n              quotedPrintableCharset=value;\n            }\n          }\n          metadataStart=j;\n        }\n      }\n    }\n    i++;\n    int matchStart=i;\n    while ((i=rawText.indexOf((int)'\\n',i)) >= 0) {\n      if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n        i+=2;\n      }\n else       if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n        i++;\n      }\n else {\n        break;\n      }\n    }\n    if (i < 0) {\n      i=max;\n    }\n else     if (i > matchStart) {\n      if (matches == null) {\n        matches=new Vector(1);\n      }\n      if (rawText.charAt(i - 1) == '\\r') {\n        i--;\n      }\n      String element=rawText.substring(matchStart,i);\n      if (trim) {\n        element=element.trim();\n      }\n      if (quotedPrintable) {\n        element=decodeQuotedPrintable(element,quotedPrintableCharset);\n      }\n else {\n        element=stripContinuationCRLF(element);\n      }\n      if (metadata == null) {\n        Vector match=new Vector(1);\n        match.addElement(element);\n        matches.addElement(match);\n      }\n else {\n        metadata.insertElementAt(element,0);\n        matches.addElement(metadata);\n      }\n      i++;\n    }\n else {\n      i++;\n    }\n  }\n  if (matches == null || matches.isEmpty()) {\n    return null;\n  }\n  return matches;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 452,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3795,
        "startLineNumber" : 84,
        "startColumnNumber" : 2,
        "endLineNumber" : 200,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private static Vector matchVCardPrefixedField(String prefix,String rawText,boolean trim){\n  Vector matches=null;\n  int i=0;\n  int max=rawText.length();\n  while (i < max) {\n    i=rawText.indexOf(prefix,i);\n    if (i < 0) {\n      break;\n    }\n    if (i > 0 && rawText.charAt(i - 1) != '\\n') {\n      i++;\n      continue;\n    }\n    i+=prefix.length();\n    if (rawText.charAt(i) != ':' && rawText.charAt(i) != ';') {\n      continue;\n    }\n    int metadataStart=i;\n    while (rawText.charAt(i) != ':') {\n      i++;\n    }\n    Vector metadata=null;\n    boolean quotedPrintable=false;\n    String quotedPrintableCharset=null;\n    if (i > metadataStart) {\n      for (int j=metadataStart + 1; j <= i; j++) {\n        char c=rawText.charAt(j);\n        if (c == ';' || c == ':') {\n          String metadatum=rawText.substring(metadataStart + 1,j);\n          if (metadata == null) {\n            metadata=new Vector(1);\n          }\n          metadata.addElement(metadatum);\n          int equals=metadatum.indexOf('=');\n          if (equals >= 0) {\n            String key=metadatum.substring(0,equals);\n            String value=metadatum.substring(equals + 1);\n            if (\"ENCODING\".equalsIgnoreCase(key)) {\n              if (\"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n                quotedPrintable=true;\n              }\n            }\n else             if (\"CHARSET\".equalsIgnoreCase(key)) {\n              quotedPrintableCharset=value;\n            }\n          }\n          metadataStart=j;\n        }\n      }\n    }\n    i++;\n    int matchStart=i;\n    while ((i=rawText.indexOf((int)'\\n',i)) >= 0) {\n      if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n        i+=2;\n      }\n else       if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n        i++;\n      }\n else {\n        break;\n      }\n    }\n    if (i < 0) {\n      i=max;\n    }\n else     if (i > matchStart) {\n      if (matches == null) {\n        matches=new Vector(1);\n      }\n      if (rawText.charAt(i - 1) == '\\r') {\n        i--;\n      }\n      String element=rawText.substring(matchStart,i);\n      if (trim) {\n        element=element.trim();\n      }\n      if (quotedPrintable) {\n        element=decodeQuotedPrintable(element,quotedPrintableCharset);\n      }\n else {\n        element=stripContinuationCRLF(element);\n      }\n      if (metadata == null) {\n        Vector match=new Vector(1);\n        match.addElement(element);\n        matches.addElement(match);\n      }\n else {\n        metadata.insertElementAt(element,0);\n        matches.addElement(metadata);\n      }\n      i++;\n    }\n else {\n      i++;\n    }\n  }\n  if (matches == null || matches.isEmpty()) {\n    return null;\n  }\n  return matches;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 469,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 166,
        "startColumnNumber" : 12,
        "endLineNumber" : 166,
        "endColumnNumber" : 27
      },
      "nodeContext" : "matches == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "java.util.Vector"
  }, {
    "nodeContext" : "matches",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 184,
      "startColumnNumber" : 10,
      "endLineNumber" : 184,
      "endColumnNumber" : 17
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 184,
        "startColumnNumber" : 10,
        "endLineNumber" : 184,
        "endColumnNumber" : 35
      },
      "nodeContext" : "matches.addElement(match)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 184,
        "startColumnNumber" : 10,
        "endLineNumber" : 184,
        "endColumnNumber" : 36
      },
      "nodeContext" : "matches.addElement(match);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 125,
        "startLineNumber" : 181,
        "startColumnNumber" : 30,
        "endLineNumber" : 185,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Vector match=new Vector(1);\n  match.addElement(element);\n  matches.addElement(match);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 252,
        "startLineNumber" : 181,
        "startColumnNumber" : 8,
        "endLineNumber" : 188,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (metadata == null) {\n  Vector match=new Vector(1);\n  match.addElement(element);\n  matches.addElement(match);\n}\n else {\n  metadata.insertElementAt(element,0);\n  matches.addElement(metadata);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 36,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 825,
        "startLineNumber" : 164,
        "startColumnNumber" : 33,
        "endLineNumber" : 190,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  if (matches == null) {\n    matches=new Vector(1);\n  }\n  if (rawText.charAt(i - 1) == '\\r') {\n    i--;\n  }\n  String element=rawText.substring(matchStart,i);\n  if (trim) {\n    element=element.trim();\n  }\n  if (quotedPrintable) {\n    element=decodeQuotedPrintable(element,quotedPrintableCharset);\n  }\n else {\n    element=stripContinuationCRLF(element);\n  }\n  if (metadata == null) {\n    Vector match=new Vector(1);\n    match.addElement(element);\n    matches.addElement(match);\n  }\n else {\n    metadata.insertElementAt(element,0);\n    matches.addElement(metadata);\n  }\n  i++;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 101,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 873,
        "startLineNumber" : 164,
        "startColumnNumber" : 13,
        "endLineNumber" : 192,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (i > matchStart) {\n  if (matches == null) {\n    matches=new Vector(1);\n  }\n  if (rawText.charAt(i - 1) == '\\r') {\n    i--;\n  }\n  String element=rawText.substring(matchStart,i);\n  if (trim) {\n    element=element.trim();\n  }\n  if (quotedPrintable) {\n    element=decodeQuotedPrintable(element,quotedPrintableCharset);\n  }\n else {\n    element=stripContinuationCRLF(element);\n  }\n  if (metadata == null) {\n    Vector match=new Vector(1);\n    match.addElement(element);\n    matches.addElement(match);\n  }\n else {\n    metadata.insertElementAt(element,0);\n    matches.addElement(metadata);\n  }\n  i++;\n}\n else {\n  i++;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 109,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1009,
        "startLineNumber" : 161,
        "startColumnNumber" : 6,
        "endLineNumber" : 192,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (i < 0) {\n  i=max;\n}\n else if (i > matchStart) {\n  if (matches == null) {\n    matches=new Vector(1);\n  }\n  if (rawText.charAt(i - 1) == '\\r') {\n    i--;\n  }\n  String element=rawText.substring(matchStart,i);\n  if (trim) {\n    element=element.trim();\n  }\n  if (quotedPrintable) {\n    element=decodeQuotedPrintable(element,quotedPrintableCharset);\n  }\n else {\n    element=stripContinuationCRLF(element);\n  }\n  if (metadata == null) {\n    Vector match=new Vector(1);\n    match.addElement(element);\n    matches.addElement(match);\n  }\n else {\n    metadata.insertElementAt(element,0);\n    matches.addElement(metadata);\n  }\n  i++;\n}\n else {\n  i++;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 118,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 3412,
        "startLineNumber" : 91,
        "startColumnNumber" : 20,
        "endLineNumber" : 194,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  i=rawText.indexOf(prefix,i);\n  if (i < 0) {\n    break;\n  }\n  if (i > 0 && rawText.charAt(i - 1) != '\\n') {\n    i++;\n    continue;\n  }\n  i+=prefix.length();\n  if (rawText.charAt(i) != ':' && rawText.charAt(i) != ';') {\n    continue;\n  }\n  int metadataStart=i;\n  while (rawText.charAt(i) != ':') {\n    i++;\n  }\n  Vector metadata=null;\n  boolean quotedPrintable=false;\n  String quotedPrintableCharset=null;\n  if (i > metadataStart) {\n    for (int j=metadataStart + 1; j <= i; j++) {\n      char c=rawText.charAt(j);\n      if (c == ';' || c == ':') {\n        String metadatum=rawText.substring(metadataStart + 1,j);\n        if (metadata == null) {\n          metadata=new Vector(1);\n        }\n        metadata.addElement(metadatum);\n        int equals=metadatum.indexOf('=');\n        if (equals >= 0) {\n          String key=metadatum.substring(0,equals);\n          String value=metadatum.substring(equals + 1);\n          if (\"ENCODING\".equalsIgnoreCase(key)) {\n            if (\"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n              quotedPrintable=true;\n            }\n          }\n else           if (\"CHARSET\".equalsIgnoreCase(key)) {\n            quotedPrintableCharset=value;\n          }\n        }\n        metadataStart=j;\n      }\n    }\n  }\n  i++;\n  int matchStart=i;\n  while ((i=rawText.indexOf((int)'\\n',i)) >= 0) {\n    if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n      i+=2;\n    }\n else     if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n      i++;\n    }\n else {\n      break;\n    }\n  }\n  if (i < 0) {\n    i=max;\n  }\n else   if (i > matchStart) {\n    if (matches == null) {\n      matches=new Vector(1);\n    }\n    if (rawText.charAt(i - 1) == '\\r') {\n      i--;\n    }\n    String element=rawText.substring(matchStart,i);\n    if (trim) {\n      element=element.trim();\n    }\n    if (quotedPrintable) {\n      element=decodeQuotedPrintable(element,quotedPrintableCharset);\n    }\n else {\n      element=stripContinuationCRLF(element);\n    }\n    if (metadata == null) {\n      Vector match=new Vector(1);\n      match.addElement(element);\n      matches.addElement(match);\n    }\n else {\n      metadata.insertElementAt(element,0);\n      matches.addElement(metadata);\n    }\n    i++;\n  }\n else {\n    i++;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 416,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3428,
        "startLineNumber" : 91,
        "startColumnNumber" : 4,
        "endLineNumber" : 194,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (i < max) {\n  i=rawText.indexOf(prefix,i);\n  if (i < 0) {\n    break;\n  }\n  if (i > 0 && rawText.charAt(i - 1) != '\\n') {\n    i++;\n    continue;\n  }\n  i+=prefix.length();\n  if (rawText.charAt(i) != ':' && rawText.charAt(i) != ';') {\n    continue;\n  }\n  int metadataStart=i;\n  while (rawText.charAt(i) != ':') {\n    i++;\n  }\n  Vector metadata=null;\n  boolean quotedPrintable=false;\n  String quotedPrintableCharset=null;\n  if (i > metadataStart) {\n    for (int j=metadataStart + 1; j <= i; j++) {\n      char c=rawText.charAt(j);\n      if (c == ';' || c == ':') {\n        String metadatum=rawText.substring(metadataStart + 1,j);\n        if (metadata == null) {\n          metadata=new Vector(1);\n        }\n        metadata.addElement(metadatum);\n        int equals=metadatum.indexOf('=');\n        if (equals >= 0) {\n          String key=metadatum.substring(0,equals);\n          String value=metadatum.substring(equals + 1);\n          if (\"ENCODING\".equalsIgnoreCase(key)) {\n            if (\"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n              quotedPrintable=true;\n            }\n          }\n else           if (\"CHARSET\".equalsIgnoreCase(key)) {\n            quotedPrintableCharset=value;\n          }\n        }\n        metadataStart=j;\n      }\n    }\n  }\n  i++;\n  int matchStart=i;\n  while ((i=rawText.indexOf((int)'\\n',i)) >= 0) {\n    if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n      i+=2;\n    }\n else     if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n      i++;\n    }\n else {\n      break;\n    }\n  }\n  if (i < 0) {\n    i=max;\n  }\n else   if (i > matchStart) {\n    if (matches == null) {\n      matches=new Vector(1);\n    }\n    if (rawText.charAt(i - 1) == '\\r') {\n      i--;\n    }\n    String element=rawText.substring(matchStart,i);\n    if (trim) {\n      element=element.trim();\n    }\n    if (quotedPrintable) {\n      element=decodeQuotedPrintable(element,quotedPrintableCharset);\n    }\n else {\n      element=stripContinuationCRLF(element);\n    }\n    if (metadata == null) {\n      Vector match=new Vector(1);\n      match.addElement(element);\n      matches.addElement(match);\n    }\n else {\n      metadata.insertElementAt(element,0);\n      matches.addElement(metadata);\n    }\n    i++;\n  }\n else {\n    i++;\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 420,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3607,
        "startLineNumber" : 86,
        "startColumnNumber" : 62,
        "endLineNumber" : 200,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Vector matches=null;\n  int i=0;\n  int max=rawText.length();\n  while (i < max) {\n    i=rawText.indexOf(prefix,i);\n    if (i < 0) {\n      break;\n    }\n    if (i > 0 && rawText.charAt(i - 1) != '\\n') {\n      i++;\n      continue;\n    }\n    i+=prefix.length();\n    if (rawText.charAt(i) != ':' && rawText.charAt(i) != ';') {\n      continue;\n    }\n    int metadataStart=i;\n    while (rawText.charAt(i) != ':') {\n      i++;\n    }\n    Vector metadata=null;\n    boolean quotedPrintable=false;\n    String quotedPrintableCharset=null;\n    if (i > metadataStart) {\n      for (int j=metadataStart + 1; j <= i; j++) {\n        char c=rawText.charAt(j);\n        if (c == ';' || c == ':') {\n          String metadatum=rawText.substring(metadataStart + 1,j);\n          if (metadata == null) {\n            metadata=new Vector(1);\n          }\n          metadata.addElement(metadatum);\n          int equals=metadatum.indexOf('=');\n          if (equals >= 0) {\n            String key=metadatum.substring(0,equals);\n            String value=metadatum.substring(equals + 1);\n            if (\"ENCODING\".equalsIgnoreCase(key)) {\n              if (\"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n                quotedPrintable=true;\n              }\n            }\n else             if (\"CHARSET\".equalsIgnoreCase(key)) {\n              quotedPrintableCharset=value;\n            }\n          }\n          metadataStart=j;\n        }\n      }\n    }\n    i++;\n    int matchStart=i;\n    while ((i=rawText.indexOf((int)'\\n',i)) >= 0) {\n      if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n        i+=2;\n      }\n else       if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n        i++;\n      }\n else {\n        break;\n      }\n    }\n    if (i < 0) {\n      i=max;\n    }\n else     if (i > matchStart) {\n      if (matches == null) {\n        matches=new Vector(1);\n      }\n      if (rawText.charAt(i - 1) == '\\r') {\n        i--;\n      }\n      String element=rawText.substring(matchStart,i);\n      if (trim) {\n        element=element.trim();\n      }\n      if (quotedPrintable) {\n        element=decodeQuotedPrintable(element,quotedPrintableCharset);\n      }\n else {\n        element=stripContinuationCRLF(element);\n      }\n      if (metadata == null) {\n        Vector match=new Vector(1);\n        match.addElement(element);\n        matches.addElement(match);\n      }\n else {\n        metadata.insertElementAt(element,0);\n        matches.addElement(metadata);\n      }\n      i++;\n    }\n else {\n      i++;\n    }\n  }\n  if (matches == null || matches.isEmpty()) {\n    return null;\n  }\n  return matches;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 452,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3795,
        "startLineNumber" : 84,
        "startColumnNumber" : 2,
        "endLineNumber" : 200,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private static Vector matchVCardPrefixedField(String prefix,String rawText,boolean trim){\n  Vector matches=null;\n  int i=0;\n  int max=rawText.length();\n  while (i < max) {\n    i=rawText.indexOf(prefix,i);\n    if (i < 0) {\n      break;\n    }\n    if (i > 0 && rawText.charAt(i - 1) != '\\n') {\n      i++;\n      continue;\n    }\n    i+=prefix.length();\n    if (rawText.charAt(i) != ':' && rawText.charAt(i) != ';') {\n      continue;\n    }\n    int metadataStart=i;\n    while (rawText.charAt(i) != ':') {\n      i++;\n    }\n    Vector metadata=null;\n    boolean quotedPrintable=false;\n    String quotedPrintableCharset=null;\n    if (i > metadataStart) {\n      for (int j=metadataStart + 1; j <= i; j++) {\n        char c=rawText.charAt(j);\n        if (c == ';' || c == ':') {\n          String metadatum=rawText.substring(metadataStart + 1,j);\n          if (metadata == null) {\n            metadata=new Vector(1);\n          }\n          metadata.addElement(metadatum);\n          int equals=metadatum.indexOf('=');\n          if (equals >= 0) {\n            String key=metadatum.substring(0,equals);\n            String value=metadatum.substring(equals + 1);\n            if (\"ENCODING\".equalsIgnoreCase(key)) {\n              if (\"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n                quotedPrintable=true;\n              }\n            }\n else             if (\"CHARSET\".equalsIgnoreCase(key)) {\n              quotedPrintableCharset=value;\n            }\n          }\n          metadataStart=j;\n        }\n      }\n    }\n    i++;\n    int matchStart=i;\n    while ((i=rawText.indexOf((int)'\\n',i)) >= 0) {\n      if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n        i+=2;\n      }\n else       if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n        i++;\n      }\n else {\n        break;\n      }\n    }\n    if (i < 0) {\n      i=max;\n    }\n else     if (i > matchStart) {\n      if (matches == null) {\n        matches=new Vector(1);\n      }\n      if (rawText.charAt(i - 1) == '\\r') {\n        i--;\n      }\n      String element=rawText.substring(matchStart,i);\n      if (trim) {\n        element=element.trim();\n      }\n      if (quotedPrintable) {\n        element=decodeQuotedPrintable(element,quotedPrintableCharset);\n      }\n else {\n        element=stripContinuationCRLF(element);\n      }\n      if (metadata == null) {\n        Vector match=new Vector(1);\n        match.addElement(element);\n        matches.addElement(match);\n      }\n else {\n        metadata.insertElementAt(element,0);\n        matches.addElement(metadata);\n      }\n      i++;\n    }\n else {\n      i++;\n    }\n  }\n  if (matches == null || matches.isEmpty()) {\n    return null;\n  }\n  return matches;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 469,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 184,
        "startColumnNumber" : 10,
        "endLineNumber" : 184,
        "endColumnNumber" : 36
      },
      "nodeContext" : "matches.addElement(match);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.util.Vector"
  }, {
    "nodeContext" : "matches",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 187,
      "startColumnNumber" : 10,
      "endLineNumber" : 187,
      "endColumnNumber" : 17
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 187,
        "startColumnNumber" : 10,
        "endLineNumber" : 187,
        "endColumnNumber" : 38
      },
      "nodeContext" : "matches.addElement(metadata)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 187,
        "startColumnNumber" : 10,
        "endLineNumber" : 187,
        "endColumnNumber" : 39
      },
      "nodeContext" : "matches.addElement(metadata);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 185,
        "startColumnNumber" : 15,
        "endLineNumber" : 188,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  metadata.insertElementAt(element,0);\n  matches.addElement(metadata);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 252,
        "startLineNumber" : 181,
        "startColumnNumber" : 8,
        "endLineNumber" : 188,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (metadata == null) {\n  Vector match=new Vector(1);\n  match.addElement(element);\n  matches.addElement(match);\n}\n else {\n  metadata.insertElementAt(element,0);\n  matches.addElement(metadata);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 36,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 825,
        "startLineNumber" : 164,
        "startColumnNumber" : 33,
        "endLineNumber" : 190,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  if (matches == null) {\n    matches=new Vector(1);\n  }\n  if (rawText.charAt(i - 1) == '\\r') {\n    i--;\n  }\n  String element=rawText.substring(matchStart,i);\n  if (trim) {\n    element=element.trim();\n  }\n  if (quotedPrintable) {\n    element=decodeQuotedPrintable(element,quotedPrintableCharset);\n  }\n else {\n    element=stripContinuationCRLF(element);\n  }\n  if (metadata == null) {\n    Vector match=new Vector(1);\n    match.addElement(element);\n    matches.addElement(match);\n  }\n else {\n    metadata.insertElementAt(element,0);\n    matches.addElement(metadata);\n  }\n  i++;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 101,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 873,
        "startLineNumber" : 164,
        "startColumnNumber" : 13,
        "endLineNumber" : 192,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (i > matchStart) {\n  if (matches == null) {\n    matches=new Vector(1);\n  }\n  if (rawText.charAt(i - 1) == '\\r') {\n    i--;\n  }\n  String element=rawText.substring(matchStart,i);\n  if (trim) {\n    element=element.trim();\n  }\n  if (quotedPrintable) {\n    element=decodeQuotedPrintable(element,quotedPrintableCharset);\n  }\n else {\n    element=stripContinuationCRLF(element);\n  }\n  if (metadata == null) {\n    Vector match=new Vector(1);\n    match.addElement(element);\n    matches.addElement(match);\n  }\n else {\n    metadata.insertElementAt(element,0);\n    matches.addElement(metadata);\n  }\n  i++;\n}\n else {\n  i++;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 109,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1009,
        "startLineNumber" : 161,
        "startColumnNumber" : 6,
        "endLineNumber" : 192,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (i < 0) {\n  i=max;\n}\n else if (i > matchStart) {\n  if (matches == null) {\n    matches=new Vector(1);\n  }\n  if (rawText.charAt(i - 1) == '\\r') {\n    i--;\n  }\n  String element=rawText.substring(matchStart,i);\n  if (trim) {\n    element=element.trim();\n  }\n  if (quotedPrintable) {\n    element=decodeQuotedPrintable(element,quotedPrintableCharset);\n  }\n else {\n    element=stripContinuationCRLF(element);\n  }\n  if (metadata == null) {\n    Vector match=new Vector(1);\n    match.addElement(element);\n    matches.addElement(match);\n  }\n else {\n    metadata.insertElementAt(element,0);\n    matches.addElement(metadata);\n  }\n  i++;\n}\n else {\n  i++;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 118,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 3412,
        "startLineNumber" : 91,
        "startColumnNumber" : 20,
        "endLineNumber" : 194,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  i=rawText.indexOf(prefix,i);\n  if (i < 0) {\n    break;\n  }\n  if (i > 0 && rawText.charAt(i - 1) != '\\n') {\n    i++;\n    continue;\n  }\n  i+=prefix.length();\n  if (rawText.charAt(i) != ':' && rawText.charAt(i) != ';') {\n    continue;\n  }\n  int metadataStart=i;\n  while (rawText.charAt(i) != ':') {\n    i++;\n  }\n  Vector metadata=null;\n  boolean quotedPrintable=false;\n  String quotedPrintableCharset=null;\n  if (i > metadataStart) {\n    for (int j=metadataStart + 1; j <= i; j++) {\n      char c=rawText.charAt(j);\n      if (c == ';' || c == ':') {\n        String metadatum=rawText.substring(metadataStart + 1,j);\n        if (metadata == null) {\n          metadata=new Vector(1);\n        }\n        metadata.addElement(metadatum);\n        int equals=metadatum.indexOf('=');\n        if (equals >= 0) {\n          String key=metadatum.substring(0,equals);\n          String value=metadatum.substring(equals + 1);\n          if (\"ENCODING\".equalsIgnoreCase(key)) {\n            if (\"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n              quotedPrintable=true;\n            }\n          }\n else           if (\"CHARSET\".equalsIgnoreCase(key)) {\n            quotedPrintableCharset=value;\n          }\n        }\n        metadataStart=j;\n      }\n    }\n  }\n  i++;\n  int matchStart=i;\n  while ((i=rawText.indexOf((int)'\\n',i)) >= 0) {\n    if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n      i+=2;\n    }\n else     if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n      i++;\n    }\n else {\n      break;\n    }\n  }\n  if (i < 0) {\n    i=max;\n  }\n else   if (i > matchStart) {\n    if (matches == null) {\n      matches=new Vector(1);\n    }\n    if (rawText.charAt(i - 1) == '\\r') {\n      i--;\n    }\n    String element=rawText.substring(matchStart,i);\n    if (trim) {\n      element=element.trim();\n    }\n    if (quotedPrintable) {\n      element=decodeQuotedPrintable(element,quotedPrintableCharset);\n    }\n else {\n      element=stripContinuationCRLF(element);\n    }\n    if (metadata == null) {\n      Vector match=new Vector(1);\n      match.addElement(element);\n      matches.addElement(match);\n    }\n else {\n      metadata.insertElementAt(element,0);\n      matches.addElement(metadata);\n    }\n    i++;\n  }\n else {\n    i++;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 416,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3428,
        "startLineNumber" : 91,
        "startColumnNumber" : 4,
        "endLineNumber" : 194,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (i < max) {\n  i=rawText.indexOf(prefix,i);\n  if (i < 0) {\n    break;\n  }\n  if (i > 0 && rawText.charAt(i - 1) != '\\n') {\n    i++;\n    continue;\n  }\n  i+=prefix.length();\n  if (rawText.charAt(i) != ':' && rawText.charAt(i) != ';') {\n    continue;\n  }\n  int metadataStart=i;\n  while (rawText.charAt(i) != ':') {\n    i++;\n  }\n  Vector metadata=null;\n  boolean quotedPrintable=false;\n  String quotedPrintableCharset=null;\n  if (i > metadataStart) {\n    for (int j=metadataStart + 1; j <= i; j++) {\n      char c=rawText.charAt(j);\n      if (c == ';' || c == ':') {\n        String metadatum=rawText.substring(metadataStart + 1,j);\n        if (metadata == null) {\n          metadata=new Vector(1);\n        }\n        metadata.addElement(metadatum);\n        int equals=metadatum.indexOf('=');\n        if (equals >= 0) {\n          String key=metadatum.substring(0,equals);\n          String value=metadatum.substring(equals + 1);\n          if (\"ENCODING\".equalsIgnoreCase(key)) {\n            if (\"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n              quotedPrintable=true;\n            }\n          }\n else           if (\"CHARSET\".equalsIgnoreCase(key)) {\n            quotedPrintableCharset=value;\n          }\n        }\n        metadataStart=j;\n      }\n    }\n  }\n  i++;\n  int matchStart=i;\n  while ((i=rawText.indexOf((int)'\\n',i)) >= 0) {\n    if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n      i+=2;\n    }\n else     if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n      i++;\n    }\n else {\n      break;\n    }\n  }\n  if (i < 0) {\n    i=max;\n  }\n else   if (i > matchStart) {\n    if (matches == null) {\n      matches=new Vector(1);\n    }\n    if (rawText.charAt(i - 1) == '\\r') {\n      i--;\n    }\n    String element=rawText.substring(matchStart,i);\n    if (trim) {\n      element=element.trim();\n    }\n    if (quotedPrintable) {\n      element=decodeQuotedPrintable(element,quotedPrintableCharset);\n    }\n else {\n      element=stripContinuationCRLF(element);\n    }\n    if (metadata == null) {\n      Vector match=new Vector(1);\n      match.addElement(element);\n      matches.addElement(match);\n    }\n else {\n      metadata.insertElementAt(element,0);\n      matches.addElement(metadata);\n    }\n    i++;\n  }\n else {\n    i++;\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 420,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3607,
        "startLineNumber" : 86,
        "startColumnNumber" : 62,
        "endLineNumber" : 200,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Vector matches=null;\n  int i=0;\n  int max=rawText.length();\n  while (i < max) {\n    i=rawText.indexOf(prefix,i);\n    if (i < 0) {\n      break;\n    }\n    if (i > 0 && rawText.charAt(i - 1) != '\\n') {\n      i++;\n      continue;\n    }\n    i+=prefix.length();\n    if (rawText.charAt(i) != ':' && rawText.charAt(i) != ';') {\n      continue;\n    }\n    int metadataStart=i;\n    while (rawText.charAt(i) != ':') {\n      i++;\n    }\n    Vector metadata=null;\n    boolean quotedPrintable=false;\n    String quotedPrintableCharset=null;\n    if (i > metadataStart) {\n      for (int j=metadataStart + 1; j <= i; j++) {\n        char c=rawText.charAt(j);\n        if (c == ';' || c == ':') {\n          String metadatum=rawText.substring(metadataStart + 1,j);\n          if (metadata == null) {\n            metadata=new Vector(1);\n          }\n          metadata.addElement(metadatum);\n          int equals=metadatum.indexOf('=');\n          if (equals >= 0) {\n            String key=metadatum.substring(0,equals);\n            String value=metadatum.substring(equals + 1);\n            if (\"ENCODING\".equalsIgnoreCase(key)) {\n              if (\"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n                quotedPrintable=true;\n              }\n            }\n else             if (\"CHARSET\".equalsIgnoreCase(key)) {\n              quotedPrintableCharset=value;\n            }\n          }\n          metadataStart=j;\n        }\n      }\n    }\n    i++;\n    int matchStart=i;\n    while ((i=rawText.indexOf((int)'\\n',i)) >= 0) {\n      if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n        i+=2;\n      }\n else       if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n        i++;\n      }\n else {\n        break;\n      }\n    }\n    if (i < 0) {\n      i=max;\n    }\n else     if (i > matchStart) {\n      if (matches == null) {\n        matches=new Vector(1);\n      }\n      if (rawText.charAt(i - 1) == '\\r') {\n        i--;\n      }\n      String element=rawText.substring(matchStart,i);\n      if (trim) {\n        element=element.trim();\n      }\n      if (quotedPrintable) {\n        element=decodeQuotedPrintable(element,quotedPrintableCharset);\n      }\n else {\n        element=stripContinuationCRLF(element);\n      }\n      if (metadata == null) {\n        Vector match=new Vector(1);\n        match.addElement(element);\n        matches.addElement(match);\n      }\n else {\n        metadata.insertElementAt(element,0);\n        matches.addElement(metadata);\n      }\n      i++;\n    }\n else {\n      i++;\n    }\n  }\n  if (matches == null || matches.isEmpty()) {\n    return null;\n  }\n  return matches;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 452,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3795,
        "startLineNumber" : 84,
        "startColumnNumber" : 2,
        "endLineNumber" : 200,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private static Vector matchVCardPrefixedField(String prefix,String rawText,boolean trim){\n  Vector matches=null;\n  int i=0;\n  int max=rawText.length();\n  while (i < max) {\n    i=rawText.indexOf(prefix,i);\n    if (i < 0) {\n      break;\n    }\n    if (i > 0 && rawText.charAt(i - 1) != '\\n') {\n      i++;\n      continue;\n    }\n    i+=prefix.length();\n    if (rawText.charAt(i) != ':' && rawText.charAt(i) != ';') {\n      continue;\n    }\n    int metadataStart=i;\n    while (rawText.charAt(i) != ':') {\n      i++;\n    }\n    Vector metadata=null;\n    boolean quotedPrintable=false;\n    String quotedPrintableCharset=null;\n    if (i > metadataStart) {\n      for (int j=metadataStart + 1; j <= i; j++) {\n        char c=rawText.charAt(j);\n        if (c == ';' || c == ':') {\n          String metadatum=rawText.substring(metadataStart + 1,j);\n          if (metadata == null) {\n            metadata=new Vector(1);\n          }\n          metadata.addElement(metadatum);\n          int equals=metadatum.indexOf('=');\n          if (equals >= 0) {\n            String key=metadatum.substring(0,equals);\n            String value=metadatum.substring(equals + 1);\n            if (\"ENCODING\".equalsIgnoreCase(key)) {\n              if (\"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n                quotedPrintable=true;\n              }\n            }\n else             if (\"CHARSET\".equalsIgnoreCase(key)) {\n              quotedPrintableCharset=value;\n            }\n          }\n          metadataStart=j;\n        }\n      }\n    }\n    i++;\n    int matchStart=i;\n    while ((i=rawText.indexOf((int)'\\n',i)) >= 0) {\n      if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n        i+=2;\n      }\n else       if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n        i++;\n      }\n else {\n        break;\n      }\n    }\n    if (i < 0) {\n      i=max;\n    }\n else     if (i > matchStart) {\n      if (matches == null) {\n        matches=new Vector(1);\n      }\n      if (rawText.charAt(i - 1) == '\\r') {\n        i--;\n      }\n      String element=rawText.substring(matchStart,i);\n      if (trim) {\n        element=element.trim();\n      }\n      if (quotedPrintable) {\n        element=decodeQuotedPrintable(element,quotedPrintableCharset);\n      }\n else {\n        element=stripContinuationCRLF(element);\n      }\n      if (metadata == null) {\n        Vector match=new Vector(1);\n        match.addElement(element);\n        matches.addElement(match);\n      }\n else {\n        metadata.insertElementAt(element,0);\n        matches.addElement(metadata);\n      }\n      i++;\n    }\n else {\n      i++;\n    }\n  }\n  if (matches == null || matches.isEmpty()) {\n    return null;\n  }\n  return matches;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 469,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 187,
        "startColumnNumber" : 10,
        "endLineNumber" : 187,
        "endColumnNumber" : 39
      },
      "nodeContext" : "matches.addElement(metadata);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.util.Vector"
  }, {
    "nodeContext" : "matches",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 196,
      "startColumnNumber" : 8,
      "endLineNumber" : 196,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 196,
        "startColumnNumber" : 8,
        "endLineNumber" : 196,
        "endColumnNumber" : 23
      },
      "nodeContext" : "matches == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 196,
        "startColumnNumber" : 8,
        "endLineNumber" : 196,
        "endColumnNumber" : 44
      },
      "nodeContext" : "matches == null || matches.isEmpty()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 196,
        "startColumnNumber" : 4,
        "endLineNumber" : 198,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (matches == null || matches.isEmpty()) {\n  return null;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3607,
        "startLineNumber" : 86,
        "startColumnNumber" : 62,
        "endLineNumber" : 200,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Vector matches=null;\n  int i=0;\n  int max=rawText.length();\n  while (i < max) {\n    i=rawText.indexOf(prefix,i);\n    if (i < 0) {\n      break;\n    }\n    if (i > 0 && rawText.charAt(i - 1) != '\\n') {\n      i++;\n      continue;\n    }\n    i+=prefix.length();\n    if (rawText.charAt(i) != ':' && rawText.charAt(i) != ';') {\n      continue;\n    }\n    int metadataStart=i;\n    while (rawText.charAt(i) != ':') {\n      i++;\n    }\n    Vector metadata=null;\n    boolean quotedPrintable=false;\n    String quotedPrintableCharset=null;\n    if (i > metadataStart) {\n      for (int j=metadataStart + 1; j <= i; j++) {\n        char c=rawText.charAt(j);\n        if (c == ';' || c == ':') {\n          String metadatum=rawText.substring(metadataStart + 1,j);\n          if (metadata == null) {\n            metadata=new Vector(1);\n          }\n          metadata.addElement(metadatum);\n          int equals=metadatum.indexOf('=');\n          if (equals >= 0) {\n            String key=metadatum.substring(0,equals);\n            String value=metadatum.substring(equals + 1);\n            if (\"ENCODING\".equalsIgnoreCase(key)) {\n              if (\"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n                quotedPrintable=true;\n              }\n            }\n else             if (\"CHARSET\".equalsIgnoreCase(key)) {\n              quotedPrintableCharset=value;\n            }\n          }\n          metadataStart=j;\n        }\n      }\n    }\n    i++;\n    int matchStart=i;\n    while ((i=rawText.indexOf((int)'\\n',i)) >= 0) {\n      if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n        i+=2;\n      }\n else       if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n        i++;\n      }\n else {\n        break;\n      }\n    }\n    if (i < 0) {\n      i=max;\n    }\n else     if (i > matchStart) {\n      if (matches == null) {\n        matches=new Vector(1);\n      }\n      if (rawText.charAt(i - 1) == '\\r') {\n        i--;\n      }\n      String element=rawText.substring(matchStart,i);\n      if (trim) {\n        element=element.trim();\n      }\n      if (quotedPrintable) {\n        element=decodeQuotedPrintable(element,quotedPrintableCharset);\n      }\n else {\n        element=stripContinuationCRLF(element);\n      }\n      if (metadata == null) {\n        Vector match=new Vector(1);\n        match.addElement(element);\n        matches.addElement(match);\n      }\n else {\n        metadata.insertElementAt(element,0);\n        matches.addElement(metadata);\n      }\n      i++;\n    }\n else {\n      i++;\n    }\n  }\n  if (matches == null || matches.isEmpty()) {\n    return null;\n  }\n  return matches;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 452,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3795,
        "startLineNumber" : 84,
        "startColumnNumber" : 2,
        "endLineNumber" : 200,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private static Vector matchVCardPrefixedField(String prefix,String rawText,boolean trim){\n  Vector matches=null;\n  int i=0;\n  int max=rawText.length();\n  while (i < max) {\n    i=rawText.indexOf(prefix,i);\n    if (i < 0) {\n      break;\n    }\n    if (i > 0 && rawText.charAt(i - 1) != '\\n') {\n      i++;\n      continue;\n    }\n    i+=prefix.length();\n    if (rawText.charAt(i) != ':' && rawText.charAt(i) != ';') {\n      continue;\n    }\n    int metadataStart=i;\n    while (rawText.charAt(i) != ':') {\n      i++;\n    }\n    Vector metadata=null;\n    boolean quotedPrintable=false;\n    String quotedPrintableCharset=null;\n    if (i > metadataStart) {\n      for (int j=metadataStart + 1; j <= i; j++) {\n        char c=rawText.charAt(j);\n        if (c == ';' || c == ':') {\n          String metadatum=rawText.substring(metadataStart + 1,j);\n          if (metadata == null) {\n            metadata=new Vector(1);\n          }\n          metadata.addElement(metadatum);\n          int equals=metadatum.indexOf('=');\n          if (equals >= 0) {\n            String key=metadatum.substring(0,equals);\n            String value=metadatum.substring(equals + 1);\n            if (\"ENCODING\".equalsIgnoreCase(key)) {\n              if (\"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n                quotedPrintable=true;\n              }\n            }\n else             if (\"CHARSET\".equalsIgnoreCase(key)) {\n              quotedPrintableCharset=value;\n            }\n          }\n          metadataStart=j;\n        }\n      }\n    }\n    i++;\n    int matchStart=i;\n    while ((i=rawText.indexOf((int)'\\n',i)) >= 0) {\n      if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n        i+=2;\n      }\n else       if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n        i++;\n      }\n else {\n        break;\n      }\n    }\n    if (i < 0) {\n      i=max;\n    }\n else     if (i > matchStart) {\n      if (matches == null) {\n        matches=new Vector(1);\n      }\n      if (rawText.charAt(i - 1) == '\\r') {\n        i--;\n      }\n      String element=rawText.substring(matchStart,i);\n      if (trim) {\n        element=element.trim();\n      }\n      if (quotedPrintable) {\n        element=decodeQuotedPrintable(element,quotedPrintableCharset);\n      }\n else {\n        element=stripContinuationCRLF(element);\n      }\n      if (metadata == null) {\n        Vector match=new Vector(1);\n        match.addElement(element);\n        matches.addElement(match);\n      }\n else {\n        metadata.insertElementAt(element,0);\n        matches.addElement(metadata);\n      }\n      i++;\n    }\n else {\n      i++;\n    }\n  }\n  if (matches == null || matches.isEmpty()) {\n    return null;\n  }\n  return matches;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 469,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 196,
        "startColumnNumber" : 8,
        "endLineNumber" : 196,
        "endColumnNumber" : 44
      },
      "nodeContext" : "matches == null || matches.isEmpty()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.util.Vector"
  }, {
    "nodeContext" : "matches",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 196,
      "startColumnNumber" : 27,
      "endLineNumber" : 196,
      "endColumnNumber" : 34
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 196,
        "startColumnNumber" : 27,
        "endLineNumber" : 196,
        "endColumnNumber" : 44
      },
      "nodeContext" : "matches.isEmpty()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 196,
        "startColumnNumber" : 8,
        "endLineNumber" : 196,
        "endColumnNumber" : 44
      },
      "nodeContext" : "matches == null || matches.isEmpty()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 196,
        "startColumnNumber" : 4,
        "endLineNumber" : 198,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (matches == null || matches.isEmpty()) {\n  return null;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3607,
        "startLineNumber" : 86,
        "startColumnNumber" : 62,
        "endLineNumber" : 200,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Vector matches=null;\n  int i=0;\n  int max=rawText.length();\n  while (i < max) {\n    i=rawText.indexOf(prefix,i);\n    if (i < 0) {\n      break;\n    }\n    if (i > 0 && rawText.charAt(i - 1) != '\\n') {\n      i++;\n      continue;\n    }\n    i+=prefix.length();\n    if (rawText.charAt(i) != ':' && rawText.charAt(i) != ';') {\n      continue;\n    }\n    int metadataStart=i;\n    while (rawText.charAt(i) != ':') {\n      i++;\n    }\n    Vector metadata=null;\n    boolean quotedPrintable=false;\n    String quotedPrintableCharset=null;\n    if (i > metadataStart) {\n      for (int j=metadataStart + 1; j <= i; j++) {\n        char c=rawText.charAt(j);\n        if (c == ';' || c == ':') {\n          String metadatum=rawText.substring(metadataStart + 1,j);\n          if (metadata == null) {\n            metadata=new Vector(1);\n          }\n          metadata.addElement(metadatum);\n          int equals=metadatum.indexOf('=');\n          if (equals >= 0) {\n            String key=metadatum.substring(0,equals);\n            String value=metadatum.substring(equals + 1);\n            if (\"ENCODING\".equalsIgnoreCase(key)) {\n              if (\"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n                quotedPrintable=true;\n              }\n            }\n else             if (\"CHARSET\".equalsIgnoreCase(key)) {\n              quotedPrintableCharset=value;\n            }\n          }\n          metadataStart=j;\n        }\n      }\n    }\n    i++;\n    int matchStart=i;\n    while ((i=rawText.indexOf((int)'\\n',i)) >= 0) {\n      if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n        i+=2;\n      }\n else       if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n        i++;\n      }\n else {\n        break;\n      }\n    }\n    if (i < 0) {\n      i=max;\n    }\n else     if (i > matchStart) {\n      if (matches == null) {\n        matches=new Vector(1);\n      }\n      if (rawText.charAt(i - 1) == '\\r') {\n        i--;\n      }\n      String element=rawText.substring(matchStart,i);\n      if (trim) {\n        element=element.trim();\n      }\n      if (quotedPrintable) {\n        element=decodeQuotedPrintable(element,quotedPrintableCharset);\n      }\n else {\n        element=stripContinuationCRLF(element);\n      }\n      if (metadata == null) {\n        Vector match=new Vector(1);\n        match.addElement(element);\n        matches.addElement(match);\n      }\n else {\n        metadata.insertElementAt(element,0);\n        matches.addElement(metadata);\n      }\n      i++;\n    }\n else {\n      i++;\n    }\n  }\n  if (matches == null || matches.isEmpty()) {\n    return null;\n  }\n  return matches;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 452,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3795,
        "startLineNumber" : 84,
        "startColumnNumber" : 2,
        "endLineNumber" : 200,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private static Vector matchVCardPrefixedField(String prefix,String rawText,boolean trim){\n  Vector matches=null;\n  int i=0;\n  int max=rawText.length();\n  while (i < max) {\n    i=rawText.indexOf(prefix,i);\n    if (i < 0) {\n      break;\n    }\n    if (i > 0 && rawText.charAt(i - 1) != '\\n') {\n      i++;\n      continue;\n    }\n    i+=prefix.length();\n    if (rawText.charAt(i) != ':' && rawText.charAt(i) != ';') {\n      continue;\n    }\n    int metadataStart=i;\n    while (rawText.charAt(i) != ':') {\n      i++;\n    }\n    Vector metadata=null;\n    boolean quotedPrintable=false;\n    String quotedPrintableCharset=null;\n    if (i > metadataStart) {\n      for (int j=metadataStart + 1; j <= i; j++) {\n        char c=rawText.charAt(j);\n        if (c == ';' || c == ':') {\n          String metadatum=rawText.substring(metadataStart + 1,j);\n          if (metadata == null) {\n            metadata=new Vector(1);\n          }\n          metadata.addElement(metadatum);\n          int equals=metadatum.indexOf('=');\n          if (equals >= 0) {\n            String key=metadatum.substring(0,equals);\n            String value=metadatum.substring(equals + 1);\n            if (\"ENCODING\".equalsIgnoreCase(key)) {\n              if (\"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n                quotedPrintable=true;\n              }\n            }\n else             if (\"CHARSET\".equalsIgnoreCase(key)) {\n              quotedPrintableCharset=value;\n            }\n          }\n          metadataStart=j;\n        }\n      }\n    }\n    i++;\n    int matchStart=i;\n    while ((i=rawText.indexOf((int)'\\n',i)) >= 0) {\n      if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n        i+=2;\n      }\n else       if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n        i++;\n      }\n else {\n        break;\n      }\n    }\n    if (i < 0) {\n      i=max;\n    }\n else     if (i > matchStart) {\n      if (matches == null) {\n        matches=new Vector(1);\n      }\n      if (rawText.charAt(i - 1) == '\\r') {\n        i--;\n      }\n      String element=rawText.substring(matchStart,i);\n      if (trim) {\n        element=element.trim();\n      }\n      if (quotedPrintable) {\n        element=decodeQuotedPrintable(element,quotedPrintableCharset);\n      }\n else {\n        element=stripContinuationCRLF(element);\n      }\n      if (metadata == null) {\n        Vector match=new Vector(1);\n        match.addElement(element);\n        matches.addElement(match);\n      }\n else {\n        metadata.insertElementAt(element,0);\n        matches.addElement(metadata);\n      }\n      i++;\n    }\n else {\n      i++;\n    }\n  }\n  if (matches == null || matches.isEmpty()) {\n    return null;\n  }\n  return matches;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 469,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 196,
        "startColumnNumber" : 8,
        "endLineNumber" : 196,
        "endColumnNumber" : 44
      },
      "nodeContext" : "matches == null || matches.isEmpty()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.util.Vector"
  }, {
    "nodeContext" : "matches",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 199,
      "startColumnNumber" : 11,
      "endLineNumber" : 199,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 199,
        "startColumnNumber" : 4,
        "endLineNumber" : 199,
        "endColumnNumber" : 19
      },
      "nodeContext" : "return matches;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3607,
        "startLineNumber" : 86,
        "startColumnNumber" : 62,
        "endLineNumber" : 200,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Vector matches=null;\n  int i=0;\n  int max=rawText.length();\n  while (i < max) {\n    i=rawText.indexOf(prefix,i);\n    if (i < 0) {\n      break;\n    }\n    if (i > 0 && rawText.charAt(i - 1) != '\\n') {\n      i++;\n      continue;\n    }\n    i+=prefix.length();\n    if (rawText.charAt(i) != ':' && rawText.charAt(i) != ';') {\n      continue;\n    }\n    int metadataStart=i;\n    while (rawText.charAt(i) != ':') {\n      i++;\n    }\n    Vector metadata=null;\n    boolean quotedPrintable=false;\n    String quotedPrintableCharset=null;\n    if (i > metadataStart) {\n      for (int j=metadataStart + 1; j <= i; j++) {\n        char c=rawText.charAt(j);\n        if (c == ';' || c == ':') {\n          String metadatum=rawText.substring(metadataStart + 1,j);\n          if (metadata == null) {\n            metadata=new Vector(1);\n          }\n          metadata.addElement(metadatum);\n          int equals=metadatum.indexOf('=');\n          if (equals >= 0) {\n            String key=metadatum.substring(0,equals);\n            String value=metadatum.substring(equals + 1);\n            if (\"ENCODING\".equalsIgnoreCase(key)) {\n              if (\"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n                quotedPrintable=true;\n              }\n            }\n else             if (\"CHARSET\".equalsIgnoreCase(key)) {\n              quotedPrintableCharset=value;\n            }\n          }\n          metadataStart=j;\n        }\n      }\n    }\n    i++;\n    int matchStart=i;\n    while ((i=rawText.indexOf((int)'\\n',i)) >= 0) {\n      if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n        i+=2;\n      }\n else       if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n        i++;\n      }\n else {\n        break;\n      }\n    }\n    if (i < 0) {\n      i=max;\n    }\n else     if (i > matchStart) {\n      if (matches == null) {\n        matches=new Vector(1);\n      }\n      if (rawText.charAt(i - 1) == '\\r') {\n        i--;\n      }\n      String element=rawText.substring(matchStart,i);\n      if (trim) {\n        element=element.trim();\n      }\n      if (quotedPrintable) {\n        element=decodeQuotedPrintable(element,quotedPrintableCharset);\n      }\n else {\n        element=stripContinuationCRLF(element);\n      }\n      if (metadata == null) {\n        Vector match=new Vector(1);\n        match.addElement(element);\n        matches.addElement(match);\n      }\n else {\n        metadata.insertElementAt(element,0);\n        matches.addElement(metadata);\n      }\n      i++;\n    }\n else {\n      i++;\n    }\n  }\n  if (matches == null || matches.isEmpty()) {\n    return null;\n  }\n  return matches;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 452,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3795,
        "startLineNumber" : 84,
        "startColumnNumber" : 2,
        "endLineNumber" : 200,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private static Vector matchVCardPrefixedField(String prefix,String rawText,boolean trim){\n  Vector matches=null;\n  int i=0;\n  int max=rawText.length();\n  while (i < max) {\n    i=rawText.indexOf(prefix,i);\n    if (i < 0) {\n      break;\n    }\n    if (i > 0 && rawText.charAt(i - 1) != '\\n') {\n      i++;\n      continue;\n    }\n    i+=prefix.length();\n    if (rawText.charAt(i) != ':' && rawText.charAt(i) != ';') {\n      continue;\n    }\n    int metadataStart=i;\n    while (rawText.charAt(i) != ':') {\n      i++;\n    }\n    Vector metadata=null;\n    boolean quotedPrintable=false;\n    String quotedPrintableCharset=null;\n    if (i > metadataStart) {\n      for (int j=metadataStart + 1; j <= i; j++) {\n        char c=rawText.charAt(j);\n        if (c == ';' || c == ':') {\n          String metadatum=rawText.substring(metadataStart + 1,j);\n          if (metadata == null) {\n            metadata=new Vector(1);\n          }\n          metadata.addElement(metadatum);\n          int equals=metadatum.indexOf('=');\n          if (equals >= 0) {\n            String key=metadatum.substring(0,equals);\n            String value=metadatum.substring(equals + 1);\n            if (\"ENCODING\".equalsIgnoreCase(key)) {\n              if (\"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n                quotedPrintable=true;\n              }\n            }\n else             if (\"CHARSET\".equalsIgnoreCase(key)) {\n              quotedPrintableCharset=value;\n            }\n          }\n          metadataStart=j;\n        }\n      }\n    }\n    i++;\n    int matchStart=i;\n    while ((i=rawText.indexOf((int)'\\n',i)) >= 0) {\n      if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n        i+=2;\n      }\n else       if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {\n        i++;\n      }\n else {\n        break;\n      }\n    }\n    if (i < 0) {\n      i=max;\n    }\n else     if (i > matchStart) {\n      if (matches == null) {\n        matches=new Vector(1);\n      }\n      if (rawText.charAt(i - 1) == '\\r') {\n        i--;\n      }\n      String element=rawText.substring(matchStart,i);\n      if (trim) {\n        element=element.trim();\n      }\n      if (quotedPrintable) {\n        element=decodeQuotedPrintable(element,quotedPrintableCharset);\n      }\n else {\n        element=stripContinuationCRLF(element);\n      }\n      if (metadata == null) {\n        Vector match=new Vector(1);\n        match.addElement(element);\n        matches.addElement(match);\n      }\n else {\n        metadata.insertElementAt(element,0);\n        matches.addElement(metadata);\n      }\n      i++;\n    }\n else {\n      i++;\n    }\n  }\n  if (matches == null || matches.isEmpty()) {\n    return null;\n  }\n  return matches;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 469,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 199,
        "startColumnNumber" : 4,
        "endLineNumber" : 199,
        "endColumnNumber" : 19
      },
      "nodeContext" : "return matches;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "java.util.Vector"
  } ],
  "positionList" : [ {
    "charLength" : 7,
    "startLineNumber" : 166,
    "startColumnNumber" : 12,
    "endLineNumber" : 166,
    "endColumnNumber" : 19
  }, {
    "charLength" : 7,
    "startLineNumber" : 184,
    "startColumnNumber" : 10,
    "endLineNumber" : 184,
    "endColumnNumber" : 17
  }, {
    "charLength" : 7,
    "startLineNumber" : 187,
    "startColumnNumber" : 10,
    "endLineNumber" : 187,
    "endColumnNumber" : 17
  }, {
    "charLength" : 7,
    "startLineNumber" : 196,
    "startColumnNumber" : 8,
    "endLineNumber" : 196,
    "endColumnNumber" : 15
  }, {
    "charLength" : 7,
    "startLineNumber" : 196,
    "startColumnNumber" : 27,
    "endLineNumber" : 196,
    "endColumnNumber" : 34
  }, {
    "charLength" : 7,
    "startLineNumber" : 199,
    "startColumnNumber" : 11,
    "endLineNumber" : 199,
    "endColumnNumber" : 18
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 9
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 9
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 9
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 9
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 9
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 9
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 1
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 1
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 1
  } ]
}