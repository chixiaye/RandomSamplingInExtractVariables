{
  "id" : 413,
  "expression" : "Assume",
  "projectName" : "jenkinsci@jenkins",
  "commitID" : "b629c43c35ed3cf8a64f1513efc44f92ea81e000",
  "filePath" : "core/src/test/java/hudson/util/io/ZipArchiverTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Assume",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 58,
      "startColumnNumber" : 12,
      "endLineNumber" : 58,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 58,
        "startColumnNumber" : 12,
        "endLineNumber" : 58,
        "endColumnNumber" : 39
      },
      "nodeContext" : "Assume.assumeNoException(e)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 58,
        "startColumnNumber" : 12,
        "endLineNumber" : 58,
        "endColumnNumber" : 40
      },
      "nodeContext" : "Assume.assumeNoException(e);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 152,
        "startLineNumber" : 56,
        "startColumnNumber" : 32,
        "endLineNumber" : 59,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Assume.assumeNoException(e);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 174,
        "startLineNumber" : 56,
        "startColumnNumber" : 10,
        "endLineNumber" : 59,
        "endColumnNumber" : 9
      },
      "nodeContext" : "catch (IOException e) {\n  Assume.assumeNoException(e);\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 310,
        "startLineNumber" : 54,
        "startColumnNumber" : 8,
        "endLineNumber" : 59,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try (RandomAccessFile largeFile=new RandomAccessFile(hugeFile.toFile(),\"rw\")){\n  largeFile.setLength(length);\n}\n catch (IOException e) {\n  Assume.assumeNoException(e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 30,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1559,
        "startLineNumber" : 50,
        "startColumnNumber" : 51,
        "endLineNumber" : 83,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Path hugeFile=tmp.newFolder().toPath().resolve(\"huge64bitFileTest.txt\");\n  long length=4L * 1024 * 1024* 1024 + 2;\n  try (RandomAccessFile largeFile=new RandomAccessFile(hugeFile.toFile(),\"rw\")){\n    largeFile.setLength(length);\n  }\n catch (  IOException e) {\n    Assume.assumeNoException(e);\n  }\n  Path zipFile=Files.createTempFile(tmp.getRoot().toPath(),\"test\",\".zip\");\n  try (ZipArchiver archiver=new ZipArchiver(Files.newOutputStream(zipFile))){\n    archiver.visit(hugeFile.toFile(),\"huge64bitFileTest.txt\");\n  }\n   try (ZipFile zipFileVerify=new ZipFile(zipFile.toFile())){\n    assertEquals(1,zipFileVerify.size());\n    ZipEntry zipEntry=zipFileVerify.entries().nextElement();\n    assertEquals(\"huge64bitFileTest.txt\",zipEntry.getName());\n    assertEquals(length,zipEntry.getSize());\n  }\n catch (  ZipException e) {\n    if (e.getMessage().contains(\"invalid CEN header (bad signature)\")) {\n      Assume.assumeNoException(e);\n    }\n else {\n      throw e;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 158,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1617,
        "startLineNumber" : 49,
        "startColumnNumber" : 4,
        "endLineNumber" : 83,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void huge64bitFile() throws IOException {\n  Path hugeFile=tmp.newFolder().toPath().resolve(\"huge64bitFileTest.txt\");\n  long length=4L * 1024 * 1024* 1024 + 2;\n  try (RandomAccessFile largeFile=new RandomAccessFile(hugeFile.toFile(),\"rw\")){\n    largeFile.setLength(length);\n  }\n catch (  IOException e) {\n    Assume.assumeNoException(e);\n  }\n  Path zipFile=Files.createTempFile(tmp.getRoot().toPath(),\"test\",\".zip\");\n  try (ZipArchiver archiver=new ZipArchiver(Files.newOutputStream(zipFile))){\n    archiver.visit(hugeFile.toFile(),\"huge64bitFileTest.txt\");\n  }\n   try (ZipFile zipFileVerify=new ZipFile(zipFile.toFile())){\n    assertEquals(1,zipFileVerify.size());\n    ZipEntry zipEntry=zipFileVerify.entries().nextElement();\n    assertEquals(\"huge64bitFileTest.txt\",zipEntry.getName());\n    assertEquals(length,zipEntry.getSize());\n  }\n catch (  ZipException e) {\n    if (e.getMessage().contains(\"invalid CEN header (bad signature)\")) {\n      Assume.assumeNoException(e);\n    }\n else {\n      throw e;\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 166,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 58,
        "startColumnNumber" : 12,
        "endLineNumber" : 58,
        "endColumnNumber" : 40
      },
      "nodeContext" : "Assume.assumeNoException(e);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "Assume",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 78,
      "startColumnNumber" : 16,
      "endLineNumber" : 78,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 78,
        "startColumnNumber" : 16,
        "endLineNumber" : 78,
        "endColumnNumber" : 43
      },
      "nodeContext" : "Assume.assumeNoException(e)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 78,
        "startColumnNumber" : 16,
        "endLineNumber" : 78,
        "endColumnNumber" : 44
      },
      "nodeContext" : "Assume.assumeNoException(e);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 136,
        "startLineNumber" : 76,
        "startColumnNumber" : 79,
        "endLineNumber" : 79,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Assume.assumeNoException(e);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 251,
        "startLineNumber" : 76,
        "startColumnNumber" : 12,
        "endLineNumber" : 81,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (e.getMessage().contains(\"invalid CEN header (bad signature)\")) {\n  Assume.assumeNoException(e);\n}\n else {\n  throw e;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 277,
        "startLineNumber" : 75,
        "startColumnNumber" : 33,
        "endLineNumber" : 82,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (e.getMessage().contains(\"invalid CEN header (bad signature)\")) {\n    Assume.assumeNoException(e);\n  }\n else {\n    throw e;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 300,
        "startLineNumber" : 75,
        "startColumnNumber" : 10,
        "endLineNumber" : 82,
        "endColumnNumber" : 9
      },
      "nodeContext" : "catch (ZipException e) {\n  if (e.getMessage().contains(\"invalid CEN header (bad signature)\")) {\n    Assume.assumeNoException(e);\n  }\n else {\n    throw e;\n  }\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 22,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 624,
        "startLineNumber" : 70,
        "startColumnNumber" : 8,
        "endLineNumber" : 82,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try (ZipFile zipFileVerify=new ZipFile(zipFile.toFile())){\n  assertEquals(1,zipFileVerify.size());\n  ZipEntry zipEntry=zipFileVerify.entries().nextElement();\n  assertEquals(\"huge64bitFileTest.txt\",zipEntry.getName());\n  assertEquals(length,zipEntry.getSize());\n}\n catch (ZipException e) {\n  if (e.getMessage().contains(\"invalid CEN header (bad signature)\")) {\n    Assume.assumeNoException(e);\n  }\n else {\n    throw e;\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 66,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1559,
        "startLineNumber" : 50,
        "startColumnNumber" : 51,
        "endLineNumber" : 83,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Path hugeFile=tmp.newFolder().toPath().resolve(\"huge64bitFileTest.txt\");\n  long length=4L * 1024 * 1024* 1024 + 2;\n  try (RandomAccessFile largeFile=new RandomAccessFile(hugeFile.toFile(),\"rw\")){\n    largeFile.setLength(length);\n  }\n catch (  IOException e) {\n    Assume.assumeNoException(e);\n  }\n  Path zipFile=Files.createTempFile(tmp.getRoot().toPath(),\"test\",\".zip\");\n  try (ZipArchiver archiver=new ZipArchiver(Files.newOutputStream(zipFile))){\n    archiver.visit(hugeFile.toFile(),\"huge64bitFileTest.txt\");\n  }\n   try (ZipFile zipFileVerify=new ZipFile(zipFile.toFile())){\n    assertEquals(1,zipFileVerify.size());\n    ZipEntry zipEntry=zipFileVerify.entries().nextElement();\n    assertEquals(\"huge64bitFileTest.txt\",zipEntry.getName());\n    assertEquals(length,zipEntry.getSize());\n  }\n catch (  ZipException e) {\n    if (e.getMessage().contains(\"invalid CEN header (bad signature)\")) {\n      Assume.assumeNoException(e);\n    }\n else {\n      throw e;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 158,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1617,
        "startLineNumber" : 49,
        "startColumnNumber" : 4,
        "endLineNumber" : 83,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void huge64bitFile() throws IOException {\n  Path hugeFile=tmp.newFolder().toPath().resolve(\"huge64bitFileTest.txt\");\n  long length=4L * 1024 * 1024* 1024 + 2;\n  try (RandomAccessFile largeFile=new RandomAccessFile(hugeFile.toFile(),\"rw\")){\n    largeFile.setLength(length);\n  }\n catch (  IOException e) {\n    Assume.assumeNoException(e);\n  }\n  Path zipFile=Files.createTempFile(tmp.getRoot().toPath(),\"test\",\".zip\");\n  try (ZipArchiver archiver=new ZipArchiver(Files.newOutputStream(zipFile))){\n    archiver.visit(hugeFile.toFile(),\"huge64bitFileTest.txt\");\n  }\n   try (ZipFile zipFileVerify=new ZipFile(zipFile.toFile())){\n    assertEquals(1,zipFileVerify.size());\n    ZipEntry zipEntry=zipFileVerify.entries().nextElement();\n    assertEquals(\"huge64bitFileTest.txt\",zipEntry.getName());\n    assertEquals(length,zipEntry.getSize());\n  }\n catch (  ZipException e) {\n    if (e.getMessage().contains(\"invalid CEN header (bad signature)\")) {\n      Assume.assumeNoException(e);\n    }\n else {\n      throw e;\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 166,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 78,
        "startColumnNumber" : 16,
        "endLineNumber" : 78,
        "endColumnNumber" : 44
      },
      "nodeContext" : "Assume.assumeNoException(e);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : null
  } ],
  "positionList" : [ {
    "charLength" : 6,
    "startLineNumber" : 58,
    "startColumnNumber" : 12,
    "endLineNumber" : 58,
    "endColumnNumber" : 18
  }, {
    "charLength" : 6,
    "startLineNumber" : 78,
    "startColumnNumber" : 16,
    "endLineNumber" : 78,
    "endColumnNumber" : 22
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 7
  } ]
}