{
  "id" : 924,
  "expression" : "exception",
  "projectName" : "SeleniumHQ@selenium",
  "commitID" : "a2a60d7cfea954b4fa7c8d09f6b92ee526f37536",
  "filePath" : "java/server/src/org/openqa/selenium/grid/sessionqueue/NewSessionQueuer.java",
  "occurrences" : 6,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "exception",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 98,
      "startColumnNumber" : 41,
      "endLineNumber" : 98,
      "endColumnNumber" : 50
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 98,
        "startColumnNumber" : 10,
        "endLineNumber" : 98,
        "endColumnNumber" : 51
      },
      "nodeContext" : "EXCEPTION.accept(attributeMap,exception)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 98,
        "startColumnNumber" : 10,
        "endLineNumber" : 98,
        "endColumnNumber" : 52
      },
      "nodeContext" : "EXCEPTION.accept(attributeMap,exception);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 418,
        "startLineNumber" : 95,
        "startColumnNumber" : 33,
        "endLineNumber" : 103,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  SessionNotCreatedException exception=new SessionNotCreatedException(\"No capabilities found\");\n  EXCEPTION.accept(attributeMap,exception);\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(exception.getMessage()));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  throw exception;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 43,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 443,
        "startLineNumber" : 95,
        "startColumnNumber" : 8,
        "endLineNumber" : 103,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!iterator.hasNext()) {\n  SessionNotCreatedException exception=new SessionNotCreatedException(\"No capabilities found\");\n  EXCEPTION.accept(attributeMap,exception);\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(exception.getMessage()));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  throw exception;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 48,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 700,
        "startLineNumber" : 90,
        "startColumnNumber" : 70,
        "endLineNumber" : 104,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  Objects.requireNonNull(payload,\"Requests to process must be set.\");\n  attributeMap.put(\"request.payload\",EventAttribute.setValue(payload.toString()));\n  Iterator<Capabilities> iterator=payload.stream().iterator();\n  if (!iterator.hasNext()) {\n    SessionNotCreatedException exception=new SessionNotCreatedException(\"No capabilities found\");\n    EXCEPTION.accept(attributeMap,exception);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(exception.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw exception;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 79,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1332,
        "startLineNumber" : 88,
        "startColumnNumber" : 6,
        "endLineNumber" : 113,
        "endColumnNumber" : 7
      },
      "nodeContext" : "try (Reader reader=reader(request);NewSessionPayload payload=NewSessionPayload.create(reader)){\n  Objects.requireNonNull(payload,\"Requests to process must be set.\");\n  attributeMap.put(\"request.payload\",EventAttribute.setValue(payload.toString()));\n  Iterator<Capabilities> iterator=payload.stream().iterator();\n  if (!iterator.hasNext()) {\n    SessionNotCreatedException exception=new SessionNotCreatedException(\"No capabilities found\");\n    EXCEPTION.accept(attributeMap,exception);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(exception.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw exception;\n  }\n}\n catch (IOException e) {\n  SessionNotCreatedException exception=new SessionNotCreatedException(e.getMessage(),e);\n  EXCEPTION.accept(attributeMap,exception);\n  String errorMessage=\"IOException while reading the request payload. \" + exception.getMessage();\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(errorMessage));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  throw exception;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 156,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1417,
        "startLineNumber" : 86,
        "startColumnNumber" : 90,
        "endLineNumber" : 114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  try (Reader reader=reader(request);NewSessionPayload payload=NewSessionPayload.create(reader)){\n    Objects.requireNonNull(payload,\"Requests to process must be set.\");\n    attributeMap.put(\"request.payload\",EventAttribute.setValue(payload.toString()));\n    Iterator<Capabilities> iterator=payload.stream().iterator();\n    if (!iterator.hasNext()) {\n      SessionNotCreatedException exception=new SessionNotCreatedException(\"No capabilities found\");\n      EXCEPTION.accept(attributeMap,exception);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(exception.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw exception;\n    }\n  }\n catch (  IOException e) {\n    SessionNotCreatedException exception=new SessionNotCreatedException(e.getMessage(),e);\n    EXCEPTION.accept(attributeMap,exception);\n    String errorMessage=\"IOException while reading the request payload. \" + exception.getMessage();\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(errorMessage));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw exception;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 171,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1503,
        "startLineNumber" : 86,
        "startColumnNumber" : 4,
        "endLineNumber" : 114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try (Span span=tracer.getCurrentContext().createSpan(\"newsession_queuer.validate\")){\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  try (Reader reader=reader(request);NewSessionPayload payload=NewSessionPayload.create(reader)){\n    Objects.requireNonNull(payload,\"Requests to process must be set.\");\n    attributeMap.put(\"request.payload\",EventAttribute.setValue(payload.toString()));\n    Iterator<Capabilities> iterator=payload.stream().iterator();\n    if (!iterator.hasNext()) {\n      SessionNotCreatedException exception=new SessionNotCreatedException(\"No capabilities found\");\n      EXCEPTION.accept(attributeMap,exception);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(exception.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw exception;\n    }\n  }\n catch (  IOException e) {\n    SessionNotCreatedException exception=new SessionNotCreatedException(e.getMessage(),e);\n    EXCEPTION.accept(attributeMap,exception);\n    String errorMessage=\"IOException while reading the request payload. \" + exception.getMessage();\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(errorMessage));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw exception;\n  }\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 183,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1513,
        "startLineNumber" : 85,
        "startColumnNumber" : 58,
        "endLineNumber" : 115,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  try (Span span=tracer.getCurrentContext().createSpan(\"newsession_queuer.validate\")){\n    Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n    try (Reader reader=reader(request);NewSessionPayload payload=NewSessionPayload.create(reader)){\n      Objects.requireNonNull(payload,\"Requests to process must be set.\");\n      attributeMap.put(\"request.payload\",EventAttribute.setValue(payload.toString()));\n      Iterator<Capabilities> iterator=payload.stream().iterator();\n      if (!iterator.hasNext()) {\n        SessionNotCreatedException exception=new SessionNotCreatedException(\"No capabilities found\");\n        EXCEPTION.accept(attributeMap,exception);\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(exception.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw exception;\n      }\n    }\n catch (    IOException e) {\n      SessionNotCreatedException exception=new SessionNotCreatedException(e.getMessage(),e);\n      EXCEPTION.accept(attributeMap,exception);\n      String errorMessage=\"IOException while reading the request payload. \" + exception.getMessage();\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(errorMessage));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw exception;\n    }\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 184,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1569,
        "startLineNumber" : 85,
        "startColumnNumber" : 2,
        "endLineNumber" : 115,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public void validateSessionRequest(HttpRequest request){\n  try (Span span=tracer.getCurrentContext().createSpan(\"newsession_queuer.validate\")){\n    Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n    try (Reader reader=reader(request);NewSessionPayload payload=NewSessionPayload.create(reader)){\n      Objects.requireNonNull(payload,\"Requests to process must be set.\");\n      attributeMap.put(\"request.payload\",EventAttribute.setValue(payload.toString()));\n      Iterator<Capabilities> iterator=payload.stream().iterator();\n      if (!iterator.hasNext()) {\n        SessionNotCreatedException exception=new SessionNotCreatedException(\"No capabilities found\");\n        EXCEPTION.accept(attributeMap,exception);\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(exception.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw exception;\n      }\n    }\n catch (    IOException e) {\n      SessionNotCreatedException exception=new SessionNotCreatedException(e.getMessage(),e);\n      EXCEPTION.accept(attributeMap,exception);\n      String errorMessage=\"IOException while reading the request payload. \" + exception.getMessage();\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(errorMessage));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw exception;\n    }\n  }\n }\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 192,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 98,
        "startColumnNumber" : 10,
        "endLineNumber" : 98,
        "endColumnNumber" : 52
      },
      "nodeContext" : "EXCEPTION.accept(attributeMap,exception);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.openqa.selenium.SessionNotCreatedException"
  }, {
    "nodeContext" : "exception",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 100,
      "startColumnNumber" : 77,
      "endLineNumber" : 100,
      "endColumnNumber" : 86
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 100,
        "startColumnNumber" : 77,
        "endLineNumber" : 100,
        "endColumnNumber" : 99
      },
      "nodeContext" : "exception.getMessage()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 100,
        "startColumnNumber" : 53,
        "endLineNumber" : 100,
        "endColumnNumber" : 100
      },
      "nodeContext" : "EventAttribute.setValue(exception.getMessage())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 119,
        "startLineNumber" : 99,
        "startColumnNumber" : 10,
        "endLineNumber" : 100,
        "endColumnNumber" : 101
      },
      "nodeContext" : "attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(exception.getMessage()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 120,
        "startLineNumber" : 99,
        "startColumnNumber" : 10,
        "endLineNumber" : 100,
        "endColumnNumber" : 102
      },
      "nodeContext" : "attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(exception.getMessage()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 418,
        "startLineNumber" : 95,
        "startColumnNumber" : 33,
        "endLineNumber" : 103,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  SessionNotCreatedException exception=new SessionNotCreatedException(\"No capabilities found\");\n  EXCEPTION.accept(attributeMap,exception);\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(exception.getMessage()));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  throw exception;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 43,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 443,
        "startLineNumber" : 95,
        "startColumnNumber" : 8,
        "endLineNumber" : 103,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!iterator.hasNext()) {\n  SessionNotCreatedException exception=new SessionNotCreatedException(\"No capabilities found\");\n  EXCEPTION.accept(attributeMap,exception);\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(exception.getMessage()));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  throw exception;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 48,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 700,
        "startLineNumber" : 90,
        "startColumnNumber" : 70,
        "endLineNumber" : 104,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  Objects.requireNonNull(payload,\"Requests to process must be set.\");\n  attributeMap.put(\"request.payload\",EventAttribute.setValue(payload.toString()));\n  Iterator<Capabilities> iterator=payload.stream().iterator();\n  if (!iterator.hasNext()) {\n    SessionNotCreatedException exception=new SessionNotCreatedException(\"No capabilities found\");\n    EXCEPTION.accept(attributeMap,exception);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(exception.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw exception;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 79,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1332,
        "startLineNumber" : 88,
        "startColumnNumber" : 6,
        "endLineNumber" : 113,
        "endColumnNumber" : 7
      },
      "nodeContext" : "try (Reader reader=reader(request);NewSessionPayload payload=NewSessionPayload.create(reader)){\n  Objects.requireNonNull(payload,\"Requests to process must be set.\");\n  attributeMap.put(\"request.payload\",EventAttribute.setValue(payload.toString()));\n  Iterator<Capabilities> iterator=payload.stream().iterator();\n  if (!iterator.hasNext()) {\n    SessionNotCreatedException exception=new SessionNotCreatedException(\"No capabilities found\");\n    EXCEPTION.accept(attributeMap,exception);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(exception.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw exception;\n  }\n}\n catch (IOException e) {\n  SessionNotCreatedException exception=new SessionNotCreatedException(e.getMessage(),e);\n  EXCEPTION.accept(attributeMap,exception);\n  String errorMessage=\"IOException while reading the request payload. \" + exception.getMessage();\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(errorMessage));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  throw exception;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 156,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1417,
        "startLineNumber" : 86,
        "startColumnNumber" : 90,
        "endLineNumber" : 114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  try (Reader reader=reader(request);NewSessionPayload payload=NewSessionPayload.create(reader)){\n    Objects.requireNonNull(payload,\"Requests to process must be set.\");\n    attributeMap.put(\"request.payload\",EventAttribute.setValue(payload.toString()));\n    Iterator<Capabilities> iterator=payload.stream().iterator();\n    if (!iterator.hasNext()) {\n      SessionNotCreatedException exception=new SessionNotCreatedException(\"No capabilities found\");\n      EXCEPTION.accept(attributeMap,exception);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(exception.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw exception;\n    }\n  }\n catch (  IOException e) {\n    SessionNotCreatedException exception=new SessionNotCreatedException(e.getMessage(),e);\n    EXCEPTION.accept(attributeMap,exception);\n    String errorMessage=\"IOException while reading the request payload. \" + exception.getMessage();\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(errorMessage));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw exception;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 171,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1503,
        "startLineNumber" : 86,
        "startColumnNumber" : 4,
        "endLineNumber" : 114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try (Span span=tracer.getCurrentContext().createSpan(\"newsession_queuer.validate\")){\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  try (Reader reader=reader(request);NewSessionPayload payload=NewSessionPayload.create(reader)){\n    Objects.requireNonNull(payload,\"Requests to process must be set.\");\n    attributeMap.put(\"request.payload\",EventAttribute.setValue(payload.toString()));\n    Iterator<Capabilities> iterator=payload.stream().iterator();\n    if (!iterator.hasNext()) {\n      SessionNotCreatedException exception=new SessionNotCreatedException(\"No capabilities found\");\n      EXCEPTION.accept(attributeMap,exception);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(exception.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw exception;\n    }\n  }\n catch (  IOException e) {\n    SessionNotCreatedException exception=new SessionNotCreatedException(e.getMessage(),e);\n    EXCEPTION.accept(attributeMap,exception);\n    String errorMessage=\"IOException while reading the request payload. \" + exception.getMessage();\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(errorMessage));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw exception;\n  }\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 183,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1513,
        "startLineNumber" : 85,
        "startColumnNumber" : 58,
        "endLineNumber" : 115,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  try (Span span=tracer.getCurrentContext().createSpan(\"newsession_queuer.validate\")){\n    Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n    try (Reader reader=reader(request);NewSessionPayload payload=NewSessionPayload.create(reader)){\n      Objects.requireNonNull(payload,\"Requests to process must be set.\");\n      attributeMap.put(\"request.payload\",EventAttribute.setValue(payload.toString()));\n      Iterator<Capabilities> iterator=payload.stream().iterator();\n      if (!iterator.hasNext()) {\n        SessionNotCreatedException exception=new SessionNotCreatedException(\"No capabilities found\");\n        EXCEPTION.accept(attributeMap,exception);\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(exception.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw exception;\n      }\n    }\n catch (    IOException e) {\n      SessionNotCreatedException exception=new SessionNotCreatedException(e.getMessage(),e);\n      EXCEPTION.accept(attributeMap,exception);\n      String errorMessage=\"IOException while reading the request payload. \" + exception.getMessage();\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(errorMessage));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw exception;\n    }\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 184,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1569,
        "startLineNumber" : 85,
        "startColumnNumber" : 2,
        "endLineNumber" : 115,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public void validateSessionRequest(HttpRequest request){\n  try (Span span=tracer.getCurrentContext().createSpan(\"newsession_queuer.validate\")){\n    Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n    try (Reader reader=reader(request);NewSessionPayload payload=NewSessionPayload.create(reader)){\n      Objects.requireNonNull(payload,\"Requests to process must be set.\");\n      attributeMap.put(\"request.payload\",EventAttribute.setValue(payload.toString()));\n      Iterator<Capabilities> iterator=payload.stream().iterator();\n      if (!iterator.hasNext()) {\n        SessionNotCreatedException exception=new SessionNotCreatedException(\"No capabilities found\");\n        EXCEPTION.accept(attributeMap,exception);\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(exception.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw exception;\n      }\n    }\n catch (    IOException e) {\n      SessionNotCreatedException exception=new SessionNotCreatedException(e.getMessage(),e);\n      EXCEPTION.accept(attributeMap,exception);\n      String errorMessage=\"IOException while reading the request payload. \" + exception.getMessage();\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(errorMessage));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw exception;\n    }\n  }\n }\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 192,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 100,
        "startColumnNumber" : 53,
        "endLineNumber" : 100,
        "endColumnNumber" : 100
      },
      "nodeContext" : "EventAttribute.setValue(exception.getMessage())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.openqa.selenium.SessionNotCreatedException"
  }, {
    "nodeContext" : "exception",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 102,
      "startColumnNumber" : 16,
      "endLineNumber" : 102,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 102,
        "startColumnNumber" : 10,
        "endLineNumber" : 102,
        "endColumnNumber" : 26
      },
      "nodeContext" : "throw exception;\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 418,
        "startLineNumber" : 95,
        "startColumnNumber" : 33,
        "endLineNumber" : 103,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  SessionNotCreatedException exception=new SessionNotCreatedException(\"No capabilities found\");\n  EXCEPTION.accept(attributeMap,exception);\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(exception.getMessage()));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  throw exception;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 43,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 443,
        "startLineNumber" : 95,
        "startColumnNumber" : 8,
        "endLineNumber" : 103,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!iterator.hasNext()) {\n  SessionNotCreatedException exception=new SessionNotCreatedException(\"No capabilities found\");\n  EXCEPTION.accept(attributeMap,exception);\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(exception.getMessage()));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  throw exception;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 48,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 700,
        "startLineNumber" : 90,
        "startColumnNumber" : 70,
        "endLineNumber" : 104,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  Objects.requireNonNull(payload,\"Requests to process must be set.\");\n  attributeMap.put(\"request.payload\",EventAttribute.setValue(payload.toString()));\n  Iterator<Capabilities> iterator=payload.stream().iterator();\n  if (!iterator.hasNext()) {\n    SessionNotCreatedException exception=new SessionNotCreatedException(\"No capabilities found\");\n    EXCEPTION.accept(attributeMap,exception);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(exception.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw exception;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 79,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1332,
        "startLineNumber" : 88,
        "startColumnNumber" : 6,
        "endLineNumber" : 113,
        "endColumnNumber" : 7
      },
      "nodeContext" : "try (Reader reader=reader(request);NewSessionPayload payload=NewSessionPayload.create(reader)){\n  Objects.requireNonNull(payload,\"Requests to process must be set.\");\n  attributeMap.put(\"request.payload\",EventAttribute.setValue(payload.toString()));\n  Iterator<Capabilities> iterator=payload.stream().iterator();\n  if (!iterator.hasNext()) {\n    SessionNotCreatedException exception=new SessionNotCreatedException(\"No capabilities found\");\n    EXCEPTION.accept(attributeMap,exception);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(exception.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw exception;\n  }\n}\n catch (IOException e) {\n  SessionNotCreatedException exception=new SessionNotCreatedException(e.getMessage(),e);\n  EXCEPTION.accept(attributeMap,exception);\n  String errorMessage=\"IOException while reading the request payload. \" + exception.getMessage();\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(errorMessage));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  throw exception;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 156,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1417,
        "startLineNumber" : 86,
        "startColumnNumber" : 90,
        "endLineNumber" : 114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  try (Reader reader=reader(request);NewSessionPayload payload=NewSessionPayload.create(reader)){\n    Objects.requireNonNull(payload,\"Requests to process must be set.\");\n    attributeMap.put(\"request.payload\",EventAttribute.setValue(payload.toString()));\n    Iterator<Capabilities> iterator=payload.stream().iterator();\n    if (!iterator.hasNext()) {\n      SessionNotCreatedException exception=new SessionNotCreatedException(\"No capabilities found\");\n      EXCEPTION.accept(attributeMap,exception);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(exception.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw exception;\n    }\n  }\n catch (  IOException e) {\n    SessionNotCreatedException exception=new SessionNotCreatedException(e.getMessage(),e);\n    EXCEPTION.accept(attributeMap,exception);\n    String errorMessage=\"IOException while reading the request payload. \" + exception.getMessage();\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(errorMessage));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw exception;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 171,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1503,
        "startLineNumber" : 86,
        "startColumnNumber" : 4,
        "endLineNumber" : 114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try (Span span=tracer.getCurrentContext().createSpan(\"newsession_queuer.validate\")){\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  try (Reader reader=reader(request);NewSessionPayload payload=NewSessionPayload.create(reader)){\n    Objects.requireNonNull(payload,\"Requests to process must be set.\");\n    attributeMap.put(\"request.payload\",EventAttribute.setValue(payload.toString()));\n    Iterator<Capabilities> iterator=payload.stream().iterator();\n    if (!iterator.hasNext()) {\n      SessionNotCreatedException exception=new SessionNotCreatedException(\"No capabilities found\");\n      EXCEPTION.accept(attributeMap,exception);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(exception.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw exception;\n    }\n  }\n catch (  IOException e) {\n    SessionNotCreatedException exception=new SessionNotCreatedException(e.getMessage(),e);\n    EXCEPTION.accept(attributeMap,exception);\n    String errorMessage=\"IOException while reading the request payload. \" + exception.getMessage();\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(errorMessage));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw exception;\n  }\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 183,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1513,
        "startLineNumber" : 85,
        "startColumnNumber" : 58,
        "endLineNumber" : 115,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  try (Span span=tracer.getCurrentContext().createSpan(\"newsession_queuer.validate\")){\n    Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n    try (Reader reader=reader(request);NewSessionPayload payload=NewSessionPayload.create(reader)){\n      Objects.requireNonNull(payload,\"Requests to process must be set.\");\n      attributeMap.put(\"request.payload\",EventAttribute.setValue(payload.toString()));\n      Iterator<Capabilities> iterator=payload.stream().iterator();\n      if (!iterator.hasNext()) {\n        SessionNotCreatedException exception=new SessionNotCreatedException(\"No capabilities found\");\n        EXCEPTION.accept(attributeMap,exception);\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(exception.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw exception;\n      }\n    }\n catch (    IOException e) {\n      SessionNotCreatedException exception=new SessionNotCreatedException(e.getMessage(),e);\n      EXCEPTION.accept(attributeMap,exception);\n      String errorMessage=\"IOException while reading the request payload. \" + exception.getMessage();\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(errorMessage));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw exception;\n    }\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 184,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1569,
        "startLineNumber" : 85,
        "startColumnNumber" : 2,
        "endLineNumber" : 115,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public void validateSessionRequest(HttpRequest request){\n  try (Span span=tracer.getCurrentContext().createSpan(\"newsession_queuer.validate\")){\n    Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n    try (Reader reader=reader(request);NewSessionPayload payload=NewSessionPayload.create(reader)){\n      Objects.requireNonNull(payload,\"Requests to process must be set.\");\n      attributeMap.put(\"request.payload\",EventAttribute.setValue(payload.toString()));\n      Iterator<Capabilities> iterator=payload.stream().iterator();\n      if (!iterator.hasNext()) {\n        SessionNotCreatedException exception=new SessionNotCreatedException(\"No capabilities found\");\n        EXCEPTION.accept(attributeMap,exception);\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(exception.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw exception;\n      }\n    }\n catch (    IOException e) {\n      SessionNotCreatedException exception=new SessionNotCreatedException(e.getMessage(),e);\n      EXCEPTION.accept(attributeMap,exception);\n      String errorMessage=\"IOException while reading the request payload. \" + exception.getMessage();\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(errorMessage));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw exception;\n    }\n  }\n }\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 192,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 102,
        "startColumnNumber" : 10,
        "endLineNumber" : 102,
        "endColumnNumber" : 26
      },
      "nodeContext" : "throw exception;\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.openqa.selenium.SessionNotCreatedException"
  }, {
    "nodeContext" : "exception",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 106,
      "startColumnNumber" : 39,
      "endLineNumber" : 106,
      "endColumnNumber" : 48
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 106,
        "startColumnNumber" : 8,
        "endLineNumber" : 106,
        "endColumnNumber" : 49
      },
      "nodeContext" : "EXCEPTION.accept(attributeMap,exception)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 106,
        "startColumnNumber" : 8,
        "endLineNumber" : 106,
        "endColumnNumber" : 50
      },
      "nodeContext" : "EXCEPTION.accept(attributeMap,exception);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 492,
        "startLineNumber" : 104,
        "startColumnNumber" : 30,
        "endLineNumber" : 113,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  SessionNotCreatedException exception=new SessionNotCreatedException(e.getMessage(),e);\n  EXCEPTION.accept(attributeMap,exception);\n  String errorMessage=\"IOException while reading the request payload. \" + exception.getMessage();\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(errorMessage));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  throw exception;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 54,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 514,
        "startLineNumber" : 104,
        "startColumnNumber" : 8,
        "endLineNumber" : 113,
        "endColumnNumber" : 7
      },
      "nodeContext" : "catch (IOException e) {\n  SessionNotCreatedException exception=new SessionNotCreatedException(e.getMessage(),e);\n  EXCEPTION.accept(attributeMap,exception);\n  String errorMessage=\"IOException while reading the request payload. \" + exception.getMessage();\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(errorMessage));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  throw exception;\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 59,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1332,
        "startLineNumber" : 88,
        "startColumnNumber" : 6,
        "endLineNumber" : 113,
        "endColumnNumber" : 7
      },
      "nodeContext" : "try (Reader reader=reader(request);NewSessionPayload payload=NewSessionPayload.create(reader)){\n  Objects.requireNonNull(payload,\"Requests to process must be set.\");\n  attributeMap.put(\"request.payload\",EventAttribute.setValue(payload.toString()));\n  Iterator<Capabilities> iterator=payload.stream().iterator();\n  if (!iterator.hasNext()) {\n    SessionNotCreatedException exception=new SessionNotCreatedException(\"No capabilities found\");\n    EXCEPTION.accept(attributeMap,exception);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(exception.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw exception;\n  }\n}\n catch (IOException e) {\n  SessionNotCreatedException exception=new SessionNotCreatedException(e.getMessage(),e);\n  EXCEPTION.accept(attributeMap,exception);\n  String errorMessage=\"IOException while reading the request payload. \" + exception.getMessage();\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(errorMessage));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  throw exception;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 156,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1417,
        "startLineNumber" : 86,
        "startColumnNumber" : 90,
        "endLineNumber" : 114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  try (Reader reader=reader(request);NewSessionPayload payload=NewSessionPayload.create(reader)){\n    Objects.requireNonNull(payload,\"Requests to process must be set.\");\n    attributeMap.put(\"request.payload\",EventAttribute.setValue(payload.toString()));\n    Iterator<Capabilities> iterator=payload.stream().iterator();\n    if (!iterator.hasNext()) {\n      SessionNotCreatedException exception=new SessionNotCreatedException(\"No capabilities found\");\n      EXCEPTION.accept(attributeMap,exception);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(exception.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw exception;\n    }\n  }\n catch (  IOException e) {\n    SessionNotCreatedException exception=new SessionNotCreatedException(e.getMessage(),e);\n    EXCEPTION.accept(attributeMap,exception);\n    String errorMessage=\"IOException while reading the request payload. \" + exception.getMessage();\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(errorMessage));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw exception;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 171,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1503,
        "startLineNumber" : 86,
        "startColumnNumber" : 4,
        "endLineNumber" : 114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try (Span span=tracer.getCurrentContext().createSpan(\"newsession_queuer.validate\")){\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  try (Reader reader=reader(request);NewSessionPayload payload=NewSessionPayload.create(reader)){\n    Objects.requireNonNull(payload,\"Requests to process must be set.\");\n    attributeMap.put(\"request.payload\",EventAttribute.setValue(payload.toString()));\n    Iterator<Capabilities> iterator=payload.stream().iterator();\n    if (!iterator.hasNext()) {\n      SessionNotCreatedException exception=new SessionNotCreatedException(\"No capabilities found\");\n      EXCEPTION.accept(attributeMap,exception);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(exception.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw exception;\n    }\n  }\n catch (  IOException e) {\n    SessionNotCreatedException exception=new SessionNotCreatedException(e.getMessage(),e);\n    EXCEPTION.accept(attributeMap,exception);\n    String errorMessage=\"IOException while reading the request payload. \" + exception.getMessage();\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(errorMessage));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw exception;\n  }\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 183,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1513,
        "startLineNumber" : 85,
        "startColumnNumber" : 58,
        "endLineNumber" : 115,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  try (Span span=tracer.getCurrentContext().createSpan(\"newsession_queuer.validate\")){\n    Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n    try (Reader reader=reader(request);NewSessionPayload payload=NewSessionPayload.create(reader)){\n      Objects.requireNonNull(payload,\"Requests to process must be set.\");\n      attributeMap.put(\"request.payload\",EventAttribute.setValue(payload.toString()));\n      Iterator<Capabilities> iterator=payload.stream().iterator();\n      if (!iterator.hasNext()) {\n        SessionNotCreatedException exception=new SessionNotCreatedException(\"No capabilities found\");\n        EXCEPTION.accept(attributeMap,exception);\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(exception.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw exception;\n      }\n    }\n catch (    IOException e) {\n      SessionNotCreatedException exception=new SessionNotCreatedException(e.getMessage(),e);\n      EXCEPTION.accept(attributeMap,exception);\n      String errorMessage=\"IOException while reading the request payload. \" + exception.getMessage();\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(errorMessage));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw exception;\n    }\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 184,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1569,
        "startLineNumber" : 85,
        "startColumnNumber" : 2,
        "endLineNumber" : 115,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public void validateSessionRequest(HttpRequest request){\n  try (Span span=tracer.getCurrentContext().createSpan(\"newsession_queuer.validate\")){\n    Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n    try (Reader reader=reader(request);NewSessionPayload payload=NewSessionPayload.create(reader)){\n      Objects.requireNonNull(payload,\"Requests to process must be set.\");\n      attributeMap.put(\"request.payload\",EventAttribute.setValue(payload.toString()));\n      Iterator<Capabilities> iterator=payload.stream().iterator();\n      if (!iterator.hasNext()) {\n        SessionNotCreatedException exception=new SessionNotCreatedException(\"No capabilities found\");\n        EXCEPTION.accept(attributeMap,exception);\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(exception.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw exception;\n      }\n    }\n catch (    IOException e) {\n      SessionNotCreatedException exception=new SessionNotCreatedException(e.getMessage(),e);\n      EXCEPTION.accept(attributeMap,exception);\n      String errorMessage=\"IOException while reading the request payload. \" + exception.getMessage();\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(errorMessage));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw exception;\n    }\n  }\n }\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 192,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 106,
        "startColumnNumber" : 8,
        "endLineNumber" : 106,
        "endColumnNumber" : 50
      },
      "nodeContext" : "EXCEPTION.accept(attributeMap,exception);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.openqa.selenium.SessionNotCreatedException"
  }, {
    "nodeContext" : "exception",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 108,
      "startColumnNumber" : 10,
      "endLineNumber" : 108,
      "endColumnNumber" : 19
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 108,
        "startColumnNumber" : 10,
        "endLineNumber" : 108,
        "endColumnNumber" : 32
      },
      "nodeContext" : "exception.getMessage()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 107,
        "startColumnNumber" : 30,
        "endLineNumber" : 108,
        "endColumnNumber" : 32
      },
      "nodeContext" : "\"IOException while reading the request payload. \" + exception.getMessage()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 107,
        "startColumnNumber" : 15,
        "endLineNumber" : 108,
        "endColumnNumber" : 32
      },
      "nodeContext" : "errorMessage=\"IOException while reading the request payload. \" + exception.getMessage()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 107,
        "startLineNumber" : 107,
        "startColumnNumber" : 8,
        "endLineNumber" : 108,
        "endColumnNumber" : 33
      },
      "nodeContext" : "String errorMessage=\"IOException while reading the request payload. \" + exception.getMessage();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 492,
        "startLineNumber" : 104,
        "startColumnNumber" : 30,
        "endLineNumber" : 113,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  SessionNotCreatedException exception=new SessionNotCreatedException(e.getMessage(),e);\n  EXCEPTION.accept(attributeMap,exception);\n  String errorMessage=\"IOException while reading the request payload. \" + exception.getMessage();\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(errorMessage));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  throw exception;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 54,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 514,
        "startLineNumber" : 104,
        "startColumnNumber" : 8,
        "endLineNumber" : 113,
        "endColumnNumber" : 7
      },
      "nodeContext" : "catch (IOException e) {\n  SessionNotCreatedException exception=new SessionNotCreatedException(e.getMessage(),e);\n  EXCEPTION.accept(attributeMap,exception);\n  String errorMessage=\"IOException while reading the request payload. \" + exception.getMessage();\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(errorMessage));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  throw exception;\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 59,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1332,
        "startLineNumber" : 88,
        "startColumnNumber" : 6,
        "endLineNumber" : 113,
        "endColumnNumber" : 7
      },
      "nodeContext" : "try (Reader reader=reader(request);NewSessionPayload payload=NewSessionPayload.create(reader)){\n  Objects.requireNonNull(payload,\"Requests to process must be set.\");\n  attributeMap.put(\"request.payload\",EventAttribute.setValue(payload.toString()));\n  Iterator<Capabilities> iterator=payload.stream().iterator();\n  if (!iterator.hasNext()) {\n    SessionNotCreatedException exception=new SessionNotCreatedException(\"No capabilities found\");\n    EXCEPTION.accept(attributeMap,exception);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(exception.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw exception;\n  }\n}\n catch (IOException e) {\n  SessionNotCreatedException exception=new SessionNotCreatedException(e.getMessage(),e);\n  EXCEPTION.accept(attributeMap,exception);\n  String errorMessage=\"IOException while reading the request payload. \" + exception.getMessage();\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(errorMessage));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  throw exception;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 156,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1417,
        "startLineNumber" : 86,
        "startColumnNumber" : 90,
        "endLineNumber" : 114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  try (Reader reader=reader(request);NewSessionPayload payload=NewSessionPayload.create(reader)){\n    Objects.requireNonNull(payload,\"Requests to process must be set.\");\n    attributeMap.put(\"request.payload\",EventAttribute.setValue(payload.toString()));\n    Iterator<Capabilities> iterator=payload.stream().iterator();\n    if (!iterator.hasNext()) {\n      SessionNotCreatedException exception=new SessionNotCreatedException(\"No capabilities found\");\n      EXCEPTION.accept(attributeMap,exception);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(exception.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw exception;\n    }\n  }\n catch (  IOException e) {\n    SessionNotCreatedException exception=new SessionNotCreatedException(e.getMessage(),e);\n    EXCEPTION.accept(attributeMap,exception);\n    String errorMessage=\"IOException while reading the request payload. \" + exception.getMessage();\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(errorMessage));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw exception;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 171,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1503,
        "startLineNumber" : 86,
        "startColumnNumber" : 4,
        "endLineNumber" : 114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try (Span span=tracer.getCurrentContext().createSpan(\"newsession_queuer.validate\")){\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  try (Reader reader=reader(request);NewSessionPayload payload=NewSessionPayload.create(reader)){\n    Objects.requireNonNull(payload,\"Requests to process must be set.\");\n    attributeMap.put(\"request.payload\",EventAttribute.setValue(payload.toString()));\n    Iterator<Capabilities> iterator=payload.stream().iterator();\n    if (!iterator.hasNext()) {\n      SessionNotCreatedException exception=new SessionNotCreatedException(\"No capabilities found\");\n      EXCEPTION.accept(attributeMap,exception);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(exception.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw exception;\n    }\n  }\n catch (  IOException e) {\n    SessionNotCreatedException exception=new SessionNotCreatedException(e.getMessage(),e);\n    EXCEPTION.accept(attributeMap,exception);\n    String errorMessage=\"IOException while reading the request payload. \" + exception.getMessage();\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(errorMessage));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw exception;\n  }\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 183,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1513,
        "startLineNumber" : 85,
        "startColumnNumber" : 58,
        "endLineNumber" : 115,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  try (Span span=tracer.getCurrentContext().createSpan(\"newsession_queuer.validate\")){\n    Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n    try (Reader reader=reader(request);NewSessionPayload payload=NewSessionPayload.create(reader)){\n      Objects.requireNonNull(payload,\"Requests to process must be set.\");\n      attributeMap.put(\"request.payload\",EventAttribute.setValue(payload.toString()));\n      Iterator<Capabilities> iterator=payload.stream().iterator();\n      if (!iterator.hasNext()) {\n        SessionNotCreatedException exception=new SessionNotCreatedException(\"No capabilities found\");\n        EXCEPTION.accept(attributeMap,exception);\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(exception.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw exception;\n      }\n    }\n catch (    IOException e) {\n      SessionNotCreatedException exception=new SessionNotCreatedException(e.getMessage(),e);\n      EXCEPTION.accept(attributeMap,exception);\n      String errorMessage=\"IOException while reading the request payload. \" + exception.getMessage();\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(errorMessage));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw exception;\n    }\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 184,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1569,
        "startLineNumber" : 85,
        "startColumnNumber" : 2,
        "endLineNumber" : 115,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public void validateSessionRequest(HttpRequest request){\n  try (Span span=tracer.getCurrentContext().createSpan(\"newsession_queuer.validate\")){\n    Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n    try (Reader reader=reader(request);NewSessionPayload payload=NewSessionPayload.create(reader)){\n      Objects.requireNonNull(payload,\"Requests to process must be set.\");\n      attributeMap.put(\"request.payload\",EventAttribute.setValue(payload.toString()));\n      Iterator<Capabilities> iterator=payload.stream().iterator();\n      if (!iterator.hasNext()) {\n        SessionNotCreatedException exception=new SessionNotCreatedException(\"No capabilities found\");\n        EXCEPTION.accept(attributeMap,exception);\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(exception.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw exception;\n      }\n    }\n catch (    IOException e) {\n      SessionNotCreatedException exception=new SessionNotCreatedException(e.getMessage(),e);\n      EXCEPTION.accept(attributeMap,exception);\n      String errorMessage=\"IOException while reading the request payload. \" + exception.getMessage();\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(errorMessage));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw exception;\n    }\n  }\n }\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 192,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 108,
        "startColumnNumber" : 10,
        "endLineNumber" : 108,
        "endColumnNumber" : 32
      },
      "nodeContext" : "exception.getMessage()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.openqa.selenium.SessionNotCreatedException"
  }, {
    "nodeContext" : "exception",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 112,
      "startColumnNumber" : 14,
      "endLineNumber" : 112,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 112,
        "startColumnNumber" : 8,
        "endLineNumber" : 112,
        "endColumnNumber" : 24
      },
      "nodeContext" : "throw exception;\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 492,
        "startLineNumber" : 104,
        "startColumnNumber" : 30,
        "endLineNumber" : 113,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  SessionNotCreatedException exception=new SessionNotCreatedException(e.getMessage(),e);\n  EXCEPTION.accept(attributeMap,exception);\n  String errorMessage=\"IOException while reading the request payload. \" + exception.getMessage();\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(errorMessage));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  throw exception;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 54,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 514,
        "startLineNumber" : 104,
        "startColumnNumber" : 8,
        "endLineNumber" : 113,
        "endColumnNumber" : 7
      },
      "nodeContext" : "catch (IOException e) {\n  SessionNotCreatedException exception=new SessionNotCreatedException(e.getMessage(),e);\n  EXCEPTION.accept(attributeMap,exception);\n  String errorMessage=\"IOException while reading the request payload. \" + exception.getMessage();\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(errorMessage));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  throw exception;\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 59,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1332,
        "startLineNumber" : 88,
        "startColumnNumber" : 6,
        "endLineNumber" : 113,
        "endColumnNumber" : 7
      },
      "nodeContext" : "try (Reader reader=reader(request);NewSessionPayload payload=NewSessionPayload.create(reader)){\n  Objects.requireNonNull(payload,\"Requests to process must be set.\");\n  attributeMap.put(\"request.payload\",EventAttribute.setValue(payload.toString()));\n  Iterator<Capabilities> iterator=payload.stream().iterator();\n  if (!iterator.hasNext()) {\n    SessionNotCreatedException exception=new SessionNotCreatedException(\"No capabilities found\");\n    EXCEPTION.accept(attributeMap,exception);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(exception.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw exception;\n  }\n}\n catch (IOException e) {\n  SessionNotCreatedException exception=new SessionNotCreatedException(e.getMessage(),e);\n  EXCEPTION.accept(attributeMap,exception);\n  String errorMessage=\"IOException while reading the request payload. \" + exception.getMessage();\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(errorMessage));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  throw exception;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 156,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1417,
        "startLineNumber" : 86,
        "startColumnNumber" : 90,
        "endLineNumber" : 114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  try (Reader reader=reader(request);NewSessionPayload payload=NewSessionPayload.create(reader)){\n    Objects.requireNonNull(payload,\"Requests to process must be set.\");\n    attributeMap.put(\"request.payload\",EventAttribute.setValue(payload.toString()));\n    Iterator<Capabilities> iterator=payload.stream().iterator();\n    if (!iterator.hasNext()) {\n      SessionNotCreatedException exception=new SessionNotCreatedException(\"No capabilities found\");\n      EXCEPTION.accept(attributeMap,exception);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(exception.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw exception;\n    }\n  }\n catch (  IOException e) {\n    SessionNotCreatedException exception=new SessionNotCreatedException(e.getMessage(),e);\n    EXCEPTION.accept(attributeMap,exception);\n    String errorMessage=\"IOException while reading the request payload. \" + exception.getMessage();\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(errorMessage));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw exception;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 171,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1503,
        "startLineNumber" : 86,
        "startColumnNumber" : 4,
        "endLineNumber" : 114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try (Span span=tracer.getCurrentContext().createSpan(\"newsession_queuer.validate\")){\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  try (Reader reader=reader(request);NewSessionPayload payload=NewSessionPayload.create(reader)){\n    Objects.requireNonNull(payload,\"Requests to process must be set.\");\n    attributeMap.put(\"request.payload\",EventAttribute.setValue(payload.toString()));\n    Iterator<Capabilities> iterator=payload.stream().iterator();\n    if (!iterator.hasNext()) {\n      SessionNotCreatedException exception=new SessionNotCreatedException(\"No capabilities found\");\n      EXCEPTION.accept(attributeMap,exception);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(exception.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw exception;\n    }\n  }\n catch (  IOException e) {\n    SessionNotCreatedException exception=new SessionNotCreatedException(e.getMessage(),e);\n    EXCEPTION.accept(attributeMap,exception);\n    String errorMessage=\"IOException while reading the request payload. \" + exception.getMessage();\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(errorMessage));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw exception;\n  }\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 183,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1513,
        "startLineNumber" : 85,
        "startColumnNumber" : 58,
        "endLineNumber" : 115,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  try (Span span=tracer.getCurrentContext().createSpan(\"newsession_queuer.validate\")){\n    Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n    try (Reader reader=reader(request);NewSessionPayload payload=NewSessionPayload.create(reader)){\n      Objects.requireNonNull(payload,\"Requests to process must be set.\");\n      attributeMap.put(\"request.payload\",EventAttribute.setValue(payload.toString()));\n      Iterator<Capabilities> iterator=payload.stream().iterator();\n      if (!iterator.hasNext()) {\n        SessionNotCreatedException exception=new SessionNotCreatedException(\"No capabilities found\");\n        EXCEPTION.accept(attributeMap,exception);\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(exception.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw exception;\n      }\n    }\n catch (    IOException e) {\n      SessionNotCreatedException exception=new SessionNotCreatedException(e.getMessage(),e);\n      EXCEPTION.accept(attributeMap,exception);\n      String errorMessage=\"IOException while reading the request payload. \" + exception.getMessage();\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(errorMessage));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw exception;\n    }\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 184,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1569,
        "startLineNumber" : 85,
        "startColumnNumber" : 2,
        "endLineNumber" : 115,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public void validateSessionRequest(HttpRequest request){\n  try (Span span=tracer.getCurrentContext().createSpan(\"newsession_queuer.validate\")){\n    Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n    try (Reader reader=reader(request);NewSessionPayload payload=NewSessionPayload.create(reader)){\n      Objects.requireNonNull(payload,\"Requests to process must be set.\");\n      attributeMap.put(\"request.payload\",EventAttribute.setValue(payload.toString()));\n      Iterator<Capabilities> iterator=payload.stream().iterator();\n      if (!iterator.hasNext()) {\n        SessionNotCreatedException exception=new SessionNotCreatedException(\"No capabilities found\");\n        EXCEPTION.accept(attributeMap,exception);\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(exception.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw exception;\n      }\n    }\n catch (    IOException e) {\n      SessionNotCreatedException exception=new SessionNotCreatedException(e.getMessage(),e);\n      EXCEPTION.accept(attributeMap,exception);\n      String errorMessage=\"IOException while reading the request payload. \" + exception.getMessage();\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(errorMessage));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw exception;\n    }\n  }\n }\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 192,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 112,
        "startColumnNumber" : 8,
        "endLineNumber" : 112,
        "endColumnNumber" : 24
      },
      "nodeContext" : "throw exception;\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.openqa.selenium.SessionNotCreatedException"
  } ],
  "positionList" : [ {
    "charLength" : 9,
    "startLineNumber" : 98,
    "startColumnNumber" : 41,
    "endLineNumber" : 98,
    "endColumnNumber" : 50
  }, {
    "charLength" : 9,
    "startLineNumber" : 100,
    "startColumnNumber" : 77,
    "endLineNumber" : 100,
    "endColumnNumber" : 86
  }, {
    "charLength" : 9,
    "startLineNumber" : 102,
    "startColumnNumber" : 16,
    "endLineNumber" : 102,
    "endColumnNumber" : 25
  }, {
    "charLength" : 9,
    "startLineNumber" : 106,
    "startColumnNumber" : 39,
    "endLineNumber" : 106,
    "endColumnNumber" : 48
  }, {
    "charLength" : 9,
    "startLineNumber" : 108,
    "startColumnNumber" : 10,
    "endLineNumber" : 108,
    "endColumnNumber" : 19
  }, {
    "charLength" : 9,
    "startLineNumber" : 112,
    "startColumnNumber" : 14,
    "endLineNumber" : 112,
    "endColumnNumber" : 23
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 1
  } ]
}