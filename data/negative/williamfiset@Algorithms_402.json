{
  "id" : 402,
  "expression" : "maxValue - minValue + 1",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/main/java/com/williamfiset/algorithms/sorting/BucketSort.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "maxValue - minValue + 1",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 23,
      "startLineNumber" : 34,
      "startColumnNumber" : 33,
      "endLineNumber" : 34,
      "endColumnNumber" : 56
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 34,
        "startColumnNumber" : 29,
        "endLineNumber" : 34,
        "endColumnNumber" : 56
      },
      "nodeContext" : "M=maxValue - minValue + 1",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 34,
        "startColumnNumber" : 4,
        "endLineNumber" : 34,
        "endColumnNumber" : 81
      },
      "nodeContext" : "final int N=ar.length, M=maxValue - minValue + 1, numBuckets=M / N + 1;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 22,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 858,
        "startLineNumber" : 30,
        "startColumnNumber" : 71,
        "endLineNumber" : 55,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (ar == null || ar.length == 0 || minValue == maxValue)   return;\n  final int N=ar.length, M=maxValue - minValue + 1, numBuckets=M / N + 1;\n  List<List<Integer>> buckets=new ArrayList<>(numBuckets);\n  for (int i=0; i < numBuckets; i++)   buckets.add(new ArrayList<>());\n  for (int i=0; i < N; i++) {\n    int bi=(ar[i] - minValue) / M;\n    List<Integer> bucket=buckets.get(bi);\n    bucket.add(ar[i]);\n  }\n  for (int bi=0, j=0; bi < numBuckets; bi++) {\n    List<Integer> bucket=buckets.get(bi);\n    if (bucket != null) {\n      Collections.sort(bucket);\n      for (int k=0; k < bucket.size(); k++) {\n        ar[j++]=bucket.get(k);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 177,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 927,
        "startLineNumber" : 30,
        "startColumnNumber" : 2,
        "endLineNumber" : 55,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private static void bucketSort(int[] ar,int minValue,int maxValue){\n  if (ar == null || ar.length == 0 || minValue == maxValue)   return;\n  final int N=ar.length, M=maxValue - minValue + 1, numBuckets=M / N + 1;\n  List<List<Integer>> buckets=new ArrayList<>(numBuckets);\n  for (int i=0; i < numBuckets; i++)   buckets.add(new ArrayList<>());\n  for (int i=0; i < N; i++) {\n    int bi=(ar[i] - minValue) / M;\n    List<Integer> bucket=buckets.get(bi);\n    bucket.add(ar[i]);\n  }\n  for (int bi=0, j=0; bi < numBuckets; bi++) {\n    List<Integer> bucket=buckets.get(bi);\n    if (bucket != null) {\n      Collections.sort(bucket);\n      for (int k=0; k < bucket.size(); k++) {\n        ar[j++]=bucket.get(k);\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 193,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 34,
        "startColumnNumber" : 4,
        "endLineNumber" : 34,
        "endColumnNumber" : 81
      },
      "nodeContext" : "final int N=ar.length, M=maxValue - minValue + 1, numBuckets=M / N + 1;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 22,
      "astHeight" : 5
    },
    "tokenLength" : 5,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 23,
    "startLineNumber" : 34,
    "startColumnNumber" : 33,
    "endLineNumber" : 34,
    "endColumnNumber" : 56
  } ],
  "layoutRelationDataList" : [ ]
}