{
  "id" : 438,
  "expression" : "new ArrayList<Monitor<?>>()",
  "projectName" : "Netflix@Hystrix",
  "commitID" : "45d7875c3e51f6d6152b667db31e4fe435711917",
  "filePath" : "/hystrix-contrib/hystrix-servo-metrics-publisher/src/main/java/com/netflix/hystrix/contrib/servopublisher/HystrixServoMetricsPublisherCommand.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new ArrayList<Monitor<?>>()",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 27,
      "startLineNumber" : 286,
      "startColumnNumber" : 36,
      "endLineNumber" : 286,
      "endColumnNumber" : 63
    },
    "astNodeNumber" : 8,
    "astHeight" : 5,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 286,
        "startColumnNumber" : 25,
        "endLineNumber" : 286,
        "endColumnNumber" : 63
      },
      "nodeContext" : "monitors=new ArrayList<Monitor<?>>()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 286,
        "startColumnNumber" : 8,
        "endLineNumber" : 286,
        "endColumnNumber" : 64
      },
      "nodeContext" : "List<Monitor<?>> monitors=new ArrayList<Monitor<?>>();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 18,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 15178,
        "startLineNumber" : 284,
        "startColumnNumber" : 48,
        "endLineNumber" : 615,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<Monitor<?>> monitors=new ArrayList<Monitor<?>>();\n  monitors.add(new InformationalMetric<Boolean>(MonitorConfig.builder(\"isCircuitBreakerOpen\").build()){\n    @Override public Boolean getValue(){\n      return circuitBreaker.isOpen();\n    }\n  }\n);\n  monitors.add(getCurrentValueMonitor(\"currentTime\",currentTimeThunk,DataSourceLevel.DEBUG));\n  monitors.add(safelyGetCumulativeMonitor(\"countBadRequests\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.BAD_REQUEST;\n    }\n  }\n));\n  monitors.add(safelyGetCumulativeMonitor(\"countCollapsedRequests\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.COLLAPSED;\n    }\n  }\n));\n  monitors.add(safelyGetCumulativeMonitor(\"countEmit\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.EMIT;\n    }\n  }\n));\n  monitors.add(safelyGetCumulativeMonitor(\"countExceptionsThrown\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.EXCEPTION_THROWN;\n    }\n  }\n));\n  monitors.add(safelyGetCumulativeMonitor(\"countFailure\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.FAILURE;\n    }\n  }\n));\n  monitors.add(safelyGetCumulativeMonitor(\"countFallbackEmit\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.FALLBACK_EMIT;\n    }\n  }\n));\n  monitors.add(safelyGetCumulativeMonitor(\"countFallbackFailure\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.FALLBACK_FAILURE;\n    }\n  }\n));\n  monitors.add(safelyGetCumulativeMonitor(\"countFallbackMissing\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.FALLBACK_MISSING;\n    }\n  }\n));\n  monitors.add(safelyGetCumulativeMonitor(\"countFallbackRejection\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.FALLBACK_REJECTION;\n    }\n  }\n));\n  monitors.add(safelyGetCumulativeMonitor(\"countFallbackSuccess\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.FALLBACK_SUCCESS;\n    }\n  }\n));\n  monitors.add(safelyGetCumulativeMonitor(\"countResponsesFromCache\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.RESPONSE_FROM_CACHE;\n    }\n  }\n));\n  monitors.add(safelyGetCumulativeMonitor(\"countSemaphoreRejected\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.SEMAPHORE_REJECTED;\n    }\n  }\n));\n  monitors.add(safelyGetCumulativeMonitor(\"countShortCircuited\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.SHORT_CIRCUITED;\n    }\n  }\n));\n  monitors.add(safelyGetCumulativeMonitor(\"countSuccess\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.SUCCESS;\n    }\n  }\n));\n  monitors.add(safelyGetCumulativeMonitor(\"countThreadPoolRejected\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.THREAD_POOL_REJECTED;\n    }\n  }\n));\n  monitors.add(safelyGetCumulativeMonitor(\"countTimeout\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.TIMEOUT;\n    }\n  }\n));\n  monitors.add(safelyGetRollingMonitor(\"rollingCountBadRequests\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.BAD_REQUEST;\n    }\n  }\n));\n  monitors.add(safelyGetRollingMonitor(\"rollingCountCollapsedRequests\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.COLLAPSED;\n    }\n  }\n));\n  monitors.add(safelyGetRollingMonitor(\"rollingCountEmit\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.EMIT;\n    }\n  }\n));\n  monitors.add(safelyGetRollingMonitor(\"rollingCountExceptionsThrown\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.EXCEPTION_THROWN;\n    }\n  }\n));\n  monitors.add(safelyGetRollingMonitor(\"rollingCountFailure\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.FAILURE;\n    }\n  }\n));\n  monitors.add(safelyGetRollingMonitor(\"rollingCountFallbackEmit\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.FALLBACK_EMIT;\n    }\n  }\n));\n  monitors.add(safelyGetRollingMonitor(\"rollingCountFallbackFailure\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.FALLBACK_FAILURE;\n    }\n  }\n));\n  monitors.add(safelyGetRollingMonitor(\"rollingCountFallbackMissing\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.FALLBACK_MISSING;\n    }\n  }\n));\n  monitors.add(safelyGetRollingMonitor(\"rollingCountFallbackRejection\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.FALLBACK_REJECTION;\n    }\n  }\n));\n  monitors.add(safelyGetRollingMonitor(\"rollingCountFallbackSuccess\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.FALLBACK_SUCCESS;\n    }\n  }\n));\n  monitors.add(safelyGetRollingMonitor(\"rollingCountResponsesFromCache\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.RESPONSE_FROM_CACHE;\n    }\n  }\n));\n  monitors.add(safelyGetRollingMonitor(\"rollingCountSemaphoreRejected\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.SEMAPHORE_REJECTED;\n    }\n  }\n));\n  monitors.add(safelyGetRollingMonitor(\"rollingCountShortCircuited\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.SHORT_CIRCUITED;\n    }\n  }\n));\n  monitors.add(safelyGetRollingMonitor(\"rollingCountSuccess\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.SUCCESS;\n    }\n  }\n));\n  monitors.add(safelyGetRollingMonitor(\"rollingCountThreadPoolRejected\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.THREAD_POOL_REJECTED;\n    }\n  }\n));\n  monitors.add(safelyGetRollingMonitor(\"rollingCountTimeout\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.TIMEOUT;\n    }\n  }\n));\n  monitors.add(getCurrentValueMonitor(\"executionSemaphorePermitsInUse\",currentConcurrentExecutionCountThunk));\n  monitors.add(getCurrentValueMonitor(\"errorPercentage\",errorPercentageThunk));\n  monitors.add(getExecutionLatencyMeanMonitor(\"latencyExecute_mean\"));\n  monitors.add(getExecutionLatencyPercentileMonitor(\"latencyExecute_percentile_5\",5));\n  monitors.add(getExecutionLatencyPercentileMonitor(\"latencyExecute_percentile_25\",25));\n  monitors.add(getExecutionLatencyPercentileMonitor(\"latencyExecute_percentile_50\",50));\n  monitors.add(getExecutionLatencyPercentileMonitor(\"latencyExecute_percentile_75\",75));\n  monitors.add(getExecutionLatencyPercentileMonitor(\"latencyExecute_percentile_90\",90));\n  monitors.add(getExecutionLatencyPercentileMonitor(\"latencyExecute_percentile_99\",99));\n  monitors.add(getExecutionLatencyPercentileMonitor(\"latencyExecute_percentile_995\",99.5));\n  monitors.add(getTotalLatencyMeanMonitor(\"latencyTotal_mean\"));\n  monitors.add(getTotalLatencyPercentileMonitor(\"latencyTotal_percentile_5\",5));\n  monitors.add(getTotalLatencyPercentileMonitor(\"latencyTotal_percentile_25\",25));\n  monitors.add(getTotalLatencyPercentileMonitor(\"latencyTotal_percentile_50\",50));\n  monitors.add(getTotalLatencyPercentileMonitor(\"latencyTotal_percentile_75\",75));\n  monitors.add(getTotalLatencyPercentileMonitor(\"latencyTotal_percentile_90\",90));\n  monitors.add(getTotalLatencyPercentileMonitor(\"latencyTotal_percentile_99\",99));\n  monitors.add(getTotalLatencyPercentileMonitor(\"latencyTotal_percentile_995\",99.5));\n  monitors.add(new InformationalMetric<String>(MonitorConfig.builder(\"commandGroup\").build()){\n    @Override public String getValue(){\n      return commandGroupKey != null ? commandGroupKey.name() : null;\n    }\n  }\n);\n  monitors.add(new InformationalMetric<Number>(MonitorConfig.builder(\"propertyValue_rollingStatisticalWindowInMilliseconds\").build()){\n    @Override public Number getValue(){\n      return properties.metricsRollingStatisticalWindowInMilliseconds().get();\n    }\n  }\n);\n  monitors.add(new InformationalMetric<Number>(MonitorConfig.builder(\"propertyValue_circuitBreakerRequestVolumeThreshold\").build()){\n    @Override public Number getValue(){\n      return properties.circuitBreakerRequestVolumeThreshold().get();\n    }\n  }\n);\n  monitors.add(new InformationalMetric<Number>(MonitorConfig.builder(\"propertyValue_circuitBreakerSleepWindowInMilliseconds\").build()){\n    @Override public Number getValue(){\n      return properties.circuitBreakerSleepWindowInMilliseconds().get();\n    }\n  }\n);\n  monitors.add(new InformationalMetric<Number>(MonitorConfig.builder(\"propertyValue_circuitBreakerErrorThresholdPercentage\").build()){\n    @Override public Number getValue(){\n      return properties.circuitBreakerErrorThresholdPercentage().get();\n    }\n  }\n);\n  monitors.add(new InformationalMetric<Boolean>(MonitorConfig.builder(\"propertyValue_circuitBreakerForceOpen\").build()){\n    @Override public Boolean getValue(){\n      return properties.circuitBreakerForceOpen().get();\n    }\n  }\n);\n  monitors.add(new InformationalMetric<Boolean>(MonitorConfig.builder(\"propertyValue_circuitBreakerForceClosed\").build()){\n    @Override public Boolean getValue(){\n      return properties.circuitBreakerForceClosed().get();\n    }\n  }\n);\n  monitors.add(new InformationalMetric<Number>(MonitorConfig.builder(\"propertyValue_executionIsolationThreadTimeoutInMilliseconds\").build()){\n    @Override public Number getValue(){\n      return properties.executionTimeoutInMilliseconds().get();\n    }\n  }\n);\n  monitors.add(new InformationalMetric<Number>(MonitorConfig.builder(\"propertyValue_executionTimeoutInMilliseconds\").build()){\n    @Override public Number getValue(){\n      return properties.executionTimeoutInMilliseconds().get();\n    }\n  }\n);\n  monitors.add(new InformationalMetric<String>(MonitorConfig.builder(\"propertyValue_executionIsolationStrategy\").build()){\n    @Override public String getValue(){\n      return properties.executionIsolationStrategy().get().name();\n    }\n  }\n);\n  monitors.add(new InformationalMetric<Boolean>(MonitorConfig.builder(\"propertyValue_metricsRollingPercentileEnabled\").build()){\n    @Override public Boolean getValue(){\n      return properties.metricsRollingPercentileEnabled().get();\n    }\n  }\n);\n  monitors.add(new InformationalMetric<Boolean>(MonitorConfig.builder(\"propertyValue_requestCacheEnabled\").build()){\n    @Override public Boolean getValue(){\n      return properties.requestCacheEnabled().get();\n    }\n  }\n);\n  monitors.add(new InformationalMetric<Boolean>(MonitorConfig.builder(\"propertyValue_requestLogEnabled\").build()){\n    @Override public Boolean getValue(){\n      return properties.requestLogEnabled().get();\n    }\n  }\n);\n  monitors.add(new InformationalMetric<Number>(MonitorConfig.builder(\"propertyValue_executionIsolationSemaphoreMaxConcurrentRequests\").build()){\n    @Override public Number getValue(){\n      return properties.executionIsolationSemaphoreMaxConcurrentRequests().get();\n    }\n  }\n);\n  monitors.add(new InformationalMetric<Number>(MonitorConfig.builder(\"propertyValue_fallbackIsolationSemaphoreMaxConcurrentRequests\").build()){\n    @Override public Number getValue(){\n      return properties.fallbackIsolationSemaphoreMaxConcurrentRequests().get();\n    }\n  }\n);\n  return monitors;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1505,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 15777,
        "startLineNumber" : 275,
        "startColumnNumber" : 4,
        "endLineNumber" : 615,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Servo will flatten metric names as: getServoTypeTag()_getServoInstanceTag()_monitorName An implementation note.  If there's a version mismatch between hystrix-core and hystrix-servo-metric-publisher, the code below may reference a HystrixEventType that does not exist in hystrix-core.  If this happens, a j.l.NoSuchFieldError occurs.  Since this data is not being generated by hystrix-core, it's safe to count it as 0 and we should log an error to get users to update their dependency set.\n */\nprivate List<Monitor<?>> getServoMonitors(){\n  List<Monitor<?>> monitors=new ArrayList<Monitor<?>>();\n  monitors.add(new InformationalMetric<Boolean>(MonitorConfig.builder(\"isCircuitBreakerOpen\").build()){\n    @Override public Boolean getValue(){\n      return circuitBreaker.isOpen();\n    }\n  }\n);\n  monitors.add(getCurrentValueMonitor(\"currentTime\",currentTimeThunk,DataSourceLevel.DEBUG));\n  monitors.add(safelyGetCumulativeMonitor(\"countBadRequests\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.BAD_REQUEST;\n    }\n  }\n));\n  monitors.add(safelyGetCumulativeMonitor(\"countCollapsedRequests\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.COLLAPSED;\n    }\n  }\n));\n  monitors.add(safelyGetCumulativeMonitor(\"countEmit\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.EMIT;\n    }\n  }\n));\n  monitors.add(safelyGetCumulativeMonitor(\"countExceptionsThrown\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.EXCEPTION_THROWN;\n    }\n  }\n));\n  monitors.add(safelyGetCumulativeMonitor(\"countFailure\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.FAILURE;\n    }\n  }\n));\n  monitors.add(safelyGetCumulativeMonitor(\"countFallbackEmit\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.FALLBACK_EMIT;\n    }\n  }\n));\n  monitors.add(safelyGetCumulativeMonitor(\"countFallbackFailure\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.FALLBACK_FAILURE;\n    }\n  }\n));\n  monitors.add(safelyGetCumulativeMonitor(\"countFallbackMissing\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.FALLBACK_MISSING;\n    }\n  }\n));\n  monitors.add(safelyGetCumulativeMonitor(\"countFallbackRejection\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.FALLBACK_REJECTION;\n    }\n  }\n));\n  monitors.add(safelyGetCumulativeMonitor(\"countFallbackSuccess\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.FALLBACK_SUCCESS;\n    }\n  }\n));\n  monitors.add(safelyGetCumulativeMonitor(\"countResponsesFromCache\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.RESPONSE_FROM_CACHE;\n    }\n  }\n));\n  monitors.add(safelyGetCumulativeMonitor(\"countSemaphoreRejected\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.SEMAPHORE_REJECTED;\n    }\n  }\n));\n  monitors.add(safelyGetCumulativeMonitor(\"countShortCircuited\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.SHORT_CIRCUITED;\n    }\n  }\n));\n  monitors.add(safelyGetCumulativeMonitor(\"countSuccess\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.SUCCESS;\n    }\n  }\n));\n  monitors.add(safelyGetCumulativeMonitor(\"countThreadPoolRejected\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.THREAD_POOL_REJECTED;\n    }\n  }\n));\n  monitors.add(safelyGetCumulativeMonitor(\"countTimeout\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.TIMEOUT;\n    }\n  }\n));\n  monitors.add(safelyGetRollingMonitor(\"rollingCountBadRequests\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.BAD_REQUEST;\n    }\n  }\n));\n  monitors.add(safelyGetRollingMonitor(\"rollingCountCollapsedRequests\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.COLLAPSED;\n    }\n  }\n));\n  monitors.add(safelyGetRollingMonitor(\"rollingCountEmit\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.EMIT;\n    }\n  }\n));\n  monitors.add(safelyGetRollingMonitor(\"rollingCountExceptionsThrown\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.EXCEPTION_THROWN;\n    }\n  }\n));\n  monitors.add(safelyGetRollingMonitor(\"rollingCountFailure\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.FAILURE;\n    }\n  }\n));\n  monitors.add(safelyGetRollingMonitor(\"rollingCountFallbackEmit\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.FALLBACK_EMIT;\n    }\n  }\n));\n  monitors.add(safelyGetRollingMonitor(\"rollingCountFallbackFailure\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.FALLBACK_FAILURE;\n    }\n  }\n));\n  monitors.add(safelyGetRollingMonitor(\"rollingCountFallbackMissing\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.FALLBACK_MISSING;\n    }\n  }\n));\n  monitors.add(safelyGetRollingMonitor(\"rollingCountFallbackRejection\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.FALLBACK_REJECTION;\n    }\n  }\n));\n  monitors.add(safelyGetRollingMonitor(\"rollingCountFallbackSuccess\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.FALLBACK_SUCCESS;\n    }\n  }\n));\n  monitors.add(safelyGetRollingMonitor(\"rollingCountResponsesFromCache\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.RESPONSE_FROM_CACHE;\n    }\n  }\n));\n  monitors.add(safelyGetRollingMonitor(\"rollingCountSemaphoreRejected\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.SEMAPHORE_REJECTED;\n    }\n  }\n));\n  monitors.add(safelyGetRollingMonitor(\"rollingCountShortCircuited\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.SHORT_CIRCUITED;\n    }\n  }\n));\n  monitors.add(safelyGetRollingMonitor(\"rollingCountSuccess\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.SUCCESS;\n    }\n  }\n));\n  monitors.add(safelyGetRollingMonitor(\"rollingCountThreadPoolRejected\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.THREAD_POOL_REJECTED;\n    }\n  }\n));\n  monitors.add(safelyGetRollingMonitor(\"rollingCountTimeout\",new Func0<HystrixEventType>(){\n    @Override public HystrixEventType call(){\n      return HystrixEventType.TIMEOUT;\n    }\n  }\n));\n  monitors.add(getCurrentValueMonitor(\"executionSemaphorePermitsInUse\",currentConcurrentExecutionCountThunk));\n  monitors.add(getCurrentValueMonitor(\"errorPercentage\",errorPercentageThunk));\n  monitors.add(getExecutionLatencyMeanMonitor(\"latencyExecute_mean\"));\n  monitors.add(getExecutionLatencyPercentileMonitor(\"latencyExecute_percentile_5\",5));\n  monitors.add(getExecutionLatencyPercentileMonitor(\"latencyExecute_percentile_25\",25));\n  monitors.add(getExecutionLatencyPercentileMonitor(\"latencyExecute_percentile_50\",50));\n  monitors.add(getExecutionLatencyPercentileMonitor(\"latencyExecute_percentile_75\",75));\n  monitors.add(getExecutionLatencyPercentileMonitor(\"latencyExecute_percentile_90\",90));\n  monitors.add(getExecutionLatencyPercentileMonitor(\"latencyExecute_percentile_99\",99));\n  monitors.add(getExecutionLatencyPercentileMonitor(\"latencyExecute_percentile_995\",99.5));\n  monitors.add(getTotalLatencyMeanMonitor(\"latencyTotal_mean\"));\n  monitors.add(getTotalLatencyPercentileMonitor(\"latencyTotal_percentile_5\",5));\n  monitors.add(getTotalLatencyPercentileMonitor(\"latencyTotal_percentile_25\",25));\n  monitors.add(getTotalLatencyPercentileMonitor(\"latencyTotal_percentile_50\",50));\n  monitors.add(getTotalLatencyPercentileMonitor(\"latencyTotal_percentile_75\",75));\n  monitors.add(getTotalLatencyPercentileMonitor(\"latencyTotal_percentile_90\",90));\n  monitors.add(getTotalLatencyPercentileMonitor(\"latencyTotal_percentile_99\",99));\n  monitors.add(getTotalLatencyPercentileMonitor(\"latencyTotal_percentile_995\",99.5));\n  monitors.add(new InformationalMetric<String>(MonitorConfig.builder(\"commandGroup\").build()){\n    @Override public String getValue(){\n      return commandGroupKey != null ? commandGroupKey.name() : null;\n    }\n  }\n);\n  monitors.add(new InformationalMetric<Number>(MonitorConfig.builder(\"propertyValue_rollingStatisticalWindowInMilliseconds\").build()){\n    @Override public Number getValue(){\n      return properties.metricsRollingStatisticalWindowInMilliseconds().get();\n    }\n  }\n);\n  monitors.add(new InformationalMetric<Number>(MonitorConfig.builder(\"propertyValue_circuitBreakerRequestVolumeThreshold\").build()){\n    @Override public Number getValue(){\n      return properties.circuitBreakerRequestVolumeThreshold().get();\n    }\n  }\n);\n  monitors.add(new InformationalMetric<Number>(MonitorConfig.builder(\"propertyValue_circuitBreakerSleepWindowInMilliseconds\").build()){\n    @Override public Number getValue(){\n      return properties.circuitBreakerSleepWindowInMilliseconds().get();\n    }\n  }\n);\n  monitors.add(new InformationalMetric<Number>(MonitorConfig.builder(\"propertyValue_circuitBreakerErrorThresholdPercentage\").build()){\n    @Override public Number getValue(){\n      return properties.circuitBreakerErrorThresholdPercentage().get();\n    }\n  }\n);\n  monitors.add(new InformationalMetric<Boolean>(MonitorConfig.builder(\"propertyValue_circuitBreakerForceOpen\").build()){\n    @Override public Boolean getValue(){\n      return properties.circuitBreakerForceOpen().get();\n    }\n  }\n);\n  monitors.add(new InformationalMetric<Boolean>(MonitorConfig.builder(\"propertyValue_circuitBreakerForceClosed\").build()){\n    @Override public Boolean getValue(){\n      return properties.circuitBreakerForceClosed().get();\n    }\n  }\n);\n  monitors.add(new InformationalMetric<Number>(MonitorConfig.builder(\"propertyValue_executionIsolationThreadTimeoutInMilliseconds\").build()){\n    @Override public Number getValue(){\n      return properties.executionTimeoutInMilliseconds().get();\n    }\n  }\n);\n  monitors.add(new InformationalMetric<Number>(MonitorConfig.builder(\"propertyValue_executionTimeoutInMilliseconds\").build()){\n    @Override public Number getValue(){\n      return properties.executionTimeoutInMilliseconds().get();\n    }\n  }\n);\n  monitors.add(new InformationalMetric<String>(MonitorConfig.builder(\"propertyValue_executionIsolationStrategy\").build()){\n    @Override public String getValue(){\n      return properties.executionIsolationStrategy().get().name();\n    }\n  }\n);\n  monitors.add(new InformationalMetric<Boolean>(MonitorConfig.builder(\"propertyValue_metricsRollingPercentileEnabled\").build()){\n    @Override public Boolean getValue(){\n      return properties.metricsRollingPercentileEnabled().get();\n    }\n  }\n);\n  monitors.add(new InformationalMetric<Boolean>(MonitorConfig.builder(\"propertyValue_requestCacheEnabled\").build()){\n    @Override public Boolean getValue(){\n      return properties.requestCacheEnabled().get();\n    }\n  }\n);\n  monitors.add(new InformationalMetric<Boolean>(MonitorConfig.builder(\"propertyValue_requestLogEnabled\").build()){\n    @Override public Boolean getValue(){\n      return properties.requestLogEnabled().get();\n    }\n  }\n);\n  monitors.add(new InformationalMetric<Number>(MonitorConfig.builder(\"propertyValue_executionIsolationSemaphoreMaxConcurrentRequests\").build()){\n    @Override public Number getValue(){\n      return properties.executionIsolationSemaphoreMaxConcurrentRequests().get();\n    }\n  }\n);\n  monitors.add(new InformationalMetric<Number>(MonitorConfig.builder(\"propertyValue_fallbackIsolationSemaphoreMaxConcurrentRequests\").build()){\n    @Override public Number getValue(){\n      return properties.fallbackIsolationSemaphoreMaxConcurrentRequests().get();\n    }\n  }\n);\n  return monitors;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1516,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 286,
        "startColumnNumber" : 8,
        "endLineNumber" : 286,
        "endColumnNumber" : 64
      },
      "nodeContext" : "List<Monitor<?>> monitors=new ArrayList<Monitor<?>>();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 18,
      "astHeight" : 7
    },
    "tokenLength" : 2,
    "type" : "java.util.ArrayList<com.netflix.hystrix.contrib.servopublisher.Monitor<?>>"
  } ],
  "positionList" : [ {
    "charLength" : 27,
    "startLineNumber" : 286,
    "startColumnNumber" : 36,
    "endLineNumber" : 286,
    "endColumnNumber" : 63
  } ],
  "layoutRelationDataList" : [ ]
}