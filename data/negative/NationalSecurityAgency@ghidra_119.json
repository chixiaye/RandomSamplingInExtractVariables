{
  "id" : 119,
  "expression" : "created",
  "projectName" : "NationalSecurityAgency@ghidra",
  "commitID" : "a54d0e28d652c48502551a88278808549aed5f98",
  "filePath" : "/Ghidra/Debug/Framework-TraceModeling/src/main/java/ghidra/trace/database/language/DBTraceGuestLanguageMappedRange.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "created",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 81,
      "startColumnNumber" : 14,
      "endLineNumber" : 81,
      "endColumnNumber" : 21
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 81,
        "startColumnNumber" : 2,
        "endLineNumber" : 81,
        "endColumnNumber" : 22
      },
      "nodeContext" : "super.fresh(created)",
      "nodeType" : "SuperMethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 81,
        "startColumnNumber" : 2,
        "endLineNumber" : 81,
        "endColumnNumber" : 23
      },
      "nodeContext" : "super.fresh(created);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 722,
        "startLineNumber" : 80,
        "startColumnNumber" : 58,
        "endLineNumber" : 100,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  super.fresh(created);\n  if (created) {\n    return;\n  }\n  try {\n    Address hostStart=manager.getBaseLanguage().getAddressFactory().getAddress(hostSpace,hostOffset);\n    Address hostEnd=hostStart.addNoWrap(length - 1);\n    this.hostRange=new AddressRangeImpl(hostStart,hostEnd);\n    this.guestLanguage=manager.getLanguageByKey(guestLangKey);\n    Address guestStart=guestLanguage.getAddressFactory().getAddress(guestSpace,guestOffset);\n    Address guestEnd=guestStart.addNoWrap(length - 1);\n    this.guestRange=new AddressRangeImpl(guestStart,guestEnd);\n  }\n catch (  AddressOverflowException e) {\n    throw new RuntimeException(\"Database is corrupt or languages changed\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 100,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 791,
        "startLineNumber" : 79,
        "startColumnNumber" : 1,
        "endLineNumber" : 100,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override protected void fresh(boolean created) throws IOException {\n  super.fresh(created);\n  if (created) {\n    return;\n  }\n  try {\n    Address hostStart=manager.getBaseLanguage().getAddressFactory().getAddress(hostSpace,hostOffset);\n    Address hostEnd=hostStart.addNoWrap(length - 1);\n    this.hostRange=new AddressRangeImpl(hostStart,hostEnd);\n    this.guestLanguage=manager.getLanguageByKey(guestLangKey);\n    Address guestStart=guestLanguage.getAddressFactory().getAddress(guestSpace,guestOffset);\n    Address guestEnd=guestStart.addNoWrap(length - 1);\n    this.guestRange=new AddressRangeImpl(guestStart,guestEnd);\n  }\n catch (  AddressOverflowException e) {\n    throw new RuntimeException(\"Database is corrupt or languages changed\",e);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 111,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 81,
        "startColumnNumber" : 2,
        "endLineNumber" : 81,
        "endColumnNumber" : 23
      },
      "nodeContext" : "super.fresh(created);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "boolean"
  }, {
    "nodeContext" : "created",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 82,
      "startColumnNumber" : 6,
      "endLineNumber" : 82,
      "endColumnNumber" : 13
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 82,
        "startColumnNumber" : 2,
        "endLineNumber" : 84,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (created) {\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 722,
        "startLineNumber" : 80,
        "startColumnNumber" : 58,
        "endLineNumber" : 100,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  super.fresh(created);\n  if (created) {\n    return;\n  }\n  try {\n    Address hostStart=manager.getBaseLanguage().getAddressFactory().getAddress(hostSpace,hostOffset);\n    Address hostEnd=hostStart.addNoWrap(length - 1);\n    this.hostRange=new AddressRangeImpl(hostStart,hostEnd);\n    this.guestLanguage=manager.getLanguageByKey(guestLangKey);\n    Address guestStart=guestLanguage.getAddressFactory().getAddress(guestSpace,guestOffset);\n    Address guestEnd=guestStart.addNoWrap(length - 1);\n    this.guestRange=new AddressRangeImpl(guestStart,guestEnd);\n  }\n catch (  AddressOverflowException e) {\n    throw new RuntimeException(\"Database is corrupt or languages changed\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 100,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 791,
        "startLineNumber" : 79,
        "startColumnNumber" : 1,
        "endLineNumber" : 100,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override protected void fresh(boolean created) throws IOException {\n  super.fresh(created);\n  if (created) {\n    return;\n  }\n  try {\n    Address hostStart=manager.getBaseLanguage().getAddressFactory().getAddress(hostSpace,hostOffset);\n    Address hostEnd=hostStart.addNoWrap(length - 1);\n    this.hostRange=new AddressRangeImpl(hostStart,hostEnd);\n    this.guestLanguage=manager.getLanguageByKey(guestLangKey);\n    Address guestStart=guestLanguage.getAddressFactory().getAddress(guestSpace,guestOffset);\n    Address guestEnd=guestStart.addNoWrap(length - 1);\n    this.guestRange=new AddressRangeImpl(guestStart,guestEnd);\n  }\n catch (  AddressOverflowException e) {\n    throw new RuntimeException(\"Database is corrupt or languages changed\",e);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 111,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 82,
        "startColumnNumber" : 2,
        "endLineNumber" : 84,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (created) {\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 7,
    "startLineNumber" : 81,
    "startColumnNumber" : 14,
    "endLineNumber" : 81,
    "endColumnNumber" : 21
  }, {
    "charLength" : 7,
    "startLineNumber" : 82,
    "startColumnNumber" : 6,
    "endLineNumber" : 82,
    "endColumnNumber" : 13
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 1
  } ]
}