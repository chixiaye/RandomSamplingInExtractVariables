{
  "id" : 193,
  "expression" : "names",
  "projectName" : "apache@flink",
  "commitID" : "f8cb19e70ca7da6423dfb01b97e05c4d520c9fde",
  "filePath" : "/flink-table/flink-table-api-java-bridge/src/main/java/org/apache/flink/table/descriptors/SchemaValidator.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "names",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 93,
      "startColumnNumber" : 12,
      "endLineNumber" : 93,
      "endColumnNumber" : 17
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 93,
        "startColumnNumber" : 12,
        "endLineNumber" : 93,
        "endColumnNumber" : 27
      },
      "nodeContext" : "names.isEmpty()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 93,
        "startColumnNumber" : 12,
        "endLineNumber" : 93,
        "endColumnNumber" : 75
      },
      "nodeContext" : "names.isEmpty() && legacyTypes.isEmpty() && dataTypes.isEmpty()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 216,
        "startLineNumber" : 93,
        "startColumnNumber" : 8,
        "endLineNumber" : 96,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (names.isEmpty() && legacyTypes.isEmpty() && dataTypes.isEmpty()) {\n  throw new ValidationException(format(\"Could not find the required schema in property '%s'.\",SCHEMA));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2579,
        "startLineNumber" : 88,
        "startColumnNumber" : 58,
        "endLineNumber" : 140,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,String> names=properties.getIndexedProperty(SCHEMA,SCHEMA_NAME);\n  Map<String,String> legacyTypes=properties.getIndexedProperty(SCHEMA,SCHEMA_TYPE);\n  Map<String,String> dataTypes=properties.getIndexedProperty(SCHEMA,SCHEMA_DATA_TYPE);\n  if (names.isEmpty() && legacyTypes.isEmpty() && dataTypes.isEmpty()) {\n    throw new ValidationException(format(\"Could not find the required schema in property '%s'.\",SCHEMA));\n  }\n  boolean proctimeFound=false;\n  for (int i=0; i < Math.max(names.size(),legacyTypes.size()); i++) {\n    properties.validateString(SCHEMA + \".\" + i+ \".\"+ SCHEMA_NAME,false,1);\n    properties.validateDataType(SCHEMA + \".\" + i+ \".\"+ SCHEMA_DATA_TYPE,SCHEMA + \".\" + i+ \".\"+ SCHEMA_TYPE,false);\n    properties.validateString(SCHEMA + \".\" + i+ \".\"+ SCHEMA_FROM,true,1);\n    String proctime=SCHEMA + \".\" + i+ \".\"+ SCHEMA_PROCTIME;\n    String rowtime=SCHEMA + \".\" + i+ \".\"+ ROWTIME;\n    if (properties.containsKey(proctime)) {\n      if (!isStreamEnvironment) {\n        throw new ValidationException(format(\"Property '%s' is not allowed in a batch environment.\",proctime));\n      }\n else       if (proctimeFound) {\n        throw new ValidationException(\"A proctime attribute must only be defined once.\");\n      }\n      properties.validateBoolean(proctime,false);\n      proctimeFound=properties.getBoolean(proctime);\n      properties.validatePrefixExclusion(rowtime);\n    }\n else     if (properties.hasPrefix(rowtime)) {\n      RowtimeValidator rowtimeValidator=new RowtimeValidator(supportsSourceTimestamps,supportsSourceWatermarks,SCHEMA + \".\" + i+ \".\");\n      rowtimeValidator.validate(properties);\n      properties.validateExclusion(proctime);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 229,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2647,
        "startLineNumber" : 87,
        "startColumnNumber" : 4,
        "endLineNumber" : 140,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void validate(DescriptorProperties properties){\n  Map<String,String> names=properties.getIndexedProperty(SCHEMA,SCHEMA_NAME);\n  Map<String,String> legacyTypes=properties.getIndexedProperty(SCHEMA,SCHEMA_TYPE);\n  Map<String,String> dataTypes=properties.getIndexedProperty(SCHEMA,SCHEMA_DATA_TYPE);\n  if (names.isEmpty() && legacyTypes.isEmpty() && dataTypes.isEmpty()) {\n    throw new ValidationException(format(\"Could not find the required schema in property '%s'.\",SCHEMA));\n  }\n  boolean proctimeFound=false;\n  for (int i=0; i < Math.max(names.size(),legacyTypes.size()); i++) {\n    properties.validateString(SCHEMA + \".\" + i+ \".\"+ SCHEMA_NAME,false,1);\n    properties.validateDataType(SCHEMA + \".\" + i+ \".\"+ SCHEMA_DATA_TYPE,SCHEMA + \".\" + i+ \".\"+ SCHEMA_TYPE,false);\n    properties.validateString(SCHEMA + \".\" + i+ \".\"+ SCHEMA_FROM,true,1);\n    String proctime=SCHEMA + \".\" + i+ \".\"+ SCHEMA_PROCTIME;\n    String rowtime=SCHEMA + \".\" + i+ \".\"+ ROWTIME;\n    if (properties.containsKey(proctime)) {\n      if (!isStreamEnvironment) {\n        throw new ValidationException(format(\"Property '%s' is not allowed in a batch environment.\",proctime));\n      }\n else       if (proctimeFound) {\n        throw new ValidationException(\"A proctime attribute must only be defined once.\");\n      }\n      properties.validateBoolean(proctime,false);\n      proctimeFound=properties.getBoolean(proctime);\n      properties.validatePrefixExclusion(rowtime);\n    }\n else     if (properties.hasPrefix(rowtime)) {\n      RowtimeValidator rowtimeValidator=new RowtimeValidator(supportsSourceTimestamps,supportsSourceWatermarks,SCHEMA + \".\" + i+ \".\");\n      rowtimeValidator.validate(properties);\n      properties.validateExclusion(proctime);\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 239,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 93,
        "startColumnNumber" : 12,
        "endLineNumber" : 93,
        "endColumnNumber" : 75
      },
      "nodeContext" : "names.isEmpty() && legacyTypes.isEmpty() && dataTypes.isEmpty()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.util.Map<java.lang.String,java.lang.String>"
  }, {
    "nodeContext" : "names",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 100,
      "startColumnNumber" : 37,
      "endLineNumber" : 100,
      "endColumnNumber" : 42
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 100,
        "startColumnNumber" : 37,
        "endLineNumber" : 100,
        "endColumnNumber" : 49
      },
      "nodeContext" : "names.size()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 100,
        "startColumnNumber" : 28,
        "endLineNumber" : 100,
        "endColumnNumber" : 70
      },
      "nodeContext" : "Math.max(names.size(),legacyTypes.size())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 100,
        "startColumnNumber" : 24,
        "endLineNumber" : 100,
        "endColumnNumber" : 70
      },
      "nodeContext" : "i < Math.max(names.size(),legacyTypes.size())",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2017,
        "startLineNumber" : 100,
        "startColumnNumber" : 8,
        "endLineNumber" : 139,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < Math.max(names.size(),legacyTypes.size()); i++) {\n  properties.validateString(SCHEMA + \".\" + i+ \".\"+ SCHEMA_NAME,false,1);\n  properties.validateDataType(SCHEMA + \".\" + i+ \".\"+ SCHEMA_DATA_TYPE,SCHEMA + \".\" + i+ \".\"+ SCHEMA_TYPE,false);\n  properties.validateString(SCHEMA + \".\" + i+ \".\"+ SCHEMA_FROM,true,1);\n  String proctime=SCHEMA + \".\" + i+ \".\"+ SCHEMA_PROCTIME;\n  String rowtime=SCHEMA + \".\" + i+ \".\"+ ROWTIME;\n  if (properties.containsKey(proctime)) {\n    if (!isStreamEnvironment) {\n      throw new ValidationException(format(\"Property '%s' is not allowed in a batch environment.\",proctime));\n    }\n else     if (proctimeFound) {\n      throw new ValidationException(\"A proctime attribute must only be defined once.\");\n    }\n    properties.validateBoolean(proctime,false);\n    proctimeFound=properties.getBoolean(proctime);\n    properties.validatePrefixExclusion(rowtime);\n  }\n else   if (properties.hasPrefix(rowtime)) {\n    RowtimeValidator rowtimeValidator=new RowtimeValidator(supportsSourceTimestamps,supportsSourceWatermarks,SCHEMA + \".\" + i+ \".\");\n    rowtimeValidator.validate(properties);\n    properties.validateExclusion(proctime);\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 158,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2579,
        "startLineNumber" : 88,
        "startColumnNumber" : 58,
        "endLineNumber" : 140,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,String> names=properties.getIndexedProperty(SCHEMA,SCHEMA_NAME);\n  Map<String,String> legacyTypes=properties.getIndexedProperty(SCHEMA,SCHEMA_TYPE);\n  Map<String,String> dataTypes=properties.getIndexedProperty(SCHEMA,SCHEMA_DATA_TYPE);\n  if (names.isEmpty() && legacyTypes.isEmpty() && dataTypes.isEmpty()) {\n    throw new ValidationException(format(\"Could not find the required schema in property '%s'.\",SCHEMA));\n  }\n  boolean proctimeFound=false;\n  for (int i=0; i < Math.max(names.size(),legacyTypes.size()); i++) {\n    properties.validateString(SCHEMA + \".\" + i+ \".\"+ SCHEMA_NAME,false,1);\n    properties.validateDataType(SCHEMA + \".\" + i+ \".\"+ SCHEMA_DATA_TYPE,SCHEMA + \".\" + i+ \".\"+ SCHEMA_TYPE,false);\n    properties.validateString(SCHEMA + \".\" + i+ \".\"+ SCHEMA_FROM,true,1);\n    String proctime=SCHEMA + \".\" + i+ \".\"+ SCHEMA_PROCTIME;\n    String rowtime=SCHEMA + \".\" + i+ \".\"+ ROWTIME;\n    if (properties.containsKey(proctime)) {\n      if (!isStreamEnvironment) {\n        throw new ValidationException(format(\"Property '%s' is not allowed in a batch environment.\",proctime));\n      }\n else       if (proctimeFound) {\n        throw new ValidationException(\"A proctime attribute must only be defined once.\");\n      }\n      properties.validateBoolean(proctime,false);\n      proctimeFound=properties.getBoolean(proctime);\n      properties.validatePrefixExclusion(rowtime);\n    }\n else     if (properties.hasPrefix(rowtime)) {\n      RowtimeValidator rowtimeValidator=new RowtimeValidator(supportsSourceTimestamps,supportsSourceWatermarks,SCHEMA + \".\" + i+ \".\");\n      rowtimeValidator.validate(properties);\n      properties.validateExclusion(proctime);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 229,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2647,
        "startLineNumber" : 87,
        "startColumnNumber" : 4,
        "endLineNumber" : 140,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void validate(DescriptorProperties properties){\n  Map<String,String> names=properties.getIndexedProperty(SCHEMA,SCHEMA_NAME);\n  Map<String,String> legacyTypes=properties.getIndexedProperty(SCHEMA,SCHEMA_TYPE);\n  Map<String,String> dataTypes=properties.getIndexedProperty(SCHEMA,SCHEMA_DATA_TYPE);\n  if (names.isEmpty() && legacyTypes.isEmpty() && dataTypes.isEmpty()) {\n    throw new ValidationException(format(\"Could not find the required schema in property '%s'.\",SCHEMA));\n  }\n  boolean proctimeFound=false;\n  for (int i=0; i < Math.max(names.size(),legacyTypes.size()); i++) {\n    properties.validateString(SCHEMA + \".\" + i+ \".\"+ SCHEMA_NAME,false,1);\n    properties.validateDataType(SCHEMA + \".\" + i+ \".\"+ SCHEMA_DATA_TYPE,SCHEMA + \".\" + i+ \".\"+ SCHEMA_TYPE,false);\n    properties.validateString(SCHEMA + \".\" + i+ \".\"+ SCHEMA_FROM,true,1);\n    String proctime=SCHEMA + \".\" + i+ \".\"+ SCHEMA_PROCTIME;\n    String rowtime=SCHEMA + \".\" + i+ \".\"+ ROWTIME;\n    if (properties.containsKey(proctime)) {\n      if (!isStreamEnvironment) {\n        throw new ValidationException(format(\"Property '%s' is not allowed in a batch environment.\",proctime));\n      }\n else       if (proctimeFound) {\n        throw new ValidationException(\"A proctime attribute must only be defined once.\");\n      }\n      properties.validateBoolean(proctime,false);\n      proctimeFound=properties.getBoolean(proctime);\n      properties.validatePrefixExclusion(rowtime);\n    }\n else     if (properties.hasPrefix(rowtime)) {\n      RowtimeValidator rowtimeValidator=new RowtimeValidator(supportsSourceTimestamps,supportsSourceWatermarks,SCHEMA + \".\" + i+ \".\");\n      rowtimeValidator.validate(properties);\n      properties.validateExclusion(proctime);\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 239,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 100,
        "startColumnNumber" : 24,
        "endLineNumber" : 100,
        "endColumnNumber" : 70
      },
      "nodeContext" : "i < Math.max(names.size(),legacyTypes.size())",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.util.Map<java.lang.String,java.lang.String>"
  } ],
  "positionList" : [ {
    "charLength" : 5,
    "startLineNumber" : 93,
    "startColumnNumber" : 12,
    "endLineNumber" : 93,
    "endColumnNumber" : 17
  }, {
    "charLength" : 5,
    "startLineNumber" : 100,
    "startColumnNumber" : 37,
    "endLineNumber" : 100,
    "endColumnNumber" : 42
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  } ]
}