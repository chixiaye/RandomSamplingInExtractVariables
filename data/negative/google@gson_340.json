{
  "id" : 340,
  "expression" : "matcher",
  "projectName" : "google@gson",
  "commitID" : "c3d0f200b352f411b9ebe45c3bf49d4328b2c51f",
  "filePath" : "/codegen/src/main/java/com/google/gson/codegen/JavaWriter.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "matcher",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 78,
      "startColumnNumber" : 9,
      "endLineNumber" : 78,
      "endColumnNumber" : 16
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 78,
        "startColumnNumber" : 9,
        "endLineNumber" : 78,
        "endColumnNumber" : 26
      },
      "nodeContext" : "matcher.matches()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 78,
        "startColumnNumber" : 8,
        "endLineNumber" : 78,
        "endColumnNumber" : 26
      },
      "nodeContext" : "!matcher.matches()",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 79,
        "startLineNumber" : 78,
        "startColumnNumber" : 4,
        "endLineNumber" : 80,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (!matcher.matches()) {\n  throw new IllegalArgumentException(type);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 323,
        "startLineNumber" : 76,
        "startColumnNumber" : 56,
        "endLineNumber" : 87,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Matcher matcher=TYPE_PATTERN.matcher(type);\n  if (!matcher.matches()) {\n    throw new IllegalArgumentException(type);\n  }\n  if (importedTypes.put(type,matcher.group(1)) != null) {\n    throw new IllegalArgumentException(type);\n  }\n  out.write(\"import \");\n  out.write(type);\n  out.write(\";\\n\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 53,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 524,
        "startLineNumber" : 72,
        "startColumnNumber" : 2,
        "endLineNumber" : 87,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Emit an import for  {@code type}. For the duration of the file, all references to this class will be automatically shortened.\n */\npublic void addImport(String type) throws IOException {\n  Matcher matcher=TYPE_PATTERN.matcher(type);\n  if (!matcher.matches()) {\n    throw new IllegalArgumentException(type);\n  }\n  if (importedTypes.put(type,matcher.group(1)) != null) {\n    throw new IllegalArgumentException(type);\n  }\n  out.write(\"import \");\n  out.write(type);\n  out.write(\";\\n\");\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 64,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 78,
        "startColumnNumber" : 8,
        "endLineNumber" : 78,
        "endColumnNumber" : 26
      },
      "nodeContext" : "!matcher.matches()",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.util.regex.Matcher"
  }, {
    "nodeContext" : "matcher",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 81,
      "startColumnNumber" : 32,
      "endLineNumber" : 81,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 81,
        "startColumnNumber" : 32,
        "endLineNumber" : 81,
        "endColumnNumber" : 48
      },
      "nodeContext" : "matcher.group(1)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 81,
        "startColumnNumber" : 8,
        "endLineNumber" : 81,
        "endColumnNumber" : 49
      },
      "nodeContext" : "importedTypes.put(type,matcher.group(1))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 81,
        "startColumnNumber" : 8,
        "endLineNumber" : 81,
        "endColumnNumber" : 57
      },
      "nodeContext" : "importedTypes.put(type,matcher.group(1)) != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 110,
        "startLineNumber" : 81,
        "startColumnNumber" : 4,
        "endLineNumber" : 83,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (importedTypes.put(type,matcher.group(1)) != null) {\n  throw new IllegalArgumentException(type);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 323,
        "startLineNumber" : 76,
        "startColumnNumber" : 56,
        "endLineNumber" : 87,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Matcher matcher=TYPE_PATTERN.matcher(type);\n  if (!matcher.matches()) {\n    throw new IllegalArgumentException(type);\n  }\n  if (importedTypes.put(type,matcher.group(1)) != null) {\n    throw new IllegalArgumentException(type);\n  }\n  out.write(\"import \");\n  out.write(type);\n  out.write(\";\\n\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 53,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 524,
        "startLineNumber" : 72,
        "startColumnNumber" : 2,
        "endLineNumber" : 87,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Emit an import for  {@code type}. For the duration of the file, all references to this class will be automatically shortened.\n */\npublic void addImport(String type) throws IOException {\n  Matcher matcher=TYPE_PATTERN.matcher(type);\n  if (!matcher.matches()) {\n    throw new IllegalArgumentException(type);\n  }\n  if (importedTypes.put(type,matcher.group(1)) != null) {\n    throw new IllegalArgumentException(type);\n  }\n  out.write(\"import \");\n  out.write(type);\n  out.write(\";\\n\");\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 64,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 81,
        "startColumnNumber" : 8,
        "endLineNumber" : 81,
        "endColumnNumber" : 57
      },
      "nodeContext" : "importedTypes.put(type,matcher.group(1)) != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.util.regex.Matcher"
  } ],
  "positionList" : [ {
    "charLength" : 7,
    "startLineNumber" : 78,
    "startColumnNumber" : 9,
    "endLineNumber" : 78,
    "endColumnNumber" : 16
  }, {
    "charLength" : 7,
    "startLineNumber" : 81,
    "startColumnNumber" : 32,
    "endLineNumber" : 81,
    "endColumnNumber" : 39
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  } ]
}