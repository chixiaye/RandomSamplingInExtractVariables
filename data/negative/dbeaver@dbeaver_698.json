{
  "id" : 698,
  "expression" : "rowValues",
  "projectName" : "dbeaver@dbeaver",
  "commitID" : "abbaaa75b5bbcc93de7f6b6668cc44ae3629662f",
  "filePath" : "plugins/org.jkiss.dbeaver.model/src/org/jkiss/dbeaver/model/impl/data/ExecuteBatchImpl.java",
  "occurrences" : 5,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "rowValues",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 137,
      "startColumnNumber" : 40,
      "endLineNumber" : 137,
      "endColumnNumber" : 49
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 137,
        "startColumnNumber" : 40,
        "endLineNumber" : 137,
        "endColumnNumber" : 56
      },
      "nodeContext" : "rowValues.length",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 137,
        "startColumnNumber" : 36,
        "endLineNumber" : 137,
        "endColumnNumber" : 56
      },
      "nodeContext" : "i < rowValues.length",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 136,
        "startLineNumber" : 137,
        "startColumnNumber" : 20,
        "endLineNumber" : 139,
        "endColumnNumber" : 21
      },
      "nodeContext" : "for (int i=0; i < rowValues.length; i++) {\n  nulls[i]=DBUtils.isNullValue(rowValues[i]);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 25,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 824,
        "startLineNumber" : 136,
        "startColumnNumber" : 27,
        "endLineNumber" : 154,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  for (int i=0; i < rowValues.length; i++) {\n    nulls[i]=DBUtils.isNullValue(rowValues[i]);\n  }\n  if (!Arrays.equals(prevNulls,nulls) && statementsInBatch > 0) {\n    reuse=false;\n  }\n  System.arraycopy(nulls,0,prevNulls,0,nulls.length);\n  if (!reuse && statementsInBatch > 0) {\n    if (actions == null) {\n      flushBatch(statistics,statement);\n    }\n    statement.close();\n    statement=null;\n    statementsInBatch=0;\n    reuse=true;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 87,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 835,
        "startLineNumber" : 136,
        "startColumnNumber" : 16,
        "endLineNumber" : 154,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (reuse) {\n  for (int i=0; i < rowValues.length; i++) {\n    nulls[i]=DBUtils.isNullValue(rowValues[i]);\n  }\n  if (!Arrays.equals(prevNulls,nulls) && statementsInBatch > 0) {\n    reuse=false;\n  }\n  System.arraycopy(nulls,0,prevNulls,0,nulls.length);\n  if (!reuse && statementsInBatch > 0) {\n    if (actions == null) {\n      flushBatch(statistics,statement);\n    }\n    statement.close();\n    statement=null;\n    statementsInBatch=0;\n    reuse=true;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 89,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 3378,
        "startLineNumber" : 130,
        "startColumnNumber" : 73,
        "endLineNumber" : 201,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Object[] rowValues=values.get(rowIndex);\n  if (session.getProgressMonitor().isCanceled()) {\n    break;\n  }\n  boolean reuse=reuseStatement;\n  if (reuse) {\n    for (int i=0; i < rowValues.length; i++) {\n      nulls[i]=DBUtils.isNullValue(rowValues[i]);\n    }\n    if (!Arrays.equals(prevNulls,nulls) && statementsInBatch > 0) {\n      reuse=false;\n    }\n    System.arraycopy(nulls,0,prevNulls,0,nulls.length);\n    if (!reuse && statementsInBatch > 0) {\n      if (actions == null) {\n        flushBatch(statistics,statement);\n      }\n      statement.close();\n      statement=null;\n      statementsInBatch=0;\n      reuse=true;\n    }\n  }\n  if (statement == null || !reuse) {\n    statement=prepareStatement(session,handlers,rowValues,options);\n    statistics.setQueryText(statement.getQueryString());\n    statistics.addStatementsCount();\n  }\n  try {\n    bindStatement(handlers,statement,rowValues);\n    if (actions == null) {\n      if (useBatch) {\n        statement.addToBatch();\n        statementsInBatch++;\n      }\n else {\n        long startTime=System.currentTimeMillis();\n        executeStatement(statistics,statement);\n        statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n        long rowCount=statement.getUpdateRowCount();\n        if (rowCount > 0) {\n          statistics.addRowsUpdated(rowCount);\n        }\n        if (keysReceiver != null) {\n          try {\n            readKeys(statement.getSession(),statement,keysReceiver);\n          }\n catch (          Exception e) {\n            log.warn(\"Error reading auto-generated keys\",e);\n          }\n        }\n      }\n    }\n else {\n      String queryString=formatQueryParameters(session,statement.getQueryString(),handlers,rowValues);\n      actions.add(new SQLDatabasePersistAction(\"Execute statement\",queryString));\n    }\n  }\n  finally {\n    if (!reuse) {\n      statement.close();\n    }\n    if (rowIndex > 0 && rowIndex % 100 == 0) {\n      session.getProgressMonitor().subTask(\"Save batch (\" + rowIndex + \" of \"+ values.size()+ \")\");\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 288,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3439,
        "startLineNumber" : 130,
        "startColumnNumber" : 12,
        "endLineNumber" : 201,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int rowIndex=0; rowIndex < values.size(); rowIndex++) {\n  Object[] rowValues=values.get(rowIndex);\n  if (session.getProgressMonitor().isCanceled()) {\n    break;\n  }\n  boolean reuse=reuseStatement;\n  if (reuse) {\n    for (int i=0; i < rowValues.length; i++) {\n      nulls[i]=DBUtils.isNullValue(rowValues[i]);\n    }\n    if (!Arrays.equals(prevNulls,nulls) && statementsInBatch > 0) {\n      reuse=false;\n    }\n    System.arraycopy(nulls,0,prevNulls,0,nulls.length);\n    if (!reuse && statementsInBatch > 0) {\n      if (actions == null) {\n        flushBatch(statistics,statement);\n      }\n      statement.close();\n      statement=null;\n      statementsInBatch=0;\n      reuse=true;\n    }\n  }\n  if (statement == null || !reuse) {\n    statement=prepareStatement(session,handlers,rowValues,options);\n    statistics.setQueryText(statement.getQueryString());\n    statistics.addStatementsCount();\n  }\n  try {\n    bindStatement(handlers,statement,rowValues);\n    if (actions == null) {\n      if (useBatch) {\n        statement.addToBatch();\n        statementsInBatch++;\n      }\n else {\n        long startTime=System.currentTimeMillis();\n        executeStatement(statistics,statement);\n        statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n        long rowCount=statement.getUpdateRowCount();\n        if (rowCount > 0) {\n          statistics.addRowsUpdated(rowCount);\n        }\n        if (keysReceiver != null) {\n          try {\n            readKeys(statement.getSession(),statement,keysReceiver);\n          }\n catch (          Exception e) {\n            log.warn(\"Error reading auto-generated keys\",e);\n          }\n        }\n      }\n    }\n else {\n      String queryString=formatQueryParameters(session,statement.getQueryString(),handlers,rowValues);\n      actions.add(new SQLDatabasePersistAction(\"Execute statement\",queryString));\n    }\n  }\n  finally {\n    if (!reuse) {\n      statement.close();\n    }\n    if (rowIndex > 0 && rowIndex % 100 == 0) {\n      session.getProgressMonitor().subTask(\"Save batch (\" + rowIndex + \" of \"+ values.size()+ \")\");\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 301,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 4326,
        "startLineNumber" : 120,
        "startColumnNumber" : 12,
        "endLineNumber" : 211,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  boolean[] prevNulls=new boolean[attributes.length];\n  boolean[] nulls=new boolean[attributes.length];\n  int statementsInBatch=0;\n  for (int rowIndex=0; rowIndex < values.size(); rowIndex++) {\n    Object[] rowValues=values.get(rowIndex);\n    if (session.getProgressMonitor().isCanceled()) {\n      break;\n    }\n    boolean reuse=reuseStatement;\n    if (reuse) {\n      for (int i=0; i < rowValues.length; i++) {\n        nulls[i]=DBUtils.isNullValue(rowValues[i]);\n      }\n      if (!Arrays.equals(prevNulls,nulls) && statementsInBatch > 0) {\n        reuse=false;\n      }\n      System.arraycopy(nulls,0,prevNulls,0,nulls.length);\n      if (!reuse && statementsInBatch > 0) {\n        if (actions == null) {\n          flushBatch(statistics,statement);\n        }\n        statement.close();\n        statement=null;\n        statementsInBatch=0;\n        reuse=true;\n      }\n    }\n    if (statement == null || !reuse) {\n      statement=prepareStatement(session,handlers,rowValues,options);\n      statistics.setQueryText(statement.getQueryString());\n      statistics.addStatementsCount();\n    }\n    try {\n      bindStatement(handlers,statement,rowValues);\n      if (actions == null) {\n        if (useBatch) {\n          statement.addToBatch();\n          statementsInBatch++;\n        }\n else {\n          long startTime=System.currentTimeMillis();\n          executeStatement(statistics,statement);\n          statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n          long rowCount=statement.getUpdateRowCount();\n          if (rowCount > 0) {\n            statistics.addRowsUpdated(rowCount);\n          }\n          if (keysReceiver != null) {\n            try {\n              readKeys(statement.getSession(),statement,keysReceiver);\n            }\n catch (            Exception e) {\n              log.warn(\"Error reading auto-generated keys\",e);\n            }\n          }\n        }\n      }\n else {\n        String queryString=formatQueryParameters(session,statement.getQueryString(),handlers,rowValues);\n        actions.add(new SQLDatabasePersistAction(\"Execute statement\",queryString));\n      }\n    }\n  finally {\n      if (!reuse) {\n        statement.close();\n      }\n      if (rowIndex > 0 && rowIndex % 100 == 0) {\n        session.getProgressMonitor().subTask(\"Save batch (\" + rowIndex + \" of \"+ values.size()+ \")\");\n      }\n    }\n  }\n  values.clear();\n  if (statementsInBatch > 0) {\n    if (actions == null) {\n      flushBatch(statistics,statement);\n    }\n    statement.close();\n    statement=null;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 360,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4550,
        "startLineNumber" : 120,
        "startColumnNumber" : 8,
        "endLineNumber" : 218,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  boolean[] prevNulls=new boolean[attributes.length];\n  boolean[] nulls=new boolean[attributes.length];\n  int statementsInBatch=0;\n  for (int rowIndex=0; rowIndex < values.size(); rowIndex++) {\n    Object[] rowValues=values.get(rowIndex);\n    if (session.getProgressMonitor().isCanceled()) {\n      break;\n    }\n    boolean reuse=reuseStatement;\n    if (reuse) {\n      for (int i=0; i < rowValues.length; i++) {\n        nulls[i]=DBUtils.isNullValue(rowValues[i]);\n      }\n      if (!Arrays.equals(prevNulls,nulls) && statementsInBatch > 0) {\n        reuse=false;\n      }\n      System.arraycopy(nulls,0,prevNulls,0,nulls.length);\n      if (!reuse && statementsInBatch > 0) {\n        if (actions == null) {\n          flushBatch(statistics,statement);\n        }\n        statement.close();\n        statement=null;\n        statementsInBatch=0;\n        reuse=true;\n      }\n    }\n    if (statement == null || !reuse) {\n      statement=prepareStatement(session,handlers,rowValues,options);\n      statistics.setQueryText(statement.getQueryString());\n      statistics.addStatementsCount();\n    }\n    try {\n      bindStatement(handlers,statement,rowValues);\n      if (actions == null) {\n        if (useBatch) {\n          statement.addToBatch();\n          statementsInBatch++;\n        }\n else {\n          long startTime=System.currentTimeMillis();\n          executeStatement(statistics,statement);\n          statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n          long rowCount=statement.getUpdateRowCount();\n          if (rowCount > 0) {\n            statistics.addRowsUpdated(rowCount);\n          }\n          if (keysReceiver != null) {\n            try {\n              readKeys(statement.getSession(),statement,keysReceiver);\n            }\n catch (            Exception e) {\n              log.warn(\"Error reading auto-generated keys\",e);\n            }\n          }\n        }\n      }\n else {\n        String queryString=formatQueryParameters(session,statement.getQueryString(),handlers,rowValues);\n        actions.add(new SQLDatabasePersistAction(\"Execute statement\",queryString));\n      }\n    }\n  finally {\n      if (!reuse) {\n        statement.close();\n      }\n      if (rowIndex > 0 && rowIndex % 100 == 0) {\n        session.getProgressMonitor().subTask(\"Save batch (\" + rowIndex + \" of \"+ values.size()+ \")\");\n      }\n    }\n  }\n  values.clear();\n  if (statementsInBatch > 0) {\n    if (actions == null) {\n      flushBatch(statistics,statement);\n    }\n    statement.close();\n    statement=null;\n  }\n}\n  finally {\n  if (reuseStatement && statement != null) {\n    statement.close();\n  }\n  if (!useBatch && !values.isEmpty()) {\n    values.clear();\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 386,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5535,
        "startLineNumber" : 100,
        "startColumnNumber" : 4,
        "endLineNumber" : 221,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  DBDValueHandler[] handlers=new DBDValueHandler[attributes.length];\n  for (int i=0; i < attributes.length; i++) {\n    if (attributes[i] instanceof DBDAttributeBinding) {\n      handlers[i]=((DBDAttributeBinding)attributes[i]).getValueHandler();\n    }\n else {\n      handlers[i]=DBUtils.findValueHandler(session,attributes[i]);\n    }\n  }\n  Object disableBatchesOption=options.get(DBSDataManipulator.OPTION_DISABLE_BATCHES);\n  boolean useBatch=session.getDataSource().getInfo().supportsBatchUpdates() && reuseStatement && (Boolean.FALSE.equals(disableBatchesOption) || disableBatchesOption == null);\n  if (values.size() <= 1) {\n    useBatch=false;\n  }\n  DBCStatistics statistics=new DBCStatistics();\n  DBCStatement statement=null;\n  try {\n    boolean[] prevNulls=new boolean[attributes.length];\n    boolean[] nulls=new boolean[attributes.length];\n    int statementsInBatch=0;\n    for (int rowIndex=0; rowIndex < values.size(); rowIndex++) {\n      Object[] rowValues=values.get(rowIndex);\n      if (session.getProgressMonitor().isCanceled()) {\n        break;\n      }\n      boolean reuse=reuseStatement;\n      if (reuse) {\n        for (int i=0; i < rowValues.length; i++) {\n          nulls[i]=DBUtils.isNullValue(rowValues[i]);\n        }\n        if (!Arrays.equals(prevNulls,nulls) && statementsInBatch > 0) {\n          reuse=false;\n        }\n        System.arraycopy(nulls,0,prevNulls,0,nulls.length);\n        if (!reuse && statementsInBatch > 0) {\n          if (actions == null) {\n            flushBatch(statistics,statement);\n          }\n          statement.close();\n          statement=null;\n          statementsInBatch=0;\n          reuse=true;\n        }\n      }\n      if (statement == null || !reuse) {\n        statement=prepareStatement(session,handlers,rowValues,options);\n        statistics.setQueryText(statement.getQueryString());\n        statistics.addStatementsCount();\n      }\n      try {\n        bindStatement(handlers,statement,rowValues);\n        if (actions == null) {\n          if (useBatch) {\n            statement.addToBatch();\n            statementsInBatch++;\n          }\n else {\n            long startTime=System.currentTimeMillis();\n            executeStatement(statistics,statement);\n            statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n            long rowCount=statement.getUpdateRowCount();\n            if (rowCount > 0) {\n              statistics.addRowsUpdated(rowCount);\n            }\n            if (keysReceiver != null) {\n              try {\n                readKeys(statement.getSession(),statement,keysReceiver);\n              }\n catch (              Exception e) {\n                log.warn(\"Error reading auto-generated keys\",e);\n              }\n            }\n          }\n        }\n else {\n          String queryString=formatQueryParameters(session,statement.getQueryString(),handlers,rowValues);\n          actions.add(new SQLDatabasePersistAction(\"Execute statement\",queryString));\n        }\n      }\n  finally {\n        if (!reuse) {\n          statement.close();\n        }\n        if (rowIndex > 0 && rowIndex % 100 == 0) {\n          session.getProgressMonitor().subTask(\"Save batch (\" + rowIndex + \" of \"+ values.size()+ \")\");\n        }\n      }\n    }\n    values.clear();\n    if (statementsInBatch > 0) {\n      if (actions == null) {\n        flushBatch(statistics,statement);\n      }\n      statement.close();\n      statement=null;\n    }\n  }\n  finally {\n    if (reuseStatement && statement != null) {\n      statement.close();\n    }\n    if (!useBatch && !values.isEmpty()) {\n      values.clear();\n    }\n  }\n  return statistics;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 513,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5973,
        "startLineNumber" : 90,
        "startColumnNumber" : 4,
        "endLineNumber" : 221,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Execute batch OR generate batch script.\n * @param session    session\n * @param actions    script actions. If not null then no execution will be done\n * @param options\n * @return execution statistics\n * @throws DBCException\n */\n@NotNull private DBCStatistics processBatch(@NotNull DBCSession session,@Nullable List<DBEPersistAction> actions,Map<String,Object> options) throws DBCException {\n  DBDValueHandler[] handlers=new DBDValueHandler[attributes.length];\n  for (int i=0; i < attributes.length; i++) {\n    if (attributes[i] instanceof DBDAttributeBinding) {\n      handlers[i]=((DBDAttributeBinding)attributes[i]).getValueHandler();\n    }\n else {\n      handlers[i]=DBUtils.findValueHandler(session,attributes[i]);\n    }\n  }\n  Object disableBatchesOption=options.get(DBSDataManipulator.OPTION_DISABLE_BATCHES);\n  boolean useBatch=session.getDataSource().getInfo().supportsBatchUpdates() && reuseStatement && (Boolean.FALSE.equals(disableBatchesOption) || disableBatchesOption == null);\n  if (values.size() <= 1) {\n    useBatch=false;\n  }\n  DBCStatistics statistics=new DBCStatistics();\n  DBCStatement statement=null;\n  try {\n    boolean[] prevNulls=new boolean[attributes.length];\n    boolean[] nulls=new boolean[attributes.length];\n    int statementsInBatch=0;\n    for (int rowIndex=0; rowIndex < values.size(); rowIndex++) {\n      Object[] rowValues=values.get(rowIndex);\n      if (session.getProgressMonitor().isCanceled()) {\n        break;\n      }\n      boolean reuse=reuseStatement;\n      if (reuse) {\n        for (int i=0; i < rowValues.length; i++) {\n          nulls[i]=DBUtils.isNullValue(rowValues[i]);\n        }\n        if (!Arrays.equals(prevNulls,nulls) && statementsInBatch > 0) {\n          reuse=false;\n        }\n        System.arraycopy(nulls,0,prevNulls,0,nulls.length);\n        if (!reuse && statementsInBatch > 0) {\n          if (actions == null) {\n            flushBatch(statistics,statement);\n          }\n          statement.close();\n          statement=null;\n          statementsInBatch=0;\n          reuse=true;\n        }\n      }\n      if (statement == null || !reuse) {\n        statement=prepareStatement(session,handlers,rowValues,options);\n        statistics.setQueryText(statement.getQueryString());\n        statistics.addStatementsCount();\n      }\n      try {\n        bindStatement(handlers,statement,rowValues);\n        if (actions == null) {\n          if (useBatch) {\n            statement.addToBatch();\n            statementsInBatch++;\n          }\n else {\n            long startTime=System.currentTimeMillis();\n            executeStatement(statistics,statement);\n            statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n            long rowCount=statement.getUpdateRowCount();\n            if (rowCount > 0) {\n              statistics.addRowsUpdated(rowCount);\n            }\n            if (keysReceiver != null) {\n              try {\n                readKeys(statement.getSession(),statement,keysReceiver);\n              }\n catch (              Exception e) {\n                log.warn(\"Error reading auto-generated keys\",e);\n              }\n            }\n          }\n        }\n else {\n          String queryString=formatQueryParameters(session,statement.getQueryString(),handlers,rowValues);\n          actions.add(new SQLDatabasePersistAction(\"Execute statement\",queryString));\n        }\n      }\n  finally {\n        if (!reuse) {\n          statement.close();\n        }\n        if (rowIndex > 0 && rowIndex % 100 == 0) {\n          session.getProgressMonitor().subTask(\"Save batch (\" + rowIndex + \" of \"+ values.size()+ \")\");\n        }\n      }\n    }\n    values.clear();\n    if (statementsInBatch > 0) {\n      if (actions == null) {\n        flushBatch(statistics,statement);\n      }\n      statement.close();\n      statement=null;\n    }\n  }\n  finally {\n    if (reuseStatement && statement != null) {\n      statement.close();\n    }\n    if (!useBatch && !values.isEmpty()) {\n      values.clear();\n    }\n  }\n  return statistics;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 547,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 137,
        "startColumnNumber" : 36,
        "endLineNumber" : 137,
        "endColumnNumber" : 56
      },
      "nodeContext" : "i < rowValues.length",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.Object[]"
  }, {
    "nodeContext" : "rowValues",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 138,
      "startColumnNumber" : 55,
      "endLineNumber" : 138,
      "endColumnNumber" : 64
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 138,
        "startColumnNumber" : 55,
        "endLineNumber" : 138,
        "endColumnNumber" : 67
      },
      "nodeContext" : "rowValues[i]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 138,
        "startColumnNumber" : 35,
        "endLineNumber" : 138,
        "endColumnNumber" : 68
      },
      "nodeContext" : "DBUtils.isNullValue(rowValues[i])",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 138,
        "startColumnNumber" : 24,
        "endLineNumber" : 138,
        "endColumnNumber" : 68
      },
      "nodeContext" : "nulls[i]=DBUtils.isNullValue(rowValues[i])",
      "nodeType" : "Assignment",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 138,
        "startColumnNumber" : 24,
        "endLineNumber" : 138,
        "endColumnNumber" : 69
      },
      "nodeContext" : "nulls[i]=DBUtils.isNullValue(rowValues[i]);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 137,
        "startColumnNumber" : 63,
        "endLineNumber" : 139,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  nulls[i]=DBUtils.isNullValue(rowValues[i]);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 136,
        "startLineNumber" : 137,
        "startColumnNumber" : 20,
        "endLineNumber" : 139,
        "endColumnNumber" : 21
      },
      "nodeContext" : "for (int i=0; i < rowValues.length; i++) {\n  nulls[i]=DBUtils.isNullValue(rowValues[i]);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 25,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 824,
        "startLineNumber" : 136,
        "startColumnNumber" : 27,
        "endLineNumber" : 154,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  for (int i=0; i < rowValues.length; i++) {\n    nulls[i]=DBUtils.isNullValue(rowValues[i]);\n  }\n  if (!Arrays.equals(prevNulls,nulls) && statementsInBatch > 0) {\n    reuse=false;\n  }\n  System.arraycopy(nulls,0,prevNulls,0,nulls.length);\n  if (!reuse && statementsInBatch > 0) {\n    if (actions == null) {\n      flushBatch(statistics,statement);\n    }\n    statement.close();\n    statement=null;\n    statementsInBatch=0;\n    reuse=true;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 87,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 835,
        "startLineNumber" : 136,
        "startColumnNumber" : 16,
        "endLineNumber" : 154,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (reuse) {\n  for (int i=0; i < rowValues.length; i++) {\n    nulls[i]=DBUtils.isNullValue(rowValues[i]);\n  }\n  if (!Arrays.equals(prevNulls,nulls) && statementsInBatch > 0) {\n    reuse=false;\n  }\n  System.arraycopy(nulls,0,prevNulls,0,nulls.length);\n  if (!reuse && statementsInBatch > 0) {\n    if (actions == null) {\n      flushBatch(statistics,statement);\n    }\n    statement.close();\n    statement=null;\n    statementsInBatch=0;\n    reuse=true;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 89,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 3378,
        "startLineNumber" : 130,
        "startColumnNumber" : 73,
        "endLineNumber" : 201,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Object[] rowValues=values.get(rowIndex);\n  if (session.getProgressMonitor().isCanceled()) {\n    break;\n  }\n  boolean reuse=reuseStatement;\n  if (reuse) {\n    for (int i=0; i < rowValues.length; i++) {\n      nulls[i]=DBUtils.isNullValue(rowValues[i]);\n    }\n    if (!Arrays.equals(prevNulls,nulls) && statementsInBatch > 0) {\n      reuse=false;\n    }\n    System.arraycopy(nulls,0,prevNulls,0,nulls.length);\n    if (!reuse && statementsInBatch > 0) {\n      if (actions == null) {\n        flushBatch(statistics,statement);\n      }\n      statement.close();\n      statement=null;\n      statementsInBatch=0;\n      reuse=true;\n    }\n  }\n  if (statement == null || !reuse) {\n    statement=prepareStatement(session,handlers,rowValues,options);\n    statistics.setQueryText(statement.getQueryString());\n    statistics.addStatementsCount();\n  }\n  try {\n    bindStatement(handlers,statement,rowValues);\n    if (actions == null) {\n      if (useBatch) {\n        statement.addToBatch();\n        statementsInBatch++;\n      }\n else {\n        long startTime=System.currentTimeMillis();\n        executeStatement(statistics,statement);\n        statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n        long rowCount=statement.getUpdateRowCount();\n        if (rowCount > 0) {\n          statistics.addRowsUpdated(rowCount);\n        }\n        if (keysReceiver != null) {\n          try {\n            readKeys(statement.getSession(),statement,keysReceiver);\n          }\n catch (          Exception e) {\n            log.warn(\"Error reading auto-generated keys\",e);\n          }\n        }\n      }\n    }\n else {\n      String queryString=formatQueryParameters(session,statement.getQueryString(),handlers,rowValues);\n      actions.add(new SQLDatabasePersistAction(\"Execute statement\",queryString));\n    }\n  }\n  finally {\n    if (!reuse) {\n      statement.close();\n    }\n    if (rowIndex > 0 && rowIndex % 100 == 0) {\n      session.getProgressMonitor().subTask(\"Save batch (\" + rowIndex + \" of \"+ values.size()+ \")\");\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 288,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3439,
        "startLineNumber" : 130,
        "startColumnNumber" : 12,
        "endLineNumber" : 201,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int rowIndex=0; rowIndex < values.size(); rowIndex++) {\n  Object[] rowValues=values.get(rowIndex);\n  if (session.getProgressMonitor().isCanceled()) {\n    break;\n  }\n  boolean reuse=reuseStatement;\n  if (reuse) {\n    for (int i=0; i < rowValues.length; i++) {\n      nulls[i]=DBUtils.isNullValue(rowValues[i]);\n    }\n    if (!Arrays.equals(prevNulls,nulls) && statementsInBatch > 0) {\n      reuse=false;\n    }\n    System.arraycopy(nulls,0,prevNulls,0,nulls.length);\n    if (!reuse && statementsInBatch > 0) {\n      if (actions == null) {\n        flushBatch(statistics,statement);\n      }\n      statement.close();\n      statement=null;\n      statementsInBatch=0;\n      reuse=true;\n    }\n  }\n  if (statement == null || !reuse) {\n    statement=prepareStatement(session,handlers,rowValues,options);\n    statistics.setQueryText(statement.getQueryString());\n    statistics.addStatementsCount();\n  }\n  try {\n    bindStatement(handlers,statement,rowValues);\n    if (actions == null) {\n      if (useBatch) {\n        statement.addToBatch();\n        statementsInBatch++;\n      }\n else {\n        long startTime=System.currentTimeMillis();\n        executeStatement(statistics,statement);\n        statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n        long rowCount=statement.getUpdateRowCount();\n        if (rowCount > 0) {\n          statistics.addRowsUpdated(rowCount);\n        }\n        if (keysReceiver != null) {\n          try {\n            readKeys(statement.getSession(),statement,keysReceiver);\n          }\n catch (          Exception e) {\n            log.warn(\"Error reading auto-generated keys\",e);\n          }\n        }\n      }\n    }\n else {\n      String queryString=formatQueryParameters(session,statement.getQueryString(),handlers,rowValues);\n      actions.add(new SQLDatabasePersistAction(\"Execute statement\",queryString));\n    }\n  }\n  finally {\n    if (!reuse) {\n      statement.close();\n    }\n    if (rowIndex > 0 && rowIndex % 100 == 0) {\n      session.getProgressMonitor().subTask(\"Save batch (\" + rowIndex + \" of \"+ values.size()+ \")\");\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 301,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 4326,
        "startLineNumber" : 120,
        "startColumnNumber" : 12,
        "endLineNumber" : 211,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  boolean[] prevNulls=new boolean[attributes.length];\n  boolean[] nulls=new boolean[attributes.length];\n  int statementsInBatch=0;\n  for (int rowIndex=0; rowIndex < values.size(); rowIndex++) {\n    Object[] rowValues=values.get(rowIndex);\n    if (session.getProgressMonitor().isCanceled()) {\n      break;\n    }\n    boolean reuse=reuseStatement;\n    if (reuse) {\n      for (int i=0; i < rowValues.length; i++) {\n        nulls[i]=DBUtils.isNullValue(rowValues[i]);\n      }\n      if (!Arrays.equals(prevNulls,nulls) && statementsInBatch > 0) {\n        reuse=false;\n      }\n      System.arraycopy(nulls,0,prevNulls,0,nulls.length);\n      if (!reuse && statementsInBatch > 0) {\n        if (actions == null) {\n          flushBatch(statistics,statement);\n        }\n        statement.close();\n        statement=null;\n        statementsInBatch=0;\n        reuse=true;\n      }\n    }\n    if (statement == null || !reuse) {\n      statement=prepareStatement(session,handlers,rowValues,options);\n      statistics.setQueryText(statement.getQueryString());\n      statistics.addStatementsCount();\n    }\n    try {\n      bindStatement(handlers,statement,rowValues);\n      if (actions == null) {\n        if (useBatch) {\n          statement.addToBatch();\n          statementsInBatch++;\n        }\n else {\n          long startTime=System.currentTimeMillis();\n          executeStatement(statistics,statement);\n          statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n          long rowCount=statement.getUpdateRowCount();\n          if (rowCount > 0) {\n            statistics.addRowsUpdated(rowCount);\n          }\n          if (keysReceiver != null) {\n            try {\n              readKeys(statement.getSession(),statement,keysReceiver);\n            }\n catch (            Exception e) {\n              log.warn(\"Error reading auto-generated keys\",e);\n            }\n          }\n        }\n      }\n else {\n        String queryString=formatQueryParameters(session,statement.getQueryString(),handlers,rowValues);\n        actions.add(new SQLDatabasePersistAction(\"Execute statement\",queryString));\n      }\n    }\n  finally {\n      if (!reuse) {\n        statement.close();\n      }\n      if (rowIndex > 0 && rowIndex % 100 == 0) {\n        session.getProgressMonitor().subTask(\"Save batch (\" + rowIndex + \" of \"+ values.size()+ \")\");\n      }\n    }\n  }\n  values.clear();\n  if (statementsInBatch > 0) {\n    if (actions == null) {\n      flushBatch(statistics,statement);\n    }\n    statement.close();\n    statement=null;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 360,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4550,
        "startLineNumber" : 120,
        "startColumnNumber" : 8,
        "endLineNumber" : 218,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  boolean[] prevNulls=new boolean[attributes.length];\n  boolean[] nulls=new boolean[attributes.length];\n  int statementsInBatch=0;\n  for (int rowIndex=0; rowIndex < values.size(); rowIndex++) {\n    Object[] rowValues=values.get(rowIndex);\n    if (session.getProgressMonitor().isCanceled()) {\n      break;\n    }\n    boolean reuse=reuseStatement;\n    if (reuse) {\n      for (int i=0; i < rowValues.length; i++) {\n        nulls[i]=DBUtils.isNullValue(rowValues[i]);\n      }\n      if (!Arrays.equals(prevNulls,nulls) && statementsInBatch > 0) {\n        reuse=false;\n      }\n      System.arraycopy(nulls,0,prevNulls,0,nulls.length);\n      if (!reuse && statementsInBatch > 0) {\n        if (actions == null) {\n          flushBatch(statistics,statement);\n        }\n        statement.close();\n        statement=null;\n        statementsInBatch=0;\n        reuse=true;\n      }\n    }\n    if (statement == null || !reuse) {\n      statement=prepareStatement(session,handlers,rowValues,options);\n      statistics.setQueryText(statement.getQueryString());\n      statistics.addStatementsCount();\n    }\n    try {\n      bindStatement(handlers,statement,rowValues);\n      if (actions == null) {\n        if (useBatch) {\n          statement.addToBatch();\n          statementsInBatch++;\n        }\n else {\n          long startTime=System.currentTimeMillis();\n          executeStatement(statistics,statement);\n          statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n          long rowCount=statement.getUpdateRowCount();\n          if (rowCount > 0) {\n            statistics.addRowsUpdated(rowCount);\n          }\n          if (keysReceiver != null) {\n            try {\n              readKeys(statement.getSession(),statement,keysReceiver);\n            }\n catch (            Exception e) {\n              log.warn(\"Error reading auto-generated keys\",e);\n            }\n          }\n        }\n      }\n else {\n        String queryString=formatQueryParameters(session,statement.getQueryString(),handlers,rowValues);\n        actions.add(new SQLDatabasePersistAction(\"Execute statement\",queryString));\n      }\n    }\n  finally {\n      if (!reuse) {\n        statement.close();\n      }\n      if (rowIndex > 0 && rowIndex % 100 == 0) {\n        session.getProgressMonitor().subTask(\"Save batch (\" + rowIndex + \" of \"+ values.size()+ \")\");\n      }\n    }\n  }\n  values.clear();\n  if (statementsInBatch > 0) {\n    if (actions == null) {\n      flushBatch(statistics,statement);\n    }\n    statement.close();\n    statement=null;\n  }\n}\n  finally {\n  if (reuseStatement && statement != null) {\n    statement.close();\n  }\n  if (!useBatch && !values.isEmpty()) {\n    values.clear();\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 386,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5535,
        "startLineNumber" : 100,
        "startColumnNumber" : 4,
        "endLineNumber" : 221,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  DBDValueHandler[] handlers=new DBDValueHandler[attributes.length];\n  for (int i=0; i < attributes.length; i++) {\n    if (attributes[i] instanceof DBDAttributeBinding) {\n      handlers[i]=((DBDAttributeBinding)attributes[i]).getValueHandler();\n    }\n else {\n      handlers[i]=DBUtils.findValueHandler(session,attributes[i]);\n    }\n  }\n  Object disableBatchesOption=options.get(DBSDataManipulator.OPTION_DISABLE_BATCHES);\n  boolean useBatch=session.getDataSource().getInfo().supportsBatchUpdates() && reuseStatement && (Boolean.FALSE.equals(disableBatchesOption) || disableBatchesOption == null);\n  if (values.size() <= 1) {\n    useBatch=false;\n  }\n  DBCStatistics statistics=new DBCStatistics();\n  DBCStatement statement=null;\n  try {\n    boolean[] prevNulls=new boolean[attributes.length];\n    boolean[] nulls=new boolean[attributes.length];\n    int statementsInBatch=0;\n    for (int rowIndex=0; rowIndex < values.size(); rowIndex++) {\n      Object[] rowValues=values.get(rowIndex);\n      if (session.getProgressMonitor().isCanceled()) {\n        break;\n      }\n      boolean reuse=reuseStatement;\n      if (reuse) {\n        for (int i=0; i < rowValues.length; i++) {\n          nulls[i]=DBUtils.isNullValue(rowValues[i]);\n        }\n        if (!Arrays.equals(prevNulls,nulls) && statementsInBatch > 0) {\n          reuse=false;\n        }\n        System.arraycopy(nulls,0,prevNulls,0,nulls.length);\n        if (!reuse && statementsInBatch > 0) {\n          if (actions == null) {\n            flushBatch(statistics,statement);\n          }\n          statement.close();\n          statement=null;\n          statementsInBatch=0;\n          reuse=true;\n        }\n      }\n      if (statement == null || !reuse) {\n        statement=prepareStatement(session,handlers,rowValues,options);\n        statistics.setQueryText(statement.getQueryString());\n        statistics.addStatementsCount();\n      }\n      try {\n        bindStatement(handlers,statement,rowValues);\n        if (actions == null) {\n          if (useBatch) {\n            statement.addToBatch();\n            statementsInBatch++;\n          }\n else {\n            long startTime=System.currentTimeMillis();\n            executeStatement(statistics,statement);\n            statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n            long rowCount=statement.getUpdateRowCount();\n            if (rowCount > 0) {\n              statistics.addRowsUpdated(rowCount);\n            }\n            if (keysReceiver != null) {\n              try {\n                readKeys(statement.getSession(),statement,keysReceiver);\n              }\n catch (              Exception e) {\n                log.warn(\"Error reading auto-generated keys\",e);\n              }\n            }\n          }\n        }\n else {\n          String queryString=formatQueryParameters(session,statement.getQueryString(),handlers,rowValues);\n          actions.add(new SQLDatabasePersistAction(\"Execute statement\",queryString));\n        }\n      }\n  finally {\n        if (!reuse) {\n          statement.close();\n        }\n        if (rowIndex > 0 && rowIndex % 100 == 0) {\n          session.getProgressMonitor().subTask(\"Save batch (\" + rowIndex + \" of \"+ values.size()+ \")\");\n        }\n      }\n    }\n    values.clear();\n    if (statementsInBatch > 0) {\n      if (actions == null) {\n        flushBatch(statistics,statement);\n      }\n      statement.close();\n      statement=null;\n    }\n  }\n  finally {\n    if (reuseStatement && statement != null) {\n      statement.close();\n    }\n    if (!useBatch && !values.isEmpty()) {\n      values.clear();\n    }\n  }\n  return statistics;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 513,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5973,
        "startLineNumber" : 90,
        "startColumnNumber" : 4,
        "endLineNumber" : 221,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Execute batch OR generate batch script.\n * @param session    session\n * @param actions    script actions. If not null then no execution will be done\n * @param options\n * @return execution statistics\n * @throws DBCException\n */\n@NotNull private DBCStatistics processBatch(@NotNull DBCSession session,@Nullable List<DBEPersistAction> actions,Map<String,Object> options) throws DBCException {\n  DBDValueHandler[] handlers=new DBDValueHandler[attributes.length];\n  for (int i=0; i < attributes.length; i++) {\n    if (attributes[i] instanceof DBDAttributeBinding) {\n      handlers[i]=((DBDAttributeBinding)attributes[i]).getValueHandler();\n    }\n else {\n      handlers[i]=DBUtils.findValueHandler(session,attributes[i]);\n    }\n  }\n  Object disableBatchesOption=options.get(DBSDataManipulator.OPTION_DISABLE_BATCHES);\n  boolean useBatch=session.getDataSource().getInfo().supportsBatchUpdates() && reuseStatement && (Boolean.FALSE.equals(disableBatchesOption) || disableBatchesOption == null);\n  if (values.size() <= 1) {\n    useBatch=false;\n  }\n  DBCStatistics statistics=new DBCStatistics();\n  DBCStatement statement=null;\n  try {\n    boolean[] prevNulls=new boolean[attributes.length];\n    boolean[] nulls=new boolean[attributes.length];\n    int statementsInBatch=0;\n    for (int rowIndex=0; rowIndex < values.size(); rowIndex++) {\n      Object[] rowValues=values.get(rowIndex);\n      if (session.getProgressMonitor().isCanceled()) {\n        break;\n      }\n      boolean reuse=reuseStatement;\n      if (reuse) {\n        for (int i=0; i < rowValues.length; i++) {\n          nulls[i]=DBUtils.isNullValue(rowValues[i]);\n        }\n        if (!Arrays.equals(prevNulls,nulls) && statementsInBatch > 0) {\n          reuse=false;\n        }\n        System.arraycopy(nulls,0,prevNulls,0,nulls.length);\n        if (!reuse && statementsInBatch > 0) {\n          if (actions == null) {\n            flushBatch(statistics,statement);\n          }\n          statement.close();\n          statement=null;\n          statementsInBatch=0;\n          reuse=true;\n        }\n      }\n      if (statement == null || !reuse) {\n        statement=prepareStatement(session,handlers,rowValues,options);\n        statistics.setQueryText(statement.getQueryString());\n        statistics.addStatementsCount();\n      }\n      try {\n        bindStatement(handlers,statement,rowValues);\n        if (actions == null) {\n          if (useBatch) {\n            statement.addToBatch();\n            statementsInBatch++;\n          }\n else {\n            long startTime=System.currentTimeMillis();\n            executeStatement(statistics,statement);\n            statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n            long rowCount=statement.getUpdateRowCount();\n            if (rowCount > 0) {\n              statistics.addRowsUpdated(rowCount);\n            }\n            if (keysReceiver != null) {\n              try {\n                readKeys(statement.getSession(),statement,keysReceiver);\n              }\n catch (              Exception e) {\n                log.warn(\"Error reading auto-generated keys\",e);\n              }\n            }\n          }\n        }\n else {\n          String queryString=formatQueryParameters(session,statement.getQueryString(),handlers,rowValues);\n          actions.add(new SQLDatabasePersistAction(\"Execute statement\",queryString));\n        }\n      }\n  finally {\n        if (!reuse) {\n          statement.close();\n        }\n        if (rowIndex > 0 && rowIndex % 100 == 0) {\n          session.getProgressMonitor().subTask(\"Save batch (\" + rowIndex + \" of \"+ values.size()+ \")\");\n        }\n      }\n    }\n    values.clear();\n    if (statementsInBatch > 0) {\n      if (actions == null) {\n        flushBatch(statistics,statement);\n      }\n      statement.close();\n      statement=null;\n    }\n  }\n  finally {\n    if (reuseStatement && statement != null) {\n      statement.close();\n    }\n    if (!useBatch && !values.isEmpty()) {\n      values.clear();\n    }\n  }\n  return statistics;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 547,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 138,
        "startColumnNumber" : 24,
        "endLineNumber" : 138,
        "endColumnNumber" : 69
      },
      "nodeContext" : "nulls[i]=DBUtils.isNullValue(rowValues[i]);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.Object[]"
  }, {
    "nodeContext" : "rowValues",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 156,
      "startColumnNumber" : 68,
      "endLineNumber" : 156,
      "endColumnNumber" : 77
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 156,
        "startColumnNumber" : 32,
        "endLineNumber" : 156,
        "endColumnNumber" : 87
      },
      "nodeContext" : "prepareStatement(session,handlers,rowValues,options)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 156,
        "startColumnNumber" : 20,
        "endLineNumber" : 156,
        "endColumnNumber" : 87
      },
      "nodeContext" : "statement=prepareStatement(session,handlers,rowValues,options)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 156,
        "startColumnNumber" : 20,
        "endLineNumber" : 156,
        "endColumnNumber" : 88
      },
      "nodeContext" : "statement=prepareStatement(session,handlers,rowValues,options);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 234,
        "startLineNumber" : 155,
        "startColumnNumber" : 49,
        "endLineNumber" : 159,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  statement=prepareStatement(session,handlers,rowValues,options);\n  statistics.setQueryText(statement.getQueryString());\n  statistics.addStatementsCount();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 21,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 267,
        "startLineNumber" : 155,
        "startColumnNumber" : 16,
        "endLineNumber" : 159,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (statement == null || !reuse) {\n  statement=prepareStatement(session,handlers,rowValues,options);\n  statistics.setQueryText(statement.getQueryString());\n  statistics.addStatementsCount();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 28,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 3378,
        "startLineNumber" : 130,
        "startColumnNumber" : 73,
        "endLineNumber" : 201,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Object[] rowValues=values.get(rowIndex);\n  if (session.getProgressMonitor().isCanceled()) {\n    break;\n  }\n  boolean reuse=reuseStatement;\n  if (reuse) {\n    for (int i=0; i < rowValues.length; i++) {\n      nulls[i]=DBUtils.isNullValue(rowValues[i]);\n    }\n    if (!Arrays.equals(prevNulls,nulls) && statementsInBatch > 0) {\n      reuse=false;\n    }\n    System.arraycopy(nulls,0,prevNulls,0,nulls.length);\n    if (!reuse && statementsInBatch > 0) {\n      if (actions == null) {\n        flushBatch(statistics,statement);\n      }\n      statement.close();\n      statement=null;\n      statementsInBatch=0;\n      reuse=true;\n    }\n  }\n  if (statement == null || !reuse) {\n    statement=prepareStatement(session,handlers,rowValues,options);\n    statistics.setQueryText(statement.getQueryString());\n    statistics.addStatementsCount();\n  }\n  try {\n    bindStatement(handlers,statement,rowValues);\n    if (actions == null) {\n      if (useBatch) {\n        statement.addToBatch();\n        statementsInBatch++;\n      }\n else {\n        long startTime=System.currentTimeMillis();\n        executeStatement(statistics,statement);\n        statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n        long rowCount=statement.getUpdateRowCount();\n        if (rowCount > 0) {\n          statistics.addRowsUpdated(rowCount);\n        }\n        if (keysReceiver != null) {\n          try {\n            readKeys(statement.getSession(),statement,keysReceiver);\n          }\n catch (          Exception e) {\n            log.warn(\"Error reading auto-generated keys\",e);\n          }\n        }\n      }\n    }\n else {\n      String queryString=formatQueryParameters(session,statement.getQueryString(),handlers,rowValues);\n      actions.add(new SQLDatabasePersistAction(\"Execute statement\",queryString));\n    }\n  }\n  finally {\n    if (!reuse) {\n      statement.close();\n    }\n    if (rowIndex > 0 && rowIndex % 100 == 0) {\n      session.getProgressMonitor().subTask(\"Save batch (\" + rowIndex + \" of \"+ values.size()+ \")\");\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 288,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3439,
        "startLineNumber" : 130,
        "startColumnNumber" : 12,
        "endLineNumber" : 201,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int rowIndex=0; rowIndex < values.size(); rowIndex++) {\n  Object[] rowValues=values.get(rowIndex);\n  if (session.getProgressMonitor().isCanceled()) {\n    break;\n  }\n  boolean reuse=reuseStatement;\n  if (reuse) {\n    for (int i=0; i < rowValues.length; i++) {\n      nulls[i]=DBUtils.isNullValue(rowValues[i]);\n    }\n    if (!Arrays.equals(prevNulls,nulls) && statementsInBatch > 0) {\n      reuse=false;\n    }\n    System.arraycopy(nulls,0,prevNulls,0,nulls.length);\n    if (!reuse && statementsInBatch > 0) {\n      if (actions == null) {\n        flushBatch(statistics,statement);\n      }\n      statement.close();\n      statement=null;\n      statementsInBatch=0;\n      reuse=true;\n    }\n  }\n  if (statement == null || !reuse) {\n    statement=prepareStatement(session,handlers,rowValues,options);\n    statistics.setQueryText(statement.getQueryString());\n    statistics.addStatementsCount();\n  }\n  try {\n    bindStatement(handlers,statement,rowValues);\n    if (actions == null) {\n      if (useBatch) {\n        statement.addToBatch();\n        statementsInBatch++;\n      }\n else {\n        long startTime=System.currentTimeMillis();\n        executeStatement(statistics,statement);\n        statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n        long rowCount=statement.getUpdateRowCount();\n        if (rowCount > 0) {\n          statistics.addRowsUpdated(rowCount);\n        }\n        if (keysReceiver != null) {\n          try {\n            readKeys(statement.getSession(),statement,keysReceiver);\n          }\n catch (          Exception e) {\n            log.warn(\"Error reading auto-generated keys\",e);\n          }\n        }\n      }\n    }\n else {\n      String queryString=formatQueryParameters(session,statement.getQueryString(),handlers,rowValues);\n      actions.add(new SQLDatabasePersistAction(\"Execute statement\",queryString));\n    }\n  }\n  finally {\n    if (!reuse) {\n      statement.close();\n    }\n    if (rowIndex > 0 && rowIndex % 100 == 0) {\n      session.getProgressMonitor().subTask(\"Save batch (\" + rowIndex + \" of \"+ values.size()+ \")\");\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 301,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 4326,
        "startLineNumber" : 120,
        "startColumnNumber" : 12,
        "endLineNumber" : 211,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  boolean[] prevNulls=new boolean[attributes.length];\n  boolean[] nulls=new boolean[attributes.length];\n  int statementsInBatch=0;\n  for (int rowIndex=0; rowIndex < values.size(); rowIndex++) {\n    Object[] rowValues=values.get(rowIndex);\n    if (session.getProgressMonitor().isCanceled()) {\n      break;\n    }\n    boolean reuse=reuseStatement;\n    if (reuse) {\n      for (int i=0; i < rowValues.length; i++) {\n        nulls[i]=DBUtils.isNullValue(rowValues[i]);\n      }\n      if (!Arrays.equals(prevNulls,nulls) && statementsInBatch > 0) {\n        reuse=false;\n      }\n      System.arraycopy(nulls,0,prevNulls,0,nulls.length);\n      if (!reuse && statementsInBatch > 0) {\n        if (actions == null) {\n          flushBatch(statistics,statement);\n        }\n        statement.close();\n        statement=null;\n        statementsInBatch=0;\n        reuse=true;\n      }\n    }\n    if (statement == null || !reuse) {\n      statement=prepareStatement(session,handlers,rowValues,options);\n      statistics.setQueryText(statement.getQueryString());\n      statistics.addStatementsCount();\n    }\n    try {\n      bindStatement(handlers,statement,rowValues);\n      if (actions == null) {\n        if (useBatch) {\n          statement.addToBatch();\n          statementsInBatch++;\n        }\n else {\n          long startTime=System.currentTimeMillis();\n          executeStatement(statistics,statement);\n          statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n          long rowCount=statement.getUpdateRowCount();\n          if (rowCount > 0) {\n            statistics.addRowsUpdated(rowCount);\n          }\n          if (keysReceiver != null) {\n            try {\n              readKeys(statement.getSession(),statement,keysReceiver);\n            }\n catch (            Exception e) {\n              log.warn(\"Error reading auto-generated keys\",e);\n            }\n          }\n        }\n      }\n else {\n        String queryString=formatQueryParameters(session,statement.getQueryString(),handlers,rowValues);\n        actions.add(new SQLDatabasePersistAction(\"Execute statement\",queryString));\n      }\n    }\n  finally {\n      if (!reuse) {\n        statement.close();\n      }\n      if (rowIndex > 0 && rowIndex % 100 == 0) {\n        session.getProgressMonitor().subTask(\"Save batch (\" + rowIndex + \" of \"+ values.size()+ \")\");\n      }\n    }\n  }\n  values.clear();\n  if (statementsInBatch > 0) {\n    if (actions == null) {\n      flushBatch(statistics,statement);\n    }\n    statement.close();\n    statement=null;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 360,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4550,
        "startLineNumber" : 120,
        "startColumnNumber" : 8,
        "endLineNumber" : 218,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  boolean[] prevNulls=new boolean[attributes.length];\n  boolean[] nulls=new boolean[attributes.length];\n  int statementsInBatch=0;\n  for (int rowIndex=0; rowIndex < values.size(); rowIndex++) {\n    Object[] rowValues=values.get(rowIndex);\n    if (session.getProgressMonitor().isCanceled()) {\n      break;\n    }\n    boolean reuse=reuseStatement;\n    if (reuse) {\n      for (int i=0; i < rowValues.length; i++) {\n        nulls[i]=DBUtils.isNullValue(rowValues[i]);\n      }\n      if (!Arrays.equals(prevNulls,nulls) && statementsInBatch > 0) {\n        reuse=false;\n      }\n      System.arraycopy(nulls,0,prevNulls,0,nulls.length);\n      if (!reuse && statementsInBatch > 0) {\n        if (actions == null) {\n          flushBatch(statistics,statement);\n        }\n        statement.close();\n        statement=null;\n        statementsInBatch=0;\n        reuse=true;\n      }\n    }\n    if (statement == null || !reuse) {\n      statement=prepareStatement(session,handlers,rowValues,options);\n      statistics.setQueryText(statement.getQueryString());\n      statistics.addStatementsCount();\n    }\n    try {\n      bindStatement(handlers,statement,rowValues);\n      if (actions == null) {\n        if (useBatch) {\n          statement.addToBatch();\n          statementsInBatch++;\n        }\n else {\n          long startTime=System.currentTimeMillis();\n          executeStatement(statistics,statement);\n          statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n          long rowCount=statement.getUpdateRowCount();\n          if (rowCount > 0) {\n            statistics.addRowsUpdated(rowCount);\n          }\n          if (keysReceiver != null) {\n            try {\n              readKeys(statement.getSession(),statement,keysReceiver);\n            }\n catch (            Exception e) {\n              log.warn(\"Error reading auto-generated keys\",e);\n            }\n          }\n        }\n      }\n else {\n        String queryString=formatQueryParameters(session,statement.getQueryString(),handlers,rowValues);\n        actions.add(new SQLDatabasePersistAction(\"Execute statement\",queryString));\n      }\n    }\n  finally {\n      if (!reuse) {\n        statement.close();\n      }\n      if (rowIndex > 0 && rowIndex % 100 == 0) {\n        session.getProgressMonitor().subTask(\"Save batch (\" + rowIndex + \" of \"+ values.size()+ \")\");\n      }\n    }\n  }\n  values.clear();\n  if (statementsInBatch > 0) {\n    if (actions == null) {\n      flushBatch(statistics,statement);\n    }\n    statement.close();\n    statement=null;\n  }\n}\n  finally {\n  if (reuseStatement && statement != null) {\n    statement.close();\n  }\n  if (!useBatch && !values.isEmpty()) {\n    values.clear();\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 386,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5535,
        "startLineNumber" : 100,
        "startColumnNumber" : 4,
        "endLineNumber" : 221,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  DBDValueHandler[] handlers=new DBDValueHandler[attributes.length];\n  for (int i=0; i < attributes.length; i++) {\n    if (attributes[i] instanceof DBDAttributeBinding) {\n      handlers[i]=((DBDAttributeBinding)attributes[i]).getValueHandler();\n    }\n else {\n      handlers[i]=DBUtils.findValueHandler(session,attributes[i]);\n    }\n  }\n  Object disableBatchesOption=options.get(DBSDataManipulator.OPTION_DISABLE_BATCHES);\n  boolean useBatch=session.getDataSource().getInfo().supportsBatchUpdates() && reuseStatement && (Boolean.FALSE.equals(disableBatchesOption) || disableBatchesOption == null);\n  if (values.size() <= 1) {\n    useBatch=false;\n  }\n  DBCStatistics statistics=new DBCStatistics();\n  DBCStatement statement=null;\n  try {\n    boolean[] prevNulls=new boolean[attributes.length];\n    boolean[] nulls=new boolean[attributes.length];\n    int statementsInBatch=0;\n    for (int rowIndex=0; rowIndex < values.size(); rowIndex++) {\n      Object[] rowValues=values.get(rowIndex);\n      if (session.getProgressMonitor().isCanceled()) {\n        break;\n      }\n      boolean reuse=reuseStatement;\n      if (reuse) {\n        for (int i=0; i < rowValues.length; i++) {\n          nulls[i]=DBUtils.isNullValue(rowValues[i]);\n        }\n        if (!Arrays.equals(prevNulls,nulls) && statementsInBatch > 0) {\n          reuse=false;\n        }\n        System.arraycopy(nulls,0,prevNulls,0,nulls.length);\n        if (!reuse && statementsInBatch > 0) {\n          if (actions == null) {\n            flushBatch(statistics,statement);\n          }\n          statement.close();\n          statement=null;\n          statementsInBatch=0;\n          reuse=true;\n        }\n      }\n      if (statement == null || !reuse) {\n        statement=prepareStatement(session,handlers,rowValues,options);\n        statistics.setQueryText(statement.getQueryString());\n        statistics.addStatementsCount();\n      }\n      try {\n        bindStatement(handlers,statement,rowValues);\n        if (actions == null) {\n          if (useBatch) {\n            statement.addToBatch();\n            statementsInBatch++;\n          }\n else {\n            long startTime=System.currentTimeMillis();\n            executeStatement(statistics,statement);\n            statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n            long rowCount=statement.getUpdateRowCount();\n            if (rowCount > 0) {\n              statistics.addRowsUpdated(rowCount);\n            }\n            if (keysReceiver != null) {\n              try {\n                readKeys(statement.getSession(),statement,keysReceiver);\n              }\n catch (              Exception e) {\n                log.warn(\"Error reading auto-generated keys\",e);\n              }\n            }\n          }\n        }\n else {\n          String queryString=formatQueryParameters(session,statement.getQueryString(),handlers,rowValues);\n          actions.add(new SQLDatabasePersistAction(\"Execute statement\",queryString));\n        }\n      }\n  finally {\n        if (!reuse) {\n          statement.close();\n        }\n        if (rowIndex > 0 && rowIndex % 100 == 0) {\n          session.getProgressMonitor().subTask(\"Save batch (\" + rowIndex + \" of \"+ values.size()+ \")\");\n        }\n      }\n    }\n    values.clear();\n    if (statementsInBatch > 0) {\n      if (actions == null) {\n        flushBatch(statistics,statement);\n      }\n      statement.close();\n      statement=null;\n    }\n  }\n  finally {\n    if (reuseStatement && statement != null) {\n      statement.close();\n    }\n    if (!useBatch && !values.isEmpty()) {\n      values.clear();\n    }\n  }\n  return statistics;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 513,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5973,
        "startLineNumber" : 90,
        "startColumnNumber" : 4,
        "endLineNumber" : 221,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Execute batch OR generate batch script.\n * @param session    session\n * @param actions    script actions. If not null then no execution will be done\n * @param options\n * @return execution statistics\n * @throws DBCException\n */\n@NotNull private DBCStatistics processBatch(@NotNull DBCSession session,@Nullable List<DBEPersistAction> actions,Map<String,Object> options) throws DBCException {\n  DBDValueHandler[] handlers=new DBDValueHandler[attributes.length];\n  for (int i=0; i < attributes.length; i++) {\n    if (attributes[i] instanceof DBDAttributeBinding) {\n      handlers[i]=((DBDAttributeBinding)attributes[i]).getValueHandler();\n    }\n else {\n      handlers[i]=DBUtils.findValueHandler(session,attributes[i]);\n    }\n  }\n  Object disableBatchesOption=options.get(DBSDataManipulator.OPTION_DISABLE_BATCHES);\n  boolean useBatch=session.getDataSource().getInfo().supportsBatchUpdates() && reuseStatement && (Boolean.FALSE.equals(disableBatchesOption) || disableBatchesOption == null);\n  if (values.size() <= 1) {\n    useBatch=false;\n  }\n  DBCStatistics statistics=new DBCStatistics();\n  DBCStatement statement=null;\n  try {\n    boolean[] prevNulls=new boolean[attributes.length];\n    boolean[] nulls=new boolean[attributes.length];\n    int statementsInBatch=0;\n    for (int rowIndex=0; rowIndex < values.size(); rowIndex++) {\n      Object[] rowValues=values.get(rowIndex);\n      if (session.getProgressMonitor().isCanceled()) {\n        break;\n      }\n      boolean reuse=reuseStatement;\n      if (reuse) {\n        for (int i=0; i < rowValues.length; i++) {\n          nulls[i]=DBUtils.isNullValue(rowValues[i]);\n        }\n        if (!Arrays.equals(prevNulls,nulls) && statementsInBatch > 0) {\n          reuse=false;\n        }\n        System.arraycopy(nulls,0,prevNulls,0,nulls.length);\n        if (!reuse && statementsInBatch > 0) {\n          if (actions == null) {\n            flushBatch(statistics,statement);\n          }\n          statement.close();\n          statement=null;\n          statementsInBatch=0;\n          reuse=true;\n        }\n      }\n      if (statement == null || !reuse) {\n        statement=prepareStatement(session,handlers,rowValues,options);\n        statistics.setQueryText(statement.getQueryString());\n        statistics.addStatementsCount();\n      }\n      try {\n        bindStatement(handlers,statement,rowValues);\n        if (actions == null) {\n          if (useBatch) {\n            statement.addToBatch();\n            statementsInBatch++;\n          }\n else {\n            long startTime=System.currentTimeMillis();\n            executeStatement(statistics,statement);\n            statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n            long rowCount=statement.getUpdateRowCount();\n            if (rowCount > 0) {\n              statistics.addRowsUpdated(rowCount);\n            }\n            if (keysReceiver != null) {\n              try {\n                readKeys(statement.getSession(),statement,keysReceiver);\n              }\n catch (              Exception e) {\n                log.warn(\"Error reading auto-generated keys\",e);\n              }\n            }\n          }\n        }\n else {\n          String queryString=formatQueryParameters(session,statement.getQueryString(),handlers,rowValues);\n          actions.add(new SQLDatabasePersistAction(\"Execute statement\",queryString));\n        }\n      }\n  finally {\n        if (!reuse) {\n          statement.close();\n        }\n        if (rowIndex > 0 && rowIndex % 100 == 0) {\n          session.getProgressMonitor().subTask(\"Save batch (\" + rowIndex + \" of \"+ values.size()+ \")\");\n        }\n      }\n    }\n    values.clear();\n    if (statementsInBatch > 0) {\n      if (actions == null) {\n        flushBatch(statistics,statement);\n      }\n      statement.close();\n      statement=null;\n    }\n  }\n  finally {\n    if (reuseStatement && statement != null) {\n      statement.close();\n    }\n    if (!useBatch && !values.isEmpty()) {\n      values.clear();\n    }\n  }\n  return statistics;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 547,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 156,
        "startColumnNumber" : 20,
        "endLineNumber" : 156,
        "endColumnNumber" : 88
      },
      "nodeContext" : "statement=prepareStatement(session,handlers,rowValues,options);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.Object[]"
  }, {
    "nodeContext" : "rowValues",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 161,
      "startColumnNumber" : 55,
      "endLineNumber" : 161,
      "endColumnNumber" : 64
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 161,
        "startColumnNumber" : 20,
        "endLineNumber" : 161,
        "endColumnNumber" : 65
      },
      "nodeContext" : "bindStatement(handlers,statement,rowValues)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 161,
        "startColumnNumber" : 20,
        "endLineNumber" : 161,
        "endColumnNumber" : 66
      },
      "nodeContext" : "bindStatement(handlers,statement,rowValues);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1657,
        "startLineNumber" : 160,
        "startColumnNumber" : 20,
        "endLineNumber" : 193,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  bindStatement(handlers,statement,rowValues);\n  if (actions == null) {\n    if (useBatch) {\n      statement.addToBatch();\n      statementsInBatch++;\n    }\n else {\n      long startTime=System.currentTimeMillis();\n      executeStatement(statistics,statement);\n      statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n      long rowCount=statement.getUpdateRowCount();\n      if (rowCount > 0) {\n        statistics.addRowsUpdated(rowCount);\n      }\n      if (keysReceiver != null) {\n        try {\n          readKeys(statement.getSession(),statement,keysReceiver);\n        }\n catch (        Exception e) {\n          log.warn(\"Error reading auto-generated keys\",e);\n        }\n      }\n    }\n  }\n else {\n    String queryString=formatQueryParameters(session,statement.getQueryString(),handlers,rowValues);\n    actions.add(new SQLDatabasePersistAction(\"Execute statement\",queryString));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 111,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1993,
        "startLineNumber" : 160,
        "startColumnNumber" : 16,
        "endLineNumber" : 200,
        "endColumnNumber" : 17
      },
      "nodeContext" : "try {\n  bindStatement(handlers,statement,rowValues);\n  if (actions == null) {\n    if (useBatch) {\n      statement.addToBatch();\n      statementsInBatch++;\n    }\n else {\n      long startTime=System.currentTimeMillis();\n      executeStatement(statistics,statement);\n      statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n      long rowCount=statement.getUpdateRowCount();\n      if (rowCount > 0) {\n        statistics.addRowsUpdated(rowCount);\n      }\n      if (keysReceiver != null) {\n        try {\n          readKeys(statement.getSession(),statement,keysReceiver);\n        }\n catch (        Exception e) {\n          log.warn(\"Error reading auto-generated keys\",e);\n        }\n      }\n    }\n  }\n else {\n    String queryString=formatQueryParameters(session,statement.getQueryString(),handlers,rowValues);\n    actions.add(new SQLDatabasePersistAction(\"Execute statement\",queryString));\n  }\n}\n  finally {\n  if (!reuse) {\n    statement.close();\n  }\n  if (rowIndex > 0 && rowIndex % 100 == 0) {\n    session.getProgressMonitor().subTask(\"Save batch (\" + rowIndex + \" of \"+ values.size()+ \")\");\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 146,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 3378,
        "startLineNumber" : 130,
        "startColumnNumber" : 73,
        "endLineNumber" : 201,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Object[] rowValues=values.get(rowIndex);\n  if (session.getProgressMonitor().isCanceled()) {\n    break;\n  }\n  boolean reuse=reuseStatement;\n  if (reuse) {\n    for (int i=0; i < rowValues.length; i++) {\n      nulls[i]=DBUtils.isNullValue(rowValues[i]);\n    }\n    if (!Arrays.equals(prevNulls,nulls) && statementsInBatch > 0) {\n      reuse=false;\n    }\n    System.arraycopy(nulls,0,prevNulls,0,nulls.length);\n    if (!reuse && statementsInBatch > 0) {\n      if (actions == null) {\n        flushBatch(statistics,statement);\n      }\n      statement.close();\n      statement=null;\n      statementsInBatch=0;\n      reuse=true;\n    }\n  }\n  if (statement == null || !reuse) {\n    statement=prepareStatement(session,handlers,rowValues,options);\n    statistics.setQueryText(statement.getQueryString());\n    statistics.addStatementsCount();\n  }\n  try {\n    bindStatement(handlers,statement,rowValues);\n    if (actions == null) {\n      if (useBatch) {\n        statement.addToBatch();\n        statementsInBatch++;\n      }\n else {\n        long startTime=System.currentTimeMillis();\n        executeStatement(statistics,statement);\n        statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n        long rowCount=statement.getUpdateRowCount();\n        if (rowCount > 0) {\n          statistics.addRowsUpdated(rowCount);\n        }\n        if (keysReceiver != null) {\n          try {\n            readKeys(statement.getSession(),statement,keysReceiver);\n          }\n catch (          Exception e) {\n            log.warn(\"Error reading auto-generated keys\",e);\n          }\n        }\n      }\n    }\n else {\n      String queryString=formatQueryParameters(session,statement.getQueryString(),handlers,rowValues);\n      actions.add(new SQLDatabasePersistAction(\"Execute statement\",queryString));\n    }\n  }\n  finally {\n    if (!reuse) {\n      statement.close();\n    }\n    if (rowIndex > 0 && rowIndex % 100 == 0) {\n      session.getProgressMonitor().subTask(\"Save batch (\" + rowIndex + \" of \"+ values.size()+ \")\");\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 288,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3439,
        "startLineNumber" : 130,
        "startColumnNumber" : 12,
        "endLineNumber" : 201,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int rowIndex=0; rowIndex < values.size(); rowIndex++) {\n  Object[] rowValues=values.get(rowIndex);\n  if (session.getProgressMonitor().isCanceled()) {\n    break;\n  }\n  boolean reuse=reuseStatement;\n  if (reuse) {\n    for (int i=0; i < rowValues.length; i++) {\n      nulls[i]=DBUtils.isNullValue(rowValues[i]);\n    }\n    if (!Arrays.equals(prevNulls,nulls) && statementsInBatch > 0) {\n      reuse=false;\n    }\n    System.arraycopy(nulls,0,prevNulls,0,nulls.length);\n    if (!reuse && statementsInBatch > 0) {\n      if (actions == null) {\n        flushBatch(statistics,statement);\n      }\n      statement.close();\n      statement=null;\n      statementsInBatch=0;\n      reuse=true;\n    }\n  }\n  if (statement == null || !reuse) {\n    statement=prepareStatement(session,handlers,rowValues,options);\n    statistics.setQueryText(statement.getQueryString());\n    statistics.addStatementsCount();\n  }\n  try {\n    bindStatement(handlers,statement,rowValues);\n    if (actions == null) {\n      if (useBatch) {\n        statement.addToBatch();\n        statementsInBatch++;\n      }\n else {\n        long startTime=System.currentTimeMillis();\n        executeStatement(statistics,statement);\n        statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n        long rowCount=statement.getUpdateRowCount();\n        if (rowCount > 0) {\n          statistics.addRowsUpdated(rowCount);\n        }\n        if (keysReceiver != null) {\n          try {\n            readKeys(statement.getSession(),statement,keysReceiver);\n          }\n catch (          Exception e) {\n            log.warn(\"Error reading auto-generated keys\",e);\n          }\n        }\n      }\n    }\n else {\n      String queryString=formatQueryParameters(session,statement.getQueryString(),handlers,rowValues);\n      actions.add(new SQLDatabasePersistAction(\"Execute statement\",queryString));\n    }\n  }\n  finally {\n    if (!reuse) {\n      statement.close();\n    }\n    if (rowIndex > 0 && rowIndex % 100 == 0) {\n      session.getProgressMonitor().subTask(\"Save batch (\" + rowIndex + \" of \"+ values.size()+ \")\");\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 301,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 4326,
        "startLineNumber" : 120,
        "startColumnNumber" : 12,
        "endLineNumber" : 211,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  boolean[] prevNulls=new boolean[attributes.length];\n  boolean[] nulls=new boolean[attributes.length];\n  int statementsInBatch=0;\n  for (int rowIndex=0; rowIndex < values.size(); rowIndex++) {\n    Object[] rowValues=values.get(rowIndex);\n    if (session.getProgressMonitor().isCanceled()) {\n      break;\n    }\n    boolean reuse=reuseStatement;\n    if (reuse) {\n      for (int i=0; i < rowValues.length; i++) {\n        nulls[i]=DBUtils.isNullValue(rowValues[i]);\n      }\n      if (!Arrays.equals(prevNulls,nulls) && statementsInBatch > 0) {\n        reuse=false;\n      }\n      System.arraycopy(nulls,0,prevNulls,0,nulls.length);\n      if (!reuse && statementsInBatch > 0) {\n        if (actions == null) {\n          flushBatch(statistics,statement);\n        }\n        statement.close();\n        statement=null;\n        statementsInBatch=0;\n        reuse=true;\n      }\n    }\n    if (statement == null || !reuse) {\n      statement=prepareStatement(session,handlers,rowValues,options);\n      statistics.setQueryText(statement.getQueryString());\n      statistics.addStatementsCount();\n    }\n    try {\n      bindStatement(handlers,statement,rowValues);\n      if (actions == null) {\n        if (useBatch) {\n          statement.addToBatch();\n          statementsInBatch++;\n        }\n else {\n          long startTime=System.currentTimeMillis();\n          executeStatement(statistics,statement);\n          statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n          long rowCount=statement.getUpdateRowCount();\n          if (rowCount > 0) {\n            statistics.addRowsUpdated(rowCount);\n          }\n          if (keysReceiver != null) {\n            try {\n              readKeys(statement.getSession(),statement,keysReceiver);\n            }\n catch (            Exception e) {\n              log.warn(\"Error reading auto-generated keys\",e);\n            }\n          }\n        }\n      }\n else {\n        String queryString=formatQueryParameters(session,statement.getQueryString(),handlers,rowValues);\n        actions.add(new SQLDatabasePersistAction(\"Execute statement\",queryString));\n      }\n    }\n  finally {\n      if (!reuse) {\n        statement.close();\n      }\n      if (rowIndex > 0 && rowIndex % 100 == 0) {\n        session.getProgressMonitor().subTask(\"Save batch (\" + rowIndex + \" of \"+ values.size()+ \")\");\n      }\n    }\n  }\n  values.clear();\n  if (statementsInBatch > 0) {\n    if (actions == null) {\n      flushBatch(statistics,statement);\n    }\n    statement.close();\n    statement=null;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 360,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4550,
        "startLineNumber" : 120,
        "startColumnNumber" : 8,
        "endLineNumber" : 218,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  boolean[] prevNulls=new boolean[attributes.length];\n  boolean[] nulls=new boolean[attributes.length];\n  int statementsInBatch=0;\n  for (int rowIndex=0; rowIndex < values.size(); rowIndex++) {\n    Object[] rowValues=values.get(rowIndex);\n    if (session.getProgressMonitor().isCanceled()) {\n      break;\n    }\n    boolean reuse=reuseStatement;\n    if (reuse) {\n      for (int i=0; i < rowValues.length; i++) {\n        nulls[i]=DBUtils.isNullValue(rowValues[i]);\n      }\n      if (!Arrays.equals(prevNulls,nulls) && statementsInBatch > 0) {\n        reuse=false;\n      }\n      System.arraycopy(nulls,0,prevNulls,0,nulls.length);\n      if (!reuse && statementsInBatch > 0) {\n        if (actions == null) {\n          flushBatch(statistics,statement);\n        }\n        statement.close();\n        statement=null;\n        statementsInBatch=0;\n        reuse=true;\n      }\n    }\n    if (statement == null || !reuse) {\n      statement=prepareStatement(session,handlers,rowValues,options);\n      statistics.setQueryText(statement.getQueryString());\n      statistics.addStatementsCount();\n    }\n    try {\n      bindStatement(handlers,statement,rowValues);\n      if (actions == null) {\n        if (useBatch) {\n          statement.addToBatch();\n          statementsInBatch++;\n        }\n else {\n          long startTime=System.currentTimeMillis();\n          executeStatement(statistics,statement);\n          statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n          long rowCount=statement.getUpdateRowCount();\n          if (rowCount > 0) {\n            statistics.addRowsUpdated(rowCount);\n          }\n          if (keysReceiver != null) {\n            try {\n              readKeys(statement.getSession(),statement,keysReceiver);\n            }\n catch (            Exception e) {\n              log.warn(\"Error reading auto-generated keys\",e);\n            }\n          }\n        }\n      }\n else {\n        String queryString=formatQueryParameters(session,statement.getQueryString(),handlers,rowValues);\n        actions.add(new SQLDatabasePersistAction(\"Execute statement\",queryString));\n      }\n    }\n  finally {\n      if (!reuse) {\n        statement.close();\n      }\n      if (rowIndex > 0 && rowIndex % 100 == 0) {\n        session.getProgressMonitor().subTask(\"Save batch (\" + rowIndex + \" of \"+ values.size()+ \")\");\n      }\n    }\n  }\n  values.clear();\n  if (statementsInBatch > 0) {\n    if (actions == null) {\n      flushBatch(statistics,statement);\n    }\n    statement.close();\n    statement=null;\n  }\n}\n  finally {\n  if (reuseStatement && statement != null) {\n    statement.close();\n  }\n  if (!useBatch && !values.isEmpty()) {\n    values.clear();\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 386,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5535,
        "startLineNumber" : 100,
        "startColumnNumber" : 4,
        "endLineNumber" : 221,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  DBDValueHandler[] handlers=new DBDValueHandler[attributes.length];\n  for (int i=0; i < attributes.length; i++) {\n    if (attributes[i] instanceof DBDAttributeBinding) {\n      handlers[i]=((DBDAttributeBinding)attributes[i]).getValueHandler();\n    }\n else {\n      handlers[i]=DBUtils.findValueHandler(session,attributes[i]);\n    }\n  }\n  Object disableBatchesOption=options.get(DBSDataManipulator.OPTION_DISABLE_BATCHES);\n  boolean useBatch=session.getDataSource().getInfo().supportsBatchUpdates() && reuseStatement && (Boolean.FALSE.equals(disableBatchesOption) || disableBatchesOption == null);\n  if (values.size() <= 1) {\n    useBatch=false;\n  }\n  DBCStatistics statistics=new DBCStatistics();\n  DBCStatement statement=null;\n  try {\n    boolean[] prevNulls=new boolean[attributes.length];\n    boolean[] nulls=new boolean[attributes.length];\n    int statementsInBatch=0;\n    for (int rowIndex=0; rowIndex < values.size(); rowIndex++) {\n      Object[] rowValues=values.get(rowIndex);\n      if (session.getProgressMonitor().isCanceled()) {\n        break;\n      }\n      boolean reuse=reuseStatement;\n      if (reuse) {\n        for (int i=0; i < rowValues.length; i++) {\n          nulls[i]=DBUtils.isNullValue(rowValues[i]);\n        }\n        if (!Arrays.equals(prevNulls,nulls) && statementsInBatch > 0) {\n          reuse=false;\n        }\n        System.arraycopy(nulls,0,prevNulls,0,nulls.length);\n        if (!reuse && statementsInBatch > 0) {\n          if (actions == null) {\n            flushBatch(statistics,statement);\n          }\n          statement.close();\n          statement=null;\n          statementsInBatch=0;\n          reuse=true;\n        }\n      }\n      if (statement == null || !reuse) {\n        statement=prepareStatement(session,handlers,rowValues,options);\n        statistics.setQueryText(statement.getQueryString());\n        statistics.addStatementsCount();\n      }\n      try {\n        bindStatement(handlers,statement,rowValues);\n        if (actions == null) {\n          if (useBatch) {\n            statement.addToBatch();\n            statementsInBatch++;\n          }\n else {\n            long startTime=System.currentTimeMillis();\n            executeStatement(statistics,statement);\n            statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n            long rowCount=statement.getUpdateRowCount();\n            if (rowCount > 0) {\n              statistics.addRowsUpdated(rowCount);\n            }\n            if (keysReceiver != null) {\n              try {\n                readKeys(statement.getSession(),statement,keysReceiver);\n              }\n catch (              Exception e) {\n                log.warn(\"Error reading auto-generated keys\",e);\n              }\n            }\n          }\n        }\n else {\n          String queryString=formatQueryParameters(session,statement.getQueryString(),handlers,rowValues);\n          actions.add(new SQLDatabasePersistAction(\"Execute statement\",queryString));\n        }\n      }\n  finally {\n        if (!reuse) {\n          statement.close();\n        }\n        if (rowIndex > 0 && rowIndex % 100 == 0) {\n          session.getProgressMonitor().subTask(\"Save batch (\" + rowIndex + \" of \"+ values.size()+ \")\");\n        }\n      }\n    }\n    values.clear();\n    if (statementsInBatch > 0) {\n      if (actions == null) {\n        flushBatch(statistics,statement);\n      }\n      statement.close();\n      statement=null;\n    }\n  }\n  finally {\n    if (reuseStatement && statement != null) {\n      statement.close();\n    }\n    if (!useBatch && !values.isEmpty()) {\n      values.clear();\n    }\n  }\n  return statistics;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 513,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5973,
        "startLineNumber" : 90,
        "startColumnNumber" : 4,
        "endLineNumber" : 221,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Execute batch OR generate batch script.\n * @param session    session\n * @param actions    script actions. If not null then no execution will be done\n * @param options\n * @return execution statistics\n * @throws DBCException\n */\n@NotNull private DBCStatistics processBatch(@NotNull DBCSession session,@Nullable List<DBEPersistAction> actions,Map<String,Object> options) throws DBCException {\n  DBDValueHandler[] handlers=new DBDValueHandler[attributes.length];\n  for (int i=0; i < attributes.length; i++) {\n    if (attributes[i] instanceof DBDAttributeBinding) {\n      handlers[i]=((DBDAttributeBinding)attributes[i]).getValueHandler();\n    }\n else {\n      handlers[i]=DBUtils.findValueHandler(session,attributes[i]);\n    }\n  }\n  Object disableBatchesOption=options.get(DBSDataManipulator.OPTION_DISABLE_BATCHES);\n  boolean useBatch=session.getDataSource().getInfo().supportsBatchUpdates() && reuseStatement && (Boolean.FALSE.equals(disableBatchesOption) || disableBatchesOption == null);\n  if (values.size() <= 1) {\n    useBatch=false;\n  }\n  DBCStatistics statistics=new DBCStatistics();\n  DBCStatement statement=null;\n  try {\n    boolean[] prevNulls=new boolean[attributes.length];\n    boolean[] nulls=new boolean[attributes.length];\n    int statementsInBatch=0;\n    for (int rowIndex=0; rowIndex < values.size(); rowIndex++) {\n      Object[] rowValues=values.get(rowIndex);\n      if (session.getProgressMonitor().isCanceled()) {\n        break;\n      }\n      boolean reuse=reuseStatement;\n      if (reuse) {\n        for (int i=0; i < rowValues.length; i++) {\n          nulls[i]=DBUtils.isNullValue(rowValues[i]);\n        }\n        if (!Arrays.equals(prevNulls,nulls) && statementsInBatch > 0) {\n          reuse=false;\n        }\n        System.arraycopy(nulls,0,prevNulls,0,nulls.length);\n        if (!reuse && statementsInBatch > 0) {\n          if (actions == null) {\n            flushBatch(statistics,statement);\n          }\n          statement.close();\n          statement=null;\n          statementsInBatch=0;\n          reuse=true;\n        }\n      }\n      if (statement == null || !reuse) {\n        statement=prepareStatement(session,handlers,rowValues,options);\n        statistics.setQueryText(statement.getQueryString());\n        statistics.addStatementsCount();\n      }\n      try {\n        bindStatement(handlers,statement,rowValues);\n        if (actions == null) {\n          if (useBatch) {\n            statement.addToBatch();\n            statementsInBatch++;\n          }\n else {\n            long startTime=System.currentTimeMillis();\n            executeStatement(statistics,statement);\n            statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n            long rowCount=statement.getUpdateRowCount();\n            if (rowCount > 0) {\n              statistics.addRowsUpdated(rowCount);\n            }\n            if (keysReceiver != null) {\n              try {\n                readKeys(statement.getSession(),statement,keysReceiver);\n              }\n catch (              Exception e) {\n                log.warn(\"Error reading auto-generated keys\",e);\n              }\n            }\n          }\n        }\n else {\n          String queryString=formatQueryParameters(session,statement.getQueryString(),handlers,rowValues);\n          actions.add(new SQLDatabasePersistAction(\"Execute statement\",queryString));\n        }\n      }\n  finally {\n        if (!reuse) {\n          statement.close();\n        }\n        if (rowIndex > 0 && rowIndex % 100 == 0) {\n          session.getProgressMonitor().subTask(\"Save batch (\" + rowIndex + \" of \"+ values.size()+ \")\");\n        }\n      }\n    }\n    values.clear();\n    if (statementsInBatch > 0) {\n      if (actions == null) {\n        flushBatch(statistics,statement);\n      }\n      statement.close();\n      statement=null;\n    }\n  }\n  finally {\n    if (reuseStatement && statement != null) {\n      statement.close();\n    }\n    if (!useBatch && !values.isEmpty()) {\n      values.clear();\n    }\n  }\n  return statistics;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 547,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 161,
        "startColumnNumber" : 20,
        "endLineNumber" : 161,
        "endColumnNumber" : 66
      },
      "nodeContext" : "bindStatement(handlers,statement,rowValues);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.Object[]"
  }, {
    "nodeContext" : "rowValues",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 187,
      "startColumnNumber" : 114,
      "endLineNumber" : 187,
      "endColumnNumber" : 123
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 79,
        "startLineNumber" : 187,
        "startColumnNumber" : 45,
        "endLineNumber" : 187,
        "endColumnNumber" : 124
      },
      "nodeContext" : "formatQueryParameters(session,statement.getQueryString(),handlers,rowValues)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 187,
        "startColumnNumber" : 31,
        "endLineNumber" : 187,
        "endColumnNumber" : 124
      },
      "nodeContext" : "queryString=formatQueryParameters(session,statement.getQueryString(),handlers,rowValues)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 101,
        "startLineNumber" : 187,
        "startColumnNumber" : 24,
        "endLineNumber" : 187,
        "endColumnNumber" : 125
      },
      "nodeContext" : "String queryString=formatQueryParameters(session,statement.getQueryString(),handlers,rowValues);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 344,
        "startLineNumber" : 186,
        "startColumnNumber" : 27,
        "endLineNumber" : 192,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  String queryString=formatQueryParameters(session,statement.getQueryString(),handlers,rowValues);\n  actions.add(new SQLDatabasePersistAction(\"Execute statement\",queryString));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 23,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1550,
        "startLineNumber" : 162,
        "startColumnNumber" : 20,
        "endLineNumber" : 192,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (actions == null) {\n  if (useBatch) {\n    statement.addToBatch();\n    statementsInBatch++;\n  }\n else {\n    long startTime=System.currentTimeMillis();\n    executeStatement(statistics,statement);\n    statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n    long rowCount=statement.getUpdateRowCount();\n    if (rowCount > 0) {\n      statistics.addRowsUpdated(rowCount);\n    }\n    if (keysReceiver != null) {\n      try {\n        readKeys(statement.getSession(),statement,keysReceiver);\n      }\n catch (      Exception e) {\n        log.warn(\"Error reading auto-generated keys\",e);\n      }\n    }\n  }\n}\n else {\n  String queryString=formatQueryParameters(session,statement.getQueryString(),handlers,rowValues);\n  actions.add(new SQLDatabasePersistAction(\"Execute statement\",queryString));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 104,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1657,
        "startLineNumber" : 160,
        "startColumnNumber" : 20,
        "endLineNumber" : 193,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  bindStatement(handlers,statement,rowValues);\n  if (actions == null) {\n    if (useBatch) {\n      statement.addToBatch();\n      statementsInBatch++;\n    }\n else {\n      long startTime=System.currentTimeMillis();\n      executeStatement(statistics,statement);\n      statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n      long rowCount=statement.getUpdateRowCount();\n      if (rowCount > 0) {\n        statistics.addRowsUpdated(rowCount);\n      }\n      if (keysReceiver != null) {\n        try {\n          readKeys(statement.getSession(),statement,keysReceiver);\n        }\n catch (        Exception e) {\n          log.warn(\"Error reading auto-generated keys\",e);\n        }\n      }\n    }\n  }\n else {\n    String queryString=formatQueryParameters(session,statement.getQueryString(),handlers,rowValues);\n    actions.add(new SQLDatabasePersistAction(\"Execute statement\",queryString));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 111,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1993,
        "startLineNumber" : 160,
        "startColumnNumber" : 16,
        "endLineNumber" : 200,
        "endColumnNumber" : 17
      },
      "nodeContext" : "try {\n  bindStatement(handlers,statement,rowValues);\n  if (actions == null) {\n    if (useBatch) {\n      statement.addToBatch();\n      statementsInBatch++;\n    }\n else {\n      long startTime=System.currentTimeMillis();\n      executeStatement(statistics,statement);\n      statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n      long rowCount=statement.getUpdateRowCount();\n      if (rowCount > 0) {\n        statistics.addRowsUpdated(rowCount);\n      }\n      if (keysReceiver != null) {\n        try {\n          readKeys(statement.getSession(),statement,keysReceiver);\n        }\n catch (        Exception e) {\n          log.warn(\"Error reading auto-generated keys\",e);\n        }\n      }\n    }\n  }\n else {\n    String queryString=formatQueryParameters(session,statement.getQueryString(),handlers,rowValues);\n    actions.add(new SQLDatabasePersistAction(\"Execute statement\",queryString));\n  }\n}\n  finally {\n  if (!reuse) {\n    statement.close();\n  }\n  if (rowIndex > 0 && rowIndex % 100 == 0) {\n    session.getProgressMonitor().subTask(\"Save batch (\" + rowIndex + \" of \"+ values.size()+ \")\");\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 146,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 3378,
        "startLineNumber" : 130,
        "startColumnNumber" : 73,
        "endLineNumber" : 201,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Object[] rowValues=values.get(rowIndex);\n  if (session.getProgressMonitor().isCanceled()) {\n    break;\n  }\n  boolean reuse=reuseStatement;\n  if (reuse) {\n    for (int i=0; i < rowValues.length; i++) {\n      nulls[i]=DBUtils.isNullValue(rowValues[i]);\n    }\n    if (!Arrays.equals(prevNulls,nulls) && statementsInBatch > 0) {\n      reuse=false;\n    }\n    System.arraycopy(nulls,0,prevNulls,0,nulls.length);\n    if (!reuse && statementsInBatch > 0) {\n      if (actions == null) {\n        flushBatch(statistics,statement);\n      }\n      statement.close();\n      statement=null;\n      statementsInBatch=0;\n      reuse=true;\n    }\n  }\n  if (statement == null || !reuse) {\n    statement=prepareStatement(session,handlers,rowValues,options);\n    statistics.setQueryText(statement.getQueryString());\n    statistics.addStatementsCount();\n  }\n  try {\n    bindStatement(handlers,statement,rowValues);\n    if (actions == null) {\n      if (useBatch) {\n        statement.addToBatch();\n        statementsInBatch++;\n      }\n else {\n        long startTime=System.currentTimeMillis();\n        executeStatement(statistics,statement);\n        statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n        long rowCount=statement.getUpdateRowCount();\n        if (rowCount > 0) {\n          statistics.addRowsUpdated(rowCount);\n        }\n        if (keysReceiver != null) {\n          try {\n            readKeys(statement.getSession(),statement,keysReceiver);\n          }\n catch (          Exception e) {\n            log.warn(\"Error reading auto-generated keys\",e);\n          }\n        }\n      }\n    }\n else {\n      String queryString=formatQueryParameters(session,statement.getQueryString(),handlers,rowValues);\n      actions.add(new SQLDatabasePersistAction(\"Execute statement\",queryString));\n    }\n  }\n  finally {\n    if (!reuse) {\n      statement.close();\n    }\n    if (rowIndex > 0 && rowIndex % 100 == 0) {\n      session.getProgressMonitor().subTask(\"Save batch (\" + rowIndex + \" of \"+ values.size()+ \")\");\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 288,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3439,
        "startLineNumber" : 130,
        "startColumnNumber" : 12,
        "endLineNumber" : 201,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int rowIndex=0; rowIndex < values.size(); rowIndex++) {\n  Object[] rowValues=values.get(rowIndex);\n  if (session.getProgressMonitor().isCanceled()) {\n    break;\n  }\n  boolean reuse=reuseStatement;\n  if (reuse) {\n    for (int i=0; i < rowValues.length; i++) {\n      nulls[i]=DBUtils.isNullValue(rowValues[i]);\n    }\n    if (!Arrays.equals(prevNulls,nulls) && statementsInBatch > 0) {\n      reuse=false;\n    }\n    System.arraycopy(nulls,0,prevNulls,0,nulls.length);\n    if (!reuse && statementsInBatch > 0) {\n      if (actions == null) {\n        flushBatch(statistics,statement);\n      }\n      statement.close();\n      statement=null;\n      statementsInBatch=0;\n      reuse=true;\n    }\n  }\n  if (statement == null || !reuse) {\n    statement=prepareStatement(session,handlers,rowValues,options);\n    statistics.setQueryText(statement.getQueryString());\n    statistics.addStatementsCount();\n  }\n  try {\n    bindStatement(handlers,statement,rowValues);\n    if (actions == null) {\n      if (useBatch) {\n        statement.addToBatch();\n        statementsInBatch++;\n      }\n else {\n        long startTime=System.currentTimeMillis();\n        executeStatement(statistics,statement);\n        statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n        long rowCount=statement.getUpdateRowCount();\n        if (rowCount > 0) {\n          statistics.addRowsUpdated(rowCount);\n        }\n        if (keysReceiver != null) {\n          try {\n            readKeys(statement.getSession(),statement,keysReceiver);\n          }\n catch (          Exception e) {\n            log.warn(\"Error reading auto-generated keys\",e);\n          }\n        }\n      }\n    }\n else {\n      String queryString=formatQueryParameters(session,statement.getQueryString(),handlers,rowValues);\n      actions.add(new SQLDatabasePersistAction(\"Execute statement\",queryString));\n    }\n  }\n  finally {\n    if (!reuse) {\n      statement.close();\n    }\n    if (rowIndex > 0 && rowIndex % 100 == 0) {\n      session.getProgressMonitor().subTask(\"Save batch (\" + rowIndex + \" of \"+ values.size()+ \")\");\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 301,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 4326,
        "startLineNumber" : 120,
        "startColumnNumber" : 12,
        "endLineNumber" : 211,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  boolean[] prevNulls=new boolean[attributes.length];\n  boolean[] nulls=new boolean[attributes.length];\n  int statementsInBatch=0;\n  for (int rowIndex=0; rowIndex < values.size(); rowIndex++) {\n    Object[] rowValues=values.get(rowIndex);\n    if (session.getProgressMonitor().isCanceled()) {\n      break;\n    }\n    boolean reuse=reuseStatement;\n    if (reuse) {\n      for (int i=0; i < rowValues.length; i++) {\n        nulls[i]=DBUtils.isNullValue(rowValues[i]);\n      }\n      if (!Arrays.equals(prevNulls,nulls) && statementsInBatch > 0) {\n        reuse=false;\n      }\n      System.arraycopy(nulls,0,prevNulls,0,nulls.length);\n      if (!reuse && statementsInBatch > 0) {\n        if (actions == null) {\n          flushBatch(statistics,statement);\n        }\n        statement.close();\n        statement=null;\n        statementsInBatch=0;\n        reuse=true;\n      }\n    }\n    if (statement == null || !reuse) {\n      statement=prepareStatement(session,handlers,rowValues,options);\n      statistics.setQueryText(statement.getQueryString());\n      statistics.addStatementsCount();\n    }\n    try {\n      bindStatement(handlers,statement,rowValues);\n      if (actions == null) {\n        if (useBatch) {\n          statement.addToBatch();\n          statementsInBatch++;\n        }\n else {\n          long startTime=System.currentTimeMillis();\n          executeStatement(statistics,statement);\n          statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n          long rowCount=statement.getUpdateRowCount();\n          if (rowCount > 0) {\n            statistics.addRowsUpdated(rowCount);\n          }\n          if (keysReceiver != null) {\n            try {\n              readKeys(statement.getSession(),statement,keysReceiver);\n            }\n catch (            Exception e) {\n              log.warn(\"Error reading auto-generated keys\",e);\n            }\n          }\n        }\n      }\n else {\n        String queryString=formatQueryParameters(session,statement.getQueryString(),handlers,rowValues);\n        actions.add(new SQLDatabasePersistAction(\"Execute statement\",queryString));\n      }\n    }\n  finally {\n      if (!reuse) {\n        statement.close();\n      }\n      if (rowIndex > 0 && rowIndex % 100 == 0) {\n        session.getProgressMonitor().subTask(\"Save batch (\" + rowIndex + \" of \"+ values.size()+ \")\");\n      }\n    }\n  }\n  values.clear();\n  if (statementsInBatch > 0) {\n    if (actions == null) {\n      flushBatch(statistics,statement);\n    }\n    statement.close();\n    statement=null;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 360,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4550,
        "startLineNumber" : 120,
        "startColumnNumber" : 8,
        "endLineNumber" : 218,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  boolean[] prevNulls=new boolean[attributes.length];\n  boolean[] nulls=new boolean[attributes.length];\n  int statementsInBatch=0;\n  for (int rowIndex=0; rowIndex < values.size(); rowIndex++) {\n    Object[] rowValues=values.get(rowIndex);\n    if (session.getProgressMonitor().isCanceled()) {\n      break;\n    }\n    boolean reuse=reuseStatement;\n    if (reuse) {\n      for (int i=0; i < rowValues.length; i++) {\n        nulls[i]=DBUtils.isNullValue(rowValues[i]);\n      }\n      if (!Arrays.equals(prevNulls,nulls) && statementsInBatch > 0) {\n        reuse=false;\n      }\n      System.arraycopy(nulls,0,prevNulls,0,nulls.length);\n      if (!reuse && statementsInBatch > 0) {\n        if (actions == null) {\n          flushBatch(statistics,statement);\n        }\n        statement.close();\n        statement=null;\n        statementsInBatch=0;\n        reuse=true;\n      }\n    }\n    if (statement == null || !reuse) {\n      statement=prepareStatement(session,handlers,rowValues,options);\n      statistics.setQueryText(statement.getQueryString());\n      statistics.addStatementsCount();\n    }\n    try {\n      bindStatement(handlers,statement,rowValues);\n      if (actions == null) {\n        if (useBatch) {\n          statement.addToBatch();\n          statementsInBatch++;\n        }\n else {\n          long startTime=System.currentTimeMillis();\n          executeStatement(statistics,statement);\n          statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n          long rowCount=statement.getUpdateRowCount();\n          if (rowCount > 0) {\n            statistics.addRowsUpdated(rowCount);\n          }\n          if (keysReceiver != null) {\n            try {\n              readKeys(statement.getSession(),statement,keysReceiver);\n            }\n catch (            Exception e) {\n              log.warn(\"Error reading auto-generated keys\",e);\n            }\n          }\n        }\n      }\n else {\n        String queryString=formatQueryParameters(session,statement.getQueryString(),handlers,rowValues);\n        actions.add(new SQLDatabasePersistAction(\"Execute statement\",queryString));\n      }\n    }\n  finally {\n      if (!reuse) {\n        statement.close();\n      }\n      if (rowIndex > 0 && rowIndex % 100 == 0) {\n        session.getProgressMonitor().subTask(\"Save batch (\" + rowIndex + \" of \"+ values.size()+ \")\");\n      }\n    }\n  }\n  values.clear();\n  if (statementsInBatch > 0) {\n    if (actions == null) {\n      flushBatch(statistics,statement);\n    }\n    statement.close();\n    statement=null;\n  }\n}\n  finally {\n  if (reuseStatement && statement != null) {\n    statement.close();\n  }\n  if (!useBatch && !values.isEmpty()) {\n    values.clear();\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 386,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5535,
        "startLineNumber" : 100,
        "startColumnNumber" : 4,
        "endLineNumber" : 221,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  DBDValueHandler[] handlers=new DBDValueHandler[attributes.length];\n  for (int i=0; i < attributes.length; i++) {\n    if (attributes[i] instanceof DBDAttributeBinding) {\n      handlers[i]=((DBDAttributeBinding)attributes[i]).getValueHandler();\n    }\n else {\n      handlers[i]=DBUtils.findValueHandler(session,attributes[i]);\n    }\n  }\n  Object disableBatchesOption=options.get(DBSDataManipulator.OPTION_DISABLE_BATCHES);\n  boolean useBatch=session.getDataSource().getInfo().supportsBatchUpdates() && reuseStatement && (Boolean.FALSE.equals(disableBatchesOption) || disableBatchesOption == null);\n  if (values.size() <= 1) {\n    useBatch=false;\n  }\n  DBCStatistics statistics=new DBCStatistics();\n  DBCStatement statement=null;\n  try {\n    boolean[] prevNulls=new boolean[attributes.length];\n    boolean[] nulls=new boolean[attributes.length];\n    int statementsInBatch=0;\n    for (int rowIndex=0; rowIndex < values.size(); rowIndex++) {\n      Object[] rowValues=values.get(rowIndex);\n      if (session.getProgressMonitor().isCanceled()) {\n        break;\n      }\n      boolean reuse=reuseStatement;\n      if (reuse) {\n        for (int i=0; i < rowValues.length; i++) {\n          nulls[i]=DBUtils.isNullValue(rowValues[i]);\n        }\n        if (!Arrays.equals(prevNulls,nulls) && statementsInBatch > 0) {\n          reuse=false;\n        }\n        System.arraycopy(nulls,0,prevNulls,0,nulls.length);\n        if (!reuse && statementsInBatch > 0) {\n          if (actions == null) {\n            flushBatch(statistics,statement);\n          }\n          statement.close();\n          statement=null;\n          statementsInBatch=0;\n          reuse=true;\n        }\n      }\n      if (statement == null || !reuse) {\n        statement=prepareStatement(session,handlers,rowValues,options);\n        statistics.setQueryText(statement.getQueryString());\n        statistics.addStatementsCount();\n      }\n      try {\n        bindStatement(handlers,statement,rowValues);\n        if (actions == null) {\n          if (useBatch) {\n            statement.addToBatch();\n            statementsInBatch++;\n          }\n else {\n            long startTime=System.currentTimeMillis();\n            executeStatement(statistics,statement);\n            statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n            long rowCount=statement.getUpdateRowCount();\n            if (rowCount > 0) {\n              statistics.addRowsUpdated(rowCount);\n            }\n            if (keysReceiver != null) {\n              try {\n                readKeys(statement.getSession(),statement,keysReceiver);\n              }\n catch (              Exception e) {\n                log.warn(\"Error reading auto-generated keys\",e);\n              }\n            }\n          }\n        }\n else {\n          String queryString=formatQueryParameters(session,statement.getQueryString(),handlers,rowValues);\n          actions.add(new SQLDatabasePersistAction(\"Execute statement\",queryString));\n        }\n      }\n  finally {\n        if (!reuse) {\n          statement.close();\n        }\n        if (rowIndex > 0 && rowIndex % 100 == 0) {\n          session.getProgressMonitor().subTask(\"Save batch (\" + rowIndex + \" of \"+ values.size()+ \")\");\n        }\n      }\n    }\n    values.clear();\n    if (statementsInBatch > 0) {\n      if (actions == null) {\n        flushBatch(statistics,statement);\n      }\n      statement.close();\n      statement=null;\n    }\n  }\n  finally {\n    if (reuseStatement && statement != null) {\n      statement.close();\n    }\n    if (!useBatch && !values.isEmpty()) {\n      values.clear();\n    }\n  }\n  return statistics;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 513,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5973,
        "startLineNumber" : 90,
        "startColumnNumber" : 4,
        "endLineNumber" : 221,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Execute batch OR generate batch script.\n * @param session    session\n * @param actions    script actions. If not null then no execution will be done\n * @param options\n * @return execution statistics\n * @throws DBCException\n */\n@NotNull private DBCStatistics processBatch(@NotNull DBCSession session,@Nullable List<DBEPersistAction> actions,Map<String,Object> options) throws DBCException {\n  DBDValueHandler[] handlers=new DBDValueHandler[attributes.length];\n  for (int i=0; i < attributes.length; i++) {\n    if (attributes[i] instanceof DBDAttributeBinding) {\n      handlers[i]=((DBDAttributeBinding)attributes[i]).getValueHandler();\n    }\n else {\n      handlers[i]=DBUtils.findValueHandler(session,attributes[i]);\n    }\n  }\n  Object disableBatchesOption=options.get(DBSDataManipulator.OPTION_DISABLE_BATCHES);\n  boolean useBatch=session.getDataSource().getInfo().supportsBatchUpdates() && reuseStatement && (Boolean.FALSE.equals(disableBatchesOption) || disableBatchesOption == null);\n  if (values.size() <= 1) {\n    useBatch=false;\n  }\n  DBCStatistics statistics=new DBCStatistics();\n  DBCStatement statement=null;\n  try {\n    boolean[] prevNulls=new boolean[attributes.length];\n    boolean[] nulls=new boolean[attributes.length];\n    int statementsInBatch=0;\n    for (int rowIndex=0; rowIndex < values.size(); rowIndex++) {\n      Object[] rowValues=values.get(rowIndex);\n      if (session.getProgressMonitor().isCanceled()) {\n        break;\n      }\n      boolean reuse=reuseStatement;\n      if (reuse) {\n        for (int i=0; i < rowValues.length; i++) {\n          nulls[i]=DBUtils.isNullValue(rowValues[i]);\n        }\n        if (!Arrays.equals(prevNulls,nulls) && statementsInBatch > 0) {\n          reuse=false;\n        }\n        System.arraycopy(nulls,0,prevNulls,0,nulls.length);\n        if (!reuse && statementsInBatch > 0) {\n          if (actions == null) {\n            flushBatch(statistics,statement);\n          }\n          statement.close();\n          statement=null;\n          statementsInBatch=0;\n          reuse=true;\n        }\n      }\n      if (statement == null || !reuse) {\n        statement=prepareStatement(session,handlers,rowValues,options);\n        statistics.setQueryText(statement.getQueryString());\n        statistics.addStatementsCount();\n      }\n      try {\n        bindStatement(handlers,statement,rowValues);\n        if (actions == null) {\n          if (useBatch) {\n            statement.addToBatch();\n            statementsInBatch++;\n          }\n else {\n            long startTime=System.currentTimeMillis();\n            executeStatement(statistics,statement);\n            statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n            long rowCount=statement.getUpdateRowCount();\n            if (rowCount > 0) {\n              statistics.addRowsUpdated(rowCount);\n            }\n            if (keysReceiver != null) {\n              try {\n                readKeys(statement.getSession(),statement,keysReceiver);\n              }\n catch (              Exception e) {\n                log.warn(\"Error reading auto-generated keys\",e);\n              }\n            }\n          }\n        }\n else {\n          String queryString=formatQueryParameters(session,statement.getQueryString(),handlers,rowValues);\n          actions.add(new SQLDatabasePersistAction(\"Execute statement\",queryString));\n        }\n      }\n  finally {\n        if (!reuse) {\n          statement.close();\n        }\n        if (rowIndex > 0 && rowIndex % 100 == 0) {\n          session.getProgressMonitor().subTask(\"Save batch (\" + rowIndex + \" of \"+ values.size()+ \")\");\n        }\n      }\n    }\n    values.clear();\n    if (statementsInBatch > 0) {\n      if (actions == null) {\n        flushBatch(statistics,statement);\n      }\n      statement.close();\n      statement=null;\n    }\n  }\n  finally {\n    if (reuseStatement && statement != null) {\n      statement.close();\n    }\n    if (!useBatch && !values.isEmpty()) {\n      values.clear();\n    }\n  }\n  return statistics;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 547,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 101,
        "startLineNumber" : 187,
        "startColumnNumber" : 24,
        "endLineNumber" : 187,
        "endColumnNumber" : 125
      },
      "nodeContext" : "String queryString=formatQueryParameters(session,statement.getQueryString(),handlers,rowValues);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.Object[]"
  } ],
  "positionList" : [ {
    "charLength" : 9,
    "startLineNumber" : 137,
    "startColumnNumber" : 40,
    "endLineNumber" : 137,
    "endColumnNumber" : 49
  }, {
    "charLength" : 9,
    "startLineNumber" : 138,
    "startColumnNumber" : 55,
    "endLineNumber" : 138,
    "endColumnNumber" : 64
  }, {
    "charLength" : 9,
    "startLineNumber" : 156,
    "startColumnNumber" : 68,
    "endLineNumber" : 156,
    "endColumnNumber" : 77
  }, {
    "charLength" : 9,
    "startLineNumber" : 161,
    "startColumnNumber" : 55,
    "endLineNumber" : 161,
    "endColumnNumber" : 64
  }, {
    "charLength" : 9,
    "startLineNumber" : 187,
    "startColumnNumber" : 114,
    "endLineNumber" : 187,
    "endColumnNumber" : 123
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 8
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 8
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 5
  } ]
}