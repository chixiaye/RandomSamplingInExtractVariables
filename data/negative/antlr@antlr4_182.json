{
  "id" : 182,
  "expression" : "\"    ;\"",
  "projectName" : "antlr@antlr4",
  "commitID" : "f2b93e550cd912be3973743d09206db98f4092c9",
  "filePath" : "/tool-testsuite/test/org/antlr/v4/test/tool/TestParserExec.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"    ;\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 121,
      "startColumnNumber" : 3,
      "endLineNumber" : 121,
      "endColumnNumber" : 10
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 255,
        "startLineNumber" : 113,
        "startColumnNumber" : 3,
        "endLineNumber" : 121,
        "endColumnNumber" : 10
      },
      "nodeContext" : "\"parser grammar ModeTagsParser;\\n\" + \"\\n\" + \"options { tokenVocab=ModeTagsLexer; } // use tokens from ModeTagsLexer.g4\\n\"+ \"\\n\"+ \"file: (tag | TEXT)* ;\\n\"+ \"\\n\"+ \"tag : '«' ID '»'\\n\"+ \"    | '«' '/' ID '»'\\n\"+ \"    ;\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 275,
        "startLineNumber" : 112,
        "startColumnNumber" : 9,
        "endLineNumber" : 121,
        "endColumnNumber" : 10
      },
      "nodeContext" : "parserGrammar=\"parser grammar ModeTagsParser;\\n\" + \"\\n\" + \"options { tokenVocab=ModeTagsLexer; } // use tokens from ModeTagsLexer.g4\\n\"+ \"\\n\"+ \"file: (tag | TEXT)* ;\\n\"+ \"\\n\"+ \"tag : '«' ID '»'\\n\"+ \"    | '«' '/' ID '»'\\n\"+ \"    ;\"",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 12,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 283,
        "startLineNumber" : 112,
        "startColumnNumber" : 2,
        "endLineNumber" : 121,
        "endColumnNumber" : 11
      },
      "nodeContext" : "String parserGrammar=\"parser grammar ModeTagsParser;\\n\" + \"\\n\" + \"options { tokenVocab=ModeTagsLexer; } // use tokens from ModeTagsLexer.g4\\n\"+ \"\\n\"+ \"file: (tag | TEXT)* ;\\n\"+ \"\\n\"+ \"tag : '«' ID '»'\\n\"+ \"    | '«' '/' ID '»'\\n\"+ \"    ;\";\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 15,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1179,
        "startLineNumber" : 100,
        "startColumnNumber" : 58,
        "endLineNumber" : 133,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  String lexerGrammar=\"lexer grammar ModeTagsLexer;\\n\" + \"\\n\" + \"// Default mode rules (the SEA)\\n\"+ \"OPEN  : '«'     -> mode(ISLAND) ;       // switch to ISLAND mode\\n\"+ \"TEXT  : ~'«'+ ;                         // clump all text together\\n\"+ \"\\n\"+ \"mode ISLAND;\\n\"+ \"CLOSE : '»'     -> mode(DEFAULT_MODE) ; // back to SEA mode \\n\"+ \"SLASH : '/' ;\\n\"+ \"ID    : [a-zA-Z]+ ;                     // match/send ID in tag to parser\\n\";\n  String parserGrammar=\"parser grammar ModeTagsParser;\\n\" + \"\\n\" + \"options { tokenVocab=ModeTagsLexer; } // use tokens from ModeTagsLexer.g4\\n\"+ \"\\n\"+ \"file: (tag | TEXT)* ;\\n\"+ \"\\n\"+ \"tag : '«' ID '»'\\n\"+ \"    | '«' '/' ID '»'\\n\"+ \"    ;\";\n  boolean success=rawGenerateAndBuildRecognizer(\"ModeTagsLexer.g4\",lexerGrammar,null,\"ModeTagsLexer\");\n  assertTrue(success);\n  String found=execParser(\"ModeTagsParser.g4\",parserGrammar,\"ModeTagsParser\",\"ModeTagsLexer\",null,null,\"file\",\"\",false);\n  assertEquals(null,found);\n  assertNull(getParseErrors());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 72,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1448,
        "startLineNumber" : 94,
        "startColumnNumber" : 1,
        "endLineNumber" : 133,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * This is a regression test for antlr/antlr4#563 \"Inconsistent token handling in ANTLR4\". https://github.com/antlr/antlr4/issues/563\n */\n@Test public void testAlternateQuotes() throws Exception {\n  String lexerGrammar=\"lexer grammar ModeTagsLexer;\\n\" + \"\\n\" + \"// Default mode rules (the SEA)\\n\"+ \"OPEN  : '«'     -> mode(ISLAND) ;       // switch to ISLAND mode\\n\"+ \"TEXT  : ~'«'+ ;                         // clump all text together\\n\"+ \"\\n\"+ \"mode ISLAND;\\n\"+ \"CLOSE : '»'     -> mode(DEFAULT_MODE) ; // back to SEA mode \\n\"+ \"SLASH : '/' ;\\n\"+ \"ID    : [a-zA-Z]+ ;                     // match/send ID in tag to parser\\n\";\n  String parserGrammar=\"parser grammar ModeTagsParser;\\n\" + \"\\n\" + \"options { tokenVocab=ModeTagsLexer; } // use tokens from ModeTagsLexer.g4\\n\"+ \"\\n\"+ \"file: (tag | TEXT)* ;\\n\"+ \"\\n\"+ \"tag : '«' ID '»'\\n\"+ \"    | '«' '/' ID '»'\\n\"+ \"    ;\";\n  boolean success=rawGenerateAndBuildRecognizer(\"ModeTagsLexer.g4\",lexerGrammar,null,\"ModeTagsLexer\");\n  assertTrue(success);\n  String found=execParser(\"ModeTagsParser.g4\",parserGrammar,\"ModeTagsParser\",\"ModeTagsLexer\",null,null,\"file\",\"\",false);\n  assertEquals(null,found);\n  assertNull(getParseErrors());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 81,
      "astHeight" : 6
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 255,
        "startLineNumber" : 113,
        "startColumnNumber" : 3,
        "endLineNumber" : 121,
        "endColumnNumber" : 10
      },
      "nodeContext" : "\"parser grammar ModeTagsParser;\\n\" + \"\\n\" + \"options { tokenVocab=ModeTagsLexer; } // use tokens from ModeTagsLexer.g4\\n\"+ \"\\n\"+ \"file: (tag | TEXT)* ;\\n\"+ \"\\n\"+ \"tag : '«' ID '»'\\n\"+ \"    | '«' '/' ID '»'\\n\"+ \"    ;\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 7,
    "startLineNumber" : 121,
    "startColumnNumber" : 3,
    "endLineNumber" : 121,
    "endColumnNumber" : 10
  } ],
  "layoutRelationDataList" : [ ]
}