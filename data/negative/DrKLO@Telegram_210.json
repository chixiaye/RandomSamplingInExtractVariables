{
  "id" : 210,
  "expression" : "255 * line.alpha * transitionAlpha",
  "projectName" : "DrKLO@Telegram",
  "commitID" : "11fbfb1329df700b203e1852a71c4c11b5ab12f4",
  "filePath" : "/TMessagesProj/src/main/java/org/telegram/ui/Charts/LinearChartView.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "255 * line.alpha * transitionAlpha",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 34,
      "startLineNumber" : 94,
      "startColumnNumber" : 43,
      "endLineNumber" : 94,
      "endColumnNumber" : 77
    },
    "astNodeNumber" : 6,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CastExpression,expression]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 94,
        "startColumnNumber" : 42,
        "endLineNumber" : 94,
        "endColumnNumber" : 78
      },
      "nodeContext" : "(255 * line.alpha * transitionAlpha)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 94,
        "startColumnNumber" : 36,
        "endLineNumber" : 94,
        "endColumnNumber" : 78
      },
      "nodeContext" : "(int)(255 * line.alpha * transitionAlpha)",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 94,
        "startColumnNumber" : 16,
        "endLineNumber" : 94,
        "endColumnNumber" : 79
      },
      "nodeContext" : "line.paint.setAlpha((int)(255 * line.alpha * transitionAlpha))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 94,
        "startColumnNumber" : 16,
        "endLineNumber" : 94,
        "endColumnNumber" : 80
      },
      "nodeContext" : "line.paint.setAlpha((int)(255 * line.alpha * transitionAlpha));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 3659,
        "startLineNumber" : 29,
        "startColumnNumber" : 51,
        "endLineNumber" : 104,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  LineViewData line=lines.get(k);\n  if (!line.enabled && line.alpha == 0)   continue;\n  int j=0;\n  float p;\n  if (chartData.xPercentage.length < 2) {\n    p=0f;\n  }\n else {\n    p=chartData.xPercentage[1] * fullWidth;\n  }\n  int[] y=line.line.y;\n  int additionalPoints=(int)(HORIZONTAL_PADDING / p) + 1;\n  line.chartPath.reset();\n  boolean first=true;\n  int localStart=Math.max(0,startXIndex - additionalPoints);\n  int localEnd=Math.min(chartData.xPercentage.length - 1,endXIndex + additionalPoints);\n  for (int i=localStart; i <= localEnd; i++) {\n    if (y[i] < 0)     continue;\n    float xPoint=chartData.xPercentage[i] * fullWidth - offset;\n    float yPercentage=((float)y[i] - currentMinHeight) / (currentMaxHeight - currentMinHeight);\n    float padding=line.paint.getStrokeWidth() / 2f;\n    float yPoint=getMeasuredHeight() - chartBottom - padding- (yPercentage) * (getMeasuredHeight() - chartBottom - SIGNATURE_TEXT_HEIGHT- padding);\n    if (USE_LINES) {\n      if (j == 0) {\n        line.linesPath[j++]=xPoint;\n        line.linesPath[j++]=yPoint;\n      }\n else {\n        line.linesPath[j++]=xPoint;\n        line.linesPath[j++]=yPoint;\n        line.linesPath[j++]=xPoint;\n        line.linesPath[j++]=yPoint;\n      }\n    }\n else {\n      if (first) {\n        first=false;\n        line.chartPath.moveTo(xPoint,yPoint);\n      }\n else {\n        line.chartPath.lineTo(xPoint,yPoint);\n      }\n    }\n  }\n  canvas.save();\n  float transitionAlpha=1f;\n  if (transitionMode == TRANSITION_MODE_PARENT) {\n    transitionAlpha=transitionParams.progress > 0.5f ? 0 : 1f - transitionParams.progress * 2f;\n    canvas.scale(1 + 2 * transitionParams.progress,1f,transitionParams.pX,transitionParams.pY);\n  }\n else   if (transitionMode == TRANSITION_MODE_CHILD) {\n    transitionAlpha=transitionParams.progress < 0.3f ? 0 : transitionParams.progress;\n    canvas.save();\n    canvas.scale(transitionParams.progress,transitionParams.needScaleY ? transitionParams.progress : 1f,transitionParams.pX,transitionParams.pY);\n  }\n else   if (transitionMode == TRANSITION_MODE_ALPHA_ENTER) {\n    transitionAlpha=transitionParams.progress;\n  }\n  line.paint.setAlpha((int)(255 * line.alpha * transitionAlpha));\n  if (endXIndex - startXIndex > 100) {\n    line.paint.setStrokeCap(Paint.Cap.SQUARE);\n  }\n else {\n    line.paint.setStrokeCap(Paint.Cap.ROUND);\n  }\n  if (!USE_LINES)   canvas.drawPath(line.chartPath,line.paint);\n else   canvas.drawLines(line.linesPath,0,j,line.paint);\n  canvas.restore();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 461,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3698,
        "startLineNumber" : 29,
        "startColumnNumber" : 12,
        "endLineNumber" : 104,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int k=0; k < lines.size(); k++) {\n  LineViewData line=lines.get(k);\n  if (!line.enabled && line.alpha == 0)   continue;\n  int j=0;\n  float p;\n  if (chartData.xPercentage.length < 2) {\n    p=0f;\n  }\n else {\n    p=chartData.xPercentage[1] * fullWidth;\n  }\n  int[] y=line.line.y;\n  int additionalPoints=(int)(HORIZONTAL_PADDING / p) + 1;\n  line.chartPath.reset();\n  boolean first=true;\n  int localStart=Math.max(0,startXIndex - additionalPoints);\n  int localEnd=Math.min(chartData.xPercentage.length - 1,endXIndex + additionalPoints);\n  for (int i=localStart; i <= localEnd; i++) {\n    if (y[i] < 0)     continue;\n    float xPoint=chartData.xPercentage[i] * fullWidth - offset;\n    float yPercentage=((float)y[i] - currentMinHeight) / (currentMaxHeight - currentMinHeight);\n    float padding=line.paint.getStrokeWidth() / 2f;\n    float yPoint=getMeasuredHeight() - chartBottom - padding- (yPercentage) * (getMeasuredHeight() - chartBottom - SIGNATURE_TEXT_HEIGHT- padding);\n    if (USE_LINES) {\n      if (j == 0) {\n        line.linesPath[j++]=xPoint;\n        line.linesPath[j++]=yPoint;\n      }\n else {\n        line.linesPath[j++]=xPoint;\n        line.linesPath[j++]=yPoint;\n        line.linesPath[j++]=xPoint;\n        line.linesPath[j++]=yPoint;\n      }\n    }\n else {\n      if (first) {\n        first=false;\n        line.chartPath.moveTo(xPoint,yPoint);\n      }\n else {\n        line.chartPath.lineTo(xPoint,yPoint);\n      }\n    }\n  }\n  canvas.save();\n  float transitionAlpha=1f;\n  if (transitionMode == TRANSITION_MODE_PARENT) {\n    transitionAlpha=transitionParams.progress > 0.5f ? 0 : 1f - transitionParams.progress * 2f;\n    canvas.scale(1 + 2 * transitionParams.progress,1f,transitionParams.pX,transitionParams.pY);\n  }\n else   if (transitionMode == TRANSITION_MODE_CHILD) {\n    transitionAlpha=transitionParams.progress < 0.3f ? 0 : transitionParams.progress;\n    canvas.save();\n    canvas.scale(transitionParams.progress,transitionParams.needScaleY ? transitionParams.progress : 1f,transitionParams.pX,transitionParams.pY);\n  }\n else   if (transitionMode == TRANSITION_MODE_ALPHA_ENTER) {\n    transitionAlpha=transitionParams.progress;\n  }\n  line.paint.setAlpha((int)(255 * line.alpha * transitionAlpha));\n  if (endXIndex - startXIndex > 100) {\n    line.paint.setStrokeCap(Paint.Cap.SQUARE);\n  }\n else {\n    line.paint.setStrokeCap(Paint.Cap.ROUND);\n  }\n  if (!USE_LINES)   canvas.drawPath(line.chartPath,line.paint);\n else   canvas.drawLines(line.linesPath,0,j,line.paint);\n  canvas.restore();\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 474,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 3916,
        "startLineNumber" : 24,
        "startColumnNumber" : 31,
        "endLineNumber" : 105,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  float fullWidth=(chartWidth / (pickerDelegate.pickerEnd - pickerDelegate.pickerStart));\n  float offset=fullWidth * (pickerDelegate.pickerStart) - HORIZONTAL_PADDING;\n  for (int k=0; k < lines.size(); k++) {\n    LineViewData line=lines.get(k);\n    if (!line.enabled && line.alpha == 0)     continue;\n    int j=0;\n    float p;\n    if (chartData.xPercentage.length < 2) {\n      p=0f;\n    }\n else {\n      p=chartData.xPercentage[1] * fullWidth;\n    }\n    int[] y=line.line.y;\n    int additionalPoints=(int)(HORIZONTAL_PADDING / p) + 1;\n    line.chartPath.reset();\n    boolean first=true;\n    int localStart=Math.max(0,startXIndex - additionalPoints);\n    int localEnd=Math.min(chartData.xPercentage.length - 1,endXIndex + additionalPoints);\n    for (int i=localStart; i <= localEnd; i++) {\n      if (y[i] < 0)       continue;\n      float xPoint=chartData.xPercentage[i] * fullWidth - offset;\n      float yPercentage=((float)y[i] - currentMinHeight) / (currentMaxHeight - currentMinHeight);\n      float padding=line.paint.getStrokeWidth() / 2f;\n      float yPoint=getMeasuredHeight() - chartBottom - padding- (yPercentage) * (getMeasuredHeight() - chartBottom - SIGNATURE_TEXT_HEIGHT- padding);\n      if (USE_LINES) {\n        if (j == 0) {\n          line.linesPath[j++]=xPoint;\n          line.linesPath[j++]=yPoint;\n        }\n else {\n          line.linesPath[j++]=xPoint;\n          line.linesPath[j++]=yPoint;\n          line.linesPath[j++]=xPoint;\n          line.linesPath[j++]=yPoint;\n        }\n      }\n else {\n        if (first) {\n          first=false;\n          line.chartPath.moveTo(xPoint,yPoint);\n        }\n else {\n          line.chartPath.lineTo(xPoint,yPoint);\n        }\n      }\n    }\n    canvas.save();\n    float transitionAlpha=1f;\n    if (transitionMode == TRANSITION_MODE_PARENT) {\n      transitionAlpha=transitionParams.progress > 0.5f ? 0 : 1f - transitionParams.progress * 2f;\n      canvas.scale(1 + 2 * transitionParams.progress,1f,transitionParams.pX,transitionParams.pY);\n    }\n else     if (transitionMode == TRANSITION_MODE_CHILD) {\n      transitionAlpha=transitionParams.progress < 0.3f ? 0 : transitionParams.progress;\n      canvas.save();\n      canvas.scale(transitionParams.progress,transitionParams.needScaleY ? transitionParams.progress : 1f,transitionParams.pX,transitionParams.pY);\n    }\n else     if (transitionMode == TRANSITION_MODE_ALPHA_ENTER) {\n      transitionAlpha=transitionParams.progress;\n    }\n    line.paint.setAlpha((int)(255 * line.alpha * transitionAlpha));\n    if (endXIndex - startXIndex > 100) {\n      line.paint.setStrokeCap(Paint.Cap.SQUARE);\n    }\n else {\n      line.paint.setStrokeCap(Paint.Cap.ROUND);\n    }\n    if (!USE_LINES)     canvas.drawPath(line.chartPath,line.paint);\n else     canvas.drawLines(line.linesPath,0,j,line.paint);\n    canvas.restore();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 502,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3939,
        "startLineNumber" : 24,
        "startColumnNumber" : 8,
        "endLineNumber" : 105,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (chartData != null) {\n  float fullWidth=(chartWidth / (pickerDelegate.pickerEnd - pickerDelegate.pickerStart));\n  float offset=fullWidth * (pickerDelegate.pickerStart) - HORIZONTAL_PADDING;\n  for (int k=0; k < lines.size(); k++) {\n    LineViewData line=lines.get(k);\n    if (!line.enabled && line.alpha == 0)     continue;\n    int j=0;\n    float p;\n    if (chartData.xPercentage.length < 2) {\n      p=0f;\n    }\n else {\n      p=chartData.xPercentage[1] * fullWidth;\n    }\n    int[] y=line.line.y;\n    int additionalPoints=(int)(HORIZONTAL_PADDING / p) + 1;\n    line.chartPath.reset();\n    boolean first=true;\n    int localStart=Math.max(0,startXIndex - additionalPoints);\n    int localEnd=Math.min(chartData.xPercentage.length - 1,endXIndex + additionalPoints);\n    for (int i=localStart; i <= localEnd; i++) {\n      if (y[i] < 0)       continue;\n      float xPoint=chartData.xPercentage[i] * fullWidth - offset;\n      float yPercentage=((float)y[i] - currentMinHeight) / (currentMaxHeight - currentMinHeight);\n      float padding=line.paint.getStrokeWidth() / 2f;\n      float yPoint=getMeasuredHeight() - chartBottom - padding- (yPercentage) * (getMeasuredHeight() - chartBottom - SIGNATURE_TEXT_HEIGHT- padding);\n      if (USE_LINES) {\n        if (j == 0) {\n          line.linesPath[j++]=xPoint;\n          line.linesPath[j++]=yPoint;\n        }\n else {\n          line.linesPath[j++]=xPoint;\n          line.linesPath[j++]=yPoint;\n          line.linesPath[j++]=xPoint;\n          line.linesPath[j++]=yPoint;\n        }\n      }\n else {\n        if (first) {\n          first=false;\n          line.chartPath.moveTo(xPoint,yPoint);\n        }\n else {\n          line.chartPath.lineTo(xPoint,yPoint);\n        }\n      }\n    }\n    canvas.save();\n    float transitionAlpha=1f;\n    if (transitionMode == TRANSITION_MODE_PARENT) {\n      transitionAlpha=transitionParams.progress > 0.5f ? 0 : 1f - transitionParams.progress * 2f;\n      canvas.scale(1 + 2 * transitionParams.progress,1f,transitionParams.pX,transitionParams.pY);\n    }\n else     if (transitionMode == TRANSITION_MODE_CHILD) {\n      transitionAlpha=transitionParams.progress < 0.3f ? 0 : transitionParams.progress;\n      canvas.save();\n      canvas.scale(transitionParams.progress,transitionParams.needScaleY ? transitionParams.progress : 1f,transitionParams.pX,transitionParams.pY);\n    }\n else     if (transitionMode == TRANSITION_MODE_ALPHA_ENTER) {\n      transitionAlpha=transitionParams.progress;\n    }\n    line.paint.setAlpha((int)(255 * line.alpha * transitionAlpha));\n    if (endXIndex - startXIndex > 100) {\n      line.paint.setStrokeCap(Paint.Cap.SQUARE);\n    }\n else {\n      line.paint.setStrokeCap(Paint.Cap.ROUND);\n    }\n    if (!USE_LINES)     canvas.drawPath(line.chartPath,line.paint);\n else     canvas.drawLines(line.linesPath,0,j,line.paint);\n    canvas.restore();\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 506,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3955,
        "startLineNumber" : 23,
        "startColumnNumber" : 44,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (chartData != null) {\n    float fullWidth=(chartWidth / (pickerDelegate.pickerEnd - pickerDelegate.pickerStart));\n    float offset=fullWidth * (pickerDelegate.pickerStart) - HORIZONTAL_PADDING;\n    for (int k=0; k < lines.size(); k++) {\n      LineViewData line=lines.get(k);\n      if (!line.enabled && line.alpha == 0)       continue;\n      int j=0;\n      float p;\n      if (chartData.xPercentage.length < 2) {\n        p=0f;\n      }\n else {\n        p=chartData.xPercentage[1] * fullWidth;\n      }\n      int[] y=line.line.y;\n      int additionalPoints=(int)(HORIZONTAL_PADDING / p) + 1;\n      line.chartPath.reset();\n      boolean first=true;\n      int localStart=Math.max(0,startXIndex - additionalPoints);\n      int localEnd=Math.min(chartData.xPercentage.length - 1,endXIndex + additionalPoints);\n      for (int i=localStart; i <= localEnd; i++) {\n        if (y[i] < 0)         continue;\n        float xPoint=chartData.xPercentage[i] * fullWidth - offset;\n        float yPercentage=((float)y[i] - currentMinHeight) / (currentMaxHeight - currentMinHeight);\n        float padding=line.paint.getStrokeWidth() / 2f;\n        float yPoint=getMeasuredHeight() - chartBottom - padding- (yPercentage) * (getMeasuredHeight() - chartBottom - SIGNATURE_TEXT_HEIGHT- padding);\n        if (USE_LINES) {\n          if (j == 0) {\n            line.linesPath[j++]=xPoint;\n            line.linesPath[j++]=yPoint;\n          }\n else {\n            line.linesPath[j++]=xPoint;\n            line.linesPath[j++]=yPoint;\n            line.linesPath[j++]=xPoint;\n            line.linesPath[j++]=yPoint;\n          }\n        }\n else {\n          if (first) {\n            first=false;\n            line.chartPath.moveTo(xPoint,yPoint);\n          }\n else {\n            line.chartPath.lineTo(xPoint,yPoint);\n          }\n        }\n      }\n      canvas.save();\n      float transitionAlpha=1f;\n      if (transitionMode == TRANSITION_MODE_PARENT) {\n        transitionAlpha=transitionParams.progress > 0.5f ? 0 : 1f - transitionParams.progress * 2f;\n        canvas.scale(1 + 2 * transitionParams.progress,1f,transitionParams.pX,transitionParams.pY);\n      }\n else       if (transitionMode == TRANSITION_MODE_CHILD) {\n        transitionAlpha=transitionParams.progress < 0.3f ? 0 : transitionParams.progress;\n        canvas.save();\n        canvas.scale(transitionParams.progress,transitionParams.needScaleY ? transitionParams.progress : 1f,transitionParams.pX,transitionParams.pY);\n      }\n else       if (transitionMode == TRANSITION_MODE_ALPHA_ENTER) {\n        transitionAlpha=transitionParams.progress;\n      }\n      line.paint.setAlpha((int)(255 * line.alpha * transitionAlpha));\n      if (endXIndex - startXIndex > 100) {\n        line.paint.setStrokeCap(Paint.Cap.SQUARE);\n      }\n else {\n        line.paint.setStrokeCap(Paint.Cap.ROUND);\n      }\n      if (!USE_LINES)       canvas.drawPath(line.chartPath,line.paint);\n else       canvas.drawLines(line.linesPath,0,j,line.paint);\n      canvas.restore();\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 507,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4009,
        "startLineNumber" : 22,
        "startColumnNumber" : 4,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override protected void drawChart(Canvas canvas){\n  if (chartData != null) {\n    float fullWidth=(chartWidth / (pickerDelegate.pickerEnd - pickerDelegate.pickerStart));\n    float offset=fullWidth * (pickerDelegate.pickerStart) - HORIZONTAL_PADDING;\n    for (int k=0; k < lines.size(); k++) {\n      LineViewData line=lines.get(k);\n      if (!line.enabled && line.alpha == 0)       continue;\n      int j=0;\n      float p;\n      if (chartData.xPercentage.length < 2) {\n        p=0f;\n      }\n else {\n        p=chartData.xPercentage[1] * fullWidth;\n      }\n      int[] y=line.line.y;\n      int additionalPoints=(int)(HORIZONTAL_PADDING / p) + 1;\n      line.chartPath.reset();\n      boolean first=true;\n      int localStart=Math.max(0,startXIndex - additionalPoints);\n      int localEnd=Math.min(chartData.xPercentage.length - 1,endXIndex + additionalPoints);\n      for (int i=localStart; i <= localEnd; i++) {\n        if (y[i] < 0)         continue;\n        float xPoint=chartData.xPercentage[i] * fullWidth - offset;\n        float yPercentage=((float)y[i] - currentMinHeight) / (currentMaxHeight - currentMinHeight);\n        float padding=line.paint.getStrokeWidth() / 2f;\n        float yPoint=getMeasuredHeight() - chartBottom - padding- (yPercentage) * (getMeasuredHeight() - chartBottom - SIGNATURE_TEXT_HEIGHT- padding);\n        if (USE_LINES) {\n          if (j == 0) {\n            line.linesPath[j++]=xPoint;\n            line.linesPath[j++]=yPoint;\n          }\n else {\n            line.linesPath[j++]=xPoint;\n            line.linesPath[j++]=yPoint;\n            line.linesPath[j++]=xPoint;\n            line.linesPath[j++]=yPoint;\n          }\n        }\n else {\n          if (first) {\n            first=false;\n            line.chartPath.moveTo(xPoint,yPoint);\n          }\n else {\n            line.chartPath.lineTo(xPoint,yPoint);\n          }\n        }\n      }\n      canvas.save();\n      float transitionAlpha=1f;\n      if (transitionMode == TRANSITION_MODE_PARENT) {\n        transitionAlpha=transitionParams.progress > 0.5f ? 0 : 1f - transitionParams.progress * 2f;\n        canvas.scale(1 + 2 * transitionParams.progress,1f,transitionParams.pX,transitionParams.pY);\n      }\n else       if (transitionMode == TRANSITION_MODE_CHILD) {\n        transitionAlpha=transitionParams.progress < 0.3f ? 0 : transitionParams.progress;\n        canvas.save();\n        canvas.scale(transitionParams.progress,transitionParams.needScaleY ? transitionParams.progress : 1f,transitionParams.pX,transitionParams.pY);\n      }\n else       if (transitionMode == TRANSITION_MODE_ALPHA_ENTER) {\n        transitionAlpha=transitionParams.progress;\n      }\n      line.paint.setAlpha((int)(255 * line.alpha * transitionAlpha));\n      if (endXIndex - startXIndex > 100) {\n        line.paint.setStrokeCap(Paint.Cap.SQUARE);\n      }\n else {\n        line.paint.setStrokeCap(Paint.Cap.ROUND);\n      }\n      if (!USE_LINES)       canvas.drawPath(line.chartPath,line.paint);\n else       canvas.drawLines(line.linesPath,0,j,line.paint);\n      canvas.restore();\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 517,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 94,
        "startColumnNumber" : 16,
        "endLineNumber" : 94,
        "endColumnNumber" : 80
      },
      "nodeContext" : "line.paint.setAlpha((int)(255 * line.alpha * transitionAlpha));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 7
    },
    "tokenLength" : 6,
    "type" : "float"
  } ],
  "positionList" : [ {
    "charLength" : 34,
    "startLineNumber" : 94,
    "startColumnNumber" : 43,
    "endLineNumber" : 94,
    "endColumnNumber" : 77
  } ],
  "layoutRelationDataList" : [ ]
}