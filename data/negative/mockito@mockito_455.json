{
  "id" : 455,
  "expression" : "\"{mock1.simpleMethod(1);=[mock1.simpleMethod(3);]}\"",
  "projectName" : "mockito@mockito",
  "commitID" : "7f036eb9ed79444adcec3a6c635870222b109e50",
  "filePath" : "/src/test/java/org/mockito/internal/junit/ArgMismatchFinderTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"{mock1.simpleMethod(1);=[mock1.simpleMethod(3);]}\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 51,
      "startLineNumber" : 131,
      "startColumnNumber" : 21,
      "endLineNumber" : 131,
      "endColumnNumber" : 72
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 131,
        "startColumnNumber" : 8,
        "endLineNumber" : 131,
        "endColumnNumber" : 96
      },
      "nodeContext" : "assertEquals(\"{mock1.simpleMethod(1);=[mock1.simpleMethod(3);]}\",mismatches.toString())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 89,
        "startLineNumber" : 131,
        "startColumnNumber" : 8,
        "endLineNumber" : 131,
        "endColumnNumber" : 97
      },
      "nodeContext" : "assertEquals(\"{mock1.simpleMethod(1);=[mock1.simpleMethod(3);]}\",mismatches.toString());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 476,
        "startLineNumber" : 120,
        "startColumnNumber" : 79,
        "endLineNumber" : 132,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  when(mock1.simpleMethod(1)).thenReturn(\"1\");\n  when(mock1.simpleMethod(2)).thenReturn(\"2\");\n  mock1.simpleMethod(2);\n  mock1.simpleMethod(3);\n  StubbingArgMismatches mismatches=finder.getStubbingArgMismatches(asList(mock1,mock2));\n  assertEquals(\"{mock1.simpleMethod(1);=[mock1.simpleMethod(3);]}\",mismatches.toString());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 50,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 562,
        "startLineNumber" : 119,
        "startColumnNumber" : 4,
        "endLineNumber" : 132,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void mismatch_reports_only_unstubbed_invocations() throws Exception {\n  when(mock1.simpleMethod(1)).thenReturn(\"1\");\n  when(mock1.simpleMethod(2)).thenReturn(\"2\");\n  mock1.simpleMethod(2);\n  mock1.simpleMethod(3);\n  StubbingArgMismatches mismatches=finder.getStubbingArgMismatches(asList(mock1,mock2));\n  assertEquals(\"{mock1.simpleMethod(1);=[mock1.simpleMethod(3);]}\",mismatches.toString());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 58,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 89,
        "startLineNumber" : 131,
        "startColumnNumber" : 8,
        "endLineNumber" : 131,
        "endColumnNumber" : 97
      },
      "nodeContext" : "assertEquals(\"{mock1.simpleMethod(1);=[mock1.simpleMethod(3);]}\",mismatches.toString());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 7,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 51,
    "startLineNumber" : 131,
    "startColumnNumber" : 21,
    "endLineNumber" : 131,
    "endColumnNumber" : 72
  } ],
  "layoutRelationDataList" : [ ]
}