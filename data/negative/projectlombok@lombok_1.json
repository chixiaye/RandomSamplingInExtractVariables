{
  "id" : 1,
  "expression" : "AccessLevel.PUBLIC",
  "projectName" : "projectlombok@lombok",
  "commitID" : "25def866b50860715ee7c315c678b8c3d1ba9b56",
  "filePath" : "/src/core/lombok/eclipse/handlers/HandleData.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "AccessLevel.PUBLIC",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 61,
      "startColumnNumber" : 69,
      "endLineNumber" : 61,
      "endColumnNumber" : 87
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 92,
        "startLineNumber" : 61,
        "startColumnNumber" : 2,
        "endLineNumber" : 61,
        "endColumnNumber" : 94
      },
      "nodeContext" : "new HandleGetter().generateGetterForType(typeNode,annotationNode,AccessLevel.PUBLIC,true)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 61,
        "startColumnNumber" : 2,
        "endLineNumber" : 61,
        "endColumnNumber" : 95
      },
      "nodeContext" : "new HandleGetter().generateGetterForType(typeNode,annotationNode,AccessLevel.PUBLIC,true);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1478,
        "startLineNumber" : 40,
        "startColumnNumber" : 99,
        "endLineNumber" : 66,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  Data ann=annotation.getInstance();\n  EclipseNode typeNode=annotationNode.up();\n  TypeDeclaration typeDecl=null;\n  if (typeNode.get() instanceof TypeDeclaration)   typeDecl=(TypeDeclaration)typeNode.get();\n  int modifiers=typeDecl == null ? 0 : typeDecl.modifiers;\n  boolean notAClass=(modifiers & (ClassFileConstants.AccInterface | ClassFileConstants.AccAnnotation | ClassFileConstants.AccEnum)) != 0;\n  if (typeDecl == null || notAClass) {\n    annotationNode.addError(\"@Data is only supported on a class.\");\n    return;\n  }\n  new HandleGetter().generateGetterForType(typeNode,annotationNode,AccessLevel.PUBLIC,true);\n  new HandleSetter().generateSetterForType(typeNode,annotationNode,AccessLevel.PUBLIC,true);\n  new HandleEqualsAndHashCode().generateEqualsAndHashCodeForType(typeNode,annotationNode);\n  new HandleToString().generateToStringForType(typeNode,annotationNode);\n  new HandleConstructor().generateRequiredArgsConstructor(typeNode,AccessLevel.PUBLIC,ann.staticConstructor(),true,ast);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 139,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1576,
        "startLineNumber" : 40,
        "startColumnNumber" : 1,
        "endLineNumber" : 66,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public void handle(AnnotationValues<Data> annotation,Annotation ast,EclipseNode annotationNode){\n  Data ann=annotation.getInstance();\n  EclipseNode typeNode=annotationNode.up();\n  TypeDeclaration typeDecl=null;\n  if (typeNode.get() instanceof TypeDeclaration)   typeDecl=(TypeDeclaration)typeNode.get();\n  int modifiers=typeDecl == null ? 0 : typeDecl.modifiers;\n  boolean notAClass=(modifiers & (ClassFileConstants.AccInterface | ClassFileConstants.AccAnnotation | ClassFileConstants.AccEnum)) != 0;\n  if (typeDecl == null || notAClass) {\n    annotationNode.addError(\"@Data is only supported on a class.\");\n    return;\n  }\n  new HandleGetter().generateGetterForType(typeNode,annotationNode,AccessLevel.PUBLIC,true);\n  new HandleSetter().generateSetterForType(typeNode,annotationNode,AccessLevel.PUBLIC,true);\n  new HandleEqualsAndHashCode().generateEqualsAndHashCodeForType(typeNode,annotationNode);\n  new HandleToString().generateToStringForType(typeNode,annotationNode);\n  new HandleConstructor().generateRequiredArgsConstructor(typeNode,AccessLevel.PUBLIC,ann.staticConstructor(),true,ast);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 158,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 61,
        "startColumnNumber" : 2,
        "endLineNumber" : 61,
        "endColumnNumber" : 95
      },
      "nodeContext" : "new HandleGetter().generateGetterForType(typeNode,annotationNode,AccessLevel.PUBLIC,true);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "lombok.AccessLevel"
  }, {
    "nodeContext" : "AccessLevel.PUBLIC",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 62,
      "startColumnNumber" : 69,
      "endLineNumber" : 62,
      "endColumnNumber" : 87
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 92,
        "startLineNumber" : 62,
        "startColumnNumber" : 2,
        "endLineNumber" : 62,
        "endColumnNumber" : 94
      },
      "nodeContext" : "new HandleSetter().generateSetterForType(typeNode,annotationNode,AccessLevel.PUBLIC,true)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 62,
        "startColumnNumber" : 2,
        "endLineNumber" : 62,
        "endColumnNumber" : 95
      },
      "nodeContext" : "new HandleSetter().generateSetterForType(typeNode,annotationNode,AccessLevel.PUBLIC,true);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1478,
        "startLineNumber" : 40,
        "startColumnNumber" : 99,
        "endLineNumber" : 66,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  Data ann=annotation.getInstance();\n  EclipseNode typeNode=annotationNode.up();\n  TypeDeclaration typeDecl=null;\n  if (typeNode.get() instanceof TypeDeclaration)   typeDecl=(TypeDeclaration)typeNode.get();\n  int modifiers=typeDecl == null ? 0 : typeDecl.modifiers;\n  boolean notAClass=(modifiers & (ClassFileConstants.AccInterface | ClassFileConstants.AccAnnotation | ClassFileConstants.AccEnum)) != 0;\n  if (typeDecl == null || notAClass) {\n    annotationNode.addError(\"@Data is only supported on a class.\");\n    return;\n  }\n  new HandleGetter().generateGetterForType(typeNode,annotationNode,AccessLevel.PUBLIC,true);\n  new HandleSetter().generateSetterForType(typeNode,annotationNode,AccessLevel.PUBLIC,true);\n  new HandleEqualsAndHashCode().generateEqualsAndHashCodeForType(typeNode,annotationNode);\n  new HandleToString().generateToStringForType(typeNode,annotationNode);\n  new HandleConstructor().generateRequiredArgsConstructor(typeNode,AccessLevel.PUBLIC,ann.staticConstructor(),true,ast);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 139,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1576,
        "startLineNumber" : 40,
        "startColumnNumber" : 1,
        "endLineNumber" : 66,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public void handle(AnnotationValues<Data> annotation,Annotation ast,EclipseNode annotationNode){\n  Data ann=annotation.getInstance();\n  EclipseNode typeNode=annotationNode.up();\n  TypeDeclaration typeDecl=null;\n  if (typeNode.get() instanceof TypeDeclaration)   typeDecl=(TypeDeclaration)typeNode.get();\n  int modifiers=typeDecl == null ? 0 : typeDecl.modifiers;\n  boolean notAClass=(modifiers & (ClassFileConstants.AccInterface | ClassFileConstants.AccAnnotation | ClassFileConstants.AccEnum)) != 0;\n  if (typeDecl == null || notAClass) {\n    annotationNode.addError(\"@Data is only supported on a class.\");\n    return;\n  }\n  new HandleGetter().generateGetterForType(typeNode,annotationNode,AccessLevel.PUBLIC,true);\n  new HandleSetter().generateSetterForType(typeNode,annotationNode,AccessLevel.PUBLIC,true);\n  new HandleEqualsAndHashCode().generateEqualsAndHashCodeForType(typeNode,annotationNode);\n  new HandleToString().generateToStringForType(typeNode,annotationNode);\n  new HandleConstructor().generateRequiredArgsConstructor(typeNode,AccessLevel.PUBLIC,ann.staticConstructor(),true,ast);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 158,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 62,
        "startColumnNumber" : 2,
        "endLineNumber" : 62,
        "endColumnNumber" : 95
      },
      "nodeContext" : "new HandleSetter().generateSetterForType(typeNode,annotationNode,AccessLevel.PUBLIC,true);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "lombok.AccessLevel"
  }, {
    "nodeContext" : "AccessLevel.PUBLIC",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 65,
      "startColumnNumber" : 68,
      "endLineNumber" : 65,
      "endColumnNumber" : 86
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 121,
        "startLineNumber" : 65,
        "startColumnNumber" : 2,
        "endLineNumber" : 65,
        "endColumnNumber" : 123
      },
      "nodeContext" : "new HandleConstructor().generateRequiredArgsConstructor(typeNode,AccessLevel.PUBLIC,ann.staticConstructor(),true,ast)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 122,
        "startLineNumber" : 65,
        "startColumnNumber" : 2,
        "endLineNumber" : 65,
        "endColumnNumber" : 124
      },
      "nodeContext" : "new HandleConstructor().generateRequiredArgsConstructor(typeNode,AccessLevel.PUBLIC,ann.staticConstructor(),true,ast);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1478,
        "startLineNumber" : 40,
        "startColumnNumber" : 99,
        "endLineNumber" : 66,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  Data ann=annotation.getInstance();\n  EclipseNode typeNode=annotationNode.up();\n  TypeDeclaration typeDecl=null;\n  if (typeNode.get() instanceof TypeDeclaration)   typeDecl=(TypeDeclaration)typeNode.get();\n  int modifiers=typeDecl == null ? 0 : typeDecl.modifiers;\n  boolean notAClass=(modifiers & (ClassFileConstants.AccInterface | ClassFileConstants.AccAnnotation | ClassFileConstants.AccEnum)) != 0;\n  if (typeDecl == null || notAClass) {\n    annotationNode.addError(\"@Data is only supported on a class.\");\n    return;\n  }\n  new HandleGetter().generateGetterForType(typeNode,annotationNode,AccessLevel.PUBLIC,true);\n  new HandleSetter().generateSetterForType(typeNode,annotationNode,AccessLevel.PUBLIC,true);\n  new HandleEqualsAndHashCode().generateEqualsAndHashCodeForType(typeNode,annotationNode);\n  new HandleToString().generateToStringForType(typeNode,annotationNode);\n  new HandleConstructor().generateRequiredArgsConstructor(typeNode,AccessLevel.PUBLIC,ann.staticConstructor(),true,ast);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 139,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1576,
        "startLineNumber" : 40,
        "startColumnNumber" : 1,
        "endLineNumber" : 66,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public void handle(AnnotationValues<Data> annotation,Annotation ast,EclipseNode annotationNode){\n  Data ann=annotation.getInstance();\n  EclipseNode typeNode=annotationNode.up();\n  TypeDeclaration typeDecl=null;\n  if (typeNode.get() instanceof TypeDeclaration)   typeDecl=(TypeDeclaration)typeNode.get();\n  int modifiers=typeDecl == null ? 0 : typeDecl.modifiers;\n  boolean notAClass=(modifiers & (ClassFileConstants.AccInterface | ClassFileConstants.AccAnnotation | ClassFileConstants.AccEnum)) != 0;\n  if (typeDecl == null || notAClass) {\n    annotationNode.addError(\"@Data is only supported on a class.\");\n    return;\n  }\n  new HandleGetter().generateGetterForType(typeNode,annotationNode,AccessLevel.PUBLIC,true);\n  new HandleSetter().generateSetterForType(typeNode,annotationNode,AccessLevel.PUBLIC,true);\n  new HandleEqualsAndHashCode().generateEqualsAndHashCodeForType(typeNode,annotationNode);\n  new HandleToString().generateToStringForType(typeNode,annotationNode);\n  new HandleConstructor().generateRequiredArgsConstructor(typeNode,AccessLevel.PUBLIC,ann.staticConstructor(),true,ast);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 158,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 122,
        "startLineNumber" : 65,
        "startColumnNumber" : 2,
        "endLineNumber" : 65,
        "endColumnNumber" : 124
      },
      "nodeContext" : "new HandleConstructor().generateRequiredArgsConstructor(typeNode,AccessLevel.PUBLIC,ann.staticConstructor(),true,ast);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "lombok.AccessLevel"
  } ],
  "positionList" : [ {
    "charLength" : 18,
    "startLineNumber" : 61,
    "startColumnNumber" : 69,
    "endLineNumber" : 61,
    "endColumnNumber" : 87
  }, {
    "charLength" : 18,
    "startLineNumber" : 62,
    "startColumnNumber" : 69,
    "endLineNumber" : 62,
    "endColumnNumber" : 87
  }, {
    "charLength" : 18,
    "startLineNumber" : 65,
    "startColumnNumber" : 68,
    "endLineNumber" : 65,
    "endColumnNumber" : 86
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  } ]
}