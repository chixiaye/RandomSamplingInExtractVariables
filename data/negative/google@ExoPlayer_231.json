{
  "id" : 231,
  "expression" : "i < bytesRead",
  "projectName" : "google@ExoPlayer",
  "commitID" : "4803ab3bd12b71fc32150e96475c0e16aaf6ddc5",
  "filePath" : "/library/datasource/src/test/java/com/google/android/exoplayer2/upstream/ByteArrayDataSourceTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "i < bytesRead",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 138,
      "startColumnNumber" : 26,
      "endLineNumber" : 138,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 180,
        "startLineNumber" : 138,
        "startColumnNumber" : 10,
        "endLineNumber" : 141,
        "endColumnNumber" : 11
      },
      "nodeContext" : "for (int i=0; i < bytesRead; i++) {\n  assertThat(outputBuffer[writeOffset + i]).isEqualTo(testData[dataOffset + accumulatedBytesRead + i]);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 28,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 825,
        "startLineNumber" : 134,
        "startColumnNumber" : 48,
        "endLineNumber" : 150,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  assertThat(bytesRead).isGreaterThan(0);\n  assertThat(bytesRead).isAtMost(requestedReadLength);\n  for (int i=0; i < bytesRead; i++) {\n    assertThat(outputBuffer[writeOffset + i]).isEqualTo(testData[dataOffset + accumulatedBytesRead + i]);\n  }\n  accumulatedBytesRead+=bytesRead;\n  assertThat(accumulatedBytesRead).isAtMost(expectedFinalBytesRead);\n  assertThat(accumulatedBytesRead == expectedFinalBytesRead || bytesRead == requestedReadLength).isTrue();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 66,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1047,
        "startLineNumber" : 134,
        "startColumnNumber" : 8,
        "endLineNumber" : 154,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (bytesRead != C.RESULT_END_OF_INPUT) {\n  assertThat(bytesRead).isGreaterThan(0);\n  assertThat(bytesRead).isAtMost(requestedReadLength);\n  for (int i=0; i < bytesRead; i++) {\n    assertThat(outputBuffer[writeOffset + i]).isEqualTo(testData[dataOffset + accumulatedBytesRead + i]);\n  }\n  accumulatedBytesRead+=bytesRead;\n  assertThat(accumulatedBytesRead).isAtMost(expectedFinalBytesRead);\n  assertThat(accumulatedBytesRead == expectedFinalBytesRead || bytesRead == requestedReadLength).isTrue();\n}\n else {\n  assertThat(accumulatedBytesRead).isEqualTo(expectedFinalBytesRead);\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 81,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 1475,
        "startLineNumber" : 127,
        "startColumnNumber" : 19,
        "endLineNumber" : 155,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  int requestedReadLength=min(maxReadLength,outputBufferLength - writeOffset);\n  assertThat(requestedReadLength).isGreaterThan(0);\n  int bytesRead=dataSource.read(outputBuffer,writeOffset,requestedReadLength);\n  if (bytesRead != C.RESULT_END_OF_INPUT) {\n    assertThat(bytesRead).isGreaterThan(0);\n    assertThat(bytesRead).isAtMost(requestedReadLength);\n    for (int i=0; i < bytesRead; i++) {\n      assertThat(outputBuffer[writeOffset + i]).isEqualTo(testData[dataOffset + accumulatedBytesRead + i]);\n    }\n    accumulatedBytesRead+=bytesRead;\n    assertThat(accumulatedBytesRead).isAtMost(expectedFinalBytesRead);\n    assertThat(accumulatedBytesRead == expectedFinalBytesRead || bytesRead == requestedReadLength).isTrue();\n  }\n else {\n    assertThat(accumulatedBytesRead).isEqualTo(expectedFinalBytesRead);\n    return;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 109,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1488,
        "startLineNumber" : 127,
        "startColumnNumber" : 6,
        "endLineNumber" : 155,
        "endColumnNumber" : 7
      },
      "nodeContext" : "while (true) {\n  int requestedReadLength=min(maxReadLength,outputBufferLength - writeOffset);\n  assertThat(requestedReadLength).isGreaterThan(0);\n  int bytesRead=dataSource.read(outputBuffer,writeOffset,requestedReadLength);\n  if (bytesRead != C.RESULT_END_OF_INPUT) {\n    assertThat(bytesRead).isGreaterThan(0);\n    assertThat(bytesRead).isAtMost(requestedReadLength);\n    for (int i=0; i < bytesRead; i++) {\n      assertThat(outputBuffer[writeOffset + i]).isEqualTo(testData[dataOffset + accumulatedBytesRead + i]);\n    }\n    accumulatedBytesRead+=bytesRead;\n    assertThat(accumulatedBytesRead).isAtMost(expectedFinalBytesRead);\n    assertThat(accumulatedBytesRead == expectedFinalBytesRead || bytesRead == requestedReadLength).isTrue();\n  }\n else {\n    assertThat(accumulatedBytesRead).isEqualTo(expectedFinalBytesRead);\n    return;\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 111,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1945,
        "startLineNumber" : 115,
        "startColumnNumber" : 8,
        "endLineNumber" : 156,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  long length=dataSource.open(new DataSpec(Uri.EMPTY,dataOffset,dataLength));\n  opened=true;\n  assertThat(expectFailOnOpen).isFalse();\n  assertThat(length).isEqualTo(dataLength != C.LENGTH_UNSET ? dataLength : expectedFinalBytesRead);\n  byte[] outputBuffer=new byte[outputBufferLength];\n  int accumulatedBytesRead=0;\n  while (true) {\n    int requestedReadLength=min(maxReadLength,outputBufferLength - writeOffset);\n    assertThat(requestedReadLength).isGreaterThan(0);\n    int bytesRead=dataSource.read(outputBuffer,writeOffset,requestedReadLength);\n    if (bytesRead != C.RESULT_END_OF_INPUT) {\n      assertThat(bytesRead).isGreaterThan(0);\n      assertThat(bytesRead).isAtMost(requestedReadLength);\n      for (int i=0; i < bytesRead; i++) {\n        assertThat(outputBuffer[writeOffset + i]).isEqualTo(testData[dataOffset + accumulatedBytesRead + i]);\n      }\n      accumulatedBytesRead+=bytesRead;\n      assertThat(accumulatedBytesRead).isAtMost(expectedFinalBytesRead);\n      assertThat(accumulatedBytesRead == expectedFinalBytesRead || bytesRead == requestedReadLength).isTrue();\n    }\n else {\n      assertThat(accumulatedBytesRead).isEqualTo(expectedFinalBytesRead);\n      return;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 167,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2108,
        "startLineNumber" : 115,
        "startColumnNumber" : 4,
        "endLineNumber" : 163,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  long length=dataSource.open(new DataSpec(Uri.EMPTY,dataOffset,dataLength));\n  opened=true;\n  assertThat(expectFailOnOpen).isFalse();\n  assertThat(length).isEqualTo(dataLength != C.LENGTH_UNSET ? dataLength : expectedFinalBytesRead);\n  byte[] outputBuffer=new byte[outputBufferLength];\n  int accumulatedBytesRead=0;\n  while (true) {\n    int requestedReadLength=min(maxReadLength,outputBufferLength - writeOffset);\n    assertThat(requestedReadLength).isGreaterThan(0);\n    int bytesRead=dataSource.read(outputBuffer,writeOffset,requestedReadLength);\n    if (bytesRead != C.RESULT_END_OF_INPUT) {\n      assertThat(bytesRead).isGreaterThan(0);\n      assertThat(bytesRead).isAtMost(requestedReadLength);\n      for (int i=0; i < bytesRead; i++) {\n        assertThat(outputBuffer[writeOffset + i]).isEqualTo(testData[dataOffset + accumulatedBytesRead + i]);\n      }\n      accumulatedBytesRead+=bytesRead;\n      assertThat(accumulatedBytesRead).isAtMost(expectedFinalBytesRead);\n      assertThat(accumulatedBytesRead == expectedFinalBytesRead || bytesRead == requestedReadLength).isTrue();\n    }\n else {\n      assertThat(accumulatedBytesRead).isEqualTo(expectedFinalBytesRead);\n      return;\n    }\n  }\n}\n catch (IOException e) {\n  if (expectFailOnOpen && !opened) {\n    return;\n  }\n  fail();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 184,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2399,
        "startLineNumber" : 108,
        "startColumnNumber" : 32,
        "endLineNumber" : 164,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int expectedFinalBytesRead=testData.length - dataOffset;\n  if (dataLength != C.LENGTH_UNSET) {\n    expectedFinalBytesRead=min(expectedFinalBytesRead,dataLength);\n  }\n  ByteArrayDataSource dataSource=new ByteArrayDataSource(testData);\n  boolean opened=false;\n  try {\n    long length=dataSource.open(new DataSpec(Uri.EMPTY,dataOffset,dataLength));\n    opened=true;\n    assertThat(expectFailOnOpen).isFalse();\n    assertThat(length).isEqualTo(dataLength != C.LENGTH_UNSET ? dataLength : expectedFinalBytesRead);\n    byte[] outputBuffer=new byte[outputBufferLength];\n    int accumulatedBytesRead=0;\n    while (true) {\n      int requestedReadLength=min(maxReadLength,outputBufferLength - writeOffset);\n      assertThat(requestedReadLength).isGreaterThan(0);\n      int bytesRead=dataSource.read(outputBuffer,writeOffset,requestedReadLength);\n      if (bytesRead != C.RESULT_END_OF_INPUT) {\n        assertThat(bytesRead).isGreaterThan(0);\n        assertThat(bytesRead).isAtMost(requestedReadLength);\n        for (int i=0; i < bytesRead; i++) {\n          assertThat(outputBuffer[writeOffset + i]).isEqualTo(testData[dataOffset + accumulatedBytesRead + i]);\n        }\n        accumulatedBytesRead+=bytesRead;\n        assertThat(accumulatedBytesRead).isAtMost(expectedFinalBytesRead);\n        assertThat(accumulatedBytesRead == expectedFinalBytesRead || bytesRead == requestedReadLength).isTrue();\n      }\n else {\n        assertThat(accumulatedBytesRead).isEqualTo(expectedFinalBytesRead);\n        return;\n      }\n    }\n  }\n catch (  IOException e) {\n    if (expectFailOnOpen && !opened) {\n      return;\n    }\n    fail();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 222,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3199,
        "startLineNumber" : 90,
        "startColumnNumber" : 2,
        "endLineNumber" : 164,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Tests reading from a  {@link ByteArrayDataSource} with various parameters.\n * @param testData The data that the {@link ByteArrayDataSource} will wrap.\n * @param dataOffset The offset from which to read data.\n * @param dataLength The total length of data to read.\n * @param outputBufferLength The length of the target buffer for each read.\n * @param writeOffset The offset into {@code outputBufferLength} for each read.\n * @param maxReadLength The maximum length of each read.\n * @param expectFailOnOpen Whether it is expected that opening the source will fail.\n */\nprivate void readTestData(byte[] testData,int dataOffset,int dataLength,int outputBufferLength,int writeOffset,int maxReadLength,boolean expectFailOnOpen){\n  int expectedFinalBytesRead=testData.length - dataOffset;\n  if (dataLength != C.LENGTH_UNSET) {\n    expectedFinalBytesRead=min(expectedFinalBytesRead,dataLength);\n  }\n  ByteArrayDataSource dataSource=new ByteArrayDataSource(testData);\n  boolean opened=false;\n  try {\n    long length=dataSource.open(new DataSpec(Uri.EMPTY,dataOffset,dataLength));\n    opened=true;\n    assertThat(expectFailOnOpen).isFalse();\n    assertThat(length).isEqualTo(dataLength != C.LENGTH_UNSET ? dataLength : expectedFinalBytesRead);\n    byte[] outputBuffer=new byte[outputBufferLength];\n    int accumulatedBytesRead=0;\n    while (true) {\n      int requestedReadLength=min(maxReadLength,outputBufferLength - writeOffset);\n      assertThat(requestedReadLength).isGreaterThan(0);\n      int bytesRead=dataSource.read(outputBuffer,writeOffset,requestedReadLength);\n      if (bytesRead != C.RESULT_END_OF_INPUT) {\n        assertThat(bytesRead).isGreaterThan(0);\n        assertThat(bytesRead).isAtMost(requestedReadLength);\n        for (int i=0; i < bytesRead; i++) {\n          assertThat(outputBuffer[writeOffset + i]).isEqualTo(testData[dataOffset + accumulatedBytesRead + i]);\n        }\n        accumulatedBytesRead+=bytesRead;\n        assertThat(accumulatedBytesRead).isAtMost(expectedFinalBytesRead);\n        assertThat(accumulatedBytesRead == expectedFinalBytesRead || bytesRead == requestedReadLength).isTrue();\n      }\n else {\n        assertThat(accumulatedBytesRead).isEqualTo(expectedFinalBytesRead);\n        return;\n      }\n    }\n  }\n catch (  IOException e) {\n    if (expectFailOnOpen && !opened) {\n      return;\n    }\n    fail();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 250,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 180,
        "startLineNumber" : 138,
        "startColumnNumber" : 10,
        "endLineNumber" : 141,
        "endColumnNumber" : 11
      },
      "nodeContext" : "for (int i=0; i < bytesRead; i++) {\n  assertThat(outputBuffer[writeOffset + i]).isEqualTo(testData[dataOffset + accumulatedBytesRead + i]);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 28,
      "astHeight" : 8
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 13,
    "startLineNumber" : 138,
    "startColumnNumber" : 26,
    "endLineNumber" : 138,
    "endColumnNumber" : 39
  } ],
  "layoutRelationDataList" : [ ]
}