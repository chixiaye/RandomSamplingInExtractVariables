{
  "id" : 256,
  "expression" : "RequestCode.HEART_BEAT",
  "projectName" : "apache@rocketmq",
  "commitID" : "7692d466e1fda6c29d52a61617cab1d82de8b884",
  "filePath" : "/snode/src/main/java/org/apache/rocketmq/snode/SnodeController.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "RequestCode.HEART_BEAT",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 22,
      "startLineNumber" : 332,
      "startColumnNumber" : 43,
      "endLineNumber" : 332,
      "endColumnNumber" : 65
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 114,
        "startLineNumber" : 332,
        "startColumnNumber" : 8,
        "endLineNumber" : 333,
        "endColumnNumber" : 35
      },
      "nodeContext" : "this.snodeServer.registerProcessor(RequestCode.HEART_BEAT,heartbeatProcessor,this.heartbeatExecutor)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 115,
        "startLineNumber" : 332,
        "startColumnNumber" : 8,
        "endLineNumber" : 333,
        "endColumnNumber" : 36
      },
      "nodeContext" : "this.snodeServer.registerProcessor(RequestCode.HEART_BEAT,heartbeatProcessor,this.heartbeatExecutor);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3370,
        "startLineNumber" : 327,
        "startColumnNumber" : 36,
        "endLineNumber" : 381,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  this.snodeServer.registerProcessor(RequestCode.SEND_MESSAGE_V2,sendMessageProcessor,this.sendMessageExecutor);\n  this.snodeServer.registerProcessor(RequestCode.CONSUMER_SEND_MSG_BACK,sendMessageProcessor,this.sendMessageExecutor);\n  this.snodeServer.registerProcessor(RequestCode.HEART_BEAT,heartbeatProcessor,this.heartbeatExecutor);\n  this.snodeServer.registerProcessor(RequestCode.UNREGISTER_CLIENT,heartbeatProcessor,this.heartbeatExecutor);\n  this.snodeServer.registerProcessor(RequestCode.CHECK_CLIENT_CONFIG,heartbeatProcessor,this.heartbeatExecutor);\n  this.snodeServer.registerProcessor(RequestCode.SNODE_PULL_MESSAGE,pullMessageProcessor,this.pullMessageExecutor);\n  this.snodeServer.registerProcessor(RequestCode.GET_CONSUMER_LIST_BY_GROUP,consumerManageProcessor,this.consumerManageExecutor);\n  this.snodeServer.registerProcessor(RequestCode.UPDATE_CONSUMER_OFFSET,consumerManageProcessor,this.consumerManageExecutor);\n  this.snodeServer.registerProcessor(RequestCode.QUERY_CONSUMER_OFFSET,consumerManageProcessor,this.consumerManageExecutor);\n  this.snodeServer.registerProcessor(RequestCode.GET_MIN_OFFSET,consumerManageProcessor,this.consumerManageExecutor);\n  this.snodeServer.registerProcessor(RequestCode.GET_MAX_OFFSET,consumerManageProcessor,this.consumerManageExecutor);\n  this.snodeServer.registerProcessor(RequestCode.SEARCH_OFFSET_BY_TIMESTAMP,consumerManageProcessor,this.consumerManageExecutor);\n  this.snodeServer.registerProcessor(RequestCode.CREATE_RETRY_TOPIC,consumerManageProcessor,this.consumerManageExecutor);\n  this.mqttRemotingServer.registerProcessor(RequestCode.MQTT_MESSAGE,defaultMqttMessageProcessor,handleMqttMessageExecutor);\n  defaultMqttMessageProcessor.registerMessageHanlder(MqttMessageType.CONNECT,new MqttConnectMessageHandler(this));\n  defaultMqttMessageProcessor.registerMessageHanlder(MqttMessageType.DISCONNECT,new MqttDisconnectMessageHandler(this));\n  defaultMqttMessageProcessor.registerMessageHanlder(MqttMessageType.PINGREQ,new MqttPingreqMessageHandler(this));\n  defaultMqttMessageProcessor.registerMessageHanlder(MqttMessageType.PUBLISH,new MqttPublishMessageHandler(this));\n  defaultMqttMessageProcessor.registerMessageHanlder(MqttMessageType.PUBACK,new MqttPubackMessageHandler(this));\n  defaultMqttMessageProcessor.registerMessageHanlder(MqttMessageType.PUBCOMP,new MqttPubcompMessageHandler(this));\n  defaultMqttMessageProcessor.registerMessageHanlder(MqttMessageType.PUBREC,new MqttPubrecMessageHandler(this));\n  defaultMqttMessageProcessor.registerMessageHanlder(MqttMessageType.PUBREL,new MqttPubrelMessageHandler(this));\n  defaultMqttMessageProcessor.registerMessageHanlder(MqttMessageType.SUBSCRIBE,new MqttSubscribeMessageHandler(this));\n  defaultMqttMessageProcessor.registerMessageHanlder(MqttMessageType.UNSUBSCRIBE,new MqttUnsubscribeMessagHandler(this));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 291,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3402,
        "startLineNumber" : 327,
        "startColumnNumber" : 4,
        "endLineNumber" : 381,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void registerProcessor(){\n  this.snodeServer.registerProcessor(RequestCode.SEND_MESSAGE_V2,sendMessageProcessor,this.sendMessageExecutor);\n  this.snodeServer.registerProcessor(RequestCode.CONSUMER_SEND_MSG_BACK,sendMessageProcessor,this.sendMessageExecutor);\n  this.snodeServer.registerProcessor(RequestCode.HEART_BEAT,heartbeatProcessor,this.heartbeatExecutor);\n  this.snodeServer.registerProcessor(RequestCode.UNREGISTER_CLIENT,heartbeatProcessor,this.heartbeatExecutor);\n  this.snodeServer.registerProcessor(RequestCode.CHECK_CLIENT_CONFIG,heartbeatProcessor,this.heartbeatExecutor);\n  this.snodeServer.registerProcessor(RequestCode.SNODE_PULL_MESSAGE,pullMessageProcessor,this.pullMessageExecutor);\n  this.snodeServer.registerProcessor(RequestCode.GET_CONSUMER_LIST_BY_GROUP,consumerManageProcessor,this.consumerManageExecutor);\n  this.snodeServer.registerProcessor(RequestCode.UPDATE_CONSUMER_OFFSET,consumerManageProcessor,this.consumerManageExecutor);\n  this.snodeServer.registerProcessor(RequestCode.QUERY_CONSUMER_OFFSET,consumerManageProcessor,this.consumerManageExecutor);\n  this.snodeServer.registerProcessor(RequestCode.GET_MIN_OFFSET,consumerManageProcessor,this.consumerManageExecutor);\n  this.snodeServer.registerProcessor(RequestCode.GET_MAX_OFFSET,consumerManageProcessor,this.consumerManageExecutor);\n  this.snodeServer.registerProcessor(RequestCode.SEARCH_OFFSET_BY_TIMESTAMP,consumerManageProcessor,this.consumerManageExecutor);\n  this.snodeServer.registerProcessor(RequestCode.CREATE_RETRY_TOPIC,consumerManageProcessor,this.consumerManageExecutor);\n  this.mqttRemotingServer.registerProcessor(RequestCode.MQTT_MESSAGE,defaultMqttMessageProcessor,handleMqttMessageExecutor);\n  defaultMqttMessageProcessor.registerMessageHanlder(MqttMessageType.CONNECT,new MqttConnectMessageHandler(this));\n  defaultMqttMessageProcessor.registerMessageHanlder(MqttMessageType.DISCONNECT,new MqttDisconnectMessageHandler(this));\n  defaultMqttMessageProcessor.registerMessageHanlder(MqttMessageType.PINGREQ,new MqttPingreqMessageHandler(this));\n  defaultMqttMessageProcessor.registerMessageHanlder(MqttMessageType.PUBLISH,new MqttPublishMessageHandler(this));\n  defaultMqttMessageProcessor.registerMessageHanlder(MqttMessageType.PUBACK,new MqttPubackMessageHandler(this));\n  defaultMqttMessageProcessor.registerMessageHanlder(MqttMessageType.PUBCOMP,new MqttPubcompMessageHandler(this));\n  defaultMqttMessageProcessor.registerMessageHanlder(MqttMessageType.PUBREC,new MqttPubrecMessageHandler(this));\n  defaultMqttMessageProcessor.registerMessageHanlder(MqttMessageType.PUBREL,new MqttPubrelMessageHandler(this));\n  defaultMqttMessageProcessor.registerMessageHanlder(MqttMessageType.SUBSCRIBE,new MqttSubscribeMessageHandler(this));\n  defaultMqttMessageProcessor.registerMessageHanlder(MqttMessageType.UNSUBSCRIBE,new MqttUnsubscribeMessagHandler(this));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 295,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 114,
        "startLineNumber" : 332,
        "startColumnNumber" : 8,
        "endLineNumber" : 333,
        "endColumnNumber" : 35
      },
      "nodeContext" : "this.snodeServer.registerProcessor(RequestCode.HEART_BEAT,heartbeatProcessor,this.heartbeatExecutor)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 3
    },
    "tokenLength" : 3,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 22,
    "startLineNumber" : 332,
    "startColumnNumber" : 43,
    "endLineNumber" : 332,
    "endColumnNumber" : 65
  } ],
  "layoutRelationDataList" : [ ]
}