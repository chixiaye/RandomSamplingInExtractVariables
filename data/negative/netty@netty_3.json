{
  "id" : 3,
  "expression" : "actualTypeParam instanceof ParameterizedType",
  "projectName" : "netty@netty",
  "commitID" : "8a68c3e58d4663ae42e41a90d0d11aec3c25016b",
  "filePath" : "/common/src/main/java/io/netty/util/internal/TypeParameterMatcher.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "actualTypeParam instanceof ParameterizedType",
    "nodeType" : "InstanceofExpression",
    "nodePosition" : {
      "charLength" : 44,
      "startLineNumber" : 104,
      "startColumnNumber" : 20,
      "endLineNumber" : 104,
      "endColumnNumber" : 64
    },
    "astNodeNumber" : 4,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 161,
        "startLineNumber" : 104,
        "startColumnNumber" : 16,
        "endLineNumber" : 106,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (actualTypeParam instanceof ParameterizedType) {\n  actualTypeParam=((ParameterizedType)actualTypeParam).getRawType();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 16,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2704,
        "startLineNumber" : 81,
        "startColumnNumber" : 72,
        "endLineNumber" : 136,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  int typeParamIndex=-1;\n  TypeVariable<?>[] typeParams=currentClass.getSuperclass().getTypeParameters();\n  for (int i=0; i < typeParams.length; i++) {\n    if (typeParamName.equals(typeParams[i].getName())) {\n      typeParamIndex=i;\n      break;\n    }\n  }\n  if (typeParamIndex < 0) {\n    throw new IllegalStateException(\"unknown type parameter '\" + typeParamName + \"': \"+ parametrizedSuperclass);\n  }\n  Type genericSuperType=currentClass.getGenericSuperclass();\n  if (!(genericSuperType instanceof ParameterizedType)) {\n    return Object.class;\n  }\n  Type[] actualTypeParams=((ParameterizedType)genericSuperType).getActualTypeArguments();\n  Type actualTypeParam=actualTypeParams[typeParamIndex];\n  if (actualTypeParam instanceof ParameterizedType) {\n    actualTypeParam=((ParameterizedType)actualTypeParam).getRawType();\n  }\n  if (actualTypeParam instanceof Class) {\n    return (Class<?>)actualTypeParam;\n  }\n  if (actualTypeParam instanceof GenericArrayType) {\n    Type componentType=((GenericArrayType)actualTypeParam).getGenericComponentType();\n    if (componentType instanceof ParameterizedType) {\n      componentType=((ParameterizedType)componentType).getRawType();\n    }\n    if (componentType instanceof Class) {\n      return Array.newInstance((Class<?>)componentType,0).getClass();\n    }\n  }\n  if (actualTypeParam instanceof TypeVariable) {\n    TypeVariable<?> v=(TypeVariable<?>)actualTypeParam;\n    if (!(v.getGenericDeclaration() instanceof Class)) {\n      return Object.class;\n    }\n    currentClass=thisClass;\n    parametrizedSuperclass=(Class<?>)v.getGenericDeclaration();\n    typeParamName=v.getName();\n    if (parametrizedSuperclass.isAssignableFrom(thisClass)) {\n      continue;\n    }\n    return Object.class;\n  }\n  return fail(thisClass,typeParamName);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 258,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2764,
        "startLineNumber" : 81,
        "startColumnNumber" : 12,
        "endLineNumber" : 136,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (currentClass.getSuperclass() == parametrizedSuperclass) {\n  int typeParamIndex=-1;\n  TypeVariable<?>[] typeParams=currentClass.getSuperclass().getTypeParameters();\n  for (int i=0; i < typeParams.length; i++) {\n    if (typeParamName.equals(typeParams[i].getName())) {\n      typeParamIndex=i;\n      break;\n    }\n  }\n  if (typeParamIndex < 0) {\n    throw new IllegalStateException(\"unknown type parameter '\" + typeParamName + \"': \"+ parametrizedSuperclass);\n  }\n  Type genericSuperType=currentClass.getGenericSuperclass();\n  if (!(genericSuperType instanceof ParameterizedType)) {\n    return Object.class;\n  }\n  Type[] actualTypeParams=((ParameterizedType)genericSuperType).getActualTypeArguments();\n  Type actualTypeParam=actualTypeParams[typeParamIndex];\n  if (actualTypeParam instanceof ParameterizedType) {\n    actualTypeParam=((ParameterizedType)actualTypeParam).getRawType();\n  }\n  if (actualTypeParam instanceof Class) {\n    return (Class<?>)actualTypeParam;\n  }\n  if (actualTypeParam instanceof GenericArrayType) {\n    Type componentType=((GenericArrayType)actualTypeParam).getGenericComponentType();\n    if (componentType instanceof ParameterizedType) {\n      componentType=((ParameterizedType)componentType).getRawType();\n    }\n    if (componentType instanceof Class) {\n      return Array.newInstance((Class<?>)componentType,0).getClass();\n    }\n  }\n  if (actualTypeParam instanceof TypeVariable) {\n    TypeVariable<?> v=(TypeVariable<?>)actualTypeParam;\n    if (!(v.getGenericDeclaration() instanceof Class)) {\n      return Object.class;\n    }\n    currentClass=thisClass;\n    parametrizedSuperclass=(Class<?>)v.getGenericDeclaration();\n    typeParamName=v.getName();\n    if (parametrizedSuperclass.isAssignableFrom(thisClass)) {\n      continue;\n    }\n    return Object.class;\n  }\n  return fail(thisClass,typeParamName);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 264,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 2960,
        "startLineNumber" : 80,
        "startColumnNumber" : 17,
        "endLineNumber" : 141,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (currentClass.getSuperclass() == parametrizedSuperclass) {\n    int typeParamIndex=-1;\n    TypeVariable<?>[] typeParams=currentClass.getSuperclass().getTypeParameters();\n    for (int i=0; i < typeParams.length; i++) {\n      if (typeParamName.equals(typeParams[i].getName())) {\n        typeParamIndex=i;\n        break;\n      }\n    }\n    if (typeParamIndex < 0) {\n      throw new IllegalStateException(\"unknown type parameter '\" + typeParamName + \"': \"+ parametrizedSuperclass);\n    }\n    Type genericSuperType=currentClass.getGenericSuperclass();\n    if (!(genericSuperType instanceof ParameterizedType)) {\n      return Object.class;\n    }\n    Type[] actualTypeParams=((ParameterizedType)genericSuperType).getActualTypeArguments();\n    Type actualTypeParam=actualTypeParams[typeParamIndex];\n    if (actualTypeParam instanceof ParameterizedType) {\n      actualTypeParam=((ParameterizedType)actualTypeParam).getRawType();\n    }\n    if (actualTypeParam instanceof Class) {\n      return (Class<?>)actualTypeParam;\n    }\n    if (actualTypeParam instanceof GenericArrayType) {\n      Type componentType=((GenericArrayType)actualTypeParam).getGenericComponentType();\n      if (componentType instanceof ParameterizedType) {\n        componentType=((ParameterizedType)componentType).getRawType();\n      }\n      if (componentType instanceof Class) {\n        return Array.newInstance((Class<?>)componentType,0).getClass();\n      }\n    }\n    if (actualTypeParam instanceof TypeVariable) {\n      TypeVariable<?> v=(TypeVariable<?>)actualTypeParam;\n      if (!(v.getGenericDeclaration() instanceof Class)) {\n        return Object.class;\n      }\n      currentClass=thisClass;\n      parametrizedSuperclass=(Class<?>)v.getGenericDeclaration();\n      typeParamName=v.getName();\n      if (parametrizedSuperclass.isAssignableFrom(thisClass)) {\n        continue;\n      }\n      return Object.class;\n    }\n    return fail(thisClass,typeParamName);\n  }\n  currentClass=currentClass.getSuperclass();\n  if (currentClass == null) {\n    return fail(thisClass,typeParamName);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 281,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2969,
        "startLineNumber" : 80,
        "startColumnNumber" : 8,
        "endLineNumber" : 141,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (; ; ) {\n  if (currentClass.getSuperclass() == parametrizedSuperclass) {\n    int typeParamIndex=-1;\n    TypeVariable<?>[] typeParams=currentClass.getSuperclass().getTypeParameters();\n    for (int i=0; i < typeParams.length; i++) {\n      if (typeParamName.equals(typeParams[i].getName())) {\n        typeParamIndex=i;\n        break;\n      }\n    }\n    if (typeParamIndex < 0) {\n      throw new IllegalStateException(\"unknown type parameter '\" + typeParamName + \"': \"+ parametrizedSuperclass);\n    }\n    Type genericSuperType=currentClass.getGenericSuperclass();\n    if (!(genericSuperType instanceof ParameterizedType)) {\n      return Object.class;\n    }\n    Type[] actualTypeParams=((ParameterizedType)genericSuperType).getActualTypeArguments();\n    Type actualTypeParam=actualTypeParams[typeParamIndex];\n    if (actualTypeParam instanceof ParameterizedType) {\n      actualTypeParam=((ParameterizedType)actualTypeParam).getRawType();\n    }\n    if (actualTypeParam instanceof Class) {\n      return (Class<?>)actualTypeParam;\n    }\n    if (actualTypeParam instanceof GenericArrayType) {\n      Type componentType=((GenericArrayType)actualTypeParam).getGenericComponentType();\n      if (componentType instanceof ParameterizedType) {\n        componentType=((ParameterizedType)componentType).getRawType();\n      }\n      if (componentType instanceof Class) {\n        return Array.newInstance((Class<?>)componentType,0).getClass();\n      }\n    }\n    if (actualTypeParam instanceof TypeVariable) {\n      TypeVariable<?> v=(TypeVariable<?>)actualTypeParam;\n      if (!(v.getGenericDeclaration() instanceof Class)) {\n        return Object.class;\n      }\n      currentClass=thisClass;\n      parametrizedSuperclass=(Class<?>)v.getGenericDeclaration();\n      typeParamName=v.getName();\n      if (parametrizedSuperclass.isAssignableFrom(thisClass)) {\n        continue;\n      }\n      return Object.class;\n    }\n    return fail(thisClass,typeParamName);\n  }\n  currentClass=currentClass.getSuperclass();\n  if (currentClass == null) {\n    return fail(thisClass,typeParamName);\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 282,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3088,
        "startLineNumber" : 76,
        "startColumnNumber" : 88,
        "endLineNumber" : 142,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final Class<?> thisClass=object.getClass();\n  Class<?> currentClass=thisClass;\n  for (; ; ) {\n    if (currentClass.getSuperclass() == parametrizedSuperclass) {\n      int typeParamIndex=-1;\n      TypeVariable<?>[] typeParams=currentClass.getSuperclass().getTypeParameters();\n      for (int i=0; i < typeParams.length; i++) {\n        if (typeParamName.equals(typeParams[i].getName())) {\n          typeParamIndex=i;\n          break;\n        }\n      }\n      if (typeParamIndex < 0) {\n        throw new IllegalStateException(\"unknown type parameter '\" + typeParamName + \"': \"+ parametrizedSuperclass);\n      }\n      Type genericSuperType=currentClass.getGenericSuperclass();\n      if (!(genericSuperType instanceof ParameterizedType)) {\n        return Object.class;\n      }\n      Type[] actualTypeParams=((ParameterizedType)genericSuperType).getActualTypeArguments();\n      Type actualTypeParam=actualTypeParams[typeParamIndex];\n      if (actualTypeParam instanceof ParameterizedType) {\n        actualTypeParam=((ParameterizedType)actualTypeParam).getRawType();\n      }\n      if (actualTypeParam instanceof Class) {\n        return (Class<?>)actualTypeParam;\n      }\n      if (actualTypeParam instanceof GenericArrayType) {\n        Type componentType=((GenericArrayType)actualTypeParam).getGenericComponentType();\n        if (componentType instanceof ParameterizedType) {\n          componentType=((ParameterizedType)componentType).getRawType();\n        }\n        if (componentType instanceof Class) {\n          return Array.newInstance((Class<?>)componentType,0).getClass();\n        }\n      }\n      if (actualTypeParam instanceof TypeVariable) {\n        TypeVariable<?> v=(TypeVariable<?>)actualTypeParam;\n        if (!(v.getGenericDeclaration() instanceof Class)) {\n          return Object.class;\n        }\n        currentClass=thisClass;\n        parametrizedSuperclass=(Class<?>)v.getGenericDeclaration();\n        typeParamName=v.getName();\n        if (parametrizedSuperclass.isAssignableFrom(thisClass)) {\n          continue;\n        }\n        return Object.class;\n      }\n      return fail(thisClass,typeParamName);\n    }\n    currentClass=currentClass.getSuperclass();\n    if (currentClass == null) {\n      return fail(thisClass,typeParamName);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 302,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3208,
        "startLineNumber" : 75,
        "startColumnNumber" : 4,
        "endLineNumber" : 142,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private static Class<?> find0(final Object object,Class<?> parametrizedSuperclass,String typeParamName){\n  final Class<?> thisClass=object.getClass();\n  Class<?> currentClass=thisClass;\n  for (; ; ) {\n    if (currentClass.getSuperclass() == parametrizedSuperclass) {\n      int typeParamIndex=-1;\n      TypeVariable<?>[] typeParams=currentClass.getSuperclass().getTypeParameters();\n      for (int i=0; i < typeParams.length; i++) {\n        if (typeParamName.equals(typeParams[i].getName())) {\n          typeParamIndex=i;\n          break;\n        }\n      }\n      if (typeParamIndex < 0) {\n        throw new IllegalStateException(\"unknown type parameter '\" + typeParamName + \"': \"+ parametrizedSuperclass);\n      }\n      Type genericSuperType=currentClass.getGenericSuperclass();\n      if (!(genericSuperType instanceof ParameterizedType)) {\n        return Object.class;\n      }\n      Type[] actualTypeParams=((ParameterizedType)genericSuperType).getActualTypeArguments();\n      Type actualTypeParam=actualTypeParams[typeParamIndex];\n      if (actualTypeParam instanceof ParameterizedType) {\n        actualTypeParam=((ParameterizedType)actualTypeParam).getRawType();\n      }\n      if (actualTypeParam instanceof Class) {\n        return (Class<?>)actualTypeParam;\n      }\n      if (actualTypeParam instanceof GenericArrayType) {\n        Type componentType=((GenericArrayType)actualTypeParam).getGenericComponentType();\n        if (componentType instanceof ParameterizedType) {\n          componentType=((ParameterizedType)componentType).getRawType();\n        }\n        if (componentType instanceof Class) {\n          return Array.newInstance((Class<?>)componentType,0).getClass();\n        }\n      }\n      if (actualTypeParam instanceof TypeVariable) {\n        TypeVariable<?> v=(TypeVariable<?>)actualTypeParam;\n        if (!(v.getGenericDeclaration() instanceof Class)) {\n          return Object.class;\n        }\n        currentClass=thisClass;\n        parametrizedSuperclass=(Class<?>)v.getGenericDeclaration();\n        typeParamName=v.getName();\n        if (parametrizedSuperclass.isAssignableFrom(thisClass)) {\n          continue;\n        }\n        return Object.class;\n      }\n      return fail(thisClass,typeParamName);\n    }\n    currentClass=currentClass.getSuperclass();\n    if (currentClass == null) {\n      return fail(thisClass,typeParamName);\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 325,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 161,
        "startLineNumber" : 104,
        "startColumnNumber" : 16,
        "endLineNumber" : 106,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (actualTypeParam instanceof ParameterizedType) {\n  actualTypeParam=((ParameterizedType)actualTypeParam).getRawType();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 16,
      "astHeight" : 9
    },
    "tokenLength" : 2,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 44,
    "startLineNumber" : 104,
    "startColumnNumber" : 20,
    "endLineNumber" : 104,
    "endColumnNumber" : 64
  } ],
  "layoutRelationDataList" : [ ]
}