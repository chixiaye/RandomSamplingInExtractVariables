{
  "id" : 378,
  "expression" : "entry",
  "projectName" : "apache@pulsar",
  "commitID" : "ded806fd52f6e2f182fa02052cbd82c2a6755098",
  "filePath" : "/pulsar-broker/src/test/java/org/apache/pulsar/broker/service/HashRangeAutoSplitStickyKeyConsumerSelectorTest.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "entry",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 52,
      "startColumnNumber" : 32,
      "endLineNumber" : 52,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 52,
        "startColumnNumber" : 32,
        "endLineNumber" : 52,
        "endColumnNumber" : 48
      },
      "nodeContext" : "entry.getValue()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 52,
        "startColumnNumber" : 12,
        "endLineNumber" : 52,
        "endColumnNumber" : 85
      },
      "nodeContext" : "Assert.assertEquals(entry.getValue(),expectedResult.get(entry.getKey()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 52,
        "startColumnNumber" : 12,
        "endLineNumber" : 52,
        "endColumnNumber" : 86
      },
      "nodeContext" : "Assert.assertEquals(entry.getValue(),expectedResult.get(entry.getKey()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 149,
        "startLineNumber" : 51,
        "startColumnNumber" : 101,
        "endLineNumber" : 54,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Assert.assertEquals(entry.getValue(),expectedResult.get(entry.getKey()));\n  expectedResult.remove(entry.getKey());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 242,
        "startLineNumber" : 51,
        "startColumnNumber" : 8,
        "endLineNumber" : 54,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Map.Entry<String,List<String>> entry : selector.getConsumerKeyHashRanges().entrySet()) {\n  Assert.assertEquals(entry.getValue(),expectedResult.get(entry.getKey()));\n  expectedResult.remove(entry.getKey());\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 41,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1093,
        "startLineNumber" : 37,
        "startColumnNumber" : 101,
        "endLineNumber" : 56,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  HashRangeAutoSplitStickyKeyConsumerSelector selector=new HashRangeAutoSplitStickyKeyConsumerSelector(2 << 5);\n  List<String> consumerName=Arrays.asList(\"consumer1\",\"consumer2\",\"consumer3\",\"consumer4\");\n  for (  String s : consumerName) {\n    Consumer consumer=mock(Consumer.class);\n    when(consumer.consumerName()).thenReturn(s);\n    selector.addConsumer(consumer);\n  }\n  Map<String,List<String>> expectedResult=new HashMap<>();\n  expectedResult.put(\"consumer1\",ImmutableList.of(\"[49, 64]\"));\n  expectedResult.put(\"consumer4\",ImmutableList.of(\"[33, 48]\"));\n  expectedResult.put(\"consumer2\",ImmutableList.of(\"[17, 32]\"));\n  expectedResult.put(\"consumer3\",ImmutableList.of(\"[0, 16]\"));\n  for (  Map.Entry<String,List<String>> entry : selector.getConsumerKeyHashRanges().entrySet()) {\n    Assert.assertEquals(entry.getValue(),expectedResult.get(entry.getKey()));\n    expectedResult.remove(entry.getKey());\n  }\n  Assert.assertEquals(expectedResult.size(),0);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 160,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1200,
        "startLineNumber" : 36,
        "startColumnNumber" : 4,
        "endLineNumber" : 56,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testGetConsumerKeyHashRanges() throws BrokerServiceException.ConsumerAssignException {\n  HashRangeAutoSplitStickyKeyConsumerSelector selector=new HashRangeAutoSplitStickyKeyConsumerSelector(2 << 5);\n  List<String> consumerName=Arrays.asList(\"consumer1\",\"consumer2\",\"consumer3\",\"consumer4\");\n  for (  String s : consumerName) {\n    Consumer consumer=mock(Consumer.class);\n    when(consumer.consumerName()).thenReturn(s);\n    selector.addConsumer(consumer);\n  }\n  Map<String,List<String>> expectedResult=new HashMap<>();\n  expectedResult.put(\"consumer1\",ImmutableList.of(\"[49, 64]\"));\n  expectedResult.put(\"consumer4\",ImmutableList.of(\"[33, 48]\"));\n  expectedResult.put(\"consumer2\",ImmutableList.of(\"[17, 32]\"));\n  expectedResult.put(\"consumer3\",ImmutableList.of(\"[0, 16]\"));\n  for (  Map.Entry<String,List<String>> entry : selector.getConsumerKeyHashRanges().entrySet()) {\n    Assert.assertEquals(entry.getValue(),expectedResult.get(entry.getKey()));\n    expectedResult.remove(entry.getKey());\n  }\n  Assert.assertEquals(expectedResult.size(),0);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 170,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 52,
        "startColumnNumber" : 12,
        "endLineNumber" : 52,
        "endColumnNumber" : 86
      },
      "nodeContext" : "Assert.assertEquals(entry.getValue(),expectedResult.get(entry.getKey()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>>"
  }, {
    "nodeContext" : "entry",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 52,
      "startColumnNumber" : 69,
      "endLineNumber" : 52,
      "endColumnNumber" : 74
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 52,
        "startColumnNumber" : 69,
        "endLineNumber" : 52,
        "endColumnNumber" : 83
      },
      "nodeContext" : "entry.getKey()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 52,
        "startColumnNumber" : 50,
        "endLineNumber" : 52,
        "endColumnNumber" : 84
      },
      "nodeContext" : "expectedResult.get(entry.getKey())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 52,
        "startColumnNumber" : 12,
        "endLineNumber" : 52,
        "endColumnNumber" : 85
      },
      "nodeContext" : "Assert.assertEquals(entry.getValue(),expectedResult.get(entry.getKey()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 52,
        "startColumnNumber" : 12,
        "endLineNumber" : 52,
        "endColumnNumber" : 86
      },
      "nodeContext" : "Assert.assertEquals(entry.getValue(),expectedResult.get(entry.getKey()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 149,
        "startLineNumber" : 51,
        "startColumnNumber" : 101,
        "endLineNumber" : 54,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Assert.assertEquals(entry.getValue(),expectedResult.get(entry.getKey()));\n  expectedResult.remove(entry.getKey());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 242,
        "startLineNumber" : 51,
        "startColumnNumber" : 8,
        "endLineNumber" : 54,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Map.Entry<String,List<String>> entry : selector.getConsumerKeyHashRanges().entrySet()) {\n  Assert.assertEquals(entry.getValue(),expectedResult.get(entry.getKey()));\n  expectedResult.remove(entry.getKey());\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 41,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1093,
        "startLineNumber" : 37,
        "startColumnNumber" : 101,
        "endLineNumber" : 56,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  HashRangeAutoSplitStickyKeyConsumerSelector selector=new HashRangeAutoSplitStickyKeyConsumerSelector(2 << 5);\n  List<String> consumerName=Arrays.asList(\"consumer1\",\"consumer2\",\"consumer3\",\"consumer4\");\n  for (  String s : consumerName) {\n    Consumer consumer=mock(Consumer.class);\n    when(consumer.consumerName()).thenReturn(s);\n    selector.addConsumer(consumer);\n  }\n  Map<String,List<String>> expectedResult=new HashMap<>();\n  expectedResult.put(\"consumer1\",ImmutableList.of(\"[49, 64]\"));\n  expectedResult.put(\"consumer4\",ImmutableList.of(\"[33, 48]\"));\n  expectedResult.put(\"consumer2\",ImmutableList.of(\"[17, 32]\"));\n  expectedResult.put(\"consumer3\",ImmutableList.of(\"[0, 16]\"));\n  for (  Map.Entry<String,List<String>> entry : selector.getConsumerKeyHashRanges().entrySet()) {\n    Assert.assertEquals(entry.getValue(),expectedResult.get(entry.getKey()));\n    expectedResult.remove(entry.getKey());\n  }\n  Assert.assertEquals(expectedResult.size(),0);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 160,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1200,
        "startLineNumber" : 36,
        "startColumnNumber" : 4,
        "endLineNumber" : 56,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testGetConsumerKeyHashRanges() throws BrokerServiceException.ConsumerAssignException {\n  HashRangeAutoSplitStickyKeyConsumerSelector selector=new HashRangeAutoSplitStickyKeyConsumerSelector(2 << 5);\n  List<String> consumerName=Arrays.asList(\"consumer1\",\"consumer2\",\"consumer3\",\"consumer4\");\n  for (  String s : consumerName) {\n    Consumer consumer=mock(Consumer.class);\n    when(consumer.consumerName()).thenReturn(s);\n    selector.addConsumer(consumer);\n  }\n  Map<String,List<String>> expectedResult=new HashMap<>();\n  expectedResult.put(\"consumer1\",ImmutableList.of(\"[49, 64]\"));\n  expectedResult.put(\"consumer4\",ImmutableList.of(\"[33, 48]\"));\n  expectedResult.put(\"consumer2\",ImmutableList.of(\"[17, 32]\"));\n  expectedResult.put(\"consumer3\",ImmutableList.of(\"[0, 16]\"));\n  for (  Map.Entry<String,List<String>> entry : selector.getConsumerKeyHashRanges().entrySet()) {\n    Assert.assertEquals(entry.getValue(),expectedResult.get(entry.getKey()));\n    expectedResult.remove(entry.getKey());\n  }\n  Assert.assertEquals(expectedResult.size(),0);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 170,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 52,
        "startColumnNumber" : 12,
        "endLineNumber" : 52,
        "endColumnNumber" : 86
      },
      "nodeContext" : "Assert.assertEquals(entry.getValue(),expectedResult.get(entry.getKey()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>>"
  }, {
    "nodeContext" : "entry",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 53,
      "startColumnNumber" : 34,
      "endLineNumber" : 53,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 53,
        "startColumnNumber" : 34,
        "endLineNumber" : 53,
        "endColumnNumber" : 48
      },
      "nodeContext" : "entry.getKey()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 53,
        "startColumnNumber" : 12,
        "endLineNumber" : 53,
        "endColumnNumber" : 49
      },
      "nodeContext" : "expectedResult.remove(entry.getKey())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 53,
        "startColumnNumber" : 12,
        "endLineNumber" : 53,
        "endColumnNumber" : 50
      },
      "nodeContext" : "expectedResult.remove(entry.getKey());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 149,
        "startLineNumber" : 51,
        "startColumnNumber" : 101,
        "endLineNumber" : 54,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Assert.assertEquals(entry.getValue(),expectedResult.get(entry.getKey()));\n  expectedResult.remove(entry.getKey());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 242,
        "startLineNumber" : 51,
        "startColumnNumber" : 8,
        "endLineNumber" : 54,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Map.Entry<String,List<String>> entry : selector.getConsumerKeyHashRanges().entrySet()) {\n  Assert.assertEquals(entry.getValue(),expectedResult.get(entry.getKey()));\n  expectedResult.remove(entry.getKey());\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 41,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1093,
        "startLineNumber" : 37,
        "startColumnNumber" : 101,
        "endLineNumber" : 56,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  HashRangeAutoSplitStickyKeyConsumerSelector selector=new HashRangeAutoSplitStickyKeyConsumerSelector(2 << 5);\n  List<String> consumerName=Arrays.asList(\"consumer1\",\"consumer2\",\"consumer3\",\"consumer4\");\n  for (  String s : consumerName) {\n    Consumer consumer=mock(Consumer.class);\n    when(consumer.consumerName()).thenReturn(s);\n    selector.addConsumer(consumer);\n  }\n  Map<String,List<String>> expectedResult=new HashMap<>();\n  expectedResult.put(\"consumer1\",ImmutableList.of(\"[49, 64]\"));\n  expectedResult.put(\"consumer4\",ImmutableList.of(\"[33, 48]\"));\n  expectedResult.put(\"consumer2\",ImmutableList.of(\"[17, 32]\"));\n  expectedResult.put(\"consumer3\",ImmutableList.of(\"[0, 16]\"));\n  for (  Map.Entry<String,List<String>> entry : selector.getConsumerKeyHashRanges().entrySet()) {\n    Assert.assertEquals(entry.getValue(),expectedResult.get(entry.getKey()));\n    expectedResult.remove(entry.getKey());\n  }\n  Assert.assertEquals(expectedResult.size(),0);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 160,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1200,
        "startLineNumber" : 36,
        "startColumnNumber" : 4,
        "endLineNumber" : 56,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testGetConsumerKeyHashRanges() throws BrokerServiceException.ConsumerAssignException {\n  HashRangeAutoSplitStickyKeyConsumerSelector selector=new HashRangeAutoSplitStickyKeyConsumerSelector(2 << 5);\n  List<String> consumerName=Arrays.asList(\"consumer1\",\"consumer2\",\"consumer3\",\"consumer4\");\n  for (  String s : consumerName) {\n    Consumer consumer=mock(Consumer.class);\n    when(consumer.consumerName()).thenReturn(s);\n    selector.addConsumer(consumer);\n  }\n  Map<String,List<String>> expectedResult=new HashMap<>();\n  expectedResult.put(\"consumer1\",ImmutableList.of(\"[49, 64]\"));\n  expectedResult.put(\"consumer4\",ImmutableList.of(\"[33, 48]\"));\n  expectedResult.put(\"consumer2\",ImmutableList.of(\"[17, 32]\"));\n  expectedResult.put(\"consumer3\",ImmutableList.of(\"[0, 16]\"));\n  for (  Map.Entry<String,List<String>> entry : selector.getConsumerKeyHashRanges().entrySet()) {\n    Assert.assertEquals(entry.getValue(),expectedResult.get(entry.getKey()));\n    expectedResult.remove(entry.getKey());\n  }\n  Assert.assertEquals(expectedResult.size(),0);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 170,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 53,
        "startColumnNumber" : 12,
        "endLineNumber" : 53,
        "endColumnNumber" : 50
      },
      "nodeContext" : "expectedResult.remove(entry.getKey());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>>"
  } ],
  "positionList" : [ {
    "charLength" : 5,
    "startLineNumber" : 52,
    "startColumnNumber" : 32,
    "endLineNumber" : 52,
    "endColumnNumber" : 37
  }, {
    "charLength" : 5,
    "startLineNumber" : 52,
    "startColumnNumber" : 69,
    "endLineNumber" : 52,
    "endColumnNumber" : 74
  }, {
    "charLength" : 5,
    "startLineNumber" : 53,
    "startColumnNumber" : 34,
    "endLineNumber" : 53,
    "endColumnNumber" : 39
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  } ]
}